{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2408",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "203",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "329",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "334",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "517",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "559",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "559",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "750",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "750",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "798",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "798",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "839",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "867",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "867",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "911",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "911",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "931",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "931",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "942",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "942",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "959",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "959",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "961",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "962",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "968",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "968",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "972",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "972",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "976",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "976",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "989",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "989",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1003",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1003",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1003",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1005",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1005",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1014",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1014",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1014",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1016",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1016",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1030",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1030",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1053",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1053",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1057",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1057",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1060",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1060",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1068",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1068",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1072",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1072",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1082",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1082",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1086",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1086",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1088",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1088",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1090",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1090",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1099",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1099",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1123",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1123",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1125",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1125",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1145",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1145",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1152",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1152",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1160",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1160",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1168",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1168",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1172",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1172",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1178",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1178",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1186",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1186",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1190",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1190",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1198",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1198",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1202",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1202",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1210",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1210",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1222",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1222",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1226",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1226",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1232",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1232",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1238",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1238",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1244",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1244",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1250",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1250",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1263",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1263",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1280",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1280",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1290",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1290",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1309",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1309",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1312",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1312",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1329",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1329",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1332",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1332",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1335",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1335",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1340",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1340",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1347",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1347",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1359",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1359",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2408/BatchInserterImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2408/BatchInserterImpl.java\nindex 382d1018b31..0d980281dfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2408/BatchInserterImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2408/BatchInserterImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.batchinsert.internal;\n \n import java.io.Closeable;\n@@ -177,1195 +178,1187 @@ import static org.neo4j.kernel.impl.store.PropertyStore.encodeString;\n \n public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvider\n {\n-    private final LifeSupport life;\n-    private final NeoStores neoStores;\n-    private final IndexConfigStore indexStore;\n-    private final File storeDir;\n-    private final BatchTokenHolder propertyKeyTokens;\n-    private final BatchTokenHolder relationshipTypeTokens;\n-    private final BatchTokenHolder labelTokens;\n-    private final IdGeneratorFactory idGeneratorFactory;\n-    private final IndexProviderMap schemaIndexProviders;\n-    private final LabelScanStore labelScanStore;\n-    private final Log msgLog;\n-    private final SchemaCache schemaCache;\n-    private final Config config;\n-    private final BatchInserterImpl.BatchSchemaActions actions;\n-    private final StoreLocker storeLocker;\n-    private final PageCache pageCache;\n-    private boolean labelsTouched;\n-    private boolean isShutdown;\n-\n-    private final LongFunction<Label> labelIdToLabelFunction = new LongFunction<Label>()\n-    {\n-        @Override\n-        public Label apply( long from )\n-        {\n-            return label( labelTokens.byId( safeCastLongToInt( from ) ).name() );\n-        }\n-    };\n-\n-    private final FlushStrategy flushStrategy;\n-    // Helper structure for setNodeProperty\n-    private final RelationshipCreator relationshipCreator;\n-    private final DirectRecordAccessSet recordAccess;\n-    private final PropertyTraverser propertyTraverser;\n-    private final PropertyCreator propertyCreator;\n-    private final PropertyDeleter propertyDeletor;\n-\n-    private final NodeStore nodeStore;\n-    private final RelationshipStore relationshipStore;\n-    private final RelationshipTypeTokenStore relationshipTypeTokenStore;\n-    private final PropertyKeyTokenStore propertyKeyTokenStore;\n-    private final PropertyStore propertyStore;\n-    private final RecordStore<RelationshipGroupRecord> relationshipGroupStore;\n-    private final SchemaStore schemaStore;\n-    private final NeoStoreIndexStoreView indexStoreView;\n-\n-    private final LabelTokenStore labelTokenStore;\n-    private final Locks.Client noopLockClient = new NoOpClient();\n-    private final long maxNodeId;\n-    private final RecordCursors cursors;\n-\n-    public BatchInserterImpl( final File storeDir, final FileSystemAbstraction fileSystem,\n-                       Map<String, String> stringParams, Iterable<KernelExtensionFactory<?>> kernelExtensions ) throws IOException\n-    {\n-        rejectAutoUpgrade( stringParams );\n-        Map<String, String> params = getDefaultParams();\n-        params.putAll( stringParams );\n-        this.config = Config.defaults( params );\n-\n-        life = new LifeSupport();\n-        this.storeDir = storeDir;\n-        storeLocker = tryLockStore( fileSystem );\n-        ConfiguringPageCacheFactory pageCacheFactory = new ConfiguringPageCacheFactory(\n-                fileSystem, config, PageCacheTracer.NULL, PageCursorTracerSupplier.NULL, NullLog.getInstance(),\n-                EmptyVersionContextSupplier.EMPTY );\n-        PageCache pageCache = pageCacheFactory.getOrCreatePageCache();\n-        life.add( new PageCacheLifecycle( pageCache ) );\n-\n-        config.augment( logs_directory, storeDir.getCanonicalPath() );\n-        File internalLog = config.get( store_internal_log_path );\n-\n-        StoreLogService logService = life.add( StoreLogService.withInternalLog( internalLog).build( fileSystem ) );\n-        msgLog = logService.getInternalLog( getClass() );\n-\n-        boolean dump = config.get( GraphDatabaseSettings.dump_configuration );\n-        this.idGeneratorFactory = new DefaultIdGeneratorFactory( fileSystem );\n-\n-        LogProvider internalLogProvider = logService.getInternalLogProvider();\n-        RecordFormats recordFormats = RecordFormatSelector.selectForStoreOrConfig( config, storeDir,\n-                pageCache, internalLogProvider );\n-        StoreFactory sf = new StoreFactory( this.storeDir, config, idGeneratorFactory, pageCache, fileSystem,\n-                recordFormats, internalLogProvider, EmptyVersionContextSupplier.EMPTY );\n-\n-        maxNodeId = recordFormats.node().getMaxId();\n-\n-        if ( dump )\n-        {\n-            dumpConfiguration( params, System.out );\n-        }\n-        msgLog.info( Thread.currentThread() + \" Starting BatchInserter(\" + this + \")\" );\n-        life.start();\n-        neoStores = sf.openAllNeoStores( true );\n-        neoStores.verifyStoreOk();\n-        this.pageCache = pageCache;\n-\n-        nodeStore = neoStores.getNodeStore();\n-        relationshipStore = neoStores.getRelationshipStore();\n-        relationshipTypeTokenStore = neoStores.getRelationshipTypeTokenStore();\n-        propertyKeyTokenStore = neoStores.getPropertyKeyTokenStore();\n-        propertyStore = neoStores.getPropertyStore();\n-        relationshipGroupStore = neoStores.getRelationshipGroupStore();\n-        schemaStore = neoStores.getSchemaStore();\n-        labelTokenStore = neoStores.getLabelTokenStore();\n-\n-        propertyKeyTokens = new BatchTokenHolder( propertyKeyTokenStore.getTokens( Integer.MAX_VALUE ) );\n-        labelTokens = new BatchTokenHolder( labelTokenStore.getTokens( Integer.MAX_VALUE ) );\n-        List<RelationshipTypeToken> types = relationshipTypeTokenStore.getTokens( Integer.MAX_VALUE );\n-        relationshipTypeTokens = new BatchTokenHolder( types );\n-        indexStore = life.add( new IndexConfigStore( this.storeDir, fileSystem ) );\n-        schemaCache = new SchemaCache( new StandardConstraintSemantics(), schemaStore );\n-\n-        indexStoreView = new NeoStoreIndexStoreView( LockService.NO_LOCK_SERVICE, neoStores );\n-\n-        Dependencies deps = new Dependencies();\n-        Monitors monitors = new Monitors();\n-        deps.satisfyDependencies( fileSystem, config, logService, indexStoreView, pageCache, monitors,\n-                RecoveryCleanupWorkCollector.immediate() );\n-\n-        KernelExtensions extensions = life.add( new KernelExtensions(\n-                new SimpleKernelContext( storeDir, DatabaseInfo.UNKNOWN, deps ),\n-                kernelExtensions, deps, UnsatisfiedDependencyStrategies.ignore() ) );\n-\n-        IndexProvider provider = extensions.resolveDependency( IndexProvider.class,\n-                HighestSelectionStrategy.INSTANCE );\n-        schemaIndexProviders = new DefaultIndexProviderMap( provider );\n-        labelScanStore = new NativeLabelScanStore( pageCache, fileSystem, storeDir, FullStoreChangeStream.EMPTY, false, new Monitors(),\n-                deps.resolveDependency( RecoveryCleanupWorkCollector.class ) );\n-        life.add( labelScanStore );\n-        actions = new BatchSchemaActions();\n-\n-        // Record access\n-        recordAccess = new DirectRecordAccessSet( neoStores );\n-        relationshipCreator = new RelationshipCreator(\n-                new RelationshipGroupGetter( relationshipGroupStore ), relationshipGroupStore.getStoreHeaderInt() );\n-        propertyTraverser = new PropertyTraverser();\n-        propertyCreator = new PropertyCreator( propertyStore, propertyTraverser );\n-        propertyDeletor = new PropertyDeleter( propertyTraverser );\n-\n-        flushStrategy = new BatchedFlushStrategy( recordAccess, config.get( GraphDatabaseSettings\n-                .batch_inserter_batch_size ) );\n-        cursors = new RecordCursors( neoStores );\n-    }\n-\n-    private StoreLocker tryLockStore( FileSystemAbstraction fileSystem )\n-    {\n-        StoreLocker storeLocker = new GlobalStoreLocker( fileSystem, this.storeDir );\n-        try\n-        {\n-            storeLocker.checkLock();\n-        }\n-        catch ( Exception e )\n-        {\n-            try\n-            {\n-                storeLocker.close();\n-            }\n-            catch ( IOException ce )\n-            {\n-                e.addSuppressed( ce );\n-            }\n-            throw e;\n-        }\n-        return storeLocker;\n-    }\n-\n-    private Map<String, String> getDefaultParams()\n-    {\n-        Map<String, String> params = new HashMap<>();\n-        params.put( GraphDatabaseSettings.pagecache_memory.name(), \"32m\" );\n-        return params;\n-    }\n-\n-    @Override\n-    public boolean nodeHasProperty( long node, String propertyName )\n-    {\n-        return primitiveHasProperty( getNodeRecord( node ).forChangingData(), propertyName );\n-    }\n-\n-    @Override\n-    public boolean relationshipHasProperty( long relationship, String propertyName )\n-    {\n-        return primitiveHasProperty(\n-                recordAccess.getRelRecords().getOrLoad( relationship, null ).forReadingData(), propertyName );\n-    }\n-\n-    @Override\n-    public void setNodeProperty( long node, String propertyName, Object propertyValue )\n-    {\n-        RecordProxy<NodeRecord,Void> nodeRecord = getNodeRecord( node );\n-        setPrimitiveProperty( nodeRecord, propertyName, propertyValue );\n-\n-        flushStrategy.flush();\n-    }\n-\n-    @Override\n-    public void setRelationshipProperty( long relationship, String propertyName, Object propertyValue )\n-    {\n-        RecordProxy<RelationshipRecord,Void> relationshipRecord = getRelationshipRecord( relationship );\n-        setPrimitiveProperty( relationshipRecord, propertyName, propertyValue );\n-\n-        flushStrategy.flush();\n-    }\n-\n-    @Override\n-    public void removeNodeProperty( long node, String propertyName )\n-    {\n-        int propertyKey = getOrCreatePropertyKeyId( propertyName );\n-        propertyDeletor.removePropertyIfExists( getNodeRecord( node ), propertyKey, recordAccess.getPropertyRecords() );\n-        flushStrategy.flush();\n-    }\n-\n+  private final LifeSupport life;\n+  private final NeoStores neoStores;\n+  private final IndexConfigStore indexStore;\n+  private final File storeDir;\n+  private final BatchTokenHolder propertyKeyTokens;\n+  private final BatchTokenHolder relationshipTypeTokens;\n+  private final BatchTokenHolder labelTokens;\n+  private final IdGeneratorFactory idGeneratorFactory;\n+  private final IndexProviderMap schemaIndexProviders;\n+  private final LabelScanStore labelScanStore;\n+  private final Log msgLog;\n+  private final SchemaCache schemaCache;\n+  private final Config config;\n+  private final BatchInserterImpl.BatchSchemaActions actions;\n+  private final StoreLocker storeLocker;\n+  private final PageCache pageCache;\n+  private boolean labelsTouched;\n+  private boolean isShutdown;\n+\n+  private final LongFunction<Label> labelIdToLabelFunction = new LongFunction<Label>()\n+  {\n     @Override\n-    public void removeRelationshipProperty( long relationship,\n-                                            String propertyName )\n-    {\n-        int propertyKey = getOrCreatePropertyKeyId( propertyName );\n-        propertyDeletor.removePropertyIfExists( getRelationshipRecord( relationship ), propertyKey,\n-                recordAccess.getPropertyRecords() );\n-        flushStrategy.flush();\n-    }\n-\n-    @Override\n-    public IndexCreator createDeferredSchemaIndex( Label label )\n-    {\n-        return new IndexCreatorImpl( actions, label );\n-    }\n-\n-    private void setPrimitiveProperty( RecordProxy<? extends PrimitiveRecord,Void> primitiveRecord,\n-            String propertyName, Object propertyValue )\n-    {\n-        int propertyKey = getOrCreatePropertyKeyId( propertyName );\n-        RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords = recordAccess.getPropertyRecords();\n-\n-        propertyCreator.primitiveSetProperty( primitiveRecord, propertyKey, ValueUtils.asValue( propertyValue ), propertyRecords );\n+    public Label apply(long from)\n+    {\n+      return label(labelTokens.byId(safeCastLongToInt(from)).name());\n+    }\n+  };\n+\n+  private final FlushStrategy flushStrategy;\n+  // Helper structure for setNodeProperty\n+  private final RelationshipCreator relationshipCreator;\n+  private final DirectRecordAccessSet recordAccess;\n+  private final PropertyTraverser propertyTraverser;\n+  private final PropertyCreator propertyCreator;\n+  private final PropertyDeleter propertyDeletor;\n+\n+  private final NodeStore nodeStore;\n+  private final RelationshipStore relationshipStore;\n+  private final RelationshipTypeTokenStore relationshipTypeTokenStore;\n+  private final PropertyKeyTokenStore propertyKeyTokenStore;\n+  private final PropertyStore propertyStore;\n+  private final RecordStore<RelationshipGroupRecord> relationshipGroupStore;\n+  private final SchemaStore schemaStore;\n+  private final NeoStoreIndexStoreView indexStoreView;\n+\n+  private final LabelTokenStore labelTokenStore;\n+  private final Locks.Client noopLockClient = new NoOpClient();\n+  private final long maxNodeId;\n+  private final RecordCursors cursors;\n+\n+  public BatchInserterImpl(final File storeDir, final FileSystemAbstraction fileSystem,\n+                           Map<String, String> stringParams, Iterable<KernelExtensionFactory<?>> kernelExtensions) throws IOException\n+  {\n+    rejectAutoUpgrade(stringParams);\n+    Map<String, String> params = getDefaultParams();\n+    params.putAll(stringParams);\n+    this.config = Config.defaults(params);\n+\n+    life = new LifeSupport();\n+    this.storeDir = storeDir;\n+    storeLocker = tryLockStore(fileSystem);\n+    ConfiguringPageCacheFactory pageCacheFactory = new ConfiguringPageCacheFactory(\n+        fileSystem, config, PageCacheTracer.NULL, PageCursorTracerSupplier.NULL, NullLog.getInstance(),\n+        EmptyVersionContextSupplier.EMPTY);\n+    PageCache pageCache = pageCacheFactory.getOrCreatePageCache();\n+    life.add(new PageCacheLifecycle(pageCache));\n+\n+    config.augment(logs_directory, storeDir.getCanonicalPath());\n+    File internalLog = config.get(store_internal_log_path);\n+\n+    StoreLogService logService = life.add(StoreLogService.withInternalLog(internalLog).build(fileSystem));\n+    msgLog = logService.getInternalLog(getClass());\n+\n+    boolean dump = config.get(GraphDatabaseSettings.dump_configuration);\n+    this.idGeneratorFactory = new DefaultIdGeneratorFactory(fileSystem);\n+\n+    LogProvider internalLogProvider = logService.getInternalLogProvider();\n+    RecordFormats recordFormats = RecordFormatSelector.selectForStoreOrConfig(config, storeDir,\n+        pageCache, internalLogProvider);\n+    StoreFactory sf = new StoreFactory(this.storeDir, config, idGeneratorFactory, pageCache, fileSystem,\n+        recordFormats, internalLogProvider, EmptyVersionContextSupplier.EMPTY);\n+\n+    maxNodeId = recordFormats.node().getMaxId();\n+\n+    if (dump)\n+    {\n+      dumpConfiguration(params, System.out);\n+    }\n+    msgLog.info(Thread.currentThread() + \" Starting BatchInserter(\" + this + \")\");\n+    life.start();\n+    neoStores = sf.openAllNeoStores(true);\n+    neoStores.verifyStoreOk();\n+    this.pageCache = pageCache;\n+\n+    nodeStore = neoStores.getNodeStore();\n+    relationshipStore = neoStores.getRelationshipStore();\n+    relationshipTypeTokenStore = neoStores.getRelationshipTypeTokenStore();\n+    propertyKeyTokenStore = neoStores.getPropertyKeyTokenStore();\n+    propertyStore = neoStores.getPropertyStore();\n+    relationshipGroupStore = neoStores.getRelationshipGroupStore();\n+    schemaStore = neoStores.getSchemaStore();\n+    labelTokenStore = neoStores.getLabelTokenStore();\n+\n+    propertyKeyTokens = new BatchTokenHolder(propertyKeyTokenStore.getTokens(Integer.MAX_VALUE));\n+    labelTokens = new BatchTokenHolder(labelTokenStore.getTokens(Integer.MAX_VALUE));\n+    List<RelationshipTypeToken> types = relationshipTypeTokenStore.getTokens(Integer.MAX_VALUE);\n+    relationshipTypeTokens = new BatchTokenHolder(types);\n+    indexStore = life.add(new IndexConfigStore(this.storeDir, fileSystem));\n+    schemaCache = new SchemaCache(new StandardConstraintSemantics(), schemaStore);\n+\n+    indexStoreView = new NeoStoreIndexStoreView(LockService.NO_LOCK_SERVICE, neoStores);\n+\n+    Dependencies deps = new Dependencies();\n+    Monitors monitors = new Monitors();\n+    deps.satisfyDependencies(fileSystem, config, logService, indexStoreView, pageCache, monitors,\n+        RecoveryCleanupWorkCollector.immediate());\n+\n+    KernelExtensions extensions = life.add(new KernelExtensions(\n+        new SimpleKernelContext(storeDir, DatabaseInfo.UNKNOWN, deps),\n+        kernelExtensions, deps, UnsatisfiedDependencyStrategies.ignore()));\n+\n+    IndexProvider provider = extensions.resolveDependency(IndexProvider.class,\n+        HighestSelectionStrategy.INSTANCE);\n+    schemaIndexProviders = new DefaultIndexProviderMap(provider);\n+    labelScanStore = new NativeLabelScanStore(pageCache, fileSystem, storeDir, FullStoreChangeStream.EMPTY, false, new Monitors(),\n+        deps.resolveDependency(RecoveryCleanupWorkCollector.class));\n+    life.add(labelScanStore);\n+    actions = new BatchSchemaActions();\n+\n+    // Record access\n+    recordAccess = new DirectRecordAccessSet(neoStores);\n+    relationshipCreator = new RelationshipCreator(\n+        new RelationshipGroupGetter(relationshipGroupStore), relationshipGroupStore.getStoreHeaderInt());\n+    propertyTraverser = new PropertyTraverser();\n+    propertyCreator = new PropertyCreator(propertyStore, propertyTraverser);\n+    propertyDeletor = new PropertyDeleter(propertyTraverser);\n+\n+    flushStrategy = new BatchedFlushStrategy(recordAccess, config.get(GraphDatabaseSettings\n+        .batch_inserter_batch_size));\n+    cursors = new RecordCursors(neoStores);\n+  }\n+\n+  private StoreLocker tryLockStore(FileSystemAbstraction fileSystem)\n+  {\n+    StoreLocker storeLocker = new GlobalStoreLocker(fileSystem, this.storeDir);\n+    try\n+    {\n+      storeLocker.checkLock();\n+    } catch (Exception e)\n+    {\n+      try\n+      {\n+        storeLocker.close();\n+      } catch (IOException ce)\n+      {\n+        e.addSuppressed(ce);\n+      }\n+      throw e;\n+    }\n+    return storeLocker;\n+  }\n+\n+  private Map<String, String> getDefaultParams()\n+  {\n+    Map<String, String> params = new HashMap<>();\n+    params.put(GraphDatabaseSettings.pagecache_memory.name(), \"32m\");\n+    return params;\n+  }\n+\n+  @Override\n+  public boolean nodeHasProperty(long node, String propertyName)\n+  {\n+    return primitiveHasProperty(getNodeRecord(node).forChangingData(), propertyName);\n+  }\n+\n+  @Override\n+  public boolean relationshipHasProperty(long relationship, String propertyName)\n+  {\n+    return primitiveHasProperty(\n+        recordAccess.getRelRecords().getOrLoad(relationship, null).forReadingData(), propertyName);\n+  }\n+\n+  @Override\n+  public void setNodeProperty(long node, String propertyName, Object propertyValue)\n+  {\n+    RecordProxy<NodeRecord, Void> nodeRecord = getNodeRecord(node);\n+    setPrimitiveProperty(nodeRecord, propertyName, propertyValue);\n+\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public void setRelationshipProperty(long relationship, String propertyName, Object propertyValue)\n+  {\n+    RecordProxy<RelationshipRecord, Void> relationshipRecord = getRelationshipRecord(relationship);\n+    setPrimitiveProperty(relationshipRecord, propertyName, propertyValue);\n+\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public void removeNodeProperty(long node, String propertyName)\n+  {\n+    int propertyKey = getOrCreatePropertyKeyId(propertyName);\n+    propertyDeletor.removePropertyIfExists(getNodeRecord(node), propertyKey, recordAccess.getPropertyRecords());\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public void removeRelationshipProperty(long relationship,\n+                                         String propertyName)\n+  {\n+    int propertyKey = getOrCreatePropertyKeyId(propertyName);\n+    propertyDeletor.removePropertyIfExists(getRelationshipRecord(relationship), propertyKey,\n+        recordAccess.getPropertyRecords());\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public IndexCreator createDeferredSchemaIndex(Label label)\n+  {\n+    return new IndexCreatorImpl(actions, label);\n+  }\n+\n+  private void setPrimitiveProperty(RecordProxy<? extends PrimitiveRecord, Void> primitiveRecord,\n+                                    String propertyName, Object propertyValue)\n+  {\n+    int propertyKey = getOrCreatePropertyKeyId(propertyName);\n+    RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords = recordAccess.getPropertyRecords();\n+\n+    propertyCreator.primitiveSetProperty(primitiveRecord, propertyKey, ValueUtils.asValue(propertyValue), propertyRecords);\n+  }\n+\n+  private void validateIndexCanBeCreated(int labelId, int[] propertyKeyIds)\n+  {\n+    verifyIndexOrUniquenessConstraintCanBeCreated(labelId, propertyKeyIds,\n+        \"Index for given {label;property} already exists\");\n+  }\n+\n+  private void validateUniquenessConstraintCanBeCreated(int labelId, int[] propertyKeyIds)\n+  {\n+    verifyIndexOrUniquenessConstraintCanBeCreated(labelId, propertyKeyIds,\n+        \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\");\n+  }\n+\n+  private void validateNodeKeyConstraintCanBeCreated(int labelId, int[] propertyKeyIds)\n+  {\n+    verifyIndexOrUniquenessConstraintCanBeCreated(labelId, propertyKeyIds,\n+        \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\");\n+  }\n+\n+  private void verifyIndexOrUniquenessConstraintCanBeCreated(int labelId, int[] propertyKeyIds, String errorMessage)\n+  {\n+    LabelSchemaDescriptor schemaDescriptor = SchemaDescriptorFactory.forLabel(labelId, propertyKeyIds);\n+    ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.uniqueForSchema(schemaDescriptor);\n+    ConstraintDescriptor nodeKeyDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema(schemaDescriptor);\n+    if (schemaCache.hasIndexRule(schemaDescriptor) ||\n+        schemaCache.hasConstraintRule(constraintDescriptor) ||\n+        schemaCache.hasConstraintRule(nodeKeyDescriptor))\n+    {\n+      throw new ConstraintViolationException(errorMessage);\n+    }\n+  }\n+\n+  private void validateNodePropertyExistenceConstraintCanBeCreated(int labelId, int[] propertyKeyIds)\n+  {\n+    ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.existsForLabel(labelId, propertyKeyIds);\n+\n+    if (schemaCache.hasConstraintRule(constraintDescriptor))\n+    {\n+      throw new ConstraintViolationException(\n+          \"Node property existence constraint for given {label;property} already exists\");\n+    }\n+  }\n+\n+  private void validateRelationshipConstraintCanBeCreated(int relTypeId, int propertyKeyId)\n+  {\n+    ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.existsForLabel(relTypeId, propertyKeyId);\n+\n+    if (schemaCache.hasConstraintRule(constraintDescriptor))\n+    {\n+      throw new ConstraintViolationException(\n+          \"Relationship property existence constraint for given {type;property} already exists\");\n+    }\n+  }\n+\n+  private void createIndexRule(int labelId, int[] propertyKeyIds)\n+  {\n+    IndexRule schemaRule = IndexRule.indexRule(\n+        schemaStore.nextId(),\n+        SchemaIndexDescriptorFactory.forLabel(labelId, propertyKeyIds),\n+        schemaIndexProviders.getDefaultProvider().getProviderDescriptor());\n+\n+    for (DynamicRecord record : schemaStore.allocateFrom(schemaRule))\n+    {\n+      schemaStore.updateRecord(record);\n     }\n-\n-    private void validateIndexCanBeCreated( int labelId, int[] propertyKeyIds )\n+    schemaCache.addSchemaRule(schemaRule);\n+    labelsTouched = true;\n+    flushStrategy.forceFlush();\n+  }\n+\n+  private void repopulateAllIndexes() throws IOException, IndexEntryConflictException\n+  {\n+    if (!labelsTouched)\n     {\n-        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds,\n-                \"Index for given {label;property} already exists\" );\n+      return;\n     }\n \n-    private void validateUniquenessConstraintCanBeCreated( int labelId, int[] propertyKeyIds )\n+    final IndexRule[] rules = getIndexesNeedingPopulation();\n+    final List<IndexPopulatorWithSchema> populators = new ArrayList<>(rules.length);\n+    try\n     {\n-        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds,\n-                \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\" );\n-    }\n+      final SchemaDescriptor[] descriptors = new LabelSchemaDescriptor[rules.length];\n \n-    private void validateNodeKeyConstraintCanBeCreated( int labelId, int[] propertyKeyIds )\n-    {\n-        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds,\n-                \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\" );\n-    }\n+      for (int i = 0; i < rules.length; i++)\n+      {\n+        IndexRule rule = rules[i];\n+        SchemaIndexDescriptor index = rule.getIndexDescriptor();\n+        descriptors[i] = index.schema();\n+        IndexPopulator populator = schemaIndexProviders.lookup(rule.getProviderDescriptor())\n+            .getPopulator(rule.getId(), index, new IndexSamplingConfig(config));\n+        populator.create();\n+        populators.add(new IndexPopulatorWithSchema(populator, index));\n+      }\n \n-    private void verifyIndexOrUniquenessConstraintCanBeCreated( int labelId, int[] propertyKeyIds, String errorMessage )\n-    {\n-        LabelSchemaDescriptor schemaDescriptor = SchemaDescriptorFactory.forLabel( labelId, propertyKeyIds );\n-        ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.uniqueForSchema( schemaDescriptor );\n-        ConstraintDescriptor nodeKeyDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema( schemaDescriptor );\n-        if ( schemaCache.hasIndexRule( schemaDescriptor ) ||\n-             schemaCache.hasConstraintRule( constraintDescriptor ) ||\n-             schemaCache.hasConstraintRule( nodeKeyDescriptor ) )\n+      Visitor<NodeUpdates, IOException> propertyUpdateVisitor = updates ->\n+      {\n+        // Do a lookup from which property has changed to a list of indexes worried about that property.\n+        // We do not need to load additional properties as the NodeUpdates for a full node store scan already\n+        // include all properties for the node.\n+        for (IndexEntryUpdate<IndexPopulatorWithSchema> indexUpdate : updates.forIndexKeys(populators))\n         {\n-            throw new ConstraintViolationException( errorMessage );\n+          try\n+          {\n+            indexUpdate.indexKey().add(indexUpdate);\n+          } catch (IndexEntryConflictException conflict)\n+          {\n+            throw conflict.notAllowed(indexUpdate.indexKey().index());\n+          }\n         }\n-    }\n+        return true;\n+      };\n \n-    private void validateNodePropertyExistenceConstraintCanBeCreated( int labelId, int[] propertyKeyIds )\n-    {\n-        ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.existsForLabel( labelId, propertyKeyIds );\n+      List<SchemaDescriptor> descriptorList = Arrays.asList(descriptors);\n+      int[] labelIds = descriptorList.stream()\n+          .mapToInt(SchemaDescriptor::keyId)\n+          .toArray();\n \n-        if ( schemaCache.hasConstraintRule( constraintDescriptor ) )\n-        {\n-            throw new ConstraintViolationException(\n-                        \"Node property existence constraint for given {label;property} already exists\" );\n-        }\n-    }\n+      int[] propertyKeyIds = descriptorList.stream()\n+          .flatMapToInt(d -> Arrays.stream(d.getPropertyIds()))\n+          .toArray();\n \n-    private void validateRelationshipConstraintCanBeCreated( int relTypeId, int propertyKeyId )\n-    {\n-        ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.existsForLabel( relTypeId, propertyKeyId );\n+      try (InitialNodeLabelCreationVisitor labelUpdateVisitor = new InitialNodeLabelCreationVisitor())\n+      {\n+        StoreScan<IOException> storeScan = indexStoreView.visitNodes(labelIds,\n+            propertyKeyId -> PrimitiveIntCollections.contains(propertyKeyIds, propertyKeyId),\n+            propertyUpdateVisitor, labelUpdateVisitor, true);\n+        storeScan.run();\n \n-        if ( schemaCache.hasConstraintRule( constraintDescriptor ) )\n+        for (IndexPopulatorWithSchema populator : populators)\n         {\n-            throw new ConstraintViolationException(\n-                        \"Relationship property existence constraint for given {type;property} already exists\" );\n+          populator.verifyDeferredConstraints(indexStoreView);\n+          populator.setPopulationCompletedSuccessfully(true);\n         }\n-    }\n-\n-    private void createIndexRule( int labelId, int[] propertyKeyIds )\n+      }\n+    } finally\n     {\n-        IndexRule schemaRule = IndexRule.indexRule(\n-                schemaStore.nextId(),\n-                SchemaIndexDescriptorFactory.forLabel( labelId, propertyKeyIds ),\n-                schemaIndexProviders.getDefaultProvider().getProviderDescriptor() );\n-\n-        for ( DynamicRecord record : schemaStore.allocateFrom( schemaRule ) )\n-        {\n-            schemaStore.updateRecord( record );\n-        }\n-        schemaCache.addSchemaRule( schemaRule );\n-        labelsTouched = true;\n-        flushStrategy.forceFlush();\n+      IOUtils.closeAll(populators);\n     }\n+  }\n \n-    private void repopulateAllIndexes() throws IOException, IndexEntryConflictException\n+  private void rebuildCounts()\n+  {\n+    CountsTracker counts = neoStores.getCounts();\n+    try\n     {\n-        if ( !labelsTouched )\n-        {\n-            return;\n-        }\n-\n-        final IndexRule[] rules = getIndexesNeedingPopulation();\n-        final List<IndexPopulatorWithSchema> populators = new ArrayList<>( rules.length );\n-        try\n-        {\n-            final SchemaDescriptor[] descriptors = new LabelSchemaDescriptor[rules.length];\n-\n-            for ( int i = 0; i < rules.length; i++ )\n-            {\n-                IndexRule rule = rules[i];\n-                SchemaIndexDescriptor index = rule.getIndexDescriptor();\n-                descriptors[i] = index.schema();\n-                IndexPopulator populator = schemaIndexProviders.lookup( rule.getProviderDescriptor() )\n-                        .getPopulator( rule.getId(), index, new IndexSamplingConfig( config ) );\n-                populator.create();\n-                populators.add( new IndexPopulatorWithSchema( populator, index ) );\n-            }\n-\n-            Visitor<NodeUpdates,IOException> propertyUpdateVisitor = updates ->\n-            {\n-                // Do a lookup from which property has changed to a list of indexes worried about that property.\n-                // We do not need to load additional properties as the NodeUpdates for a full node store scan already\n-                // include all properties for the node.\n-                for ( IndexEntryUpdate<IndexPopulatorWithSchema> indexUpdate : updates.forIndexKeys( populators ) )\n-                {\n-                    try\n-                    {\n-                        indexUpdate.indexKey().add( indexUpdate );\n-                    }\n-                    catch ( IndexEntryConflictException conflict )\n-                    {\n-                        throw conflict.notAllowed( indexUpdate.indexKey().index() );\n-                    }\n-                }\n-                return true;\n-            };\n-\n-            List<SchemaDescriptor> descriptorList = Arrays.asList( descriptors );\n-            int[] labelIds = descriptorList.stream()\n-                    .mapToInt( SchemaDescriptor::keyId )\n-                    .toArray();\n-\n-            int[] propertyKeyIds = descriptorList.stream()\n-                    .flatMapToInt( d -> Arrays.stream( d.getPropertyIds() ) )\n-                    .toArray();\n-\n-            try ( InitialNodeLabelCreationVisitor labelUpdateVisitor = new InitialNodeLabelCreationVisitor() )\n-            {\n-                StoreScan<IOException> storeScan = indexStoreView.visitNodes( labelIds,\n-                        propertyKeyId -> PrimitiveIntCollections.contains( propertyKeyIds, propertyKeyId ),\n-                        propertyUpdateVisitor, labelUpdateVisitor, true );\n-                storeScan.run();\n-\n-                for ( IndexPopulatorWithSchema populator : populators )\n-                {\n-                    populator.verifyDeferredConstraints( indexStoreView );\n-                    populator.setPopulationCompletedSuccessfully( true );\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            IOUtils.closeAll( populators );\n-        }\n-    }\n-\n-    private void rebuildCounts()\n+      counts.start();\n+    } catch (IOException e)\n     {\n-        CountsTracker counts = neoStores.getCounts();\n-        try\n-        {\n-            counts.start();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( e );\n-        }\n-\n-        CountsComputer.recomputeCounts( neoStores, pageCache );\n+      throw new UnderlyingStorageException(e);\n     }\n \n-    private class InitialNodeLabelCreationVisitor implements Visitor<NodeLabelUpdate, IOException>, Closeable\n-    {\n-        LabelScanWriter writer = labelScanStore.newWriter();\n-\n-        @Override\n-        public boolean visit( NodeLabelUpdate update ) throws IOException\n-        {\n-            writer.write( update );\n-            return true;\n-        }\n+    CountsComputer.recomputeCounts(neoStores, pageCache);\n+  }\n \n-        @Override\n-        public void close() throws IOException\n-        {\n-            writer.close();\n-        }\n-    }\n+  private class InitialNodeLabelCreationVisitor implements Visitor<NodeLabelUpdate, IOException>, Closeable\n+  {\n+    LabelScanWriter writer = labelScanStore.newWriter();\n \n-    private IndexRule[] getIndexesNeedingPopulation()\n+    @Override\n+    public boolean visit(NodeLabelUpdate update) throws IOException\n     {\n-        List<IndexRule> indexesNeedingPopulation = new ArrayList<>();\n-        for ( IndexRule rule : schemaCache.indexRules() )\n-        {\n-            IndexProvider provider = schemaIndexProviders.lookup( rule.getProviderDescriptor() );\n-            if ( provider.getInitialState( rule.getId(), rule.getIndexDescriptor() ) != InternalIndexState.FAILED )\n-            {\n-                indexesNeedingPopulation.add( rule );\n-            }\n-        }\n-        return indexesNeedingPopulation.toArray( new IndexRule[indexesNeedingPopulation.size()] );\n+      writer.write(update);\n+      return true;\n     }\n \n     @Override\n-    public ConstraintCreator createDeferredConstraint( Label label )\n+    public void close() throws IOException\n+    {\n+      writer.close();\n+    }\n+  }\n+\n+  private IndexRule[] getIndexesNeedingPopulation()\n+  {\n+    List<IndexRule> indexesNeedingPopulation = new ArrayList<>();\n+    for (IndexRule rule : schemaCache.indexRules())\n     {\n-        return new BaseNodeConstraintCreator( new BatchSchemaActions(), label );\n-    }\n+      IndexProvider provider = schemaIndexProviders.lookup(rule.getProviderDescriptor());\n+      if (provider.getInitialState(rule.getId(), rule.getIndexDescriptor()) != InternalIndexState.FAILED)\n+      {\n+        indexesNeedingPopulation.add(rule);\n+      }\n+    }\n+    return indexesNeedingPopulation.toArray(new IndexRule[indexesNeedingPopulation.size()]);\n+  }\n \n-    private void createUniqueIndexAndOwningConstraint( SchemaIndexDescriptor schemaIndexDescriptor,\n-            IndexBackedConstraintDescriptor constraintDescriptor )\n-    {\n-        // TODO: Do not create duplicate index\n+  @Override\n+  public ConstraintCreator createDeferredConstraint(Label label)\n+  {\n+    return new BaseNodeConstraintCreator(new BatchSchemaActions(), label);\n+  }\n \n-        long indexRuleId = schemaStore.nextId();\n-        long constraintRuleId = schemaStore.nextId();\n+  private void createUniqueIndexAndOwningConstraint(SchemaIndexDescriptor schemaIndexDescriptor,\n+                                                    IndexBackedConstraintDescriptor constraintDescriptor)\n+  {\n+    // TODO: Do not create duplicate index\n \n-        IndexRule indexRule =\n-                IndexRule.constraintIndexRule(\n-                        indexRuleId,\n-                        schemaIndexDescriptor,\n-                        this.schemaIndexProviders.getDefaultProvider().getProviderDescriptor(),\n-                        constraintRuleId\n-                );\n-        ConstraintRule constraintRule =\n-                ConstraintRule.constraintRule(\n-                        constraintRuleId,\n-                        constraintDescriptor,\n-                        indexRuleId\n-                );\n+    long indexRuleId = schemaStore.nextId();\n+    long constraintRuleId = schemaStore.nextId();\n \n-        for ( DynamicRecord record : schemaStore.allocateFrom( constraintRule ) )\n-        {\n-            schemaStore.updateRecord( record );\n-        }\n-        schemaCache.addSchemaRule( constraintRule );\n-        for ( DynamicRecord record : schemaStore.allocateFrom( indexRule ) )\n-        {\n-            schemaStore.updateRecord( record );\n-        }\n-        schemaCache.addSchemaRule( indexRule );\n-        labelsTouched = true;\n-        flushStrategy.forceFlush();\n-    }\n+    IndexRule indexRule =\n+        IndexRule.constraintIndexRule(\n+            indexRuleId,\n+            schemaIndexDescriptor,\n+            this.schemaIndexProviders.getDefaultProvider().getProviderDescriptor(),\n+            constraintRuleId\n+        );\n+    ConstraintRule constraintRule =\n+        ConstraintRule.constraintRule(\n+            constraintRuleId,\n+            constraintDescriptor,\n+            indexRuleId\n+        );\n \n-    private void createUniquenessConstraintRule( LabelSchemaDescriptor descriptor )\n+    for (DynamicRecord record : schemaStore.allocateFrom(constraintRule))\n     {\n-        createUniqueIndexAndOwningConstraint(\n-                SchemaIndexDescriptorFactory.uniqueForSchema( descriptor ),\n-                ConstraintDescriptorFactory.uniqueForSchema( descriptor ) );\n+      schemaStore.updateRecord(record);\n     }\n-\n-    private void createNodeKeyConstraintRule( LabelSchemaDescriptor descriptor )\n+    schemaCache.addSchemaRule(constraintRule);\n+    for (DynamicRecord record : schemaStore.allocateFrom(indexRule))\n     {\n-        createUniqueIndexAndOwningConstraint(\n-                SchemaIndexDescriptorFactory.uniqueForSchema( descriptor ),\n-                ConstraintDescriptorFactory.nodeKeyForSchema( descriptor ) );\n+      schemaStore.updateRecord(record);\n     }\n+    schemaCache.addSchemaRule(indexRule);\n+    labelsTouched = true;\n+    flushStrategy.forceFlush();\n+  }\n \n-    private void createNodePropertyExistenceConstraintRule( int labelId, int... propertyKeyIds )\n-    {\n-        SchemaRule rule = ConstraintRule.constraintRule( schemaStore.nextId(),\n-                ConstraintDescriptorFactory.existsForLabel( labelId, propertyKeyIds ) );\n+  private void createUniquenessConstraintRule(LabelSchemaDescriptor descriptor)\n+  {\n+    createUniqueIndexAndOwningConstraint(\n+        SchemaIndexDescriptorFactory.uniqueForSchema(descriptor),\n+        ConstraintDescriptorFactory.uniqueForSchema(descriptor));\n+  }\n \n-        for ( DynamicRecord record : schemaStore.allocateFrom( rule ) )\n-        {\n-            schemaStore.updateRecord( record );\n-        }\n-        schemaCache.addSchemaRule( rule );\n-        labelsTouched = true;\n-        flushStrategy.forceFlush();\n-    }\n+  private void createNodeKeyConstraintRule(LabelSchemaDescriptor descriptor)\n+  {\n+    createUniqueIndexAndOwningConstraint(\n+        SchemaIndexDescriptorFactory.uniqueForSchema(descriptor),\n+        ConstraintDescriptorFactory.nodeKeyForSchema(descriptor));\n+  }\n+\n+  private void createNodePropertyExistenceConstraintRule(int labelId, int... propertyKeyIds)\n+  {\n+    SchemaRule rule = ConstraintRule.constraintRule(schemaStore.nextId(),\n+        ConstraintDescriptorFactory.existsForLabel(labelId, propertyKeyIds));\n \n-    private void createRelTypePropertyExistenceConstraintRule( int relTypeId, int... propertyKeyIds )\n+    for (DynamicRecord record : schemaStore.allocateFrom(rule))\n     {\n-        SchemaRule rule = ConstraintRule.constraintRule( schemaStore.nextId(),\n-                ConstraintDescriptorFactory.existsForRelType( relTypeId, propertyKeyIds ) );\n-\n-        for ( DynamicRecord record : schemaStore.allocateFrom( rule ) )\n-        {\n-            schemaStore.updateRecord( record );\n-        }\n-        schemaCache.addSchemaRule( rule );\n-        flushStrategy.forceFlush();\n+      schemaStore.updateRecord(record);\n     }\n+    schemaCache.addSchemaRule(rule);\n+    labelsTouched = true;\n+    flushStrategy.forceFlush();\n+  }\n \n-    private int getOrCreatePropertyKeyId( String name )\n-    {\n-        int propertyKeyId = tokenIdByName( propertyKeyTokens, name );\n-        if ( propertyKeyId == -1 )\n-        {\n-            propertyKeyId = createNewPropertyKeyId( name );\n-        }\n-        return propertyKeyId;\n-    }\n+  private void createRelTypePropertyExistenceConstraintRule(int relTypeId, int... propertyKeyIds)\n+  {\n+    SchemaRule rule = ConstraintRule.constraintRule(schemaStore.nextId(),\n+        ConstraintDescriptorFactory.existsForRelType(relTypeId, propertyKeyIds));\n \n-    private int getOrCreateRelationshipTypeToken( RelationshipType type )\n+    for (DynamicRecord record : schemaStore.allocateFrom(rule))\n     {\n-        int typeId = tokenIdByName( relationshipTypeTokens, type.name() );\n-        if ( typeId == -1 )\n-        {\n-            typeId = createNewRelationshipType( type.name() );\n-        }\n-        return typeId;\n+      schemaStore.updateRecord(record);\n     }\n+    schemaCache.addSchemaRule(rule);\n+    flushStrategy.forceFlush();\n+  }\n \n-    private int getOrCreateLabelId( String name )\n+  private int getOrCreatePropertyKeyId(String name)\n+  {\n+    int propertyKeyId = tokenIdByName(propertyKeyTokens, name);\n+    if (propertyKeyId == -1)\n     {\n-        int labelId = tokenIdByName( labelTokens, name );\n-        if ( labelId == -1 )\n-        {\n-            labelId = createNewLabelId( name );\n-        }\n-        return labelId;\n+      propertyKeyId = createNewPropertyKeyId(name);\n     }\n+    return propertyKeyId;\n+  }\n \n-    private int getOrCreateRelationshipTypeId( String name )\n+  private int getOrCreateRelationshipTypeToken(RelationshipType type)\n+  {\n+    int typeId = tokenIdByName(relationshipTypeTokens, type.name());\n+    if (typeId == -1)\n     {\n-        int relationshipTypeId = tokenIdByName( relationshipTypeTokens, name );\n-        if ( relationshipTypeId == -1 )\n-        {\n-            relationshipTypeId = createNewRelationshipType( name );\n-        }\n-        return relationshipTypeId;\n+      typeId = createNewRelationshipType(type.name());\n     }\n+    return typeId;\n+  }\n \n-    private int tokenIdByName( BatchTokenHolder tokens, String name )\n+  private int getOrCreateLabelId(String name)\n+  {\n+    int labelId = tokenIdByName(labelTokens, name);\n+    if (labelId == -1)\n     {\n-        Token token = tokens.byName( name );\n-        return token != null ? token.id() : -1;\n+      labelId = createNewLabelId(name);\n     }\n+    return labelId;\n+  }\n \n-    private boolean primitiveHasProperty( PrimitiveRecord record, String propertyName )\n+  private int getOrCreateRelationshipTypeId(String name)\n+  {\n+    int relationshipTypeId = tokenIdByName(relationshipTypeTokens, name);\n+    if (relationshipTypeId == -1)\n     {\n-        int propertyKeyId = tokenIdByName( propertyKeyTokens, propertyName );\n-        return propertyKeyId != -1 && propertyTraverser.findPropertyRecordContaining( record, propertyKeyId,\n-                recordAccess.getPropertyRecords(), false ) != Record.NO_NEXT_PROPERTY.intValue();\n+      relationshipTypeId = createNewRelationshipType(name);\n     }\n+    return relationshipTypeId;\n+  }\n \n-    private void rejectAutoUpgrade( Map<String, String> params )\n-    {\n-        if ( parseBoolean( params.get( GraphDatabaseSettings.allow_upgrade.name() ) ) )\n-        {\n-            throw new IllegalArgumentException( \"Batch inserter is not allowed to do upgrade of a store\" +\n-                                                \", use \" + EmbeddedGraphDatabase.class.getSimpleName() + \" instead\" );\n-        }\n-    }\n+  private int tokenIdByName(BatchTokenHolder tokens, String name)\n+  {\n+    Token token = tokens.byName(name);\n+    return token != null ? token.id() : -1;\n+  }\n \n-    @Override\n-    public long createNode( Map<String, Object> properties, Label... labels )\n+  private boolean primitiveHasProperty(PrimitiveRecord record, String propertyName)\n+  {\n+    int propertyKeyId = tokenIdByName(propertyKeyTokens, propertyName);\n+    return propertyKeyId != -1 && propertyTraverser.findPropertyRecordContaining(record, propertyKeyId,\n+        recordAccess.getPropertyRecords(), false) != Record.NO_NEXT_PROPERTY.intValue();\n+  }\n+\n+  private void rejectAutoUpgrade(Map<String, String> params)\n+  {\n+    if (parseBoolean(params.get(GraphDatabaseSettings.allow_upgrade.name())))\n     {\n-        return internalCreateNode( nodeStore.nextId(), properties, labels );\n+      throw new IllegalArgumentException(\"Batch inserter is not allowed to do upgrade of a store\" +\n+          \", use \" + EmbeddedGraphDatabase.class.getSimpleName() + \" instead\");\n     }\n+  }\n \n-    private long internalCreateNode( long nodeId, Map<String, Object> properties, Label... labels )\n-    {\n-        NodeRecord nodeRecord = recordAccess.getNodeRecords().create( nodeId, null ).forChangingData();\n-        nodeRecord.setInUse( true );\n-        nodeRecord.setCreated();\n-        nodeRecord.setNextProp( propertyCreator.createPropertyChain( nodeRecord,\n-                propertiesIterator( properties ), recordAccess.getPropertyRecords() ) );\n+  @Override\n+  public long createNode(Map<String, Object> properties, Label... labels)\n+  {\n+    return internalCreateNode(nodeStore.nextId(), properties, labels);\n+  }\n \n-        if ( labels.length > 0 )\n-        {\n-            setNodeLabels( nodeRecord, labels );\n-        }\n+  private long internalCreateNode(long nodeId, Map<String, Object> properties, Label... labels)\n+  {\n+    NodeRecord nodeRecord = recordAccess.getNodeRecords().create(nodeId, null).forChangingData();\n+    nodeRecord.setInUse(true);\n+    nodeRecord.setCreated();\n+    nodeRecord.setNextProp(propertyCreator.createPropertyChain(nodeRecord,\n+        propertiesIterator(properties), recordAccess.getPropertyRecords()));\n \n-        flushStrategy.flush();\n-        return nodeId;\n-    }\n-\n-    private Iterator<PropertyBlock> propertiesIterator( Map<String, Object> properties )\n+    if (labels.length > 0)\n     {\n-        if ( properties == null || properties.isEmpty() )\n-        {\n-            return emptyIterator();\n-        }\n-        return new IteratorWrapper<PropertyBlock, Map.Entry<String,Object>>( properties.entrySet().iterator() )\n-        {\n-            @Override\n-            protected PropertyBlock underlyingObjectToObject( Entry<String, Object> property )\n-            {\n-                return propertyCreator.encodePropertyValue(\n-                        getOrCreatePropertyKeyId( property.getKey() ), ValueUtils.asValue( property.getValue() ) );\n-            }\n-        };\n+      setNodeLabels(nodeRecord, labels);\n     }\n \n-    private void setNodeLabels( NodeRecord nodeRecord, Label... labels )\n-    {\n-        NodeLabels nodeLabels = parseLabelsField( nodeRecord );\n-        nodeLabels.put( getOrCreateLabelIds( labels ), nodeStore, nodeStore.getDynamicLabelStore() );\n-        labelsTouched = true;\n-    }\n+    flushStrategy.flush();\n+    return nodeId;\n+  }\n \n-    private long[] getOrCreateLabelIds( Label[] labels )\n+  private Iterator<PropertyBlock> propertiesIterator(Map<String, Object> properties)\n+  {\n+    if (properties == null || properties.isEmpty())\n     {\n-        long[] ids = new long[labels.length];\n-        int cursor = 0;\n-        for ( int i = 0; i < ids.length; i++ )\n-        {\n-            int labelId = getOrCreateLabelId( labels[i].name() );\n-            if ( !arrayContains( ids, cursor, labelId ) )\n-            {\n-                ids[cursor++] = labelId;\n-            }\n-        }\n-        if ( cursor < ids.length )\n-        {\n-            ids = Arrays.copyOf( ids, cursor );\n-        }\n-        return ids;\n+      return emptyIterator();\n     }\n-\n-    private boolean arrayContains( long[] ids, int cursor, int labelId )\n+    return new IteratorWrapper<PropertyBlock, Map.Entry<String, Object>>(properties.entrySet().iterator())\n     {\n-        for ( int i = 0; i < cursor; i++ )\n-        {\n-            if ( ids[i] == labelId )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      @Override\n+      protected PropertyBlock underlyingObjectToObject(Entry<String, Object> property)\n+      {\n+        return propertyCreator.encodePropertyValue(\n+            getOrCreatePropertyKeyId(property.getKey()), ValueUtils.asValue(property.getValue()));\n+      }\n+    };\n+  }\n+\n+  private void setNodeLabels(NodeRecord nodeRecord, Label... labels)\n+  {\n+    NodeLabels nodeLabels = parseLabelsField(nodeRecord);\n+    nodeLabels.put(getOrCreateLabelIds(labels), nodeStore, nodeStore.getDynamicLabelStore());\n+    labelsTouched = true;\n+  }\n+\n+  private long[] getOrCreateLabelIds(Label[] labels)\n+  {\n+    long[] ids = new long[labels.length];\n+    int cursor = 0;\n+    for (int i = 0; i < ids.length; i++)\n+    {\n+      int labelId = getOrCreateLabelId(labels[i].name());\n+      if (!arrayContains(ids, cursor, labelId))\n+      {\n+        ids[cursor++] = labelId;\n+      }\n+    }\n+    if (cursor < ids.length)\n+    {\n+      ids = Arrays.copyOf(ids, cursor);\n+    }\n+    return ids;\n+  }\n+\n+  private boolean arrayContains(long[] ids, int cursor, int labelId)\n+  {\n+    for (int i = 0; i < cursor; i++)\n+    {\n+      if (ids[i] == labelId)\n+      {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void createNode(long id, Map<String, Object> properties, Label... labels)\n+  {\n+    IdValidator.assertValidId(IdType.NODE, id, maxNodeId);\n+    if (nodeStore.isInUse(id))\n+    {\n+      throw new IllegalArgumentException(\"id=\" + id + \" already in use\");\n+    }\n+    long highId = nodeStore.getHighId();\n+    if (highId <= id)\n+    {\n+      nodeStore.setHighestPossibleIdInUse(id);\n+    }\n+    internalCreateNode(id, properties, labels);\n+  }\n+\n+  @Override\n+  public void setNodeLabels(long node, Label... labels)\n+  {\n+    NodeRecord record = getNodeRecord(node).forChangingData();\n+    setNodeLabels(record, labels);\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public Iterable<Label> getNodeLabels(final long node)\n+  {\n+    return () ->\n+    {\n+      NodeRecord record = getNodeRecord(node).forReadingData();\n+      long[] labels = parseLabelsField(record).get(nodeStore);\n+      return map(labelIdToLabelFunction, PrimitiveLongCollections.iterator(labels));\n+    };\n+  }\n+\n+  @Override\n+  public boolean nodeHasLabel(long node, Label label)\n+  {\n+    int labelId = tokenIdByName(labelTokens, label.name());\n+    return labelId != -1 && nodeHasLabel(node, labelId);\n+  }\n+\n+  private boolean nodeHasLabel(long node, int labelId)\n+  {\n+    NodeRecord record = getNodeRecord(node).forReadingData();\n+    for (long label : parseLabelsField(record).get(nodeStore))\n+    {\n+      if (label == labelId)\n+      {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public long createRelationship(long node1, long node2, RelationshipType type,\n+                                 Map<String, Object> properties)\n+  {\n+    long id = relationshipStore.nextId();\n+    int typeId = getOrCreateRelationshipTypeToken(type);\n+    relationshipCreator.relationshipCreate(id, typeId, node1, node2, recordAccess, noopLockClient);\n+    if (properties != null && !properties.isEmpty())\n+    {\n+      RelationshipRecord record = recordAccess.getRelRecords().getOrLoad(id, null).forChangingData();\n+      record.setNextProp(propertyCreator.createPropertyChain(record,\n+          propertiesIterator(properties), recordAccess.getPropertyRecords()));\n+    }\n+    flushStrategy.flush();\n+    return id;\n+  }\n+\n+  @Override\n+  public void setNodeProperties(long node, Map<String, Object> properties)\n+  {\n+    NodeRecord record = getNodeRecord(node).forChangingData();\n+    if (record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      propertyDeletor.deletePropertyChain(record, recordAccess.getPropertyRecords());\n+    }\n+    record.setNextProp(propertyCreator.createPropertyChain(record, propertiesIterator(properties),\n+        recordAccess.getPropertyRecords()));\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public void setRelationshipProperties(long rel, Map<String, Object> properties)\n+  {\n+    RelationshipRecord record = recordAccess.getRelRecords().getOrLoad(rel, null).forChangingData();\n+    if (record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      propertyDeletor.deletePropertyChain(record, recordAccess.getPropertyRecords());\n+    }\n+    record.setNextProp(propertyCreator.createPropertyChain(record, propertiesIterator(properties),\n+        recordAccess.getPropertyRecords()));\n+    flushStrategy.flush();\n+  }\n+\n+  @Override\n+  public boolean nodeExists(long nodeId)\n+  {\n+    flushStrategy.forceFlush();\n+    return nodeStore.isInUse(nodeId);\n+  }\n+\n+  @Override\n+  public Map<String, Object> getNodeProperties(long nodeId)\n+  {\n+    NodeRecord record = getNodeRecord(nodeId).forReadingData();\n+    if (record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      return getPropertyChain(record.getNextProp());\n+    }\n+    return Collections.emptyMap();\n+  }\n+\n+  @Override\n+  public Iterable<Long> getRelationshipIds(long nodeId)\n+  {\n+    flushStrategy.forceFlush();\n+    return new BatchRelationshipIterable<Long>(neoStores, nodeId, cursors)\n+    {\n+      @Override\n+      protected Long nextFrom(long relId, int type, long startNode, long endNode)\n+      {\n+        return relId;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Iterable<BatchRelationship> getRelationships(long nodeId)\n+  {\n+    flushStrategy.forceFlush();\n+    return new BatchRelationshipIterable<BatchRelationship>(neoStores, nodeId, cursors)\n+    {\n+      @Override\n+      protected BatchRelationship nextFrom(long relId, int type, long startNode, long endNode)\n+      {\n+        return new BatchRelationship(relId, startNode, endNode,\n+            (RelationshipType) relationshipTypeTokens.byId(type));\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public BatchRelationship getRelationshipById(long relId)\n+  {\n+    RelationshipRecord record = getRelationshipRecord(relId).forReadingData();\n+    RelationshipType type = (RelationshipType) relationshipTypeTokens.byId(record.getType());\n+    return new BatchRelationship(record.getId(), record.getFirstNode(), record.getSecondNode(), type);\n+  }\n+\n+  @Override\n+  public Map<String, Object> getRelationshipProperties(long relId)\n+  {\n+    RelationshipRecord record = recordAccess.getRelRecords().getOrLoad(relId, null).forChangingData();\n+    if (record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      return getPropertyChain(record.getNextProp());\n+    }\n+    return Collections.emptyMap();\n+  }\n+\n+  @Override\n+  public void shutdown()\n+  {\n+    if (isShutdown)\n+    {\n+      throw new IllegalStateException(\"Batch inserter already has shutdown\");\n+    }\n+    isShutdown = true;\n+\n+    flushStrategy.forceFlush();\n+\n+    rebuildCounts();\n+\n+    try\n+    {\n+      repopulateAllIndexes();\n+      labelScanStore.force(IOLimiter.unlimited());\n+    } catch (IOException | IndexEntryConflictException e)\n+    {\n+      throw new RuntimeException(e);\n+    } finally\n+    {\n+      cursors.close();\n+      neoStores.close();\n+\n+      try\n+      {\n+        storeLocker.close();\n+      } catch (IOException e)\n+      {\n+        throw new UnderlyingStorageException(\"Could not release store lock\", e);\n+      }\n+\n+      msgLog.info(Thread.currentThread() + \" Clean shutdown on BatchInserter(\" + this + \")\");\n+      life.shutdown();\n+    }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"EmbeddedBatchInserter[\" + storeDir + \"]\";\n+  }\n+\n+  private Map<String, Object> getPropertyChain(long nextProp)\n+  {\n+    final Map<String, Object> map = new HashMap<>();\n+    propertyTraverser.getPropertyChain(nextProp, recordAccess.getPropertyRecords(), propBlock ->\n+    {\n+      String key = propertyKeyTokens.byId(propBlock.getKeyIndexId()).name();\n+      Value propertyValue = propBlock.newPropertyValue(propertyStore);\n+      map.put(key, propertyValue.asObject());\n+    });\n+    return map;\n+  }\n+\n+  private int createNewPropertyKeyId(String stringKey)\n+  {\n+    int keyId = (int) propertyKeyTokenStore.nextId();\n+    PropertyKeyTokenRecord record = new PropertyKeyTokenRecord(keyId);\n+    record.setInUse(true);\n+    record.setCreated();\n+    Collection<DynamicRecord> keyRecords =\n+        propertyKeyTokenStore.allocateNameRecords(encodeString(stringKey));\n+    record.setNameId((int) Iterables.first(keyRecords).getId());\n+    record.addNameRecords(keyRecords);\n+    propertyKeyTokenStore.updateRecord(record);\n+    propertyKeyTokens.addToken(new Token(stringKey, keyId));\n+    return keyId;\n+  }\n+\n+  private int createNewLabelId(String stringKey)\n+  {\n+    int keyId = (int) labelTokenStore.nextId();\n+    LabelTokenRecord record = new LabelTokenRecord(keyId);\n+    record.setInUse(true);\n+    record.setCreated();\n+    Collection<DynamicRecord> keyRecords =\n+        labelTokenStore.allocateNameRecords(encodeString(stringKey));\n+    record.setNameId((int) Iterables.first(keyRecords).getId());\n+    record.addNameRecords(keyRecords);\n+    labelTokenStore.updateRecord(record);\n+    labelTokens.addToken(new Token(stringKey, keyId));\n+    return keyId;\n+  }\n+\n+  private int createNewRelationshipType(String name)\n+  {\n+    int id = (int) relationshipTypeTokenStore.nextId();\n+    RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord(id);\n+    record.setInUse(true);\n+    record.setCreated();\n+    Collection<DynamicRecord> nameRecords = relationshipTypeTokenStore.allocateNameRecords(encodeString(name));\n+    record.setNameId((int) Iterables.first(nameRecords).getId());\n+    record.addNameRecords(nameRecords);\n+    relationshipTypeTokenStore.updateRecord(record);\n+    relationshipTypeTokens.addToken(new RelationshipTypeToken(name, id));\n+    return id;\n+  }\n+\n+  private RecordProxy<NodeRecord, Void> getNodeRecord(long id)\n+  {\n+    if (id < 0 || id >= nodeStore.getHighId())\n+    {\n+      throw new NotFoundException(\"id=\" + id);\n+    }\n+    return recordAccess.getNodeRecords().getOrLoad(id, null);\n+  }\n+\n+  private RecordProxy<RelationshipRecord, Void> getRelationshipRecord(long id)\n+  {\n+    if (id < 0 || id >= relationshipStore.getHighId())\n+    {\n+      throw new NotFoundException(\"id=\" + id);\n+    }\n+    return recordAccess.getRelRecords().getOrLoad(id, null);\n+  }\n+\n+  @Override\n+  public String getStoreDir()\n+  {\n+    return storeDir.getPath();\n+  }\n+\n+  @Override\n+  public IndexConfigStore getIndexStore()\n+  {\n+    return this.indexStore;\n+  }\n+\n+  public IdGeneratorFactory getIdGeneratorFactory()\n+  {\n+    return idGeneratorFactory;\n+  }\n+\n+  private void dumpConfiguration(Map<String, String> config, PrintStream out)\n+  {\n+    for (Entry<String, String> entry : config.entrySet())\n+    {\n+      if (entry.getValue() != null)\n+      {\n+        out.println(entry.getKey() + \"=\" + entry.getValue());\n+      }\n+    }\n+  }\n+\n+  // test-access\n+  NeoStores getNeoStores()\n+  {\n+    return neoStores;\n+  }\n+\n+  void forceFlushChanges()\n+  {\n+    flushStrategy.forceFlush();\n+  }\n+\n+  private class BatchSchemaActions implements InternalSchemaActions\n+  {\n+    private int[] getOrCreatePropertyKeyIds(Iterable<String> properties)\n+    {\n+      return Iterables.stream(properties)\n+          .mapToInt(BatchInserterImpl.this::getOrCreatePropertyKeyId)\n+          .toArray();\n+    }\n+\n+    private int[] getOrCreatePropertyKeyIds(String[] properties)\n+    {\n+      return Arrays.stream(properties)\n+          .mapToInt(BatchInserterImpl.this::getOrCreatePropertyKeyId)\n+          .toArray();\n     }\n \n     @Override\n-    public void createNode( long id, Map<String, Object> properties, Label... labels )\n+    public IndexDefinition createIndexDefinition(Label label, String... propertyKeys)\n     {\n-        IdValidator.assertValidId( IdType.NODE, id, maxNodeId );\n-        if ( nodeStore.isInUse( id ) )\n-        {\n-            throw new IllegalArgumentException( \"id=\" + id + \" already in use\" );\n-        }\n-        long highId = nodeStore.getHighId();\n-        if ( highId <= id )\n-        {\n-            nodeStore.setHighestPossibleIdInUse( id );\n-        }\n-        internalCreateNode( id, properties, labels );\n-    }\n+      int labelId = getOrCreateLabelId(label.name());\n+      int[] propertyKeyIds = getOrCreatePropertyKeyIds(propertyKeys);\n \n-    @Override\n-    public void setNodeLabels( long node, Label... labels )\n-    {\n-        NodeRecord record = getNodeRecord( node ).forChangingData();\n-        setNodeLabels( record, labels );\n-        flushStrategy.flush();\n+      validateIndexCanBeCreated(labelId, propertyKeyIds);\n+\n+      createIndexRule(labelId, propertyKeyIds);\n+      return new IndexDefinitionImpl(this, label, propertyKeys, false);\n     }\n \n     @Override\n-    public Iterable<Label> getNodeLabels( final long node )\n+    public void dropIndexDefinitions(IndexDefinition indexDefinition)\n     {\n-        return () ->\n-        {\n-            NodeRecord record = getNodeRecord( node ).forReadingData();\n-            long[] labels = parseLabelsField( record ).get( nodeStore );\n-            return map( labelIdToLabelFunction, PrimitiveLongCollections.iterator( labels ) );\n-        };\n+      throw unsupportedException();\n     }\n \n     @Override\n-    public boolean nodeHasLabel( long node, Label label )\n+    public ConstraintDefinition createPropertyUniquenessConstraint(IndexDefinition indexDefinition)\n     {\n-        int labelId = tokenIdByName( labelTokens, label.name() );\n-        return labelId != -1 && nodeHasLabel( node, labelId );\n-    }\n+      int labelId = getOrCreateLabelId(indexDefinition.getLabel().name());\n+      int[] propertyKeyIds = getOrCreatePropertyKeyIds(indexDefinition.getPropertyKeys());\n+      LabelSchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel(labelId, propertyKeyIds);\n \n-    private boolean nodeHasLabel( long node, int labelId )\n-    {\n-        NodeRecord record = getNodeRecord( node ).forReadingData();\n-        for ( long label : parseLabelsField( record ).get( nodeStore ) )\n-        {\n-            if ( label == labelId )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      validateUniquenessConstraintCanBeCreated(labelId, propertyKeyIds);\n+      createUniquenessConstraintRule(descriptor);\n+      return new UniquenessConstraintDefinition(this, indexDefinition);\n     }\n \n     @Override\n-    public long createRelationship( long node1, long node2, RelationshipType type,\n-            Map<String, Object> properties )\n+    public ConstraintDefinition createNodeKeyConstraint(IndexDefinition indexDefinition)\n     {\n-        long id = relationshipStore.nextId();\n-        int typeId = getOrCreateRelationshipTypeToken( type );\n-        relationshipCreator.relationshipCreate( id, typeId, node1, node2, recordAccess, noopLockClient );\n-        if ( properties != null && !properties.isEmpty() )\n-        {\n-            RelationshipRecord record = recordAccess.getRelRecords().getOrLoad( id, null ).forChangingData();\n-            record.setNextProp( propertyCreator.createPropertyChain( record,\n-                    propertiesIterator( properties ), recordAccess.getPropertyRecords() ) );\n-        }\n-        flushStrategy.flush();\n-        return id;\n-    }\n+      int labelId = getOrCreateLabelId(indexDefinition.getLabel().name());\n+      int[] propertyKeyIds = getOrCreatePropertyKeyIds(indexDefinition.getPropertyKeys());\n+      LabelSchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel(labelId, propertyKeyIds);\n \n-    @Override\n-    public void setNodeProperties( long node, Map<String, Object> properties )\n-    {\n-        NodeRecord record = getNodeRecord( node ).forChangingData();\n-        if ( record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            propertyDeletor.deletePropertyChain( record, recordAccess.getPropertyRecords() );\n-        }\n-        record.setNextProp( propertyCreator.createPropertyChain( record, propertiesIterator( properties ),\n-                recordAccess.getPropertyRecords() ) );\n-        flushStrategy.flush();\n+      validateNodeKeyConstraintCanBeCreated(labelId, propertyKeyIds);\n+      createNodeKeyConstraintRule(descriptor);\n+      return new NodeKeyConstraintDefinition(this, indexDefinition);\n     }\n \n     @Override\n-    public void setRelationshipProperties( long rel, Map<String, Object> properties )\n+    public ConstraintDefinition createPropertyExistenceConstraint(Label label, String... propertyKeys)\n     {\n-        RelationshipRecord record = recordAccess.getRelRecords().getOrLoad( rel, null ).forChangingData();\n-        if ( record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            propertyDeletor.deletePropertyChain( record, recordAccess.getPropertyRecords() );\n-        }\n-        record.setNextProp( propertyCreator.createPropertyChain( record, propertiesIterator( properties ),\n-                recordAccess.getPropertyRecords() ) );\n-        flushStrategy.flush();\n-    }\n+      int labelId = getOrCreateLabelId(label.name());\n+      int[] propertyKeyIds = getOrCreatePropertyKeyIds(propertyKeys);\n \n-    @Override\n-    public boolean nodeExists( long nodeId )\n-    {\n-        flushStrategy.forceFlush();\n-        return nodeStore.isInUse( nodeId );\n+      validateNodePropertyExistenceConstraintCanBeCreated(labelId, propertyKeyIds);\n+\n+      createNodePropertyExistenceConstraintRule(labelId, propertyKeyIds);\n+      return new NodePropertyExistenceConstraintDefinition(this, label, propertyKeys);\n     }\n \n     @Override\n-    public Map<String,Object> getNodeProperties( long nodeId )\n+    public ConstraintDefinition createPropertyExistenceConstraint(RelationshipType type, String propertyKey)\n     {\n-        NodeRecord record = getNodeRecord( nodeId ).forReadingData();\n-        if ( record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            return getPropertyChain( record.getNextProp() );\n-        }\n-        return Collections.emptyMap();\n+      int relationshipTypeId = getOrCreateRelationshipTypeId(type.name());\n+      int propertyKeyId = getOrCreatePropertyKeyId(propertyKey);\n+\n+      validateRelationshipConstraintCanBeCreated(relationshipTypeId, propertyKeyId);\n+\n+      createRelTypePropertyExistenceConstraintRule(relationshipTypeId, propertyKeyId);\n+      return new RelationshipPropertyExistenceConstraintDefinition(this, type, propertyKey);\n     }\n \n     @Override\n-    public Iterable<Long> getRelationshipIds( long nodeId )\n+    public void dropPropertyUniquenessConstraint(Label label, String[] properties)\n     {\n-        flushStrategy.forceFlush();\n-        return new BatchRelationshipIterable<Long>( neoStores, nodeId, cursors )\n-        {\n-            @Override\n-            protected Long nextFrom( long relId, int type, long startNode, long endNode )\n-            {\n-                return relId;\n-            }\n-        };\n+      throw unsupportedException();\n     }\n \n     @Override\n-    public Iterable<BatchRelationship> getRelationships( long nodeId )\n+    public void dropNodeKeyConstraint(Label label, String[] properties)\n     {\n-        flushStrategy.forceFlush();\n-        return new BatchRelationshipIterable<BatchRelationship>( neoStores, nodeId, cursors )\n-        {\n-            @Override\n-            protected BatchRelationship nextFrom( long relId, int type, long startNode, long endNode )\n-            {\n-                return new BatchRelationship( relId, startNode, endNode,\n-                        (RelationshipType) relationshipTypeTokens.byId( type ) );\n-            }\n-        };\n+      throw unsupportedException();\n     }\n \n     @Override\n-    public BatchRelationship getRelationshipById( long relId )\n+    public void dropNodePropertyExistenceConstraint(Label label, String[] properties)\n     {\n-        RelationshipRecord record = getRelationshipRecord( relId ).forReadingData();\n-        RelationshipType type = (RelationshipType) relationshipTypeTokens.byId( record.getType() );\n-        return new BatchRelationship( record.getId(), record.getFirstNode(), record.getSecondNode(), type );\n+      throw unsupportedException();\n     }\n \n     @Override\n-    public Map<String,Object> getRelationshipProperties( long relId )\n+    public void dropRelationshipPropertyExistenceConstraint(RelationshipType type, String propertyKey)\n     {\n-        RelationshipRecord record = recordAccess.getRelRecords().getOrLoad( relId, null ).forChangingData();\n-        if ( record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            return getPropertyChain( record.getNextProp() );\n-        }\n-        return Collections.emptyMap();\n+      throw unsupportedException();\n     }\n \n     @Override\n-    public void shutdown()\n+    public String getUserMessage(KernelException e)\n     {\n-        if ( isShutdown )\n-        {\n-            throw new IllegalStateException( \"Batch inserter already has shutdown\" );\n-        }\n-        isShutdown = true;\n-\n-        flushStrategy.forceFlush();\n-\n-        rebuildCounts();\n-\n-        try\n-        {\n-            repopulateAllIndexes();\n-            labelScanStore.force( IOLimiter.unlimited() );\n-        }\n-        catch ( IOException | IndexEntryConflictException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-        finally\n-        {\n-            cursors.close();\n-            neoStores.close();\n-\n-            try\n-            {\n-                storeLocker.close();\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new UnderlyingStorageException( \"Could not release store lock\", e );\n-            }\n-\n-            msgLog.info( Thread.currentThread() + \" Clean shutdown on BatchInserter(\" + this + \")\" );\n-            life.shutdown();\n-        }\n+      throw unsupportedException();\n     }\n \n     @Override\n-    public String toString()\n+    public void assertInOpenTransaction()\n     {\n-        return \"EmbeddedBatchInserter[\" + storeDir + \"]\";\n+      // BatchInserterImpl always is expected to be running in one big single \"transaction\"\n     }\n \n-    private Map<String, Object> getPropertyChain( long nextProp )\n+    private UnsupportedOperationException unsupportedException()\n     {\n-        final Map<String, Object> map = new HashMap<>();\n-        propertyTraverser.getPropertyChain( nextProp, recordAccess.getPropertyRecords(), propBlock ->\n-        {\n-            String key = propertyKeyTokens.byId( propBlock.getKeyIndexId() ).name();\n-            Value propertyValue = propBlock.newPropertyValue( propertyStore );\n-            map.put( key, propertyValue.asObject() );\n-        } );\n-        return map;\n-    }\n-\n-    private int createNewPropertyKeyId( String stringKey )\n-    {\n-        int keyId = (int) propertyKeyTokenStore.nextId();\n-        PropertyKeyTokenRecord record = new PropertyKeyTokenRecord( keyId );\n-        record.setInUse( true );\n-        record.setCreated();\n-        Collection<DynamicRecord> keyRecords =\n-                propertyKeyTokenStore.allocateNameRecords( encodeString( stringKey ) );\n-        record.setNameId( (int) Iterables.first( keyRecords ).getId() );\n-        record.addNameRecords( keyRecords );\n-        propertyKeyTokenStore.updateRecord( record );\n-        propertyKeyTokens.addToken( new Token( stringKey, keyId ) );\n-        return keyId;\n-    }\n-\n-    private int createNewLabelId( String stringKey )\n-    {\n-        int keyId = (int) labelTokenStore.nextId();\n-        LabelTokenRecord record = new LabelTokenRecord( keyId );\n-        record.setInUse( true );\n-        record.setCreated();\n-        Collection<DynamicRecord> keyRecords =\n-                labelTokenStore.allocateNameRecords( encodeString( stringKey ) );\n-        record.setNameId( (int) Iterables.first( keyRecords ).getId() );\n-        record.addNameRecords( keyRecords );\n-        labelTokenStore.updateRecord( record );\n-        labelTokens.addToken( new Token( stringKey, keyId ) );\n-        return keyId;\n-    }\n-\n-    private int createNewRelationshipType( String name )\n-    {\n-        int id = (int) relationshipTypeTokenStore.nextId();\n-        RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord( id );\n-        record.setInUse( true );\n-        record.setCreated();\n-        Collection<DynamicRecord> nameRecords = relationshipTypeTokenStore.allocateNameRecords( encodeString( name ) );\n-        record.setNameId( (int) Iterables.first( nameRecords ).getId() );\n-        record.addNameRecords( nameRecords );\n-        relationshipTypeTokenStore.updateRecord( record );\n-        relationshipTypeTokens.addToken( new RelationshipTypeToken( name, id ) );\n-        return id;\n-    }\n-\n-    private RecordProxy<NodeRecord,Void> getNodeRecord( long id )\n-    {\n-        if ( id < 0 || id >= nodeStore.getHighId() )\n-        {\n-            throw new NotFoundException( \"id=\" + id );\n-        }\n-        return recordAccess.getNodeRecords().getOrLoad( id, null );\n+      return new UnsupportedOperationException(\"Batch inserter doesn't support this\");\n     }\n+  }\n+\n+  interface FlushStrategy\n+  {\n+    void flush();\n \n-    private RecordProxy<RelationshipRecord,Void> getRelationshipRecord( long id )\n+    void forceFlush();\n+  }\n+\n+  static final class BatchedFlushStrategy implements FlushStrategy\n+  {\n+    private final DirectRecordAccessSet directRecordAccess;\n+    private final int batchSize;\n+    private int attempts;\n+\n+    BatchedFlushStrategy(DirectRecordAccessSet directRecordAccess, int batchSize)\n     {\n-        if ( id < 0 || id >= relationshipStore.getHighId() )\n-        {\n-            throw new NotFoundException( \"id=\" + id );\n-        }\n-        return recordAccess.getRelRecords().getOrLoad( id, null );\n+      this.directRecordAccess = directRecordAccess;\n+      this.batchSize = batchSize;\n     }\n \n     @Override\n-    public String getStoreDir()\n+    public void flush()\n     {\n-        return storeDir.getPath();\n+      attempts++;\n+      if (attempts >= batchSize)\n+      {\n+        forceFlush();\n+      }\n     }\n \n     @Override\n-    public IndexConfigStore getIndexStore()\n+    public void forceFlush()\n     {\n-        return this.indexStore;\n+      directRecordAccess.commit();\n+      attempts = 0;\n     }\n+  }\n+\n+  private static class IndexPopulatorWithSchema extends IndexPopulator.Adapter implements SchemaDescriptorSupplier, AutoCloseable\n+  {\n+    private static final int batchSize = 1_000;\n+    private final IndexPopulator populator;\n+    private final SchemaIndexDescriptor index;\n+    private Collection<IndexEntryUpdate<?>> batchedUpdates = new ArrayList<>(batchSize);\n+    private boolean populationCompletedSuccessfully;\n \n-    public IdGeneratorFactory getIdGeneratorFactory()\n+    IndexPopulatorWithSchema(IndexPopulator populator, SchemaIndexDescriptor index)\n     {\n-        return idGeneratorFactory;\n+      this.populator = populator;\n+      this.index = index;\n     }\n \n-    private void dumpConfiguration( Map<String,String> config, PrintStream out )\n+    @Override\n+    public SchemaDescriptor schema()\n     {\n-        for ( Entry<String,String> entry : config.entrySet() )\n-        {\n-            if ( entry.getValue() != null )\n-            {\n-                out.println( entry.getKey() + \"=\" + entry.getValue() );\n-            }\n-        }\n+      return index.schema();\n     }\n \n-    // test-access\n-    NeoStores getNeoStores()\n+    public SchemaIndexDescriptor index()\n     {\n-        return neoStores;\n+      return index;\n     }\n \n-    void forceFlushChanges()\n+    public void add(IndexEntryUpdate<?> update) throws IndexEntryConflictException, IOException\n     {\n-        flushStrategy.forceFlush();\n+      batchedUpdates.add(update);\n+      if (batchedUpdates.size() > batchSize)\n+      {\n+        populator.add(batchedUpdates);\n+        batchedUpdates = new ArrayList<>(batchSize);\n+      }\n     }\n \n-    private class BatchSchemaActions implements InternalSchemaActions\n+    @Override\n+    public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+        throws IndexEntryConflictException, IOException\n     {\n-        private int[] getOrCreatePropertyKeyIds( Iterable<String> properties )\n-        {\n-            return Iterables.stream( properties )\n-                    .mapToInt( BatchInserterImpl.this::getOrCreatePropertyKeyId )\n-                    .toArray();\n-        }\n-\n-        private int[] getOrCreatePropertyKeyIds( String[] properties )\n-        {\n-            return Arrays.stream( properties )\n-                    .mapToInt( BatchInserterImpl.this::getOrCreatePropertyKeyId )\n-                    .toArray();\n-        }\n-\n-        @Override\n-        public IndexDefinition createIndexDefinition( Label label, String... propertyKeys )\n-        {\n-            int labelId = getOrCreateLabelId( label.name() );\n-            int[] propertyKeyIds = getOrCreatePropertyKeyIds( propertyKeys );\n-\n-            validateIndexCanBeCreated( labelId, propertyKeyIds );\n-\n-            createIndexRule( labelId, propertyKeyIds );\n-            return new IndexDefinitionImpl( this, label, propertyKeys, false );\n-        }\n-\n-        @Override\n-        public void dropIndexDefinitions( IndexDefinition indexDefinition )\n-        {\n-            throw unsupportedException();\n-        }\n-\n-        @Override\n-        public ConstraintDefinition createPropertyUniquenessConstraint( IndexDefinition indexDefinition )\n-        {\n-            int labelId = getOrCreateLabelId( indexDefinition.getLabel().name() );\n-            int[] propertyKeyIds = getOrCreatePropertyKeyIds( indexDefinition.getPropertyKeys() );\n-            LabelSchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel( labelId, propertyKeyIds );\n-\n-            validateUniquenessConstraintCanBeCreated( labelId, propertyKeyIds );\n-            createUniquenessConstraintRule( descriptor );\n-            return new UniquenessConstraintDefinition( this, indexDefinition );\n-        }\n-\n-        @Override\n-        public ConstraintDefinition createNodeKeyConstraint( IndexDefinition indexDefinition )\n-        {\n-            int labelId = getOrCreateLabelId( indexDefinition.getLabel().name() );\n-            int[] propertyKeyIds = getOrCreatePropertyKeyIds( indexDefinition.getPropertyKeys() );\n-            LabelSchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel( labelId, propertyKeyIds );\n-\n-            validateNodeKeyConstraintCanBeCreated( labelId, propertyKeyIds );\n-            createNodeKeyConstraintRule( descriptor );\n-            return new NodeKeyConstraintDefinition( this, indexDefinition );\n-        }\n-\n-        @Override\n-        public ConstraintDefinition createPropertyExistenceConstraint( Label label, String... propertyKeys )\n-        {\n-            int labelId = getOrCreateLabelId( label.name() );\n-            int[] propertyKeyIds = getOrCreatePropertyKeyIds( propertyKeys );\n-\n-            validateNodePropertyExistenceConstraintCanBeCreated( labelId, propertyKeyIds );\n-\n-            createNodePropertyExistenceConstraintRule( labelId, propertyKeyIds );\n-            return new NodePropertyExistenceConstraintDefinition( this, label, propertyKeys );\n-        }\n-\n-        @Override\n-        public ConstraintDefinition createPropertyExistenceConstraint( RelationshipType type, String propertyKey )\n-        {\n-            int relationshipTypeId = getOrCreateRelationshipTypeId( type.name() );\n-            int propertyKeyId = getOrCreatePropertyKeyId( propertyKey );\n-\n-            validateRelationshipConstraintCanBeCreated( relationshipTypeId, propertyKeyId );\n-\n-            createRelTypePropertyExistenceConstraintRule( relationshipTypeId, propertyKeyId );\n-            return new RelationshipPropertyExistenceConstraintDefinition( this, type, propertyKey );\n-        }\n-\n-        @Override\n-        public void dropPropertyUniquenessConstraint( Label label, String[] properties )\n-        {\n-            throw unsupportedException();\n-        }\n-\n-        @Override\n-        public void dropNodeKeyConstraint( Label label, String[] properties )\n-        {\n-            throw unsupportedException();\n-        }\n-\n-        @Override\n-        public void dropNodePropertyExistenceConstraint( Label label, String[] properties )\n-        {\n-            throw unsupportedException();\n-        }\n-\n-        @Override\n-        public void dropRelationshipPropertyExistenceConstraint( RelationshipType type, String propertyKey )\n-        {\n-            throw unsupportedException();\n-        }\n-\n-        @Override\n-        public String getUserMessage( KernelException e )\n-        {\n-            throw unsupportedException();\n-        }\n-\n-        @Override\n-        public void assertInOpenTransaction()\n-        {\n-            // BatchInserterImpl always is expected to be running in one big single \"transaction\"\n-        }\n-\n-        private UnsupportedOperationException unsupportedException()\n-        {\n-            return new UnsupportedOperationException( \"Batch inserter doesn't support this\" );\n-        }\n+      populator.add(batchedUpdates);\n+      populator.verifyDeferredConstraints(propertyAccessor);\n     }\n \n-    interface FlushStrategy\n+    void setPopulationCompletedSuccessfully(boolean value)\n     {\n-        void flush();\n-\n-        void forceFlush();\n+      this.populationCompletedSuccessfully = value;\n     }\n \n-    static final class BatchedFlushStrategy implements FlushStrategy\n+    @Override\n+    public void close() throws IOException\n     {\n-        private final DirectRecordAccessSet directRecordAccess;\n-        private final int batchSize;\n-        private int attempts;\n-\n-        BatchedFlushStrategy( DirectRecordAccessSet directRecordAccess, int batchSize )\n-        {\n-            this.directRecordAccess = directRecordAccess;\n-            this.batchSize = batchSize;\n-        }\n-\n-        @Override\n-        public void flush()\n-        {\n-            attempts++;\n-            if ( attempts >= batchSize )\n-            {\n-                forceFlush();\n-            }\n-        }\n-\n-        @Override\n-        public void forceFlush()\n-        {\n-            directRecordAccess.commit();\n-            attempts = 0;\n-        }\n+      close(populationCompletedSuccessfully);\n     }\n \n-    private static class IndexPopulatorWithSchema extends IndexPopulator.Adapter implements SchemaDescriptorSupplier, AutoCloseable\n+    @Override\n+    public void close(boolean populationCompletedSuccessfully) throws IOException\n     {\n-        private static final int batchSize = 1_000;\n-        private final IndexPopulator populator;\n-        private final SchemaIndexDescriptor index;\n-        private Collection<IndexEntryUpdate<?>> batchedUpdates = new ArrayList<>( batchSize );\n-        private boolean populationCompletedSuccessfully;\n-\n-        IndexPopulatorWithSchema( IndexPopulator populator, SchemaIndexDescriptor index )\n-        {\n-            this.populator = populator;\n-            this.index = index;\n-        }\n-\n-        @Override\n-        public SchemaDescriptor schema()\n-        {\n-            return index.schema();\n-        }\n-\n-        public SchemaIndexDescriptor index()\n-        {\n-            return index;\n-        }\n-\n-        public void add( IndexEntryUpdate<?> update ) throws IndexEntryConflictException, IOException\n-        {\n-            batchedUpdates.add( update );\n-            if ( batchedUpdates.size() > batchSize )\n-            {\n-                populator.add( batchedUpdates );\n-                batchedUpdates = new ArrayList<>( batchSize );\n-            }\n-        }\n-\n-        @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n-        {\n-            populator.add( batchedUpdates );\n-            populator.verifyDeferredConstraints( propertyAccessor );\n-        }\n-\n-        void setPopulationCompletedSuccessfully( boolean value )\n-        {\n-            this.populationCompletedSuccessfully = value;\n-        }\n-\n-        @Override\n-        public void close() throws IOException\n-        {\n-            close( populationCompletedSuccessfully );\n-        }\n-\n-        @Override\n-        public void close( boolean populationCompletedSuccessfully ) throws IOException\n-        {\n-            populator.close( populationCompletedSuccessfully );\n-        }\n+      populator.close(populationCompletedSuccessfully);\n     }\n+  }\n }\n",
            "diff_size": 1792
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 220).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "399",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "404",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "412",
                    "column": "59",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "439",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "466",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "572",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "591",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "596",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "683",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "700",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "989",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "994",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "1003",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "1017",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "1022",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2408/BatchInserterImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2408/BatchInserterImpl.java\nindex 382d1018b31..a49cc4f7890 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2408/BatchInserterImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2408/BatchInserterImpl.java\n@@ -227,41 +227,32 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     private final long maxNodeId;\n     private final RecordCursors cursors;\n \n-    public BatchInserterImpl( final File storeDir, final FileSystemAbstraction fileSystem,\n-                       Map<String, String> stringParams, Iterable<KernelExtensionFactory<?>> kernelExtensions ) throws IOException\n-    {\n+    public BatchInserterImpl( final File storeDir, final FileSystemAbstraction fileSystem, Map<String,String> stringParams, Iterable<KernelExtensionFactory<?>> kernelExtensions ) throws IOException\n+{\n         rejectAutoUpgrade( stringParams );\n-        Map<String, String> params = getDefaultParams();\n+        Map<String,String> params = getDefaultParams();\n         params.putAll( stringParams );\n         this.config = Config.defaults( params );\n-\n-        life = new LifeSupport();\n+life = new LifeSupport();\n         this.storeDir = storeDir;\n         storeLocker = tryLockStore( fileSystem );\n-        ConfiguringPageCacheFactory pageCacheFactory = new ConfiguringPageCacheFactory(\n-                fileSystem, config, PageCacheTracer.NULL, PageCursorTracerSupplier.NULL, NullLog.getInstance(),\n-                EmptyVersionContextSupplier.EMPTY );\n-        PageCache pageCache = pageCacheFactory.getOrCreatePageCache();\n+        ConfiguringPageCacheFactory pageCacheFactory = new ConfiguringPageCacheFactory( fileSystem, config, PageCacheTracer.NULL, PageCursorTracerSupplier.NULL, NullLog.getInstance(), EmptyVersionContextSupplier.EMPTY );\n+PageCache pageCache = pageCacheFactory.getOrCreatePageCache();\n         life.add( new PageCacheLifecycle( pageCache ) );\n-\n-        config.augment( logs_directory, storeDir.getCanonicalPath() );\n+config.augment( logs_directory, storeDir.getCanonicalPath() );\n         File internalLog = config.get( store_internal_log_path );\n-\n-        StoreLogService logService = life.add( StoreLogService.withInternalLog( internalLog).build( fileSystem ) );\n+StoreLogService logService = life.add( StoreLogService.withInternalLog( internalLog).build( fileSystem ) );\n         msgLog = logService.getInternalLog( getClass() );\n \n         boolean dump = config.get( GraphDatabaseSettings.dump_configuration );\n         this.idGeneratorFactory = new DefaultIdGeneratorFactory( fileSystem );\n-\n-        LogProvider internalLogProvider = logService.getInternalLogProvider();\n+LogProvider internalLogProvider = logService.getInternalLogProvider();\n         RecordFormats recordFormats = RecordFormatSelector.selectForStoreOrConfig( config, storeDir,\n                 pageCache, internalLogProvider );\n-        StoreFactory sf = new StoreFactory( this.storeDir, config, idGeneratorFactory, pageCache, fileSystem,\n+StoreFactory sf = new StoreFactory( this.storeDir, config, idGeneratorFactory, pageCache, fileSystem,\n                 recordFormats, internalLogProvider, EmptyVersionContextSupplier.EMPTY );\n-\n-        maxNodeId = recordFormats.node().getMaxId();\n-\n-        if ( dump )\n+maxNodeId = recordFormats.node().getMaxId();\n+if ( dump )\n         {\n             dumpConfiguration( params, System.out );\n         }\n@@ -286,37 +277,27 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         relationshipTypeTokens = new BatchTokenHolder( types );\n         indexStore = life.add( new IndexConfigStore( this.storeDir, fileSystem ) );\n         schemaCache = new SchemaCache( new StandardConstraintSemantics(), schemaStore );\n-\n-        indexStoreView = new NeoStoreIndexStoreView( LockService.NO_LOCK_SERVICE, neoStores );\n-\n-        Dependencies deps = new Dependencies();\n+indexStoreView = new NeoStoreIndexStoreView( LockService.NO_LOCK_SERVICE, neoStores );\n+Dependencies deps = new Dependencies();\n         Monitors monitors = new Monitors();\n         deps.satisfyDependencies( fileSystem, config, logService, indexStoreView, pageCache, monitors,\n                 RecoveryCleanupWorkCollector.immediate() );\n-\n-        KernelExtensions extensions = life.add( new KernelExtensions(\n-                new SimpleKernelContext( storeDir, DatabaseInfo.UNKNOWN, deps ),\n-                kernelExtensions, deps, UnsatisfiedDependencyStrategies.ignore() ) );\n-\n-        IndexProvider provider = extensions.resolveDependency( IndexProvider.class,\n+KernelExtensions extensions = life.add( new KernelExtensions( new SimpleKernelContext( storeDir, DatabaseInfo.UNKNOWN, deps ), kernelExtensions, deps, UnsatisfiedDependencyStrategies.ignore() ) );\n+IndexProvider provider = extensions.resolveDependency( IndexProvider.class,\n                 HighestSelectionStrategy.INSTANCE );\n-        schemaIndexProviders = new DefaultIndexProviderMap( provider );\n-        labelScanStore = new NativeLabelScanStore( pageCache, fileSystem, storeDir, FullStoreChangeStream.EMPTY, false, new Monitors(),\n-                deps.resolveDependency( RecoveryCleanupWorkCollector.class ) );\n-        life.add( labelScanStore );\n+schemaIndexProviders = new DefaultIndexProviderMap( provider );\n+        labelScanStore = new NativeLabelScanStore( pageCache, fileSystem, storeDir, FullStoreChangeStream.EMPTY, false, new Monitors(), deps.resolveDependency( RecoveryCleanupWorkCollector.class ) );\n+life.add( labelScanStore );\n         actions = new BatchSchemaActions();\n \n         // Record access\n         recordAccess = new DirectRecordAccessSet( neoStores );\n-        relationshipCreator = new RelationshipCreator(\n-                new RelationshipGroupGetter( relationshipGroupStore ), relationshipGroupStore.getStoreHeaderInt() );\n-        propertyTraverser = new PropertyTraverser();\n+        relationshipCreator = new RelationshipCreator( new RelationshipGroupGetter( relationshipGroupStore ), relationshipGroupStore.getStoreHeaderInt() );\n+propertyTraverser = new PropertyTraverser();\n         propertyCreator = new PropertyCreator( propertyStore, propertyTraverser );\n         propertyDeletor = new PropertyDeleter( propertyTraverser );\n-\n-        flushStrategy = new BatchedFlushStrategy( recordAccess, config.get( GraphDatabaseSettings\n-                .batch_inserter_batch_size ) );\n-        cursors = new RecordCursors( neoStores );\n+flushStrategy = new BatchedFlushStrategy( recordAccess, config.get( GraphDatabaseSettings.batch_inserter_batch_size ) );\n+cursors = new RecordCursors( neoStores );\n     }\n \n     private StoreLocker tryLockStore( FileSystemAbstraction fileSystem )\n@@ -338,12 +319,13 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n             }\n             throw e;\n         }\n-        return storeLocker;\n+\n+return storeLocker;\n     }\n \n-    private Map<String, String> getDefaultParams()\n+    private Map<String,String> getDefaultParams()\n     {\n-        Map<String, String> params = new HashMap<>();\n+        Map<String,String> params = new HashMap<>();\n         params.put( GraphDatabaseSettings.pagecache_memory.name(), \"32m\" );\n         return params;\n     }\n@@ -357,8 +339,7 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     @Override\n     public boolean relationshipHasProperty( long relationship, String propertyName )\n     {\n-        return primitiveHasProperty(\n-                recordAccess.getRelRecords().getOrLoad( relationship, null ).forReadingData(), propertyName );\n+        return primitiveHasProperty( recordAccess.getRelRecords().getOrLoad( relationship, null ).forReadingData(), propertyName );\n     }\n \n     @Override\n@@ -366,8 +347,7 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     {\n         RecordProxy<NodeRecord,Void> nodeRecord = getNodeRecord( node );\n         setPrimitiveProperty( nodeRecord, propertyName, propertyValue );\n-\n-        flushStrategy.flush();\n+flushStrategy.flush();\n     }\n \n     @Override\n@@ -375,8 +355,7 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     {\n         RecordProxy<RelationshipRecord,Void> relationshipRecord = getRelationshipRecord( relationship );\n         setPrimitiveProperty( relationshipRecord, propertyName, propertyValue );\n-\n-        flushStrategy.flush();\n+flushStrategy.flush();\n     }\n \n     @Override\n@@ -388,13 +367,12 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     }\n \n     @Override\n-    public void removeRelationshipProperty( long relationship,\n-                                            String propertyName )\n-    {\n+    public void removeRelationshipProperty( long relationship, String propertyName )\n+{\n         int propertyKey = getOrCreatePropertyKeyId( propertyName );\n         propertyDeletor.removePropertyIfExists( getRelationshipRecord( relationship ), propertyKey,\n                 recordAccess.getPropertyRecords() );\n-        flushStrategy.flush();\n+flushStrategy.flush();\n     }\n \n     @Override\n@@ -408,26 +386,22 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     {\n         int propertyKey = getOrCreatePropertyKeyId( propertyName );\n         RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords = recordAccess.getPropertyRecords();\n-\n-        propertyCreator.primitiveSetProperty( primitiveRecord, propertyKey, ValueUtils.asValue( propertyValue ), propertyRecords );\n+propertyCreator.primitiveSetProperty( primitiveRecord, propertyKey, ValueUtils.asValue( propertyValue ), propertyRecords );\n     }\n \n     private void validateIndexCanBeCreated( int labelId, int[] propertyKeyIds )\n     {\n-        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds,\n-                \"Index for given {label;property} already exists\" );\n+        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds, \"Index for given {label;property} already exists\" );\n     }\n \n     private void validateUniquenessConstraintCanBeCreated( int labelId, int[] propertyKeyIds )\n     {\n-        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds,\n-                \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\" );\n+        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds, \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\" );\n     }\n \n     private void validateNodeKeyConstraintCanBeCreated( int labelId, int[] propertyKeyIds )\n     {\n-        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds,\n-                \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\" );\n+        verifyIndexOrUniquenessConstraintCanBeCreated( labelId, propertyKeyIds, \"It is not allowed to create node keys, uniqueness constraints or indexes on the same {label;property}\" );\n     }\n \n     private void verifyIndexOrUniquenessConstraintCanBeCreated( int labelId, int[] propertyKeyIds, String errorMessage )\n@@ -435,10 +409,9 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         LabelSchemaDescriptor schemaDescriptor = SchemaDescriptorFactory.forLabel( labelId, propertyKeyIds );\n         ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.uniqueForSchema( schemaDescriptor );\n         ConstraintDescriptor nodeKeyDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema( schemaDescriptor );\n-        if ( schemaCache.hasIndexRule( schemaDescriptor ) ||\n-             schemaCache.hasConstraintRule( constraintDescriptor ) ||\n+        if ( schemaCache.hasIndexRule( schemaDescriptor ) ||schemaCache.hasConstraintRule( constraintDescriptor ) ||\n              schemaCache.hasConstraintRule( nodeKeyDescriptor ) )\n-        {\n+{\n             throw new ConstraintViolationException( errorMessage );\n         }\n     }\n@@ -446,33 +419,25 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     private void validateNodePropertyExistenceConstraintCanBeCreated( int labelId, int[] propertyKeyIds )\n     {\n         ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.existsForLabel( labelId, propertyKeyIds );\n-\n-        if ( schemaCache.hasConstraintRule( constraintDescriptor ) )\n+if ( schemaCache.hasConstraintRule( constraintDescriptor ) )\n         {\n-            throw new ConstraintViolationException(\n-                        \"Node property existence constraint for given {label;property} already exists\" );\n-        }\n+            throw new ConstraintViolationException( \"Node property existence constraint for given {label;property} already exists\" );\n+    }\n     }\n \n     private void validateRelationshipConstraintCanBeCreated( int relTypeId, int propertyKeyId )\n     {\n         ConstraintDescriptor constraintDescriptor = ConstraintDescriptorFactory.existsForLabel( relTypeId, propertyKeyId );\n-\n-        if ( schemaCache.hasConstraintRule( constraintDescriptor ) )\n+if ( schemaCache.hasConstraintRule( constraintDescriptor ) )\n         {\n-            throw new ConstraintViolationException(\n-                        \"Relationship property existence constraint for given {type;property} already exists\" );\n-        }\n+            throw new ConstraintViolationException( \"Relationship property existence constraint for given {type;property} already exists\" );\n+    }\n     }\n \n     private void createIndexRule( int labelId, int[] propertyKeyIds )\n     {\n-        IndexRule schemaRule = IndexRule.indexRule(\n-                schemaStore.nextId(),\n-                SchemaIndexDescriptorFactory.forLabel( labelId, propertyKeyIds ),\n-                schemaIndexProviders.getDefaultProvider().getProviderDescriptor() );\n-\n-        for ( DynamicRecord record : schemaStore.allocateFrom( schemaRule ) )\n+        IndexRule schemaRule = IndexRule.indexRule( schemaStore.nextId(), SchemaIndexDescriptorFactory.forLabel( labelId, propertyKeyIds ), schemaIndexProviders.getDefaultProvider().getProviderDescriptor() );\n+for ( DynamicRecord record : schemaStore.allocateFrom( schemaRule ) )\n         {\n             schemaStore.updateRecord( record );\n         }\n@@ -493,15 +458,13 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         try\n         {\n             final SchemaDescriptor[] descriptors = new LabelSchemaDescriptor[rules.length];\n-\n-            for ( int i = 0; i < rules.length; i++ )\n+for ( int i = 0; i < rules.length; i++ )\n             {\n                 IndexRule rule = rules[i];\n                 SchemaIndexDescriptor index = rule.getIndexDescriptor();\n                 descriptors[i] = index.schema();\n-                IndexPopulator populator = schemaIndexProviders.lookup( rule.getProviderDescriptor() )\n-                        .getPopulator( rule.getId(), index, new IndexSamplingConfig( config ) );\n-                populator.create();\n+                IndexPopulator populator = schemaIndexProviders.lookup( rule.getProviderDescriptor() ).getPopulator( rule.getId(), index, new IndexSamplingConfig( config ) );\n+populator.create();\n                 populators.add( new IndexPopulatorWithSchema( populator, index ) );\n             }\n \n@@ -525,22 +488,15 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n             };\n \n             List<SchemaDescriptor> descriptorList = Arrays.asList( descriptors );\n-            int[] labelIds = descriptorList.stream()\n-                    .mapToInt( SchemaDescriptor::keyId )\n-                    .toArray();\n+            int[] labelIds = descriptorList.stream().mapToInt( SchemaDescriptor::keyId ).toArray();\n+    int[] propertyKeyIds = descriptorList.stream().flatMapToInt( d -> Arrays.stream( d.getPropertyIds() ) ).toArray();\n \n-            int[] propertyKeyIds = descriptorList.stream()\n-                    .flatMapToInt( d -> Arrays.stream( d.getPropertyIds() ) )\n-                    .toArray();\n-\n-            try ( InitialNodeLabelCreationVisitor labelUpdateVisitor = new InitialNodeLabelCreationVisitor() )\n+try ( InitialNodeLabelCreationVisitor labelUpdateVisitor = new InitialNodeLabelCreationVisitor() )\n             {\n                 StoreScan<IOException> storeScan = indexStoreView.visitNodes( labelIds,\n-                        propertyKeyId -> PrimitiveIntCollections.contains( propertyKeyIds, propertyKeyId ),\n-                        propertyUpdateVisitor, labelUpdateVisitor, true );\n-                storeScan.run();\n-\n-                for ( IndexPopulatorWithSchema populator : populators )\n+                        propertyKeyId -> PrimitiveIntCollections.contains( propertyKeyIds, propertyKeyId ), propertyUpdateVisitor, labelUpdateVisitor, true );\n+storeScan.run();\n+for ( IndexPopulatorWithSchema populator : populators )\n                 {\n                     populator.verifyDeferredConstraints( indexStoreView );\n                     populator.setPopulationCompletedSuccessfully( true );\n@@ -613,22 +569,10 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n \n         long indexRuleId = schemaStore.nextId();\n         long constraintRuleId = schemaStore.nextId();\n-\n-        IndexRule indexRule =\n-                IndexRule.constraintIndexRule(\n-                        indexRuleId,\n-                        schemaIndexDescriptor,\n-                        this.schemaIndexProviders.getDefaultProvider().getProviderDescriptor(),\n-                        constraintRuleId\n-                );\n-        ConstraintRule constraintRule =\n-                ConstraintRule.constraintRule(\n-                        constraintRuleId,\n-                        constraintDescriptor,\n-                        indexRuleId\n-                );\n-\n-        for ( DynamicRecord record : schemaStore.allocateFrom( constraintRule ) )\n+IndexRule indexRule = IndexRule.constraintIndexRule( indexRuleId, schemaIndexDescriptor, this.schemaIndexProviders.getDefaultProvider().getProviderDescriptor(), constraintRuleId );\n+ConstraintRule constraintRule = ConstraintRule.constraintRule( constraintRuleId, constraintDescriptor,\n+                        indexRuleId );\n+for ( DynamicRecord record : schemaStore.allocateFrom( constraintRule ) )\n         {\n             schemaStore.updateRecord( record );\n         }\n@@ -644,24 +588,18 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n \n     private void createUniquenessConstraintRule( LabelSchemaDescriptor descriptor )\n     {\n-        createUniqueIndexAndOwningConstraint(\n-                SchemaIndexDescriptorFactory.uniqueForSchema( descriptor ),\n-                ConstraintDescriptorFactory.uniqueForSchema( descriptor ) );\n+        createUniqueIndexAndOwningConstraint( SchemaIndexDescriptorFactory.uniqueForSchema( descriptor ), ConstraintDescriptorFactory.uniqueForSchema( descriptor ) );\n     }\n \n     private void createNodeKeyConstraintRule( LabelSchemaDescriptor descriptor )\n     {\n-        createUniqueIndexAndOwningConstraint(\n-                SchemaIndexDescriptorFactory.uniqueForSchema( descriptor ),\n-                ConstraintDescriptorFactory.nodeKeyForSchema( descriptor ) );\n+        createUniqueIndexAndOwningConstraint( SchemaIndexDescriptorFactory.uniqueForSchema( descriptor ), ConstraintDescriptorFactory.nodeKeyForSchema( descriptor ) );\n     }\n \n     private void createNodePropertyExistenceConstraintRule( int labelId, int... propertyKeyIds )\n     {\n-        SchemaRule rule = ConstraintRule.constraintRule( schemaStore.nextId(),\n-                ConstraintDescriptorFactory.existsForLabel( labelId, propertyKeyIds ) );\n-\n-        for ( DynamicRecord record : schemaStore.allocateFrom( rule ) )\n+        SchemaRule rule = ConstraintRule.constraintRule( schemaStore.nextId(), ConstraintDescriptorFactory.existsForLabel( labelId, propertyKeyIds ) );\n+for ( DynamicRecord record : schemaStore.allocateFrom( rule ) )\n         {\n             schemaStore.updateRecord( record );\n         }\n@@ -672,10 +610,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n \n     private void createRelTypePropertyExistenceConstraintRule( int relTypeId, int... propertyKeyIds )\n     {\n-        SchemaRule rule = ConstraintRule.constraintRule( schemaStore.nextId(),\n-                ConstraintDescriptorFactory.existsForRelType( relTypeId, propertyKeyIds ) );\n-\n-        for ( DynamicRecord record : schemaStore.allocateFrom( rule ) )\n+        SchemaRule rule = ConstraintRule.constraintRule( schemaStore.nextId(), ConstraintDescriptorFactory.existsForRelType( relTypeId, propertyKeyIds ) );\n+for ( DynamicRecord record : schemaStore.allocateFrom( rule ) )\n         {\n             schemaStore.updateRecord( record );\n         }\n@@ -690,7 +626,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             propertyKeyId = createNewPropertyKeyId( name );\n         }\n-        return propertyKeyId;\n+\n+return propertyKeyId;\n     }\n \n     private int getOrCreateRelationshipTypeToken( RelationshipType type )\n@@ -700,7 +637,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             typeId = createNewRelationshipType( type.name() );\n         }\n-        return typeId;\n+\n+return typeId;\n     }\n \n     private int getOrCreateLabelId( String name )\n@@ -710,7 +648,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             labelId = createNewLabelId( name );\n         }\n-        return labelId;\n+\n+return labelId;\n     }\n \n     private int getOrCreateRelationshipTypeId( String name )\n@@ -720,7 +659,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             relationshipTypeId = createNewRelationshipType( name );\n         }\n-        return relationshipTypeId;\n+\n+return relationshipTypeId;\n     }\n \n     private int tokenIdByName( BatchTokenHolder tokens, String name )\n@@ -736,30 +676,28 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n                 recordAccess.getPropertyRecords(), false ) != Record.NO_NEXT_PROPERTY.intValue();\n     }\n \n-    private void rejectAutoUpgrade( Map<String, String> params )\n+    private void rejectAutoUpgrade( Map<String,String> params )\n     {\n         if ( parseBoolean( params.get( GraphDatabaseSettings.allow_upgrade.name() ) ) )\n         {\n-            throw new IllegalArgumentException( \"Batch inserter is not allowed to do upgrade of a store\" +\n-                                                \", use \" + EmbeddedGraphDatabase.class.getSimpleName() + \" instead\" );\n-        }\n+            throw new IllegalArgumentException( \"Batch inserter is not allowed to do upgrade of a store\" + \", use \" + EmbeddedGraphDatabase.class.getSimpleName() + \" instead\" );\n+    }\n     }\n \n     @Override\n-    public long createNode( Map<String, Object> properties, Label... labels )\n+    public long createNode( Map<String,Object> properties, Label... labels )\n     {\n         return internalCreateNode( nodeStore.nextId(), properties, labels );\n     }\n \n-    private long internalCreateNode( long nodeId, Map<String, Object> properties, Label... labels )\n+    private long internalCreateNode( long nodeId, Map<String,Object> properties, Label... labels )\n     {\n         NodeRecord nodeRecord = recordAccess.getNodeRecords().create( nodeId, null ).forChangingData();\n         nodeRecord.setInUse( true );\n         nodeRecord.setCreated();\n         nodeRecord.setNextProp( propertyCreator.createPropertyChain( nodeRecord,\n                 propertiesIterator( properties ), recordAccess.getPropertyRecords() ) );\n-\n-        if ( labels.length > 0 )\n+if ( labels.length> 0 )\n         {\n             setNodeLabels( nodeRecord, labels );\n         }\n@@ -768,7 +706,7 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         return nodeId;\n     }\n \n-    private Iterator<PropertyBlock> propertiesIterator( Map<String, Object> properties )\n+    private Iterator<PropertyBlock> propertiesIterator( Map<String,Object> properties )\n     {\n         if ( properties == null || properties.isEmpty() )\n         {\n@@ -777,11 +715,10 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         return new IteratorWrapper<PropertyBlock, Map.Entry<String,Object>>( properties.entrySet().iterator() )\n         {\n             @Override\n-            protected PropertyBlock underlyingObjectToObject( Entry<String, Object> property )\n+            protected PropertyBlock underlyingObjectToObject( Entry<String,Object> property )\n             {\n-                return propertyCreator.encodePropertyValue(\n-                        getOrCreatePropertyKeyId( property.getKey() ), ValueUtils.asValue( property.getValue() ) );\n-            }\n+                return propertyCreator.encodePropertyValue( getOrCreatePropertyKeyId( property.getKey() ), ValueUtils.asValue( property.getValue() ) );\n+    }\n         };\n     }\n \n@@ -808,7 +745,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             ids = Arrays.copyOf( ids, cursor );\n         }\n-        return ids;\n+\n+return ids;\n     }\n \n     private boolean arrayContains( long[] ids, int cursor, int labelId )\n@@ -824,7 +762,7 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     }\n \n     @Override\n-    public void createNode( long id, Map<String, Object> properties, Label... labels )\n+    public void createNode( long id, Map<String,Object> properties, Label... labels )\n     {\n         IdValidator.assertValidId( IdType.NODE, id, maxNodeId );\n         if ( nodeStore.isInUse( id ) )\n@@ -836,7 +774,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             nodeStore.setHighestPossibleIdInUse( id );\n         }\n-        internalCreateNode( id, properties, labels );\n+\n+internalCreateNode( id, properties, labels );\n     }\n \n     @Override\n@@ -879,8 +818,7 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     }\n \n     @Override\n-    public long createRelationship( long node1, long node2, RelationshipType type,\n-            Map<String, Object> properties )\n+    public long createRelationship( long node1, long node2, RelationshipType type, Map<String,Object> properties )\n     {\n         long id = relationshipStore.nextId();\n         int typeId = getOrCreateRelationshipTypeToken( type );\n@@ -896,29 +834,27 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     }\n \n     @Override\n-    public void setNodeProperties( long node, Map<String, Object> properties )\n+    public void setNodeProperties( long node, Map<String,Object> properties )\n     {\n         NodeRecord record = getNodeRecord( node ).forChangingData();\n         if ( record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n         {\n             propertyDeletor.deletePropertyChain( record, recordAccess.getPropertyRecords() );\n         }\n-        record.setNextProp( propertyCreator.createPropertyChain( record, propertiesIterator( properties ),\n-                recordAccess.getPropertyRecords() ) );\n-        flushStrategy.flush();\n+        record.setNextProp( propertyCreator.createPropertyChain( record, propertiesIterator( properties ), recordAccess.getPropertyRecords() ) );\n+flushStrategy.flush();\n     }\n \n     @Override\n-    public void setRelationshipProperties( long rel, Map<String, Object> properties )\n+    public void setRelationshipProperties( long rel, Map<String,Object> properties )\n     {\n         RelationshipRecord record = recordAccess.getRelRecords().getOrLoad( rel, null ).forChangingData();\n         if ( record.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n         {\n             propertyDeletor.deletePropertyChain( record, recordAccess.getPropertyRecords() );\n         }\n-        record.setNextProp( propertyCreator.createPropertyChain( record, propertiesIterator( properties ),\n-                recordAccess.getPropertyRecords() ) );\n-        flushStrategy.flush();\n+        record.setNextProp( propertyCreator.createPropertyChain( record, propertiesIterator( properties ), recordAccess.getPropertyRecords() ) );\n+flushStrategy.flush();\n     }\n \n     @Override\n@@ -936,7 +872,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             return getPropertyChain( record.getNextProp() );\n         }\n-        return Collections.emptyMap();\n+\n+return Collections.emptyMap();\n     }\n \n     @Override\n@@ -962,9 +899,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n             @Override\n             protected BatchRelationship nextFrom( long relId, int type, long startNode, long endNode )\n             {\n-                return new BatchRelationship( relId, startNode, endNode,\n-                        (RelationshipType) relationshipTypeTokens.byId( type ) );\n-            }\n+                return new BatchRelationship( relId, startNode, endNode, (RelationshipType) relationshipTypeTokens.byId( type ) );\n+    }\n         };\n     }\n \n@@ -984,7 +920,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             return getPropertyChain( record.getNextProp() );\n         }\n-        return Collections.emptyMap();\n+\n+return Collections.emptyMap();\n     }\n \n     @Override\n@@ -994,7 +931,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             throw new IllegalStateException( \"Batch inserter already has shutdown\" );\n         }\n-        isShutdown = true;\n+\n+isShutdown = true;\n \n         flushStrategy.forceFlush();\n \n@@ -1034,9 +972,9 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         return \"EmbeddedBatchInserter[\" + storeDir + \"]\";\n     }\n \n-    private Map<String, Object> getPropertyChain( long nextProp )\n+    private Map<String,Object> getPropertyChain( long nextProp )\n     {\n-        final Map<String, Object> map = new HashMap<>();\n+        final Map<String,Object> map = new HashMap<>();\n         propertyTraverser.getPropertyChain( nextProp, recordAccess.getPropertyRecords(), propBlock ->\n         {\n             String key = propertyKeyTokens.byId( propBlock.getKeyIndexId() ).name();\n@@ -1048,13 +986,12 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n \n     private int createNewPropertyKeyId( String stringKey )\n     {\n-        int keyId = (int) propertyKeyTokenStore.nextId();\n+        int keyId = ( int) propertyKeyTokenStore.nextId();\n         PropertyKeyTokenRecord record = new PropertyKeyTokenRecord( keyId );\n         record.setInUse( true );\n         record.setCreated();\n-        Collection<DynamicRecord> keyRecords =\n-                propertyKeyTokenStore.allocateNameRecords( encodeString( stringKey ) );\n-        record.setNameId( (int) Iterables.first( keyRecords ).getId() );\n+        Collection<DynamicRecord> keyRecords = propertyKeyTokenStore.allocateNameRecords( encodeString( stringKey ) );\n+record.setNameId( ( int) Iterables.first( keyRecords ).getId() );\n         record.addNameRecords( keyRecords );\n         propertyKeyTokenStore.updateRecord( record );\n         propertyKeyTokens.addToken( new Token( stringKey, keyId ) );\n@@ -1063,13 +1000,12 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n \n     private int createNewLabelId( String stringKey )\n     {\n-        int keyId = (int) labelTokenStore.nextId();\n+        int keyId = ( int) labelTokenStore.nextId();\n         LabelTokenRecord record = new LabelTokenRecord( keyId );\n         record.setInUse( true );\n         record.setCreated();\n-        Collection<DynamicRecord> keyRecords =\n-                labelTokenStore.allocateNameRecords( encodeString( stringKey ) );\n-        record.setNameId( (int) Iterables.first( keyRecords ).getId() );\n+        Collection<DynamicRecord> keyRecords = labelTokenStore.allocateNameRecords( encodeString( stringKey ) );\n+record.setNameId( ( int) Iterables.first( keyRecords ).getId() );\n         record.addNameRecords( keyRecords );\n         labelTokenStore.updateRecord( record );\n         labelTokens.addToken( new Token( stringKey, keyId ) );\n@@ -1078,12 +1014,12 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n \n     private int createNewRelationshipType( String name )\n     {\n-        int id = (int) relationshipTypeTokenStore.nextId();\n+        int id = ( int) relationshipTypeTokenStore.nextId();\n         RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord( id );\n         record.setInUse( true );\n         record.setCreated();\n         Collection<DynamicRecord> nameRecords = relationshipTypeTokenStore.allocateNameRecords( encodeString( name ) );\n-        record.setNameId( (int) Iterables.first( nameRecords ).getId() );\n+        record.setNameId( ( int) Iterables.first( nameRecords ).getId() );\n         record.addNameRecords( nameRecords );\n         relationshipTypeTokenStore.updateRecord( record );\n         relationshipTypeTokens.addToken( new RelationshipTypeToken( name, id ) );\n@@ -1096,7 +1032,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             throw new NotFoundException( \"id=\" + id );\n         }\n-        return recordAccess.getNodeRecords().getOrLoad( id, null );\n+\n+return recordAccess.getNodeRecords().getOrLoad( id, null );\n     }\n \n     private RecordProxy<RelationshipRecord,Void> getRelationshipRecord( long id )\n@@ -1105,7 +1042,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         {\n             throw new NotFoundException( \"id=\" + id );\n         }\n-        return recordAccess.getRelRecords().getOrLoad( id, null );\n+\n+return recordAccess.getRelRecords().getOrLoad( id, null );\n     }\n \n     @Override\n@@ -1151,16 +1089,12 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n     {\n         private int[] getOrCreatePropertyKeyIds( Iterable<String> properties )\n         {\n-            return Iterables.stream( properties )\n-                    .mapToInt( BatchInserterImpl.this::getOrCreatePropertyKeyId )\n-                    .toArray();\n+            return Iterables.stream( properties ).mapToInt( BatchInserterImpl.this::getOrCreatePropertyKeyId ).toArray();\n         }\n \n         private int[] getOrCreatePropertyKeyIds( String[] properties )\n         {\n-            return Arrays.stream( properties )\n-                    .mapToInt( BatchInserterImpl.this::getOrCreatePropertyKeyId )\n-                    .toArray();\n+            return Arrays.stream( properties ).mapToInt( BatchInserterImpl.this::getOrCreatePropertyKeyId ).toArray();\n         }\n \n         @Override\n@@ -1344,9 +1278,8 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n         }\n \n         @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n-        {\n+        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n+{\n             populator.add( batchedUpdates );\n             populator.verifyDeferredConstraints( propertyAccessor );\n         }\n@@ -1368,4 +1301,4 @@ public class BatchInserterImpl implements BatchInserter, IndexConfigStoreProvide\n             populator.close( populationCompletedSuccessfully );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 202
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}