{
    "project_name": "opencb-opencga",
    "error_id": "39",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Test\n    public void testGenotypes() throws Exception {\n        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n        assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n        assertEquals(Arrays.asList(\"1/1\"), GenotypeClass.HOM_ALT.filter(gts));\n        assertEquals(Arrays.asList(\"0/1\", \"1/2\", \"./1\", \"1/.\"), GenotypeClass.HET.filter(gts));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "18",
                    "column": "50",
                    "severity": "error",
                    "message": "'{' at column 50 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/39/GenotypeClassTest.java\nindex 49114652e83..25184b4f30d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/39/GenotypeClassTest.java\n@@ -15,9 +15,8 @@ import static org.junit.Assert.assertEquals;\n public class GenotypeClassTest {\n \n     @Test\n-    public void testGenotypes() throws Exception {\n-        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n-        assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n+    public void testGenotypes() throws Exception { List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n+    assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n         assertEquals(Arrays.asList(\"1/1\"), GenotypeClass.HOM_ALT.filter(gts));\n         assertEquals(Arrays.asList(\"0/1\", \"1/2\", \"./1\", \"1/.\"), GenotypeClass.HET.filter(gts));\n         assertEquals(Arrays.asList(\"0/1\"), GenotypeClass.HET_REF.filter(gts));\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/39/GenotypeClassTest.java\nindex 49114652e83..a235b0ad477 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/39/GenotypeClassTest.java\n@@ -14,47 +14,47 @@ import static org.junit.Assert.assertEquals;\n  */\n public class GenotypeClassTest {\n \n-    @Test\n-    public void testGenotypes() throws Exception {\n-        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n-        assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n-        assertEquals(Arrays.asList(\"1/1\"), GenotypeClass.HOM_ALT.filter(gts));\n-        assertEquals(Arrays.asList(\"0/1\", \"1/2\", \"./1\", \"1/.\"), GenotypeClass.HET.filter(gts));\n-        assertEquals(Arrays.asList(\"0/1\"), GenotypeClass.HET_REF.filter(gts));\n-        assertEquals(Arrays.asList(\"1/2\"), GenotypeClass.HET_ALT.filter(gts));\n-        assertEquals(Arrays.asList(\"./1\", \"1/.\"), GenotypeClass.HET_MISS.filter(gts));\n-        assertEquals(Arrays.asList(\"./.\", \".\"), GenotypeClass.MISS.filter(gts));\n-        assertEquals(Arrays.asList(\"0/2\", \"2/2\", \"2/3\", \"2/.\"), GenotypeClass.SEC_ALT.filter(gts));\n-\n-    }\n-\n-    @Test\n-    public void testPhasedGenotypes() throws Exception {\n-        List<String> loadedGenotypes = Arrays.asList(\n-                \"0/0\", \"0\",\n-                \"0/1\", \"1/1\",\n-                \"0|1\", \"1|0\", \"1|1\",\n-                \"./.\", \".|.\", \".\",\n-                \"1/2\", \"1|2\", \"./0\", \".|0\", \"0|.\", \"0/.\", \"./1\", \"1/.\");\n-        assertEquals(Arrays.asList(\"0/1\", \"0|1\", \"1|0\"), GenotypeClass.filter(Arrays.asList(\"0/1\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"!0/1\", \"!0|1\", \"!1|0\"), GenotypeClass.filter(Arrays.asList(\"!0/1\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"0/1\", \"0|1\", \"1|0\"), GenotypeClass.filter(Arrays.asList(\"1/0\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"0/1\", \"0|1\", \"1|0\"), GenotypeClass.filter(Arrays.asList(\"0/1\", \"1/0\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"0|1\"), GenotypeClass.filter(Arrays.asList(\"0|1\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"1|0\"), GenotypeClass.filter(Arrays.asList(\"1|0\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"0\"), GenotypeClass.filter(Arrays.asList(\"0\"), loadedGenotypes));\n-        assertEquals(Arrays.asList(\"1\"), GenotypeClass.filter(Arrays.asList(\"1\"), loadedGenotypes));\n-    }\n-\n-\n-    @Test\n-    public void testMultiAllelicGenotypes() throws Exception {\n-        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"1/3\", \"1|3\", \"2|1\", \"0/2\", \"2/2\", \"3/3\", \"2/3\",\n-                \"2/4\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n-        assertEquals(Arrays.asList(\"1|3\", \"2|1\", \"1/2\", \"1/3\"), GenotypeClass.expandMultiAllelicGenotype(\"1/4\", gts));\n-\n-        assertEquals(Arrays.asList(\"2/2\", \"3/3\", \"2/3\", \"2/4\"), GenotypeClass.expandMultiAllelicGenotype(\"2/2\", gts));\n+  @Test\n+  public void testGenotypes() throws Exception {\n+    List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n+    assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n+    assertEquals(Arrays.asList(\"1/1\"), GenotypeClass.HOM_ALT.filter(gts));\n+    assertEquals(Arrays.asList(\"0/1\", \"1/2\", \"./1\", \"1/.\"), GenotypeClass.HET.filter(gts));\n+    assertEquals(Arrays.asList(\"0/1\"), GenotypeClass.HET_REF.filter(gts));\n+    assertEquals(Arrays.asList(\"1/2\"), GenotypeClass.HET_ALT.filter(gts));\n+    assertEquals(Arrays.asList(\"./1\", \"1/.\"), GenotypeClass.HET_MISS.filter(gts));\n+    assertEquals(Arrays.asList(\"./.\", \".\"), GenotypeClass.MISS.filter(gts));\n+    assertEquals(Arrays.asList(\"0/2\", \"2/2\", \"2/3\", \"2/.\"), GenotypeClass.SEC_ALT.filter(gts));\n+\n+  }\n+\n+  @Test\n+  public void testPhasedGenotypes() throws Exception {\n+    List<String> loadedGenotypes = Arrays.asList(\n+        \"0/0\", \"0\",\n+        \"0/1\", \"1/1\",\n+        \"0|1\", \"1|0\", \"1|1\",\n+        \"./.\", \".|.\", \".\",\n+        \"1/2\", \"1|2\", \"./0\", \".|0\", \"0|.\", \"0/.\", \"./1\", \"1/.\");\n+    assertEquals(Arrays.asList(\"0/1\", \"0|1\", \"1|0\"), GenotypeClass.filter(Arrays.asList(\"0/1\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"!0/1\", \"!0|1\", \"!1|0\"), GenotypeClass.filter(Arrays.asList(\"!0/1\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"0/1\", \"0|1\", \"1|0\"), GenotypeClass.filter(Arrays.asList(\"1/0\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"0/1\", \"0|1\", \"1|0\"), GenotypeClass.filter(Arrays.asList(\"0/1\", \"1/0\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"0|1\"), GenotypeClass.filter(Arrays.asList(\"0|1\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"1|0\"), GenotypeClass.filter(Arrays.asList(\"1|0\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"0\"), GenotypeClass.filter(Arrays.asList(\"0\"), loadedGenotypes));\n+    assertEquals(Arrays.asList(\"1\"), GenotypeClass.filter(Arrays.asList(\"1\"), loadedGenotypes));\n+  }\n+\n+\n+  @Test\n+  public void testMultiAllelicGenotypes() throws Exception {\n+    List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"1/3\", \"1|3\", \"2|1\", \"0/2\", \"2/2\", \"3/3\", \"2/3\",\n+        \"2/4\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n+    assertEquals(Arrays.asList(\"1|3\", \"2|1\", \"1/2\", \"1/3\"), GenotypeClass.expandMultiAllelicGenotype(\"1/4\", gts));\n+\n+    assertEquals(Arrays.asList(\"2/2\", \"3/3\", \"2/3\", \"2/4\"), GenotypeClass.expandMultiAllelicGenotype(\"2/2\", gts));\n //        assertEquals(Arrays.asList(\"2/2\", \"3/3\"), GenotypeClass.expandMultiAllelicGenotype(\"2/2\", gts));\n //        assertEquals(Arrays.asList(\"2/3\", \"2/4\"), GenotypeClass.expandMultiAllelicGenotype(\"2/3\", gts));\n-    }\n+  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/39/GenotypeClassTest.java\nindex 49114652e83..708e924e2c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/39/GenotypeClassTest.java\n@@ -57,4 +57,4 @@ public class GenotypeClassTest {\n //        assertEquals(Arrays.asList(\"2/2\", \"3/3\"), GenotypeClass.expandMultiAllelicGenotype(\"2/2\", gts));\n //        assertEquals(Arrays.asList(\"2/3\", \"2/4\"), GenotypeClass.expandMultiAllelicGenotype(\"2/3\", gts));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "column": "107",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "20",
                    "column": "1",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "20",
                    "column": "2",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/39/GenotypeClassTest.java\nindex 49114652e83..cba9d310f39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/39/GenotypeClassTest.java\n@@ -16,7 +16,8 @@ public class GenotypeClassTest {\n \n     @Test\n     public void testGenotypes() throws Exception {\n-        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n+        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\",\"./0\"\n+,\"0/.\", \"./1\", \"1/.\", \"2/.\");\n         assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n         assertEquals(Arrays.asList(\"1/1\"), GenotypeClass.HOM_ALT.filter(gts));\n         assertEquals(Arrays.asList(\"0/1\", \"1/2\", \"./1\", \"1/.\"), GenotypeClass.HET.filter(gts));\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "18",
                    "column": "50",
                    "severity": "error",
                    "message": "'{' at column 50 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/39/GenotypeClassTest.java\nindex 49114652e83..25184b4f30d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/39/GenotypeClassTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/39/GenotypeClassTest.java\n@@ -15,9 +15,8 @@ import static org.junit.Assert.assertEquals;\n public class GenotypeClassTest {\n \n     @Test\n-    public void testGenotypes() throws Exception {\n-        List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n-        assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n+    public void testGenotypes() throws Exception { List<String> gts = Arrays.asList(\"0/0\", \"0\", \"0/1\", \"1/1\", \"./.\", \".\", \"1/2\", \"0/2\", \"2/2\", \"2/3\", \"./0\", \"0/.\", \"./1\", \"1/.\", \"2/.\");\n+    assertEquals(Arrays.asList(\"0/0\", \"0\"), GenotypeClass.HOM_REF.filter(gts));\n         assertEquals(Arrays.asList(\"1/1\"), GenotypeClass.HOM_ALT.filter(gts));\n         assertEquals(Arrays.asList(\"0/1\", \"1/2\", \"./1\", \"1/.\"), GenotypeClass.HET.filter(gts));\n         assertEquals(Arrays.asList(\"0/1\"), GenotypeClass.HET_REF.filter(gts));\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}