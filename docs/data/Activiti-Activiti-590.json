{
    "project_name": "Activiti-Activiti",
    "error_id": "590",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter.export;\n\nimport javax.xml.stream.XMLStreamWriter;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/590/SignalAndMessageDefinitionExport.java\nindex 9592cacd2ed..8baf0d5acce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/590/SignalAndMessageDefinitionExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/590/SignalAndMessageDefinitionExport.java\nindex 9592cacd2ed..08e81763309 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/590/SignalAndMessageDefinitionExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n@@ -44,7 +45,7 @@ public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n                         if (StringUtils.isNotEmpty(signalEvent.getSignalRef())) {\n                             if (!model.containsSignalId(signalEvent.getSignalRef())) {\n                                 Signal signal = new Signal(signalEvent.getSignalRef(),\n-                                                           signalEvent.getSignalRef());\n+                                        signalEvent.getSignalRef());\n                                 model.addSignal(signal);\n                             }\n                         }\n@@ -53,8 +54,8 @@ public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n                         if (StringUtils.isNotEmpty(messageEvent.getMessageRef())) {\n                             if (!model.containsMessageId(messageEvent.getMessageRef())) {\n                                 Message message = new Message(messageEvent.getMessageRef(),\n-                                                              messageEvent.getMessageRef(),\n-                                                              null);\n+                                        messageEvent.getMessageRef(),\n+                                        null);\n                                 model.addMessage(message);\n                             }\n                         }\n@@ -66,13 +67,13 @@ public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n         for (Signal signal : model.getSignals()) {\n             xtw.writeStartElement(ELEMENT_SIGNAL);\n             xtw.writeAttribute(ATTRIBUTE_ID,\n-                               signal.getId());\n+                    signal.getId());\n             xtw.writeAttribute(ATTRIBUTE_NAME,\n-                               signal.getName());\n+                    signal.getName());\n             if (signal.getScope() != null) {\n                 xtw.writeAttribute(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                   ATTRIBUTE_SCOPE,\n-                                   signal.getScope());\n+                        ATTRIBUTE_SCOPE,\n+                        signal.getScope());\n             }\n             xtw.writeEndElement();\n         }\n@@ -83,24 +84,24 @@ public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n             // remove the namespace from the message id if set\n             if (model.getTargetNamespace() != null && messageId.startsWith(model.getTargetNamespace())) {\n                 messageId = messageId.replace(model.getTargetNamespace(),\n-                                              \"\");\n+                        \"\");\n                 messageId = messageId.replaceFirst(\":\",\n-                                                   \"\");\n+                        \"\");\n             } else {\n                 for (String prefix : model.getNamespaces().keySet()) {\n                     String namespace = model.getNamespace(prefix);\n                     if (messageId.startsWith(namespace)) {\n                         messageId = messageId.replace(model.getTargetNamespace(),\n-                                                      \"\");\n+                                \"\");\n                         messageId = prefix + messageId;\n                     }\n                 }\n             }\n             xtw.writeAttribute(ATTRIBUTE_ID,\n-                               messageId);\n+                    messageId);\n             if (StringUtils.isNotEmpty(message.getName())) {\n                 xtw.writeAttribute(ATTRIBUTE_NAME,\n-                                   message.getName());\n+                        message.getName());\n             }\n             if (StringUtils.isNotEmpty(message.getItemRef())) {\n                 // replace the namespace by the right prefix\n@@ -110,16 +111,16 @@ public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n                     if (itemRef.startsWith(namespace)) {\n                         if (prefix.isEmpty()) {\n                             itemRef = itemRef.replace(namespace + \":\",\n-                                                      \"\");\n+                                    \"\");\n                         } else {\n                             itemRef = itemRef.replace(namespace,\n-                                                      prefix);\n+                                    prefix);\n                         }\n                         break;\n                     }\n                 }\n                 xtw.writeAttribute(ATTRIBUTE_ITEM_REF,\n-                                   itemRef);\n+                        itemRef);\n             }\n             xtw.writeEndElement();\n         }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 8, indentation should be the same level as line 83.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 10, indentation should be the same level as line 101.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/590/SignalAndMessageDefinitionExport.java\nindex 9592cacd2ed..4c76f92dd2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/590/SignalAndMessageDefinitionExport.java\n@@ -16,7 +16,6 @@\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n-\n import org.activiti.bpmn.constants.BpmnXMLConstants;\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.Event;\n@@ -29,99 +28,92 @@ import org.activiti.bpmn.model.Signal;\n import org.activiti.bpmn.model.SignalEventDefinition;\n import org.apache.commons.lang3.StringUtils;\n \n-public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n \n-    public static void writeSignalsAndMessages(BpmnModel model,\n-                                               XMLStreamWriter xtw) throws Exception {\n+public class SignalAndMessageDefinitionExport implements BpmnXMLConstants {\n \n-        for (Process process : model.getProcesses()) {\n-            for (FlowElement flowElement : process.findFlowElementsOfType(Event.class)) {\n-                Event event = (Event) flowElement;\n-                if (!event.getEventDefinitions().isEmpty()) {\n-                    EventDefinition eventDefinition = event.getEventDefinitions().get(0);\n-                    if (eventDefinition instanceof SignalEventDefinition) {\n-                        SignalEventDefinition signalEvent = (SignalEventDefinition) eventDefinition;\n-                        if (StringUtils.isNotEmpty(signalEvent.getSignalRef())) {\n-                            if (!model.containsSignalId(signalEvent.getSignalRef())) {\n-                                Signal signal = new Signal(signalEvent.getSignalRef(),\n-                                                           signalEvent.getSignalRef());\n-                                model.addSignal(signal);\n-                            }\n-                        }\n-                    } else if (eventDefinition instanceof MessageEventDefinition) {\n-                        MessageEventDefinition messageEvent = (MessageEventDefinition) eventDefinition;\n-                        if (StringUtils.isNotEmpty(messageEvent.getMessageRef())) {\n-                            if (!model.containsMessageId(messageEvent.getMessageRef())) {\n-                                Message message = new Message(messageEvent.getMessageRef(),\n-                                                              messageEvent.getMessageRef(),\n-                                                              null);\n-                                model.addMessage(message);\n-                            }\n-                        }\n-                    }\n+  public static void writeSignalsAndMessages(BpmnModel model, XMLStreamWriter xtw) throws Exception {\n+    for (Process process : model.getProcesses()) {\n+        for (FlowElement flowElement : process.findFlowElementsOfType(Event.class)) {\n+            Event event = (Event) flowElement;\n+            if (!event.getEventDefinitions().isEmpty()) {\n+              EventDefinition eventDefinition = event.getEventDefinitions().get(0);\n+              if (eventDefinition instanceof SignalEventDefinition) {\n+                SignalEventDefinition signalEvent = (SignalEventDefinition) eventDefinition;\n+                if (StringUtils.isNotEmpty(signalEvent.getSignalRef())) {\n+                  if (!model.containsSignalId(signalEvent.getSignalRef())) {\n+                    Signal signal = new Signal(signalEvent.getSignalRef(),\n+                                               signalEvent.getSignalRef());\n+                    model.addSignal(signal);\n+                  }\n+                }\n+              } else if (eventDefinition instanceof MessageEventDefinition) {\n+                MessageEventDefinition messageEvent = (MessageEventDefinition) eventDefinition;\n+                if (StringUtils.isNotEmpty(messageEvent.getMessageRef())) {\n+                  if (!model.containsMessageId(messageEvent.getMessageRef())) {\n+                    Message message = new Message(messageEvent.getMessageRef(),\n+                                                  messageEvent.getMessageRef(),\n+                                                  null);\n+                    model.addMessage(message);\n+                  }\n                 }\n+              }\n             }\n         }\n+    }\n \n-        for (Signal signal : model.getSignals()) {\n-            xtw.writeStartElement(ELEMENT_SIGNAL);\n-            xtw.writeAttribute(ATTRIBUTE_ID,\n-                               signal.getId());\n-            xtw.writeAttribute(ATTRIBUTE_NAME,\n-                               signal.getName());\n-            if (signal.getScope() != null) {\n-                xtw.writeAttribute(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                   ATTRIBUTE_SCOPE,\n-                                   signal.getScope());\n-            }\n-            xtw.writeEndElement();\n+    for (Signal signal : model.getSignals()) {\n+        xtw.writeStartElement(ELEMENT_SIGNAL);\n+        xtw.writeAttribute(ATTRIBUTE_ID, signal.getId());\n+        xtw.writeAttribute(ATTRIBUTE_NAME, signal.getName());\n+        if (signal.getScope() != null) {\n+          xtw.writeAttribute(ACTIVITI_EXTENSIONS_NAMESPACE,\n+                             ATTRIBUTE_SCOPE,\n+                             signal.getScope());\n         }\n+        xtw.writeEndElement();\n+    }\n+\n+    for (Message message : model.getMessages()) {\n+        xtw.writeStartElement(BPMN2_PREFIX,\n+                              ELEMENT_MESSAGE,\n+                              BPMN2_NAMESPACE);\n \n-        for (Message message : model.getMessages()) {\n-            xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_MESSAGE, BPMN2_NAMESPACE);\n-            String messageId = message.getId();\n+        String messageId = message.getId();\n             // remove the namespace from the message id if set\n-            if (model.getTargetNamespace() != null && messageId.startsWith(model.getTargetNamespace())) {\n-                messageId = messageId.replace(model.getTargetNamespace(),\n-                                              \"\");\n-                messageId = messageId.replaceFirst(\":\",\n-                                                   \"\");\n-            } else {\n-                for (String prefix : model.getNamespaces().keySet()) {\n-                    String namespace = model.getNamespace(prefix);\n-                    if (messageId.startsWith(namespace)) {\n-                        messageId = messageId.replace(model.getTargetNamespace(),\n-                                                      \"\");\n-                        messageId = prefix + messageId;\n-                    }\n-                }\n-            }\n-            xtw.writeAttribute(ATTRIBUTE_ID,\n-                               messageId);\n-            if (StringUtils.isNotEmpty(message.getName())) {\n-                xtw.writeAttribute(ATTRIBUTE_NAME,\n-                                   message.getName());\n-            }\n-            if (StringUtils.isNotEmpty(message.getItemRef())) {\n+        if (model.getTargetNamespace() != null && messageId.startsWith(model.getTargetNamespace())) {\n+          messageId = messageId.replace(model.getTargetNamespace(), \"\");\n+          messageId = messageId.replaceFirst(\":\", \"\");\n+        } else {\n+          for (String prefix : model.getNamespaces().keySet()) {\n+              String namespace = model.getNamespace(prefix);\n+              if (messageId.startsWith(namespace)) {\n+                messageId = messageId.replace(model.getTargetNamespace(), \"\");\n+                messageId = prefix + messageId;\n+              }\n+          }\n+        }\n+        xtw.writeAttribute(ATTRIBUTE_ID, messageId);\n+        if (StringUtils.isNotEmpty(message.getName())) {\n+          xtw.writeAttribute(ATTRIBUTE_NAME, message.getName());\n+        }\n+        if (StringUtils.isNotEmpty(message.getItemRef())) {\n                 // replace the namespace by the right prefix\n-                String itemRef = message.getItemRef();\n-                for (String prefix : model.getNamespaces().keySet()) {\n-                    String namespace = model.getNamespace(prefix);\n-                    if (itemRef.startsWith(namespace)) {\n-                        if (prefix.isEmpty()) {\n-                            itemRef = itemRef.replace(namespace + \":\",\n-                                                      \"\");\n-                        } else {\n-                            itemRef = itemRef.replace(namespace,\n-                                                      prefix);\n-                        }\n-                        break;\n-                    }\n+          String itemRef = message.getItemRef();\n+          for (String prefix : model.getNamespaces().keySet()) {\n+              String namespace = model.getNamespace(prefix);\n+              if (itemRef.startsWith(namespace)) {\n+                if (prefix.isEmpty()) {\n+                  itemRef = itemRef.replace(namespace + \":\", \"\");\n+                } else {\n+                  itemRef = itemRef.replace(namespace, prefix);\n                 }\n-                xtw.writeAttribute(ATTRIBUTE_ITEM_REF,\n-                                   itemRef);\n-            }\n-            xtw.writeEndElement();\n+                break;\n+              }\n+          }\n+          xtw.writeAttribute(ATTRIBUTE_ITEM_REF, itemRef);\n         }\n+        xtw.writeEndElement();\n     }\n-}\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/590/SignalAndMessageDefinitionExport.java\nindex 9592cacd2ed..8baf0d5acce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/590/SignalAndMessageDefinitionExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/590/SignalAndMessageDefinitionExport.java\nindex 9592cacd2ed..8baf0d5acce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/590/SignalAndMessageDefinitionExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/590/SignalAndMessageDefinitionExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}