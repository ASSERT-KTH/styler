{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "209",
    "information": {
        "errors": [
            {
                "line": "97",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   *    if connect to normal ServiceCenter, same with the method\n   *    {@linkplain org.apache.servicecomb.serviceregistry.ServiceRegistry#getRemoteMicroservice(String)}  }\n   *    if connect to ServiceCenter Aggregator, not only contain the target ServiceCenter but also other ServiceCenter clusters\n   * </p>\n   */\n  Microservice getAggregatedRemoteMicroservice(String microserviceId);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/209/ServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/209/ServiceRegistry.java\nindex dc00b4de988..bc24ca5d001 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/209/ServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/209/ServiceRegistry.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.serviceregistry;\n \n import java.util.List;\n@@ -74,10 +75,10 @@ public interface ServiceRegistry {\n   ServiceRegistryClient getServiceRegistryClient();\n \n   List<MicroserviceInstance> findServiceInstance(String appId, String microserviceName,\n-      String microserviceVersionRule);\n+                                                 String microserviceVersionRule);\n \n   MicroserviceInstances findServiceInstances(String appId, String microserviceName,\n-      String microserviceVersionRule);\n+                                             String microserviceVersionRule);\n \n   MicroserviceCache findMicroserviceCache(MicroserviceCacheKey microserviceCacheKey);\n \n@@ -92,9 +93,9 @@ public interface ServiceRegistry {\n \n   /**\n    * <p>\n-   *    if connect to normal ServiceCenter, same with the method\n-   *    {@linkplain org.apache.servicecomb.serviceregistry.ServiceRegistry#getRemoteMicroservice(String)}  }\n-   *    if connect to ServiceCenter Aggregator, not only contain the target ServiceCenter but also other ServiceCenter clusters\n+   * if connect to normal ServiceCenter, same with the method\n+   * {@linkplain org.apache.servicecomb.serviceregistry.ServiceRegistry#getRemoteMicroservice(String)}  }\n+   * if connect to ServiceCenter Aggregator, not only contain the target ServiceCenter but also other ServiceCenter clusters\n    * </p>\n    */\n   Microservice getAggregatedRemoteMicroservice(String microserviceId);\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/209/ServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/209/ServiceRegistry.java\nindex dc00b4de988..a5e9dfc9482 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/209/ServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/209/ServiceRegistry.java\n@@ -98,4 +98,4 @@ public interface ServiceRegistry {\n    * </p>\n    */\n   Microservice getAggregatedRemoteMicroservice(String microserviceId);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}