{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2564",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2564/BatchOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2564/BatchOperations.java\nindex 5a053226a72..1dd2bca67b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2564/BatchOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2564/BatchOperations.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.batch;\n \n import org.codehaus.jackson.JsonFactory;\n@@ -46,176 +47,174 @@ import org.neo4j.server.web.WebServer;\n \n public abstract class BatchOperations\n {\n-    private static final Pattern PLACHOLDER_PATTERN = Pattern.compile( \"\\\\{(\\\\d{1,10})}\" );\n-\n-    protected static final String ID_KEY = \"id\";\n-    protected static final String METHOD_KEY = \"method\";\n-    protected static final String BODY_KEY = \"body\";\n-    protected static final String TO_KEY = \"to\";\n-    protected static final JsonFactory jsonFactory = new JsonFactory().disable( JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM );\n-    protected final WebServer webServer;\n-    protected final ObjectMapper mapper;\n-\n-    public BatchOperations( WebServer webServer )\n+  private static final Pattern PLACHOLDER_PATTERN = Pattern.compile(\"\\\\{(\\\\d{1,10})}\");\n+\n+  protected static final String ID_KEY = \"id\";\n+  protected static final String METHOD_KEY = \"method\";\n+  protected static final String BODY_KEY = \"body\";\n+  protected static final String TO_KEY = \"to\";\n+  protected static final JsonFactory jsonFactory = new JsonFactory().disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n+  protected final WebServer webServer;\n+  protected final ObjectMapper mapper;\n+\n+  public BatchOperations(WebServer webServer)\n+  {\n+    this.webServer = webServer;\n+    mapper = new ObjectMapper();\n+  }\n+\n+  protected void addHeaders(final InternalJettyServletRequest res,\n+                            final HttpHeaders httpHeaders)\n+  {\n+    for (Map.Entry<String, List<String>> header : httpHeaders.getRequestHeaders().entrySet())\n     {\n-        this.webServer = webServer;\n-        mapper = new ObjectMapper();\n+      final String key = header.getKey();\n+      final List<String> value = header.getValue();\n+      if (value == null)\n+      {\n+        continue;\n+      }\n+      if (value.size() != 1)\n+      {\n+        throw new IllegalArgumentException(\"expecting one value per header\");\n+      }\n+      if (!key.equals(\"Accept\") && !key.equals(\"Content-Type\"))\n+      {\n+        res.addHeader(key, value.get(0));\n+      }\n     }\n+    // Make sure they are there and always json\n+    // Taking advantage of Map semantics here\n+    res.addHeader(\"Accept\", \"application/json\");\n+    res.addHeader(\"Content-Type\", \"application/json\");\n+  }\n \n-    protected void addHeaders( final InternalJettyServletRequest res,\n-                               final HttpHeaders httpHeaders )\n-    {\n-        for ( Map.Entry<String,List<String>> header : httpHeaders.getRequestHeaders().entrySet() )\n-        {\n-            final String key = header.getKey();\n-            final List<String> value = header.getValue();\n-            if ( value == null )\n-            {\n-                continue;\n-            }\n-            if ( value.size() != 1 )\n-            {\n-                throw new IllegalArgumentException( \"expecting one value per header\" );\n-            }\n-            if ( !key.equals( \"Accept\" ) && !key.equals( \"Content-Type\" ) )\n-            {\n-                res.addHeader( key, value.get( 0 ) );\n-            }\n-        }\n-        // Make sure they are there and always json\n-        // Taking advantage of Map semantics here\n-        res.addHeader(\"Accept\", \"application/json\");\n-        res.addHeader(\"Content-Type\", \"application/json\");\n-    }\n+  protected URI calculateTargetUri(UriInfo serverUriInfo, String requestedPath)\n+  {\n+    URI baseUri = serverUriInfo.getBaseUri();\n \n-    protected URI calculateTargetUri( UriInfo serverUriInfo, String requestedPath )\n+    if (requestedPath.startsWith(baseUri.toString()))\n     {\n-        URI baseUri = serverUriInfo.getBaseUri();\n-\n-        if ( requestedPath.startsWith( baseUri.toString() ) )\n-        {\n-            requestedPath = requestedPath.substring( baseUri.toString().length() );\n-        }\n-\n-        if ( !requestedPath.startsWith( \"/\" ) )\n-        {\n-            requestedPath = \"/\" + requestedPath;\n-        }\n-\n-        return baseUri.resolve( \".\" + requestedPath );\n+      requestedPath = requestedPath.substring(baseUri.toString().length());\n     }\n \n-    protected String replaceLocationPlaceholders( String str,\n-                                                  Map<Integer, String> locations )\n+    if (!requestedPath.startsWith(\"/\"))\n     {\n-        if ( !str.contains( \"{\" ) )\n-        {\n-            return str;\n-        }\n-        Matcher matcher = PLACHOLDER_PATTERN.matcher( str );\n-        StringBuffer sb = new StringBuffer();\n-        String replacement = null;\n-        while ( matcher.find() )\n-        {\n-            String id = matcher.group( 1 );\n-            try\n-            {\n-                replacement = locations.get( Integer.valueOf( id ) );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                // The body contained a value that happened to match our regex, but is not a valid integer.\n-                // Specifically, the digits inside the brackets must have been > 2^31-1.\n-                // Simply ignore this, since we don't support non-integer placeholders, this is not a valid placeholder\n-            }\n-            if ( replacement != null )\n-            {\n-                matcher.appendReplacement( sb, replacement );\n-            }\n-            else\n-            {\n-                matcher.appendReplacement( sb, matcher.group() );\n-            }\n-        }\n-        matcher.appendTail( sb );\n-        return sb.toString();\n+      requestedPath = \"/\" + requestedPath;\n     }\n \n-    protected boolean is2XXStatusCode( int statusCode )\n-    {\n-        return statusCode >= 200 && statusCode < 300;\n-    }\n+    return baseUri.resolve(\".\" + requestedPath);\n+  }\n \n-    protected void parseAndPerform( UriInfo uriInfo, HttpHeaders httpHeaders, HttpServletRequest req,\n-                                    InputStream body, Map<Integer, String> locations ) throws IOException, ServletException\n+  protected String replaceLocationPlaceholders(String str,\n+                                               Map<Integer, String> locations)\n+  {\n+    if (!str.contains(\"{\"))\n     {\n-        JsonParser jp = jsonFactory.createJsonParser(body);\n-        JsonToken token;\n-        RequestData requestData = RequestData.from( req );\n-\n-        while ( (token = jp.nextToken()) != null )\n-        {\n-            if ( token == JsonToken.START_OBJECT )\n-            {\n-                String jobMethod = \"\";\n-                String jobPath = \"\";\n-                String jobBody = \"\";\n-                Integer jobId = null;\n-                while ( (token = jp.nextToken()) != JsonToken.END_OBJECT && token != null )\n-                {\n-                    String field = jp.getText();\n-                    jp.nextToken();\n-                    switch ( field )\n-                    {\n-                    case METHOD_KEY:\n-                        jobMethod = jp.getText().toUpperCase();\n-                        break;\n-                    case TO_KEY:\n-                        jobPath = jp.getText();\n-                        break;\n-                    case ID_KEY:\n-                        jobId = jp.getIntValue();\n-                        break;\n-                    case BODY_KEY:\n-                        jobBody = readBody( jp );\n-                        break;\n-                    default:\n-                        break;\n-                    }\n-                }\n-                // Read one job description. Execute it.\n-                performRequest( uriInfo, jobMethod, jobPath, jobBody, jobId, httpHeaders, locations, requestData );\n-            }\n-        }\n+      return str;\n     }\n-\n-    private String readBody( JsonParser jp ) throws IOException\n+    Matcher matcher = PLACHOLDER_PATTERN.matcher(str);\n+    StringBuffer sb = new StringBuffer();\n+    String replacement = null;\n+    while (matcher.find())\n     {\n-        JsonNode node = mapper.readTree( jp );\n-        StringWriter out = new StringWriter();\n-        JsonGenerator gen = jsonFactory\n-                .createJsonGenerator(out);\n-        mapper.writeTree( gen, node );\n-        gen.flush();\n-        gen.close();\n-        return out.toString();\n+      String id = matcher.group(1);\n+      try\n+      {\n+        replacement = locations.get(Integer.valueOf(id));\n+      } catch (NumberFormatException e)\n+      {\n+        // The body contained a value that happened to match our regex, but is not a valid integer.\n+        // Specifically, the digits inside the brackets must have been > 2^31-1.\n+        // Simply ignore this, since we don't support non-integer placeholders, this is not a valid placeholder\n+      }\n+      if (replacement != null)\n+      {\n+        matcher.appendReplacement(sb, replacement);\n+      } else\n+      {\n+        matcher.appendReplacement(sb, matcher.group());\n+      }\n     }\n-\n-    protected void performRequest( UriInfo uriInfo, String method, String path, String body, Integer id,\n-                                   HttpHeaders httpHeaders, Map<Integer, String> locations,\n-                                   RequestData requestData ) throws IOException, ServletException\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+  }\n+\n+  protected boolean is2XXStatusCode(int statusCode)\n+  {\n+    return statusCode >= 200 && statusCode < 300;\n+  }\n+\n+  protected void parseAndPerform(UriInfo uriInfo, HttpHeaders httpHeaders, HttpServletRequest req,\n+                                 InputStream body, Map<Integer, String> locations) throws IOException, ServletException\n+  {\n+    JsonParser jp = jsonFactory.createJsonParser(body);\n+    JsonToken token;\n+    RequestData requestData = RequestData.from(req);\n+\n+    while ((token = jp.nextToken()) != null)\n     {\n-        path = replaceLocationPlaceholders(path, locations);\n-        body = replaceLocationPlaceholders(body, locations);\n-        URI targetUri = calculateTargetUri(uriInfo, path);\n-\n-        InternalJettyServletResponse res = new InternalJettyServletResponse();\n-        InternalJettyServletRequest req = new InternalJettyServletRequest( method, targetUri.toString(), body, res, requestData );\n-        addHeaders( req, httpHeaders );\n-\n-        invoke( method, path, body, id, targetUri, req, res );\n+      if (token == JsonToken.START_OBJECT)\n+      {\n+        String jobMethod = \"\";\n+        String jobPath = \"\";\n+        String jobBody = \"\";\n+        Integer jobId = null;\n+        while ((token = jp.nextToken()) != JsonToken.END_OBJECT && token != null)\n+        {\n+          String field = jp.getText();\n+          jp.nextToken();\n+          switch (field)\n+          {\n+            case METHOD_KEY:\n+              jobMethod = jp.getText().toUpperCase();\n+              break;\n+            case TO_KEY:\n+              jobPath = jp.getText();\n+              break;\n+            case ID_KEY:\n+              jobId = jp.getIntValue();\n+              break;\n+            case BODY_KEY:\n+              jobBody = readBody(jp);\n+              break;\n+            default:\n+              break;\n+          }\n+        }\n+        // Read one job description. Execute it.\n+        performRequest(uriInfo, jobMethod, jobPath, jobBody, jobId, httpHeaders, locations, requestData);\n+      }\n     }\n-\n-    protected abstract void invoke( String method, String path, String body, Integer id, URI targetUri,\n-            InternalJettyServletRequest req, InternalJettyServletResponse res ) throws IOException, ServletException;\n+  }\n+\n+  private String readBody(JsonParser jp) throws IOException\n+  {\n+    JsonNode node = mapper.readTree(jp);\n+    StringWriter out = new StringWriter();\n+    JsonGenerator gen = jsonFactory\n+        .createJsonGenerator(out);\n+    mapper.writeTree(gen, node);\n+    gen.flush();\n+    gen.close();\n+    return out.toString();\n+  }\n+\n+  protected void performRequest(UriInfo uriInfo, String method, String path, String body, Integer id,\n+                                HttpHeaders httpHeaders, Map<Integer, String> locations,\n+                                RequestData requestData) throws IOException, ServletException\n+  {\n+    path = replaceLocationPlaceholders(path, locations);\n+    body = replaceLocationPlaceholders(body, locations);\n+    URI targetUri = calculateTargetUri(uriInfo, path);\n+\n+    InternalJettyServletResponse res = new InternalJettyServletResponse();\n+    InternalJettyServletRequest req = new InternalJettyServletRequest(method, targetUri.toString(), body, res, requestData);\n+    addHeaders(req, httpHeaders);\n+\n+    invoke(method, path, body, id, targetUri, req, res);\n+  }\n+\n+  protected abstract void invoke(String method, String path, String body, Integer id, URI targetUri,\n+                                 InternalJettyServletRequest req, InternalJettyServletResponse res) throws IOException, ServletException;\n }\n",
            "diff_size": 258
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2564/BatchOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2564/BatchOperations.java\nindex 5a053226a72..376a3b550bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2564/BatchOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2564/BatchOperations.java\n@@ -62,9 +62,8 @@ public abstract class BatchOperations\n         mapper = new ObjectMapper();\n     }\n \n-    protected void addHeaders( final InternalJettyServletRequest res,\n-                               final HttpHeaders httpHeaders )\n-    {\n+    protected void addHeaders( final InternalJettyServletRequest res, final HttpHeaders httpHeaders )\n+{\n         for ( Map.Entry<String,List<String>> header : httpHeaders.getRequestHeaders().entrySet() )\n         {\n             final String key = header.getKey();\n@@ -73,26 +72,27 @@ public abstract class BatchOperations\n             {\n                 continue;\n             }\n-            if ( value.size() != 1 )\n+\n+if ( value.size() != 1 )\n             {\n                 throw new IllegalArgumentException( \"expecting one value per header\" );\n             }\n-            if ( !key.equals( \"Accept\" ) && !key.equals( \"Content-Type\" ) )\n+\n+if ( !key.equals( \"Accept\" ) && !key.equals( \"Content-Type\" ) )\n             {\n                 res.addHeader( key, value.get( 0 ) );\n             }\n         }\n         // Make sure they are there and always json\n         // Taking advantage of Map semantics here\n-        res.addHeader(\"Accept\", \"application/json\");\n-        res.addHeader(\"Content-Type\", \"application/json\");\n+        res.addHeader( \"Accept\", \"application/json\" );\n+        res.addHeader( \"Content-Type\", \"application/json\" );\n     }\n \n     protected URI calculateTargetUri( UriInfo serverUriInfo, String requestedPath )\n     {\n         URI baseUri = serverUriInfo.getBaseUri();\n-\n-        if ( requestedPath.startsWith( baseUri.toString() ) )\n+if ( requestedPath.startsWith( baseUri.toString() ) )\n         {\n             requestedPath = requestedPath.substring( baseUri.toString().length() );\n         }\n@@ -105,14 +105,14 @@ public abstract class BatchOperations\n         return baseUri.resolve( \".\" + requestedPath );\n     }\n \n-    protected String replaceLocationPlaceholders( String str,\n-                                                  Map<Integer, String> locations )\n-    {\n+    protected String replaceLocationPlaceholders( String str, Map<Integer,String> locations )\n+{\n         if ( !str.contains( \"{\" ) )\n         {\n             return str;\n         }\n-        Matcher matcher = PLACHOLDER_PATTERN.matcher( str );\n+\n+Matcher matcher = PLACHOLDER_PATTERN.matcher( str );\n         StringBuffer sb = new StringBuffer();\n         String replacement = null;\n         while ( matcher.find() )\n@@ -128,7 +128,8 @@ public abstract class BatchOperations\n                 // Specifically, the digits inside the brackets must have been > 2^31-1.\n                 // Simply ignore this, since we don't support non-integer placeholders, this is not a valid placeholder\n             }\n-            if ( replacement != null )\n+\n+if ( replacement != null )\n             {\n                 matcher.appendReplacement( sb, replacement );\n             }\n@@ -146,9 +147,8 @@ public abstract class BatchOperations\n         return statusCode >= 200 && statusCode < 300;\n     }\n \n-    protected void parseAndPerform( UriInfo uriInfo, HttpHeaders httpHeaders, HttpServletRequest req,\n-                                    InputStream body, Map<Integer, String> locations ) throws IOException, ServletException\n-    {\n+    protected void parseAndPerform( UriInfo uriInfo, HttpHeaders httpHeaders, HttpServletRequest req, InputStream body, Map<Integer,String> locations ) throws IOException, ServletException\n+{\n         JsonParser jp = jsonFactory.createJsonParser(body);\n         JsonToken token;\n         RequestData requestData = RequestData.from( req );\n@@ -193,23 +193,20 @@ public abstract class BatchOperations\n     {\n         JsonNode node = mapper.readTree( jp );\n         StringWriter out = new StringWriter();\n-        JsonGenerator gen = jsonFactory\n-                .createJsonGenerator(out);\n-        mapper.writeTree( gen, node );\n+        JsonGenerator gen = jsonFactory.createJsonGenerator(out);\n+mapper.writeTree( gen, node );\n         gen.flush();\n         gen.close();\n         return out.toString();\n     }\n \n-    protected void performRequest( UriInfo uriInfo, String method, String path, String body, Integer id,\n-                                   HttpHeaders httpHeaders, Map<Integer, String> locations,\n+    protected void performRequest( UriInfo uriInfo, String method, String path, String body, Integer id, HttpHeaders httpHeaders, Map<Integer,String> locations,\n                                    RequestData requestData ) throws IOException, ServletException\n-    {\n-        path = replaceLocationPlaceholders(path, locations);\n-        body = replaceLocationPlaceholders(body, locations);\n-        URI targetUri = calculateTargetUri(uriInfo, path);\n-\n-        InternalJettyServletResponse res = new InternalJettyServletResponse();\n+{\n+        path = replaceLocationPlaceholders( path, locations );\n+        body = replaceLocationPlaceholders( body, locations );\n+        URI targetUri = calculateTargetUri( uriInfo, path);\n+InternalJettyServletResponse res = new InternalJettyServletResponse();\n         InternalJettyServletRequest req = new InternalJettyServletRequest( method, targetUri.toString(), body, res, requestData );\n         addHeaders( req, httpHeaders );\n \n@@ -218,4 +215,4 @@ public abstract class BatchOperations\n \n     protected abstract void invoke( String method, String path, String body, Integer id, URI targetUri,\n             InternalJettyServletRequest req, InternalJettyServletResponse res ) throws IOException, ServletException;\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}