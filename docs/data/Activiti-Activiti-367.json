{
    "project_name": "Activiti-Activiti",
    "error_id": "367",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.time.DateTimeException;\nimport java.util.Date;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/367/TaskVariablesPayloadValidator.java\nindex cde100868fb..53587303940 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/367/TaskVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.time.DateTimeException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/367/TaskVariablesPayloadValidator.java\nindex cde100868fb..bd4b059055b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/367/TaskVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.time.DateTimeException;\n@@ -46,21 +47,21 @@ public class TaskVariablesPayloadValidator {\n     }\n \n     private void checkNotValidCharactersInVariableName(String name,\n-                                                        String errorMsg) {\n+                                                       String errorMsg) {\n \n         if (!variableNameValidator.validate(name)) {\n-            throw new IllegalStateException(errorMsg + (name != null ? name : \"null\" ));\n+            throw new IllegalStateException(errorMsg + (name != null ? name : \"null\"));\n         }\n     }\n \n     public CreateTaskVariablePayload handleCreateTaskVariablePayload(CreateTaskVariablePayload createTaskVariablePayload) {\n \n         checkNotValidCharactersInVariableName(createTaskVariablePayload.getName(),\n-                                               \"Variable has not a valid name: \");\n+                \"Variable has not a valid name: \");\n \n         Object value = createTaskVariablePayload.getValue();\n         if (value instanceof String) {\n-            handleAsDate((String)value).ifPresent(createTaskVariablePayload::setValue);\n+            handleAsDate((String) value).ifPresent(createTaskVariablePayload::setValue);\n         }\n         return createTaskVariablePayload;\n     }\n@@ -68,7 +69,7 @@ public class TaskVariablesPayloadValidator {\n     public UpdateTaskVariablePayload handleUpdateTaskVariablePayload(UpdateTaskVariablePayload updateTaskVariablePayload) {\n \n         checkNotValidCharactersInVariableName(updateTaskVariablePayload.getName(),\n-                                               \"You cannot update a variable with not a valid name: \");\n+                \"You cannot update a variable with not a valid name: \");\n \n         Object value = updateTaskVariablePayload.getValue();\n \n@@ -84,7 +85,7 @@ public class TaskVariablesPayloadValidator {\n \n             if (!mismatchedVars.isEmpty()) {\n                 throw new IllegalStateException(\"Variables have not valid names: \" + String.join(\", \",\n-                                                                                                 mismatchedVars));\n+                        mismatchedVars));\n \n             }\n             handleStringVariablesAsDates(variables);\n@@ -96,10 +97,10 @@ public class TaskVariablesPayloadValidator {\n     private void handleStringVariablesAsDates(Map<String, Object> variables) {\n         if (variables != null) {\n             variables.entrySet()\n-            .stream()\n-            .filter(stringObjectEntry -> stringObjectEntry.getValue() instanceof String)\n-            .forEach(stringObjectEntry ->\n-                        handleAsDate((String) stringObjectEntry.getValue()).ifPresent(stringObjectEntry::setValue));\n+                    .stream()\n+                    .filter(stringObjectEntry -> stringObjectEntry.getValue() instanceof String)\n+                    .forEach(stringObjectEntry ->\n+                            handleAsDate((String) stringObjectEntry.getValue()).ifPresent(stringObjectEntry::setValue));\n         }\n     }\n \n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/367/TaskVariablesPayloadValidator.java\nindex cde100868fb..166b7a2eabf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/367/TaskVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.time.DateTimeException;\n@@ -47,18 +48,17 @@ public class TaskVariablesPayloadValidator {\n \n     private void checkNotValidCharactersInVariableName(String name,\n                                                         String errorMsg) {\n-\n-        if (!variableNameValidator.validate(name)) {\n-            throw new IllegalStateException(errorMsg + (name != null ? name : \"null\" ));\n+  if (!variableNameValidator.validate(name)) {\n+            throw new IllegalStateException(errorMsg + (name != null ? name : \"null\"));\n         }\n     }\n \n     public CreateTaskVariablePayload handleCreateTaskVariablePayload(CreateTaskVariablePayload createTaskVariablePayload) {\n \n         checkNotValidCharactersInVariableName(createTaskVariablePayload.getName(),\n-                                               \"Variable has not a valid name: \");\n+                              \"Variable has not a valid name: \");\n \n-        Object value = createTaskVariablePayload.getValue();\n+Object value = createTaskVariablePayload.getValue();\n         if (value instanceof String) {\n             handleAsDate((String)value).ifPresent(createTaskVariablePayload::setValue);\n         }\n@@ -68,9 +68,9 @@ public class TaskVariablesPayloadValidator {\n     public UpdateTaskVariablePayload handleUpdateTaskVariablePayload(UpdateTaskVariablePayload updateTaskVariablePayload) {\n \n         checkNotValidCharactersInVariableName(updateTaskVariablePayload.getName(),\n-                                               \"You cannot update a variable with not a valid name: \");\n+                              \"You cannot update a variable with not a valid name: \");\n \n-        Object value = updateTaskVariablePayload.getValue();\n+Object value = updateTaskVariablePayload.getValue();\n \n         if (value instanceof String) {\n             handleAsDate((String) value).ifPresent(updateTaskVariablePayload::setValue);\n@@ -83,10 +83,8 @@ public class TaskVariablesPayloadValidator {\n             Set<String> mismatchedVars = variableNameValidator.validateVariables(variables);\n \n             if (!mismatchedVars.isEmpty()) {\n-                throw new IllegalStateException(\"Variables have not valid names: \" + String.join(\", \",\n-                                                                                                 mismatchedVars));\n-\n-            }\n+                throw new IllegalStateException(\"Variables have not valid names: \" + String.join(\", \", mismatchedVars));\n+  }\n             handleStringVariablesAsDates(variables);\n         }\n \n@@ -98,9 +96,8 @@ public class TaskVariablesPayloadValidator {\n             variables.entrySet()\n             .stream()\n             .filter(stringObjectEntry -> stringObjectEntry.getValue() instanceof String)\n-            .forEach(stringObjectEntry ->\n-                        handleAsDate((String) stringObjectEntry.getValue()).ifPresent(stringObjectEntry::setValue));\n-        }\n+            .forEach(stringObjectEntry -> handleAsDate((String) stringObjectEntry.getValue()).ifPresent(stringObjectEntry::setValue));\n+    }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 6, indentation should be the same level as line 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/367/TaskVariablesPayloadValidator.java\nindex cde100868fb..649d2774f34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/367/TaskVariablesPayloadValidator.java\n@@ -20,87 +20,72 @@ import java.util.Date;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-\n import org.activiti.api.task.model.payloads.CreateTaskVariablePayload;\n import org.activiti.api.task.model.payloads.UpdateTaskVariablePayload;\n import org.activiti.common.util.DateFormatterProvider;\n \n+\n public class TaskVariablesPayloadValidator {\n \n-    private final DateFormatterProvider dateFormatterProvider;\n-    private final VariableNameValidator variableNameValidator;\n+  private final DateFormatterProvider dateFormatterProvider;\n \n-    public TaskVariablesPayloadValidator(DateFormatterProvider dateFormatterProvider,\n-                                         VariableNameValidator variableNameValidator) {\n-        this.dateFormatterProvider = dateFormatterProvider;\n-        this.variableNameValidator = variableNameValidator;\n-    }\n+  private final VariableNameValidator variableNameValidator;\n+\n+  public TaskVariablesPayloadValidator(DateFormatterProvider dateFormatterProvider, VariableNameValidator variableNameValidator) {\n+    this.dateFormatterProvider = dateFormatterProvider;\n+    this.variableNameValidator = variableNameValidator;\n+  }\n \n-    private Optional<Date> handleAsDate(String value) {\n-        try {\n-            return Optional.ofNullable(dateFormatterProvider.parse(value));\n-        } catch (DateTimeException e) {\n+  private Optional<Date> handleAsDate(String value) {\n+    try {\n+      return Optional.ofNullable(dateFormatterProvider.parse(value));\n+    } catch (DateTimeException e) {\n             // ignore exception and return empty: it's not a date so let's keep initial value\n-            return Optional.empty();\n-        }\n+      return Optional.empty();\n     }\n+  }\n \n-    private void checkNotValidCharactersInVariableName(String name,\n-                                                        String errorMsg) {\n-\n-        if (!variableNameValidator.validate(name)) {\n-            throw new IllegalStateException(errorMsg + (name != null ? name : \"null\" ));\n-        }\n+  private void checkNotValidCharactersInVariableName(String name, String errorMsg) {\n+    if (!variableNameValidator.validate(name)) {\n+      throw new IllegalStateException(errorMsg + (name != null ? name : \"null\"));\n     }\n+  }\n \n-    public CreateTaskVariablePayload handleCreateTaskVariablePayload(CreateTaskVariablePayload createTaskVariablePayload) {\n-\n-        checkNotValidCharactersInVariableName(createTaskVariablePayload.getName(),\n-                                               \"Variable has not a valid name: \");\n+  public CreateTaskVariablePayload handleCreateTaskVariablePayload(CreateTaskVariablePayload createTaskVariablePayload) {\n+    checkNotValidCharactersInVariableName(createTaskVariablePayload.getName(),\n+                                          \"Variable has not a valid name: \");\n \n-        Object value = createTaskVariablePayload.getValue();\n-        if (value instanceof String) {\n-            handleAsDate((String)value).ifPresent(createTaskVariablePayload::setValue);\n-        }\n-        return createTaskVariablePayload;\n+    Object value = createTaskVariablePayload.getValue();\n+    if (value instanceof String) {\n+      handleAsDate((String) value).ifPresent(createTaskVariablePayload::setValue);\n     }\n+    return createTaskVariablePayload;\n+  }\n \n-    public UpdateTaskVariablePayload handleUpdateTaskVariablePayload(UpdateTaskVariablePayload updateTaskVariablePayload) {\n-\n-        checkNotValidCharactersInVariableName(updateTaskVariablePayload.getName(),\n-                                               \"You cannot update a variable with not a valid name: \");\n+  public UpdateTaskVariablePayload handleUpdateTaskVariablePayload(UpdateTaskVariablePayload updateTaskVariablePayload) {\n+    checkNotValidCharactersInVariableName(updateTaskVariablePayload.getName(), \"You cannot update a variable with not a valid name: \");\n \n-        Object value = updateTaskVariablePayload.getValue();\n-\n-        if (value instanceof String) {\n-            handleAsDate((String) value).ifPresent(updateTaskVariablePayload::setValue);\n-        }\n-        return updateTaskVariablePayload;\n+    Object value = updateTaskVariablePayload.getValue();\n+    if (value instanceof String) {\n+      handleAsDate((String) value).ifPresent(updateTaskVariablePayload::setValue);\n     }\n-\n-    public Map<String, Object> handlePayloadVariables(Map<String, Object> variables) {\n-        if (variables != null) {\n-            Set<String> mismatchedVars = variableNameValidator.validateVariables(variables);\n-\n-            if (!mismatchedVars.isEmpty()) {\n-                throw new IllegalStateException(\"Variables have not valid names: \" + String.join(\", \",\n-                                                                                                 mismatchedVars));\n-\n-            }\n-            handleStringVariablesAsDates(variables);\n-        }\n-\n-        return variables;\n+    return updateTaskVariablePayload;\n+  }\n+\n+  public Map<String, Object> handlePayloadVariables(Map<String, Object> variables) {\n+    if (variables != null) {\n+      Set<String> mismatchedVars = variableNameValidator.validateVariables(variables);\n+      if (!mismatchedVars.isEmpty()) {\n+        throw new IllegalStateException(\"Variables have not valid names: \" + String.join(\", \", mismatchedVars));\n+      }\n+      handleStringVariablesAsDates(variables);\n     }\n+    return variables;\n+  }\n \n-    private void handleStringVariablesAsDates(Map<String, Object> variables) {\n-        if (variables != null) {\n-            variables.entrySet()\n-            .stream()\n-            .filter(stringObjectEntry -> stringObjectEntry.getValue() instanceof String)\n-            .forEach(stringObjectEntry ->\n-                        handleAsDate((String) stringObjectEntry.getValue()).ifPresent(stringObjectEntry::setValue));\n-        }\n+  private void handleStringVariablesAsDates(Map<String, Object> variables) {\n+    if (variables != null) {\n+      variables.entrySet().stream().filter(stringObjectEntry -> stringObjectEntry.getValue() instanceof String).forEach(stringObjectEntry -> handleAsDate((String) stringObjectEntry.getValue()).ifPresent(stringObjectEntry::setValue));\n     }\n-\n-}\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 71
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/367/TaskVariablesPayloadValidator.java\nindex cde100868fb..53587303940 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/367/TaskVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.time.DateTimeException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/367/TaskVariablesPayloadValidator.java\nindex cde100868fb..53587303940 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/367/TaskVariablesPayloadValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/367/TaskVariablesPayloadValidator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.time.DateTimeException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}