{
    "project_name": "opencb-opencga",
    "error_id": "435",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public final <T extends OpenCgaToolExecutor> Class<? extends T>  getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n        return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/435/ToolExecutorFactory.java\nindex 1fbf19ffa52..68fc7ae8299 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/435/ToolExecutorFactory.java\n@@ -23,8 +23,9 @@ public class ToolExecutorFactory {\n         return getToolExecutorClass(toolId, toolExecutorId, OpenCgaToolExecutor.class);\n     }\n \n-    public final <T extends OpenCgaToolExecutor> Class<? extends T>  getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n-        return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n+    public final <T extends OpenCgaToolExecutor> Class<? extends T>\n+    getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n+          return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n     }\n \n     public final <T extends OpenCgaToolExecutor> Class<? extends T> getToolExecutorClass(\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/435/ToolExecutorFactory.java\nindex 1fbf19ffa52..07a78ade81f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/435/ToolExecutorFactory.java\n@@ -17,114 +17,115 @@ import java.lang.reflect.Modifier;\n import java.util.*;\n \n public class ToolExecutorFactory {\n-    private final Logger logger = LoggerFactory.getLogger(ToolExecutorFactory.class);\n-\n-    public final Class<? extends OpenCgaToolExecutor> getToolExecutorClass(String toolId, String toolExecutorId) {\n-        return getToolExecutorClass(toolId, toolExecutorId, OpenCgaToolExecutor.class);\n+  private final Logger logger = LoggerFactory.getLogger(ToolExecutorFactory.class);\n+\n+  public final Class<? extends OpenCgaToolExecutor> getToolExecutorClass(String toolId, String toolExecutorId) {\n+    return getToolExecutorClass(toolId, toolExecutorId, OpenCgaToolExecutor.class);\n+  }\n+\n+  public final <T extends OpenCgaToolExecutor> Class<? extends T> getToolExecutorClass(String toolId, String toolExecutorId,\n+                                                                                       Class<T> clazz) {\n+    return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n+  }\n+\n+  public final <T extends OpenCgaToolExecutor> Class<? extends T> getToolExecutorClass(\n+      String toolId, String toolExecutorId, Class<T> clazz,\n+      List<ToolExecutor.Source> sourceTypes,\n+      List<ToolExecutor.Framework> availableFrameworks) {\n+    Objects.requireNonNull(clazz);\n+\n+    List<Class<? extends T>> candidateClasses = new ArrayList<>();\n+    // If the given class is not abstract, check if matches the criteria.\n+    if (!Modifier.isAbstract(clazz.getModifiers())) {\n+      if (isValidClass(toolId, toolExecutorId, clazz, sourceTypes, availableFrameworks)) {\n+        if (StringUtils.isNotEmpty(toolExecutorId) || Modifier.isFinal(clazz.getModifiers())) {\n+          // Shortcut to skip reflection\n+          return clazz;\n+        }\n+        candidateClasses.add(clazz);\n+      }\n     }\n \n-    public final <T extends OpenCgaToolExecutor> Class<? extends T>  getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n-        return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n+    Reflections reflections = new Reflections(new ConfigurationBuilder()\n+        .setScanners(\n+            new SubTypesScanner(),\n+            new TypeAnnotationsScanner().filterResultsBy(s -> StringUtils.equals(s, ToolExecutor.class.getName())))\n+        .addUrls(ClasspathHelper.forJavaClassPath())\n+        .filterInputsBy(input -> input.endsWith(\".class\"))\n+    );\n+\n+    Set<Class<? extends T>> typesAnnotatedWith = reflections.getSubTypesOf(clazz);\n+    for (Class<? extends T> aClass : typesAnnotatedWith) {\n+      if (isValidClass(toolId, toolExecutorId, aClass, sourceTypes, availableFrameworks)) {\n+        candidateClasses.add(aClass);\n+      }\n     }\n-\n-    public final <T extends OpenCgaToolExecutor> Class<? extends T> getToolExecutorClass(\n-            String toolId, String toolExecutorId, Class<T> clazz,\n-            List<ToolExecutor.Source> sourceTypes,\n-            List<ToolExecutor.Framework> availableFrameworks) {\n-        Objects.requireNonNull(clazz);\n-\n-        List<Class<? extends T>> candidateClasses = new ArrayList<>();\n-        // If the given class is not abstract, check if matches the criteria.\n-        if (!Modifier.isAbstract(clazz.getModifiers())) {\n-            if (isValidClass(toolId, toolExecutorId, clazz, sourceTypes, availableFrameworks)) {\n-                if (StringUtils.isNotEmpty(toolExecutorId) || Modifier.isFinal(clazz.getModifiers())) {\n-                    // Shortcut to skip reflection\n-                    return clazz;\n-                }\n-                candidateClasses.add(clazz);\n-            }\n-        }\n-\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setScanners(\n-                        new SubTypesScanner(),\n-                        new TypeAnnotationsScanner().filterResultsBy(s -> StringUtils.equals(s, ToolExecutor.class.getName())))\n-                .addUrls(ClasspathHelper.forJavaClassPath())\n-                .filterInputsBy(input -> input.endsWith(\".class\"))\n-        );\n-\n-        Set<Class<? extends T>> typesAnnotatedWith = reflections.getSubTypesOf(clazz);\n-        for (Class<? extends T> aClass : typesAnnotatedWith) {\n-            if (isValidClass(toolId, toolExecutorId, aClass, sourceTypes, availableFrameworks)) {\n-                candidateClasses.add(aClass);\n-            }\n-        }\n-        if (candidateClasses.isEmpty()) {\n-            return null;\n-        } else if (candidateClasses.size() == 1) {\n-            return candidateClasses.get(0);\n-        } else {\n-            logger.info(\"Found multiple \" + OpenCgaToolExecutor.class.getName() + \" candidates.\");\n-            for (Class<? extends T> matchedClass : candidateClasses) {\n-                logger.info(\" - \" + matchedClass);\n-            }\n-            logger.info(\"Sort by framework and source preference.\");\n-\n-            // Prefer the executor that matches better with the source\n-            // Prefer the executor that matches better with the framework\n-            List<ToolExecutor.Framework> finalAvailableFrameworks =\n-                    availableFrameworks == null ? Collections.emptyList() : availableFrameworks;\n-            List<ToolExecutor.Source> finalSourceTypes =\n-                    sourceTypes == null ? Collections.emptyList() : sourceTypes;\n-\n-            Comparator<Class<? extends T>> comparator = Comparator.<Class<? extends T>>comparingInt(c1 -> {\n-                ToolExecutor annot1 = c1.getAnnotation(ToolExecutor.class);\n-                return finalAvailableFrameworks.indexOf(annot1.framework());\n-            }).thenComparingInt(c -> {\n-                ToolExecutor annot = c.getAnnotation(ToolExecutor.class);\n-                return finalSourceTypes.indexOf(annot.source());\n-            }).thenComparing(Class::getName);\n-\n-            candidateClasses.sort(comparator);\n-\n-            return candidateClasses.get(0);\n-        }\n+    if (candidateClasses.isEmpty()) {\n+      return null;\n+    } else if (candidateClasses.size() == 1) {\n+      return candidateClasses.get(0);\n+    } else {\n+      logger.info(\"Found multiple \" + OpenCgaToolExecutor.class.getName() + \" candidates.\");\n+      for (Class<? extends T> matchedClass : candidateClasses) {\n+        logger.info(\" - \" + matchedClass);\n+      }\n+      logger.info(\"Sort by framework and source preference.\");\n+\n+      // Prefer the executor that matches better with the source\n+      // Prefer the executor that matches better with the framework\n+      List<ToolExecutor.Framework> finalAvailableFrameworks =\n+          availableFrameworks == null ? Collections.emptyList() : availableFrameworks;\n+      List<ToolExecutor.Source> finalSourceTypes =\n+          sourceTypes == null ? Collections.emptyList() : sourceTypes;\n+\n+      Comparator<Class<? extends T>> comparator = Comparator.<Class<? extends T>>comparingInt(c1 -> {\n+        ToolExecutor annot1 = c1.getAnnotation(ToolExecutor.class);\n+        return finalAvailableFrameworks.indexOf(annot1.framework());\n+      }).thenComparingInt(c -> {\n+        ToolExecutor annot = c.getAnnotation(ToolExecutor.class);\n+        return finalSourceTypes.indexOf(annot.source());\n+      }).thenComparing(Class::getName);\n+\n+      candidateClasses.sort(comparator);\n+\n+      return candidateClasses.get(0);\n     }\n-\n-    private <T> boolean isValidClass(String toolId, String toolExecutorId, Class<T> aClass,\n-                                     List<ToolExecutor.Source> sourceTypes,\n-                                     List<ToolExecutor.Framework> availableFrameworks) {\n-        ToolExecutor annotation = aClass.getAnnotation(ToolExecutor.class);\n-        if (annotation != null) {\n-            if (annotation.tool().equals(toolId)) {\n-                if (StringUtils.isEmpty(toolExecutorId) || toolExecutorId.equals(annotation.id())) {\n-                    if (CollectionUtils.isEmpty(sourceTypes) || sourceTypes.contains(annotation.source())) {\n-                        if (CollectionUtils.isEmpty(availableFrameworks) || availableFrameworks.contains(annotation.framework())) {\n-                            return true;\n-                        }\n-                    }\n-                }\n+  }\n+\n+  private <T> boolean isValidClass(String toolId, String toolExecutorId, Class<T> aClass,\n+                                   List<ToolExecutor.Source> sourceTypes,\n+                                   List<ToolExecutor.Framework> availableFrameworks) {\n+    ToolExecutor annotation = aClass.getAnnotation(ToolExecutor.class);\n+    if (annotation != null) {\n+      if (annotation.tool().equals(toolId)) {\n+        if (StringUtils.isEmpty(toolExecutorId) || toolExecutorId.equals(annotation.id())) {\n+          if (CollectionUtils.isEmpty(sourceTypes) || sourceTypes.contains(annotation.source())) {\n+            if (CollectionUtils.isEmpty(availableFrameworks) || availableFrameworks.contains(annotation.framework())) {\n+              return true;\n             }\n+          }\n         }\n-        return false;\n+      }\n     }\n+    return false;\n+  }\n+\n+  public final <T extends OpenCgaToolExecutor> T getToolExecutor(String toolId, String toolExecutorId, Class<T> clazz,\n+                                                                 List<ToolExecutor.Source> sourceTypes,\n+                                                                 List<ToolExecutor.Framework> availableFrameworks)\n+      throws ToolExecutorException {\n+    Class<? extends T> executorClass = getToolExecutorClass(toolId, toolExecutorId, clazz, sourceTypes, availableFrameworks);\n+    if (executorClass == null) {\n+      throw ToolExecutorException.executorNotFound(clazz, toolId, toolExecutorId, sourceTypes, availableFrameworks);\n+    }\n+    try {\n+      T t = executorClass.newInstance();\n+      logger.info(\"Using \" + clazz.getName() + \" '\" + t.getId() + \"' : \" + executorClass);\n \n-    public final <T extends OpenCgaToolExecutor> T getToolExecutor(String toolId, String toolExecutorId, Class<T> clazz,\n-                                                                      List<ToolExecutor.Source> sourceTypes,\n-                                                                      List<ToolExecutor.Framework> availableFrameworks)\n-            throws ToolExecutorException {\n-        Class<? extends T> executorClass = getToolExecutorClass(toolId, toolExecutorId, clazz, sourceTypes, availableFrameworks);\n-        if (executorClass == null) {\n-            throw ToolExecutorException.executorNotFound(clazz, toolId, toolExecutorId, sourceTypes, availableFrameworks);\n-        }\n-        try {\n-            T t = executorClass.newInstance();\n-            logger.info(\"Using \" + clazz.getName() + \" '\" + t.getId() + \"' : \" + executorClass);\n-\n-            return t;\n-        } catch (InstantiationException | IllegalAccessException e) {\n-            throw ToolExecutorException.cantInstantiate(executorClass, e);\n-        }\n+      return t;\n+    } catch (InstantiationException | IllegalAccessException e) {\n+      throw ToolExecutorException.cantInstantiate(executorClass, e);\n     }\n+  }\n \n }\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "column": "88",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/435/ToolExecutorFactory.java\nindex 1fbf19ffa52..88d8685743e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/435/ToolExecutorFactory.java\n@@ -23,7 +23,7 @@ public class ToolExecutorFactory {\n         return getToolExecutorClass(toolId, toolExecutorId, OpenCgaToolExecutor.class);\n     }\n \n-    public final <T extends OpenCgaToolExecutor> Class<? extends T>  getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n+    public final <T extends OpenCgaToolExecutor> Class<? extends T> getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n         return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n     }\n \n@@ -72,12 +72,10 @@ public class ToolExecutorFactory {\n \n             // Prefer the executor that matches better with the source\n             // Prefer the executor that matches better with the framework\n-            List<ToolExecutor.Framework> finalAvailableFrameworks =\n-                    availableFrameworks == null ? Collections.emptyList() : availableFrameworks;\n-            List<ToolExecutor.Source> finalSourceTypes =\n-                    sourceTypes == null ? Collections.emptyList() : sourceTypes;\n+            List<ToolExecutor.Framework> finalAvailableFrameworks = availableFrameworks == null ? Collections.emptyList() : availableFrameworks;\n+            List<ToolExecutor.Source> finalSourceTypes = sourceTypes == null ? Collections.emptyList() : sourceTypes;\n \n-            Comparator<Class<? extends T>> comparator = Comparator.<Class<? extends T>>comparingInt(c1 -> {\n+            Comparator<Class<? extends T>> comparator = Comparator.<Class<? extends T>> comparingInt(c1 -> {\n                 ToolExecutor annot1 = c1.getAnnotation(ToolExecutor.class);\n                 return finalAvailableFrameworks.indexOf(annot1.framework());\n             }).thenComparingInt(c -> {\n@@ -94,7 +92,7 @@ public class ToolExecutorFactory {\n     private <T> boolean isValidClass(String toolId, String toolExecutorId, Class<T> aClass,\n                                      List<ToolExecutor.Source> sourceTypes,\n                                      List<ToolExecutor.Framework> availableFrameworks) {\n-        ToolExecutor annotation = aClass.getAnnotation(ToolExecutor.class);\n+    ToolExecutor annotation = aClass.getAnnotation(ToolExecutor.class);\n         if (annotation != null) {\n             if (annotation.tool().equals(toolId)) {\n                 if (StringUtils.isEmpty(toolExecutorId) || toolExecutorId.equals(annotation.id())) {\n@@ -111,8 +109,7 @@ public class ToolExecutorFactory {\n \n     public final <T extends OpenCgaToolExecutor> T getToolExecutor(String toolId, String toolExecutorId, Class<T> clazz,\n                                                                       List<ToolExecutor.Source> sourceTypes,\n-                                                                      List<ToolExecutor.Framework> availableFrameworks)\n-            throws ToolExecutorException {\n+                                                                      List<ToolExecutor.Framework> availableFrameworks) throws ToolExecutorException {\n         Class<? extends T> executorClass = getToolExecutorClass(toolId, toolExecutorId, clazz, sourceTypes, availableFrameworks);\n         if (executorClass == null) {\n             throw ToolExecutorException.executorNotFound(clazz, toolId, toolExecutorId, sourceTypes, availableFrameworks);\n@@ -127,4 +124,4 @@ public class ToolExecutorFactory {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/435/ToolExecutorFactory.java\nindex 1fbf19ffa52..68fc7ae8299 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/435/ToolExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/435/ToolExecutorFactory.java\n@@ -23,8 +23,9 @@ public class ToolExecutorFactory {\n         return getToolExecutorClass(toolId, toolExecutorId, OpenCgaToolExecutor.class);\n     }\n \n-    public final <T extends OpenCgaToolExecutor> Class<? extends T>  getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n-        return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n+    public final <T extends OpenCgaToolExecutor> Class<? extends T>\n+    getToolExecutorClass(String toolId, String toolExecutorId, Class<T> clazz) {\n+          return getToolExecutorClass(toolId, toolExecutorId, clazz, null, null);\n     }\n \n     public final <T extends OpenCgaToolExecutor> Class<? extends T> getToolExecutorClass(\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}