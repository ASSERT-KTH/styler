{
    "project_name": "neo4j-neo4j",
    "error_id": "1073",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1073/KernelTransactionHandle.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1073/KernelTransactionHandle.java\nindex 315ff323802..32db19557d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1073/KernelTransactionHandle.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1073/KernelTransactionHandle.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api;\n \n import java.util.Map;\n@@ -55,7 +56,7 @@ public interface KernelTransactionHandle\n \n     /**\n      * The start time of the underlying transaction.\n-     *\n+     * <p>\n      * This can be used to measure elapsed time in a safe way that is not affected by system time changes.\n      *\n      * @return nanoTime at the start of the transaction.\n@@ -64,6 +65,7 @@ public interface KernelTransactionHandle\n \n     /**\n      * Underlying transaction specific timeout. In case if timeout is 0 - transaction does not have a timeout.\n+     *\n      * @return transaction timeout in milliseconds, <b>0 in case if transaction does not have a timeout<b/>\n      */\n     long timeoutMillis();\n@@ -89,7 +91,7 @@ public interface KernelTransactionHandle\n      * @return {@code true} if the underlying transaction was marked for termination, {@code false} otherwise\n      * (when this handle represents an old transaction that has been closed).\n      */\n-    boolean markForTermination( Status reason );\n+    boolean markForTermination(Status reason);\n \n     /**\n      * Security context of underlying transaction that transaction has when handle was created.\n@@ -100,6 +102,7 @@ public interface KernelTransactionHandle\n \n     /**\n      * Metadata of underlying transaction that transaction has when handle was created.\n+     *\n      * @return underlying transaction metadata\n      */\n     Map<String, Object> getMetaData();\n@@ -117,11 +120,12 @@ public interface KernelTransactionHandle\n      * @param tx the expected transaction.\n      * @return {@code true} if this handle represents {@code tx}, {@code false} otherwise.\n      */\n-    boolean isUnderlyingTransaction( KernelTransaction tx );\n+    boolean isUnderlyingTransaction(KernelTransaction tx);\n \n     /**\n      * User transaction id of underlying transaction. User transaction id is a not negative long number.\n      * Should be unique across transactions.\n+     *\n      * @return user transaction id\n      */\n     long getUserTransactionId();\n@@ -130,6 +134,7 @@ public interface KernelTransactionHandle\n      * User transaction name of the underlying transaction.\n      * User transaction name consists of the name prefix and user transaction id.\n      * Should be unique across transactions.\n+     *\n      * @return user transaction name\n      */\n     String getUserTransactionName();\n@@ -146,18 +151,21 @@ public interface KernelTransactionHandle\n \n     /**\n      * Provide underlying transaction execution statistics. For example: elapsed time, allocated bytes etc\n+     *\n      * @return transaction statistics projection\n      */\n     TransactionExecutionStatistic transactionStatistic();\n \n     /**\n      * Provide stack trace of particular transaction initialisation call if that is available, empty record otherwise\n+     *\n      * @return transaction initialization trace\n      */\n     TransactionInitializationTrace transactionInitialisationTrace();\n \n     /**\n      * Provide underlying transaction originator details\n+     *\n      * @return transaction originator details\n      */\n     Optional<ClientConnectionInfo> clientInfo();\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}