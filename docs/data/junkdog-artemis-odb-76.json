{
    "project_name": "junkdog-artemis-odb",
    "error_id": "76",
    "information": {
        "errors": [
            {
                "line": "74",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                        .setStatic(true)\n                        .parameter(int.class, \"entityId\")\n                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                        .statement(\"return new E().init(_processingMapper,entityId)\")\n                        .build();\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/76/EBaseStrategy.java\nindex 1edaa841a8e..ed0ca2bf715 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/76/EBaseStrategy.java\n@@ -10,7 +10,7 @@ import com.artemis.generator.util.MethodBuilder;\n \n /**\n  * Generate basic scaffold of E class.\n- *\n+ * <p>\n  * - basic class setup (fields, initialization).\n  * - static method to obtain instances of E.\n  *\n@@ -46,19 +46,19 @@ public class EBaseStrategy implements BuilderModelStrategy {\n     }\n \n     private FieldDescriptor createEntityIdField() {\n-        return new FieldBuilder(int.class,\"entityId\")\n+        return new FieldBuilder(int.class, \"entityId\")\n                 .debugNotes(\"Default entityId field.\")\n                 .build();\n     }\n \n     private FieldDescriptor createMapperField() {\n-        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE,\"mappers\")\n+        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE, \"mappers\")\n                 .debugNotes(\"Default mappers field.\")\n                 .build();\n     }\n \n     private FieldDescriptor createStaticMapperField() {\n-        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE,\"_processingMapper\")\n+        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE, \"_processingMapper\")\n                 .debugNotes(\"Default _processingMapper field.\")\n                 .setStatic(true).build();\n     }\n@@ -71,7 +71,8 @@ public class EBaseStrategy implements BuilderModelStrategy {\n                 new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n                         .setStatic(true)\n                         .parameter(int.class, \"entityId\")\n-                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n+                        .statement(\n+                                \"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                         .statement(\"return new E().init(_processingMapper,entityId)\")\n                         .build();\n     }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/76/EBaseStrategy.java\nindex 1edaa841a8e..c6ad45ed783 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/76/EBaseStrategy.java\n@@ -17,8 +17,7 @@ import com.artemis.generator.util.MethodBuilder;\n  * @author Daan van Yperen\n  */\n public class EBaseStrategy implements BuilderModelStrategy {\n-\n-    @Override\n+\t@Override\n     public void apply(ArtemisModel artemisModel, TypeModel model) {\n         model.name = \"E\";\n         model.packageName = \"com.artemis\";\n@@ -35,88 +34,81 @@ public class EBaseStrategy implements BuilderModelStrategy {\n     }\n \n     private MethodDescriptor createInitMethod() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"init\")\n-                        .parameter(FluidTypes.SUPERMAPPER_TYPE, \"mappers\")\n+\treturn new MethodBuilder(FluidTypes.E_TYPE, \"init\")\n+.parameter(FluidTypes.SUPERMAPPER_TYPE, \"mappers\")\n                         .parameter(int.class, \"entityId\")\n                         .statement(\"this.mappers = mappers\")\n                         .statement(\"this.entityId = entityId\")\n                         .returnFluid()\n                         .build();\n-    }\n+\t}\n \n     private FieldDescriptor createEntityIdField() {\n-        return new FieldBuilder(int.class,\"entityId\")\n-                .debugNotes(\"Default entityId field.\")\n+\treturn new FieldBuilder(int.class, \"entityId\")\n+.debugNotes(\"Default entityId field.\")\n                 .build();\n-    }\n+\t}\n \n     private FieldDescriptor createMapperField() {\n-        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE,\"mappers\")\n-                .debugNotes(\"Default mappers field.\")\n+\treturn new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE, \"mappers\")\n+.debugNotes(\"Default mappers field.\")\n                 .build();\n-    }\n+\t}\n \n     private FieldDescriptor createStaticMapperField() {\n-        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE,\"_processingMapper\")\n-                .debugNotes(\"Default _processingMapper field.\")\n+\treturn new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE, \"_processingMapper\")\n+.debugNotes(\"Default _processingMapper field.\")\n                 .setStatic(true).build();\n-    }\n+\t}\n \n     /**\n      * static E::E(entityId)\n      */\n     private MethodDescriptor createStaticInstancerMethodByInt() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n-                        .setStatic(true)\n+\treturn new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n+.setStatic(true)\n                         .parameter(int.class, \"entityId\")\n                         .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n                         .statement(\"return new E().init(_processingMapper,entityId)\")\n                         .build();\n-    }\n+\t}\n \n     /**\n      * static E::E(entity)\n      */\n     private MethodDescriptor createStaticInstancerMethodByEntity() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n-                        .setStatic(true)\n+\treturn new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n+.setStatic(true)\n                         .parameter(Entity.class, \"entity\")\n                         .statement(\"return E(entity.getId())\")\n                         .build();\n-    }\n+\t}\n \n     /**\n      * static E::E() Create a new entity.\n      */\n     private MethodDescriptor createStaticInstancerMethodNewEntity() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n-                        .setStatic(true)\n+\treturn new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n+.setStatic(true)\n                         .statement(\"return E(_processingMapper.getWorld().create())\")\n                         .build();\n-    }\n+\t}\n \n     /**\n      * Getter Entity E::entity()\n      */\n     private MethodDescriptor createEntityGetter() {\n-        return\n-                new MethodBuilder(Entity.class, \"entity\")\n-                        .statement(\"return mappers.getWorld().getEntity(entityId)\")\n+\treturn new MethodBuilder(Entity.class, \"entity\")\n+.statement(\"return mappers.getWorld().getEntity(entityId)\")\n                         .build();\n-    }\n+\t}\n \n     /**\n      * Getter Entity E::id()\n      */\n     private MethodDescriptor createEntityIdGetter() {\n-        return\n-                new MethodBuilder(int.class, \"id\")\n-                        .statement(\"return entityId\")\n+\treturn new MethodBuilder(int.class, \"id\")\n+.statement(\"return entityId\")\n                         .build();\n-    }\n-\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/76/EBaseStrategy.java\nindex 1edaa841a8e..7e2b30169ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/76/EBaseStrategy.java\n@@ -4,6 +4,7 @@ import com.artemis.Entity;\n import com.artemis.generator.model.FluidTypes;\n import com.artemis.generator.common.BuilderModelStrategy;\n import com.artemis.generator.model.artemis.ArtemisModel;\n+\n import com.artemis.generator.model.type.*;\n import com.artemis.generator.util.FieldBuilder;\n import com.artemis.generator.util.MethodBuilder;\n@@ -16,107 +17,96 @@ import com.artemis.generator.util.MethodBuilder;\n  *\n  * @author Daan van Yperen\n  */\n+\n public class EBaseStrategy implements BuilderModelStrategy {\n+ @Override\n+ public void apply(ArtemisModel artemisModel, TypeModel model) {\n+  model.name = \"E\";\n+  model.packageName = \"com.artemis\";\n+  model.add(createMapperField());\n+  model.add(createStaticMapperField());\n+  model.add(createEntityIdField());\n+  model.add(createInitMethod());\n+  model.add(createStaticInstancerMethodByInt());\n+  model.add(createStaticInstancerMethodByEntity());\n+  model.add(createStaticInstancerMethodNewEntity());\n+  model.add(createEntityIdGetter());\n+  model.add(createEntityGetter());\n+ }\n+\n+ private MethodDescriptor createInitMethod() {\n+  return new MethodBuilder(FluidTypes.E_TYPE, \"init\").parameter(FluidTypes.SUPERMAPPER_TYPE, \"mappers\")\n+                                                     .parameter(int.class, \"entityId\")\n+                                                     .statement(\"this.mappers = mappers\")\n+                                                     .statement(\"this.entityId = entityId\")\n+                                                     .returnFluid()\n+                                                     .build();\n+ }\n+\n+ private FieldDescriptor createEntityIdField() {\n+  return new FieldBuilder(int.class, \"entityId\").debugNotes(\"Default entityId field.\")\n+                                                .build();\n+ }\n+\n+ private FieldDescriptor createMapperField() {\n+  return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE, \"mappers\").debugNotes(\"Default mappers field.\")\n+                                                                 .build();\n+ }\n \n-    @Override\n-    public void apply(ArtemisModel artemisModel, TypeModel model) {\n-        model.name = \"E\";\n-        model.packageName = \"com.artemis\";\n-        model.add(createMapperField());\n-        model.add(createStaticMapperField());\n-        model.add(createEntityIdField());\n-        model.add(createInitMethod());\n-        model.add(createStaticInstancerMethodByInt());\n-        model.add(createStaticInstancerMethodByEntity());\n-        model.add(createStaticInstancerMethodNewEntity());\n-\n-        model.add(createEntityIdGetter());\n-        model.add(createEntityGetter());\n-    }\n-\n-    private MethodDescriptor createInitMethod() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"init\")\n-                        .parameter(FluidTypes.SUPERMAPPER_TYPE, \"mappers\")\n-                        .parameter(int.class, \"entityId\")\n-                        .statement(\"this.mappers = mappers\")\n-                        .statement(\"this.entityId = entityId\")\n-                        .returnFluid()\n-                        .build();\n-    }\n-\n-    private FieldDescriptor createEntityIdField() {\n-        return new FieldBuilder(int.class,\"entityId\")\n-                .debugNotes(\"Default entityId field.\")\n-                .build();\n-    }\n-\n-    private FieldDescriptor createMapperField() {\n-        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE,\"mappers\")\n-                .debugNotes(\"Default mappers field.\")\n-                .build();\n-    }\n-\n-    private FieldDescriptor createStaticMapperField() {\n-        return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE,\"_processingMapper\")\n-                .debugNotes(\"Default _processingMapper field.\")\n-                .setStatic(true).build();\n-    }\n+ private FieldDescriptor createStaticMapperField() {\n+  return new FieldBuilder(FluidTypes.SUPERMAPPER_TYPE, \"_processingMapper\").debugNotes(\"Default _processingMapper field.\")\n+                                                                           .setStatic(true)\n+                                                                           .build();\n+ }\n \n     /**\n      * static E::E(entityId)\n      */\n-    private MethodDescriptor createStaticInstancerMethodByInt() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n-                        .setStatic(true)\n-                        .parameter(int.class, \"entityId\")\n-                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n-                        .statement(\"return new E().init(_processingMapper,entityId)\")\n-                        .build();\n-    }\n+\n+ private MethodDescriptor createStaticInstancerMethodByInt() {\n+  return new MethodBuilder(FluidTypes.E_TYPE, \"E\").setStatic(true)\n+                                                  .parameter(int.class, \"entityId\")\n+                                                  .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n+                                                  .statement(\"return new E().init(_processingMapper,entityId)\")\n+                                                  .build();\n+ }\n \n     /**\n      * static E::E(entity)\n      */\n-    private MethodDescriptor createStaticInstancerMethodByEntity() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n-                        .setStatic(true)\n-                        .parameter(Entity.class, \"entity\")\n-                        .statement(\"return E(entity.getId())\")\n-                        .build();\n-    }\n+\n+ private MethodDescriptor createStaticInstancerMethodByEntity() {\n+  return new MethodBuilder(FluidTypes.E_TYPE, \"E\").setStatic(true)\n+                                                  .parameter(Entity.class, \"entity\")\n+                                                  .statement(\"return E(entity.getId())\")\n+                                                  .build();\n+ }\n \n     /**\n      * static E::E() Create a new entity.\n      */\n-    private MethodDescriptor createStaticInstancerMethodNewEntity() {\n-        return\n-                new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n-                        .setStatic(true)\n-                        .statement(\"return E(_processingMapper.getWorld().create())\")\n-                        .build();\n-    }\n+\n+ private MethodDescriptor createStaticInstancerMethodNewEntity() {\n+  return new MethodBuilder(FluidTypes.E_TYPE, \"E\").setStatic(true)\n+                                                  .statement(\"return E(_processingMapper.getWorld().create())\")\n+                                                  .build();\n+ }\n \n     /**\n      * Getter Entity E::entity()\n      */\n-    private MethodDescriptor createEntityGetter() {\n-        return\n-                new MethodBuilder(Entity.class, \"entity\")\n-                        .statement(\"return mappers.getWorld().getEntity(entityId)\")\n-                        .build();\n-    }\n+\n+ private MethodDescriptor createEntityGetter() {\n+  return new MethodBuilder(Entity.class, \"entity\").statement(\"return mappers.getWorld().getEntity(entityId)\")\n+                                                  .build();\n+ }\n \n     /**\n      * Getter Entity E::id()\n      */\n-    private MethodDescriptor createEntityIdGetter() {\n-        return\n-                new MethodBuilder(int.class, \"id\")\n-                        .statement(\"return entityId\")\n-                        .build();\n-    }\n-\n-}\n+\n+ private MethodDescriptor createEntityIdGetter() {\n+  return new MethodBuilder(int.class, \"id\").statement(\"return entityId\")\n+                                           .build();\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 260).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/76/EBaseStrategy.java\nindex 1edaa841a8e..65436177aca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/76/EBaseStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/76/EBaseStrategy.java\n@@ -70,9 +70,7 @@ public class EBaseStrategy implements BuilderModelStrategy {\n         return\n                 new MethodBuilder(FluidTypes.E_TYPE, \"E\")\n                         .setStatic(true)\n-                        .parameter(int.class, \"entityId\")\n-                        .statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\")\n-                        .statement(\"return new E().init(_processingMapper,entityId)\")\n+                        .parameter(int.class, \"entityId\").statement(\"if(_processingMapper==null) throw new RuntimeException(\\\"SuperMapper system must be registered before any systems using E().\\\");\").statement(\"return new E().init(_processingMapper,entityId)\")\n                         .build();\n     }\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}