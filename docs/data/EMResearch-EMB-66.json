{
    "project_name": "EMResearch-EMB",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 140).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    setLocQualityIssueType(ITSIssueType.Style);\n    addExamplePair(Example.wrong(\"<marker>Diz-se</marker> que programas gratuitos n\u00e3o t\u00eam qualidade.\"),\n                   Example.fixed(\"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\"));\n  }\n\n  @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/66/PortugueseWeaselWordsRule.java\nindex e1bf6495f32..8fc79488660 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/66/PortugueseWeaselWordsRule.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.pt;\n \n import org.languagetool.language.Portuguese;\n@@ -33,66 +34,67 @@ import java.util.ResourceBundle;\n import java.net.URL;\n \n /**\n- * A rule that matches known empty expressions. \n+ * A rule that matches known empty expressions.\n  * Portuguese implementation. Loads the list of words from\n  * <code>/pt/weaselwords.txt</code>.\n  *\n- * @author Tiago F. Santos \n+ * @author Tiago F. Santos\n  * @since 3.9\n  */\n public class PortugueseWeaselWordsRule extends AbstractSimpleReplaceRule2 {\n \n-  public static final String PT_WEASELWORD_REPLACE = \"PT_WEASELWORD_REPLACE\";\n-\n-  private static final String FILE_NAME = \"/pt/weaselwords.txt\";\n-  private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n-\n-  @Override\n-  public List<String> getFileNames() {\n-    return Collections.singletonList(FILE_NAME);\n-  }\n-\n-  public PortugueseWeaselWordsRule(ResourceBundle messages) {\n-    super(messages, new Portuguese());\n-    super.setCategory(Categories.STYLE.getCategory(messages));\n-    setLocQualityIssueType(ITSIssueType.Style);\n-    addExamplePair(Example.wrong(\"<marker>Diz-se</marker> que programas gratuitos n\u00e3o t\u00eam qualidade.\"),\n-                   Example.fixed(\"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\"));\n-  }\n-\n-  @Override\n-  public String getId() {\n-    return PT_WEASELWORD_REPLACE;\n-  }\n-\n-  @Override\n-  public String getDescription() {\n-    return \"Escrita avan\u00e7ada: Express\u00f5es evasivas\";\n-  }\n-\n-  @Override\n-  public String getShort() {\n-    return \"Express\u00e3o evasiva\";\n-  }\n-\n-  @Override\n-  public String getSuggestion() {\n-    return \"'$match' \u00e9 uma express\u00e3o amb\u00edgua e evasiva. Reconsidere o seu uso, de acordo com o objetivo do seu texto.\";\n-  }\n-\n-  @Override\n-  public String getSuggestionsSeparator() {\n-    return \" ou \";\n-  }\n-\n-  @Override\n-  public URL getUrl() {\n-    return Tools.getUrl(\"https://pt.wikipedia.org/wiki/Weasel_word\");\n-  }\n-\n-  @Override\n-  public Locale getLocale() {\n-    return PT_LOCALE;\n-  }\n+    public static final String PT_WEASELWORD_REPLACE = \"PT_WEASELWORD_REPLACE\";\n+\n+    private static final String FILE_NAME = \"/pt/weaselwords.txt\";\n+    private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n+\n+    @Override\n+    public List<String> getFileNames() {\n+        return Collections.singletonList(FILE_NAME);\n+    }\n+\n+    public PortugueseWeaselWordsRule(ResourceBundle messages) {\n+        super(messages, new Portuguese());\n+        super.setCategory(Categories.STYLE.getCategory(messages));\n+        setLocQualityIssueType(ITSIssueType.Style);\n+        addExamplePair(Example.wrong(\"<marker>Diz-se</marker> que programas gratuitos n\u00e3o t\u00eam qualidade.\"),\n+            Example.fixed(\n+                \"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\"));\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PT_WEASELWORD_REPLACE;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Escrita avan\u00e7ada: Express\u00f5es evasivas\";\n+    }\n+\n+    @Override\n+    public String getShort() {\n+        return \"Express\u00e3o evasiva\";\n+    }\n+\n+    @Override\n+    public String getSuggestion() {\n+        return \"'$match' \u00e9 uma express\u00e3o amb\u00edgua e evasiva. Reconsidere o seu uso, de acordo com o objetivo do seu texto.\";\n+    }\n+\n+    @Override\n+    public String getSuggestionsSeparator() {\n+        return \" ou \";\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return Tools.getUrl(\"https://pt.wikipedia.org/wiki/Weasel_word\");\n+    }\n+\n+    @Override\n+    public Locale getLocale() {\n+        return PT_LOCALE;\n+    }\n \n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/66/PortugueseWeaselWordsRule.java\nindex e1bf6495f32..92aff6549b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/66/PortugueseWeaselWordsRule.java\n@@ -95,4 +95,4 @@ public class PortugueseWeaselWordsRule extends AbstractSimpleReplaceRule2 {\n     return PT_LOCALE;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/66/PortugueseWeaselWordsRule.java\nindex e1bf6495f32..05b59259d77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/66/PortugueseWeaselWordsRule.java\n@@ -24,12 +24,10 @@ import org.languagetool.rules.Categories;\n import org.languagetool.rules.Example;\n import org.languagetool.rules.ITSIssueType;\n import org.languagetool.tools.Tools;\n-\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import java.util.ResourceBundle;\n-\n import java.net.URL;\n \n /**\n@@ -40,59 +38,58 @@ import java.net.URL;\n  * @author Tiago F. Santos \n  * @since 3.9\n  */\n-public class PortugueseWeaselWordsRule extends AbstractSimpleReplaceRule2 {\n-\n-  public static final String PT_WEASELWORD_REPLACE = \"PT_WEASELWORD_REPLACE\";\n-\n-  private static final String FILE_NAME = \"/pt/weaselwords.txt\";\n-  private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n-\n-  @Override\n-  public List<String> getFileNames() {\n-    return Collections.singletonList(FILE_NAME);\n-  }\n-\n-  public PortugueseWeaselWordsRule(ResourceBundle messages) {\n-    super(messages, new Portuguese());\n-    super.setCategory(Categories.STYLE.getCategory(messages));\n-    setLocQualityIssueType(ITSIssueType.Style);\n-    addExamplePair(Example.wrong(\"<marker>Diz-se</marker> que programas gratuitos n\u00e3o t\u00eam qualidade.\"),\n-                   Example.fixed(\"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\"));\n-  }\n \n-  @Override\n-  public String getId() {\n-    return PT_WEASELWORD_REPLACE;\n-  }\n \n-  @Override\n-  public String getDescription() {\n-    return \"Escrita avan\u00e7ada: Express\u00f5es evasivas\";\n-  }\n-\n-  @Override\n-  public String getShort() {\n-    return \"Express\u00e3o evasiva\";\n-  }\n-\n-  @Override\n-  public String getSuggestion() {\n-    return \"'$match' \u00e9 uma express\u00e3o amb\u00edgua e evasiva. Reconsidere o seu uso, de acordo com o objetivo do seu texto.\";\n-  }\n-\n-  @Override\n-  public String getSuggestionsSeparator() {\n-    return \" ou \";\n-  }\n-\n-  @Override\n-  public URL getUrl() {\n-    return Tools.getUrl(\"https://pt.wikipedia.org/wiki/Weasel_word\");\n-  }\n-\n-  @Override\n-  public Locale getLocale() {\n-    return PT_LOCALE;\n-  }\n+public class PortugueseWeaselWordsRule extends AbstractSimpleReplaceRule2 {\n \n-}\n+    public static final String PT_WEASELWORD_REPLACE = \"PT_WEASELWORD_REPLACE\";\n+    private static final String FILE_NAME = \"/pt/weaselwords.txt\";\n+    private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n+\n+    @Override\n+    public List<String> getFileNames() {\n+        return Collections.singletonList(FILE_NAME);\n+    }\n+\n+    public PortugueseWeaselWordsRule(ResourceBundle messages) {\n+        super(messages, new Portuguese());\n+        super.setCategory(Categories.STYLE.getCategory(messages));\n+        setLocQualityIssueType(ITSIssueType.Style);\n+        addExamplePair(Example.wrong(\"<marker>Diz-se</marker> que programas gratuitos n\u00e3o t\u00eam qualidade.\"), Example.fixed(\"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\"));\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PT_WEASELWORD_REPLACE;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Escrita avan\u00e7ada: Express\u00f5es evasivas\";\n+    }\n+\n+    @Override\n+    public String getShort() {\n+        return \"Express\u00e3o evasiva\";\n+    }\n+\n+    @Override\n+    public String getSuggestion() {\n+        return \"'$match' \u00e9 uma express\u00e3o amb\u00edgua e evasiva. Reconsidere o seu uso, de acordo com o objetivo do seu texto.\";\n+    }\n+\n+    @Override\n+    public String getSuggestionsSeparator() {\n+        return \" ou \";\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return Tools.getUrl(\"https://pt.wikipedia.org/wiki/Weasel_word\");\n+    }\n+\n+    @Override\n+    public Locale getLocale() {\n+        return PT_LOCALE;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 105
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/66/PortugueseWeaselWordsRule.java\nindex e1bf6495f32..3562f0f7a47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/66/PortugueseWeaselWordsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/66/PortugueseWeaselWordsRule.java\n@@ -57,7 +57,8 @@ public class PortugueseWeaselWordsRule extends AbstractSimpleReplaceRule2 {\n     super.setCategory(Categories.STYLE.getCategory(messages));\n     setLocQualityIssueType(ITSIssueType.Style);\n     addExamplePair(Example.wrong(\"<marker>Diz-se</marker> que programas gratuitos n\u00e3o t\u00eam qualidade.\"),\n-                   Example.fixed(\"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\"));\n+      Example.fixed(\"<marker>XYZ</marker> dizem que programas gratuitos n\u00e3o t\u00eam qualidade. Por isso vendem programas pagos.\")\n+      );\n   }\n \n   @Override\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}