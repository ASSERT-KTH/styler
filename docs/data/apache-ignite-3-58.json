{
    "project_name": "apache-ignite-3",
    "error_id": "58",
    "information": {
        "errors": [
            {
                "line": "325",
                "column": "71",
                "severity": "error",
                "message": "There is more than 1 empty line after this line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n                    for (int i = 0; i < expKeys.size(); i++)\n                        assertArrayEquals(expKeys.get(i), keys.get(i));\n\n\n                    // Assert values equality.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/58/MetaStorageServiceTest.java\nindex c1a433f0d30..40c0c4b79f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/58/MetaStorageServiceTest.java\n@@ -324,8 +324,7 @@ public class MetaStorageServiceTest {\n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n \n-\n-                    // Assert values equality.\n+                        // Assert values equality.\n                     assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n                     List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "364",
                    "column": "13",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/58/MetaStorageServiceTest.java\nindex c1a433f0d30..89cbe6f586d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/58/MetaStorageServiceTest.java\n@@ -77,998 +77,1165 @@ import static org.mockito.Mockito.verify;\n  */\n @SuppressWarnings(\"WeakerAccess\")\n public class MetaStorageServiceTest {\n-    /** The logger. */\n-    private static final IgniteLogger LOG = IgniteLogger.forClass(MetaStorageServiceTest.class);\n+  /**\n+   * The logger.\n+   */\n+  private static final IgniteLogger LOG = IgniteLogger.forClass(MetaStorageServiceTest.class);\n+\n+  /**\n+   * Base network port.\n+   */\n+  private static final int NODE_PORT_BASE = 20_000;\n+\n+  /**\n+   * Nodes.\n+   */\n+  private static final int NODES = 2;\n+\n+  /**\n+   *\n+   */\n+  private static final String METASTORAGE_RAFT_GROUP_NAME = \"METASTORAGE_RAFT_GROUP\";\n+\n+  /**\n+   *\n+   */\n+  public static final int LATEST_REVISION = -1;\n+\n+  /**\n+   * Factory.\n+   */\n+  private static RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n+\n+  /**\n+   * Network factory.\n+   */\n+  private static final ClusterServiceFactory NETWORK_FACTORY = new ScaleCubeClusterServiceFactory();\n+\n+  /**\n+   *\n+   */\n+  // TODO: IGNITE-14088 Uncomment and use real serializer provider\n+  private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry();\n+\n+  /**\n+   * Expected result entry.\n+   */\n+  private static final Entry EXPECTED_RESULT_ENTRY =\n+      new DummyEntry(\n+          new Key(new byte[] {1}),\n+          new byte[] {2},\n+          10,\n+          2\n+      );\n+\n+  /**\n+   * Expected result map.\n+   */\n+  private static final NavigableMap<Key, Entry> EXPECTED_RESULT_MAP;\n+\n+  /**\n+   * Cluster.\n+   */\n+  private ArrayList<ClusterService> cluster = new ArrayList<>();\n+\n+  /**\n+   * Meta storage raft server.\n+   */\n+  private RaftServer metaStorageRaftSrv;\n+\n+  static {\n+    EXPECTED_RESULT_MAP = new TreeMap<>();\n+\n+    EXPECTED_RESULT_MAP.put(\n+        new Key(new byte[] {1}),\n+        new DummyEntry(\n+            new Key(new byte[] {1}),\n+            new byte[] {2},\n+            10,\n+            2\n+        )\n+    );\n \n-    /** Base network port. */\n-    private static final int NODE_PORT_BASE = 20_000;\n+    EXPECTED_RESULT_MAP.put(\n+        new Key(new byte[] {3}),\n+        new DummyEntry(\n+            new Key(new byte[] {3}),\n+            new byte[] {4},\n+            10,\n+            3\n+        )\n+    );\n+  }\n+\n+  /**\n+   * Run @{code} NODES cluster nodes.\n+   */\n+  @BeforeEach\n+  public void beforeTest() {\n+    for (int i = 0; i < NODES; i++) {\n+      cluster.add(\n+          startClusterNode(\n+              \"node_\" + i,\n+              NODE_PORT_BASE + i,\n+              IntStream.range(NODE_PORT_BASE, NODE_PORT_BASE + NODES).boxed().\n+                  map((port) -> \"localhost:\" + port).collect(Collectors.toList())));\n+    }\n \n-    /** Nodes. */\n-    private static final int NODES = 2;\n+    for (ClusterService node : cluster) {\n+      assertTrue(waitForTopology(node, NODES, 1000));\n+    }\n \n-    /** */\n-    private static final String METASTORAGE_RAFT_GROUP_NAME = \"METASTORAGE_RAFT_GROUP\";\n+    LOG.info(\"Cluster started.\");\n+  }\n \n-    /** */\n-    public static final int LATEST_REVISION = -1;\n+  /**\n+   * Shutdown raft server and stop all cluster nodes.\n+   *\n+   * @throws Exception If failed to shutdown raft server,\n+   */\n+  @AfterEach\n+  public void afterTest() throws Exception {\n+    metaStorageRaftSrv.shutdown();\n \n-    /** Factory. */\n-    private static RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n+    for (ClusterService node : cluster) {\n+      node.shutdown();\n+    }\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#get(Key)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGet() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          Entry get(byte[] key) {\n+            return EXPECTED_RESULT_ENTRY;\n+          }\n+        });\n+\n+    assertEquals(EXPECTED_RESULT_ENTRY, metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#get(Key, long)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetWithUpperBoundRevision() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          Entry get(byte[] key, long rev) {\n+            return EXPECTED_RESULT_ENTRY;\n+          }\n+        });\n+\n+    assertEquals(\n+        EXPECTED_RESULT_ENTRY,\n+        metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key(), EXPECTED_RESULT_ENTRY.revision()).get()\n+    );\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#getAll(Collection)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetAll() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          List<Entry> getAll(List<byte[]> keys) {\n+            return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+          }\n+        });\n+\n+    assertEquals(\n+        EXPECTED_RESULT_MAP,\n+        metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet()).get()\n+    );\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#getAll(Collection, long)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetAllWithUpperBoundRevision() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          List<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n+            return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+          }\n+        });\n+\n+    assertEquals(\n+        EXPECTED_RESULT_MAP,\n+        metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet(), 10).get()\n+    );\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#put(Key, byte[])}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testPut() throws Exception {\n+    Key expKey = new Key(new byte[] {1});\n+\n+    byte[] expVal = new byte[] {2};\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @SuppressWarnings(\"JavaAbbreviationUsage\")\n+          @Override\n+          public void put(byte[] key, byte[] value) {\n+            assertArrayEquals(expKey.bytes(), key);\n+\n+            assertArrayEquals(expVal, value);\n+          }\n+        });\n+\n+    metaStorageSvc.put(expKey, expVal).get();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#getAndPut(Key, byte[])}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetAndPut() throws Exception {\n+    byte[] expVal = new byte[] {2};\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @SuppressWarnings(\"JavaAbbreviationUsage\")\n+          @Override\n+          public @NotNull\n+          Entry getAndPut(byte[] key, byte[] value) {\n+            assertArrayEquals(EXPECTED_RESULT_ENTRY.key().bytes(), key);\n+\n+            assertArrayEquals(expVal, value);\n+\n+            return EXPECTED_RESULT_ENTRY;\n+          }\n+        });\n+\n+    assertEquals(\n+        EXPECTED_RESULT_ENTRY,\n+        metaStorageSvc.getAndPut(EXPECTED_RESULT_ENTRY.key(), expVal).get()\n+    );\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#putAll(Map)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testPutAll() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public void putAll(List<byte[]> keys, List<byte[]> values) {\n+            // Assert keys equality.\n+            assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+\n+            List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n+                map(Key::bytes).collect(Collectors.toList());\n+\n+            for (int i = 0; i < expKeys.size(); i++) {\n+              assertArrayEquals(expKeys.get(i), keys.get(i));\n+            }\n \n-    /** Network factory. */\n-    private static final ClusterServiceFactory NETWORK_FACTORY = new ScaleCubeClusterServiceFactory();\n \n-    /** */\n-    // TODO: IGNITE-14088 Uncomment and use real serializer provider\n-    private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry();\n+            // Assert values equality.\n+            assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n-    /** Expected result entry. */\n-    private static final Entry EXPECTED_RESULT_ENTRY =\n-        new DummyEntry(\n-            new Key(new byte[] {1}),\n-            new byte[] {2},\n-            10,\n-            2\n-        );\n+            List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n+                map(Entry::value).collect(Collectors.toList());\n+\n+            for (int i = 0; i < expKeys.size(); i++) {\n+              assertArrayEquals(expVals.get(i), values.get(i));\n+            }\n+          }\n+        });\n+\n+    metaStorageSvc.putAll(\n+        EXPECTED_RESULT_MAP.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                Map.Entry::getKey,\n+                e -> e.getValue().value())\n+            )\n+    ).get();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#getAndPutAll(Map)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetAndPutAll() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          List<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n+            // Assert keys equality.\n+            assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+\n+            List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n+                map(Key::bytes).collect(Collectors.toList());\n+\n+            for (int i = 0; i < expKeys.size(); i++) {\n+              assertArrayEquals(expKeys.get(i), keys.get(i));\n+            }\n \n-    /** Expected result map. */\n-    private static final NavigableMap<Key, Entry> EXPECTED_RESULT_MAP;\n+            // Assert values equality.\n+            assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n-    /** Cluster. */\n-    private ArrayList<ClusterService> cluster = new ArrayList<>();\n+            List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n+                map(Entry::value).collect(Collectors.toList());\n \n-    /** Meta storage raft server. */\n-    private RaftServer metaStorageRaftSrv;\n+            for (int i = 0; i < expKeys.size(); i++) {\n+              assertArrayEquals(expVals.get(i), values.get(i));\n+            }\n \n-    static {\n-        EXPECTED_RESULT_MAP = new TreeMap<>();\n+            return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+          }\n+        });\n \n-        EXPECTED_RESULT_MAP.put(\n-            new Key(new byte[] {1}),\n-            new DummyEntry(\n-                new Key(new byte[] {1}),\n-                new byte[] {2},\n-                10,\n-                2\n+    Map<Key, Entry> gotRes = metaStorageSvc.getAndPutAll(\n+        EXPECTED_RESULT_MAP.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                Map.Entry::getKey,\n+                e -> e.getValue().value())\n             )\n-        );\n+    ).get();\n+\n+    assertEquals(EXPECTED_RESULT_MAP, gotRes);\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#remove(Key)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRemove() throws Exception {\n+    Key expKey = new Key(new byte[] {1});\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public void remove(byte[] key) {\n+            assertArrayEquals(expKey.bytes(), key);\n+          }\n+        });\n+\n+    metaStorageSvc.remove(expKey).get();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#getAndRemove(Key)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetAndRemove() throws Exception {\n+    Entry expRes = new DummyEntry(\n+        new Key(new byte[] {1}),\n+        new byte[] {3},\n+        10,\n+        2\n+    );\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          Entry getAndRemove(byte[] key) {\n+            assertArrayEquals(expRes.key().bytes(), key);\n+\n+            return expRes;\n+          }\n+        });\n+\n+    assertEquals(expRes, metaStorageSvc.getAndRemove(expRes.key()).get());\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#removeAll(Collection)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRemoveAll() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public void removeAll(List<byte[]> keys) {\n+            assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+\n+            List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n+                map(Key::bytes).collect(Collectors.toList());\n+\n+            for (int i = 0; i < expKeys.size(); i++) {\n+              assertArrayEquals(expKeys.get(i), keys.get(i));\n+            }\n+          }\n+        });\n+\n+    metaStorageSvc.removeAll(EXPECTED_RESULT_MAP.keySet()).get();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#getAndRemoveAll(Collection)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testGetAndRemoveAll() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          List<Entry> getAndRemoveAll(List<byte[]> keys) {\n+            // Assert keys equality.\n+            assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+\n+            List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n+                map(Key::bytes).collect(Collectors.toList());\n+\n+            for (int i = 0; i < expKeys.size(); i++) {\n+              assertArrayEquals(expKeys.get(i), keys.get(i));\n+            }\n \n-        EXPECTED_RESULT_MAP.put(\n-            new Key(new byte[] {3}),\n+            return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+          }\n+        });\n+\n+    Map<Key, Entry> gotRes = metaStorageSvc.getAndRemoveAll(EXPECTED_RESULT_MAP.keySet()).get();\n+\n+    assertEquals(EXPECTED_RESULT_MAP, gotRes);\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#range(Key, Key, long)}} with not null keyTo and explicit revUpperBound.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRangeWitKeyToAndUpperBound() throws Exception {\n+    Key expKeyFrom = new Key(new byte[] {1});\n+\n+    Key expKeyTo = new Key(new byte[] {3});\n+\n+    long expRevUpperBound = 10;\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+            assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+\n+            assertArrayEquals(expKeyTo.bytes(), keyTo);\n+\n+            assertEquals(expRevUpperBound, revUpperBound);\n+\n+            return new Cursor<>() {\n+              @Override\n+              public void close() throws Exception {\n+\n+              }\n+\n+              @NotNull\n+              @Override\n+              public Iterator<Entry> iterator() {\n+                return new Iterator<>() {\n+                  @Override\n+                  public boolean hasNext() {\n+                    return false;\n+                  }\n+\n+                  @Override\n+                  public Entry next() {\n+                    return null;\n+                  }\n+                };\n+              }\n+            };\n+          }\n+        });\n+\n+    metaStorageSvc.range(expKeyFrom, expKeyTo, expRevUpperBound).close();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#range(Key, Key, long)}} with not null keyTo.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRangeWitKeyTo() throws Exception {\n+    Key expKeyFrom = new Key(new byte[] {1});\n+\n+    Key expKeyTo = new Key(new byte[] {3});\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+            assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+\n+            assertArrayEquals(expKeyTo.bytes(), keyTo);\n+\n+            assertEquals(LATEST_REVISION, revUpperBound);\n+\n+            return new Cursor<>() {\n+              @Override\n+              public void close() throws Exception {\n+\n+              }\n+\n+              @NotNull\n+              @Override\n+              public Iterator<Entry> iterator() {\n+                return new Iterator<>() {\n+                  @Override\n+                  public boolean hasNext() {\n+                    return false;\n+                  }\n+\n+                  @Override\n+                  public Entry next() {\n+                    return null;\n+                  }\n+                };\n+              }\n+            };\n+          }\n+        });\n+\n+    metaStorageSvc.range(expKeyFrom, expKeyTo).close();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#range(Key, Key, long)}} with null keyTo.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRangeWitNullAsKeyTo() throws Exception {\n+    Key expKeyFrom = new Key(new byte[] {1});\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+            assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+\n+            assertNull(keyTo);\n+\n+            assertEquals(LATEST_REVISION, revUpperBound);\n+\n+            return new Cursor<>() {\n+              @Override\n+              public void close() throws Exception {\n+\n+              }\n+\n+              @NotNull\n+              @Override\n+              public Iterator<Entry> iterator() {\n+                return new Iterator<>() {\n+                  @Override\n+                  public boolean hasNext() {\n+                    return false;\n+                  }\n+\n+                  @Override\n+                  public Entry next() {\n+                    return null;\n+                  }\n+                };\n+              }\n+            };\n+          }\n+        });\n+\n+    metaStorageSvc.range(expKeyFrom, null).close();\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#range(Key, Key, long)}} hasNext.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRangeHasNext() throws Exception {\n+    Key expKeyFrom = new Key(new byte[] {1});\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+            return new Cursor<>() {\n+              @Override\n+              public void close() throws Exception {\n+\n+              }\n+\n+              @NotNull\n+              @Override\n+              public Iterator<Entry> iterator() {\n+                return new Iterator<>() {\n+                  @Override\n+                  public boolean hasNext() {\n+                    return true;\n+                  }\n+\n+                  @Override\n+                  public Entry next() {\n+                    return null;\n+                  }\n+                };\n+              }\n+            };\n+          }\n+        });\n+\n+    Cursor<Entry> cursor = metaStorageSvc.range(expKeyFrom, null);\n+\n+    assertTrue(cursor.iterator().hasNext());\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#range(Key, Key, long)}} next.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRangeNext() throws Exception {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+            return new Cursor<>() {\n+              @Override\n+              public void close() throws Exception {\n+\n+              }\n+\n+              @NotNull\n+              @Override\n+              public Iterator<Entry> iterator() {\n+                return new Iterator<>() {\n+                  @Override\n+                  public boolean hasNext() {\n+                    return true;\n+                  }\n+\n+                  @Override\n+                  public Entry next() {\n+                    return EXPECTED_RESULT_ENTRY;\n+                  }\n+                };\n+              }\n+            };\n+          }\n+        });\n+\n+    Cursor<Entry> cursor = metaStorageSvc.range(EXPECTED_RESULT_ENTRY.key(), null);\n+\n+    assertEquals(EXPECTED_RESULT_ENTRY, (cursor.iterator().next()));\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#range(Key, Key, long)}} close.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Test\n+  public void testRangeClose() throws Exception {\n+    Key expKeyFrom = new Key(new byte[] {1});\n+\n+    Cursor cursorMock = mock(Cursor.class);\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+            return cursorMock;\n+          }\n+        });\n+\n+    Cursor<Entry> cursor = metaStorageSvc.range(expKeyFrom, null);\n+\n+    cursor.close();\n+\n+    verify(cursorMock, times(1)).close();\n+  }\n+\n+  @Test\n+  public void testWatchOnUpdate() throws Exception {\n+    List<WatchEvent> returnedWatchEvents = Arrays.asList(\n+        new WatchEvent(\n+            new DummyEntry(\n+                new Key(new byte[] {2}),\n+                new byte[] {20},\n+                1,\n+                1\n+            ),\n+            new DummyEntry(\n+                new Key(new byte[] {2}),\n+                new byte[] {21},\n+                2,\n+                4\n+            )\n+        ),\n+        new WatchEvent(\n+            new DummyEntry(\n+                new Key(new byte[] {3}),\n+                new byte[] {20},\n+                1,\n+                2\n+            ),\n             new DummyEntry(\n                 new Key(new byte[] {3}),\n-                new byte[] {4},\n-                10,\n+                null,\n+                2,\n+                5\n+            )\n+        ),\n+        new WatchEvent(\n+            new DummyEntry(\n+                new Key(new byte[] {4}),\n+                new byte[] {20},\n+                1,\n                 3\n+            ),\n+            new DummyEntry(\n+                new Key(new byte[] {4}),\n+                null,\n+                3,\n+                6\n             )\n-        );\n-    }\n-\n-    /**\n-     * Run @{code} NODES cluster nodes.\n-     */\n-    @BeforeEach\n-    public void beforeTest() {\n-        for (int i = 0; i < NODES; i++) {\n-            cluster.add(\n-                startClusterNode(\n-                    \"node_\" + i,\n-                    NODE_PORT_BASE + i,\n-                    IntStream.range(NODE_PORT_BASE, NODE_PORT_BASE + NODES).boxed().\n-                        map((port) -> \"localhost:\" + port).collect(Collectors.toList())));\n+        )\n+    );\n+\n+    Key keyFrom = new Key(new byte[] {1});\n+\n+    Key keyTo = new Key(new byte[] {10});\n+\n+    long rev = 2;\n+\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n+            return new Cursor<>() {\n+              AtomicInteger retirevedItemCnt = new AtomicInteger(0);\n+\n+              @Override\n+              public void close() throws Exception {\n+                // No-op.\n+              }\n+\n+              @NotNull\n+              @Override\n+              public Iterator<WatchEvent> iterator() {\n+                return new Iterator<WatchEvent>() {\n+                  @Override\n+                  public boolean hasNext() {\n+\n+                    return retirevedItemCnt.get() < returnedWatchEvents.size();\n+                  }\n+\n+                  @Override\n+                  public WatchEvent next() {\n+                    return returnedWatchEvents.get(retirevedItemCnt.getAndIncrement());\n+                  }\n+                };\n+              }\n+            };\n+          }\n+        });\n+\n+    CountDownLatch latch = new CountDownLatch(1);\n+\n+    IgniteUuid watchId = metaStorageSvc.watch(keyFrom, keyTo, rev, new WatchListener() {\n+      @Override\n+      public boolean onUpdate(@NotNull Iterable<WatchEvent> events) {\n+        List gotEvents = new ArrayList();\n+\n+        Iterator<WatchEvent> iter = events.iterator();\n+\n+        while (iter.hasNext()) {\n+          gotEvents.add(iter.next());\n         }\n \n-        for (ClusterService node : cluster)\n-            assertTrue(waitForTopology(node, NODES, 1000));\n-\n-        LOG.info(\"Cluster started.\");\n+        assertEquals(2, gotEvents.size());\n+\n+        assertTrue(gotEvents.contains(returnedWatchEvents.get(0)));\n+\n+        assertTrue(gotEvents.contains(returnedWatchEvents.get(1)));\n+\n+        latch.countDown();\n+        return true;\n+      }\n+\n+      @Override\n+      public void onError(@NotNull Throwable e) {\n+        // Within given test it's not expected to get here.\n+        fail();\n+      }\n+    }).get();\n+\n+    latch.await();\n+\n+    metaStorageSvc.stopWatch(watchId).get();\n+  }\n+\n+  // TODO: IGNITE-14693 Add tests for exception handling logic: onError,\n+  // TODO: (CompactedException | OperationTimeoutException)\n+\n+  /**\n+   * Tests {@link MetaStorageService#get(Key)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Disabled // TODO: IGNITE-14693 Add tests for exception handling logic.\n+  @Test\n+  public void testGetThatThrowsCompactedException() {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          Entry get(byte[] key) {\n+            throw new CompactedException();\n+          }\n+        });\n+\n+    assertThrows(CompactedException.class, () -> metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n+  }\n+\n+  /**\n+   * Tests {@link MetaStorageService#get(Key)}.\n+   *\n+   * @throws Exception If failed.\n+   */\n+  @Disabled // TODO: IGNITE-14693 Add tests for exception handling logic.\n+  @Test\n+  public void testGetThatThrowsOperationTimeoutException() {\n+    MetaStorageService metaStorageSvc = prepareMetaStorage(\n+        new AbstractKeyValueStorage() {\n+          @Override\n+          public @NotNull\n+          Entry get(byte[] key) {\n+            throw new OperationTimeoutException();\n+          }\n+        });\n+\n+    assertThrows(OperationTimeoutException.class, () -> metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n+  }\n+\n+  /**\n+   * @param name Node name.\n+   * @param port Local port.\n+   * @param srvs Server nodes of the cluster.\n+   * @return The client cluster view.\n+   */\n+  private ClusterService startClusterNode(String name, int port, List<String> srvs) {\n+    var ctx = new ClusterLocalConfiguration(name, port, srvs, SERIALIZATION_REGISTRY);\n+\n+    var net = NETWORK_FACTORY.createClusterService(ctx);\n+\n+    net.start();\n+\n+    return net;\n+  }\n+\n+  /**\n+   * @param cluster The cluster.\n+   * @param exp     Expected count.\n+   * @param timeout The timeout in millis.\n+   * @return {@code True} if topology size is equal to expected.\n+   */\n+  @SuppressWarnings(\"SameParameterValue\")\n+  private boolean waitForTopology(ClusterService cluster, int exp, int timeout) {\n+    long stop = System.currentTimeMillis() + timeout;\n+\n+    while (System.currentTimeMillis() < stop) {\n+      if (cluster.topologyService().allMembers().size() >= exp) {\n+        return true;\n+      }\n+\n+      try {\n+        Thread.sleep(50);\n+      } catch (InterruptedException e) {\n+        return false;\n+      }\n     }\n \n+    return false;\n+  }\n+\n+  /**\n+   * Prepares meta storage by instantiating corresponding raft server with {@link MetaStorageCommandListener} and\n+   * {@link MetaStorageServiceImpl}.\n+   *\n+   * @param keyValStorageMock {@link KeyValueStorage} mock.\n+   * @return {@link MetaStorageService} instance.\n+   */\n+  private MetaStorageService prepareMetaStorage(KeyValueStorage keyValStorageMock) {\n+    metaStorageRaftSrv = new RaftServerImpl(\n+        cluster.get(0),\n+        FACTORY,\n+        1000,\n+        Map.of(METASTORAGE_RAFT_GROUP_NAME, new MetaStorageCommandListener(keyValStorageMock))\n+    );\n+\n+    RaftGroupService metaStorageRaftGrpSvc = new RaftGroupServiceImpl(\n+        METASTORAGE_RAFT_GROUP_NAME,\n+        cluster.get(1),\n+        FACTORY,\n+        10_000,\n+        List.of(new Peer(cluster.get(0).topologyService().localMember())),\n+        true,\n+        200\n+    );\n+\n+    return new MetaStorageServiceImpl(metaStorageRaftGrpSvc);\n+  }\n+\n+  /**\n+   * Abstract {@link KeyValueStorage}. Used for tests purposes.\n+   */\n+  @SuppressWarnings(\"JavaAbbreviationUsage\")\n+  private abstract class AbstractKeyValueStorage implements KeyValueStorage {\n     /**\n-     * Shutdown raft server and stop all cluster nodes.\n-     *\n-     * @throws Exception If failed to shutdown raft server,\n+     * {@inheritDoc}\n      */\n-    @AfterEach\n-    public void afterTest() throws Exception {\n-        metaStorageRaftSrv.shutdown();\n-\n-        for (ClusterService node : cluster)\n-            node.shutdown();\n+    @Override\n+    public long revision() {\n+      return 0;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#get(Key)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGet() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key) {\n-                    return EXPECTED_RESULT_ENTRY;\n-                }\n-            });\n-\n-        assertEquals(EXPECTED_RESULT_ENTRY, metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n+    @Override\n+    public long updateCounter() {\n+      return 0;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#get(Key, long)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGetWithUpperBoundRevision() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key, long rev) {\n-                    return EXPECTED_RESULT_ENTRY;\n-                }\n-            });\n+    @Override\n+    public @NotNull\n+    Entry get(byte[] key) {\n+      fail();\n \n-        assertEquals(\n-            EXPECTED_RESULT_ENTRY,\n-            metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key(), EXPECTED_RESULT_ENTRY.revision()).get()\n-        );\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#getAll(Collection)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGetAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAll(List<byte[]> keys) {\n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n-\n-        assertEquals(\n-            EXPECTED_RESULT_MAP,\n-            metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet()).get()\n-        );\n-    }\n+    @Override\n+    public @NotNull\n+    Entry get(byte[] key, long rev) {\n+      fail();\n \n-    /**\n-     * Tests {@link MetaStorageService#getAll(Collection, long)}.\n-     *\n-     * @throws Exception If failed.\n-     */\n-    @Test\n-    public void testGetAllWithUpperBoundRevision() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n-\n-        assertEquals(\n-            EXPECTED_RESULT_MAP,\n-            metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet(), 10).get()\n-        );\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#put(Key, byte[])}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testPut() throws Exception {\n-        Key expKey = new Key(new byte[]{1});\n-\n-        byte[] expVal = new byte[]{2};\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @SuppressWarnings(\"JavaAbbreviationUsage\")\n-                @Override public void put(byte[] key, byte[] value) {\n-                    assertArrayEquals(expKey.bytes(), key);\n-\n-                    assertArrayEquals(expVal, value);\n-                }\n-            });\n+    @Override\n+    public @NotNull\n+    Collection<Entry> getAll(List<byte[]> keys) {\n+      fail();\n \n-        metaStorageSvc.put(expKey, expVal).get();\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#getAndPut(Key, byte[])}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGetAndPut() throws Exception {\n-        byte[] expVal = new byte[]{2};\n+    @Override\n+    public @NotNull\n+    Collection<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n+      fail();\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @SuppressWarnings(\"JavaAbbreviationUsage\")\n-                @Override public @NotNull Entry getAndPut(byte[] key, byte[] value) {\n-                    assertArrayEquals(EXPECTED_RESULT_ENTRY.key().bytes(), key);\n-\n-                    assertArrayEquals(expVal, value);\n-\n-                    return EXPECTED_RESULT_ENTRY;\n-                }\n-            });\n-\n-        assertEquals(\n-            EXPECTED_RESULT_ENTRY,\n-            metaStorageSvc.getAndPut(EXPECTED_RESULT_ENTRY.key(), expVal).get()\n-        );\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#putAll(Map)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testPutAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public void putAll(List<byte[]> keys, List<byte[]> values) {\n-                    // Assert keys equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n-\n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n-\n-\n-                    // Assert values equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n-\n-                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n-                        map(Entry::value).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expVals.get(i), values.get(i));\n-                }\n-            });\n-\n-        metaStorageSvc.putAll(\n-            EXPECTED_RESULT_MAP.entrySet().stream()\n-                .collect(Collectors.toMap(\n-                    Map.Entry::getKey,\n-                    e -> e.getValue().value())\n-                )\n-        ).get();\n+    @Override\n+    public void put(byte[] key, byte[] value) {\n+      fail();\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#getAndPutAll(Map)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGetAndPutAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n-                    // Assert keys equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n-\n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n-\n-                    // Assert values equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n-\n-                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n-                        map(Entry::value).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expVals.get(i), values.get(i));\n-\n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n-\n-        Map<Key, Entry> gotRes = metaStorageSvc.getAndPutAll(\n-            EXPECTED_RESULT_MAP.entrySet().stream()\n-                .collect(Collectors.toMap(\n-                    Map.Entry::getKey,\n-                    e -> e.getValue().value())\n-                )\n-        ).get();\n-\n-        assertEquals(EXPECTED_RESULT_MAP, gotRes);\n+    @Override\n+    public @NotNull\n+    Entry getAndPut(byte[] key, byte[] value) {\n+      fail();\n+\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#remove(Key)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRemove() throws Exception {\n-        Key expKey = new Key(new byte[]{1});\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public void remove(byte[] key) {\n-                    assertArrayEquals(expKey.bytes(), key);\n-                }\n-            });\n-\n-        metaStorageSvc.remove(expKey).get();\n+    @Override\n+    public void putAll(List<byte[]> keys, List<byte[]> values) {\n+      fail();\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#getAndRemove(Key)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGetAndRemove() throws Exception {\n-        Entry expRes = new DummyEntry(\n-            new Key(new byte[]{1}),\n-            new byte[]{3},\n-            10,\n-            2\n-        );\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry getAndRemove(byte[] key) {\n-                    assertArrayEquals(expRes.key().bytes(), key);\n-\n-                    return expRes;\n-                }\n-            });\n+    @Override\n+    public @NotNull\n+    Collection<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n+      fail();\n \n-        assertEquals(expRes, metaStorageSvc.getAndRemove(expRes.key()).get());\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#removeAll(Collection)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRemoveAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public void removeAll(List<byte[]> keys) {\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n-\n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n-                }\n-            });\n-\n-        metaStorageSvc.removeAll(EXPECTED_RESULT_MAP.keySet()).get();\n+    @Override\n+    public void remove(byte[] key) {\n+      fail();\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#getAndRemoveAll(Collection)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testGetAndRemoveAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAndRemoveAll(List<byte[]> keys) {\n-                    // Assert keys equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n-\n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n-\n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n+    @Override\n+    public @NotNull\n+    Entry getAndRemove(byte[] key) {\n+      fail();\n \n-        Map<Key, Entry> gotRes = metaStorageSvc.getAndRemoveAll(EXPECTED_RESULT_MAP.keySet()).get();\n-\n-        assertEquals(EXPECTED_RESULT_MAP, gotRes);\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#range(Key, Key, long)}} with not null keyTo and explicit revUpperBound.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRangeWitKeyToAndUpperBound() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n-\n-        Key expKeyTo = new Key(new byte[]{3});\n-\n-        long expRevUpperBound = 10;\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n-\n-                    assertArrayEquals(expKeyTo.bytes(), keyTo);\n-\n-                    assertEquals(expRevUpperBound, revUpperBound);\n-\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return false;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n-\n-        metaStorageSvc.range(expKeyFrom, expKeyTo, expRevUpperBound).close();\n+    @Override\n+    public void removeAll(List<byte[]> keys) {\n+      fail();\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#range(Key, Key, long)}} with not null keyTo.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRangeWitKeyTo() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n-\n-        Key expKeyTo = new Key(new byte[]{3});\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n-\n-                    assertArrayEquals(expKeyTo.bytes(), keyTo);\n-\n-                    assertEquals(LATEST_REVISION, revUpperBound);\n-\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return false;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+    @Override\n+    public @NotNull\n+    Collection<Entry> getAndRemoveAll(List<byte[]> keys) {\n+      fail();\n \n-        metaStorageSvc.range(expKeyFrom, expKeyTo).close();\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#range(Key, Key, long)}} with null keyTo.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRangeWitNullAsKeyTo() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n-\n-                    assertNull(keyTo);\n-\n-                    assertEquals(LATEST_REVISION, revUpperBound);\n-\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return false;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n-\n-        metaStorageSvc.range(expKeyFrom, null).close();\n+    @Override\n+    public boolean invoke(\n+        Condition condition,\n+        Collection<Operation> success,\n+        Collection<Operation> failure\n+    ) {\n+      fail();\n+\n+      return false;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#range(Key, Key, long)}} hasNext.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRangeHasNext() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return true;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n-\n-        Cursor<Entry> cursor = metaStorageSvc.range(expKeyFrom, null);\n-\n-        assertTrue(cursor.iterator().hasNext());\n-    }\n+    @Override\n+    public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo) {\n+      fail();\n \n-    /**\n-     * Tests {@link MetaStorageService#range(Key, Key, long)}} next.\n-     *\n-     * @throws Exception If failed.\n-     */\n-    @Test\n-    public void testRangeNext() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return true;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return EXPECTED_RESULT_ENTRY;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n-\n-        Cursor<Entry> cursor = metaStorageSvc.range(EXPECTED_RESULT_ENTRY.key(), null);\n-\n-        assertEquals(EXPECTED_RESULT_ENTRY, (cursor.iterator().next()));\n+      return null;\n     }\n \n     /**\n-     * Tests {@link MetaStorageService#range(Key, Key, long)}} close.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Test\n-    public void testRangeClose() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n-\n-        Cursor cursorMock = mock(Cursor.class);\n+    @Override\n+    public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+      fail();\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    return cursorMock;\n-                }\n-            });\n-\n-        Cursor<Entry> cursor = metaStorageSvc.range(expKeyFrom, null);\n-\n-        cursor.close();\n-\n-        verify(cursorMock, times(1)).close();\n-    }\n-\n-    @Test\n-    public void testWatchOnUpdate() throws Exception {\n-        List<WatchEvent> returnedWatchEvents = Arrays.asList(\n-            new WatchEvent(\n-                new DummyEntry(\n-                    new Key(new byte[]{2}),\n-                    new byte[]{20},\n-                    1,\n-                    1\n-                ),\n-                new DummyEntry(\n-                    new Key(new byte[]{2}),\n-                    new byte[]{21},\n-                    2,\n-                    4\n-                )\n-            ),\n-            new WatchEvent(\n-                new DummyEntry(\n-                    new Key(new byte[] {3}),\n-                    new byte[] {20},\n-                    1,\n-                    2\n-                ),\n-                new DummyEntry(\n-                    new Key(new byte[] {3}),\n-                    null,\n-                    2,\n-                    5\n-                )\n-            ),\n-            new WatchEvent(\n-                new DummyEntry(\n-                    new Key(new byte[] {4}),\n-                    new byte[] {20},\n-                    1,\n-                    3\n-                ),\n-                new DummyEntry(\n-                    new Key(new byte[] {4}),\n-                    null,\n-                    3,\n-                    6\n-                )\n-            )\n-        );\n-\n-        Key keyFrom = new Key(new byte[]{1});\n-\n-        Key keyTo = new Key(new byte[]{10});\n-\n-        long rev = 2;\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n-                    return new Cursor<>() {\n-                        AtomicInteger retirevedItemCnt = new AtomicInteger(0);\n-\n-                        @Override public void close() throws Exception {\n-                            // No-op.\n-                        }\n-\n-                        @NotNull @Override public Iterator<WatchEvent> iterator() {\n-                            return new Iterator<WatchEvent>() {\n-                                @Override public boolean hasNext() {\n-\n-                                    return retirevedItemCnt.get() < returnedWatchEvents.size();\n-                                }\n-\n-                                @Override public WatchEvent next() {\n-                                    return returnedWatchEvents.get(retirevedItemCnt.getAndIncrement());\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        IgniteUuid watchId = metaStorageSvc.watch(keyFrom, keyTo, rev, new WatchListener() {\n-            @Override public boolean onUpdate(@NotNull Iterable<WatchEvent> events) {\n-                List gotEvents = new ArrayList();\n-\n-                Iterator<WatchEvent> iter = events.iterator();\n-\n-                while (iter.hasNext())\n-                    gotEvents.add(iter.next());\n-\n-                assertEquals(2, gotEvents.size());\n-\n-                assertTrue(gotEvents.contains(returnedWatchEvents.get(0)));\n-\n-                assertTrue(gotEvents.contains(returnedWatchEvents.get(1)));\n-\n-                latch.countDown();\n-                return true;\n-            }\n-\n-            @Override public void onError(@NotNull Throwable e) {\n-                // Within given test it's not expected to get here.\n-                fail();\n-            }\n-        }).get();\n-\n-        latch.await();\n-\n-        metaStorageSvc.stopWatch(watchId).get();\n+      return null;\n     }\n \n-    // TODO: IGNITE-14693 Add tests for exception handling logic: onError,\n-    // TODO: (CompactedException | OperationTimeoutException)\n-\n     /**\n-     * Tests {@link MetaStorageService#get(Key)}.\n-     *\n-     * @throws Exception If failed.\n+     * {@inheritDoc}\n      */\n-    @Disabled // TODO: IGNITE-14693 Add tests for exception handling logic.\n-    @Test\n-    public void testGetThatThrowsCompactedException() {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key) {\n-                    throw new CompactedException();\n-                }\n-            });\n-\n-        assertThrows(CompactedException.class, () -> metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n-    }\n+    @Override\n+    public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n+      fail();\n \n-    /**\n-     * Tests {@link MetaStorageService#get(Key)}.\n-     *\n-     * @throws Exception If failed.\n-     */\n-    @Disabled // TODO: IGNITE-14693 Add tests for exception handling logic.\n-    @Test\n-    public void testGetThatThrowsOperationTimeoutException() {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key) {\n-                    throw new OperationTimeoutException();\n-                }\n-            });\n-\n-        assertThrows(OperationTimeoutException.class, () -> metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n+      return null;\n     }\n \n     /**\n-     * @param name Node name.\n-     * @param port Local port.\n-     * @param srvs Server nodes of the cluster.\n-     * @return The client cluster view.\n+     * {@inheritDoc}\n      */\n-    private ClusterService startClusterNode(String name, int port, List<String> srvs) {\n-        var ctx = new ClusterLocalConfiguration(name, port, srvs, SERIALIZATION_REGISTRY);\n-\n-        var net = NETWORK_FACTORY.createClusterService(ctx);\n-\n-        net.start();\n+    @Override\n+    public Cursor<WatchEvent> watch(byte[] key, long rev) {\n+      fail();\n \n-        return net;\n+      return null;\n     }\n \n     /**\n-     * @param cluster The cluster.\n-     * @param exp Expected count.\n-     * @param timeout The timeout in millis.\n-     * @return {@code True} if topology size is equal to expected.\n+     * {@inheritDoc}\n      */\n-    @SuppressWarnings(\"SameParameterValue\")\n-    private boolean waitForTopology(ClusterService cluster, int exp, int timeout) {\n-        long stop = System.currentTimeMillis() + timeout;\n+    @Override\n+    public Cursor<WatchEvent> watch(Collection<byte[]> keys, long rev) {\n+      fail();\n \n-        while (System.currentTimeMillis() < stop) {\n-            if (cluster.topologyService().allMembers().size() >= exp)\n-                return true;\n-\n-            try {\n-                Thread.sleep(50);\n-            }\n-            catch (InterruptedException e) {\n-                return false;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    /**\n-     * Prepares meta storage by instantiating corresponding raft server with {@link MetaStorageCommandListener} and\n-     * {@link MetaStorageServiceImpl}.\n-     *\n-     * @param keyValStorageMock {@link KeyValueStorage} mock.\n-     * @return {@link MetaStorageService} instance.\n-     */\n-    private MetaStorageService prepareMetaStorage(KeyValueStorage keyValStorageMock) {\n-        metaStorageRaftSrv = new RaftServerImpl(\n-            cluster.get(0),\n-            FACTORY,\n-            1000,\n-            Map.of(METASTORAGE_RAFT_GROUP_NAME, new MetaStorageCommandListener(keyValStorageMock))\n-        );\n-\n-        RaftGroupService metaStorageRaftGrpSvc = new RaftGroupServiceImpl(\n-            METASTORAGE_RAFT_GROUP_NAME,\n-            cluster.get(1),\n-            FACTORY,\n-            10_000,\n-            List.of(new Peer(cluster.get(0).topologyService().localMember())),\n-            true,\n-            200\n-        );\n-\n-        return new MetaStorageServiceImpl(metaStorageRaftGrpSvc);\n+      return null;\n     }\n \n     /**\n-     * Abstract {@link KeyValueStorage}. Used for tests purposes.\n+     * {@inheritDoc}\n      */\n-    @SuppressWarnings(\"JavaAbbreviationUsage\")\n-    private abstract class AbstractKeyValueStorage implements KeyValueStorage {\n-        /** {@inheritDoc} */\n-        @Override public long revision() {\n-            return 0;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public long updateCounter() {\n-            return 0;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Entry get(byte[] key) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Entry get(byte[] key, long rev) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Collection<Entry> getAll(List<byte[]> keys) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Collection<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void put(byte[] key, byte[] value) {\n-            fail();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Entry getAndPut(byte[] key, byte[] value) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void putAll(List<byte[]> keys, List<byte[]> values) {\n-            fail();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Collection<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void remove(byte[] key) {\n-            fail();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Entry getAndRemove(byte[] key) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void removeAll(List<byte[]> keys) {\n-            fail();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public @NotNull Collection<Entry> getAndRemoveAll(List<byte[]> keys) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public boolean invoke(\n-            Condition condition,\n-            Collection<Operation> success,\n-            Collection<Operation> failure\n-        ) {\n-            fail();\n-\n-            return false;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Cursor<WatchEvent> watch(byte[] key, long rev) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Cursor<WatchEvent> watch(Collection<byte[]> keys, long rev) {\n-            fail();\n-\n-            return null;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void compact() {\n-            fail();\n-        }\n+    @Override\n+    public void compact() {\n+      fail();\n     }\n+  }\n }\n",
            "diff_size": 1749
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/58/MetaStorageServiceTest.java\nindex c1a433f0d30..8f63373cd46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/58/MetaStorageServiceTest.java\n@@ -103,15 +103,14 @@ public class MetaStorageServiceTest {\n     private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry();\n \n     /** Expected result entry. */\n-    private static final Entry EXPECTED_RESULT_ENTRY =\n-        new DummyEntry(\n+    private static final Entry EXPECTED_RESULT_ENTRY = new DummyEntry(\n             new Key(new byte[] {1}),\n             new byte[] {2},\n             10,\n             2\n         );\n \n-    /** Expected result map. */\n+/** Expected result map. */\n     private static final NavigableMap<Key, Entry> EXPECTED_RESULT_MAP;\n \n     /** Cluster. */\n@@ -154,9 +153,8 @@ public class MetaStorageServiceTest {\n                 startClusterNode(\n                     \"node_\" + i,\n                     NODE_PORT_BASE + i,\n-                    IntStream.range(NODE_PORT_BASE, NODE_PORT_BASE + NODES).boxed().\n-                        map((port) -> \"localhost:\" + port).collect(Collectors.toList())));\n-        }\n+                    IntStream.range(NODE_PORT_BASE, NODE_PORT_BASE + NODES).boxed().map((port) -> \"localhost:\" + port).collect(Collectors.toList())));\n+    }\n \n         for (ClusterService node : cluster)\n             assertTrue(waitForTopology(node, NODES, 1000));\n@@ -261,9 +259,9 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testPut() throws Exception {\n-        Key expKey = new Key(new byte[]{1});\n+        Key expKey = new Key(new byte[] {1});\n \n-        byte[] expVal = new byte[]{2};\n+        byte[] expVal = new byte[] {2};\n \n         MetaStorageService metaStorageSvc = prepareMetaStorage(\n             new AbstractKeyValueStorage() {\n@@ -285,7 +283,7 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testGetAndPut() throws Exception {\n-        byte[] expVal = new byte[]{2};\n+        byte[] expVal = new byte[] {2};\n \n         MetaStorageService metaStorageSvc = prepareMetaStorage(\n             new AbstractKeyValueStorage() {\n@@ -318,18 +316,15 @@ public class MetaStorageServiceTest {\n                     // Assert keys equality.\n                     assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().map(Key::bytes).collect(Collectors.toList());\n \n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n \n-\n-                    // Assert values equality.\n+// Assert values equality.\n                     assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n-                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n-                        map(Entry::value).collect(Collectors.toList());\n+                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().map(Entry::value).collect(Collectors.toList());\n \n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expVals.get(i), values.get(i));\n@@ -340,9 +335,7 @@ public class MetaStorageServiceTest {\n             EXPECTED_RESULT_MAP.entrySet().stream()\n                 .collect(Collectors.toMap(\n                     Map.Entry::getKey,\n-                    e -> e.getValue().value())\n-                )\n-        ).get();\n+                    e -> e.getValue().value()))).get();\n     }\n \n     /**\n@@ -358,8 +351,7 @@ public class MetaStorageServiceTest {\n                     // Assert keys equality.\n                     assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().map(Key::bytes).collect(Collectors.toList());\n \n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n@@ -367,8 +359,7 @@ public class MetaStorageServiceTest {\n                     // Assert values equality.\n                     assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n-                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n-                        map(Entry::value).collect(Collectors.toList());\n+                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().map(Entry::value).collect(Collectors.toList());\n \n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expVals.get(i), values.get(i));\n@@ -381,9 +372,7 @@ public class MetaStorageServiceTest {\n             EXPECTED_RESULT_MAP.entrySet().stream()\n                 .collect(Collectors.toMap(\n                     Map.Entry::getKey,\n-                    e -> e.getValue().value())\n-                )\n-        ).get();\n+                    e -> e.getValue().value()))).get();\n \n         assertEquals(EXPECTED_RESULT_MAP, gotRes);\n     }\n@@ -395,7 +384,7 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testRemove() throws Exception {\n-        Key expKey = new Key(new byte[]{1});\n+        Key expKey = new Key(new byte[] {1});\n \n         MetaStorageService metaStorageSvc = prepareMetaStorage(\n             new AbstractKeyValueStorage() {\n@@ -415,8 +404,8 @@ public class MetaStorageServiceTest {\n     @Test\n     public void testGetAndRemove() throws Exception {\n         Entry expRes = new DummyEntry(\n-            new Key(new byte[]{1}),\n-            new byte[]{3},\n+            new Key(new byte[] {1}),\n+            new byte[] {3},\n             10,\n             2\n         );\n@@ -445,8 +434,7 @@ public class MetaStorageServiceTest {\n                 @Override public void removeAll(List<byte[]> keys) {\n                     assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().map(Key::bytes).collect(Collectors.toList());\n \n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n@@ -469,8 +457,7 @@ public class MetaStorageServiceTest {\n                     // Assert keys equality.\n                     assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().map(Key::bytes).collect(Collectors.toList());\n \n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n@@ -491,9 +478,9 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testRangeWitKeyToAndUpperBound() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n+        Key expKeyFrom = new Key(new byte[] {1});\n \n-        Key expKeyTo = new Key(new byte[]{3});\n+        Key expKeyTo = new Key(new byte[] {3});\n \n         long expRevUpperBound = 10;\n \n@@ -536,9 +523,9 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testRangeWitKeyTo() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n+        Key expKeyFrom = new Key(new byte[] {1});\n \n-        Key expKeyTo = new Key(new byte[]{3});\n+        Key expKeyTo = new Key(new byte[] {3});\n \n         MetaStorageService metaStorageSvc = prepareMetaStorage(\n             new AbstractKeyValueStorage() {\n@@ -579,7 +566,7 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testRangeWitNullAsKeyTo() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n+        Key expKeyFrom = new Key(new byte[] {1});\n \n         MetaStorageService metaStorageSvc = prepareMetaStorage(\n             new AbstractKeyValueStorage() {\n@@ -620,7 +607,7 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testRangeHasNext() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n+        Key expKeyFrom = new Key(new byte[] {1});\n \n         MetaStorageService metaStorageSvc = prepareMetaStorage(\n             new AbstractKeyValueStorage() {\n@@ -692,7 +679,7 @@ public class MetaStorageServiceTest {\n      */\n     @Test\n     public void testRangeClose() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n+        Key expKeyFrom = new Key(new byte[] {1});\n \n         Cursor cursorMock = mock(Cursor.class);\n \n@@ -715,14 +702,13 @@ public class MetaStorageServiceTest {\n         List<WatchEvent> returnedWatchEvents = Arrays.asList(\n             new WatchEvent(\n                 new DummyEntry(\n-                    new Key(new byte[]{2}),\n-                    new byte[]{20},\n+                    new Key(new byte[] {2}),\n+                    new byte[] {20},\n                     1,\n-                    1\n-                ),\n+                    1),\n                 new DummyEntry(\n-                    new Key(new byte[]{2}),\n-                    new byte[]{21},\n+                    new Key(new byte[] {2}),\n+                    new byte[] {21},\n                     2,\n                     4\n                 )\n@@ -732,11 +718,9 @@ public class MetaStorageServiceTest {\n                     new Key(new byte[] {3}),\n                     new byte[] {20},\n                     1,\n-                    2\n-                ),\n+                    2),\n                 new DummyEntry(\n-                    new Key(new byte[] {3}),\n-                    null,\n+                    new Key(new byte[] {3}), null,\n                     2,\n                     5\n                 )\n@@ -746,20 +730,18 @@ public class MetaStorageServiceTest {\n                     new Key(new byte[] {4}),\n                     new byte[] {20},\n                     1,\n-                    3\n-                ),\n+                    3),\n                 new DummyEntry(\n-                    new Key(new byte[] {4}),\n-                    null,\n+                    new Key(new byte[] {4}), null,\n                     3,\n                     6\n                 )\n             )\n         );\n \n-        Key keyFrom = new Key(new byte[]{1});\n+        Key keyFrom = new Key(new byte[] {1});\n \n-        Key keyTo = new Key(new byte[]{10});\n+        Key keyTo = new Key(new byte[] {10});\n \n         long rev = 2;\n \n@@ -776,8 +758,7 @@ public class MetaStorageServiceTest {\n                         @NotNull @Override public Iterator<WatchEvent> iterator() {\n                             return new Iterator<WatchEvent>() {\n                                 @Override public boolean hasNext() {\n-\n-                                    return retirevedItemCnt.get() < returnedWatchEvents.size();\n+    return retirevedItemCnt.get() < returnedWatchEvents.size();\n                                 }\n \n                                 @Override public WatchEvent next() {\n@@ -921,8 +902,7 @@ public class MetaStorageServiceTest {\n             cluster.get(1),\n             FACTORY,\n             10_000,\n-            List.of(new Peer(cluster.get(0).topologyService().localMember())),\n-            true,\n+            List.of(new Peer(cluster.get(0).topologyService().localMember())), true,\n             200\n         );\n \n@@ -1071,4 +1051,4 @@ public class MetaStorageServiceTest {\n             fail();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "80",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "94",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "99",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "104",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "109",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "114",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "125",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "130",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "155",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "177",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "191",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "209",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "230",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "248",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "266",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "291",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "316",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "328",
                    "column": "103",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "355",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "397",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "417",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "439",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "464",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "494",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "514",
                    "column": "57",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "517",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "523",
                    "column": "65",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "526",
                    "column": "65",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "545",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "563",
                    "column": "57",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "566",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "572",
                    "column": "65",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "575",
                    "column": "65",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "594",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "610",
                    "column": "57",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "613",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "619",
                    "column": "65",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "622",
                    "column": "65",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "641",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "651",
                    "column": "57",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "654",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "660",
                    "column": "65",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "663",
                    "column": "65",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "684",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "692",
                    "column": "57",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "695",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "701",
                    "column": "65",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "704",
                    "column": "65",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "725",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "745",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "768",
                    "column": "110",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "771",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "774",
                    "column": "57",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "777",
                    "column": "57",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "783",
                    "column": "65",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "786",
                    "column": "65",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "797",
                    "column": "28",
                    "severity": "error",
                    "message": "There is more than 1 empty line after this line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "818",
                    "column": "34",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "839",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "858",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "878",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "896",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "924",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "950",
                    "column": "5",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "961",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "968",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "977",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "986",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "995",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1004",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1011",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1020",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1027",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1036",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1043",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1052",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1059",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1068",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1077",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1086",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1095",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1104",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1113",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "1122",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/58/MetaStorageServiceTest.java\nindex c1a433f0d30..c1cc44c7a92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/58/MetaStorageServiceTest.java\n@@ -75,89 +75,92 @@ import static org.mockito.Mockito.verify;\n /**\n  * Meta storage client tests.\n  */\n+\n+\n @SuppressWarnings(\"WeakerAccess\")\n public class MetaStorageServiceTest {\n     /** The logger. */\n+\n     private static final IgniteLogger LOG = IgniteLogger.forClass(MetaStorageServiceTest.class);\n \n     /** Base network port. */\n+\n+\n     private static final int NODE_PORT_BASE = 20_000;\n \n     /** Nodes. */\n+\n+\n     private static final int NODES = 2;\n \n     /** */\n+\n+\n     private static final String METASTORAGE_RAFT_GROUP_NAME = \"METASTORAGE_RAFT_GROUP\";\n \n     /** */\n+\n+\n     public static final int LATEST_REVISION = -1;\n \n     /** Factory. */\n+\n+\n     private static RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n \n     /** Network factory. */\n+\n+\n     private static final ClusterServiceFactory NETWORK_FACTORY = new ScaleCubeClusterServiceFactory();\n \n     /** */\n     // TODO: IGNITE-14088 Uncomment and use real serializer provider\n+\n+\n     private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry();\n \n     /** Expected result entry. */\n-    private static final Entry EXPECTED_RESULT_ENTRY =\n-        new DummyEntry(\n-            new Key(new byte[] {1}),\n-            new byte[] {2},\n-            10,\n-            2\n-        );\n+\n+\n+    private static final Entry EXPECTED_RESULT_ENTRY = new DummyEntry(new Key(new byte[] {1}), new byte[] {2}, 10, 2);\n \n     /** Expected result map. */\n+\n+\n     private static final NavigableMap<Key, Entry> EXPECTED_RESULT_MAP;\n \n     /** Cluster. */\n+\n+\n     private ArrayList<ClusterService> cluster = new ArrayList<>();\n \n     /** Meta storage raft server. */\n+\n+\n     private RaftServer metaStorageRaftSrv;\n \n     static {\n         EXPECTED_RESULT_MAP = new TreeMap<>();\n \n-        EXPECTED_RESULT_MAP.put(\n-            new Key(new byte[] {1}),\n-            new DummyEntry(\n-                new Key(new byte[] {1}),\n-                new byte[] {2},\n-                10,\n-                2\n-            )\n-        );\n+        EXPECTED_RESULT_MAP.put(new Key(new byte[] {1}), new DummyEntry(new Key(new byte[] {1}), new byte[] {2}, 10, 2));\n \n-        EXPECTED_RESULT_MAP.put(\n-            new Key(new byte[] {3}),\n-            new DummyEntry(\n-                new Key(new byte[] {3}),\n-                new byte[] {4},\n-                10,\n-                3\n-            )\n-        );\n+        EXPECTED_RESULT_MAP.put(new Key(new byte[] {3}), new DummyEntry(new Key(new byte[] {3}), new byte[] {4}, 10, 3));\n     }\n \n     /**\n      * Run @{code} NODES cluster nodes.\n      */\n-    @BeforeEach\n-    public void beforeTest() {\n+\n+\n+    @BeforeEach public void beforeTest() {\n         for (int i = 0; i < NODES; i++) {\n-            cluster.add(\n-                startClusterNode(\n-                    \"node_\" + i,\n-                    NODE_PORT_BASE + i,\n-                    IntStream.range(NODE_PORT_BASE, NODE_PORT_BASE + NODES).boxed().\n-                        map((port) -> \"localhost:\" + port).collect(Collectors.toList())));\n+            cluster.add(startClusterNode(\n+                            \"node_\" + i,\n+                            NODE_PORT_BASE + i,\n+                            IntStream.range(NODE_PORT_BASE, NODE_PORT_BASE + NODES).boxed()\n+                                                                                   .map((port) -> \"localhost:\" + port)\n+                                                                                   .collect(Collectors.toList())));\n         }\n-\n         for (ClusterService node : cluster)\n             assertTrue(waitForTopology(node, NODES, 1000));\n \n@@ -169,8 +172,9 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed to shutdown raft server,\n      */\n-    @AfterEach\n-    public void afterTest() throws Exception {\n+\n+\n+    @AfterEach public void afterTest() throws Exception {\n         metaStorageRaftSrv.shutdown();\n \n         for (ClusterService node : cluster)\n@@ -182,14 +186,15 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGet() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key) {\n-                    return EXPECTED_RESULT_ENTRY;\n-                }\n-            });\n+\n+\n+    @Test public void testGet() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull Entry get(byte[] key) {\n+                                                    return EXPECTED_RESULT_ENTRY;\n+                                                }\n+                                            });\n \n         assertEquals(EXPECTED_RESULT_ENTRY, metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n     }\n@@ -199,14 +204,15 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetWithUpperBoundRevision() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key, long rev) {\n-                    return EXPECTED_RESULT_ENTRY;\n-                }\n-            });\n+\n+\n+    @Test public void testGetWithUpperBoundRevision() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull Entry get(byte[] key, long rev) {\n+                                                    return EXPECTED_RESULT_ENTRY;\n+                                                }\n+                                            });\n \n         assertEquals(\n             EXPECTED_RESULT_ENTRY,\n@@ -219,19 +225,17 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAll(List<byte[]> keys) {\n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n \n-        assertEquals(\n-            EXPECTED_RESULT_MAP,\n-            metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet()).get()\n-        );\n+\n+    @Test public void testGetAll() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull List<Entry> getAll(List<byte[]> keys) {\n+                                                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+                                                }\n+                                            });\n+\n+        assertEquals(EXPECTED_RESULT_MAP, metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet()).get());\n     }\n \n     /**\n@@ -239,19 +243,17 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetAllWithUpperBoundRevision() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n \n-        assertEquals(\n-            EXPECTED_RESULT_MAP,\n-            metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet(), 10).get()\n-        );\n+\n+    @Test public void testGetAllWithUpperBoundRevision() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull List<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n+                                                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+                                                }\n+                                            });\n+\n+        assertEquals(EXPECTED_RESULT_MAP, metaStorageSvc.getAll(EXPECTED_RESULT_MAP.keySet(), 10).get());\n     }\n \n     /**\n@@ -259,21 +261,22 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testPut() throws Exception {\n-        Key expKey = new Key(new byte[]{1});\n \n-        byte[] expVal = new byte[]{2};\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @SuppressWarnings(\"JavaAbbreviationUsage\")\n-                @Override public void put(byte[] key, byte[] value) {\n-                    assertArrayEquals(expKey.bytes(), key);\n+    @Test public void testPut() throws Exception {\n+        Key expKey = new Key(new byte[] {1});\n+\n+        byte[] expVal = new byte[] {2};\n \n-                    assertArrayEquals(expVal, value);\n-                }\n-            });\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @SuppressWarnings(\"JavaAbbreviationUsage\")\n+                                                @Override public void put(byte[] key, byte[] value) {\n+                                                    assertArrayEquals(expKey.bytes(), key);\n+\n+                                                    assertArrayEquals(expVal, value);\n+                                                }\n+                                            });\n \n         metaStorageSvc.put(expKey, expVal).get();\n     }\n@@ -283,26 +286,24 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetAndPut() throws Exception {\n-        byte[] expVal = new byte[]{2};\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @SuppressWarnings(\"JavaAbbreviationUsage\")\n-                @Override public @NotNull Entry getAndPut(byte[] key, byte[] value) {\n-                    assertArrayEquals(EXPECTED_RESULT_ENTRY.key().bytes(), key);\n \n-                    assertArrayEquals(expVal, value);\n+    @Test public void testGetAndPut() throws Exception {\n+        byte[] expVal = new byte[] {2};\n \n-                    return EXPECTED_RESULT_ENTRY;\n-                }\n-            });\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n \n-        assertEquals(\n-            EXPECTED_RESULT_ENTRY,\n-            metaStorageSvc.getAndPut(EXPECTED_RESULT_ENTRY.key(), expVal).get()\n-        );\n+                                                @SuppressWarnings(\"JavaAbbreviationUsage\")\n+                                                @Override public @NotNull Entry getAndPut(byte[] key, byte[] value) {\n+                                                    assertArrayEquals(EXPECTED_RESULT_ENTRY.key().bytes(), key);\n+\n+                                                    assertArrayEquals(expVal, value);\n+\n+                                                    return EXPECTED_RESULT_ENTRY;\n+                                                }\n+                                            });\n+\n+        assertEquals(EXPECTED_RESULT_ENTRY, metaStorageSvc.getAndPut(EXPECTED_RESULT_ENTRY.key(), expVal).get());\n     }\n \n     /**\n@@ -310,39 +311,38 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testPutAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public void putAll(List<byte[]> keys, List<byte[]> values) {\n+\n+\n+    @Test public void testPutAll() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public void putAll(List<byte[]> keys, List<byte[]> values) {\n                     // Assert keys equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+                                                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                                                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream()\n+                                                                                                       .map(Key::bytes)\n+                                                                                                       .collect(Collectors.toList());\n \n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n+                                                    for (int i = 0; i < expKeys.size(); i++)\n+                                                        assertArrayEquals(expKeys.get(i), keys.get(i));\n \n \n                     // Assert values equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n-\n-                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n-                        map(Entry::value).collect(Collectors.toList());\n-\n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expVals.get(i), values.get(i));\n-                }\n-            });\n-\n-        metaStorageSvc.putAll(\n-            EXPECTED_RESULT_MAP.entrySet().stream()\n-                .collect(Collectors.toMap(\n-                    Map.Entry::getKey,\n-                    e -> e.getValue().value())\n-                )\n-        ).get();\n+\n+                                                    assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n+\n+                                                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream()\n+                                                                                                       .map(Entry::value)\n+                                                                                                       .collect(Collectors.toList());\n+\n+                                                    for (int i = 0; i < expKeys.size(); i++)\n+                                                        assertArrayEquals(expVals.get(i), values.get(i));\n+                                                }\n+                                            });\n+\n+        metaStorageSvc.putAll(EXPECTED_RESULT_MAP.entrySet().stream()\n+                                                            .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().value()))).get();\n     }\n \n     /**\n@@ -350,40 +350,39 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetAndPutAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n+\n+\n+    @Test public void testGetAndPutAll() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull List<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n                     // Assert keys equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+                                                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                                                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream()\n+                                                                                                       .map(Key::bytes)\n+                                                                                                       .collect(Collectors.toList());\n \n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n+                                                    for (int i = 0; i < expKeys.size(); i++)\n+                                                        assertArrayEquals(expKeys.get(i), keys.get(i));\n \n                     // Assert values equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n-                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n-                        map(Entry::value).collect(Collectors.toList());\n+                                                    assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n+\n+                                                    List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream()\n+                                                                                                       .map(Entry::value)\n+                                                                                                       .collect(Collectors.toList());\n \n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expVals.get(i), values.get(i));\n+                                                    for (int i = 0; i < expKeys.size(); i++)\n+                                                        assertArrayEquals(expVals.get(i), values.get(i));\n \n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n+                                                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+                                                }\n+                                            });\n \n-        Map<Key, Entry> gotRes = metaStorageSvc.getAndPutAll(\n-            EXPECTED_RESULT_MAP.entrySet().stream()\n-                .collect(Collectors.toMap(\n-                    Map.Entry::getKey,\n-                    e -> e.getValue().value())\n-                )\n-        ).get();\n+        Map<Key, Entry> gotRes = metaStorageSvc.getAndPutAll(EXPECTED_RESULT_MAP.entrySet().stream()\n+                                                                                           .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().value()))).get();\n \n         assertEquals(EXPECTED_RESULT_MAP, gotRes);\n     }\n@@ -393,16 +392,17 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRemove() throws Exception {\n-        Key expKey = new Key(new byte[]{1});\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public void remove(byte[] key) {\n-                    assertArrayEquals(expKey.bytes(), key);\n-                }\n-            });\n+\n+    @Test public void testRemove() throws Exception {\n+        Key expKey = new Key(new byte[] {1});\n+\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public void remove(byte[] key) {\n+                                                    assertArrayEquals(expKey.bytes(), key);\n+                                                }\n+                                            });\n \n         metaStorageSvc.remove(expKey).get();\n     }\n@@ -412,23 +412,19 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetAndRemove() throws Exception {\n-        Entry expRes = new DummyEntry(\n-            new Key(new byte[]{1}),\n-            new byte[]{3},\n-            10,\n-            2\n-        );\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry getAndRemove(byte[] key) {\n-                    assertArrayEquals(expRes.key().bytes(), key);\n \n-                    return expRes;\n-                }\n-            });\n+    @Test public void testGetAndRemove() throws Exception {\n+        Entry expRes = new DummyEntry(new Key(new byte[] {1}), new byte[] {3}, 10, 2);\n+\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull Entry getAndRemove(byte[] key) {\n+                                                    assertArrayEquals(expRes.key().bytes(), key);\n+\n+                                                    return expRes;\n+                                                }\n+                                            });\n \n         assertEquals(expRes, metaStorageSvc.getAndRemove(expRes.key()).get());\n     }\n@@ -438,20 +434,22 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRemoveAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public void removeAll(List<byte[]> keys) {\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n \n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n-                }\n-            });\n+    @Test public void testRemoveAll() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public void removeAll(List<byte[]> keys) {\n+                                                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+\n+                                                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream()\n+                                                                                                       .map(Key::bytes)\n+                                                                                                       .collect(Collectors.toList());\n+\n+                                                    for (int i = 0; i < expKeys.size(); i++)\n+                                                        assertArrayEquals(expKeys.get(i), keys.get(i));\n+                                                }\n+                                            });\n \n         metaStorageSvc.removeAll(EXPECTED_RESULT_MAP.keySet()).get();\n     }\n@@ -461,23 +459,25 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testGetAndRemoveAll() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull List<Entry> getAndRemoveAll(List<byte[]> keys) {\n+\n+\n+    @Test public void testGetAndRemoveAll() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull List<Entry> getAndRemoveAll(List<byte[]> keys) {\n                     // Assert keys equality.\n-                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n+                                                    assertEquals(EXPECTED_RESULT_MAP.keySet().size(), keys.size());\n \n-                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream().\n-                        map(Key::bytes).collect(Collectors.toList());\n+                                                    List<byte[]> expKeys = EXPECTED_RESULT_MAP.keySet().stream()\n+                                                                                                       .map(Key::bytes)\n+                                                                                                       .collect(Collectors.toList());\n \n-                    for (int i = 0; i < expKeys.size(); i++)\n-                        assertArrayEquals(expKeys.get(i), keys.get(i));\n+                                                    for (int i = 0; i < expKeys.size(); i++)\n+                                                        assertArrayEquals(expKeys.get(i), keys.get(i));\n \n-                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n-                }\n-            });\n+                                                    return new ArrayList<>(EXPECTED_RESULT_MAP.values());\n+                                                }\n+                                            });\n \n         Map<Key, Entry> gotRes = metaStorageSvc.getAndRemoveAll(EXPECTED_RESULT_MAP.keySet()).get();\n \n@@ -489,42 +489,48 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRangeWitKeyToAndUpperBound() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n \n-        Key expKeyTo = new Key(new byte[]{3});\n+\n+    @Test public void testRangeWitKeyToAndUpperBound() throws Exception {\n+        Key expKeyFrom = new Key(new byte[] {1});\n+\n+        Key expKeyTo = new Key(new byte[] {3});\n \n         long expRevUpperBound = 10;\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+                                                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+\n+                                                    assertArrayEquals(expKeyTo.bytes(), keyTo);\n+\n+                                                    assertEquals(expRevUpperBound, revUpperBound);\n \n-                    assertArrayEquals(expKeyTo.bytes(), keyTo);\n+                                                    return new Cursor<>() {\n \n-                    assertEquals(expRevUpperBound, revUpperBound);\n+                                                        @Override public void close() throws Exception {\n \n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n+                                                        }\n \n-                        }\n \n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return false;\n-                                }\n+                                                        @NotNull\n+                                                        @Override public Iterator<Entry> iterator() {\n+                                                            return new Iterator<>() {\n \n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+                                                                @Override public boolean hasNext() {\n+                                                                    return false;\n+                                                                }\n+\n+\n+                                                                @Override public Entry next() {\n+                                                                    return null;\n+                                                                }\n+                                                            };\n+                                                        }\n+                                                    };\n+                                                }\n+                                            });\n \n         metaStorageSvc.range(expKeyFrom, expKeyTo, expRevUpperBound).close();\n     }\n@@ -534,40 +540,46 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRangeWitKeyTo() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n \n-        Key expKeyTo = new Key(new byte[]{3});\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+    @Test public void testRangeWitKeyTo() throws Exception {\n+        Key expKeyFrom = new Key(new byte[] {1});\n+\n+        Key expKeyTo = new Key(new byte[] {3});\n+\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+                                                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+\n+                                                    assertArrayEquals(expKeyTo.bytes(), keyTo);\n \n-                    assertArrayEquals(expKeyTo.bytes(), keyTo);\n+                                                    assertEquals(LATEST_REVISION, revUpperBound);\n \n-                    assertEquals(LATEST_REVISION, revUpperBound);\n+                                                    return new Cursor<>() {\n \n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n+                                                        @Override public void close() throws Exception {\n \n-                        }\n+                                                        }\n \n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return false;\n-                                }\n \n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+                                                        @NotNull\n+                                                        @Override public Iterator<Entry> iterator() {\n+                                                            return new Iterator<>() {\n+\n+                                                                @Override public boolean hasNext() {\n+                                                                    return false;\n+                                                                }\n+\n+\n+                                                                @Override public Entry next() {\n+                                                                    return null;\n+                                                                }\n+                                                            };\n+                                                        }\n+                                                    };\n+                                                }\n+                                            });\n \n         metaStorageSvc.range(expKeyFrom, expKeyTo).close();\n     }\n@@ -577,38 +589,44 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRangeWitNullAsKeyTo() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n \n-                    assertNull(keyTo);\n+    @Test public void testRangeWitNullAsKeyTo() throws Exception {\n+        Key expKeyFrom = new Key(new byte[] {1});\n+\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+                                                    assertArrayEquals(expKeyFrom.bytes(), keyFrom);\n+\n+                                                    assertNull(keyTo);\n \n-                    assertEquals(LATEST_REVISION, revUpperBound);\n+                                                    assertEquals(LATEST_REVISION, revUpperBound);\n \n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n+                                                    return new Cursor<>() {\n \n-                        }\n+                                                        @Override public void close() throws Exception {\n \n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return false;\n-                                }\n+                                                        }\n \n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+\n+                                                        @NotNull\n+                                                        @Override public Iterator<Entry> iterator() {\n+                                                            return new Iterator<>() {\n+\n+                                                                @Override public boolean hasNext() {\n+                                                                    return false;\n+                                                                }\n+\n+\n+                                                                @Override public Entry next() {\n+                                                                    return null;\n+                                                                }\n+                                                            };\n+                                                        }\n+                                                    };\n+                                                }\n+                                            });\n \n         metaStorageSvc.range(expKeyFrom, null).close();\n     }\n@@ -618,32 +636,38 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRangeHasNext() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n-\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return true;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return null;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+\n+\n+    @Test public void testRangeHasNext() throws Exception {\n+        Key expKeyFrom = new Key(new byte[] {1});\n+\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+                                                    return new Cursor<>() {\n+\n+                                                        @Override public void close() throws Exception {\n+\n+                                                        }\n+\n+\n+                                                        @NotNull\n+                                                        @Override public Iterator<Entry> iterator() {\n+                                                            return new Iterator<>() {\n+\n+                                                                @Override public boolean hasNext() {\n+                                                                    return true;\n+                                                                }\n+\n+\n+                                                                @Override public Entry next() {\n+                                                                    return null;\n+                                                                }\n+                                                            };\n+                                                        }\n+                                                    };\n+                                                }\n+                                            });\n \n         Cursor<Entry> cursor = metaStorageSvc.range(expKeyFrom, null);\n \n@@ -655,30 +679,36 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRangeNext() throws Exception {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    return new Cursor<>() {\n-                        @Override public void close() throws Exception {\n-\n-                        }\n-\n-                        @NotNull @Override public Iterator<Entry> iterator() {\n-                            return new Iterator<>() {\n-                                @Override public boolean hasNext() {\n-                                    return true;\n-                                }\n-\n-                                @Override public Entry next() {\n-                                    return EXPECTED_RESULT_ENTRY;\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+\n+\n+    @Test public void testRangeNext() throws Exception {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+                                                    return new Cursor<>() {\n+\n+                                                        @Override public void close() throws Exception {\n+\n+                                                        }\n+\n+\n+                                                        @NotNull\n+                                                        @Override public Iterator<Entry> iterator() {\n+                                                            return new Iterator<>() {\n+\n+                                                                @Override public boolean hasNext() {\n+                                                                    return true;\n+                                                                }\n+\n+\n+                                                                @Override public Entry next() {\n+                                                                    return EXPECTED_RESULT_ENTRY;\n+                                                                }\n+                                                            };\n+                                                        }\n+                                                    };\n+                                                }\n+                                            });\n \n         Cursor<Entry> cursor = metaStorageSvc.range(EXPECTED_RESULT_ENTRY.key(), null);\n \n@@ -690,18 +720,19 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n-    @Test\n-    public void testRangeClose() throws Exception {\n-        Key expKeyFrom = new Key(new byte[]{1});\n+\n+\n+    @Test public void testRangeClose() throws Exception {\n+        Key expKeyFrom = new Key(new byte[] {1});\n \n         Cursor cursorMock = mock(Cursor.class);\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n-                    return cursorMock;\n-                }\n-            });\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n+                                                    return cursorMock;\n+                                                }\n+                                            });\n \n         Cursor<Entry> cursor = metaStorageSvc.range(expKeyFrom, null);\n \n@@ -710,111 +741,85 @@ public class MetaStorageServiceTest {\n         verify(cursorMock, times(1)).close();\n     }\n \n-    @Test\n-    public void testWatchOnUpdate() throws Exception {\n-        List<WatchEvent> returnedWatchEvents = Arrays.asList(\n-            new WatchEvent(\n-                new DummyEntry(\n-                    new Key(new byte[]{2}),\n-                    new byte[]{20},\n-                    1,\n-                    1\n-                ),\n-                new DummyEntry(\n-                    new Key(new byte[]{2}),\n-                    new byte[]{21},\n-                    2,\n-                    4\n-                )\n-            ),\n-            new WatchEvent(\n-                new DummyEntry(\n-                    new Key(new byte[] {3}),\n-                    new byte[] {20},\n-                    1,\n-                    2\n-                ),\n-                new DummyEntry(\n-                    new Key(new byte[] {3}),\n-                    null,\n-                    2,\n-                    5\n-                )\n-            ),\n-            new WatchEvent(\n-                new DummyEntry(\n-                    new Key(new byte[] {4}),\n-                    new byte[] {20},\n-                    1,\n-                    3\n-                ),\n-                new DummyEntry(\n-                    new Key(new byte[] {4}),\n-                    null,\n-                    3,\n-                    6\n-                )\n-            )\n-        );\n \n-        Key keyFrom = new Key(new byte[]{1});\n+    @Test public void testWatchOnUpdate() throws Exception {\n+        List<WatchEvent> returnedWatchEvents = Arrays.asList(new WatchEvent(\n+                                                                 new DummyEntry(new Key(new byte[] {2}), new byte[] {20}, 1, 1),\n+                                                                 new DummyEntry(new Key(new byte[] {2}), new byte[] {21}, 2, 4)\n+                                                             ), new WatchEvent(\n+                                                                 new DummyEntry(new Key(new byte[] {3}), new byte[] {20}, 1, 2),\n+                                                                 new DummyEntry(new Key(new byte[] {3}), null, 2, 5)\n+                                                             ), new WatchEvent(\n+                                                                 new DummyEntry(new Key(new byte[] {4}), new byte[] {20}, 1, 3),\n+                                                                 new DummyEntry(new Key(new byte[] {4}), null, 3, 6)\n+                                                             ));\n \n-        Key keyTo = new Key(new byte[]{10});\n+        Key keyFrom = new Key(new byte[] {1});\n+\n+        Key keyTo = new Key(new byte[] {10});\n \n         long rev = 2;\n \n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n-                    return new Cursor<>() {\n-                        AtomicInteger retirevedItemCnt = new AtomicInteger(0);\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n+                                                    return new Cursor<>() {\n+\n+                                                        AtomicInteger retirevedItemCnt = new AtomicInteger(0);\n \n-                        @Override public void close() throws Exception {\n+\n+                                                        @Override public void close() throws Exception {\n                             // No-op.\n-                        }\n \n-                        @NotNull @Override public Iterator<WatchEvent> iterator() {\n-                            return new Iterator<WatchEvent>() {\n-                                @Override public boolean hasNext() {\n+                                                        }\n+\n+\n+                                                        @NotNull\n+                                                        @Override public Iterator<WatchEvent> iterator() {\n+                                                            return new Iterator<WatchEvent>() {\n \n-                                    return retirevedItemCnt.get() < returnedWatchEvents.size();\n-                                }\n+                                                                @Override public boolean hasNext() {\n+                                                                    return retirevedItemCnt.get() < returnedWatchEvents.size();\n+                                                                }\n \n-                                @Override public WatchEvent next() {\n-                                    return returnedWatchEvents.get(retirevedItemCnt.getAndIncrement());\n-                                }\n-                            };\n-                        }\n-                    };\n-                }\n-            });\n+\n+                                                                @Override public WatchEvent next() {\n+                                                                    return returnedWatchEvents.get(retirevedItemCnt.getAndIncrement());\n+                                                                }\n+                                                            };\n+                                                        }\n+                                                    };\n+                                                }\n+                                            });\n \n         CountDownLatch latch = new CountDownLatch(1);\n \n         IgniteUuid watchId = metaStorageSvc.watch(keyFrom, keyTo, rev, new WatchListener() {\n-            @Override public boolean onUpdate(@NotNull Iterable<WatchEvent> events) {\n-                List gotEvents = new ArrayList();\n \n-                Iterator<WatchEvent> iter = events.iterator();\n+                                 @Override public boolean onUpdate(@NotNull Iterable<WatchEvent> events) {\n+                                     List gotEvents = new ArrayList();\n \n-                while (iter.hasNext())\n-                    gotEvents.add(iter.next());\n+                                     Iterator<WatchEvent> iter = events.iterator();\n \n-                assertEquals(2, gotEvents.size());\n+                                     while (iter.hasNext()) gotEvents.add(iter.next());\n \n-                assertTrue(gotEvents.contains(returnedWatchEvents.get(0)));\n+                                     assertEquals(2, gotEvents.size());\n \n-                assertTrue(gotEvents.contains(returnedWatchEvents.get(1)));\n+                                     assertTrue(gotEvents.contains(returnedWatchEvents.get(0)));\n \n-                latch.countDown();\n-                return true;\n-            }\n+                                     assertTrue(gotEvents.contains(returnedWatchEvents.get(1)));\n \n-            @Override public void onError(@NotNull Throwable e) {\n+                                     latch.countDown();\n+\n+                                     return true;\n+                                 }\n+\n+\n+                                 @Override public void onError(@NotNull Throwable e) {\n                 // Within given test it's not expected to get here.\n-                fail();\n-            }\n-        }).get();\n+                                     fail();\n+                                 }\n+                             }).get();\n \n         latch.await();\n \n@@ -829,15 +834,16 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n+\n+\n     @Disabled // TODO: IGNITE-14693 Add tests for exception handling logic.\n-    @Test\n-    public void testGetThatThrowsCompactedException() {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key) {\n-                    throw new CompactedException();\n-                }\n-            });\n+    @Test public void testGetThatThrowsCompactedException() {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull Entry get(byte[] key) {\n+                                                    throw new CompactedException();\n+                                                }\n+                                            });\n \n         assertThrows(CompactedException.class, () -> metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n     }\n@@ -847,15 +853,16 @@ public class MetaStorageServiceTest {\n      *\n      * @throws Exception If failed.\n      */\n+\n+\n     @Disabled // TODO: IGNITE-14693 Add tests for exception handling logic.\n-    @Test\n-    public void testGetThatThrowsOperationTimeoutException() {\n-        MetaStorageService metaStorageSvc = prepareMetaStorage(\n-            new AbstractKeyValueStorage() {\n-                @Override public @NotNull Entry get(byte[] key) {\n-                    throw new OperationTimeoutException();\n-                }\n-            });\n+    @Test public void testGetThatThrowsOperationTimeoutException() {\n+        MetaStorageService metaStorageSvc = prepareMetaStorage(new AbstractKeyValueStorage() {\n+\n+                                                @Override public @NotNull Entry get(byte[] key) {\n+                                                    throw new OperationTimeoutException();\n+                                                }\n+                                            });\n \n         assertThrows(OperationTimeoutException.class, () -> metaStorageSvc.get(EXPECTED_RESULT_ENTRY.key()).get());\n     }\n@@ -866,6 +873,8 @@ public class MetaStorageServiceTest {\n      * @param srvs Server nodes of the cluster.\n      * @return The client cluster view.\n      */\n+\n+\n     private ClusterService startClusterNode(String name, int port, List<String> srvs) {\n         var ctx = new ClusterLocalConfiguration(name, port, srvs, SERIALIZATION_REGISTRY);\n \n@@ -882,12 +891,14 @@ public class MetaStorageServiceTest {\n      * @param timeout The timeout in millis.\n      * @return {@code True} if topology size is equal to expected.\n      */\n-    @SuppressWarnings(\"SameParameterValue\")\n-    private boolean waitForTopology(ClusterService cluster, int exp, int timeout) {\n+\n+\n+    @SuppressWarnings(\"SameParameterValue\") private boolean waitForTopology(ClusterService cluster, int exp, int timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n         while (System.currentTimeMillis() < stop) {\n-            if (cluster.topologyService().allMembers().size() >= exp)\n+            if (cluster.topologyService().allMembers()\n+                                         .size() >= exp)\n                 return true;\n \n             try {\n@@ -908,6 +919,8 @@ public class MetaStorageServiceTest {\n      * @param keyValStorageMock {@link KeyValueStorage} mock.\n      * @return {@link MetaStorageService} instance.\n      */\n+\n+\n     private MetaStorageService prepareMetaStorage(KeyValueStorage keyValStorageMock) {\n         metaStorageRaftSrv = new RaftServerImpl(\n             cluster.get(0),\n@@ -917,14 +930,14 @@ public class MetaStorageServiceTest {\n         );\n \n         RaftGroupService metaStorageRaftGrpSvc = new RaftGroupServiceImpl(\n-            METASTORAGE_RAFT_GROUP_NAME,\n-            cluster.get(1),\n-            FACTORY,\n-            10_000,\n-            List.of(new Peer(cluster.get(0).topologyService().localMember())),\n-            true,\n-            200\n-        );\n+                                                     METASTORAGE_RAFT_GROUP_NAME,\n+                                                     cluster.get(1),\n+                                                     FACTORY,\n+                                                     10_000,\n+                                                     List.of(new Peer(cluster.get(0).topologyService()\n+                                                                                    .localMember())),\n+                                                     true,\n+                                                     200);\n \n         return new MetaStorageServiceImpl(metaStorageRaftGrpSvc);\n     }\n@@ -932,19 +945,26 @@ public class MetaStorageServiceTest {\n     /**\n      * Abstract {@link KeyValueStorage}. Used for tests purposes.\n      */\n+\n+\n     @SuppressWarnings(\"JavaAbbreviationUsage\")\n     private abstract class AbstractKeyValueStorage implements KeyValueStorage {\n         /** {@inheritDoc} */\n+\n         @Override public long revision() {\n             return 0;\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public long updateCounter() {\n             return 0;\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Entry get(byte[] key) {\n             fail();\n \n@@ -952,6 +972,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Entry get(byte[] key, long rev) {\n             fail();\n \n@@ -959,6 +981,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Collection<Entry> getAll(List<byte[]> keys) {\n             fail();\n \n@@ -966,6 +990,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Collection<Entry> getAll(List<byte[]> keys, long revUpperBound) {\n             fail();\n \n@@ -973,11 +999,15 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public void put(byte[] key, byte[] value) {\n             fail();\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Entry getAndPut(byte[] key, byte[] value) {\n             fail();\n \n@@ -985,11 +1015,15 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public void putAll(List<byte[]> keys, List<byte[]> values) {\n             fail();\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Collection<Entry> getAndPutAll(List<byte[]> keys, List<byte[]> values) {\n             fail();\n \n@@ -997,11 +1031,15 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public void remove(byte[] key) {\n             fail();\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Entry getAndRemove(byte[] key) {\n             fail();\n \n@@ -1009,11 +1047,15 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public void removeAll(List<byte[]> keys) {\n             fail();\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public @NotNull Collection<Entry> getAndRemoveAll(List<byte[]> keys) {\n             fail();\n \n@@ -1021,17 +1063,17 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n-        @Override public boolean invoke(\n-            Condition condition,\n-            Collection<Operation> success,\n-            Collection<Operation> failure\n-        ) {\n+\n+\n+        @Override public boolean invoke(Condition condition, Collection<Operation> success, Collection<Operation> failure) {\n             fail();\n \n             return false;\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo) {\n             fail();\n \n@@ -1039,6 +1081,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public Cursor<Entry> range(byte[] keyFrom, byte[] keyTo, long revUpperBound) {\n             fail();\n \n@@ -1046,6 +1090,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public Cursor<WatchEvent> watch(byte[] keyFrom, byte[] keyTo, long rev) {\n             fail();\n \n@@ -1053,6 +1099,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public Cursor<WatchEvent> watch(byte[] key, long rev) {\n             fail();\n \n@@ -1060,6 +1108,8 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public Cursor<WatchEvent> watch(Collection<byte[]> keys, long rev) {\n             fail();\n \n@@ -1067,8 +1117,10 @@ public class MetaStorageServiceTest {\n         }\n \n         /** {@inheritDoc} */\n+\n+\n         @Override public void compact() {\n             fail();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 678
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/58/MetaStorageServiceTest.java\nindex c1a433f0d30..40c0c4b79f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/58/MetaStorageServiceTest.java\n@@ -324,8 +324,7 @@ public class MetaStorageServiceTest {\n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n \n-\n-                    // Assert values equality.\n+                        // Assert values equality.\n                     assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n                     List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/58/MetaStorageServiceTest.java\nindex c1a433f0d30..40c0c4b79f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/58/MetaStorageServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/58/MetaStorageServiceTest.java\n@@ -324,8 +324,7 @@ public class MetaStorageServiceTest {\n                     for (int i = 0; i < expKeys.size(); i++)\n                         assertArrayEquals(expKeys.get(i), keys.get(i));\n \n-\n-                    // Assert values equality.\n+                        // Assert values equality.\n                     assertEquals(EXPECTED_RESULT_MAP.values().size(), values.size());\n \n                     List<byte[]> expVals = EXPECTED_RESULT_MAP.values().stream().\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}