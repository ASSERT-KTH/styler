{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "357",
    "information": {
        "errors": [
            {
                "line": "120",
                "column": "80",
                "severity": "warning",
                "message": "'>' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private boolean isInQueueTimeout() {\n    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/357/HighwayServerInvoke.java\nindex bf5ff12394b..2b73b26f2d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/357/HighwayServerInvoke.java\n@@ -117,8 +117,8 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n   }\n \n   private void doRunInExecutor() throws Exception {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "120",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/357/HighwayServerInvoke.java\nindex bf5ff12394b..a12790c9cdf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/357/HighwayServerInvoke.java\n@@ -117,8 +117,7 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n   }\n \n   private void doRunInExecutor() throws Exception {\n@@ -220,4 +219,4 @@ public class HighwayServerInvoke {\n     }\n     return qpsFlowControlReject;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/357/HighwayServerInvoke.java\nindex bf5ff12394b..5cba62d0fe0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/357/HighwayServerInvoke.java\n@@ -19,9 +19,7 @@ package org.apache.servicecomb.transport.highway;\n \n import java.util.Map;\n import java.util.concurrent.RejectedExecutionException;\n-\n import javax.ws.rs.core.Response.Status;\n-\n import org.apache.servicecomb.codec.protobuf.definition.OperationProtobuf;\n import org.apache.servicecomb.codec.protobuf.definition.ProtobufManager;\n import org.apache.servicecomb.codec.protobuf.definition.ResponseRootSerializer;\n@@ -42,7 +40,6 @@ import org.apache.servicecomb.transport.highway.message.RequestHeader;\n import org.apache.servicecomb.transport.highway.message.ResponseHeader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import io.vertx.core.buffer.Buffer;\n \n public class HighwayServerInvoke {\n@@ -80,11 +77,11 @@ public class HighwayServerInvoke {\n       if (operationMeta != null) {\n         microserviceQualifiedName = operationMeta.getMicroserviceQualifiedName();\n       }\n+\n       String msg = String.format(\"decode request error, microserviceQualifiedName=%s, msgId=%d\",\n-          microserviceQualifiedName,\n-          msgId);\n+microserviceQualifiedName,\n+msgId);\n       LOGGER.error(msg, e);\n-\n       return false;\n     }\n   }\n@@ -96,6 +93,8 @@ public class HighwayServerInvoke {\n \n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n     SchemaMeta schemaMeta = microserviceMeta.ensureFindSchemaMeta(header.getSchemaId());\n+\n+\n     this.operationMeta = schemaMeta.ensureFindOperation(header.getOperationName());\n     this.bodyBuffer = bodyBuffer;\n   }\n@@ -105,29 +104,27 @@ public class HighwayServerInvoke {\n       if (isInQueueTimeout()) {\n         throw new InvocationException(Status.INTERNAL_SERVER_ERROR, \"Timeout when processing the request.\");\n       }\n+\n       doRunInExecutor();\n     } catch (Throwable e) {\n       String msg = String.format(\"handle request error, %s, msgId=%d\",\n-          operationMeta.getMicroserviceQualifiedName(),\n-          msgId);\n+operationMeta.getMicroserviceQualifiedName(),\n+msgId);\n       LOGGER.error(msg, e);\n-\n       sendResponse(header.getContext(), Response.providerFailResp(e));\n     }\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n   }\n \n   private void doRunInExecutor() throws Exception {\n     invocation.onExecuteStart();\n-\n     invocation.getInvocationStageTrace().startServerFiltersRequest();\n     HighwayCodec.decodeRequest(invocation, header, operationProtobuf, bodyBuffer);\n-    invocation.getHandlerContext().put(Const.REMOTE_ADDRESS, this.connection.getNetSocket().remoteAddress());\n-\n+    invocation.getHandlerContext().put(Const.REMOTE_ADDRESS, this.connection.getNetSocket()\n+                                                                 .remoteAddress());\n     invocation.getInvocationStageTrace().startHandlersRequest();\n     invocation.next(response -> sendResponse(invocation.getContext(), response));\n   }\n@@ -154,8 +151,8 @@ public class HighwayServerInvoke {\n     } catch (Exception e) {\n       // keep highway performance and simple, this encoding/decoding error not need handle by client\n       String msg = String.format(\"encode response failed, %s, msgId=%d\",\n-          invocation.getOperationMeta().getMicroserviceQualifiedName(),\n-          msgId);\n+invocation.getOperationMeta().getMicroserviceQualifiedName(),\n+msgId);\n       LOGGER.error(msg, e);\n     } finally {\n       if (invocation != null) {\n@@ -167,20 +164,18 @@ public class HighwayServerInvoke {\n   /**\n    * start time in queue.\n    */\n+\n   public void execute() {\n     try {\n-      invocation = InvocationFactory.forProvider(endpoint,\n-          operationMeta,\n-          null);\n+      invocation = InvocationFactory.forProvider(endpoint, operationMeta, null);\n       operationProtobuf = ProtobufManager.getOrCreateOperation(invocation);\n-      HighwayTransportContext transportContext = new HighwayTransportContext()\n-          .setConnection(connection)\n-          .setMsgId(msgId)\n-          .setHeader(header)\n-          .setBodyBuffer(bodyBuffer)\n-          .setOperationProtobuf(ProtobufManager.getOrCreateOperation(invocation));\n-      invocation.setTransportContext(transportContext);\n \n+      HighwayTransportContext transportContext = new HighwayTransportContext().setConnection(connection)\n+                                                                              .setMsgId(msgId)\n+                                                                              .setHeader(header)\n+                                                                              .setBodyBuffer(bodyBuffer)\n+                                                                              .setOperationProtobuf(ProtobufManager.getOrCreateOperation(invocation));\n+      invocation.setTransportContext(transportContext);\n       invocation.onStart(null, start);\n       invocation.getInvocationStageTrace().startSchedule();\n \n@@ -196,8 +191,11 @@ public class HighwayServerInvoke {\n       operationMeta.getExecutor().execute(this::runInExecutor);\n     } catch (Throwable e) {\n       if (e instanceof RejectedExecutionException) {\n-        LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n+        LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\",\n+e.getMessage(),\n+e.getClass().getName());\n       }\n+\n       sendResponse(header.getContext(), Response.providerFailResp(e));\n     }\n   }\n@@ -208,7 +206,8 @@ public class HighwayServerInvoke {\n     Handler providerQpsFlowControlHandler = operationMeta.getProviderQpsFlowControlHandler();\n     if (null != providerQpsFlowControlHandler) {\n       try {\n-        providerQpsFlowControlHandler.handle(invocation, response -> {\n+        providerQpsFlowControlHandler.handle(invocation,\n+response -> {\n           qpsFlowControlReject.value = true;\n           sendResponse(header.getContext(), response);\n         });\n@@ -220,4 +219,4 @@ public class HighwayServerInvoke {\n     }\n     return qpsFlowControlReject;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/357/HighwayServerInvoke.java\nindex bf5ff12394b..2b73b26f2d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/357/HighwayServerInvoke.java\n@@ -117,8 +117,8 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n   }\n \n   private void doRunInExecutor() throws Exception {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/357/HighwayServerInvoke.java\nindex bf5ff12394b..2b73b26f2d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/357/HighwayServerInvoke.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/357/HighwayServerInvoke.java\n@@ -117,8 +117,8 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n   }\n \n   private void doRunInExecutor() throws Exception {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}