{
    "project_name": "apache-ignite-3",
    "error_id": "74",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    extends BytecodeExpression {\n    private final BytecodeExpression instance;\n    private final OpCode returnOpCode;\n\n    ReturnBytecodeExpression(BytecodeExpression instance) {\n        super(type(void.class));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/74/ReturnBytecodeExpression.java\nindex 8066509c5ea..cc25334fbd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/74/ReturnBytecodeExpression.java\n@@ -26,6 +26,7 @@ import static java.util.Objects.requireNonNull;\n class ReturnBytecodeExpression\n     extends BytecodeExpression {\n     private final BytecodeExpression instance;\n+\n     private final OpCode returnOpCode;\n \n     ReturnBytecodeExpression(BytecodeExpression instance) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/74/ReturnBytecodeExpression.java\nindex 8066509c5ea..dbc087378b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/74/ReturnBytecodeExpression.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.expression;\n \n import com.facebook.presto.bytecode.BytecodeBlock;\n@@ -25,58 +26,58 @@ import static java.util.Objects.requireNonNull;\n \n class ReturnBytecodeExpression\n     extends BytecodeExpression {\n-    private final BytecodeExpression instance;\n-    private final OpCode returnOpCode;\n+  private final BytecodeExpression instance;\n \n-    ReturnBytecodeExpression(BytecodeExpression instance) {\n-        super(type(void.class));\n-        this.instance = requireNonNull(instance, \"instance is null\");\n-        this.returnOpCode = returnOpCode(instance.getType());\n-    }\n+  private final OpCode returnOpCode;\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n-        return new BytecodeBlock()\n-            .append(instance.getBytecode(generationContext))\n-            .append(returnOpCode);\n-    }\n+  ReturnBytecodeExpression(BytecodeExpression instance) {\n+    super(type(void.class));\n+    this.instance = requireNonNull(instance, \"instance is null\");\n+    this.returnOpCode = returnOpCode(instance.getType());\n+  }\n \n-    @Override\n-    protected String formatOneLine() {\n-        return \"return \" + instance;\n-    }\n+  @Override\n+  public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+    return new BytecodeBlock()\n+        .append(instance.getBytecode(generationContext))\n+        .append(returnOpCode);\n+  }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n-        return List.of(instance);\n-    }\n+  @Override\n+  protected String formatOneLine() {\n+    return \"return \" + instance;\n+  }\n+\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.of(instance);\n+  }\n \n-    private static OpCode returnOpCode(ParameterizedType componentType) {\n-        Class<?> primitiveType = componentType.getPrimitiveType();\n-        if (primitiveType != null) {\n-            if (primitiveType == byte.class ||\n-                primitiveType == boolean.class ||\n-                primitiveType == char.class ||\n-                primitiveType == short.class ||\n-                primitiveType == int.class) {\n-                return OpCode.IRETURN;\n-            }\n-            if (primitiveType == long.class) {\n-                return OpCode.LRETURN;\n-            }\n-            if (primitiveType == float.class) {\n-                return OpCode.FRETURN;\n-            }\n-            if (primitiveType == double.class) {\n-                return OpCode.DRETURN;\n-            }\n-            if (primitiveType == void.class) {\n-                return OpCode.RETURN;\n-            }\n-            throw new IllegalArgumentException(\"Unsupported array type: \" + primitiveType);\n-        }\n-        else {\n-            return OpCode.ARETURN;\n-        }\n+  private static OpCode returnOpCode(ParameterizedType componentType) {\n+    Class<?> primitiveType = componentType.getPrimitiveType();\n+    if (primitiveType != null) {\n+      if (primitiveType == byte.class ||\n+          primitiveType == boolean.class ||\n+          primitiveType == char.class ||\n+          primitiveType == short.class ||\n+          primitiveType == int.class) {\n+        return OpCode.IRETURN;\n+      }\n+      if (primitiveType == long.class) {\n+        return OpCode.LRETURN;\n+      }\n+      if (primitiveType == float.class) {\n+        return OpCode.FRETURN;\n+      }\n+      if (primitiveType == double.class) {\n+        return OpCode.DRETURN;\n+      }\n+      if (primitiveType == void.class) {\n+        return OpCode.RETURN;\n+      }\n+      throw new IllegalArgumentException(\"Unsupported array type: \" + primitiveType);\n+    } else {\n+      return OpCode.ARETURN;\n     }\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/74/ReturnBytecodeExpression.java\nindex 8066509c5ea..b2a63bea6c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/74/ReturnBytecodeExpression.java\n@@ -79,4 +79,4 @@ class ReturnBytecodeExpression\n             return OpCode.ARETURN;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "42",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "48",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "58",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/74/ReturnBytecodeExpression.java\nindex 8066509c5ea..aee844484d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/74/ReturnBytecodeExpression.java\n@@ -23,42 +23,43 @@ import java.util.List;\n import static com.facebook.presto.bytecode.ParameterizedType.type;\n import static java.util.Objects.requireNonNull;\n \n-class ReturnBytecodeExpression\n-    extends BytecodeExpression {\n+class ReturnBytecodeExpression extends BytecodeExpression {\n+\n     private final BytecodeExpression instance;\n+\n+\n     private final OpCode returnOpCode;\n \n+\n     ReturnBytecodeExpression(BytecodeExpression instance) {\n-        super(type(void.class));\n-        this.instance = requireNonNull(instance, \"instance is null\");\n-        this.returnOpCode = returnOpCode(instance.getType());\n-    }\n+                                                              super(type(void.class));\n+\n+                                                              this.instance = requireNonNull(instance, \"instance is null\");\n+                                                              this.returnOpCode = returnOpCode(instance.getType());\n+                                                          }\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n-        return new BytecodeBlock()\n-            .append(instance.getBytecode(generationContext))\n-            .append(returnOpCode);\n+\n+    @Override public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+        return new BytecodeBlock().append(instance.getBytecode(generationContext))\n+                                  .append(returnOpCode);\n     }\n \n-    @Override\n-    protected String formatOneLine() {\n+\n+    @Override protected String formatOneLine() {\n         return \"return \" + instance;\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.of(instance);\n     }\n \n+\n     private static OpCode returnOpCode(ParameterizedType componentType) {\n         Class<?> primitiveType = componentType.getPrimitiveType();\n+\n         if (primitiveType != null) {\n-            if (primitiveType == byte.class ||\n-                primitiveType == boolean.class ||\n-                primitiveType == char.class ||\n-                primitiveType == short.class ||\n-                primitiveType == int.class) {\n+            if (primitiveType == byte.class || primitiveType == boolean.class || primitiveType == char.class || primitiveType == short.class || primitiveType == int.class) {\n                 return OpCode.IRETURN;\n             }\n             if (primitiveType == long.class) {\n@@ -73,10 +74,11 @@ class ReturnBytecodeExpression\n             if (primitiveType == void.class) {\n                 return OpCode.RETURN;\n             }\n+\n             throw new IllegalArgumentException(\"Unsupported array type: \" + primitiveType);\n         }\n         else {\n             return OpCode.ARETURN;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/74/ReturnBytecodeExpression.java\nindex 8066509c5ea..cc25334fbd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/74/ReturnBytecodeExpression.java\n@@ -26,6 +26,7 @@ import static java.util.Objects.requireNonNull;\n class ReturnBytecodeExpression\n     extends BytecodeExpression {\n     private final BytecodeExpression instance;\n+\n     private final OpCode returnOpCode;\n \n     ReturnBytecodeExpression(BytecodeExpression instance) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/74/ReturnBytecodeExpression.java\nindex 8066509c5ea..cc25334fbd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/74/ReturnBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/74/ReturnBytecodeExpression.java\n@@ -26,6 +26,7 @@ import static java.util.Objects.requireNonNull;\n class ReturnBytecodeExpression\n     extends BytecodeExpression {\n     private final BytecodeExpression instance;\n+\n     private final OpCode returnOpCode;\n \n     ReturnBytecodeExpression(BytecodeExpression instance) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}