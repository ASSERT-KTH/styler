{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2802",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "190",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "12",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "204",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "208",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "283",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "288",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2802/BatchingMultipleIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2802/BatchingMultipleIndexPopulator.java\nindex 68c8d6e4622..a6a0389f676 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2802/BatchingMultipleIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2802/BatchingMultipleIndexPopulator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.util.Collection;\n@@ -56,248 +57,241 @@ import static org.neo4j.helpers.NamedThreadFactory.daemon;\n  */\n public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n {\n-    static final String TASK_QUEUE_SIZE_NAME = \"task_queue_size\";\n-    static final String AWAIT_TIMEOUT_MINUTES_NAME = \"await_timeout_minutes\";\n-    private static final String MAXIMUM_NUMBER_OF_WORKERS_NAME = \"population_workers_maximum\";\n+  static final String TASK_QUEUE_SIZE_NAME = \"task_queue_size\";\n+  static final String AWAIT_TIMEOUT_MINUTES_NAME = \"await_timeout_minutes\";\n+  private static final String MAXIMUM_NUMBER_OF_WORKERS_NAME = \"population_workers_maximum\";\n \n-    private static final String EOL = System.lineSeparator();\n-    private static final String FLUSH_THREAD_NAME_PREFIX = \"Index Population Flush Thread\";\n+  private static final String EOL = System.lineSeparator();\n+  private static final String FLUSH_THREAD_NAME_PREFIX = \"Index Population Flush Thread\";\n \n-    private final int MAXIMUM_NUMBER_OF_WORKERS = FeatureToggles.getInteger( getClass(), MAXIMUM_NUMBER_OF_WORKERS_NAME,\n-            Runtime.getRuntime().availableProcessors() - 1 );\n-    private final int TASK_QUEUE_SIZE = FeatureToggles.getInteger( getClass(), TASK_QUEUE_SIZE_NAME,\n-            getNumberOfPopulationWorkers() * 2 );\n-    private final int AWAIT_TIMEOUT_MINUTES = FeatureToggles.getInteger( getClass(), AWAIT_TIMEOUT_MINUTES_NAME, 30 );\n+  private final int MAXIMUM_NUMBER_OF_WORKERS = FeatureToggles.getInteger(getClass(), MAXIMUM_NUMBER_OF_WORKERS_NAME,\n+      Runtime.getRuntime().availableProcessors() - 1);\n+  private final int TASK_QUEUE_SIZE = FeatureToggles.getInteger(getClass(), TASK_QUEUE_SIZE_NAME,\n+      getNumberOfPopulationWorkers() * 2);\n+  private final int AWAIT_TIMEOUT_MINUTES = FeatureToggles.getInteger(getClass(), AWAIT_TIMEOUT_MINUTES_NAME, 30);\n \n-    private final AtomicLong activeTasks = new AtomicLong();\n-    private final ExecutorService executor;\n+  private final AtomicLong activeTasks = new AtomicLong();\n+  private final ExecutorService executor;\n \n-    /**\n-     * Creates a new multi-threaded populator for the given store view.\n-     *\n-     * @param storeView the view of the store as a visitable of nodes\n-     * @param logProvider the log provider\n-     * @param schemaState the schema state\n-     */\n-    BatchingMultipleIndexPopulator( IndexStoreView storeView, LogProvider logProvider, SchemaState schemaState )\n-    {\n-        super( storeView, logProvider, schemaState );\n-        this.executor = createThreadPool();\n-    }\n+  /**\n+   * Creates a new multi-threaded populator for the given store view.\n+   *\n+   * @param storeView   the view of the store as a visitable of nodes\n+   * @param logProvider the log provider\n+   * @param schemaState the schema state\n+   */\n+  BatchingMultipleIndexPopulator(IndexStoreView storeView, LogProvider logProvider, SchemaState schemaState)\n+  {\n+    super(storeView, logProvider, schemaState);\n+    this.executor = createThreadPool();\n+  }\n \n-    /**\n-     * Creates a new multi-threaded populator with the specified thread pool.\n-     * <p>\n-     * <b>NOTE:</b> for testing only.\n-     *\n-     * @param storeView the view of the store as a visitable of nodes\n-     * @param executor the thread pool to use for batched index insertions\n-     * @param logProvider the log provider\n-     * @param schemaState the schema state\n-     */\n-    BatchingMultipleIndexPopulator( IndexStoreView storeView, ExecutorService executor, LogProvider logProvider,\n-                                    SchemaState schemaState )\n-    {\n-        super( storeView, logProvider, schemaState );\n-        this.executor = executor;\n-    }\n+  /**\n+   * Creates a new multi-threaded populator with the specified thread pool.\n+   * <p>\n+   * <b>NOTE:</b> for testing only.\n+   *\n+   * @param storeView   the view of the store as a visitable of nodes\n+   * @param executor    the thread pool to use for batched index insertions\n+   * @param logProvider the log provider\n+   * @param schemaState the schema state\n+   */\n+  BatchingMultipleIndexPopulator(IndexStoreView storeView, ExecutorService executor, LogProvider logProvider,\n+                                 SchemaState schemaState)\n+  {\n+    super(storeView, logProvider, schemaState);\n+    this.executor = executor;\n+  }\n \n-    @Override\n-    public StoreScan<IndexPopulationFailedKernelException> indexAllNodes()\n-    {\n-        StoreScan<IndexPopulationFailedKernelException> storeScan = super.indexAllNodes();\n-        return new BatchingStoreScan<>( storeScan );\n-    }\n+  @Override\n+  public StoreScan<IndexPopulationFailedKernelException> indexAllNodes()\n+  {\n+    StoreScan<IndexPopulationFailedKernelException> storeScan = super.indexAllNodes();\n+    return new BatchingStoreScan<>(storeScan);\n+  }\n \n-    @Override\n-    protected void populateFromQueue( long currentlyIndexedNodeId )\n-    {\n-        log.debug( \"Populating from queue.\" + EOL + this );\n-        flushAll();\n-        awaitCompletion();\n-        super.populateFromQueue( currentlyIndexedNodeId );\n-        log.debug( \"Drained queue and all batched updates.\" + EOL + this );\n-    }\n+  @Override\n+  protected void populateFromQueue(long currentlyIndexedNodeId)\n+  {\n+    log.debug(\"Populating from queue.\" + EOL + this);\n+    flushAll();\n+    awaitCompletion();\n+    super.populateFromQueue(currentlyIndexedNodeId);\n+    log.debug(\"Drained queue and all batched updates.\" + EOL + this);\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        String updatesString = populations\n-                .stream()\n-                .map( population -> population.batchedUpdates.size() + \" updates\" )\n-                .collect( joining( \", \", \"[\", \"]\" ) );\n+  @Override\n+  public String toString()\n+  {\n+    String updatesString = populations\n+        .stream()\n+        .map(population -> population.batchedUpdates.size() + \" updates\")\n+        .collect(joining(\", \", \"[\", \"]\"));\n \n-        return \"BatchingMultipleIndexPopulator{activeTasks=\" + activeTasks + \", executor=\" + executor + \", \" +\n-               \"batchedUpdates = \" + updatesString + \", queuedUpdates = \" + queue.size() + \"}\";\n-    }\n+    return \"BatchingMultipleIndexPopulator{activeTasks=\" + activeTasks + \", executor=\" + executor + \", \" +\n+        \"batchedUpdates = \" + updatesString + \", queuedUpdates = \" + queue.size() + \"}\";\n+  }\n \n-    /**\n-     * Awaits {@link #AWAIT_TIMEOUT_MINUTES} minutes for all previously submitted batch-flush tasks to complete.\n-     * Restores the interrupted status and exits normally when interrupted during waiting.\n-     *\n-     * @throws IllegalStateException if tasks did not complete in {@link #AWAIT_TIMEOUT_MINUTES} minutes.\n-     */\n-    private void awaitCompletion()\n+  /**\n+   * Awaits {@link #AWAIT_TIMEOUT_MINUTES} minutes for all previously submitted batch-flush tasks to complete.\n+   * Restores the interrupted status and exits normally when interrupted during waiting.\n+   *\n+   * @throws IllegalStateException if tasks did not complete in {@link #AWAIT_TIMEOUT_MINUTES} minutes.\n+   */\n+  private void awaitCompletion()\n+  {\n+    try\n     {\n-        try\n-        {\n-            log.debug( \"Waiting \" + AWAIT_TIMEOUT_MINUTES + \" minutes for all submitted and active \" +\n-                       \"flush tasks to complete.\" + EOL + this );\n+      log.debug(\"Waiting \" + AWAIT_TIMEOUT_MINUTES + \" minutes for all submitted and active \" +\n+          \"flush tasks to complete.\" + EOL + this);\n \n-            BooleanSupplier allSubmittedTasksCompleted = () -> activeTasks.get() == 0;\n-            Predicates.await( allSubmittedTasksCompleted, AWAIT_TIMEOUT_MINUTES, TimeUnit.MINUTES );\n-        }\n-        catch ( TimeoutException e )\n-        {\n-            handleTimeout();\n-        }\n-    }\n-\n-    /**\n-     * Insert the given batch of updates into the index defined by the given {@link IndexPopulation}.\n-     *\n-     * @param population the index population.\n-     */\n-    @Override\n-    protected void flush( IndexPopulation population )\n+      BooleanSupplier allSubmittedTasksCompleted = () -> activeTasks.get() == 0;\n+      Predicates.await(allSubmittedTasksCompleted, AWAIT_TIMEOUT_MINUTES, TimeUnit.MINUTES);\n+    } catch (TimeoutException e)\n     {\n-        activeTasks.incrementAndGet();\n-        Collection<IndexEntryUpdate<?>> batch = population.takeCurrentBatch();\n-\n-        executor.execute( () ->\n-        {\n-            try\n-            {\n-                population.populator.add( batch );\n-            }\n-            catch ( Throwable failure )\n-            {\n-                fail( population, failure );\n-            }\n-            finally\n-            {\n-                activeTasks.decrementAndGet();\n-            }\n-        } );\n+      handleTimeout();\n     }\n+  }\n \n-    /**\n-     * Shuts down the executor waiting {@link #AWAIT_TIMEOUT_MINUTES} minutes for it's termination.\n-     * Restores the interrupted status and exits normally when interrupted during waiting.\n-     *\n-     * @param now <code>true</code> if {@link ExecutorService#shutdownNow()} should be used and <code>false</code> if\n-     * {@link ExecutorService#shutdown()} should be used.\n-     * @throws IllegalStateException if tasks did not complete in {@link #AWAIT_TIMEOUT_MINUTES} minutes.\n-     */\n-    private void shutdownExecutor( boolean now )\n-    {\n-        log.info( (now ? \"Forcefully shutting\" : \"Shutting\") + \" down executor.\" + EOL + this );\n-        if ( now )\n-        {\n-            executor.shutdownNow();\n-        }\n-        else\n-        {\n-            executor.shutdown();\n-        }\n+  /**\n+   * Insert the given batch of updates into the index defined by the given {@link IndexPopulation}.\n+   *\n+   * @param population the index population.\n+   */\n+  @Override\n+  protected void flush(IndexPopulation population)\n+  {\n+    activeTasks.incrementAndGet();\n+    Collection<IndexEntryUpdate<?>> batch = population.takeCurrentBatch();\n \n-        try\n-        {\n-            boolean tasksCompleted = executor.awaitTermination( AWAIT_TIMEOUT_MINUTES, TimeUnit.MINUTES );\n-            if ( !tasksCompleted )\n-            {\n-                handleTimeout();\n-            }\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            handleInterrupt();\n-        }\n-    }\n-\n-    private void handleTimeout()\n+    executor.execute(() ->\n     {\n-        throw new IllegalStateException( \"Index population tasks were not able to complete in \" +\n-                                         AWAIT_TIMEOUT_MINUTES + \" minutes.\" + EOL + this + EOL + allStackTraces() );\n-    }\n+      try\n+      {\n+        population.populator.add(batch);\n+      } catch (Throwable failure)\n+      {\n+        fail(population, failure);\n+      } finally\n+      {\n+        activeTasks.decrementAndGet();\n+      }\n+    });\n+  }\n \n-    private void handleInterrupt()\n+  /**\n+   * Shuts down the executor waiting {@link #AWAIT_TIMEOUT_MINUTES} minutes for it's termination.\n+   * Restores the interrupted status and exits normally when interrupted during waiting.\n+   *\n+   * @param now <code>true</code> if {@link ExecutorService#shutdownNow()} should be used and <code>false</code> if\n+   *            {@link ExecutorService#shutdown()} should be used.\n+   * @throws IllegalStateException if tasks did not complete in {@link #AWAIT_TIMEOUT_MINUTES} minutes.\n+   */\n+  private void shutdownExecutor(boolean now)\n+  {\n+    log.info((now ? \"Forcefully shutting\" : \"Shutting\") + \" down executor.\" + EOL + this);\n+    if (now)\n     {\n-        Thread.currentThread().interrupt();\n-        log.warn( \"Interrupted while waiting for index population tasks to complete.\" + EOL + this );\n-    }\n-\n-    private ExecutorService createThreadPool()\n+      executor.shutdownNow();\n+    } else\n     {\n-        int threads = getNumberOfPopulationWorkers();\n-        BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>( TASK_QUEUE_SIZE );\n-        ThreadFactory threadFactory = daemon( FLUSH_THREAD_NAME_PREFIX );\n-        RejectedExecutionHandler rejectedExecutionHandler = new ThreadPoolExecutor.CallerRunsPolicy();\n-        return new ThreadPoolExecutor( threads, threads, 0L, TimeUnit.MILLISECONDS, workQueue, threadFactory,\n-                rejectedExecutionHandler );\n+      executor.shutdown();\n     }\n \n-    /**\n-     * Finds all threads and corresponding stack traces which can potentially cause the\n-     * {@link ExecutorService executor} to not terminate in {@link #AWAIT_TIMEOUT_MINUTES} minutes.\n-     *\n-     * @return thread dump as string.\n-     */\n-    private static String allStackTraces()\n+    try\n+    {\n+      boolean tasksCompleted = executor.awaitTermination(AWAIT_TIMEOUT_MINUTES, TimeUnit.MINUTES);\n+      if (!tasksCompleted)\n+      {\n+        handleTimeout();\n+      }\n+    } catch (InterruptedException e)\n     {\n-        return Thread.getAllStackTraces()\n-                .entrySet()\n-                .stream()\n-                .map( entry -> Exceptions.stringify( entry.getKey(), entry.getValue() ) )\n-                .collect( joining() );\n+      handleInterrupt();\n     }\n+  }\n+\n+  private void handleTimeout()\n+  {\n+    throw new IllegalStateException(\"Index population tasks were not able to complete in \" +\n+        AWAIT_TIMEOUT_MINUTES + \" minutes.\" + EOL + this + EOL + allStackTraces());\n+  }\n+\n+  private void handleInterrupt()\n+  {\n+    Thread.currentThread().interrupt();\n+    log.warn(\"Interrupted while waiting for index population tasks to complete.\" + EOL + this);\n+  }\n+\n+  private ExecutorService createThreadPool()\n+  {\n+    int threads = getNumberOfPopulationWorkers();\n+    BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>(TASK_QUEUE_SIZE);\n+    ThreadFactory threadFactory = daemon(FLUSH_THREAD_NAME_PREFIX);\n+    RejectedExecutionHandler rejectedExecutionHandler = new ThreadPoolExecutor.CallerRunsPolicy();\n+    return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, workQueue, threadFactory,\n+        rejectedExecutionHandler);\n+  }\n+\n+  /**\n+   * Finds all threads and corresponding stack traces which can potentially cause the\n+   * {@link ExecutorService executor} to not terminate in {@link #AWAIT_TIMEOUT_MINUTES} minutes.\n+   *\n+   * @return thread dump as string.\n+   */\n+  private static String allStackTraces()\n+  {\n+    return Thread.getAllStackTraces()\n+        .entrySet()\n+        .stream()\n+        .map(entry -> Exceptions.stringify(entry.getKey(), entry.getValue()))\n+        .collect(joining());\n+  }\n \n-    /**\n-     * Calculate number of workers that will perform index population\n-     *\n-     * @return number of threads that will be used for index population\n-     */\n-    private int getNumberOfPopulationWorkers()\n+  /**\n+   * Calculate number of workers that will perform index population\n+   *\n+   * @return number of threads that will be used for index population\n+   */\n+  private int getNumberOfPopulationWorkers()\n+  {\n+    return Math.max(2, MAXIMUM_NUMBER_OF_WORKERS);\n+  }\n+\n+  /**\n+   * A delegating {@link StoreScan} implementation that flushes all pending updates and terminates the executor after\n+   * the delegate store scan completes.\n+   *\n+   * @param <E> type of the exception this store scan might get.\n+   */\n+  private class BatchingStoreScan<E extends Exception> extends DelegatingStoreScan<E>\n+  {\n+    BatchingStoreScan(StoreScan<E> delegate)\n     {\n-        return Math.max( 2, MAXIMUM_NUMBER_OF_WORKERS );\n+      super(delegate);\n     }\n \n-    /**\n-     * A delegating {@link StoreScan} implementation that flushes all pending updates and terminates the executor after\n-     * the delegate store scan completes.\n-     *\n-     * @param <E> type of the exception this store scan might get.\n-     */\n-    private class BatchingStoreScan<E extends Exception> extends DelegatingStoreScan<E>\n+    @Override\n+    public void run() throws E\n     {\n-        BatchingStoreScan( StoreScan<E> delegate )\n+      try\n+      {\n+        super.run();\n+        log.info(\"Completed node store scan. \" +\n+            \"Flushing all pending updates.\" + EOL + BatchingMultipleIndexPopulator.this);\n+        flushAll();\n+      } catch (Throwable scanError)\n+      {\n+        try\n         {\n-            super( delegate );\n-        }\n-\n-        @Override\n-        public void run() throws E\n+          shutdownExecutor(true);\n+        } catch (Throwable error)\n         {\n-            try\n-            {\n-                super.run();\n-                log.info( \"Completed node store scan. \" +\n-                          \"Flushing all pending updates.\" + EOL + BatchingMultipleIndexPopulator.this );\n-                flushAll();\n-            }\n-            catch ( Throwable scanError )\n-            {\n-                try\n-                {\n-                    shutdownExecutor( true );\n-                }\n-                catch ( Throwable error )\n-                {\n-                    scanError.addSuppressed( error );\n-                }\n-                throw scanError;\n-            }\n-            shutdownExecutor( false );\n+          scanError.addSuppressed(error);\n         }\n+        throw scanError;\n+      }\n+      shutdownExecutor(false);\n     }\n+  }\n }\n",
            "diff_size": 299
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2802/BatchingMultipleIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2802/BatchingMultipleIndexPopulator.java\nindex 68c8d6e4622..c80ac87a7e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2802/BatchingMultipleIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2802/BatchingMultipleIndexPopulator.java\n@@ -62,12 +62,11 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n \n     private static final String EOL = System.lineSeparator();\n     private static final String FLUSH_THREAD_NAME_PREFIX = \"Index Population Flush Thread\";\n-\n-    private final int MAXIMUM_NUMBER_OF_WORKERS = FeatureToggles.getInteger( getClass(), MAXIMUM_NUMBER_OF_WORKERS_NAME,\n+private final int MAXIMUM_NUMBER_OF_WORKERS = FeatureToggles.getInteger( getClass(), MAXIMUM_NUMBER_OF_WORKERS_NAME,\n             Runtime.getRuntime().availableProcessors() - 1 );\n-    private final int TASK_QUEUE_SIZE = FeatureToggles.getInteger( getClass(), TASK_QUEUE_SIZE_NAME,\n+private final int TASK_QUEUE_SIZE = FeatureToggles.getInteger( getClass(), TASK_QUEUE_SIZE_NAME,\n             getNumberOfPopulationWorkers() * 2 );\n-    private final int AWAIT_TIMEOUT_MINUTES = FeatureToggles.getInteger( getClass(), AWAIT_TIMEOUT_MINUTES_NAME, 30 );\n+private final int AWAIT_TIMEOUT_MINUTES = FeatureToggles.getInteger( getClass(), AWAIT_TIMEOUT_MINUTES_NAME, 30 );\n \n     private final AtomicLong activeTasks = new AtomicLong();\n     private final ExecutorService executor;\n@@ -95,9 +94,8 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n      * @param logProvider the log provider\n      * @param schemaState the schema state\n      */\n-    BatchingMultipleIndexPopulator( IndexStoreView storeView, ExecutorService executor, LogProvider logProvider,\n-                                    SchemaState schemaState )\n-    {\n+    BatchingMultipleIndexPopulator( IndexStoreView storeView, ExecutorService executor, LogProvider logProvider, SchemaState schemaState )\n+{\n         super( storeView, logProvider, schemaState );\n         this.executor = executor;\n     }\n@@ -122,13 +120,8 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n     @Override\n     public String toString()\n     {\n-        String updatesString = populations\n-                .stream()\n-                .map( population -> population.batchedUpdates.size() + \" updates\" )\n-                .collect( joining( \", \", \"[\", \"]\" ) );\n-\n-        return \"BatchingMultipleIndexPopulator{activeTasks=\" + activeTasks + \", executor=\" + executor + \", \" +\n-               \"batchedUpdates = \" + updatesString + \", queuedUpdates = \" + queue.size() + \"}\";\n+        String updatesString = populations.stream().map( population -> population.batchedUpdates.size() + \" updates\" ).collect( joining( \", \", \"[\", \"]\" ) );\n+return \"BatchingMultipleIndexPopulator{activeTasks=\" + activeTasks + \", executor=\" + executor + \", \" + \"batchedUpdates = \" + updatesString + \", queuedUpdates = \" + queue.size() + \"}\";\n     }\n \n     /**\n@@ -141,10 +134,8 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n     {\n         try\n         {\n-            log.debug( \"Waiting \" + AWAIT_TIMEOUT_MINUTES + \" minutes for all submitted and active \" +\n-                       \"flush tasks to complete.\" + EOL + this );\n-\n-            BooleanSupplier allSubmittedTasksCompleted = () -> activeTasks.get() == 0;\n+            log.debug( \"Waiting \" + AWAIT_TIMEOUT_MINUTES + \" minutes for all submitted and active \" + \"flush tasks to complete.\" + EOL + this );\n+BooleanSupplier allSubmittedTasksCompleted = () -> activeTasks.get() == 0;\n             Predicates.await( allSubmittedTasksCompleted, AWAIT_TIMEOUT_MINUTES, TimeUnit.MINUTES );\n         }\n         catch ( TimeoutException e )\n@@ -163,8 +154,7 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n     {\n         activeTasks.incrementAndGet();\n         Collection<IndexEntryUpdate<?>> batch = population.takeCurrentBatch();\n-\n-        executor.execute( () ->\n+executor.execute( () ->\n         {\n             try\n             {\n@@ -191,7 +181,7 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n      */\n     private void shutdownExecutor( boolean now )\n     {\n-        log.info( (now ? \"Forcefully shutting\" : \"Shutting\") + \" down executor.\" + EOL + this );\n+        log.info( ( now ? \"Forcefully shutting\" : \"Shutting\") + \" down executor.\" + EOL + this );\n         if ( now )\n         {\n             executor.shutdownNow();\n@@ -217,8 +207,7 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n \n     private void handleTimeout()\n     {\n-        throw new IllegalStateException( \"Index population tasks were not able to complete in \" +\n-                                         AWAIT_TIMEOUT_MINUTES + \" minutes.\" + EOL + this + EOL + allStackTraces() );\n+        throw new IllegalStateException( \"Index population tasks were not able to complete in \" + AWAIT_TIMEOUT_MINUTES + \" minutes.\" + EOL + this + EOL + allStackTraces() );\n     }\n \n     private void handleInterrupt()\n@@ -245,11 +234,7 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n      */\n     private static String allStackTraces()\n     {\n-        return Thread.getAllStackTraces()\n-                .entrySet()\n-                .stream()\n-                .map( entry -> Exceptions.stringify( entry.getKey(), entry.getValue() ) )\n-                .collect( joining() );\n+        return Thread.getAllStackTraces().entrySet().stream().map( entry -> Exceptions.stringify( entry.getKey(), entry.getValue() ) ).collect( joining() );\n     }\n \n     /**\n@@ -281,9 +266,8 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n             try\n             {\n                 super.run();\n-                log.info( \"Completed node store scan. \" +\n-                          \"Flushing all pending updates.\" + EOL + BatchingMultipleIndexPopulator.this );\n-                flushAll();\n+                log.info( \"Completed node store scan. \" + \"Flushing all pending updates.\" + EOL + BatchingMultipleIndexPopulator.this );\n+flushAll();\n             }\n             catch ( Throwable scanError )\n             {\n@@ -297,7 +281,8 @@ public class BatchingMultipleIndexPopulator extends MultipleIndexPopulator\n                 }\n                 throw scanError;\n             }\n-            shutdownExecutor( false );\n+\n+shutdownExecutor( false );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}