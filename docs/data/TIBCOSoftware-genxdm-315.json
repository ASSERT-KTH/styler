{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "315",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class SubstitutionGroupExpression implements ValidationExpr\n{\n\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n\t{\n\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/315/SubstitutionGroupExpression.java\nindex 5968c5ae244..3e8cefef1a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/315/SubstitutionGroupExpression.java\n@@ -27,7 +27,7 @@ import org.genxdm.xs.components.ParticleTerm;\n  */\n final class SubstitutionGroupExpression implements ValidationExpr\n {\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n+private static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n \t{\n \t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/315/SubstitutionGroupExpression.java\nindex 5968c5ae244..7f8e305fc24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/315/SubstitutionGroupExpression.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n@@ -25,93 +26,82 @@ import org.genxdm.xs.components.ParticleTerm;\n /**\n  * A Substitution Group is implemented as a choice of elements.\n  */\n-final class SubstitutionGroupExpression implements ValidationExpr\n-{\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n-\t{\n-\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n-\n-\t\tfor (final ElementDefinition element : choices)\n-\t\t{\n-\t\t\tsubTerms.add(new ParticleElementExpression(1, 1, element));\n-\t\t}\n-\t\treturn subTerms;\n-\t}\n-\n-\tprivate final boolean isMaxOccursUnbounded;\n-\tprivate final int m_maxOccurs;\n-\tprivate final int m_minOccurs;\n-\n-\tprivate final Iterable<ValidationExpr> m_subTerms;\n-\n-\tpublic SubstitutionGroupExpression(final int minOccurs, final int maxOccurs, final Iterable<ElementDefinition> choices)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = maxOccurs;\n-\t\tthis.isMaxOccursUnbounded = false;\n-\t\tthis.m_subTerms = compileSubTerms(choices);\n-\t}\n-\n-\tpublic SubstitutionGroupExpression(final int minOccurs, final Iterable<ElementDefinition> choices)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = -1;\n-\t\tthis.isMaxOccursUnbounded = true;\n-\t\tthis.m_subTerms = compileSubTerms(choices);\n-\t}\n-\n-\tpublic ParticleTerm getParticleTerm()\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\treturn m_subTerms;\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn isMaxOccursUnbounded;\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean matches(final QName token)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn m_maxOccurs;\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn m_minOccurs;\n-\t}\n+final class SubstitutionGroupExpression implements ValidationExpr {\n+    private static Iterable<ValidationExpr> compileSubTerms(\n+        final Iterable<ElementDefinition> choices) {\n+        final ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n+\n+        for (final ElementDefinition element : choices) {\n+            subTerms.add(new ParticleElementExpression(1, 1, element));\n+        }\n+        return subTerms;\n+    }\n+\n+    private final boolean isMaxOccursUnbounded;\n+\n+    private final int m_maxOccurs;\n+\n+    private final int m_minOccurs;\n+\n+    private final Iterable<ValidationExpr> m_subTerms;\n+\n+    public SubstitutionGroupExpression(final int minOccurs, final int maxOccurs,\n+                                       final Iterable<ElementDefinition> choices) {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = maxOccurs;\n+        this.isMaxOccursUnbounded = false;\n+        this.m_subTerms = compileSubTerms(choices);\n+    }\n+\n+    public SubstitutionGroupExpression(final int minOccurs,\n+                                       final Iterable<ElementDefinition> choices) {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = -1;\n+        this.isMaxOccursUnbounded = true;\n+        this.m_subTerms = compileSubTerms(choices);\n+    }\n+\n+    public ParticleTerm getParticleTerm() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms() {\n+        return m_subTerms;\n+    }\n+\n+    public boolean intersects(final ValidationExpr other) {\n+        return false;\n+    }\n+\n+    public boolean isChoice() {\n+        return true;\n+    }\n+\n+    public boolean isGroup() {\n+        return true;\n+    }\n+\n+    public boolean isInterleave() {\n+        return false;\n+    }\n+\n+    public boolean isMaxOccursUnbounded() {\n+        return isMaxOccursUnbounded;\n+    }\n+\n+    public boolean isSequence() {\n+        return false;\n+    }\n+\n+    public boolean matches(final QName token) {\n+        return false;\n+    }\n+\n+    public int maxOccurs() {\n+        return m_maxOccurs;\n+    }\n+\n+    public int minOccurs() {\n+        return m_minOccurs;\n+    }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/315/SubstitutionGroupExpression.java\nindex 5968c5ae244..e46d63827e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/315/SubstitutionGroupExpression.java\n@@ -27,16 +27,16 @@ import org.genxdm.xs.components.ParticleTerm;\n  */\n final class SubstitutionGroupExpression implements ValidationExpr\n {\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n+    private static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n \t{\n-\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n+    final ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n \n \t\tfor (final ElementDefinition element : choices)\n \t\t{\n-\t\t\tsubTerms.add(new ParticleElementExpression(1, 1, element));\n-\t\t}\n+    subTerms.add(new ParticleElementExpression(1, 1, element));\n+    }\n \t\treturn subTerms;\n-\t}\n+    }\n \n \tprivate final boolean isMaxOccursUnbounded;\n \tprivate final int m_maxOccurs;\n@@ -46,72 +46,72 @@ final class SubstitutionGroupExpression implements ValidationExpr\n \n \tpublic SubstitutionGroupExpression(final int minOccurs, final int maxOccurs, final Iterable<ElementDefinition> choices)\n \t{\n-\t\tthis.m_minOccurs = minOccurs;\n+    this.m_minOccurs = minOccurs;\n \t\tthis.m_maxOccurs = maxOccurs;\n \t\tthis.isMaxOccursUnbounded = false;\n \t\tthis.m_subTerms = compileSubTerms(choices);\n-\t}\n+    }\n \n \tpublic SubstitutionGroupExpression(final int minOccurs, final Iterable<ElementDefinition> choices)\n \t{\n-\t\tthis.m_minOccurs = minOccurs;\n+    this.m_minOccurs = minOccurs;\n \t\tthis.m_maxOccurs = -1;\n \t\tthis.isMaxOccursUnbounded = true;\n \t\tthis.m_subTerms = compileSubTerms(choices);\n-\t}\n+    }\n \n \tpublic ParticleTerm getParticleTerm()\n \t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n+    throw new UnsupportedOperationException();\n+    }\n \n \tpublic Iterable<ValidationExpr> getSubTerms()\n \t{\n-\t\treturn m_subTerms;\n-\t}\n+    return m_subTerms;\n+    }\n \n \tpublic boolean intersects(final ValidationExpr other)\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean isChoice()\n \t{\n-\t\treturn true;\n-\t}\n+    return true;\n+    }\n \n \tpublic boolean isGroup()\n \t{\n-\t\treturn true;\n-\t}\n+    return true;\n+    }\n \n \tpublic boolean isInterleave()\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean isMaxOccursUnbounded()\n \t{\n-\t\treturn isMaxOccursUnbounded;\n-\t}\n+    return isMaxOccursUnbounded;\n+    }\n \n \tpublic boolean isSequence()\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean matches(final QName token)\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic int maxOccurs()\n \t{\n-\t\treturn m_maxOccurs;\n-\t}\n+    return m_maxOccurs;\n+    }\n \n \tpublic int minOccurs()\n \t{\n-\t\treturn m_minOccurs;\n-\t}\n-}\n+    return m_minOccurs;\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/315/SubstitutionGroupExpression.java\nindex 5968c5ae244..d399335b05d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/315/SubstitutionGroupExpression.java\n@@ -16,102 +16,99 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.xs.components.ElementDefinition;\n import org.genxdm.xs.components.ParticleTerm;\n \n /**\n  * A Substitution Group is implemented as a choice of elements.\n  */\n+\n final class SubstitutionGroupExpression implements ValidationExpr\n {\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n-\t{\n-\t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n-\n-\t\tfor (final ElementDefinition element : choices)\n-\t\t{\n-\t\t\tsubTerms.add(new ParticleElementExpression(1, 1, element));\n-\t\t}\n-\t\treturn subTerms;\n-\t}\n-\n-\tprivate final boolean isMaxOccursUnbounded;\n-\tprivate final int m_maxOccurs;\n-\tprivate final int m_minOccurs;\n-\n-\tprivate final Iterable<ValidationExpr> m_subTerms;\n-\n-\tpublic SubstitutionGroupExpression(final int minOccurs, final int maxOccurs, final Iterable<ElementDefinition> choices)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = maxOccurs;\n-\t\tthis.isMaxOccursUnbounded = false;\n-\t\tthis.m_subTerms = compileSubTerms(choices);\n-\t}\n-\n-\tpublic SubstitutionGroupExpression(final int minOccurs, final Iterable<ElementDefinition> choices)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = -1;\n-\t\tthis.isMaxOccursUnbounded = true;\n-\t\tthis.m_subTerms = compileSubTerms(choices);\n-\t}\n-\n-\tpublic ParticleTerm getParticleTerm()\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\treturn m_subTerms;\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn isMaxOccursUnbounded;\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean matches(final QName token)\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn m_maxOccurs;\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn m_minOccurs;\n-\t}\n-}\n+    private static Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n+    {\n+        final ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n+        for (final ElementDefinition element : choices)\n+        {\n+            subTerms.add(new ParticleElementExpression(1, 1, element));\n+        }\n+        return subTerms;\n+    }\n+\n+    private final boolean isMaxOccursUnbounded;\n+    private final int m_maxOccurs;\n+    private final int m_minOccurs;\n+    private final Iterable<ValidationExpr> m_subTerms;\n+\n+    public SubstitutionGroupExpression(final int minOccurs, final int maxOccurs, final Iterable<ElementDefinition> choices)\n+    {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = maxOccurs;\n+        this.isMaxOccursUnbounded = false;\n+        this.m_subTerms = compileSubTerms(choices);\n+    }\n+\n+    public SubstitutionGroupExpression(final int minOccurs, final Iterable<ElementDefinition> choices)\n+    {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = -1;\n+        this.isMaxOccursUnbounded = true;\n+        this.m_subTerms = compileSubTerms(choices);\n+    }\n+\n+    public ParticleTerm getParticleTerm()\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms()\n+    {\n+        return m_subTerms;\n+    }\n+\n+    public boolean intersects(final ValidationExpr other)\n+    {\n+        return false;\n+    }\n+\n+    public boolean isChoice()\n+    {\n+        return true;\n+    }\n+\n+    public boolean isGroup()\n+    {\n+        return true;\n+    }\n+\n+    public boolean isInterleave()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isMaxOccursUnbounded()\n+    {\n+        return isMaxOccursUnbounded;\n+    }\n+\n+    public boolean isSequence()\n+    {\n+        return false;\n+    }\n+\n+    public boolean matches(final QName token)\n+    {\n+        return false;\n+    }\n+\n+    public int maxOccurs()\n+    {\n+        return m_maxOccurs;\n+    }\n+\n+    public int minOccurs()\n+    {\n+        return m_minOccurs;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 91
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/315/SubstitutionGroupExpression.java\nindex 5968c5ae244..3e8cefef1a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/315/SubstitutionGroupExpression.java\n@@ -27,7 +27,7 @@ import org.genxdm.xs.components.ParticleTerm;\n  */\n final class SubstitutionGroupExpression implements ValidationExpr\n {\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n+private static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n \t{\n \t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/315/SubstitutionGroupExpression.java\nindex 5968c5ae244..397ce4d0c28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/315/SubstitutionGroupExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/315/SubstitutionGroupExpression.java\n@@ -27,7 +27,7 @@ import org.genxdm.xs.components.ParticleTerm;\n  */\n final class SubstitutionGroupExpression implements ValidationExpr\n {\n-\tprivate static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n+    private static  Iterable<ValidationExpr> compileSubTerms(final Iterable<ElementDefinition> choices)\n \t{\n \t\tfinal ArrayList<ValidationExpr> subTerms = new ArrayList<ValidationExpr>();\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}