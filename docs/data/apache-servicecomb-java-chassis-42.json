{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "123",
                "column": "41",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    if (response != null) {\n      Model model = response.getResponseSchema();\n      return model instanceof ModelImpl &&\n          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/42/RestOperationMeta.java\nindex 34b15d43d78..387a3554c97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/42/RestOperationMeta.java\n@@ -120,8 +120,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "123",
                    "column": "41",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/42/RestOperationMeta.java\nindex 34b15d43d78..794da8a39d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/42/RestOperationMeta.java\n@@ -120,8 +120,7 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n@@ -273,4 +272,4 @@ public class RestOperationMeta {\n   public List<String> getProduces() {\n     return produces;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/42/RestOperationMeta.java\nindex 34b15d43d78..4ea62c0e7c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/42/RestOperationMeta.java\n@@ -23,10 +23,8 @@ import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.common.rest.codec.param.FormProcessorCreator.PartProcessor;\n import org.apache.servicecomb.common.rest.codec.produce.ProduceProcessor;\n@@ -39,7 +37,6 @@ import org.apache.servicecomb.foundation.vertx.http.HttpServletRequestEx;\n import org.apache.servicecomb.swagger.engine.SwaggerProducerOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import io.swagger.models.Model;\n import io.swagger.models.ModelImpl;\n import io.swagger.models.Operation;\n@@ -59,19 +56,23 @@ public class RestOperationMeta {\n   protected boolean formData;\n \n   // make sure if response is file\n+\n   protected boolean downloadFile;\n \n   protected List<RestParam> paramList = new ArrayList<>();\n \n   // key\u4e3a\u53c2\u6570\u540d\n+\n   protected Map<String, RestParam> paramMap = new LinkedHashMap<>();\n \n   protected List<String> fileKeys = new ArrayList<>();\n \n   // key\u4e3a\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982json\u4e4b\u7c7b\n+\n   private Map<String, ProduceProcessor> produceProcessorMap = new LinkedHashMap<>();\n \n   // \u4e0d\u4e00\u5b9a\u7b49\u4e8emgr\u4e2d\u7684default\uff0c\u56e0\u4e3a\u672coperation\u53ef\u80fd\u4e0d\u652f\u6301mgr\u4e2d\u7684default\n+\n   private ProduceProcessor defaultProcessor;\n \n   protected String absolutePath;\n@@ -79,6 +80,7 @@ public class RestOperationMeta {\n   protected PathRegExp absolutePathRegExp;\n \n   // \u5feb\u901f\u6784\u5efaURL path\n+\n   private URLPathBuilder pathBuilder;\n \n   public void init(OperationMeta operationMeta) {\n@@ -86,6 +88,8 @@ public class RestOperationMeta {\n \n     Swagger swagger = operationMeta.getSchemaMeta().getSwagger();\n     Operation operation = operationMeta.getSwaggerOperation();\n+\n+\n     this.produces = operation.getProduces();\n     if (produces == null) {\n       this.produces = swagger.getProduces();\n@@ -98,7 +102,6 @@ public class RestOperationMeta {\n     // \u521d\u59cb\u5316\u6240\u6709rest param\n     for (int swaggerParameterIdx = 0; swaggerParameterIdx < operation.getParameters().size(); swaggerParameterIdx++) {\n       Parameter parameter = operation.getParameters().get(swaggerParameterIdx);\n-\n       if (\"formData\".equals(parameter.getIn())) {\n         formData = true;\n       }\n@@ -117,13 +120,12 @@ public class RestOperationMeta {\n \n   private boolean checkDownloadFileFlag() {\n     // todo: logic of find\n-    Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n+    Response response = operationMeta.getSwaggerOperation().getResponses()\n+                                                           .get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n-\n     return false;\n   }\n \n@@ -136,9 +138,9 @@ public class RestOperationMeta {\n   }\n \n   // \u8f93\u51fab/c/\u5f62\u5f0f\u7684url\n+\n   private String concatPath(String basePath, String operationPath) {\n-    return (\"/\" + nonNullify(basePath) + \"/\" + nonNullify(operationPath) + \"/\")\n-        .replaceAll(\"/{2,}\", \"/\");\n+    return (\"/\" + nonNullify(basePath) + \"/\" + nonNullify(operationPath) + \"/\").replaceAll(\"/{2,}\", \"/\");\n   }\n \n   private String nonNullify(String path) {\n@@ -167,6 +169,7 @@ public class RestOperationMeta {\n     if (path == null || path.equals(\"\")) {\n       throw new Error(\"null rest url is not supported\");\n     }\n+\n     try {\n       return new PathRegExp(path);\n     } catch (Exception e) {\n@@ -188,6 +191,7 @@ public class RestOperationMeta {\n   }\n \n   // \u4e3aoperation\u521b\u5efa\u652f\u6301\u7684\u591a\u79cdproduce processor\n+\n   protected void createProduceProcessors() {\n     if (null == produces || produces.isEmpty()) {\n       for (ProduceProcessor processor : ProduceProcessorManager.INSTANCE.values()) {\n@@ -198,20 +202,25 @@ public class RestOperationMeta {\n         if (produce.contains(\";\")) {\n           produce = produce.substring(0, produce.indexOf(\";\"));\n         }\n+\n         ProduceProcessor processor = ProduceProcessorManager.INSTANCE.findValue(produce);\n         if (processor == null) {\n           LOGGER.error(\"produce {} is not supported\", produce);\n           continue;\n         }\n+\n         this.produceProcessorMap.put(produce, processor);\n       }\n \n       if (produceProcessorMap.isEmpty()) {\n-        produceProcessorMap.put(ProduceProcessorManager.DEFAULT_TYPE, ProduceProcessorManager.DEFAULT_PROCESSOR);\n+        produceProcessorMap.put(ProduceProcessorManager.DEFAULT_TYPE,\n+ProduceProcessorManager.DEFAULT_PROCESSOR);\n       }\n     }\n \n-    defaultProcessor = produceProcessorMap.values().stream().findFirst().get();\n+    defaultProcessor = produceProcessorMap.values().stream()\n+                                                   .findFirst()\n+                                                   .get();\n     produceProcessorMap.putIfAbsent(MediaType.WILDCARD, defaultProcessor);\n   }\n \n@@ -227,6 +236,7 @@ public class RestOperationMeta {\n     if (param.getParamProcessor() instanceof PartProcessor) {\n       fileKeys.add(param.getParamName());\n     }\n+\n     paramList.add(param);\n     paramMap.put(param.getParamName(), param);\n   }\n@@ -236,6 +246,7 @@ public class RestOperationMeta {\n   }\n \n   // \u9009\u62e9\u4e0eaccept\u5339\u914d\u7684produce processor\u6216\u8005\u7f3a\u7701\u7684\n+\n   public ProduceProcessor ensureFindProduceProcessor(HttpServletRequestEx requestEx) {\n     String acceptType = requestEx.getHeader(HttpHeaders.ACCEPT);\n     return ensureFindProduceProcessor(acceptType);\n@@ -248,9 +259,11 @@ public class RestOperationMeta {\n       //so do not care what accept type the consumer will set.\n       return this.produceProcessorMap.get(MediaType.WILDCARD);\n     }\n+\n     if (StringUtils.isEmpty(acceptType)) {\n       return defaultProcessor;\n     }\n+\n     List<String> mimeTypes = MimeTypesUtils.getSortedAcceptableMimeTypes(acceptType.toLowerCase(Locale.US));\n     for (String mime : mimeTypes) {\n       ProduceProcessor processor = this.produceProcessorMap.get(mime);\n@@ -258,7 +271,6 @@ public class RestOperationMeta {\n         return processor;\n       }\n     }\n-\n     return null;\n   }\n \n@@ -273,4 +285,4 @@ public class RestOperationMeta {\n   public List<String> getProduces() {\n     return produces;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "123",
                    "column": "41",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/42/RestOperationMeta.java\nindex 34b15d43d78..387a3554c97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/42/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/42/RestOperationMeta.java\n@@ -120,8 +120,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}