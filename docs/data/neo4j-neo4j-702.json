{
    "project_name": "neo4j-neo4j",
    "error_id": "702",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/702/Exceptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/702/Exceptions.java\nindex 8431ab767f0..5328c715609 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/702/Exceptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/702/Exceptions.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.fabric.executor;\n \n import java.util.ArrayList;\n@@ -29,66 +30,65 @@ import org.neo4j.kernel.api.exceptions.Status;\n \n public class Exceptions\n {\n-    public static RuntimeException transform( Status defaultStatus, Throwable t )\n+    public static RuntimeException transform(Status defaultStatus, Throwable t)\n     {\n-        var unwrapped = reactor.core.Exceptions.unwrap( t );\n-        unwrapped = transformComposite( unwrapped );\n+        var unwrapped = reactor.core.Exceptions.unwrap(t);\n+        unwrapped = transformComposite(unwrapped);\n \n         String message = unwrapped.getMessage();\n \n         // preserve the original exception if possible\n         // or try to preserve  at least the original status\n-        if ( unwrapped instanceof Status.HasStatus )\n+        if (unwrapped instanceof Status.HasStatus)\n         {\n-            if ( unwrapped instanceof RuntimeException )\n+            if (unwrapped instanceof RuntimeException)\n             {\n                 return (RuntimeException) unwrapped;\n             }\n \n-            return new FabricException( ((Status.HasStatus) unwrapped).status(), message, unwrapped );\n+            return new FabricException(((Status.HasStatus) unwrapped).status(), message, unwrapped);\n         }\n \n-        return new FabricException( defaultStatus, message, unwrapped );\n+        return new FabricException(defaultStatus, message, unwrapped);\n     }\n \n-    private static Throwable transformComposite( Throwable potentialComposite )\n+    private static Throwable transformComposite(Throwable potentialComposite)\n     {\n-        List<Throwable> unwrappedExceptions = reactor.core.Exceptions.unwrapMultiple( potentialComposite );\n+        List<Throwable> unwrappedExceptions = reactor.core.Exceptions.unwrapMultiple(potentialComposite);\n         List<Throwable> primaryExceptions = new ArrayList<>();\n         List<FabricSecondaryException> secondaryExceptions = new ArrayList<>();\n \n-        unwrappedExceptions.forEach( exception ->\n+        unwrappedExceptions.forEach(exception ->\n         {\n-            if ( exception instanceof FabricSecondaryException )\n+            if (exception instanceof FabricSecondaryException)\n             {\n-                secondaryExceptions.add( (FabricSecondaryException) exception );\n-            }\n-            else\n+                secondaryExceptions.add((FabricSecondaryException) exception);\n+            } else\n             {\n-                primaryExceptions.add( exception );\n+                primaryExceptions.add(exception);\n             }\n-        } );\n+        });\n \n-        if ( !primaryExceptions.isEmpty() )\n+        if (!primaryExceptions.isEmpty())\n         {\n-            Throwable result = primaryExceptions.get( 0 );\n-            IntStream.range( 1, primaryExceptions.size() ).forEach( i -> result.addSuppressed( primaryExceptions.get( i ) ) );\n+            Throwable result = primaryExceptions.get(0);\n+            IntStream.range(1, primaryExceptions.size()).forEach(i -> result.addSuppressed(primaryExceptions.get(i)));\n             return result;\n         }\n \n         Set<Throwable> uniqueExceptions = new HashSet<>();\n-        Throwable result = secondaryExceptions.get( 0 ).getPrimaryException();\n-        uniqueExceptions.add( result );\n-        IntStream.range( 1, secondaryExceptions.size() )\n-                 .mapToObj( secondaryExceptions::get )\n-                 .map( FabricSecondaryException::getPrimaryException )\n-                 // multiple secondary exceptions can point to the same primary one\n-                 .filter( exception -> !uniqueExceptions.contains( exception ) )\n-                 .forEach( exception ->\n-                 {\n-                     result.addSuppressed( exception );\n-                     uniqueExceptions.add( exception );\n-                 } );\n+        Throwable result = secondaryExceptions.get(0).getPrimaryException();\n+        uniqueExceptions.add(result);\n+        IntStream.range(1, secondaryExceptions.size())\n+          .mapToObj(secondaryExceptions::get)\n+          .map(FabricSecondaryException::getPrimaryException)\n+          // multiple secondary exceptions can point to the same primary one\n+          .filter(exception -> !uniqueExceptions.contains(exception))\n+          .forEach(exception ->\n+          {\n+              result.addSuppressed(exception);\n+              uniqueExceptions.add(exception);\n+          });\n         return result;\n     }\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}