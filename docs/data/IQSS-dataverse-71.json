{
    "project_name": "IQSS-dataverse",
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "38",
                "column": "6",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "@RequiredPermissionsMap({\n    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n    ,\t@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n})\npublic class MoveDatasetCommand extends AbstractVoidCommand {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/71/MoveDatasetCommand.java\nindex 55d02362e88..69c0501ea20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/71/MoveDatasetCommand.java\n@@ -35,7 +35,7 @@ import java.util.logging.Logger;\n  */\n @RequiredPermissionsMap({\n     @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n-    ,\t@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n+    ,@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n })\n public class MoveDatasetCommand extends AbstractVoidCommand {\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/71/MoveDatasetCommand.java\nindex 55d02362e88..4e47d59bca7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/71/MoveDatasetCommand.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse.engine.command.impl;\n \n import edu.harvard.iq.dataverse.Dataset;\n@@ -34,123 +35,131 @@ import java.util.logging.Logger;\n  * @author skraffmi\n  */\n @RequiredPermissionsMap({\n-    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n-    ,\t@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n+  @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n+  , @RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n })\n public class MoveDatasetCommand extends AbstractVoidCommand {\n \n-    private static final Logger logger = Logger.getLogger(MoveDatasetCommand.class.getCanonicalName());\n-    // FIXME: \"toMove\" would be a better name than \"moved\".\n-    final Dataset moved;\n-    final Dataverse destination;\n-    final Boolean force;\n-\n-    public MoveDatasetCommand(DataverseRequest aRequest, Dataset moved, Dataverse destination, Boolean force) {\n-        super(\n-                aRequest,\n-                dv(\"moved\", moved),\n-                dv(\"destination\", destination)\n-        );\n-        this.moved = moved;\n-        this.destination = destination;\n-        this.force= force;\n+  private static final Logger logger = Logger.getLogger(MoveDatasetCommand.class.getCanonicalName());\n+  // FIXME: \"toMove\" would be a better name than \"moved\".\n+  final Dataset moved;\n+  final Dataverse destination;\n+  final Boolean force;\n+\n+  public MoveDatasetCommand(DataverseRequest aRequest, Dataset moved, Dataverse destination, Boolean force) {\n+    super(\n+      aRequest,\n+      dv(\"moved\", moved),\n+      dv(\"destination\", destination)\n+    );\n+    this.moved = moved;\n+    this.destination = destination;\n+    this.force = force;\n+  }\n+\n+  @Override\n+  public void executeImpl(CommandContext ctxt) throws CommandException {\n+    boolean removeGuestbook = false, removeLinkDs = false;\n+    if (!(getUser() instanceof AuthenticatedUser)) {\n+      /**\n+       * This English wasn't moved to the bundle because it is impossible\n+       * to exercise it via both API and UI. See also the note in in the\n+       * PermissionException catch in AbstractApiBean.\n+       */\n+      throw new PermissionException(\"Move Dataset can only be called by authenticated users.\", this,\n+        Collections.singleton(Permission.DeleteDatasetDraft), moved);\n     }\n \n-    @Override\n-    public void executeImpl(CommandContext ctxt) throws CommandException {\n-        boolean removeGuestbook = false, removeLinkDs = false;\n-        if (!(getUser() instanceof AuthenticatedUser)) {\n-            /**\n-             * This English wasn't moved to the bundle because it is impossible\n-             * to exercise it via both API and UI. See also the note in in the\n-             * PermissionException catch in AbstractApiBean.\n-             */\n-            throw new PermissionException(\"Move Dataset can only be called by authenticated users.\", this, Collections.singleton(Permission.DeleteDatasetDraft), moved);\n-        }\n+    // validate the move makes sense\n+    if (moved.getOwner().equals(destination)) {\n+      throw new IllegalCommandException(BundleUtil\n+        .getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.targetDataverseSameAsOriginalDataverse\"),\n+        this);\n+    }\n \n-        // validate the move makes sense\n-        if (moved.getOwner().equals(destination)) {\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.targetDataverseSameAsOriginalDataverse\"), this);\n-        }\n-        \n-        // if dataset is published make sure that its target is published\n-        \n-        if (moved.isReleased() && !destination.isReleased()){\n-            throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.targetDataverseUnpublishedDatasetPublished\", Arrays.asList(destination.getDisplayName())), this);\n-        }\n-                \n-        //if the datasets guestbook is not contained in the new dataverse then remove it\n-        if (moved.getGuestbook() != null) {\n-            Guestbook gb = moved.getGuestbook();\n-            List<Guestbook> gbs = destination.getGuestbooks();\n-            boolean inheritGuestbooksValue = !destination.isGuestbookRoot();\n-            if (inheritGuestbooksValue && destination.getOwner() != null) {\n-                for (Guestbook pg : destination.getParentGuestbooks()) {\n-                    gbs.add(pg);\n-                }\n-            }\n-            if (gbs == null || !gbs.contains(gb)) {\n-                if (force == null  || !force){\n-                    removeGuestbook = true;\n-                } else {\n-                    moved.setGuestbook(null);\n-                }\n-            }\n-        }\n-        \n-        // generate list of all possible parent dataverses to check against\n-        List<Dataverse> ownersToCheck = new ArrayList<>();\n-        ownersToCheck.add(destination);\n-        if (destination.getOwners() != null) {\n-            ownersToCheck.addAll(destination.getOwners());\n-        }\n-        \n-        // if the dataset is linked to the new dataverse or any of \n-        // its parent dataverses then remove the link\n-        List<DatasetLinkingDataverse> linkingDatasets = new ArrayList<>();\n-        if (moved.getDatasetLinkingDataverses() != null) {\n-            linkingDatasets.addAll(moved.getDatasetLinkingDataverses());\n+    // if dataset is published make sure that its target is published\n+\n+    if (moved.isReleased() && !destination.isReleased()) {\n+      throw new IllegalCommandException(BundleUtil\n+        .getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.targetDataverseUnpublishedDatasetPublished\",\n+          Arrays.asList(destination.getDisplayName())), this);\n+    }\n+\n+    //if the datasets guestbook is not contained in the new dataverse then remove it\n+    if (moved.getGuestbook() != null) {\n+      Guestbook gb = moved.getGuestbook();\n+      List<Guestbook> gbs = destination.getGuestbooks();\n+      boolean inheritGuestbooksValue = !destination.isGuestbookRoot();\n+      if (inheritGuestbooksValue && destination.getOwner() != null) {\n+        for (Guestbook pg : destination.getParentGuestbooks()) {\n+          gbs.add(pg);\n         }\n-        for (DatasetLinkingDataverse dsld : linkingDatasets) {\n-            for (Dataverse owner : ownersToCheck){\n-                if ((dsld.getLinkingDataverse()).equals(owner)){\n-                    if (force == null || !force) {\n-                        removeLinkDs = true;\n-                        break;\n-                    }\n-                    boolean index = false;\n-                    ctxt.engine().submit(new DeleteDatasetLinkingDataverseCommand(getRequest(), dsld.getDataset(), dsld, index));\n-                    moved.getDatasetLinkingDataverses().remove(dsld);\n-                }\n-            }\n+      }\n+      if (gbs == null || !gbs.contains(gb)) {\n+        if (force == null || !force) {\n+          removeGuestbook = true;\n+        } else {\n+          moved.setGuestbook(null);\n         }\n-        \n-        if (removeGuestbook || removeLinkDs) {\n-            StringBuilder errorString = new StringBuilder();\n-            if (removeGuestbook) {\n-                errorString.append(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.unforced.datasetGuestbookNotInTargetDataverse\"));\n-            }\n-            if (removeLinkDs) {\n-                errorString.append(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.unforced.linkedToTargetDataverseOrOneOfItsParents\"));\n-            }\n-            throw new UnforcedCommandException(errorString.toString(), this);\n+      }\n+    }\n+\n+    // generate list of all possible parent dataverses to check against\n+    List<Dataverse> ownersToCheck = new ArrayList<>();\n+    ownersToCheck.add(destination);\n+    if (destination.getOwners() != null) {\n+      ownersToCheck.addAll(destination.getOwners());\n+    }\n+\n+    // if the dataset is linked to the new dataverse or any of\n+    // its parent dataverses then remove the link\n+    List<DatasetLinkingDataverse> linkingDatasets = new ArrayList<>();\n+    if (moved.getDatasetLinkingDataverses() != null) {\n+      linkingDatasets.addAll(moved.getDatasetLinkingDataverses());\n+    }\n+    for (DatasetLinkingDataverse dsld : linkingDatasets) {\n+      for (Dataverse owner : ownersToCheck) {\n+        if ((dsld.getLinkingDataverse()).equals(owner)) {\n+          if (force == null || !force) {\n+            removeLinkDs = true;\n+            break;\n+          }\n+          boolean index = false;\n+          ctxt.engine().submit(new DeleteDatasetLinkingDataverseCommand(getRequest(), dsld.getDataset(), dsld, index));\n+          moved.getDatasetLinkingDataverses().remove(dsld);\n         }\n+      }\n+    }\n \n+    if (removeGuestbook || removeLinkDs) {\n+      StringBuilder errorString = new StringBuilder();\n+      if (removeGuestbook) {\n+        errorString.append(BundleUtil.getStringFromBundle(\n+          \"dashboard.card.datamove.dataset.command.error.unforced.datasetGuestbookNotInTargetDataverse\"));\n+      }\n+      if (removeLinkDs) {\n+        errorString.append(BundleUtil.getStringFromBundle(\n+          \"dashboard.card.datamove.dataset.command.error.unforced.linkedToTargetDataverseOrOneOfItsParents\"));\n+      }\n+      throw new UnforcedCommandException(errorString.toString(), this);\n+    }\n \n-        // OK, move\n-        moved.setOwner(destination);\n-        ctxt.em().merge(moved);\n \n-        try {\n-            boolean doNormalSolrDocCleanUp = true;\n-            ctxt.index().indexDataset(moved, doNormalSolrDocCleanUp);\n+    // OK, move\n+    moved.setOwner(destination);\n+    ctxt.em().merge(moved);\n \n-        } catch (Exception e) { // RuntimeException e ) {\n-            logger.log(Level.WARNING, \"Exception while indexing:\" + e.getMessage()); //, e);\n-            throw new CommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.indexingProblem\"), this);\n+    try {\n+      boolean doNormalSolrDocCleanUp = true;\n+      ctxt.index().indexDataset(moved, doNormalSolrDocCleanUp);\n \n-        }\n+    } catch (Exception e) { // RuntimeException e ) {\n+      logger.log(Level.WARNING, \"Exception while indexing:\" + e.getMessage()); //, e);\n+      throw new CommandException(\n+        BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.indexingProblem\"), this);\n \n     }\n \n+  }\n+\n }\n",
            "diff_size": 151
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/71/MoveDatasetCommand.java\nindex 55d02362e88..6aa1274938f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/71/MoveDatasetCommand.java\n@@ -33,9 +33,11 @@ import java.util.logging.Logger;\n  *\n  * @author skraffmi\n  */\n+\n+\n @RequiredPermissionsMap({\n-    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n-    ,\t@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n+    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset}),\n+    @RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n })\n public class MoveDatasetCommand extends AbstractVoidCommand {\n \n@@ -46,14 +48,10 @@ public class MoveDatasetCommand extends AbstractVoidCommand {\n     final Boolean force;\n \n     public MoveDatasetCommand(DataverseRequest aRequest, Dataset moved, Dataverse destination, Boolean force) {\n-        super(\n-                aRequest,\n-                dv(\"moved\", moved),\n-                dv(\"destination\", destination)\n-        );\n+        super(aRequest, dv(\"moved\", moved), dv(\"destination\", destination));\n         this.moved = moved;\n         this.destination = destination;\n-        this.force= force;\n+        this.force = force;\n     }\n \n     @Override\n@@ -65,21 +63,26 @@ public class MoveDatasetCommand extends AbstractVoidCommand {\n              * to exercise it via both API and UI. See also the note in in the\n              * PermissionException catch in AbstractApiBean.\n              */\n-            throw new PermissionException(\"Move Dataset can only be called by authenticated users.\", this, Collections.singleton(Permission.DeleteDatasetDraft), moved);\n+            throw new PermissionException(\"Move Dataset can only be called by authenticated users.\",\n+                this,\n+                Collections.singleton(Permission.DeleteDatasetDraft),\n+                moved);\n         }\n \n         // validate the move makes sense\n+\n         if (moved.getOwner().equals(destination)) {\n             throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.targetDataverseSameAsOriginalDataverse\"), this);\n         }\n         \n         // if dataset is published make sure that its target is published\n-        \n-        if (moved.isReleased() && !destination.isReleased()){\n+\n+        if (moved.isReleased() && !destination.isReleased()) {\n             throw new IllegalCommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.targetDataverseUnpublishedDatasetPublished\", Arrays.asList(destination.getDisplayName())), this);\n         }\n                 \n         //if the datasets guestbook is not contained in the new dataverse then remove it\n+\n         if (moved.getGuestbook() != null) {\n             Guestbook gb = moved.getGuestbook();\n             List<Guestbook> gbs = destination.getGuestbooks();\n@@ -89,8 +92,9 @@ public class MoveDatasetCommand extends AbstractVoidCommand {\n                     gbs.add(pg);\n                 }\n             }\n+\n             if (gbs == null || !gbs.contains(gb)) {\n-                if (force == null  || !force){\n+                if (force == null || !force) {\n                     removeGuestbook = true;\n                 } else {\n                     moved.setGuestbook(null);\n@@ -99,6 +103,7 @@ public class MoveDatasetCommand extends AbstractVoidCommand {\n         }\n         \n         // generate list of all possible parent dataverses to check against\n+\n         List<Dataverse> ownersToCheck = new ArrayList<>();\n         ownersToCheck.add(destination);\n         if (destination.getOwners() != null) {\n@@ -107,29 +112,33 @@ public class MoveDatasetCommand extends AbstractVoidCommand {\n         \n         // if the dataset is linked to the new dataverse or any of \n         // its parent dataverses then remove the link\n+\n         List<DatasetLinkingDataverse> linkingDatasets = new ArrayList<>();\n         if (moved.getDatasetLinkingDataverses() != null) {\n             linkingDatasets.addAll(moved.getDatasetLinkingDataverses());\n         }\n+\n         for (DatasetLinkingDataverse dsld : linkingDatasets) {\n-            for (Dataverse owner : ownersToCheck){\n-                if ((dsld.getLinkingDataverse()).equals(owner)){\n+            for (Dataverse owner : ownersToCheck) {\n+                if ((dsld.getLinkingDataverse()).equals(owner)) {\n                     if (force == null || !force) {\n                         removeLinkDs = true;\n                         break;\n                     }\n+\n                     boolean index = false;\n                     ctxt.engine().submit(new DeleteDatasetLinkingDataverseCommand(getRequest(), dsld.getDataset(), dsld, index));\n                     moved.getDatasetLinkingDataverses().remove(dsld);\n                 }\n             }\n         }\n-        \n+\n         if (removeGuestbook || removeLinkDs) {\n             StringBuilder errorString = new StringBuilder();\n             if (removeGuestbook) {\n                 errorString.append(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.unforced.datasetGuestbookNotInTargetDataverse\"));\n             }\n+\n             if (removeLinkDs) {\n                 errorString.append(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.unforced.linkedToTargetDataverseOrOneOfItsParents\"));\n             }\n@@ -140,17 +149,13 @@ public class MoveDatasetCommand extends AbstractVoidCommand {\n         // OK, move\n         moved.setOwner(destination);\n         ctxt.em().merge(moved);\n-\n         try {\n             boolean doNormalSolrDocCleanUp = true;\n             ctxt.index().indexDataset(moved, doNormalSolrDocCleanUp);\n-\n         } catch (Exception e) { // RuntimeException e ) {\n             logger.log(Level.WARNING, \"Exception while indexing:\" + e.getMessage()); //, e);\n-            throw new CommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.indexingProblem\"), this);\n-\n+            throw new CommandException(BundleUtil.getStringFromBundle(\"dashboard.card.datamove.dataset.command.error.indexingProblem\"),\n+                this);\n         }\n-\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/71/MoveDatasetCommand.java\nindex 55d02362e88..69c0501ea20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/71/MoveDatasetCommand.java\n@@ -35,7 +35,7 @@ import java.util.logging.Logger;\n  */\n @RequiredPermissionsMap({\n     @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n-    ,\t@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n+    ,@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n })\n public class MoveDatasetCommand extends AbstractVoidCommand {\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/71/MoveDatasetCommand.java\nindex 55d02362e88..6608e2c9f7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/71/MoveDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/71/MoveDatasetCommand.java\n@@ -34,8 +34,7 @@ import java.util.logging.Logger;\n  * @author skraffmi\n  */\n @RequiredPermissionsMap({\n-    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset})\n-    ,\t@RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n+    @RequiredPermissions(dataverseName = \"moved\", value = {Permission.PublishDataset}) , @RequiredPermissions(dataverseName = \"destination\", value = {Permission.AddDataset, Permission.PublishDataset})\n })\n public class MoveDatasetCommand extends AbstractVoidCommand {\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}