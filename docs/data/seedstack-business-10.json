{
    "project_name": "seedstack-business",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.assembler;\n\nimport com.google.inject.ConfigurationException;\nimport com.google.inject.Injector;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/10/AssemblerRegistryImpl.java\nindex dc0441d7e8e..eb9d9f7da27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/10/AssemblerRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.inject.ConfigurationException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/10/AssemblerRegistryImpl.java\nindex dc0441d7e8e..392649c72d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/10/AssemblerRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.inject.ConfigurationException;\n@@ -34,19 +35,20 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass,\n-            Class<D> dtoClass) {\n+                                                                        Class<D> dtoClass) {\n         return findAssemblerOf(aggregateRootClass, dtoClass, null, null);\n     }\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass,\n-            @Nullable Annotation qualifier) {\n+                                                                        @Nullable Annotation qualifier) {\n         return findAssemblerOf(aggregateRootClass, dtoClass, qualifier, null);\n     }\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass,\n-            @Nullable Class<? extends Annotation> qualifier) {\n+                                                                        @Nullable\n+                                                                                Class<? extends Annotation> qualifier) {\n         return findAssemblerOf(aggregateRootClass, dtoClass, null, qualifier);\n     }\n \n@@ -75,7 +77,7 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n \n     @SuppressWarnings(\"unchecked\")\n     private <T, D> Assembler<T, D> findAssemblerOf(Type aggregateRoot, Class<D> dto, @Nullable Annotation qualifier,\n-            @Nullable Class<? extends Annotation> qualifierClass) {\n+                                                   @Nullable Class<? extends Annotation> qualifierClass) {\n         Assembler<T, D> o;\n         try {\n             if (qualifier != null) {\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/10/AssemblerRegistryImpl.java\nindex dc0441d7e8e..b457a2c780c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/10/AssemblerRegistryImpl.java\n@@ -33,40 +33,36 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n     }\n \n     @Override\n-    public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass,\n-            Class<D> dtoClass) {\n-        return findAssemblerOf(aggregateRootClass, dtoClass, null, null);\n+    public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass) {\n+    return findAssemblerOf(aggregateRootClass, dtoClass, null, null);\n     }\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass,\n             @Nullable Annotation qualifier) {\n-        return findAssemblerOf(aggregateRootClass, dtoClass, qualifier, null);\n+    return findAssemblerOf(aggregateRootClass, dtoClass, qualifier, null);\n     }\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass,\n             @Nullable Class<? extends Annotation> qualifier) {\n-        return findAssemblerOf(aggregateRootClass, dtoClass, null, qualifier);\n+    return findAssemblerOf(aggregateRootClass, dtoClass, null, qualifier);\n     }\n \n     @Override\n-    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(\n-            Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass) {\n-        return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, null, null);\n+    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass) {\n+    return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, null, null);\n     }\n \n     @Override\n-    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(\n-            Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass, Annotation qualifier) {\n-        return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, qualifier, null);\n+    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass, Annotation qualifier) {\n+    return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, qualifier, null);\n     }\n \n     @Override\n-    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(\n-            Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass,\n+    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass,\n             @Nullable Class<? extends Annotation> qualifier) {\n-        return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, null, qualifier);\n+    return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, null, qualifier);\n     }\n \n     private Type classesToTupleType(Class<? extends AggregateRoot<?>>[] aggregateRootClasses) {\n@@ -76,7 +72,7 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n     @SuppressWarnings(\"unchecked\")\n     private <T, D> Assembler<T, D> findAssemblerOf(Type aggregateRoot, Class<D> dto, @Nullable Annotation qualifier,\n             @Nullable Class<? extends Annotation> qualifierClass) {\n-        Assembler<T, D> o;\n+    Assembler<T, D> o;\n         try {\n             if (qualifier != null) {\n                 o = (Assembler<T, D>) getInstance(Assembler.class, qualifier, aggregateRoot, dto);\n@@ -86,8 +82,7 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n                 o = (Assembler<T, D>) getInstance(Assembler.class, aggregateRoot, dto);\n             }\n         } catch (ConfigurationException e) {\n-            BusinessException seedException = BusinessException.createNew(\n-                    BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER)\n+            BusinessException seedException = BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER)\n                     .put(\"aggregateRoot\", aggregateRoot)\n                     .put(\"dto\", dto);\n             if (qualifier != null) {\n@@ -100,22 +95,20 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n                 throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER)\n                         .put(\"aggregateRoot\", aggregateRoot)\n                         .put(\"dto\", dto);\n-            }\n+    }\n         }\n         return o;\n     }\n \n     private Object getInstance(Type rawType, Class<? extends Annotation> qualifier, Type... typeArguments) {\n-        return injector.getInstance(\n-                Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n+        return injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n     }\n \n     private Object getInstance(Type rawType, Annotation qualifier, Type... typeArguments) {\n-        return injector.getInstance(\n-                Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n+        return injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n     }\n \n     private Object getInstance(Type rawType, Type... typeArguments) {\n         return injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments))));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "column": "12",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "85",
                    "column": "20",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "column": "24",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "column": "24",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "column": "20",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "column": "9",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "column": "16",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 15, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 11, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "column": "1",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/10/AssemblerRegistryImpl.java\nindex dc0441d7e8e..f633dc1793e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/10/AssemblerRegistryImpl.java\n@@ -24,7 +24,9 @@ import org.seedstack.business.internal.BusinessErrorCode;\n import org.seedstack.business.internal.BusinessException;\n import org.seedstack.business.util.Tuples;\n \n+\n class AssemblerRegistryImpl implements AssemblerRegistry {\n+\n     private final Injector injector;\n \n     @Inject\n@@ -33,39 +35,38 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n     }\n \n     @Override\n-    public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass,\n-            Class<D> dtoClass) {\n+    public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass) {\n         return findAssemblerOf(aggregateRootClass, dtoClass, null, null);\n     }\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass,\n-            @Nullable Annotation qualifier) {\n+\n+                                                                        @Nullable Annotation qualifier) {\n         return findAssemblerOf(aggregateRootClass, dtoClass, qualifier, null);\n     }\n \n     @Override\n     public <A extends AggregateRoot<?>, D> Assembler<A, D> getAssembler(Class<A> aggregateRootClass, Class<D> dtoClass,\n-            @Nullable Class<? extends Annotation> qualifier) {\n+\n+                                                                        @Nullable Class<? extends Annotation> qualifier) {\n         return findAssemblerOf(aggregateRootClass, dtoClass, null, qualifier);\n     }\n \n     @Override\n-    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(\n-            Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass) {\n+    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass) {\n         return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, null, null);\n     }\n \n     @Override\n-    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(\n-            Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass, Annotation qualifier) {\n+    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass, Annotation qualifier) {\n         return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, qualifier, null);\n     }\n \n     @Override\n-    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(\n-            Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass,\n-            @Nullable Class<? extends Annotation> qualifier) {\n+    public <T extends Tuple, D> Assembler<T, D> getTupleAssembler(Class<? extends AggregateRoot<?>>[] aggregateRootClasses, Class<D> dtoClass,\n+\n+                                                                  @Nullable Class<? extends Annotation> qualifier) {\n         return findAssemblerOf(classesToTupleType(aggregateRootClasses), dtoClass, null, qualifier);\n     }\n \n@@ -74,48 +75,48 @@ class AssemblerRegistryImpl implements AssemblerRegistry {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T, D> Assembler<T, D> findAssemblerOf(Type aggregateRoot, Class<D> dto, @Nullable Annotation qualifier,\n-            @Nullable Class<? extends Annotation> qualifierClass) {\n+    private<T, D> Assembler<T, D> findAssemblerOf(Type aggregateRoot, Class<D> dto, @Nullable Annotation qualifier,\n+\n+                                                  @Nullable Class<? extends Annotation> qualifierClass) {\n         Assembler<T, D> o;\n         try {\n             if (qualifier != null) {\n                 o = (Assembler<T, D>) getInstance(Assembler.class, qualifier, aggregateRoot, dto);\n-            } else if (qualifierClass != null) {\n-                o = (Assembler<T, D>) getInstance(Assembler.class, qualifierClass, aggregateRoot, dto);\n-            } else {\n-                o = (Assembler<T, D>) getInstance(Assembler.class, aggregateRoot, dto);\n-            }\n-        } catch (ConfigurationException e) {\n-            BusinessException seedException = BusinessException.createNew(\n-                    BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER)\n-                    .put(\"aggregateRoot\", aggregateRoot)\n-                    .put(\"dto\", dto);\n-            if (qualifier != null) {\n-                seedException.put(\"qualifier\", qualifier);\n-                throw seedException;\n-            } else if (qualifierClass != null) {\n-                seedException.put(\"qualifier\", qualifierClass.getSimpleName());\n-                throw seedException;\n-            } else {\n-                throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER)\n-                        .put(\"aggregateRoot\", aggregateRoot)\n-                        .put(\"dto\", dto);\n-            }\n+            } else if(qualifierClass != null) {\n+                       o = (Assembler<T, D>) getInstance(Assembler.class, qualifierClass, aggregateRoot, dto);\n+                   } else {\n+                       o = (Assembler<T, D>) getInstance(Assembler.class, aggregateRoot, dto);\n+                   }\n         }\n+\n+catch(ConfigurationException e) {\n+    BusinessException seedException = BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER)\n+        .put(\"aggregateRoot\", aggregateRoot)\n+        .put(\"dto\", dto);\n+    if (qualifier != null) {\n+        seedException.put(\"qualifier\", qualifier);\n+        throw seedException;\n+    } else if(qualifierClass != null) {\n+               seedException.put(\"qualifier\", qualifierClass.getSimpleName());\n+               throw seedException;\n+           } else {\n+               throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_ASSEMBLER)\n+                   .put(\"aggregateRoot\", aggregateRoot)\n+                   .put(\"dto\", dto);\n+           }\n+}\n         return o;\n     }\n \n     private Object getInstance(Type rawType, Class<? extends Annotation> qualifier, Type... typeArguments) {\n-        return injector.getInstance(\n-                Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n+        return injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n     }\n \n     private Object getInstance(Type rawType, Annotation qualifier, Type... typeArguments) {\n-        return injector.getInstance(\n-                Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n+        return injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments)), qualifier));\n     }\n \n     private Object getInstance(Type rawType, Type... typeArguments) {\n         return injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(rawType, typeArguments))));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/10/AssemblerRegistryImpl.java\nindex dc0441d7e8e..eb9d9f7da27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/10/AssemblerRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.inject.ConfigurationException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/10/AssemblerRegistryImpl.java\nindex dc0441d7e8e..eb9d9f7da27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/10/AssemblerRegistryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/10/AssemblerRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.inject.ConfigurationException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}