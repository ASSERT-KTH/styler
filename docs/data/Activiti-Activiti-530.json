{
    "project_name": "Activiti-Activiti",
    "error_id": "530",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.asyncexecutor.multitenant;\n\nimport java.util.HashMap;\nimport java.util.Map;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/530/ExecutorPerTenantAsyncExecutor.java\nindex 57e8b1436dd..0ecb8852977 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/530/ExecutorPerTenantAsyncExecutor.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/530/ExecutorPerTenantAsyncExecutor.java\nindex 57e8b1436dd..8c01d1fed6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/530/ExecutorPerTenantAsyncExecutor.java\n@@ -33,231 +33,229 @@ import org.slf4j.LoggerFactory;\n /**\n  * An {@link AsyncExecutor} that has one {@link AsyncExecutor} per tenant.\n  * So each tenant has its own acquiring threads and it's own threadpool for executing jobs.\n- *\n-\n  */\n public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor {\n \n-  private static final Logger logger = LoggerFactory.getLogger(ExecutorPerTenantAsyncExecutor.class);\n+    private static final Logger logger = LoggerFactory.getLogger(ExecutorPerTenantAsyncExecutor.class);\n \n-  protected TenantInfoHolder tenantInfoHolder;\n-  protected TenantAwareAsyncExecutorFactory tenantAwareAyncExecutorFactory;\n+    protected TenantInfoHolder tenantInfoHolder;\n+    protected TenantAwareAsyncExecutorFactory tenantAwareAyncExecutorFactory;\n \n-  protected Map<String, AsyncExecutor> tenantExecutors = new HashMap<String, AsyncExecutor>();\n+    protected Map<String, AsyncExecutor> tenantExecutors = new HashMap<String, AsyncExecutor>();\n \n-  protected ProcessEngineConfigurationImpl processEngineConfiguration;\n-  protected boolean active;\n-  protected boolean autoActivate;\n+    protected ProcessEngineConfigurationImpl processEngineConfiguration;\n+    protected boolean active;\n+    protected boolean autoActivate;\n \n-  public ExecutorPerTenantAsyncExecutor(TenantInfoHolder tenantInfoHolder) {\n-    this(tenantInfoHolder, null);\n-  }\n+    public ExecutorPerTenantAsyncExecutor(TenantInfoHolder tenantInfoHolder) {\n+        this(tenantInfoHolder, null);\n+    }\n \n-  public ExecutorPerTenantAsyncExecutor(TenantInfoHolder tenantInfoHolder, TenantAwareAsyncExecutorFactory tenantAwareAyncExecutorFactory) {\n-    this.tenantInfoHolder = tenantInfoHolder;\n-    this.tenantAwareAyncExecutorFactory = tenantAwareAyncExecutorFactory;\n-  }\n+    public ExecutorPerTenantAsyncExecutor(TenantInfoHolder tenantInfoHolder, TenantAwareAsyncExecutorFactory tenantAwareAyncExecutorFactory) {\n+        this.tenantInfoHolder = tenantInfoHolder;\n+        this.tenantAwareAyncExecutorFactory = tenantAwareAyncExecutorFactory;\n+    }\n \n-  @Override\n-  public Set<String> getTenantIds() {\n-    return tenantExecutors.keySet();\n-  }\n+    @Override\n+    public Set<String> getTenantIds() {\n+        return tenantExecutors.keySet();\n+    }\n \n-  public void addTenantAsyncExecutor(String tenantId, boolean startExecutor) {\n-    AsyncExecutor tenantExecutor = null;\n+    public void addTenantAsyncExecutor(String tenantId, boolean startExecutor) {\n+        AsyncExecutor tenantExecutor = null;\n \n-    if (tenantAwareAyncExecutorFactory == null) {\n-      tenantExecutor = new DefaultAsyncJobExecutor();\n-    } else {\n-      tenantExecutor = tenantAwareAyncExecutorFactory.createAsyncExecutor(tenantId);\n-    }\n+        if (tenantAwareAyncExecutorFactory == null) {\n+            tenantExecutor = new DefaultAsyncJobExecutor();\n+        } else {\n+            tenantExecutor = tenantAwareAyncExecutorFactory.createAsyncExecutor(tenantId);\n+        }\n \n-    tenantExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n+        tenantExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n \n-    if (tenantExecutor instanceof DefaultAsyncJobExecutor) {\n-      DefaultAsyncJobExecutor defaultAsyncJobExecutor = (DefaultAsyncJobExecutor) tenantExecutor;\n-      defaultAsyncJobExecutor.setAsyncJobsDueRunnable(new TenantAwareAcquireAsyncJobsDueRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n-      defaultAsyncJobExecutor.setTimerJobRunnable(new TenantAwareAcquireTimerJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n-      defaultAsyncJobExecutor.setExecuteAsyncRunnableFactory(new TenantAwareExecuteAsyncRunnableFactory(tenantInfoHolder, tenantId));\n-      defaultAsyncJobExecutor.setResetExpiredJobsRunnable(new TenantAwareResetExpiredJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n-    }\n+        if (tenantExecutor instanceof DefaultAsyncJobExecutor) {\n+            DefaultAsyncJobExecutor defaultAsyncJobExecutor = (DefaultAsyncJobExecutor) tenantExecutor;\n+            defaultAsyncJobExecutor.setAsyncJobsDueRunnable(new TenantAwareAcquireAsyncJobsDueRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n+            defaultAsyncJobExecutor.setTimerJobRunnable(new TenantAwareAcquireTimerJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n+            defaultAsyncJobExecutor.setExecuteAsyncRunnableFactory(new TenantAwareExecuteAsyncRunnableFactory(tenantInfoHolder, tenantId));\n+            defaultAsyncJobExecutor.setResetExpiredJobsRunnable(new TenantAwareResetExpiredJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n+        }\n \n-    tenantExecutors.put(tenantId, tenantExecutor);\n+        tenantExecutors.put(tenantId, tenantExecutor);\n \n-    if (startExecutor) {\n-      tenantExecutor.start();\n+        if (startExecutor) {\n+            tenantExecutor.start();\n+        }\n     }\n-  }\n \n     @Override\n     public void removeTenantAsyncExecutor(String tenantId) {\n-      shutdownTenantExecutor(tenantId);\n-      tenantExecutors.remove(tenantId);\n+        shutdownTenantExecutor(tenantId);\n+        tenantExecutors.remove(tenantId);\n     }\n \n-  protected AsyncExecutor determineAsyncExecutor() {\n-    return tenantExecutors.get(tenantInfoHolder.getCurrentTenantId());\n-  }\n+    protected AsyncExecutor determineAsyncExecutor() {\n+        return tenantExecutors.get(tenantInfoHolder.getCurrentTenantId());\n+    }\n \n-  public boolean executeAsyncJob(Job job) {\n-    return determineAsyncExecutor().executeAsyncJob(job);\n-  }\n+    public boolean executeAsyncJob(Job job) {\n+        return determineAsyncExecutor().executeAsyncJob(job);\n+    }\n \n-  public JobManager getJobManager() {\n-    // Should never be accessed on this class, should be accessed on the actual AsyncExecutor\n-    throw new UnsupportedOperationException();\n-  }\n+    public JobManager getJobManager() {\n+        // Should never be accessed on this class, should be accessed on the actual AsyncExecutor\n+        throw new UnsupportedOperationException();\n+    }\n \n-  @Override\n-  public void setProcessEngineConfiguration(ProcessEngineConfigurationImpl processEngineConfiguration) {\n-    this.processEngineConfiguration = processEngineConfiguration;\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n+    @Override\n+    public void setProcessEngineConfiguration(ProcessEngineConfigurationImpl processEngineConfiguration) {\n+        this.processEngineConfiguration = processEngineConfiguration;\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n+        }\n     }\n-  }\n \n-  @Override\n-  public ProcessEngineConfigurationImpl getProcessEngineConfiguration() {\n-    throw new UnsupportedOperationException();\n-  }\n+    @Override\n+    public ProcessEngineConfigurationImpl getProcessEngineConfiguration() {\n+        throw new UnsupportedOperationException();\n+    }\n \n-  public boolean isAutoActivate() {\n-    return autoActivate;\n-  }\n+    public boolean isAutoActivate() {\n+        return autoActivate;\n+    }\n \n-  public void setAutoActivate(boolean isAutoActivate) {\n-    autoActivate = isAutoActivate;\n-  }\n+    public void setAutoActivate(boolean isAutoActivate) {\n+        autoActivate = isAutoActivate;\n+    }\n \n-  public boolean isActive() {\n-    return active;\n-  }\n+    public boolean isActive() {\n+        return active;\n+    }\n \n-  public void start() {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.start();\n+    public void start() {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.start();\n+        }\n+        active = true;\n     }\n-    active = true;\n-  }\n \n-  public synchronized void shutdown() {\n-    for (String tenantId : tenantExecutors.keySet()) {\n-      shutdownTenantExecutor(tenantId);\n+    public synchronized void shutdown() {\n+        for (String tenantId : tenantExecutors.keySet()) {\n+            shutdownTenantExecutor(tenantId);\n+        }\n+        active = false;\n     }\n-    active = false;\n-  }\n \n-  protected void shutdownTenantExecutor(String tenantId) {\n-    logger.info(\"Shutting down async executor for tenant \" + tenantId);\n-    tenantExecutors.get(tenantId).shutdown();\n-  }\n+    protected void shutdownTenantExecutor(String tenantId) {\n+        logger.info(\"Shutting down async executor for tenant \" + tenantId);\n+        tenantExecutors.get(tenantId).shutdown();\n+    }\n \n-  public String getLockOwner() {\n-    return determineAsyncExecutor().getLockOwner();\n-  }\n+    public String getLockOwner() {\n+        return determineAsyncExecutor().getLockOwner();\n+    }\n \n-  public int getTimerLockTimeInMillis() {\n-    return determineAsyncExecutor().getTimerLockTimeInMillis();\n-  }\n+    public int getTimerLockTimeInMillis() {\n+        return determineAsyncExecutor().getTimerLockTimeInMillis();\n+    }\n \n-  public void setTimerLockTimeInMillis(int lockTimeInMillis) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setTimerLockTimeInMillis(lockTimeInMillis);\n+    public void setTimerLockTimeInMillis(int lockTimeInMillis) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setTimerLockTimeInMillis(lockTimeInMillis);\n+        }\n     }\n-  }\n \n-  public int getAsyncJobLockTimeInMillis() {\n-    return determineAsyncExecutor().getAsyncJobLockTimeInMillis();\n-  }\n+    public int getAsyncJobLockTimeInMillis() {\n+        return determineAsyncExecutor().getAsyncJobLockTimeInMillis();\n+    }\n \n-  public void setAsyncJobLockTimeInMillis(int lockTimeInMillis) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setAsyncJobLockTimeInMillis(lockTimeInMillis);\n+    public void setAsyncJobLockTimeInMillis(int lockTimeInMillis) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setAsyncJobLockTimeInMillis(lockTimeInMillis);\n+        }\n     }\n-  }\n \n-  public int getDefaultTimerJobAcquireWaitTimeInMillis() {\n-    return determineAsyncExecutor().getDefaultTimerJobAcquireWaitTimeInMillis();\n-  }\n+    public int getDefaultTimerJobAcquireWaitTimeInMillis() {\n+        return determineAsyncExecutor().getDefaultTimerJobAcquireWaitTimeInMillis();\n+    }\n \n-  public void setDefaultTimerJobAcquireWaitTimeInMillis(int waitTimeInMillis) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setDefaultTimerJobAcquireWaitTimeInMillis(waitTimeInMillis);\n+    public void setDefaultTimerJobAcquireWaitTimeInMillis(int waitTimeInMillis) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setDefaultTimerJobAcquireWaitTimeInMillis(waitTimeInMillis);\n+        }\n     }\n-  }\n \n-  public int getDefaultAsyncJobAcquireWaitTimeInMillis() {\n-    return determineAsyncExecutor().getDefaultAsyncJobAcquireWaitTimeInMillis();\n-  }\n+    public int getDefaultAsyncJobAcquireWaitTimeInMillis() {\n+        return determineAsyncExecutor().getDefaultAsyncJobAcquireWaitTimeInMillis();\n+    }\n \n-  public void setDefaultAsyncJobAcquireWaitTimeInMillis(int waitTimeInMillis) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setDefaultAsyncJobAcquireWaitTimeInMillis(waitTimeInMillis);\n+    public void setDefaultAsyncJobAcquireWaitTimeInMillis(int waitTimeInMillis) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setDefaultAsyncJobAcquireWaitTimeInMillis(waitTimeInMillis);\n+        }\n     }\n-  }\n \n-  public int getDefaultQueueSizeFullWaitTimeInMillis() {\n-    return determineAsyncExecutor().getDefaultQueueSizeFullWaitTimeInMillis();\n-  }\n+    public int getDefaultQueueSizeFullWaitTimeInMillis() {\n+        return determineAsyncExecutor().getDefaultQueueSizeFullWaitTimeInMillis();\n+    }\n \n-  public void setDefaultQueueSizeFullWaitTimeInMillis(int defaultQueueSizeFullWaitTimeInMillis) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setDefaultQueueSizeFullWaitTimeInMillis(defaultQueueSizeFullWaitTimeInMillis);\n+    public void setDefaultQueueSizeFullWaitTimeInMillis(int defaultQueueSizeFullWaitTimeInMillis) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setDefaultQueueSizeFullWaitTimeInMillis(defaultQueueSizeFullWaitTimeInMillis);\n+        }\n     }\n-  }\n \n-  public int getMaxAsyncJobsDuePerAcquisition() {\n-    return determineAsyncExecutor().getMaxAsyncJobsDuePerAcquisition();\n-  }\n+    public int getMaxAsyncJobsDuePerAcquisition() {\n+        return determineAsyncExecutor().getMaxAsyncJobsDuePerAcquisition();\n+    }\n \n-  public void setMaxAsyncJobsDuePerAcquisition(int maxJobs) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setMaxAsyncJobsDuePerAcquisition(maxJobs);\n+    public void setMaxAsyncJobsDuePerAcquisition(int maxJobs) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setMaxAsyncJobsDuePerAcquisition(maxJobs);\n+        }\n     }\n-  }\n \n-  public int getMaxTimerJobsPerAcquisition() {\n-    return determineAsyncExecutor().getMaxTimerJobsPerAcquisition();\n-  }\n+    public int getMaxTimerJobsPerAcquisition() {\n+        return determineAsyncExecutor().getMaxTimerJobsPerAcquisition();\n+    }\n \n-  public void setMaxTimerJobsPerAcquisition(int maxJobs) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setMaxTimerJobsPerAcquisition(maxJobs);\n+    public void setMaxTimerJobsPerAcquisition(int maxJobs) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setMaxTimerJobsPerAcquisition(maxJobs);\n+        }\n     }\n-  }\n \n-  public int getRetryWaitTimeInMillis() {\n-    return determineAsyncExecutor().getRetryWaitTimeInMillis();\n-  }\n+    public int getRetryWaitTimeInMillis() {\n+        return determineAsyncExecutor().getRetryWaitTimeInMillis();\n+    }\n \n-  public void setRetryWaitTimeInMillis(int retryWaitTimeInMillis) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setRetryWaitTimeInMillis(retryWaitTimeInMillis);\n+    public void setRetryWaitTimeInMillis(int retryWaitTimeInMillis) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setRetryWaitTimeInMillis(retryWaitTimeInMillis);\n+        }\n     }\n-  }\n \n-  @Override\n-  public int getResetExpiredJobsInterval() {\n-    return determineAsyncExecutor().getResetExpiredJobsInterval();\n-  }\n+    @Override\n+    public int getResetExpiredJobsInterval() {\n+        return determineAsyncExecutor().getResetExpiredJobsInterval();\n+    }\n \n-  @Override\n-  public void setResetExpiredJobsInterval(int resetExpiredJobsInterval) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setResetExpiredJobsInterval(resetExpiredJobsInterval);\n+    @Override\n+    public void setResetExpiredJobsInterval(int resetExpiredJobsInterval) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setResetExpiredJobsInterval(resetExpiredJobsInterval);\n+        }\n     }\n-  }\n \n-  @Override\n-  public int getResetExpiredJobsPageSize() {\n-    return determineAsyncExecutor().getResetExpiredJobsPageSize();\n-  }\n+    @Override\n+    public int getResetExpiredJobsPageSize() {\n+        return determineAsyncExecutor().getResetExpiredJobsPageSize();\n+    }\n \n-  @Override\n-  public void setResetExpiredJobsPageSize(int resetExpiredJobsPageSize) {\n-    for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setResetExpiredJobsPageSize(resetExpiredJobsPageSize);\n+    @Override\n+    public void setResetExpiredJobsPageSize(int resetExpiredJobsPageSize) {\n+        for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n+            asyncExecutor.setResetExpiredJobsPageSize(resetExpiredJobsPageSize);\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 177
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/530/ExecutorPerTenantAsyncExecutor.java\nindex 57e8b1436dd..e4c4da18920 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/530/ExecutorPerTenantAsyncExecutor.java\n@@ -20,7 +20,6 @@ package org.activiti.engine.impl.asyncexecutor.multitenant;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n-\n import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n import org.activiti.engine.impl.asyncexecutor.DefaultAsyncJobExecutor;\n import org.activiti.engine.impl.asyncexecutor.JobManager;\n@@ -36,15 +35,14 @@ import org.slf4j.LoggerFactory;\n  *\n \n  */\n+\n+\n public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor {\n \n   private static final Logger logger = LoggerFactory.getLogger(ExecutorPerTenantAsyncExecutor.class);\n-\n   protected TenantInfoHolder tenantInfoHolder;\n   protected TenantAwareAsyncExecutorFactory tenantAwareAyncExecutorFactory;\n-\n   protected Map<String, AsyncExecutor> tenantExecutors = new HashMap<String, AsyncExecutor>();\n-\n   protected ProcessEngineConfigurationImpl processEngineConfiguration;\n   protected boolean active;\n   protected boolean autoActivate;\n@@ -65,35 +63,36 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void addTenantAsyncExecutor(String tenantId, boolean startExecutor) {\n     AsyncExecutor tenantExecutor = null;\n-\n     if (tenantAwareAyncExecutorFactory == null) {\n       tenantExecutor = new DefaultAsyncJobExecutor();\n     } else {\n       tenantExecutor = tenantAwareAyncExecutorFactory.createAsyncExecutor(tenantId);\n     }\n-\n     tenantExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n-\n     if (tenantExecutor instanceof DefaultAsyncJobExecutor) {\n       DefaultAsyncJobExecutor defaultAsyncJobExecutor = (DefaultAsyncJobExecutor) tenantExecutor;\n-      defaultAsyncJobExecutor.setAsyncJobsDueRunnable(new TenantAwareAcquireAsyncJobsDueRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n-      defaultAsyncJobExecutor.setTimerJobRunnable(new TenantAwareAcquireTimerJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n+      defaultAsyncJobExecutor.setAsyncJobsDueRunnable(new TenantAwareAcquireAsyncJobsDueRunnable(defaultAsyncJobExecutor,\n+                                                                                                 tenantInfoHolder,\n+                                                                                                 tenantId));\n+      defaultAsyncJobExecutor.setTimerJobRunnable(new TenantAwareAcquireTimerJobsRunnable(defaultAsyncJobExecutor,\n+                                                                                          tenantInfoHolder,\n+                                                                                          tenantId));\n       defaultAsyncJobExecutor.setExecuteAsyncRunnableFactory(new TenantAwareExecuteAsyncRunnableFactory(tenantInfoHolder, tenantId));\n-      defaultAsyncJobExecutor.setResetExpiredJobsRunnable(new TenantAwareResetExpiredJobsRunnable(defaultAsyncJobExecutor, tenantInfoHolder, tenantId));\n+      defaultAsyncJobExecutor.setResetExpiredJobsRunnable(new TenantAwareResetExpiredJobsRunnable(defaultAsyncJobExecutor,\n+                                                                                                  tenantInfoHolder,\n+                                                                                                  tenantId));\n     }\n-\n     tenantExecutors.put(tenantId, tenantExecutor);\n-\n     if (startExecutor) {\n       tenantExecutor.start();\n     }\n   }\n \n-    @Override\n-    public void removeTenantAsyncExecutor(String tenantId) {\n-      shutdownTenantExecutor(tenantId);\n-      tenantExecutors.remove(tenantId);\n-    }\n+  @Override\n+  public void removeTenantAsyncExecutor(String tenantId) {\n+    shutdownTenantExecutor(tenantId);\n+    tenantExecutors.remove(tenantId);\n+  }\n \n   protected AsyncExecutor determineAsyncExecutor() {\n     return tenantExecutors.get(tenantInfoHolder.getCurrentTenantId());\n@@ -112,7 +111,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n   public void setProcessEngineConfiguration(ProcessEngineConfigurationImpl processEngineConfiguration) {\n     this.processEngineConfiguration = processEngineConfiguration;\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n+        asyncExecutor.setProcessEngineConfiguration(processEngineConfiguration);\n     }\n   }\n \n@@ -135,14 +134,14 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void start() {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.start();\n+        asyncExecutor.start();\n     }\n     active = true;\n   }\n \n   public synchronized void shutdown() {\n     for (String tenantId : tenantExecutors.keySet()) {\n-      shutdownTenantExecutor(tenantId);\n+        shutdownTenantExecutor(tenantId);\n     }\n     active = false;\n   }\n@@ -162,7 +161,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setTimerLockTimeInMillis(int lockTimeInMillis) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setTimerLockTimeInMillis(lockTimeInMillis);\n+        asyncExecutor.setTimerLockTimeInMillis(lockTimeInMillis);\n     }\n   }\n \n@@ -172,7 +171,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setAsyncJobLockTimeInMillis(int lockTimeInMillis) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setAsyncJobLockTimeInMillis(lockTimeInMillis);\n+        asyncExecutor.setAsyncJobLockTimeInMillis(lockTimeInMillis);\n     }\n   }\n \n@@ -182,7 +181,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setDefaultTimerJobAcquireWaitTimeInMillis(int waitTimeInMillis) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setDefaultTimerJobAcquireWaitTimeInMillis(waitTimeInMillis);\n+        asyncExecutor.setDefaultTimerJobAcquireWaitTimeInMillis(waitTimeInMillis);\n     }\n   }\n \n@@ -192,7 +191,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setDefaultAsyncJobAcquireWaitTimeInMillis(int waitTimeInMillis) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setDefaultAsyncJobAcquireWaitTimeInMillis(waitTimeInMillis);\n+        asyncExecutor.setDefaultAsyncJobAcquireWaitTimeInMillis(waitTimeInMillis);\n     }\n   }\n \n@@ -202,7 +201,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setDefaultQueueSizeFullWaitTimeInMillis(int defaultQueueSizeFullWaitTimeInMillis) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setDefaultQueueSizeFullWaitTimeInMillis(defaultQueueSizeFullWaitTimeInMillis);\n+        asyncExecutor.setDefaultQueueSizeFullWaitTimeInMillis(defaultQueueSizeFullWaitTimeInMillis);\n     }\n   }\n \n@@ -212,7 +211,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setMaxAsyncJobsDuePerAcquisition(int maxJobs) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setMaxAsyncJobsDuePerAcquisition(maxJobs);\n+        asyncExecutor.setMaxAsyncJobsDuePerAcquisition(maxJobs);\n     }\n   }\n \n@@ -222,7 +221,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setMaxTimerJobsPerAcquisition(int maxJobs) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setMaxTimerJobsPerAcquisition(maxJobs);\n+        asyncExecutor.setMaxTimerJobsPerAcquisition(maxJobs);\n     }\n   }\n \n@@ -232,7 +231,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n \n   public void setRetryWaitTimeInMillis(int retryWaitTimeInMillis) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setRetryWaitTimeInMillis(retryWaitTimeInMillis);\n+        asyncExecutor.setRetryWaitTimeInMillis(retryWaitTimeInMillis);\n     }\n   }\n \n@@ -244,7 +243,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n   @Override\n   public void setResetExpiredJobsInterval(int resetExpiredJobsInterval) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setResetExpiredJobsInterval(resetExpiredJobsInterval);\n+        asyncExecutor.setResetExpiredJobsInterval(resetExpiredJobsInterval);\n     }\n   }\n \n@@ -256,8 +255,7 @@ public class ExecutorPerTenantAsyncExecutor implements TenantAwareAsyncExecutor\n   @Override\n   public void setResetExpiredJobsPageSize(int resetExpiredJobsPageSize) {\n     for (AsyncExecutor asyncExecutor : tenantExecutors.values()) {\n-      asyncExecutor.setResetExpiredJobsPageSize(resetExpiredJobsPageSize);\n+        asyncExecutor.setResetExpiredJobsPageSize(resetExpiredJobsPageSize);\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/530/ExecutorPerTenantAsyncExecutor.java\nindex 57e8b1436dd..0ecb8852977 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/530/ExecutorPerTenantAsyncExecutor.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/530/ExecutorPerTenantAsyncExecutor.java\nindex 57e8b1436dd..0ecb8852977 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/530/ExecutorPerTenantAsyncExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/530/ExecutorPerTenantAsyncExecutor.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}