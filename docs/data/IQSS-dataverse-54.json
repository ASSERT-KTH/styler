{
    "project_name": "IQSS-dataverse",
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "17",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "                tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n                try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n                    tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n                }\n                localFile = tempFile;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/54/RedetectFileTypeCommand.java\nindex 8eeca0cb4cd..54fd78b383e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/54/RedetectFileTypeCommand.java\n@@ -55,7 +55,7 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n \n                 tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n                 try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n-                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n+                FileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n                     tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n                 }\n                 localFile = tempFile;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/54/RedetectFileTypeCommand.java\nindex 8eeca0cb4cd..d014334eaac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/54/RedetectFileTypeCommand.java\n@@ -24,79 +24,83 @@ import javax.ejb.EJBException;\n @RequiredPermissions(Permission.EditDataset)\n public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n \n-    private static final Logger logger = Logger.getLogger(RedetectFileTypeCommand.class.getCanonicalName());\n+  private static final Logger logger = Logger.getLogger(RedetectFileTypeCommand.class.getCanonicalName());\n \n-    final DataFile fileToRedetect;\n-    final boolean dryRun;\n+  final DataFile fileToRedetect;\n+  final boolean dryRun;\n \n-    public RedetectFileTypeCommand(DataverseRequest dataveseRequest, DataFile dataFile, boolean dryRun) {\n-        super(dataveseRequest, dataFile);\n-        this.fileToRedetect = dataFile;\n-        this.dryRun = dryRun;\n-    }\n+  public RedetectFileTypeCommand(DataverseRequest dataveseRequest, DataFile dataFile, boolean dryRun) {\n+    super(dataveseRequest, dataFile);\n+    this.fileToRedetect = dataFile;\n+    this.dryRun = dryRun;\n+  }\n \n-    @Override\n-    public DataFile execute(CommandContext ctxt) throws CommandException {\n-        DataFile filetoReturn = null;\n-        File tempFile = null; \n-        File localFile;\n+  @Override\n+  public DataFile execute(CommandContext ctxt) throws CommandException {\n+    DataFile filetoReturn = null;\n+    File tempFile = null;\n+    File localFile;\n \n-        \n-        try {\n-            StorageIO<DataFile> storageIO;\n \n-            storageIO = fileToRedetect.getStorageIO();\n-            storageIO.open();\n+    try {\n+      StorageIO<DataFile> storageIO;\n \n-            if (storageIO.isLocalFile()) {\n-                localFile = storageIO.getFileSystemPath().toFile();\n-            } else {\n-                // Need to create a temporary local file: \n+      storageIO = fileToRedetect.getStorageIO();\n+      storageIO.open();\n \n-                tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n-                try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n-                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n-                    tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n-                }\n-                localFile = tempFile;\n-            }\n+      if (storageIO.isLocalFile()) {\n+        localFile = storageIO.getFileSystemPath().toFile();\n+      } else {\n+        // Need to create a temporary local file:\n \n-            logger.fine(\"target file: \" + localFile);\n-            String newlyDetectedContentType = FileTypeDetection.determineFileType(localFile);\n-            fileToRedetect.setContentType(newlyDetectedContentType);\n-        } catch (IOException ex) {\n-            throw new CommandException(\"Exception while attempting to get the bytes of the file during file type redetection: \" + ex.getLocalizedMessage(), this);\n-        } finally {\n-            // If we had to create a temp file, delete it now:\n-            if (tempFile != null) {\n-                tempFile.delete();\n-            }\n-        }\n-        \n-        \n-        filetoReturn = fileToRedetect;\n-        if (!dryRun) {\n-            try {\n-                filetoReturn = ctxt.files().save(fileToRedetect);\n-            } catch (EJBException ex) {\n-                throw new CommandException(\"Exception while attempting to save the new file type: \" + EjbUtil.ejbExceptionToString(ex), this);\n-            }\n-            Dataset dataset = fileToRedetect.getOwner();\n-            try {\n-                boolean doNormalSolrDocCleanUp = true;\n-                ctxt.index().indexDataset(dataset, doNormalSolrDocCleanUp);\n-            } catch (Exception ex) {\n-                logger.info(\"Exception while reindexing files during file type redetection: \" + ex.getLocalizedMessage());\n-            }\n-            try {\n-                ExportService instance = ExportService.getInstance();\n-                instance.exportAllFormats(dataset);\n-            } catch (ExportException ex) {\n-                // Just like with indexing, a failure to export is not a fatal condition.\n-                logger.info(\"Exception while exporting metadata files during file type redetection: \" + ex.getLocalizedMessage());\n-            }\n+        tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n+        try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n+             FileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n+          tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n         }\n-        return filetoReturn;\n+        localFile = tempFile;\n+      }\n+\n+      logger.fine(\"target file: \" + localFile);\n+      String newlyDetectedContentType = FileTypeDetection.determineFileType(localFile);\n+      fileToRedetect.setContentType(newlyDetectedContentType);\n+    } catch (IOException ex) {\n+      throw new CommandException(\n+        \"Exception while attempting to get the bytes of the file during file type redetection: \" +\n+          ex.getLocalizedMessage(), this);\n+    } finally {\n+      // If we had to create a temp file, delete it now:\n+      if (tempFile != null) {\n+        tempFile.delete();\n+      }\n+    }\n+\n+\n+    filetoReturn = fileToRedetect;\n+    if (!dryRun) {\n+      try {\n+        filetoReturn = ctxt.files().save(fileToRedetect);\n+      } catch (EJBException ex) {\n+        throw new CommandException(\n+          \"Exception while attempting to save the new file type: \" + EjbUtil.ejbExceptionToString(ex), this);\n+      }\n+      Dataset dataset = fileToRedetect.getOwner();\n+      try {\n+        boolean doNormalSolrDocCleanUp = true;\n+        ctxt.index().indexDataset(dataset, doNormalSolrDocCleanUp);\n+      } catch (Exception ex) {\n+        logger.info(\"Exception while reindexing files during file type redetection: \" + ex.getLocalizedMessage());\n+      }\n+      try {\n+        ExportService instance = ExportService.getInstance();\n+        instance.exportAllFormats(dataset);\n+      } catch (ExportException ex) {\n+        // Just like with indexing, a failure to export is not a fatal condition.\n+        logger\n+          .info(\"Exception while exporting metadata files during file type redetection: \" + ex.getLocalizedMessage());\n+      }\n     }\n+    return filetoReturn;\n+  }\n \n }\n",
            "diff_size": 106
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/54/RedetectFileTypeCommand.java\nindex 8eeca0cb4cd..976eb07ede6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/54/RedetectFileTypeCommand.java\n@@ -41,7 +41,6 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n         File tempFile = null; \n         File localFile;\n \n-        \n         try {\n             StorageIO<DataFile> storageIO;\n \n@@ -55,8 +54,8 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n \n                 tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n                 try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n-                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n-                    tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n+FileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n+    tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n                 }\n                 localFile = tempFile;\n             }\n@@ -72,9 +71,7 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n                 tempFile.delete();\n             }\n         }\n-        \n-        \n-        filetoReturn = fileToRedetect;\n+filetoReturn = fileToRedetect;\n         if (!dryRun) {\n             try {\n                 filetoReturn = ctxt.files().save(fileToRedetect);\n@@ -99,4 +96,4 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n         return filetoReturn;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/54/RedetectFileTypeCommand.java\nindex 8eeca0cb4cd..3bcb7ebc3f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/54/RedetectFileTypeCommand.java\n@@ -21,11 +21,11 @@ import java.nio.channels.ReadableByteChannel;\n import java.util.logging.Logger;\n import javax.ejb.EJBException;\n \n+\n @RequiredPermissions(Permission.EditDataset)\n public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n \n     private static final Logger logger = Logger.getLogger(RedetectFileTypeCommand.class.getCanonicalName());\n-\n     final DataFile fileToRedetect;\n     final boolean dryRun;\n \n@@ -38,42 +38,34 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n     @Override\n     public DataFile execute(CommandContext ctxt) throws CommandException {\n         DataFile filetoReturn = null;\n-        File tempFile = null; \n+        File tempFile = null;\n         File localFile;\n-\n-        \n         try {\n             StorageIO<DataFile> storageIO;\n-\n             storageIO = fileToRedetect.getStorageIO();\n             storageIO.open();\n-\n             if (storageIO.isLocalFile()) {\n                 localFile = storageIO.getFileSystemPath().toFile();\n             } else {\n                 // Need to create a temporary local file: \n-\n                 tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n-                try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n-                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n+                try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel(); FileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n                     tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n                 }\n                 localFile = tempFile;\n             }\n-\n             logger.fine(\"target file: \" + localFile);\n             String newlyDetectedContentType = FileTypeDetection.determineFileType(localFile);\n             fileToRedetect.setContentType(newlyDetectedContentType);\n         } catch (IOException ex) {\n-            throw new CommandException(\"Exception while attempting to get the bytes of the file during file type redetection: \" + ex.getLocalizedMessage(), this);\n+            throw new CommandException(\"Exception while attempting to get the bytes of the file during file type redetection: \" + ex.getLocalizedMessage(),\n+                this);\n         } finally {\n             // If we had to create a temp file, delete it now:\n             if (tempFile != null) {\n                 tempFile.delete();\n             }\n         }\n-        \n-        \n         filetoReturn = fileToRedetect;\n         if (!dryRun) {\n             try {\n@@ -81,6 +73,7 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n             } catch (EJBException ex) {\n                 throw new CommandException(\"Exception while attempting to save the new file type: \" + EjbUtil.ejbExceptionToString(ex), this);\n             }\n+\n             Dataset dataset = fileToRedetect.getOwner();\n             try {\n                 boolean doNormalSolrDocCleanUp = true;\n@@ -99,4 +92,4 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n         return filetoReturn;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/54/RedetectFileTypeCommand.java\nindex 8eeca0cb4cd..54fd78b383e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/54/RedetectFileTypeCommand.java\n@@ -55,7 +55,7 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n \n                 tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n                 try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n-                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n+                FileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n                     tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n                 }\n                 localFile = tempFile;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/54/RedetectFileTypeCommand.java\nindex 8eeca0cb4cd..54fd78b383e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/54/RedetectFileTypeCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/54/RedetectFileTypeCommand.java\n@@ -55,7 +55,7 @@ public class RedetectFileTypeCommand extends AbstractCommand<DataFile> {\n \n                 tempFile = File.createTempFile(\"tempFileTypeCheck\", \".tmp\");\n                 try (ReadableByteChannel targetFileChannel = (ReadableByteChannel) storageIO.getReadChannel();\n-                \t\tFileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n+                FileChannel tempFileChannel = new FileOutputStream(tempFile).getChannel();) {\n                     tempFileChannel.transferFrom(targetFileChannel, 0, storageIO.getSize());\n                 }\n                 localFile = tempFile;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}