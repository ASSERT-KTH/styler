{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "58",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            @Override\n            public Observable<UpsertResponse> call(String key) {\n                return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n            }\n        }).toBlocking().last();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/19/FlushTest.java\nindex e4c592fc141..d170d1f878b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/19/FlushTest.java\n@@ -55,7 +55,8 @@ public class FlushTest extends ClusterDependentTest {\n         Observable.from(keys).flatMap(new Func1<String, Observable<UpsertResponse>>() {\n             @Override\n             public Observable<UpsertResponse> call(String key) {\n-                return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n+                return cluster().send(new UpsertRequest(key, Unpooled\n+                    .copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n             }\n         }).toBlocking().last();\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/19/FlushTest.java\nindex e4c592fc141..bb33bb91cb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/19/FlushTest.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core.cluster;\n \n import com.couchbase.client.core.message.ResponseStatus;\n@@ -55,7 +56,8 @@ public class FlushTest extends ClusterDependentTest {\n         Observable.from(keys).flatMap(new Func1<String, Observable<UpsertResponse>>() {\n             @Override\n             public Observable<UpsertResponse> call(String key) {\n-                return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n+                return cluster()\n+                    .send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n             }\n         }).toBlocking().last();\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/19/FlushTest.java\nindex e4c592fc141..5862204cadd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/19/FlushTest.java\n@@ -62,8 +62,7 @@ public class FlushTest extends ClusterDependentTest {\n         Observable<FlushResponse> response = cluster().send(new FlushRequest(bucket(), password()));\n         assertEquals(ResponseStatus.SUCCESS, response.toBlocking().first().status());\n \n-        List<GetResponse> responses = Observable\n-            .from(keys)\n+        List<GetResponse> responses = Observable.from(keys)\n             .flatMap(new Func1<String, Observable<GetResponse>>() {\n                 @Override\n                 public Observable<GetResponse> call(String key) {\n@@ -77,4 +76,4 @@ public class FlushTest extends ClusterDependentTest {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 33, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 33, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 29, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 63, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 67, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 63, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 59, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/19/FlushTest.java\nindex e4c592fc141..5af115faa33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/19/FlushTest.java\n@@ -34,10 +34,8 @@ import io.netty.util.CharsetUtil;\n import org.junit.Test;\n import rx.Observable;\n import rx.functions.Func1;\n-\n import java.util.Arrays;\n import java.util.List;\n-\n import static org.junit.Assert.assertEquals;\n \n /**\n@@ -46,35 +44,28 @@ import static org.junit.Assert.assertEquals;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n-public class FlushTest extends ClusterDependentTest {\n \n+public class FlushTest extends ClusterDependentTest {\n     @Test\n     public void shouldFlush() {\n         List<String> keys = Arrays.asList(\"key1\", \"key2\", \"key3\");\n-\n         Observable.from(keys).flatMap(new Func1<String, Observable<UpsertResponse>>() {\n-            @Override\n-            public Observable<UpsertResponse> call(String key) {\n-                return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n-            }\n-        }).toBlocking().last();\n-\n+                                 @Override\n+                                 public Observable<UpsertResponse> call(String key) {\n+                                     return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n+                                 }\n+                             }).toBlocking().last();\n         Observable<FlushResponse> response = cluster().send(new FlushRequest(bucket(), password()));\n         assertEquals(ResponseStatus.SUCCESS, response.toBlocking().first().status());\n-\n-        List<GetResponse> responses = Observable\n-            .from(keys)\n-            .flatMap(new Func1<String, Observable<GetResponse>>() {\n-                @Override\n-                public Observable<GetResponse> call(String key) {\n-                    return cluster().send(new GetRequest(key, bucket()));\n-                }\n-            }).toList().toBlocking().single();\n-\n+        List<GetResponse> responses = Observable.from(keys).flatMap(new Func1<String, Observable<GetResponse>>() {\n+                                                               @Override\n+                                                               public Observable<GetResponse> call(String key) {\n+                                                                   return cluster().send(new GetRequest(key, bucket()));\n+                                                               }\n+                                                           }).toList().toBlocking().single();\n         assertEquals(keys.size(), responses.size());\n         for (GetResponse get : responses) {\n             assertEquals(ResponseStatus.NOT_EXISTS, get.status());\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/19/FlushTest.java\nindex e4c592fc141..1d0403ba5b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/19/FlushTest.java\n@@ -55,7 +55,9 @@ public class FlushTest extends ClusterDependentTest {\n         Observable.from(keys).flatMap(new Func1<String, Observable<UpsertResponse>>() {\n             @Override\n             public Observable<UpsertResponse> call(String key) {\n-                return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n+                return cluster().send(new UpsertRequest(key ,Unpooled.copiedBuffer(\"Content\",CharsetUtil.UTF_8),bucket(\n+\n+                )));\n             }\n         }).toBlocking().last();\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/19/FlushTest.java\nindex e4c592fc141..d170d1f878b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/19/FlushTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/19/FlushTest.java\n@@ -55,7 +55,8 @@ public class FlushTest extends ClusterDependentTest {\n         Observable.from(keys).flatMap(new Func1<String, Observable<UpsertResponse>>() {\n             @Override\n             public Observable<UpsertResponse> call(String key) {\n-                return cluster().send(new UpsertRequest(key, Unpooled.copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n+                return cluster().send(new UpsertRequest(key, Unpooled\n+                    .copiedBuffer(\"Content\", CharsetUtil.UTF_8), bucket()));\n             }\n         }).toBlocking().last();\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}