{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4196",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4196/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4196/App.java\nindex 2353c2a70b0..d3156d4bd51 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4196/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4196/App.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell;\n \n import java.util.List;\n@@ -28,75 +29,77 @@ import java.util.List;\n  */\n public interface App\n {\n-    /**\n-     * @return the name of the application.\n-     */\n-    String getName();\n+  /**\n+   * @return the name of the application.\n+   */\n+  String getName();\n \n-    /**\n-     * @param option the name of the option. An option could be like this:\n-     * \"ls -l\" where \"l\" is an option.\n-     * @return the option definition for {@code option}.\n-     */\n-    OptionDefinition getOptionDefinition( String option );\n+  /**\n+   * @param option the name of the option. An option could be like this:\n+   *               \"ls -l\" where \"l\" is an option.\n+   * @return the option definition for {@code option}.\n+   */\n+  OptionDefinition getOptionDefinition(String option);\n \n-    /**\n-     * @return the available options.\n-     */\n-    String[] getAvailableOptions();\n+  /**\n+   * @return the available options.\n+   */\n+  String[] getAvailableOptions();\n \n-    /**\n-     * The actual code for the application.\n-     * @param parser holds the options (w/ or w/o values) as well as arguments.\n-     * @param session the client session (sort of like the environment\n-     * for the execution).\n-     * @param out the output channel for the execution, just like System.out.\n-     * @return the result of the execution. It is up to the client to interpret\n-     * this string, one example is that all apps returns null and the \"exit\"\n-     * app returns \"e\" so that the server interprets the \"e\" as a sign that\n-     * it should exit.\n-     * @throws Exception if the execution fails.\n-     */\n-    Continuation execute( AppCommandParser parser, Session session, Output out )\n-        throws Exception;\n+  /**\n+   * The actual code for the application.\n+   *\n+   * @param parser  holds the options (w/ or w/o values) as well as arguments.\n+   * @param session the client session (sort of like the environment\n+   *                for the execution).\n+   * @param out     the output channel for the execution, just like System.out.\n+   * @return the result of the execution. It is up to the client to interpret\n+   * this string, one example is that all apps returns null and the \"exit\"\n+   * app returns \"e\" so that the server interprets the \"e\" as a sign that\n+   * it should exit.\n+   * @throws Exception if the execution fails.\n+   */\n+  Continuation execute(AppCommandParser parser, Session session, Output out)\n+      throws Exception;\n \n-    /**\n-     * Returns the server this app runs in.\n-     * @return the server this app runs in.\n-     */\n-    AppShellServer getServer();\n+  /**\n+   * Returns the server this app runs in.\n+   *\n+   * @return the server this app runs in.\n+   */\n+  AppShellServer getServer();\n \n-    /**\n-     * @return a general description of this application.\n-     */\n-    String getDescription();\n+  /**\n+   * @return a general description of this application.\n+   */\n+  String getDescription();\n \n-    /**\n-     * @param option the option to get the description for.\n-     * @return a description of a certain option.\n-     */\n-    String getDescription( String option );\n+  /**\n+   * @param option the option to get the description for.\n+   * @return a description of a certain option.\n+   */\n+  String getDescription(String option);\n \n-    /**\n-     * Put code here which will need to run before the shell server is shut down\n-     */\n-    void shutdown();\n+  /**\n+   * Put code here which will need to run before the shell server is shut down\n+   */\n+  void shutdown();\n \n-    /**\n-     * Tries to complete the {@code partOfLine} with likely candidates,\n-     * think of this as a hook for writing TAB-completion. Returned candidates\n-     * should contain the supplied part as well as possible completions.\n-     * Implementing this is optional and it's OK to just return an empty list.\n-     *\n-     * @param partOfLine the part of the line which the client wants to complete\n-     * using TAB-completion.\n-     * @param session the {@link Session} from the client caller.\n-     * @return a list of candidates which includes the supplied {@code partOfLine}\n-     * as well as possible completions. Returns an empty list if no completions found\n-     * or if the implementing class chooses not to implement it properly.\n-     * @throws ShellException if the execution fails\n-     */\n-    List<String> completionCandidates( String partOfLine, Session session ) throws ShellException;\n+  /**\n+   * Tries to complete the {@code partOfLine} with likely candidates,\n+   * think of this as a hook for writing TAB-completion. Returned candidates\n+   * should contain the supplied part as well as possible completions.\n+   * Implementing this is optional and it's OK to just return an empty list.\n+   *\n+   * @param partOfLine the part of the line which the client wants to complete\n+   *                   using TAB-completion.\n+   * @param session    the {@link Session} from the client caller.\n+   * @return a list of candidates which includes the supplied {@code partOfLine}\n+   * as well as possible completions. Returns an empty list if no completions found\n+   * or if the implementing class chooses not to implement it properly.\n+   * @throws ShellException if the execution fails\n+   */\n+  List<String> completionCandidates(String partOfLine, Session session) throws ShellException;\n \n-    boolean takesOptions();\n+  boolean takesOptions();\n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4196/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4196/App.java\nindex 2353c2a70b0..a8fd5b485b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4196/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4196/App.java\n@@ -57,10 +57,9 @@ public interface App\n      * it should exit.\n      * @throws Exception if the execution fails.\n      */\n-    Continuation execute( AppCommandParser parser, Session session, Output out )\n-        throws Exception;\n+    Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception;\n \n-    /**\n+/**\n      * Returns the server this app runs in.\n      * @return the server this app runs in.\n      */\n@@ -99,4 +98,4 @@ public interface App\n     List<String> completionCandidates( String partOfLine, Session session ) throws ShellException;\n \n     boolean takesOptions();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}