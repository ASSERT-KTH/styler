{
    "project_name": "findbugsproject-findbugs",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "527",
                "column": "5",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        // This triggers resource update on IResourceChangeListener's\n        // (BugTreeView)\n    \tres.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n    \tif (res instanceof IProject) {\n            IProject project = (IProject) res;\n            FindbugsPlugin.clearBugCollection(project);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "528",
                    "column": "5",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/47/MarkerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/47/MarkerUtil.java\nindex 05e3422b794..e51fb68f1dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/47/MarkerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/47/MarkerUtil.java\n@@ -524,7 +524,7 @@ public final class MarkerUtil {\n         // remove any markers added by our builder\n         // This triggers resource update on IResourceChangeListener's\n         // (BugTreeView)\n-    \tres.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n+        res.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n     \tif (res instanceof IProject) {\n             IProject project = (IProject) res;\n             FindbugsPlugin.clearBugCollection(project);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/47/MarkerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/47/MarkerUtil.java\nindex 05e3422b794..33e7037a04e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/47/MarkerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/47/MarkerUtil.java\n@@ -112,8 +112,7 @@ public final class MarkerUtil {\n     /**\n      * Create an Eclipse marker for given BugInstance.\n      *\n-     * @param javaProject\n-     *            the project\n+     * @param javaProject the project\n      * @param monitor\n      */\n     public static void createMarkers(final IJavaProject javaProject, final SortedBugCollection theCollection, final ISchedulingRule rule, IProgressMonitor monitor) {\n@@ -135,7 +134,7 @@ public final class MarkerUtil {\n                     FindbugsPlugin.getDefault().logException(e, \"Core exception on add marker\");\n                     return e.getStatus();\n                 }\n-                return monitor1.isCanceled()? Status.CANCEL_STATUS : Status.OK_STATUS;\n+                return monitor1.isCanceled() ? Status.CANCEL_STATUS : Status.OK_STATUS;\n             }\n         };\n         wsJob.setRule(rule);\n@@ -153,7 +152,7 @@ public final class MarkerUtil {\n      * @return never null\n      */\n     public static List<MarkerParameter> createBugParameters(IJavaProject project, BugCollection theCollection,\n-            IProgressMonitor monitor) {\n+                                                            IProgressMonitor monitor) {\n         List<MarkerParameter> bugParameters = new ArrayList<MarkerParameter>();\n         if (project == null) {\n             FindbugsPlugin.getDefault().logException(new NullPointerException(\"project is null\"), \"project is null\");\n@@ -163,7 +162,7 @@ public final class MarkerUtil {\n         while (iterator.hasNext() && !monitor.isCanceled()) {\n             BugInstance bug = iterator.next();\n             DetectorFactory detectorFactory = bug.getDetectorFactory();\n-            if(detectorFactory != null && !detectorFactory.getPlugin().isGloballyEnabled()){\n+            if (detectorFactory != null && !detectorFactory.getPlugin().isGloballyEnabled()) {\n                 continue;\n             }\n             MarkerParameter mp = createMarkerParameter(project, bug);\n@@ -229,7 +228,7 @@ public final class MarkerUtil {\n         }\n         if (Reporter.DEBUG) {\n             System.out\n-            .println(\"Creating marker for \" + resource.getPath() + \": line \" + parameter.primaryLine + bug.getMessage());\n+                .println(\"Creating marker for \" + resource.getPath() + \": line \" + parameter.primaryLine + bug.getMessage());\n         }\n         return parameter;\n     }\n@@ -244,21 +243,19 @@ public final class MarkerUtil {\n         }\n         if (Reporter.DEBUG) {\n             System.out.println(\"NOT found resource for a BUG in BUG in class: \" //$NON-NLS-1$\n-                    + packageName + \".\" //$NON-NLS-1$\n-                    + className + \": \\n\\t\" //$NON-NLS-1$\n-                    + bug.getMessage() + \" / Annotation: \" //$NON-NLS-1$\n-                    + bug.getAnnotationText() + \" / Source Line: \" //$NON-NLS-1$\n-                    + bug.getPrimarySourceLineAnnotation());\n+                + packageName + \".\" //$NON-NLS-1$\n+                + className + \": \\n\\t\" //$NON-NLS-1$\n+                + bug.getMessage() + \" / Annotation: \" //$NON-NLS-1$\n+                + bug.getAnnotationText() + \" / Source Line: \" //$NON-NLS-1$\n+                + bug.getPrimarySourceLineAnnotation());\n         }\n     }\n \n     /**\n      * Get the underlying resource (Java class) for given BugInstance.\n      *\n-     * @param bug\n-     *            the BugInstance\n-     * @param project\n-     *            the project\n+     * @param bug     the BugInstance\n+     * @param project the project\n      * @return the IResource representing the Java class\n      */\n     private static @CheckForNull\n@@ -369,7 +366,7 @@ public final class MarkerUtil {\n             scanner = initScanner(type, sourceRange);\n         } catch (JavaModelException e) {\n             String message = \"Can not complete field annotation \" + field + \" for the field: \" + ifield + \" in class: \"\n-                    + qualifiedClassName + \", type \" + type + \", bug \" + bug;\n+                + qualifiedClassName + \", type \" + type + \", bug \" + bug;\n             if (ex != null) {\n                 // report only first one\n                 e = ex;\n@@ -395,7 +392,7 @@ public final class MarkerUtil {\n     }\n \n     private static void completeInnerClassInfo(String qualifiedClassName, String innerName, @Nonnull IType type, BugInstance bug)\n-            throws JavaModelException {\n+        throws JavaModelException {\n         int lineNbr = findChildSourceLine(type, innerName, bug);\n         // should be always first line, if not found\n         lineNbr = lineNbr <= 0 ? 1 : lineNbr;\n@@ -421,12 +418,10 @@ public final class MarkerUtil {\n     }\n \n     /**\n-     * @param source\n-     *            must be not null\n-     * @param range\n-     *            can be null\n+     * @param source must be not null\n+     * @param range  can be null\n      * @return may return null, otherwise an initialized scanner which may\n-     *         answer which source offset index belongs to which source line\n+     * answer which source offset index belongs to which source line\n      * @throws JavaModelException\n      */\n     private static IScanner initScanner(IType source, ISourceRange range) throws JavaModelException {\n@@ -517,18 +512,17 @@ public final class MarkerUtil {\n      * Remove all FindBugs problem markers for given resource. If the given\n      * resource is project, will also clear bug collection.\n      *\n-     * @param res\n-     *            the resource\n+     * @param res the resource\n      */\n     public static void removeMarkers(IResource res) throws CoreException {\n         // remove any markers added by our builder\n         // This triggers resource update on IResourceChangeListener's\n         // (BugTreeView)\n-    \tres.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n-    \tif (res instanceof IProject) {\n+        res.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n+        if (res instanceof IProject) {\n             IProject project = (IProject) res;\n             FindbugsPlugin.clearBugCollection(project);\n-        }        \n+        }\n     }\n \n     /**\n@@ -536,10 +530,8 @@ public final class MarkerUtil {\n      * previous user classification, return whether or not a warning (bug\n      * instance) should be displayed using a marker.\n      *\n-     * @param bugInstance\n-     *            the warning\n-     * @param filterSettings\n-     *            project filter settings\n+     * @param bugInstance    the warning\n+     * @param filterSettings project filter settings\n      * @return true if the warning should be displayed, false if not\n      */\n     public static boolean shouldDisplayWarning(BugInstance bugInstance, ProjectFilterSettings filterSettings) {\n@@ -549,8 +541,7 @@ public final class MarkerUtil {\n     /**\n      * Attempt to redisplay FindBugs problem markers for given project.\n      *\n-     * @param javaProject\n-     *            the project\n+     * @param javaProject the project\n      */\n     public static void redisplayMarkers(final IJavaProject javaProject) {\n         final IProject project = javaProject.getProject();\n@@ -596,7 +587,7 @@ public final class MarkerUtil {\n      */\n     public static MarkerConfidence findConfidenceForMarker(IMarker marker) {\n         return MarkerConfidence.getConfidence(marker.getAttribute(FindBugsMarker.PRIO_AKA_CONFIDENCE,\n-                MarkerConfidence.Ignore.name()));\n+            MarkerConfidence.Ignore.name()));\n     }\n \n     public static @CheckForNull\n@@ -673,19 +664,16 @@ public final class MarkerUtil {\n     }\n \n     /**\n-     *\n-     * @param parentId\n-     *            java element id of a parent element\n-     * @param childId\n-     *            java element id of possible child\n+     * @param parentId java element id of a parent element\n+     * @param childId  java element id of possible child\n      * @return true if the second string represents a java element which is a\n-     *         direct child of the parent element.\n+     * direct child of the parent element.\n      */\n     @SuppressWarnings(\"restriction\")\n     private static boolean isDirectChild(String parentId, String childId) {\n         return childId.startsWith(parentId) && (childId.length() > (parentId.length() + 1))\n-                // if there is NOT a class file separator, then it's not a direct child\n-                && childId.charAt(parentId.length()) == JavaElement.JEM_CLASSFILE;\n+            // if there is NOT a class file separator, then it's not a direct child\n+            && childId.charAt(parentId.length()) == JavaElement.JEM_CLASSFILE;\n     }\n \n     public static class BugCollectionAndInstance {\n@@ -721,10 +709,9 @@ public final class MarkerUtil {\n     /**\n      * Find the BugInstance associated with given FindBugs marker.\n      *\n-     * @param marker\n-     *            a FindBugs marker\n+     * @param marker a FindBugs marker\n      * @return the BugInstance associated with the marker, or null if we can't\n-     *         find the BugInstance\n+     * find the BugInstance\n      */\n     public static @CheckForNull\n     BugInstance findBugInstanceForMarker(IMarker marker) {\n@@ -738,10 +725,9 @@ public final class MarkerUtil {\n     /**\n      * Find the BugCollectionAndInstance associated with given FindBugs marker.\n      *\n-     * @param marker\n-     *            a FindBugs marker\n+     * @param marker a FindBugs marker\n      * @return the BugInstance associated with the marker, or null if we can't\n-     *         find the BugInstance\n+     * find the BugInstance\n      */\n     public static @CheckForNull\n     BugCollectionAndInstance findBugCollectionAndInstanceForMarker(IMarker marker) {\n@@ -787,13 +773,13 @@ public final class MarkerUtil {\n \n             if (bugType == null) {\n                 FindbugsPlugin.getDefault().logError(\n-                        \"Could not get find attributes for marker \" + marker + \": (\" + bugId + \", \" + primaryLineNumber + \")\");\n+                    \"Could not get find attributes for marker \" + marker + \": (\" + bugId + \", \" + primaryLineNumber + \")\");\n                 return null;\n             }\n             BugInstance bug = bugCollection.findBug(bugId, bugType, primaryLineNumber.intValue());\n-            if(bug == null) {\n+            if (bug == null) {\n                 FindbugsPlugin.getDefault().logError(\n-                        \"Could not get find bug for marker on \" + resource + \": (\" + bugId + \", \" + primaryLineNumber + \")\");\n+                    \"Could not get find bug for marker on \" + resource + \": (\" + bugId + \", \" + primaryLineNumber + \")\");\n                 return null;\n             }\n             return new BugCollectionAndInstance(bugCollection, bug);\n@@ -810,10 +796,9 @@ public final class MarkerUtil {\n     /**\n      * Fish an IMarker out of given selection.\n      *\n-     * @param selection\n-     *            the selection\n+     * @param selection the selection\n      * @return the selected IMarker, or null if we can't find an IMarker in the\n-     *         selection\n+     * selection\n      */\n     public static Set<IMarker> getMarkerFromSelection(ISelection selection) {\n         Set<IMarker> markers = new HashSet<IMarker>();\n@@ -821,7 +806,7 @@ public final class MarkerUtil {\n             return markers;\n         }\n         IStructuredSelection sSelection = (IStructuredSelection) selection;\n-        for (Iterator<?> iter = sSelection.iterator(); iter.hasNext();) {\n+        for (Iterator<?> iter = sSelection.iterator(); iter.hasNext(); ) {\n             Object next = iter.next();\n             markers.addAll(getMarkers(next));\n         }\n@@ -969,7 +954,7 @@ public final class MarkerUtil {\n      *\n      * @param fileOrFolder\n      * @return never null (empty array if nothing there or exception happens).\n-     *         Exception will be logged\n+     * Exception will be logged\n      */\n     public static IMarker[] getAllMarkers(IResource fileOrFolder) {\n         return getMarkers(fileOrFolder, IResource.DEPTH_INFINITE);\n@@ -980,12 +965,12 @@ public final class MarkerUtil {\n      *\n      * @param fileOrFolder\n      * @return never null (empty array if nothing there or exception happens).\n-     *         Exception will be logged\n+     * Exception will be logged\n      */\n     @Nonnull\n     public static IMarker[] getMarkers(IResource fileOrFolder, int depth) {\n-        if(fileOrFolder.getType() == IResource.PROJECT) {\n-            if(!fileOrFolder.isAccessible()) {\n+        if (fileOrFolder.getType() == IResource.PROJECT) {\n+            if (!fileOrFolder.isAccessible()) {\n                 // user just closed the project decorator is working on, avoid exception here\n                 return EMPTY;\n             }\n@@ -999,10 +984,8 @@ public final class MarkerUtil {\n     }\n \n     /**\n-     * @param marker\n-     *            might be null\n-     * @param bugIdToFilter\n-     *            might be null\n+     * @param marker        might be null\n+     * @param bugIdToFilter might be null\n      * @return true if marker should be filtered\n      */\n     public static boolean isFiltered(IMarker marker, Set<String> bugIdToFilter) {\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "528",
                    "column": "5",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/47/MarkerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/47/MarkerUtil.java\nindex 05e3422b794..e51fb68f1dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/47/MarkerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/47/MarkerUtil.java\n@@ -524,7 +524,7 @@ public final class MarkerUtil {\n         // remove any markers added by our builder\n         // This triggers resource update on IResourceChangeListener's\n         // (BugTreeView)\n-    \tres.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n+        res.deleteMarkers(FindBugsMarker.NAME, true, IResource.DEPTH_INFINITE);\n     \tif (res instanceof IProject) {\n             IProject project = (IProject) res;\n             FindbugsPlugin.clearBugCollection(project);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}