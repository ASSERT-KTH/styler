{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "83",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 96).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    log.info(\n        \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n        watermarkEstimatorFactory.getClass(),\n        watermarkIdlePolicyFactory.getClass());\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/3/WatermarkConfiguration.java\nindex 943e6955925..3abe9bbe79d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/3/WatermarkConfiguration.java\n@@ -80,8 +80,9 @@ public abstract class WatermarkConfiguration implements Serializable {\n             .orElse(getDefaultEstimatorFactory());\n \n     log.info(\n-        \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n-        watermarkEstimatorFactory.getClass(),\n+        \"Configured watermark with \"\n+        + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n+         watermarkEstimatorFactory.getClass(),\n         watermarkIdlePolicyFactory.getClass());\n   }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "87",
                    "column": "72",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/3/WatermarkConfiguration.java\nindex 943e6955925..03ef706ee4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/3/WatermarkConfiguration.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.time;\n \n import cz.o2.proxima.time.WatermarkEstimatorFactory;\n@@ -31,9 +32,12 @@ public abstract class WatermarkConfiguration implements Serializable {\n \n   public static final String CFG_PREFIX = \"watermark.\";\n \n-  @Getter private final Map<String, Object> cfg;\n-  @Getter private WatermarkIdlePolicyFactory watermarkIdlePolicyFactory;\n-  @Getter private WatermarkEstimatorFactory watermarkEstimatorFactory;\n+  @Getter\n+  private final Map<String, Object> cfg;\n+  @Getter\n+  private WatermarkIdlePolicyFactory watermarkIdlePolicyFactory;\n+  @Getter\n+  private WatermarkEstimatorFactory watermarkEstimatorFactory;\n \n   protected WatermarkConfiguration(Map<String, Object> cfg) {\n     this.cfg = cfg;\n@@ -80,7 +84,8 @@ public abstract class WatermarkConfiguration implements Serializable {\n             .orElse(getDefaultEstimatorFactory());\n \n     log.info(\n-        \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n+        \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" +\n+            \"idlePolicyFactory {}\",\n         watermarkEstimatorFactory.getClass(),\n         watermarkIdlePolicyFactory.getClass());\n   }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/3/WatermarkConfiguration.java\nindex 943e6955925..fea56bc51f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/3/WatermarkConfiguration.java\n@@ -67,21 +67,17 @@ public abstract class WatermarkConfiguration implements Serializable {\n   protected abstract WatermarkEstimatorFactory getDefaultEstimatorFactory();\n \n   protected void configure() {\n-    watermarkIdlePolicyFactory =\n-        Optional.ofNullable(cfg.get(prefixedKey(\"idle-policy-factory\")))\n+    watermarkIdlePolicyFactory = Optional.ofNullable(cfg.get(prefixedKey(\"idle-policy-factory\")))\n             .map(Object::toString)\n             .map(cls -> Classpath.newInstance(cls, WatermarkIdlePolicyFactory.class))\n             .orElse(getDefaultIdlePolicyFactory());\n-\n-    watermarkEstimatorFactory =\n-        Optional.ofNullable(cfg.get(prefixedKey(\"estimator-factory\")))\n+watermarkEstimatorFactory = Optional.ofNullable(cfg.get(prefixedKey(\"estimator-factory\")))\n             .map(Object::toString)\n             .map(cls -> Classpath.newInstance(cls, WatermarkEstimatorFactory.class))\n             .orElse(getDefaultEstimatorFactory());\n \n-    log.info(\n-        \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n+    log.info(\"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n         watermarkEstimatorFactory.getClass(),\n         watermarkIdlePolicyFactory.getClass());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/3/WatermarkConfiguration.java\nindex 943e6955925..d93969ce43b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/3/WatermarkConfiguration.java\n@@ -25,14 +25,18 @@ import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n /** Watermark configuration */\n+\n+\n @Slf4j\n public abstract class WatermarkConfiguration implements Serializable {\n-  private static final long serialVersionUID = 1L;\n \n+  private static final long serialVersionUID = 1L;\n   public static final String CFG_PREFIX = \"watermark.\";\n \n   @Getter private final Map<String, Object> cfg;\n+\n   @Getter private WatermarkIdlePolicyFactory watermarkIdlePolicyFactory;\n+\n   @Getter private WatermarkEstimatorFactory watermarkEstimatorFactory;\n \n   protected WatermarkConfiguration(Map<String, Object> cfg) {\n@@ -45,6 +49,7 @@ public abstract class WatermarkConfiguration implements Serializable {\n    * @param cfgName config key name\n    * @return full key name\n    */\n+\n   public static String prefixedKey(String cfgName) {\n     if (cfgName.startsWith(CFG_PREFIX)) {\n       return cfgName;\n@@ -57,6 +62,7 @@ public abstract class WatermarkConfiguration implements Serializable {\n    *\n    * @return {@link WatermarkIdlePolicyFactory} default idle watermark policy\n    */\n+\n   protected abstract WatermarkIdlePolicyFactory getDefaultIdlePolicyFactory();\n \n   /**\n@@ -65,23 +71,16 @@ public abstract class WatermarkConfiguration implements Serializable {\n    * @return {@link WatermarkEstimatorFactory} default watermark estimator factory.\n    */\n   protected abstract WatermarkEstimatorFactory getDefaultEstimatorFactory();\n-\n   protected void configure() {\n-    watermarkIdlePolicyFactory =\n-        Optional.ofNullable(cfg.get(prefixedKey(\"idle-policy-factory\")))\n-            .map(Object::toString)\n-            .map(cls -> Classpath.newInstance(cls, WatermarkIdlePolicyFactory.class))\n-            .orElse(getDefaultIdlePolicyFactory());\n-\n-    watermarkEstimatorFactory =\n-        Optional.ofNullable(cfg.get(prefixedKey(\"estimator-factory\")))\n-            .map(Object::toString)\n-            .map(cls -> Classpath.newInstance(cls, WatermarkEstimatorFactory.class))\n-            .orElse(getDefaultEstimatorFactory());\n-\n+    watermarkIdlePolicyFactory = Optional.ofNullable(cfg.get(prefixedKey(\"idle-policy-factory\"))).map(Object::toString)\n+                                                                                                 .map(cls -> Classpath.newInstance(cls, WatermarkIdlePolicyFactory.class))\n+                                                                                                 .orElse(getDefaultIdlePolicyFactory());\n+    watermarkEstimatorFactory = Optional.ofNullable(cfg.get(prefixedKey(\"estimator-factory\"))).map(Object::toString)\n+                                                                                              .map(cls -> Classpath.newInstance(cls, WatermarkEstimatorFactory.class))\n+                                                                                              .orElse(getDefaultEstimatorFactory());\n     log.info(\n         \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n         watermarkEstimatorFactory.getClass(),\n         watermarkIdlePolicyFactory.getClass());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/3/WatermarkConfiguration.java\nindex 943e6955925..3abe9bbe79d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/3/WatermarkConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/3/WatermarkConfiguration.java\n@@ -80,8 +80,9 @@ public abstract class WatermarkConfiguration implements Serializable {\n             .orElse(getDefaultEstimatorFactory());\n \n     log.info(\n-        \"Configured watermark with \" + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n-        watermarkEstimatorFactory.getClass(),\n+        \"Configured watermark with \"\n+        + \"watermarkEstimatorFactory {},\" + \"idlePolicyFactory {}\",\n+         watermarkEstimatorFactory.getClass(),\n         watermarkIdlePolicyFactory.getClass());\n   }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}