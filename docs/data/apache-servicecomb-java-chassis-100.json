{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "100",
    "information": {
        "errors": [
            {
                "line": "29",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n\n  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n\n  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/100/LoginResponse.java\nindex a27fc7d5c88..60feb980f24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/100/LoginResponse.java\n@@ -26,8 +26,9 @@ public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer<LoginResponse> rootDeserializer =\n+    protoMapperFactory.createFromName(\"LoginResponse.proto\")\n+       .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n       .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/100/LoginResponse.java\nindex a27fc7d5c88..4a391544527 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/100/LoginResponse.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.transport.highway.message;\n \n import org.apache.servicecomb.foundation.protobuf.ProtoMapperFactory;\n@@ -26,8 +27,9 @@ public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer<LoginResponse> rootDeserializer =\n+      protoMapperFactory.createFromName(\"LoginResponse.proto\")\n+          .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n       .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/100/LoginResponse.java\nindex a27fc7d5c88..de40a5bdb23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/100/LoginResponse.java\n@@ -60,4 +60,4 @@ public class LoginResponse {\n   public void setZipName(String zipName) {\n     this.zipName = zipName;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/100/LoginResponse.java\nindex a27fc7d5c88..8d75cdcf628 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/100/LoginResponse.java\n@@ -19,18 +19,15 @@ package org.apache.servicecomb.transport.highway.message;\n import org.apache.servicecomb.foundation.protobuf.ProtoMapperFactory;\n import org.apache.servicecomb.foundation.protobuf.RootDeserializer;\n import org.apache.servicecomb.foundation.protobuf.RootSerializer;\n-\n import io.vertx.core.buffer.Buffer;\n \n public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\").createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n-  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\").createRootSerializer(\"LoginResponse\", LoginResponse.class);\n \n   public static RootSerializer getRootSerializer() {\n     return rootSerializer;\n@@ -43,6 +40,7 @@ public class LoginResponse {\n   private String protocol;\n \n   // \u538b\u7f29\u7b97\u6cd5\u540d\u5b57\n+\n   private String zipName;\n \n   public String getProtocol() {\n@@ -60,4 +58,4 @@ public class LoginResponse {\n   public void setZipName(String zipName) {\n     this.zipName = zipName;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/100/LoginResponse.java\nindex a27fc7d5c88..60feb980f24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/100/LoginResponse.java\n@@ -26,8 +26,9 @@ public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer<LoginResponse> rootDeserializer =\n+    protoMapperFactory.createFromName(\"LoginResponse.proto\")\n+       .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n       .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "34",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "29",
                    "column": "36",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "29",
                    "column": "51",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "29",
                    "column": "67",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "31",
                    "column": "19",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/100/LoginResponse.java\nindex a27fc7d5c88..846ef0516af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/100/LoginResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/100/LoginResponse.java\n@@ -26,8 +26,10 @@ public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer < LoginResponse>rootDeserializer=\n+  protoMapperFactory\n+  .createFromName( \"LoginResponse.proto\").\n+  createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n       .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}