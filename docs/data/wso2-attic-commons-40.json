{
    "project_name": "wso2-attic-commons",
    "error_id": "40",
    "information": {
        "errors": [
            {
                "line": "175",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n                public Long execute(EntityManager em) {\n                    Query query = em.createNamedQuery((currentStory.isNew()) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n                    query.setParameter(\"name\", newName);\n                    query.setParameter(\"sprint\", sprintManager.getCurrentSprint());\n                    if (!currentStory.isNew()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/40/StoryManager.java\nindex 3ab1d59637a..829230d2ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/40/StoryManager.java\n@@ -172,7 +172,8 @@ public class StoryManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentStory.isNew()) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n+                    Query query = em.createNamedQuery((currentStory.isNew()\n+                    ) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n                     query.setParameter(\"name\", newName);\n                     query.setParameter(\"sprint\", sprintManager.getCurrentSprint());\n                     if (!currentStory.isNew()) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/40/StoryManager.java\nindex 3ab1d59637a..905893ee079 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/40/StoryManager.java\n@@ -66,161 +66,162 @@ import javax.faces.context.ExternalContext;\n @SessionScoped\n public class StoryManager extends AbstractManager implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    @Inject\n-    private SprintManager sprintManager;\n-    private Story currentStory;\n-\n-    @PostConstruct\n-    public void construct() {\n-        init();\n-    }\n-\n-    @PreDestroy\n-    public void destroy() {\n-        sprintManager = null;\n-        currentStory = null;\n-        \n-        FacesContext context = FacesContext.getCurrentInstance();\n-        if (null != context) {\n-            ExternalContext extContext = context.getExternalContext();\n-            if (null != extContext) {\n-                Map sessionMap = extContext.getSessionMap();\n-                if (null != sessionMap) {\n-                    sessionMap.remove(\"storyManager\");\n-                }\n-            }\n+  private static final long serialVersionUID = 1L;\n+  @Inject\n+  private SprintManager sprintManager;\n+  private Story currentStory;\n+\n+  @PostConstruct\n+  public void construct() {\n+    init();\n+  }\n+\n+  @PreDestroy\n+  public void destroy() {\n+    sprintManager = null;\n+    currentStory = null;\n+\n+    FacesContext context = FacesContext.getCurrentInstance();\n+    if (null != context) {\n+      ExternalContext extContext = context.getExternalContext();\n+      if (null != extContext) {\n+        Map sessionMap = extContext.getSessionMap();\n+        if (null != sessionMap) {\n+          sessionMap.remove(\"storyManager\");\n         }\n-\n+      }\n     }\n \n-    public void init() {\n-        Sprint currentSprint = sprintManager.getCurrentSprint();\n+  }\n \n-        if (currentSprint != null) {\n-            Story story = new Story();\n-            story.setSprint(currentSprint);\n-            setCurrentStory(story);\n-        }\n-    }\n+  public void init() {\n+    Sprint currentSprint = sprintManager.getCurrentSprint();\n \n-    public String create() {\n-        Story story = new Story();\n-        story.setSprint(sprintManager.getCurrentSprint());\n-        setCurrentStory(story);\n-        return \"create\";\n+    if (currentSprint != null) {\n+      Story story = new Story();\n+      story.setSprint(currentSprint);\n+      setCurrentStory(story);\n     }\n+  }\n \n-    public String save() {\n-        if (currentStory != null) {\n-            try {\n-                Story merged = doInTransaction(new PersistenceAction<Story>() {\n-\n-                    public Story execute(EntityManager em) {\n-                        if (currentStory.isNew()) {\n-                            em.persist(currentStory);\n-                        } else if (!em.contains(currentStory)) {\n-                            return em.merge(currentStory);\n-                        }\n-                        return currentStory;\n-                    }\n-                });\n-                if (!currentStory.equals(merged)) {\n-                    setCurrentStory(merged);\n-                }\n-                sprintManager.getCurrentSprint().addStory(merged);\n-            } catch (Exception e) {\n-                getLogger(getClass()).log(Level.SEVERE, \"Error on try to save Story: \" + currentStory, e);\n-                addMessage(\"Error on try to save Story\", FacesMessage.SEVERITY_ERROR);\n-                return null;\n-            }\n-        }\n-        return \"show\";\n-    }\n+  public String create() {\n+    Story story = new Story();\n+    story.setSprint(sprintManager.getCurrentSprint());\n+    setCurrentStory(story);\n+    return \"create\";\n+  }\n \n-    public String edit(Story story) {\n-        setCurrentStory(story);\n-        return \"edit\";\n-    }\n+  public String save() {\n+    if (currentStory != null) {\n+      try {\n+        Story merged = doInTransaction(new PersistenceAction<Story>() {\n \n-    public String remove(final Story story) {\n-        if (story != null) {\n-            try {\n-                doInTransaction(new PersistenceActionWithoutResult() {\n-\n-                    public void execute(EntityManager em) {\n-                        Query query = em.createNamedQuery(\"task.remove.ByProject\");\n-                        query.setParameter(\"project\", story.getSprint().getProject());\n-                        query.executeUpdate();\n-\n-                        em.remove(em.find(Story.class, story.getId()));\n-                    }\n-                });\n-                sprintManager.getCurrentSprint().removeStory(story);\n-            } catch (Exception e) {\n-                getLogger(getClass()).log(Level.SEVERE, \"Error on try to remove Story: \" + currentStory, e);\n-                addMessage(\"Error on try to remove Story\", FacesMessage.SEVERITY_ERROR);\n-                return null;\n+          public Story execute(EntityManager em) {\n+            if (currentStory.isNew()) {\n+              em.persist(currentStory);\n+            } else if (!em.contains(currentStory)) {\n+              return em.merge(currentStory);\n             }\n+            return currentStory;\n+          }\n+        });\n+        if (!currentStory.equals(merged)) {\n+          setCurrentStory(merged);\n         }\n-        return \"show\";\n-    }\n-\n-    public void checkUniqueStoryName(FacesContext context, UIComponent component, Object newValue) {\n-        final String newName = (String) newValue;\n-        try {\n-            Long count = doInTransaction(new PersistenceAction<Long>() {\n-\n-                public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentStory.isNew()) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n-                    query.setParameter(\"name\", newName);\n-                    query.setParameter(\"sprint\", sprintManager.getCurrentSprint());\n-                    if (!currentStory.isNew()) {\n-                        query.setParameter(\"currentStory\", currentStory);\n-                    }\n-                    return (Long) query.getSingleResult();\n-                }\n-            });\n-            if (count != null && count > 0) {\n-                throw new ValidatorException(getFacesMessageForKey(\"story.form.label.name.unique\"));\n-            }\n-        } catch (ManagerException ex) {\n-            Logger.getLogger(StoryManager.class.getName()).log(Level.SEVERE, null, ex);\n+        sprintManager.getCurrentSprint().addStory(merged);\n+      } catch (Exception e) {\n+        getLogger(getClass()).log(Level.SEVERE, \"Error on try to save Story: \" + currentStory, e);\n+        addMessage(\"Error on try to save Story\", FacesMessage.SEVERITY_ERROR);\n+        return null;\n+      }\n+    }\n+    return \"show\";\n+  }\n+\n+  public String edit(Story story) {\n+    setCurrentStory(story);\n+    return \"edit\";\n+  }\n+\n+  public String remove(final Story story) {\n+    if (story != null) {\n+      try {\n+        doInTransaction(new PersistenceActionWithoutResult() {\n+\n+          public void execute(EntityManager em) {\n+            Query query = em.createNamedQuery(\"task.remove.ByProject\");\n+            query.setParameter(\"project\", story.getSprint().getProject());\n+            query.executeUpdate();\n+\n+            em.remove(em.find(Story.class, story.getId()));\n+          }\n+        });\n+        sprintManager.getCurrentSprint().removeStory(story);\n+      } catch (Exception e) {\n+        getLogger(getClass()).log(Level.SEVERE, \"Error on try to remove Story: \" + currentStory, e);\n+        addMessage(\"Error on try to remove Story\", FacesMessage.SEVERITY_ERROR);\n+        return null;\n+      }\n+    }\n+    return \"show\";\n+  }\n+\n+  public void checkUniqueStoryName(FacesContext context, UIComponent component, Object newValue) {\n+    final String newName = (String) newValue;\n+    try {\n+      Long count = doInTransaction(new PersistenceAction<Long>() {\n+\n+        public Long execute(EntityManager em) {\n+          Query query = em.createNamedQuery(\n+            (currentStory.isNew()) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n+          query.setParameter(\"name\", newName);\n+          query.setParameter(\"sprint\", sprintManager.getCurrentSprint());\n+          if (!currentStory.isNew()) {\n+            query.setParameter(\"currentStory\", currentStory);\n+          }\n+          return (Long) query.getSingleResult();\n         }\n-    }\n-\n-    public String cancelEdit() {\n-        return \"show\";\n-    }\n-    \n-    public String showTasks(Story story) {\n-        setCurrentStory(story);\n-        return \"showTasks\";\n-    }\n-\n-    public Story getCurrentStory() {\n-        return currentStory;\n-    }\n-\n-    public void setCurrentStory(Story currentStory) {\n-        this.currentStory = currentStory;\n-    }\n-\n-    public Sprint getSprint() {\n-        return sprintManager.getCurrentSprint();\n-    }\n-\n-    public void setSprint(Sprint sprint) {\n-        sprintManager.setCurrentSprint(sprint);\n-    }\n-\n-    public SprintManager getSprintManager() {\n-        return sprintManager;\n-    }\n-\n-    public void setSprintManager(SprintManager sprintManager) {\n-        this.sprintManager = sprintManager;\n-    }\n+      });\n+      if (count != null && count > 0) {\n+        throw new ValidatorException(getFacesMessageForKey(\"story.form.label.name.unique\"));\n+      }\n+    } catch (ManagerException ex) {\n+      Logger.getLogger(StoryManager.class.getName()).log(Level.SEVERE, null, ex);\n+    }\n+  }\n+\n+  public String cancelEdit() {\n+    return \"show\";\n+  }\n+\n+  public String showTasks(Story story) {\n+    setCurrentStory(story);\n+    return \"showTasks\";\n+  }\n+\n+  public Story getCurrentStory() {\n+    return currentStory;\n+  }\n+\n+  public void setCurrentStory(Story currentStory) {\n+    this.currentStory = currentStory;\n+  }\n+\n+  public Sprint getSprint() {\n+    return sprintManager.getCurrentSprint();\n+  }\n+\n+  public void setSprint(Sprint sprint) {\n+    sprintManager.setCurrentSprint(sprint);\n+  }\n+\n+  public SprintManager getSprintManager() {\n+    return sprintManager;\n+  }\n+\n+  public void setSprintManager(SprintManager sprintManager) {\n+    this.sprintManager = sprintManager;\n+  }\n \n \n }\n",
            "diff_size": 185
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/40/StoryManager.java\nindex 3ab1d59637a..e3de469e304 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/40/StoryManager.java\n@@ -223,4 +223,4 @@ public class StoryManager extends AbstractManager implements Serializable {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/40/StoryManager.java\nindex 3ab1d59637a..829230d2ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/40/StoryManager.java\n@@ -172,7 +172,8 @@ public class StoryManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentStory.isNew()) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n+                    Query query = em.createNamedQuery((currentStory.isNew()\n+                    ) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n                     query.setParameter(\"name\", newName);\n                     query.setParameter(\"sprint\", sprintManager.getCurrentSprint());\n                     if (!currentStory.isNew()) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/40/StoryManager.java\nindex 3ab1d59637a..c1a368def31 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/40/StoryManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/40/StoryManager.java\n@@ -172,8 +172,9 @@ public class StoryManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((currentStory.isNew()) ? \"story.new.countByNameAndSprint\" : \"story.countByNameAndSprint\");\n-                    query.setParameter(\"name\", newName);\n+                    Query query = em.createNamedQuery(\n+                            (currentStory.isNew() ) ? \"story.new.countByNameAndSprint\" :\"story.countByNameAndSprint\")\n+                    ;query.setParameter(\"name\", newName);\n                     query.setParameter(\"sprint\", sprintManager.getCurrentSprint());\n                     if (!currentStory.isNew()) {\n                         query.setParameter(\"currentStory\", currentStory);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}