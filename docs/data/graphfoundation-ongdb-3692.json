{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3692",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "401",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3692/PrettyPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3692/PrettyPrinter.java\nindex 7591a56d365..550de9f608a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3692/PrettyPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3692/PrettyPrinter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.utils;\n \n import java.time.LocalDate;\n@@ -55,376 +56,375 @@ import static java.lang.String.format;\n  */\n public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n {\n-    private final Deque<Writer> stack = new ArrayDeque<>();\n-    private final String quoteMark;\n-\n-    public PrettyPrinter()\n-    {\n-        this( \"\\\"\" );\n-    }\n-\n-    public PrettyPrinter( String quoteMark )\n-    {\n-        this.quoteMark = quoteMark;\n-        stack.push( new ValueWriter() );\n-    }\n-\n-    @Override\n-    public void writeNodeReference( long nodeId )\n-    {\n-        append( format( \"(id=%d)\", nodeId ) );\n-    }\n-\n-    @Override\n-    public void writeNode( long nodeId, TextArray labels, MapValue properties )\n-    {\n-        append( format( \"(id=%d\", nodeId ) );\n-        String sep = \" \";\n-        for ( int i = 0; i < labels.length(); i++ )\n-        {\n-            append( sep );\n-            append( \":\" + labels.stringValue( i ) );\n-            sep = \"\";\n-        }\n-        if ( properties.size() > 0 )\n-        {\n-            append( \" \" );\n-            properties.writeTo( this );\n-        }\n-\n-        append( \")\" );\n-    }\n-\n-    @Override\n-    public void writeRelationshipReference( long relId )\n-    {\n-        append( format( \"-[id=%d]-\", relId ) );\n-    }\n-\n-    @Override\n-    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-    {\n-        append( format( \"-[id=%d :%s\", relId, type.stringValue() ) );\n-        if ( properties.size() > 0 )\n-        {\n-            append( \" \" );\n-            properties.writeTo( this );\n-        }\n-        append( \"]-\" );\n-    }\n-\n-    @Override\n-    public void beginMap( int size )\n-    {\n-        stack.push( new MapWriter() );\n-    }\n-\n-    @Override\n-    public void endMap()\n-    {\n-        assert !stack.isEmpty();\n-        append( stack.pop().done() );\n-    }\n-\n-    @Override\n-    public void beginList( int size )\n-    {\n-        stack.push( new ListWriter() );\n-    }\n-\n-    @Override\n-    public void endList()\n-    {\n-        assert !stack.isEmpty();\n-        append( stack.pop().done() );\n-    }\n-\n-    @Override\n-    public void writePath( NodeValue[] nodes, RelationshipValue[] relationships )\n-    {\n-        if ( nodes.length == 0 )\n-        {\n-            return;\n-        }\n-        //Path guarantees that nodes.length = edges.length = 1\n-        nodes[0].writeTo( this );\n-        for ( int i = 0; i < relationships.length; i++ )\n-        {\n-            relationships[i].writeTo( this );\n-            append( \">\" );\n-            nodes[i + 1].writeTo( this );\n-        }\n-\n-    }\n-\n-    @Override\n-    public void writePoint( CoordinateReferenceSystem crs, double[] coordinate ) throws RuntimeException\n-    {\n-        append( \"{geometry: {type: \\\"Point\\\", coordinates: \" );\n-        append( Arrays.toString(coordinate) );\n-        append( \", crs: {type: link, properties: {href: \\\"\" );\n-        append( crs.getHref() );\n-        append( \"\\\", code: \" );\n-        append( Integer.toString( crs.getCode() ) );\n-        append( \"}}}}\" );\n-    }\n-\n-    @Override\n-    public void writeDuration( long months, long days, long seconds, int nanos ) throws RuntimeException\n-    {\n-        append( \"{duration: {months: \" );\n-        append( Long.toString( months ) );\n-        append( \", days: \" );\n-        append( Long.toString( days ) );\n-        append( \", seconds: \" );\n-        append( Long.toString( seconds ) );\n-        append( \", nanos: \" );\n-        append( Long.toString( nanos ) );\n-        append( \"}}\" );\n-    }\n-\n-    @Override\n-    public void writeDate( LocalDate localDate ) throws RuntimeException\n-    {\n-        append( \"{date: \" );\n-        append( quote( localDate.toString() ) );\n-        append( \"}\" );\n-    }\n-\n-    @Override\n-    public void writeLocalTime( LocalTime localTime ) throws RuntimeException\n-    {\n-        append( \"{localTime: \" );\n-        append( quote( localTime.toString() ) );\n-        append( \"}\" );\n-    }\n-\n-    @Override\n-    public void writeTime( OffsetTime offsetTime ) throws RuntimeException\n-    {\n-        append( \"{time: \" );\n-        append( quote( offsetTime.toString() ) );\n-        append( \"}\" );\n-    }\n-\n-    @Override\n-    public void writeLocalDateTime( LocalDateTime localDateTime ) throws RuntimeException\n-    {\n-        append( \"{localDateTime: \" );\n-        append( quote( localDateTime.toString() ) );\n-        append( \"}\" );\n-    }\n-\n-    @Override\n-    public void writeDateTime( ZonedDateTime zonedDateTime ) throws RuntimeException\n-    {\n-        append( \"{datetime: \" );\n-        append( quote( zonedDateTime.toString() ) );\n-        append( \"}\" );\n-    }\n+  private final Deque<Writer> stack = new ArrayDeque<>();\n+  private final String quoteMark;\n+\n+  public PrettyPrinter()\n+  {\n+    this(\"\\\"\");\n+  }\n+\n+  public PrettyPrinter(String quoteMark)\n+  {\n+    this.quoteMark = quoteMark;\n+    stack.push(new ValueWriter());\n+  }\n+\n+  @Override\n+  public void writeNodeReference(long nodeId)\n+  {\n+    append(format(\"(id=%d)\", nodeId));\n+  }\n+\n+  @Override\n+  public void writeNode(long nodeId, TextArray labels, MapValue properties)\n+  {\n+    append(format(\"(id=%d\", nodeId));\n+    String sep = \" \";\n+    for (int i = 0; i < labels.length(); i++)\n+    {\n+      append(sep);\n+      append(\":\" + labels.stringValue(i));\n+      sep = \"\";\n+    }\n+    if (properties.size() > 0)\n+    {\n+      append(\" \");\n+      properties.writeTo(this);\n+    }\n+\n+    append(\")\");\n+  }\n+\n+  @Override\n+  public void writeRelationshipReference(long relId)\n+  {\n+    append(format(\"-[id=%d]-\", relId));\n+  }\n+\n+  @Override\n+  public void writeRelationship(long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties)\n+  {\n+    append(format(\"-[id=%d :%s\", relId, type.stringValue()));\n+    if (properties.size() > 0)\n+    {\n+      append(\" \");\n+      properties.writeTo(this);\n+    }\n+    append(\"]-\");\n+  }\n+\n+  @Override\n+  public void beginMap(int size)\n+  {\n+    stack.push(new MapWriter());\n+  }\n+\n+  @Override\n+  public void endMap()\n+  {\n+    assert !stack.isEmpty();\n+    append(stack.pop().done());\n+  }\n+\n+  @Override\n+  public void beginList(int size)\n+  {\n+    stack.push(new ListWriter());\n+  }\n+\n+  @Override\n+  public void endList()\n+  {\n+    assert !stack.isEmpty();\n+    append(stack.pop().done());\n+  }\n+\n+  @Override\n+  public void writePath(NodeValue[] nodes, RelationshipValue[] relationships)\n+  {\n+    if (nodes.length == 0)\n+    {\n+      return;\n+    }\n+    //Path guarantees that nodes.length = edges.length = 1\n+    nodes[0].writeTo(this);\n+    for (int i = 0; i < relationships.length; i++)\n+    {\n+      relationships[i].writeTo(this);\n+      append(\">\");\n+      nodes[i + 1].writeTo(this);\n+    }\n+\n+  }\n+\n+  @Override\n+  public void writePoint(CoordinateReferenceSystem crs, double[] coordinate) throws RuntimeException\n+  {\n+    append(\"{geometry: {type: \\\"Point\\\", coordinates: \");\n+    append(Arrays.toString(coordinate));\n+    append(\", crs: {type: link, properties: {href: \\\"\");\n+    append(crs.getHref());\n+    append(\"\\\", code: \");\n+    append(Integer.toString(crs.getCode()));\n+    append(\"}}}}\");\n+  }\n+\n+  @Override\n+  public void writeDuration(long months, long days, long seconds, int nanos) throws RuntimeException\n+  {\n+    append(\"{duration: {months: \");\n+    append(Long.toString(months));\n+    append(\", days: \");\n+    append(Long.toString(days));\n+    append(\", seconds: \");\n+    append(Long.toString(seconds));\n+    append(\", nanos: \");\n+    append(Long.toString(nanos));\n+    append(\"}}\");\n+  }\n+\n+  @Override\n+  public void writeDate(LocalDate localDate) throws RuntimeException\n+  {\n+    append(\"{date: \");\n+    append(quote(localDate.toString()));\n+    append(\"}\");\n+  }\n+\n+  @Override\n+  public void writeLocalTime(LocalTime localTime) throws RuntimeException\n+  {\n+    append(\"{localTime: \");\n+    append(quote(localTime.toString()));\n+    append(\"}\");\n+  }\n+\n+  @Override\n+  public void writeTime(OffsetTime offsetTime) throws RuntimeException\n+  {\n+    append(\"{time: \");\n+    append(quote(offsetTime.toString()));\n+    append(\"}\");\n+  }\n+\n+  @Override\n+  public void writeLocalDateTime(LocalDateTime localDateTime) throws RuntimeException\n+  {\n+    append(\"{localDateTime: \");\n+    append(quote(localDateTime.toString()));\n+    append(\"}\");\n+  }\n+\n+  @Override\n+  public void writeDateTime(ZonedDateTime zonedDateTime) throws RuntimeException\n+  {\n+    append(\"{datetime: \");\n+    append(quote(zonedDateTime.toString()));\n+    append(\"}\");\n+  }\n+\n+  @Override\n+  public void writeNull()\n+  {\n+    append(\"<null>\");\n+  }\n+\n+  @Override\n+  public void writeBoolean(boolean value)\n+  {\n+    append(Boolean.toString(value));\n+  }\n+\n+  @Override\n+  public void writeInteger(byte value)\n+  {\n+    append(Byte.toString(value));\n+  }\n+\n+  @Override\n+  public void writeInteger(short value)\n+  {\n+    append(Short.toString(value));\n+  }\n+\n+  @Override\n+  public void writeInteger(int value)\n+  {\n+    append(Integer.toString(value));\n+  }\n+\n+  @Override\n+  public void writeInteger(long value)\n+  {\n+    append(Long.toString(value));\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(float value)\n+  {\n+    append(Float.toString(value));\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(double value)\n+  {\n+    append(Double.toString(value));\n+  }\n+\n+  @Override\n+  public void writeString(String value)\n+  {\n+    append(quote(value));\n+  }\n+\n+  @Override\n+  public void writeString(char value)\n+  {\n+    writeString(Character.toString(value));\n+  }\n+\n+  @Override\n+  public void beginArray(int size, ArrayType arrayType)\n+  {\n+    stack.push(new ListWriter());\n+  }\n+\n+  @Override\n+  public void endArray()\n+  {\n+    assert !stack.isEmpty();\n+    append(stack.pop().done());\n+  }\n+\n+  @Override\n+  public void writeByteArray(byte[] value)\n+  {\n+    String sep = \"\";\n+    append(\"[\");\n+    for (byte b : value)\n+    {\n+      append(sep);\n+      append(Byte.toString(b));\n+      sep = \", \";\n+    }\n+    append(\"]\");\n+  }\n+\n+  public String value()\n+  {\n+    assert stack.size() == 1;\n+    return stack.getLast().done();\n+  }\n+\n+  private void append(String value)\n+  {\n+    assert !stack.isEmpty();\n+    Writer head = stack.peek();\n+    head.append(value);\n+  }\n+\n+  private String quote(String value)\n+  {\n+    assert !stack.isEmpty();\n+    Writer head = stack.peek();\n+    return head.quote(value);\n+  }\n+\n+  private interface Writer\n+  {\n+    void append(String value);\n+\n+    String done();\n+\n+    String quote(String in);\n+  }\n+\n+  private abstract class BaseWriter implements Writer\n+  {\n+    protected final StringBuilder builder = new StringBuilder();\n \n     @Override\n-    public void writeNull()\n+    public String done()\n     {\n-        append( \"<null>\" );\n+      return builder.toString();\n     }\n \n     @Override\n-    public void writeBoolean( boolean value )\n+    public String quote(String in)\n     {\n-        append( Boolean.toString( value ) );\n+      return quoteMark + in + quoteMark;\n     }\n+  }\n \n+  private class ValueWriter extends BaseWriter\n+  {\n     @Override\n-    public void writeInteger( byte value )\n+    public void append(String value)\n     {\n-        append( Byte.toString( value ) );\n+      builder.append(value);\n     }\n+  }\n \n-    @Override\n-    public void writeInteger( short value )\n-    {\n-        append( Short.toString( value ) );\n-    }\n+  private class MapWriter extends BaseWriter\n+  {\n+    private boolean writeKey = true;\n+    private String sep = \"\";\n \n-    @Override\n-    public void writeInteger( int value )\n+    MapWriter()\n     {\n-        append( Integer.toString( value ) );\n+      super();\n+      builder.append(\"{\");\n     }\n \n     @Override\n-    public void writeInteger( long value )\n+    public void append(String value)\n     {\n-        append( Long.toString( value ) );\n+      if (writeKey)\n+      {\n+        builder.append(sep).append(value).append(\": \");\n+      } else\n+      {\n+        builder.append(value);\n+      }\n+      writeKey = !writeKey;\n+      sep = \", \";\n     }\n \n     @Override\n-    public void writeFloatingPoint( float value )\n+    public String done()\n     {\n-        append( Float.toString( value ) );\n+      return builder.append(\"}\").toString();\n     }\n \n     @Override\n-    public void writeFloatingPoint( double value )\n+    public String quote(String in)\n     {\n-        append( Double.toString( value ) );\n+      return writeKey ? in : super.quote(in);\n     }\n+  }\n \n-    @Override\n-    public void writeString( String value )\n-    {\n-        append( quote( value ) );\n-    }\n+  private class ListWriter extends BaseWriter\n+  {\n+    private String sep = \"\";\n \n-    @Override\n-    public void writeString( char value )\n+    ListWriter()\n     {\n-        writeString( Character.toString( value ) );\n+      super();\n+      builder.append(\"[\");\n     }\n \n     @Override\n-    public void beginArray( int size, ArrayType arrayType )\n+    public void append(String value)\n     {\n-        stack.push( new ListWriter() );\n+      builder.append(sep).append(value);\n+      sep = \", \";\n     }\n \n     @Override\n-    public void endArray()\n-    {\n-        assert !stack.isEmpty();\n-        append( stack.pop().done() );\n-    }\n-\n-    @Override\n-    public void writeByteArray( byte[] value )\n-    {\n-        String sep = \"\";\n-        append( \"[\" );\n-        for ( byte b : value )\n-        {\n-            append( sep );\n-            append( Byte.toString( b ) );\n-            sep = \", \";\n-        }\n-        append( \"]\" );\n-    }\n-\n-    public String value()\n-    {\n-        assert stack.size() == 1;\n-        return stack.getLast().done();\n-    }\n-\n-    private void append( String value )\n-    {\n-        assert !stack.isEmpty();\n-        Writer head = stack.peek();\n-        head.append( value );\n-    }\n-\n-    private String quote( String value )\n-    {\n-        assert !stack.isEmpty();\n-        Writer head = stack.peek();\n-        return head.quote( value );\n-    }\n-\n-    private interface Writer\n-    {\n-        void append( String value );\n-\n-        String done();\n-\n-        String quote( String in );\n-    }\n-\n-    private abstract class BaseWriter implements Writer\n-    {\n-        protected final StringBuilder builder = new StringBuilder();\n-\n-        @Override\n-        public String done()\n-        {\n-            return builder.toString();\n-        }\n-\n-        @Override\n-        public String quote( String in )\n-        {\n-            return quoteMark + in + quoteMark;\n-        }\n-    }\n-\n-    private class ValueWriter extends BaseWriter\n-    {\n-        @Override\n-        public void append( String value )\n-        {\n-            builder.append( value );\n-        }\n-    }\n-\n-    private class MapWriter extends BaseWriter\n-    {\n-        private boolean writeKey = true;\n-        private String sep = \"\";\n-\n-        MapWriter()\n-        {\n-            super();\n-            builder.append( \"{\" );\n-        }\n-\n-        @Override\n-        public void append( String value )\n-        {\n-            if ( writeKey )\n-            {\n-                builder.append( sep ).append( value ).append( \": \" );\n-            }\n-            else\n-            {\n-                builder.append( value );\n-            }\n-            writeKey = !writeKey;\n-            sep = \", \";\n-        }\n-\n-        @Override\n-        public String done()\n-        {\n-            return builder.append( \"}\" ).toString();\n-        }\n-\n-        @Override\n-        public String quote( String in )\n-        {\n-            return writeKey ? in : super.quote( in );\n-        }\n-    }\n-\n-    private class ListWriter extends BaseWriter\n+    public String done()\n     {\n-        private String sep = \"\";\n-\n-        ListWriter()\n-        {\n-            super();\n-            builder.append( \"[\" );\n-        }\n-\n-        @Override\n-        public void append( String value )\n-        {\n-            builder.append( sep ).append( value );\n-            sep = \", \";\n-        }\n-\n-        @Override\n-        public String done()\n-        {\n-            return builder.append( \"]\" ).toString();\n-        }\n+      return builder.append(\"]\").toString();\n     }\n+  }\n }\n",
            "diff_size": 470
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3692/PrettyPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3692/PrettyPrinter.java\nindex 7591a56d365..83b6a3fef5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3692/PrettyPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3692/PrettyPrinter.java\n@@ -86,7 +86,8 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n             append( \":\" + labels.stringValue( i ) );\n             sep = \"\";\n         }\n-        if ( properties.size() > 0 )\n+\n+if ( properties.size() > 0 )\n         {\n             append( \" \" );\n             properties.writeTo( this );\n@@ -110,7 +111,8 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n             append( \" \" );\n             properties.writeTo( this );\n         }\n-        append( \"]-\" );\n+\n+append( \"]-\" );\n     }\n \n     @Override\n@@ -154,7 +156,6 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n             append( \">\" );\n             nodes[i + 1].writeTo( this );\n         }\n-\n     }\n \n     @Override\n@@ -307,7 +308,8 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n             append( Byte.toString( b ) );\n             sep = \", \";\n         }\n-        append( \"]\" );\n+\n+append( \"]\" );\n     }\n \n     public String value()\n@@ -333,8 +335,7 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n     private interface Writer\n     {\n         void append( String value );\n-\n-        String done();\n+String done();\n \n         String quote( String in );\n     }\n@@ -387,7 +388,8 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n             {\n                 builder.append( value );\n             }\n-            writeKey = !writeKey;\n+\n+writeKey = !writeKey;\n             sep = \", \";\n         }\n \n@@ -427,4 +429,4 @@ public class PrettyPrinter implements AnyValueWriter<RuntimeException>\n             return builder.append( \"]\" ).toString();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}