{
    "project_name": "neo4j-neo4j",
    "error_id": "2371",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "145",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2371/PropertyCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2371/PropertyCreator.java\nindex 17623714a15..0adbdad8b12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2371/PropertyCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2371/PropertyCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.util.Iterator;\n@@ -46,14 +47,14 @@ public class PropertyCreator\n     private final PageCursorTracer cursorTracer;\n     private final MemoryTracker memoryTracker;\n \n-    public PropertyCreator( PropertyStore propertyStore, PropertyTraverser traverser, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public PropertyCreator(PropertyStore propertyStore, PropertyTraverser traverser, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        this( propertyStore.getStringStore(), propertyStore.getArrayStore(), propertyStore, traverser, propertyStore.allowStorePointsAndTemporal(),\n-                cursorTracer, memoryTracker );\n+        this(propertyStore.getStringStore(), propertyStore.getArrayStore(), propertyStore, traverser, propertyStore.allowStorePointsAndTemporal(),\n+          cursorTracer, memoryTracker);\n     }\n \n-    PropertyCreator( DynamicRecordAllocator stringRecordAllocator, DynamicRecordAllocator arrayRecordAllocator, IdSequence propertyRecordIdGenerator,\n-            PropertyTraverser traverser, boolean allowStorePointsAndTemporal, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    PropertyCreator(DynamicRecordAllocator stringRecordAllocator, DynamicRecordAllocator arrayRecordAllocator, IdSequence propertyRecordIdGenerator,\n+                    PropertyTraverser traverser, boolean allowStorePointsAndTemporal, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         this.stringRecordAllocator = stringRecordAllocator;\n         this.arrayRecordAllocator = arrayRecordAllocator;\n@@ -65,12 +66,12 @@ public class PropertyCreator\n     }\n \n     public <P extends PrimitiveRecord> void primitiveSetProperty(\n-            RecordProxy<P, ?> primitiveRecordChange, int propertyKey, Value value,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+      RecordProxy<P, ?> primitiveRecordChange, int propertyKey, Value value,\n+      RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n     {\n-        PropertyBlock block = encodePropertyValue( propertyKey, value );\n+        PropertyBlock block = encodePropertyValue(propertyKey, value);\n         P primitive = primitiveRecordChange.forReadingLinkage();\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n+        assert traverser.assertPropertyChain(primitive, propertyRecords);\n \n         // Traverse the existing property chain. Tracking two things along the way:\n         // - (a) Free space for this block (candidateHost)\n@@ -83,53 +84,52 @@ public class PropertyCreator\n         RecordProxy<PropertyRecord, PrimitiveRecord> freeHostProxy = null;\n         RecordProxy<PropertyRecord, PrimitiveRecord> existingHostProxy = null;\n         long prop = primitive.getNextProp();\n-        while ( prop != Record.NO_NEXT_PROPERTY.intValue() ) // <-- (4)\n+        while (prop != Record.NO_NEXT_PROPERTY.intValue()) // <-- (4)\n         {\n-            RecordProxy<PropertyRecord, PrimitiveRecord> proxy = propertyRecords.getOrLoad( prop, primitive, cursorTracer );\n+            RecordProxy<PropertyRecord, PrimitiveRecord> proxy = propertyRecords.getOrLoad(prop, primitive, cursorTracer);\n             PropertyRecord propRecord = proxy.forReadingLinkage();\n             assert propRecord.inUse() : propRecord;\n \n             // (a) search for free space\n-            if ( propRecord.hasSpaceFor( block ) )\n+            if (propRecord.hasSpaceFor(block))\n             {\n                 freeHostProxy = proxy;\n-                if ( existingHostProxy != null )\n+                if (existingHostProxy != null)\n                 {\n                     // (2)\n                     PropertyRecord freeHost = proxy.forChangingData();\n-                    freeHost.addPropertyBlock( block );\n-                    freeHost.setChanged( primitive );\n-                    assert traverser.assertPropertyChain( primitive, propertyRecords );\n+                    freeHost.addPropertyBlock(block);\n+                    freeHost.setChanged(primitive);\n+                    assert traverser.assertPropertyChain(primitive, propertyRecords);\n                     return;\n                 }\n             }\n \n             // (b) search for existence of property key\n-            PropertyBlock existingBlock = propRecord.getPropertyBlock( propertyKey );\n-            if ( existingBlock != null )\n+            PropertyBlock existingBlock = propRecord.getPropertyBlock(propertyKey);\n+            if (existingBlock != null)\n             {\n                 // We found an existing property and whatever happens we have to remove the existing\n                 // block so that we can add the new one, where ever we decide to place it\n                 existingHostProxy = proxy;\n                 PropertyRecord existingHost = existingHostProxy.forChangingData();\n-                removeProperty( primitive, existingHost, existingBlock );\n+                removeProperty(primitive, existingHost, existingBlock);\n \n                 // Now see if we at this point can add the new block\n-                if ( block.getSize() <= existingBlock.getSize() || // cheap check\n-                     existingHost.hasSpaceFor( block ) ) // fallback check\n+                if (block.getSize() <= existingBlock.getSize() || // cheap check\n+                  existingHost.hasSpaceFor(block)) // fallback check\n                 {\n                     // (1) yes we could add it right into the host of the existing block\n-                    existingHost.addPropertyBlock( block );\n-                    assert traverser.assertPropertyChain( primitive, propertyRecords );\n+                    existingHost.addPropertyBlock(block);\n+                    assert traverser.assertPropertyChain(primitive, propertyRecords);\n                     return;\n-                }\n-                else if ( freeHostProxy != null )\n+                } else if (freeHostProxy != null)\n                 {\n                     // (3) yes we could add it to a previously found host with sufficiently free space in it\n                     PropertyRecord freeHost = freeHostProxy.forChangingData();\n-                    freeHost.addPropertyBlock( block );\n-                    freeHost.setChanged( primitive );\n-                    assert traverser.assertPropertyChain( primitive, propertyRecords );\n+                    freeHost.addPropertyBlock(block);\n+                    freeHost.setChanged(primitive);\n+                    assert traverser.assertPropertyChain(primitive, propertyRecords);\n                     return;\n                 }\n                 // else we can't add it at this point\n@@ -142,97 +142,97 @@ public class PropertyCreator\n         // At this point we haven't added the property block, although we may have found room for it\n         // along the way. If we didn't then just create a new record, it's fine\n         PropertyRecord freeHost;\n-        if ( freeHostProxy == null )\n+        if (freeHostProxy == null)\n         {\n             // We couldn't find free space along the way, so create a new host record\n-            freeHost = propertyRecords.create( propertyRecordIdGenerator.nextId( cursorTracer ), primitive, cursorTracer ).forChangingData();\n-            freeHost.setInUse( true );\n-            if ( primitive.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n+            freeHost = propertyRecords.create(propertyRecordIdGenerator.nextId(cursorTracer), primitive, cursorTracer).forChangingData();\n+            freeHost.setInUse(true);\n+            if (primitive.getNextProp() != Record.NO_NEXT_PROPERTY.intValue())\n             {\n                 // This isn't the first property record for the entity, re-shuffle the first one so that\n                 // the new one becomes the first\n-                PropertyRecord prevProp = propertyRecords.getOrLoad( primitive.getNextProp(), primitive, cursorTracer ).forChangingLinkage();\n+                PropertyRecord prevProp = propertyRecords.getOrLoad(primitive.getNextProp(), primitive, cursorTracer).forChangingLinkage();\n                 assert prevProp.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue();\n-                prevProp.setPrevProp( freeHost.getId() );\n-                freeHost.setNextProp( prevProp.getId() );\n-                prevProp.setChanged( primitive );\n+                prevProp.setPrevProp(freeHost.getId());\n+                freeHost.setNextProp(prevProp.getId());\n+                prevProp.setChanged(primitive);\n             }\n \n             // By the way, this is the only condition where the primitive record also needs to change\n-            primitiveRecordChange.forChangingLinkage().setNextProp( freeHost.getId() );\n-        }\n-        else\n+            primitiveRecordChange.forChangingLinkage().setNextProp(freeHost.getId());\n+        } else\n         {\n             freeHost = freeHostProxy.forChangingData();\n         }\n \n         // At this point we know that we have a host record with sufficient space in it for the block\n         // to add, so simply add it\n-        freeHost.addPropertyBlock( block );\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n+        freeHost.addPropertyBlock(block);\n+        assert traverser.assertPropertyChain(primitive, propertyRecords);\n     }\n \n-    private void removeProperty( PrimitiveRecord primitive, PropertyRecord host, PropertyBlock block )\n+    private void removeProperty(PrimitiveRecord primitive, PropertyRecord host, PropertyBlock block)\n     {\n-        host.removePropertyBlock( block.getKeyIndexId() );\n-        host.setChanged( primitive );\n-        for ( DynamicRecord record : block.getValueRecords() )\n+        host.removePropertyBlock(block.getKeyIndexId());\n+        host.setChanged(primitive);\n+        for (DynamicRecord record : block.getValueRecords())\n         {\n             assert record.inUse();\n-            record.setInUse( false, block.getType().intValue() );\n-            host.addDeletedRecord( record );\n+            record.setInUse(false, block.getType().intValue());\n+            host.addDeletedRecord(record);\n         }\n     }\n \n-    public PropertyBlock encodePropertyValue( int propertyKey, Value value )\n+    public PropertyBlock encodePropertyValue(int propertyKey, Value value)\n     {\n-        return encodeValue( new PropertyBlock(), propertyKey, value );\n+        return encodeValue(new PropertyBlock(), propertyKey, value);\n     }\n \n-    public PropertyBlock encodeValue( PropertyBlock block, int propertyKey, Value value )\n+    public PropertyBlock encodeValue(PropertyBlock block, int propertyKey, Value value)\n     {\n-        PropertyStore.encodeValue( block, propertyKey, value, stringRecordAllocator, arrayRecordAllocator, allowStorePointsAndTemporal, cursorTracer,\n-                memoryTracker );\n+        PropertyStore.encodeValue(block, propertyKey, value, stringRecordAllocator, arrayRecordAllocator, allowStorePointsAndTemporal, cursorTracer,\n+          memoryTracker);\n         return block;\n     }\n \n-    public long createPropertyChain( PrimitiveRecord owner, Iterator<PropertyBlock> properties,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+    public long createPropertyChain(PrimitiveRecord owner, Iterator<PropertyBlock> properties,\n+                                    RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n     {\n-        return createPropertyChain( owner, properties, propertyRecords, p -> {} );\n+        return createPropertyChain(owner, properties, propertyRecords, p -> {\n+        });\n     }\n \n-    private long createPropertyChain( PrimitiveRecord owner, Iterator<PropertyBlock> properties, RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords,\n-            Consumer<PropertyRecord> createdPropertyRecords )\n+    private long createPropertyChain(PrimitiveRecord owner, Iterator<PropertyBlock> properties, RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n+                                     Consumer<PropertyRecord> createdPropertyRecords)\n     {\n-        if ( properties == null || !properties.hasNext() )\n+        if (properties == null || !properties.hasNext())\n         {\n             return Record.NO_NEXT_PROPERTY.intValue();\n         }\n-        PropertyRecord currentRecord = propertyRecords.create( propertyRecordIdGenerator.nextId( cursorTracer ), owner, cursorTracer ).forChangingData();\n-        createdPropertyRecords.accept( currentRecord );\n-        currentRecord.setInUse( true );\n+        PropertyRecord currentRecord = propertyRecords.create(propertyRecordIdGenerator.nextId(cursorTracer), owner, cursorTracer).forChangingData();\n+        createdPropertyRecords.accept(currentRecord);\n+        currentRecord.setInUse(true);\n         currentRecord.setCreated();\n         PropertyRecord firstRecord = currentRecord;\n-        while ( properties.hasNext() )\n+        while (properties.hasNext())\n         {\n             PropertyBlock block = properties.next();\n-            if ( currentRecord.size() + block.getSize() > PropertyType.getPayloadSize() )\n+            if (currentRecord.size() + block.getSize() > PropertyType.getPayloadSize())\n             {\n                 // Here it means the current block is done for\n                 PropertyRecord prevRecord = currentRecord;\n                 // Create new record\n-                long propertyId = propertyRecordIdGenerator.nextId( cursorTracer );\n-                currentRecord = propertyRecords.create( propertyId, owner, cursorTracer ).forChangingData();\n-                createdPropertyRecords.accept( currentRecord );\n-                currentRecord.setInUse( true );\n+                long propertyId = propertyRecordIdGenerator.nextId(cursorTracer);\n+                currentRecord = propertyRecords.create(propertyId, owner, cursorTracer).forChangingData();\n+                createdPropertyRecords.accept(currentRecord);\n+                currentRecord.setInUse(true);\n                 currentRecord.setCreated();\n                 // Set up links\n-                prevRecord.setNextProp( propertyId );\n-                currentRecord.setPrevProp( prevRecord.getId() );\n+                prevRecord.setNextProp(propertyId);\n+                currentRecord.setPrevProp(prevRecord.getId());\n                 // Now current is ready to start picking up blocks\n             }\n-            currentRecord.addPropertyBlock( block );\n+            currentRecord.addPropertyBlock(block);\n         }\n         return firstRecord.getId();\n     }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2371/PropertyCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2371/PropertyCreator.java\nindex 17623714a15..ca43d54e117 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2371/PropertyCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2371/PropertyCreator.java\n@@ -236,4 +236,4 @@ public class PropertyCreator\n         }\n         return firstRecord.getId();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}