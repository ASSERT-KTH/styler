{
    "project_name": "Angel-ML-angel",
    "error_id": "364",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/364/TypeNeighborElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/364/TypeNeighborElement.java\nindex 55da93e695d..c4e8ce8e83d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/364/TypeNeighborElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/364/TypeNeighborElement.java\n@@ -107,7 +107,7 @@ public class TypeNeighborElement implements IElement {\n   public long[] sample(int sampleType, Random random, long key, int count) {\n     long[] re = new long[count];\n     if (type == null) {\n-      for (int i = 0; i < count; i ++) {\n+      for (int i = 0; i < count; i++) {\n         int idx = random.nextInt(data.length);\n         re[i] = data[idx];\n       }\n@@ -118,7 +118,7 @@ public class TypeNeighborElement implements IElement {\n       } else {\n         int min = indptr[typeIdx];\n         int max = indptr[typeIdx + 1];\n-        for (int i = 0; i < count; i ++) {\n+        for (int i = 0; i < count; i++) {\n           int idx = random.nextInt(max) % (max - min) + min;\n           re[i] = data[idx];\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/364/TypeNeighborElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/364/TypeNeighborElement.java\nindex 55da93e695d..8e203338a1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/364/TypeNeighborElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/364/TypeNeighborElement.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.graph.model.neighbor.simplewithtype;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -218,4 +217,4 @@ public class TypeNeighborElement implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/364/TypeNeighborElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/364/TypeNeighborElement.java\nindex 55da93e695d..979e42d02b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/364/TypeNeighborElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/364/TypeNeighborElement.java\n@@ -23,7 +23,6 @@ import com.tencent.angel.common.StreamSerdeUtils;\n import com.tencent.angel.ps.storage.vector.element.IElement;\n import io.netty.buffer.ByteBuf;\n import org.apache.commons.lang.ArrayUtils;\n-\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -33,6 +32,7 @@ import java.util.Random;\n /**\n  * The complex object that contains a integer array,, it can be stored in PS\n  */\n+\n public class TypeNeighborElement implements IElement {\n \n   private int selfType;\n@@ -107,7 +107,7 @@ public class TypeNeighborElement implements IElement {\n   public long[] sample(int sampleType, Random random, long key, int count) {\n     long[] re = new long[count];\n     if (type == null) {\n-      for (int i = 0; i < count; i ++) {\n+      for (int i = 0; i < count; i++) {\n         int idx = random.nextInt(data.length);\n         re[i] = data[idx];\n       }\n@@ -118,7 +118,7 @@ public class TypeNeighborElement implements IElement {\n       } else {\n         int min = indptr[typeIdx];\n         int max = indptr[typeIdx + 1];\n-        for (int i = 0; i < count; i ++) {\n+        for (int i = 0; i < count; i++) {\n           int idx = random.nextInt(max) % (max - min) + min;\n           re[i] = data[idx];\n         }\n@@ -151,6 +151,7 @@ public class TypeNeighborElement implements IElement {\n     } else {\n       output.writeInt(0);\n     }\n+\n     if (indptr != null) {\n       ByteBufSerdeUtils.serializeInts(output, indptr);\n     } else {\n@@ -167,6 +168,7 @@ public class TypeNeighborElement implements IElement {\n     if (type.length == 0) {\n       type = null;\n     }\n+\n     if (indptr.length == 0) {\n       indptr = null;\n     }\n@@ -178,6 +180,7 @@ public class TypeNeighborElement implements IElement {\n     if (type != null) {\n       len += type.length * 4;\n     }\n+\n     if (indptr != null) {\n       len += indptr.length * 4;\n     }\n@@ -193,6 +196,7 @@ public class TypeNeighborElement implements IElement {\n     } else {\n       output.writeInt(0);\n     }\n+\n     if (indptr != null) {\n       StreamSerdeUtils.serializeInts(output, indptr);\n     } else {\n@@ -209,6 +213,7 @@ public class TypeNeighborElement implements IElement {\n     if (type.length == 0) {\n       type = null;\n     }\n+\n     if (indptr.length == 0) {\n       indptr = null;\n     }\n@@ -218,4 +223,5 @@ public class TypeNeighborElement implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}