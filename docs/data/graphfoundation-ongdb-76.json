{
    "project_name": "graphfoundation-ongdb",
    "error_id": "76",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/76/BloomKernelExtensionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/76/BloomKernelExtensionFactory.java\nindex 8f4fc5a2c3f..359eef9fb4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/76/BloomKernelExtensionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/76/BloomKernelExtensionFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.fulltext.integrations.bloom;\n \n import java.io.File;\n@@ -42,54 +43,54 @@ import org.neo4j.scheduler.JobScheduler;\n  * @see BloomProcedures\n  * @see BloomFulltextConfig\n  */\n-@Service.Implementation( KernelExtensionFactory.class )\n+@Service.Implementation(KernelExtensionFactory.class)\n public class BloomKernelExtensionFactory extends KernelExtensionFactory<BloomKernelExtensionFactory.Dependencies>\n {\n \n-    public static final String SERVICE_NAME = \"bloom\";\n-    public static final String BLOOM_RELATIONSHIPS = \"bloomRelationships\";\n-    public static final String BLOOM_NODES = \"bloomNodes\";\n+  public static final String SERVICE_NAME = \"bloom\";\n+  public static final String BLOOM_RELATIONSHIPS = \"bloomRelationships\";\n+  public static final String BLOOM_NODES = \"bloomNodes\";\n \n-    public interface Dependencies\n-    {\n-        Config getConfig();\n+  public interface Dependencies\n+  {\n+    Config getConfig();\n \n-        GraphDatabaseService db();\n+    GraphDatabaseService db();\n \n-        FileSystemAbstraction fileSystem();\n+    FileSystemAbstraction fileSystem();\n \n-        Procedures procedures();\n+    Procedures procedures();\n \n-        LogService logService();\n+    LogService logService();\n \n-        AvailabilityGuard availabilityGuard();\n+    AvailabilityGuard availabilityGuard();\n \n-        JobScheduler scheduler();\n+    JobScheduler scheduler();\n \n-        TransactionIdStore transactionIdStore();\n+    TransactionIdStore transactionIdStore();\n \n-        NeoStoreFileListing fileListing();\n-    }\n+    NeoStoreFileListing fileListing();\n+  }\n \n-    public BloomKernelExtensionFactory()\n-    {\n-        super( SERVICE_NAME );\n-    }\n+  public BloomKernelExtensionFactory()\n+  {\n+    super(SERVICE_NAME);\n+  }\n \n-    @Override\n-    public Lifecycle newInstance( KernelContext context, Dependencies dependencies )\n-    {\n-        FileSystemAbstraction fs = dependencies.fileSystem();\n-        File storeDir = context.storeDir();\n-        Config config = dependencies.getConfig();\n-        GraphDatabaseService db = dependencies.db();\n-        Procedures procedures = dependencies.procedures();\n-        LogService logService = dependencies.logService();\n-        AvailabilityGuard availabilityGuard = dependencies.availabilityGuard();\n-        JobScheduler scheduler = dependencies.scheduler();\n-        Supplier<TransactionIdStore> transactionIdStore = dependencies::transactionIdStore;\n-        Supplier<NeoStoreFileListing> fileListing = dependencies::fileListing;\n-        return new BloomKernelExtension(\n-                fs, storeDir, config, db, procedures, logService, availabilityGuard, scheduler, transactionIdStore, fileListing );\n-    }\n+  @Override\n+  public Lifecycle newInstance(KernelContext context, Dependencies dependencies)\n+  {\n+    FileSystemAbstraction fs = dependencies.fileSystem();\n+    File storeDir = context.storeDir();\n+    Config config = dependencies.getConfig();\n+    GraphDatabaseService db = dependencies.db();\n+    Procedures procedures = dependencies.procedures();\n+    LogService logService = dependencies.logService();\n+    AvailabilityGuard availabilityGuard = dependencies.availabilityGuard();\n+    JobScheduler scheduler = dependencies.scheduler();\n+    Supplier<TransactionIdStore> transactionIdStore = dependencies::transactionIdStore;\n+    Supplier<NeoStoreFileListing> fileListing = dependencies::fileListing;\n+    return new BloomKernelExtension(\n+        fs, storeDir, config, db, procedures, logService, availabilityGuard, scheduler, transactionIdStore, fileListing);\n+  }\n }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/76/BloomKernelExtensionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/76/BloomKernelExtensionFactory.java\nindex 8f4fc5a2c3f..1fe1def6cb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/76/BloomKernelExtensionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/76/BloomKernelExtensionFactory.java\n@@ -45,10 +45,11 @@ import org.neo4j.scheduler.JobScheduler;\n @Service.Implementation( KernelExtensionFactory.class )\n public class BloomKernelExtensionFactory extends KernelExtensionFactory<BloomKernelExtensionFactory.Dependencies>\n {\n-\n     public static final String SERVICE_NAME = \"bloom\";\n-    public static final String BLOOM_RELATIONSHIPS = \"bloomRelationships\";\n-    public static final String BLOOM_NODES = \"bloomNodes\";\n+\n+public static final String BLOOM_RELATIONSHIPS = \"bloomRelationships\";\n+\n+public static final String BLOOM_NODES = \"bloomNodes\";\n \n     public interface Dependencies\n     {\n@@ -89,7 +90,6 @@ public class BloomKernelExtensionFactory extends KernelExtensionFactory<BloomKer\n         JobScheduler scheduler = dependencies.scheduler();\n         Supplier<TransactionIdStore> transactionIdStore = dependencies::transactionIdStore;\n         Supplier<NeoStoreFileListing> fileListing = dependencies::fileListing;\n-        return new BloomKernelExtension(\n-                fs, storeDir, config, db, procedures, logService, availabilityGuard, scheduler, transactionIdStore, fileListing );\n+        return new BloomKernelExtension( fs, storeDir, config, db, procedures, logService, availabilityGuard, scheduler, transactionIdStore, fileListing );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}