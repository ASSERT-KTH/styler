{
    "project_name": "neo4j-neo4j",
    "error_id": "3326",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3326/PathExpanders.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3326/PathExpanders.java\nindex b567e835b13..af5c8409240 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3326/PathExpanders.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3326/PathExpanders.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.io.PrintStream;\n@@ -39,7 +40,7 @@ public abstract class PathExpanders\n      * @param <STATE> the type of the object that holds the state\n      * @return a very permissive {@link PathExpander} that follows any type in any direction\n      */\n-    @SuppressWarnings( \"unchecked\" )\n+    @SuppressWarnings(\"unchecked\")\n     public static <STATE> PathExpander<STATE> allTypesAndDirections()\n     {\n         return StandardExpander.DEFAULT;\n@@ -48,84 +49,83 @@ public abstract class PathExpanders\n     /**\n      * A very permissive {@link PathExpander} that follows {@code type} relationships in any direction.\n      *\n-     * @param type the type of relationships to expand in any direction\n+     * @param type    the type of relationships to expand in any direction\n      * @param <STATE> the type of the object that holds the state\n      * @return a very permissive {@link PathExpander} that follows {@code type} relationships in any direction\n      */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forType( RelationshipType type )\n+    @SuppressWarnings(\"unchecked\")\n+    public static <STATE> PathExpander<STATE> forType(RelationshipType type)\n     {\n-        return StandardExpander.create( type, Direction.BOTH );\n+        return StandardExpander.create(type, Direction.BOTH);\n     }\n \n     /**\n      * A very permissive {@link PathExpander} that follows any type in {@code direction}.\n      *\n      * @param direction the direction to follow relationships in\n-     * @param <STATE> the type of the object that holds the state\n+     * @param <STATE>   the type of the object that holds the state\n      * @return a very permissive {@link PathExpander} that follows any type in {@code direction}\n      */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forDirection( Direction direction )\n+    @SuppressWarnings(\"unchecked\")\n+    public static <STATE> PathExpander<STATE> forDirection(Direction direction)\n     {\n-        return StandardExpander.create( direction );\n+        return StandardExpander.create(direction);\n     }\n \n     /**\n      * A very restricted {@link PathExpander} that follows {@code type} in {@code direction}.\n      *\n-     * @param type the type of relationships to follow\n+     * @param type      the type of relationships to follow\n      * @param direction the direction to follow relationships in\n-     * @param <STATE> the type of the object that holds the state\n+     * @param <STATE>   the type of the object that holds the state\n      * @return a very restricted {@link PathExpander} that follows {@code type} in {@code direction}\n      */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forTypeAndDirection( RelationshipType type, Direction direction )\n+    @SuppressWarnings(\"unchecked\")\n+    public static <STATE> PathExpander<STATE> forTypeAndDirection(RelationshipType type, Direction direction)\n     {\n-        return StandardExpander.create( type, direction );\n+        return StandardExpander.create(type, direction);\n     }\n \n     /**\n      * A very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list.\n      *\n-     * @param type1 the type of relationships to follow in {@code direction1}\n+     * @param type1      the type of relationships to follow in {@code direction1}\n      * @param direction1 the direction to follow {@code type1} relationships in\n-     * @param type2 the type of relationships to follow in {@code direction2}\n+     * @param type2      the type of relationships to follow in {@code direction2}\n      * @param direction2 the direction to follow {@code type2} relationships in\n-     * @param more add more {@code type}/{@code direction} pairs\n-     * @param <STATE> the type of the object that holds the state\n+     * @param more       add more {@code type}/{@code direction} pairs\n+     * @param <STATE>    the type of the object that holds the state\n      * @return a very restricted {@link PathExpander} that follows only the {@code type}/{@code direction} pairs that you list\n      */\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <STATE> PathExpander<STATE> forTypesAndDirections( RelationshipType type1, Direction direction1,\n-                                                                     RelationshipType type2, Direction direction2,\n-                                                                     Object... more )\n+    @SuppressWarnings(\"unchecked\")\n+    public static <STATE> PathExpander<STATE> forTypesAndDirections(RelationshipType type1, Direction direction1,\n+                                                                    RelationshipType type2, Direction direction2,\n+                                                                    Object... more)\n     {\n-        return StandardExpander.create( type1, direction1, type2, direction2, more );\n+        return StandardExpander.create(type1, direction1, type2, direction2, more);\n     }\n \n     /**\n      * An expander forcing constant relationship direction\n      *\n-     * @param types types of relationships to follow\n+     * @param types   types of relationships to follow\n      * @param <STATE> the type of the object that holds the state\n      * @return a {@link PathExpander} which enforces constant relationship direction\n      */\n-    public static <STATE> PathExpander<STATE> forConstantDirectionWithTypes( final RelationshipType... types )\n+    public static <STATE> PathExpander<STATE> forConstantDirectionWithTypes(final RelationshipType... types)\n     {\n         return new PathExpander<>()\n         {\n             @Override\n-            public Iterable<Relationship> expand( Path path, BranchState<STATE> state )\n+            public Iterable<Relationship> expand(Path path, BranchState<STATE> state)\n             {\n-                if ( path.length() == 0 )\n+                if (path.length() == 0)\n                 {\n-                    return path.endNode().getRelationships( types );\n-                }\n-                else\n+                    return path.endNode().getRelationships(types);\n+                } else\n                 {\n-                    Direction direction = getDirectionOfLastRelationship( path );\n-                    return path.endNode().getRelationships( direction, types );\n+                    Direction direction = getDirectionOfLastRelationship(path);\n+                    return path.endNode().getRelationships(direction, types);\n                 }\n             }\n \n@@ -135,11 +135,11 @@ public abstract class PathExpanders\n                 return this;\n             }\n \n-            private Direction getDirectionOfLastRelationship( Path path )\n+            private Direction getDirectionOfLastRelationship(Path path)\n             {\n                 assert path.length() > 0;\n                 Direction direction = Direction.INCOMING;\n-                if ( path.endNode().equals( path.lastRelationship().getEndNode() ) )\n+                if (path.endNode().equals(path.lastRelationship().getEndNode()))\n                 {\n                     direction = Direction.OUTGOING;\n                 }\n@@ -156,29 +156,31 @@ public abstract class PathExpanders\n     /**\n      * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths.\n      * All expanded paths will be printed using System.out.\n-     * @param source    {@link PathExpander} to wrap.\n-     * @param <STATE>   the type of the object that holds the state\n+     *\n+     * @param source  {@link PathExpander} to wrap.\n+     * @param <STATE> the type of the object that holds the state\n      * @return A new {@link PathExpander}.\n      */\n-    public static <STATE> PathExpander<STATE> printingWrapper( final PathExpander<STATE> source )\n+    public static <STATE> PathExpander<STATE> printingWrapper(final PathExpander<STATE> source)\n     {\n-        return printingWrapper( source, new Paths.DefaultPathDescriptor() );\n+        return printingWrapper(source, new Paths.DefaultPathDescriptor());\n     }\n \n     /**\n      * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor}\n      * to print expanded paths that fulfill {@link BiFunction} predicate.\n      * Will use System.out as {@link PrintStream}.\n-     * @param source    {@link PathExpander} to wrap.\n-     * @param pred      {@link BiFunction} used as predicate for printing expansion.\n-     * @param <STATE>   the type of the object that holds the state\n-     * @return          A new {@link PathExpander}.\n+     *\n+     * @param source  {@link PathExpander} to wrap.\n+     * @param pred    {@link BiFunction} used as predicate for printing expansion.\n+     * @param <STATE> the type of the object that holds the state\n+     * @return A new {@link PathExpander}.\n      */\n     public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred )\n+      final PathExpander<STATE> source,\n+      final BiFunction<Path, BranchState, Boolean> pred)\n     {\n-        return printingWrapper( source, pred, new Paths.DefaultPathDescriptor() );\n+        return printingWrapper(source, pred, new Paths.DefaultPathDescriptor());\n     }\n \n     /**\n@@ -186,68 +188,71 @@ public abstract class PathExpanders\n      * using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n      * All expanded paths will be printed.\n      * Will use System.out as {@link PrintStream}.\n-     * @param source        {@link PathExpander} to wrap.\n-     * @param descriptor    {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n-     * @param <STATE>       the type of the object that holds the state\n-     * @return              A new {@link PathExpander}.\n+     *\n+     * @param source     {@link PathExpander} to wrap.\n+     * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n+     * @param <STATE>    the type of the object that holds the state\n+     * @return A new {@link PathExpander}.\n      */\n     public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final Paths.PathDescriptor descriptor )\n+      final PathExpander<STATE> source,\n+      final Paths.PathDescriptor descriptor)\n     {\n-        return printingWrapper( source, ( entities, stateBranchState ) -> Boolean.TRUE, descriptor );\n+        return printingWrapper(source, (entities, stateBranchState) -> Boolean.TRUE, descriptor);\n     }\n \n     /**\n      * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n      * that fulfill {@link BiFunction} predicate using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n      * Will use System.out as {@link PrintStream}.\n-     * @param source    {@link PathExpander} to wrap.\n-     * @param pred      {@link BiFunction} used as predicate for printing expansion.\n+     *\n+     * @param source     {@link PathExpander} to wrap.\n+     * @param pred       {@link BiFunction} used as predicate for printing expansion.\n      * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n-     * @param <STATE>   the type of the object that holds the state\n-     * @return          A new {@link PathExpander}.\n+     * @param <STATE>    the type of the object that holds the state\n+     * @return A new {@link PathExpander}.\n      */\n     public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred,\n-            final Paths.PathDescriptor descriptor )\n+      final PathExpander<STATE> source,\n+      final BiFunction<Path, BranchState, Boolean> pred,\n+      final Paths.PathDescriptor descriptor)\n     {\n-        return printingWrapper( source, pred, descriptor, System.out );\n+        return printingWrapper(source, pred, descriptor, System.out);\n     }\n \n     /**\n      * A wrapper that uses {@link org.neo4j.graphdb.traversal.Paths.DefaultPathDescriptor} to print expanded paths\n      * that fulfill {@link BiFunction} predicate using given {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor}.\n-     * @param source        {@link PathExpander} to wrap.\n-     * @param pred          {@link BiFunction} used as predicate for printing expansion.\n-     * @param descriptor    {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n-     * @param out           {@link PrintStream} to use for printing expanded paths\n-     * @param <STATE>       the type of the object that holds the state\n-     * @return              A new {@link PathExpander}.\n+     *\n+     * @param source     {@link PathExpander} to wrap.\n+     * @param pred       {@link BiFunction} used as predicate for printing expansion.\n+     * @param descriptor {@link org.neo4j.graphdb.traversal.Paths.PathDescriptor} to use when printing paths.\n+     * @param out        {@link PrintStream} to use for printing expanded paths\n+     * @param <STATE>    the type of the object that holds the state\n+     * @return A new {@link PathExpander}.\n      */\n     public static <STATE> PathExpander<STATE> printingWrapper(\n-            final PathExpander<STATE> source,\n-            final BiFunction<Path, BranchState, Boolean> pred,\n-            final Paths.PathDescriptor descriptor,\n-            final PrintStream out )\n+      final PathExpander<STATE> source,\n+      final BiFunction<Path, BranchState, Boolean> pred,\n+      final Paths.PathDescriptor descriptor,\n+      final PrintStream out)\n     {\n         return new PathExpander<>()\n         {\n             @Override\n-            public Iterable<Relationship> expand( Path path, BranchState state )\n+            public Iterable<Relationship> expand(Path path, BranchState state)\n             {\n-                if ( pred.apply( path, state ) )\n+                if (pred.apply(path, state))\n                 {\n-                    out.println( Paths.pathToString( path, descriptor ) );\n+                    out.println(Paths.pathToString(path, descriptor));\n                 }\n-                return source.expand( path, state );\n+                return source.expand(path, state);\n             }\n \n             @Override\n             public PathExpander<STATE> reverse()\n             {\n-                return printingWrapper( source.reverse(), pred, descriptor, out );\n+                return printingWrapper(source.reverse(), pred, descriptor, out);\n             }\n         };\n     }\n",
            "diff_size": 81
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}