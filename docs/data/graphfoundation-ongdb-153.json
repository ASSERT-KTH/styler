{
    "project_name": "graphfoundation-ongdb",
    "error_id": "153",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/153/Converters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/153/Converters.java\nindex 4363b878489..77932f1a684 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/153/Converters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/153/Converters.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.io.File;\n@@ -40,104 +41,104 @@ import static org.neo4j.function.Predicates.not;\n \n public class Converters\n {\n-    private Converters()\n-    {\n-    }\n-\n-    public static <T> Function<String,T> mandatory()\n-    {\n-        return key ->\n-        {\n-            throw new IllegalArgumentException( \"Missing argument '\" + key + \"'\" );\n-        };\n-    }\n-\n-    public static <T> Function<String,T> optional()\n-    {\n-        return from -> null;\n-    }\n-\n-    public static <T> Function<String,T> withDefault( final T defaultValue )\n-    {\n-        return from -> defaultValue;\n-    }\n-\n-    public static Function<String,File> toFile()\n-    {\n-        return File::new;\n-    }\n-\n-    public static Function<String, Path> toPath()\n-    {\n-        return Paths::get;\n-    }\n-\n-    public static Function<String, String> identity()\n-    {\n-        return s -> s;\n-    }\n+  private Converters()\n+  {\n+  }\n \n-    public static final Comparator<File> BY_FILE_NAME = Comparator.comparing( File::getName );\n-\n-    public static final Comparator<File> BY_FILE_NAME_WITH_CLEVER_NUMBERS =\n-            ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.getAbsolutePath(), o2.getAbsolutePath() );\n-\n-    public static Function<String,File[]> regexFiles( final boolean cleverNumberRegexSort )\n-    {\n-        return name ->\n-        {\n-            Comparator<File> sorting = cleverNumberRegexSort ? BY_FILE_NAME_WITH_CLEVER_NUMBERS : BY_FILE_NAME;\n-            List<File> files = Validators.matchingFiles( new File( name ) );\n-            files.sort( sorting );\n-            return files.toArray( new File[files.size()] );\n-        };\n-    }\n-\n-    public static Function<String,File[]> toFiles( final String delimiter,\n-            final Function<String,File[]> eachFileConverter )\n-    {\n-        return from ->\n-        {\n-            if ( from == null )\n-            {\n-                return new File[0];\n-            }\n-\n-            String[] names = from.split( delimiter );\n-            List<File> files = new ArrayList<>();\n-            for ( String name : names )\n-            {\n-                files.addAll( Arrays.asList( eachFileConverter.apply( name ) ) );\n-            }\n-            return files.toArray( new File[files.size()] );\n-        };\n-    }\n-\n-    public static Function<String,Integer> toInt()\n+  public static <T> Function<String, T> mandatory()\n+  {\n+    return key ->\n     {\n-        return Integer::new;\n-    }\n-\n-    /**\n-     * Takes a raw address that can have a single port or 2 ports (lower and upper bounds of port range) and\n-     * processes it to a clean separation of host and ports. When only one port is specified, it is in the lower bound.\n-     * The presence of an upper bound implies a range.\n-     *\n-     * @param rawAddress the raw address that a user can provide via config or command line\n-     * @return the host, lower bound port, and upper bound port\n-     */\n-    public static OptionalHostnamePort toOptionalHostnamePortFromRawAddress( String rawAddress )\n+      throw new IllegalArgumentException(\"Missing argument '\" + key + \"'\");\n+    };\n+  }\n+\n+  public static <T> Function<String, T> optional()\n+  {\n+    return from -> null;\n+  }\n+\n+  public static <T> Function<String, T> withDefault(final T defaultValue)\n+  {\n+    return from -> defaultValue;\n+  }\n+\n+  public static Function<String, File> toFile()\n+  {\n+    return File::new;\n+  }\n+\n+  public static Function<String, Path> toPath()\n+  {\n+    return Paths::get;\n+  }\n+\n+  public static Function<String, String> identity()\n+  {\n+    return s -> s;\n+  }\n+\n+  public static final Comparator<File> BY_FILE_NAME = Comparator.comparing(File::getName);\n+\n+  public static final Comparator<File> BY_FILE_NAME_WITH_CLEVER_NUMBERS =\n+      (o1, o2) -> NumberAwareStringComparator.INSTANCE.compare(o1.getAbsolutePath(), o2.getAbsolutePath());\n+\n+  public static Function<String, File[]> regexFiles(final boolean cleverNumberRegexSort)\n+  {\n+    return name ->\n     {\n-        HostnamePort hostnamePort = new HostnamePort( rawAddress );\n-        Optional<String> processedHost = Optional.ofNullable( hostnamePort.getHost() )\n-                .map( str -> str.replaceAll( \"\\\\[\", \"\" ) )\n-                .map( str -> str.replaceAll( \"]\", \"\" ) );\n-        return new OptionalHostnamePort( processedHost, optionalFromZeroable( hostnamePort.getPorts()[0] ),\n-                optionalFromZeroable( hostnamePort.getPorts()[1] ) );\n-    }\n-\n-    private static Optional<Integer> optionalFromZeroable( int port )\n+      Comparator<File> sorting = cleverNumberRegexSort ? BY_FILE_NAME_WITH_CLEVER_NUMBERS : BY_FILE_NAME;\n+      List<File> files = Validators.matchingFiles(new File(name));\n+      files.sort(sorting);\n+      return files.toArray(new File[files.size()]);\n+    };\n+  }\n+\n+  public static Function<String, File[]> toFiles(final String delimiter,\n+                                                 final Function<String, File[]> eachFileConverter)\n+  {\n+    return from ->\n     {\n-        return port == 0 ? Optional.empty() : Optional.of( port );\n-    }\n+      if (from == null)\n+      {\n+        return new File[0];\n+      }\n+\n+      String[] names = from.split(delimiter);\n+      List<File> files = new ArrayList<>();\n+      for (String name : names)\n+      {\n+        files.addAll(Arrays.asList(eachFileConverter.apply(name)));\n+      }\n+      return files.toArray(new File[files.size()]);\n+    };\n+  }\n+\n+  public static Function<String, Integer> toInt()\n+  {\n+    return Integer::new;\n+  }\n+\n+  /**\n+   * Takes a raw address that can have a single port or 2 ports (lower and upper bounds of port range) and\n+   * processes it to a clean separation of host and ports. When only one port is specified, it is in the lower bound.\n+   * The presence of an upper bound implies a range.\n+   *\n+   * @param rawAddress the raw address that a user can provide via config or command line\n+   * @return the host, lower bound port, and upper bound port\n+   */\n+  public static OptionalHostnamePort toOptionalHostnamePortFromRawAddress(String rawAddress)\n+  {\n+    HostnamePort hostnamePort = new HostnamePort(rawAddress);\n+    Optional<String> processedHost = Optional.ofNullable(hostnamePort.getHost())\n+        .map(str -> str.replaceAll(\"\\\\[\", \"\"))\n+        .map(str -> str.replaceAll(\"]\", \"\"));\n+    return new OptionalHostnamePort(processedHost, optionalFromZeroable(hostnamePort.getPorts()[0]),\n+        optionalFromZeroable(hostnamePort.getPorts()[1]));\n+  }\n+\n+  private static Optional<Integer> optionalFromZeroable(int port)\n+  {\n+    return port == 0 ? Optional.empty() : Optional.of(port);\n+  }\n }\n",
            "diff_size": 164
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/153/Converters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/153/Converters.java\nindex 4363b878489..3302236f74b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/153/Converters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/153/Converters.java\n@@ -67,22 +67,21 @@ public class Converters\n         return File::new;\n     }\n \n-    public static Function<String, Path> toPath()\n+    public static Function<String,Path> toPath()\n     {\n         return Paths::get;\n     }\n \n-    public static Function<String, String> identity()\n+    public static Function<String,String> identity()\n     {\n         return s -> s;\n     }\n \n     public static final Comparator<File> BY_FILE_NAME = Comparator.comparing( File::getName );\n \n-    public static final Comparator<File> BY_FILE_NAME_WITH_CLEVER_NUMBERS =\n-            ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.getAbsolutePath(), o2.getAbsolutePath() );\n+    public static final Comparator<File> BY_FILE_NAME_WITH_CLEVER_NUMBERS = ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.getAbsolutePath(), o2.getAbsolutePath() );\n \n-    public static Function<String,File[]> regexFiles( final boolean cleverNumberRegexSort )\n+public static Function<String,File[]> regexFiles( final boolean cleverNumberRegexSort )\n     {\n         return name ->\n         {\n@@ -93,8 +92,7 @@ public class Converters\n         };\n     }\n \n-    public static Function<String,File[]> toFiles( final String delimiter,\n-            final Function<String,File[]> eachFileConverter )\n+    public static Function<String,File[]> toFiles( final String delimiter, final Function<String,File[]> eachFileConverter )\n     {\n         return from ->\n         {\n@@ -109,7 +107,8 @@ public class Converters\n             {\n                 files.addAll( Arrays.asList( eachFileConverter.apply( name ) ) );\n             }\n-            return files.toArray( new File[files.size()] );\n+\n+return files.toArray( new File[files.size()] );\n         };\n     }\n \n@@ -129,15 +128,12 @@ public class Converters\n     public static OptionalHostnamePort toOptionalHostnamePortFromRawAddress( String rawAddress )\n     {\n         HostnamePort hostnamePort = new HostnamePort( rawAddress );\n-        Optional<String> processedHost = Optional.ofNullable( hostnamePort.getHost() )\n-                .map( str -> str.replaceAll( \"\\\\[\", \"\" ) )\n-                .map( str -> str.replaceAll( \"]\", \"\" ) );\n-        return new OptionalHostnamePort( processedHost, optionalFromZeroable( hostnamePort.getPorts()[0] ),\n-                optionalFromZeroable( hostnamePort.getPorts()[1] ) );\n+        Optional<String> processedHost = Optional.ofNullable( hostnamePort.getHost() ).map( str -> str.replaceAll( \"\\\\[\", \"\" ) ).map( str -> str.replaceAll( \"]\", \"\" ) );\n+return new OptionalHostnamePort( processedHost, optionalFromZeroable( hostnamePort.getPorts()[0] ), optionalFromZeroable( hostnamePort.getPorts()[1] ) );\n     }\n \n     private static Optional<Integer> optionalFromZeroable( int port )\n     {\n         return port == 0 ? Optional.empty() : Optional.of( port );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}