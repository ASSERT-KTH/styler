{
    "project_name": "Activiti-Activiti",
    "error_id": "136",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\npublic class AdhocSubProcess extends SubProcess {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/136/AdhocSubProcess.java\nindex 508805953a2..86277151287 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/136/AdhocSubProcess.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class AdhocSubProcess extends SubProcess {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/136/AdhocSubProcess.java\nindex 508805953a2..e9bf11f1697 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/136/AdhocSubProcess.java\n@@ -1,55 +1,56 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class AdhocSubProcess extends SubProcess {\n \n-  public static final String ORDERING_PARALLEL = \"Parallel\";\n-  public static final String ORDERING_SEQUENTIALL = \"Sequential\";\n-  \n-  protected String completionCondition;\n-  protected String ordering = ORDERING_PARALLEL;\n-  protected boolean cancelRemainingInstances = true;\n-\n-  public String getCompletionCondition() {\n-    return completionCondition;\n-  }\n-\n-  public void setCompletionCondition(String completionCondition) {\n-    this.completionCondition = completionCondition;\n-  }\n-\n-  public String getOrdering() {\n-    return ordering;\n-  }\n-\n-  public void setOrdering(String ordering) {\n-    this.ordering = ordering;\n-  }\n-  \n-  public boolean hasParallelOrdering() {\n-    return !ORDERING_SEQUENTIALL.equals(ordering);\n-  }\n-  \n-  public boolean hasSequentialOrdering() {\n-    return ORDERING_SEQUENTIALL.equals(ordering);\n-  }\n-\n-  public boolean isCancelRemainingInstances() {\n-    return cancelRemainingInstances;\n-  }\n-\n-  public void setCancelRemainingInstances(boolean cancelRemainingInstances) {\n-    this.cancelRemainingInstances = cancelRemainingInstances;\n-  }\n+    public static final String ORDERING_PARALLEL = \"Parallel\";\n+    public static final String ORDERING_SEQUENTIALL = \"Sequential\";\n+\n+    protected String completionCondition;\n+    protected String ordering = ORDERING_PARALLEL;\n+    protected boolean cancelRemainingInstances = true;\n+\n+    public String getCompletionCondition() {\n+        return completionCondition;\n+    }\n+\n+    public void setCompletionCondition(String completionCondition) {\n+        this.completionCondition = completionCondition;\n+    }\n+\n+    public String getOrdering() {\n+        return ordering;\n+    }\n+\n+    public void setOrdering(String ordering) {\n+        this.ordering = ordering;\n+    }\n+\n+    public boolean hasParallelOrdering() {\n+        return !ORDERING_SEQUENTIALL.equals(ordering);\n+    }\n+\n+    public boolean hasSequentialOrdering() {\n+        return ORDERING_SEQUENTIALL.equals(ordering);\n+    }\n+\n+    public boolean isCancelRemainingInstances() {\n+        return cancelRemainingInstances;\n+    }\n+\n+    public void setCancelRemainingInstances(boolean cancelRemainingInstances) {\n+        this.cancelRemainingInstances = cancelRemainingInstances;\n+    }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/136/AdhocSubProcess.java\nindex 508805953a2..c301057eb2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/136/AdhocSubProcess.java\n@@ -16,11 +16,9 @@ public class AdhocSubProcess extends SubProcess {\n \n   public static final String ORDERING_PARALLEL = \"Parallel\";\n   public static final String ORDERING_SEQUENTIALL = \"Sequential\";\n-  \n   protected String completionCondition;\n   protected String ordering = ORDERING_PARALLEL;\n   protected boolean cancelRemainingInstances = true;\n-\n   public String getCompletionCondition() {\n     return completionCondition;\n   }\n@@ -36,11 +34,11 @@ public class AdhocSubProcess extends SubProcess {\n   public void setOrdering(String ordering) {\n     this.ordering = ordering;\n   }\n-  \n+\n   public boolean hasParallelOrdering() {\n     return !ORDERING_SEQUENTIALL.equals(ordering);\n   }\n-  \n+\n   public boolean hasSequentialOrdering() {\n     return ORDERING_SEQUENTIALL.equals(ordering);\n   }\n@@ -52,4 +50,5 @@ public class AdhocSubProcess extends SubProcess {\n   public void setCancelRemainingInstances(boolean cancelRemainingInstances) {\n     this.cancelRemainingInstances = cancelRemainingInstances;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/136/AdhocSubProcess.java\nindex 508805953a2..86277151287 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/136/AdhocSubProcess.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class AdhocSubProcess extends SubProcess {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/136/AdhocSubProcess.java\nindex 508805953a2..86277151287 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/136/AdhocSubProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/136/AdhocSubProcess.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class AdhocSubProcess extends SubProcess {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}