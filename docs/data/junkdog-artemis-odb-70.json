{
    "project_name": "junkdog-artemis-odb",
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "15",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 113).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n/**\n * Can resolve {@link com.artemis.World}, {@link com.artemis.ComponentMapper}, {@link com.artemis.BaseSystem} and\n * {@link com.artemis.Manager} types registered in the {@link World}\n *\n * @author Snorre E. Brekke",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/70/ArtemisFieldResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/70/ArtemisFieldResolver.java\nindex 58ce97d627f..4c93183fd1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/70/ArtemisFieldResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/70/ArtemisFieldResolver.java\n@@ -19,54 +19,54 @@ import java.util.Map;\n  */\n public class ArtemisFieldResolver implements FieldResolver, UseInjectionCache {\n \n-\tprivate World world;\n-\tprivate InjectionCache cache;\n+    private World world;\n+    private InjectionCache cache;\n \n-\tprivate Map<Class<?>, Class<?>> systems;\n+    private Map<Class<?>, Class<?>> systems;\n \n-\tpublic ArtemisFieldResolver() {\n-\t\tsystems = new IdentityHashMap<Class<?>, Class<?>>();\n-\t}\n+    public ArtemisFieldResolver() {\n+        systems = new IdentityHashMap<Class<?>, Class<?>>();\n+    }\n \n-\t@Override\n-\tpublic void initialize(World world) {\n-\t\tthis.world = world;\n+    @Override\n+    public void initialize(World world) {\n+        this.world = world;\n \n-\t\tfor (BaseSystem es : world.getSystems()) {\n-\t\t\tClass<?> origin = es.getClass();\n-\t\t\tClass<?> clazz = origin;\n-\t\t\tdo {\n-\t\t\t\tsystems.put(clazz, origin);\n-\t\t\t} while ((clazz = clazz.getSuperclass()) != Object.class);\n-\t\t}\n-\t}\n+        for (BaseSystem es : world.getSystems()) {\n+            Class<?> origin = es.getClass();\n+            Class<?> clazz = origin;\n+            do {\n+                systems.put(clazz, origin);\n+            } while ((clazz = clazz.getSuperclass()) != Object.class);\n+        }\n+    }\n \n-\t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic Object resolve(Object target, Class<?> fieldType, Field field) {\n-\t\tClassType injectionType = cache.getFieldClassType(fieldType);\n-\t\tswitch (injectionType) {\n-\t\t\tcase MAPPER:\n-\t\t\t\treturn getComponentMapper(field);\n-\t\t\tcase SYSTEM:\n-\t\t\t\treturn world.getSystem((Class<BaseSystem>) systems.get(fieldType));\n-\t\t\tcase WORLD:\n-\t\t\t\treturn world;\n-\t\t\tdefault:\n-\t\t\t\treturn null;\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Object resolve(Object target, Class<?> fieldType, Field field) {\n+        ClassType injectionType = cache.getFieldClassType(fieldType);\n+        switch (injectionType) {\n+            case MAPPER:\n+                return getComponentMapper(field);\n+            case SYSTEM:\n+                return world.getSystem((Class<BaseSystem>) systems.get(fieldType));\n+            case WORLD:\n+                return world;\n+            default:\n+                return null;\n \n-\t\t}\n-\t}\n+        }\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate ComponentMapper<?> getComponentMapper(Field field) {\n-\t\tClass<?> mapperType = cache.getGenericType(field);\n-\t\treturn world.getMapper((Class<? extends Component>) mapperType);\n+    @SuppressWarnings(\"unchecked\")\n+    private ComponentMapper<?> getComponentMapper(Field field) {\n+        Class<?> mapperType = cache.getGenericType(field);\n+        return world.getMapper((Class<? extends Component>) mapperType);\n \n-\t}\n+    }\n \n-\t@Override\n-\tpublic void setCache(InjectionCache cache) {\n-\t\tthis.cache = cache;\n-\t}\n+    @Override\n+    public void setCache(InjectionCache cache) {\n+        this.cache = cache;\n+    }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/70/ArtemisFieldResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/70/ArtemisFieldResolver.java\nindex 58ce97d627f..35e3f6d9ca2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/70/ArtemisFieldResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/70/ArtemisFieldResolver.java\n@@ -69,4 +69,4 @@ public class ArtemisFieldResolver implements FieldResolver, UseInjectionCache {\n \tpublic void setCache(InjectionCache cache) {\n \t\tthis.cache = cache;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/70/ArtemisFieldResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/70/ArtemisFieldResolver.java\nindex 58ce97d627f..ece84f7bdc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/70/ArtemisFieldResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/70/ArtemisFieldResolver.java\n@@ -7,7 +7,6 @@ import com.artemis.World;\n import com.artemis.utils.reflect.ClassReflection;\n import com.artemis.utils.reflect.Field;\n import com.artemis.utils.reflect.ReflectionException;\n-\n import java.util.IdentityHashMap;\n import java.util.Map;\n \n@@ -17,56 +16,54 @@ import java.util.Map;\n  *\n  * @author Snorre E. Brekke\n  */\n-public class ArtemisFieldResolver implements FieldResolver, UseInjectionCache {\n-\n-\tprivate World world;\n-\tprivate InjectionCache cache;\n \n-\tprivate Map<Class<?>, Class<?>> systems;\n-\n-\tpublic ArtemisFieldResolver() {\n-\t\tsystems = new IdentityHashMap<Class<?>, Class<?>>();\n-\t}\n+public class ArtemisFieldResolver implements FieldResolver, UseInjectionCache {\n+ private World world;\n \n-\t@Override\n-\tpublic void initialize(World world) {\n-\t\tthis.world = world;\n+ private InjectionCache cache;\n \n-\t\tfor (BaseSystem es : world.getSystems()) {\n-\t\t\tClass<?> origin = es.getClass();\n-\t\t\tClass<?> clazz = origin;\n-\t\t\tdo {\n-\t\t\t\tsystems.put(clazz, origin);\n-\t\t\t} while ((clazz = clazz.getSuperclass()) != Object.class);\n-\t\t}\n-\t}\n+ private Map<Class<?>, Class<?>> systems;\n \n-\t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic Object resolve(Object target, Class<?> fieldType, Field field) {\n-\t\tClassType injectionType = cache.getFieldClassType(fieldType);\n-\t\tswitch (injectionType) {\n-\t\t\tcase MAPPER:\n-\t\t\t\treturn getComponentMapper(field);\n-\t\t\tcase SYSTEM:\n-\t\t\t\treturn world.getSystem((Class<BaseSystem>) systems.get(fieldType));\n-\t\t\tcase WORLD:\n-\t\t\t\treturn world;\n-\t\t\tdefault:\n-\t\t\t\treturn null;\n+ public ArtemisFieldResolver() {\n+  systems = new IdentityHashMap<Class<?>, Class<?>>();\n+ }\n \n-\t\t}\n-\t}\n+ @Override\n+ public void initialize(World world) {\n+  this.world = world;\n+  for (BaseSystem es : world.getSystems()) {\n+   Class<?> origin = es.getClass();\n+   Class<?> clazz = origin;\n+   do {\n+    systems.put(clazz, origin);\n+   } while ((clazz = clazz.getSuperclass()) != Object.class);\n+  }\n+ }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate ComponentMapper<?> getComponentMapper(Field field) {\n-\t\tClass<?> mapperType = cache.getGenericType(field);\n-\t\treturn world.getMapper((Class<? extends Component>) mapperType);\n+ @Override\n+ @SuppressWarnings(\"unchecked\")\n+ public Object resolve(Object target, Class<?> fieldType, Field field) {\n+  ClassType injectionType = cache.getFieldClassType(fieldType);\n+  switch (injectionType) {\n+   case MAPPER:\n+    return getComponentMapper(field);\n+   case SYSTEM:\n+    return world.getSystem((Class<BaseSystem>) systems.get(fieldType));\n+   case WORLD:\n+    return world;\n+   default:\n+    return null;\n+  }\n+ }\n \n-\t}\n+ @SuppressWarnings(\"unchecked\")\n+ private ComponentMapper<?> getComponentMapper(Field field) {\n+  Class<?> mapperType = cache.getGenericType(field);\n+  return world.getMapper((Class<? extends Component>) mapperType);\n+ }\n \n-\t@Override\n-\tpublic void setCache(InjectionCache cache) {\n-\t\tthis.cache = cache;\n-\t}\n-}\n+ @Override\n+ public void setCache(InjectionCache cache) {\n+  this.cache = cache;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}