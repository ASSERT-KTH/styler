{
    "project_name": "Angel-ML-angel",
    "error_id": "578",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/578/InitWalkPathPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/578/InitWalkPathPartitionParam.java\nindex b91ce8e129b..82fddc7a162 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/578/InitWalkPathPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/578/InitWalkPathPartitionParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec.updatefuncs.initwalkpath;\n \n import com.tencent.angel.PartitionKey;\n@@ -30,8 +31,8 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n   private boolean isTrunc;\n \n   public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-      int neighborMatrixId, int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n+                                    int neighborMatrixId, int walkLength, int numParts,\n+                                    int threshold, double keepProba, boolean isTrunc) {\n     super(matrixId, partKey, updateClock);\n     this.neighborMatrixId = neighborMatrixId;\n     this.walkLength = walkLength;\n@@ -42,14 +43,14 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n   }\n \n   public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId,\n-      int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n+                                    int walkLength, int numParts,\n+                                    int threshold, double keepProba, boolean isTrunc) {\n     this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, threshold, keepProba,\n         isTrunc);\n   }\n \n   public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId,\n-      int walkLength, int numParts) {\n+                                    int walkLength, int numParts) {\n     this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, -1, 1.0, false);\n   }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/578/InitWalkPathPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/578/InitWalkPathPartitionParam.java\nindex b91ce8e129b..dd38cde5fe6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/578/InitWalkPathPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/578/InitWalkPathPartitionParam.java\n@@ -29,8 +29,7 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n   private double keepProba;\n   private boolean isTrunc;\n \n-  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-      int neighborMatrixId, int walkLength, int numParts,\n+  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock, int neighborMatrixId, int walkLength, int numParts,\n       int threshold, double keepProba, boolean isTrunc) {\n     super(matrixId, partKey, updateClock);\n     this.neighborMatrixId = neighborMatrixId;\n@@ -41,16 +40,14 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n     this.isTrunc = isTrunc;\n   }\n \n-  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId,\n-      int walkLength, int numParts,\n+  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId, int walkLength, int numParts,\n       int threshold, double keepProba, boolean isTrunc) {\n-    this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, threshold, keepProba,\n+  this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, threshold, keepProba,\n         isTrunc);\n   }\n \n-  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId,\n-      int walkLength, int numParts) {\n-    this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, -1, 1.0, false);\n+  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId, int walkLength, int numParts) {\n+  this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, -1, 1.0, false);\n   }\n \n   public InitWalkPathPartitionParam() {\n@@ -128,4 +125,4 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n     int len = super.bufferLen();\n     return len + 28;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/578/InitWalkPathPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/578/InitWalkPathPartitionParam.java\nindex b91ce8e129b..4e504cf93c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/578/InitWalkPathPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/578/InitWalkPathPartitionParam.java\n@@ -29,9 +29,7 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n   private double keepProba;\n   private boolean isTrunc;\n \n-  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-      int neighborMatrixId, int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n+  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock, int neighborMatrixId, int walkLength, int numParts, int threshold, double keepProba, boolean isTrunc) {\n     super(matrixId, partKey, updateClock);\n     this.neighborMatrixId = neighborMatrixId;\n     this.walkLength = walkLength;\n@@ -41,21 +39,16 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n     this.isTrunc = isTrunc;\n   }\n \n-  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId,\n-      int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n-    this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, threshold, keepProba,\n-        isTrunc);\n+  public InitWalkPathPartitionParam(int matrixId,\n+                                    PartitionKey partKey, int neighborMatrixId, int walkLength, int numParts, int threshold, double keepProba, boolean isTrunc) {\n+    this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, threshold, keepProba, isTrunc);\n   }\n \n-  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId,\n-      int walkLength, int numParts) {\n+  public InitWalkPathPartitionParam(int matrixId, PartitionKey partKey, int neighborMatrixId, int walkLength, int numParts) {\n     this(matrixId, partKey, false, neighborMatrixId, walkLength, numParts, -1, 1.0, false);\n   }\n \n-  public InitWalkPathPartitionParam() {\n-\n-  }\n+  public InitWalkPathPartitionParam() {}\n \n   public int getNeighborMatrixId() {\n     return neighborMatrixId;\n@@ -128,4 +121,5 @@ public class InitWalkPathPartitionParam extends PartitionUpdateParam {\n     int len = super.bufferLen();\n     return len + 28;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}