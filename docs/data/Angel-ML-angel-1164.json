{
    "project_name": "Angel-ML-angel",
    "error_id": "1164",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1164/TextColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1164/TextColumnFormat.java\nindex 24caf11a722..cf90b2e4ca2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1164/TextColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1164/TextColumnFormat.java\n@@ -26,13 +26,15 @@ import java.io.IOException;\n  */\n public class TextColumnFormat extends ColumnFormat {\n   public String sep = \",\";\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+\n+  @Override\n+  public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -40,13 +42,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -54,13 +57,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -68,13 +72,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -82,13 +87,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -96,13 +102,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -110,13 +117,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -124,13 +132,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -138,75 +147,83 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n     }\n   }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1164/TextColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1164/TextColumnFormat.java\nindex 24caf11a722..d623690c979 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1164/TextColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1164/TextColumnFormat.java\n@@ -26,13 +26,14 @@ import java.io.IOException;\n  */\n public class TextColumnFormat extends ColumnFormat {\n   public String sep = \",\";\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -40,13 +41,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -54,13 +56,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -68,13 +71,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -82,13 +86,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -96,13 +101,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -110,13 +116,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -124,13 +131,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -138,75 +146,83 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i+ 1]);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1164/TextColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1164/TextColumnFormat.java\nindex 24caf11a722..53ec076456d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1164/TextColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1164/TextColumnFormat.java\n@@ -24,15 +24,19 @@ import java.io.IOException;\n /**\n  * Text format: column id + sep + row1 element + sep + row2 element + sep + ...\n  */\n+\n public class TextColumnFormat extends ColumnFormat {\n+\n   public String sep = \",\";\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+\n+  @Override\n+  public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -40,13 +44,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -54,13 +59,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -68,13 +74,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -82,13 +89,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -96,13 +104,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -110,13 +119,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -124,13 +134,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -138,75 +149,84 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 77
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}