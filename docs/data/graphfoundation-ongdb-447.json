{
    "project_name": "graphfoundation-ongdb",
    "error_id": "447",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "147",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "191",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "195",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/447/SpatialIndexPartReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/447/SpatialIndexPartReader.java\nindex 7ab5707631f..1c5a5ac06b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/447/SpatialIndexPartReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/447/SpatialIndexPartReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.io.IOException;\n@@ -43,188 +44,183 @@ import org.neo4j.kernel.impl.index.schema.fusion.BridgingIndexProgressor;\n import org.neo4j.storageengine.api.schema.IndexProgressor;\n import org.neo4j.values.storable.Value;\n \n-public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends NativeSchemaIndexReader<SpatialSchemaKey,VALUE>\n+public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends NativeSchemaIndexReader<SpatialSchemaKey, VALUE>\n {\n-    private final SpatialLayout spatial;\n-    private final SpaceFillingCurveConfiguration configuration;\n+  private final SpatialLayout spatial;\n+  private final SpaceFillingCurveConfiguration configuration;\n+\n+  SpatialIndexPartReader(GBPTree<SpatialSchemaKey, VALUE> tree, Layout<SpatialSchemaKey, VALUE> layout,\n+                         IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor,\n+                         SpaceFillingCurveConfiguration configuration)\n+  {\n+    super(tree, layout, samplingConfig, descriptor);\n+    spatial = (SpatialLayout) layout;\n+    this.configuration = configuration;\n+  }\n \n-    SpatialIndexPartReader( GBPTree<SpatialSchemaKey,VALUE> tree, Layout<SpatialSchemaKey,VALUE> layout,\n-            IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor,\n-            SpaceFillingCurveConfiguration configuration )\n+  @Override\n+  void validateQuery(IndexOrder indexOrder, IndexQuery[] predicates)\n+  {\n+    if (predicates.length != 1)\n     {\n-        super( tree, layout, samplingConfig, descriptor );\n-        spatial = (SpatialLayout) layout;\n-        this.configuration = configuration;\n+      throw new UnsupportedOperationException(\"Spatial index doesn't handle composite queries\");\n     }\n \n-    @Override\n-    void validateQuery( IndexOrder indexOrder, IndexQuery[] predicates )\n-    {\n-        if ( predicates.length != 1 )\n-        {\n-            throw new UnsupportedOperationException( \"Spatial index doesn't handle composite queries\" );\n-        }\n+    CapabilityValidator.validateQuery(SpatialIndexProvider.CAPABILITY, indexOrder, predicates);\n+  }\n \n-        CapabilityValidator.validateQuery( SpatialIndexProvider.CAPABILITY, indexOrder, predicates );\n-    }\n+  @Override\n+  boolean initializeRangeForQuery(SpatialSchemaKey treeKeyFrom, SpatialSchemaKey treeKeyTo, IndexQuery[] predicates)\n+  {\n+    throw new UnsupportedOperationException(\"Cannot initialize 1D range in multidimensional spatial index reader\");\n+  }\n \n-    @Override\n-    boolean initializeRangeForQuery( SpatialSchemaKey treeKeyFrom, SpatialSchemaKey treeKeyTo, IndexQuery[] predicates )\n-    {\n-        throw new UnsupportedOperationException( \"Cannot initialize 1D range in multidimensional spatial index reader\" );\n-    }\n+  @Override\n+  public PrimitiveLongResourceIterator query(IndexQuery... predicates)\n+  {\n+    NodeValueIterator nodeValueIterator = new NodeValueIterator();\n+    query(nodeValueIterator, IndexOrder.NONE, predicates);\n+    return nodeValueIterator;\n+  }\n \n-    @Override\n-    public PrimitiveLongResourceIterator query( IndexQuery... predicates )\n+  @Override\n+  public void query(IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates)\n+  {\n+    validateQuery(indexOrder, predicates);\n+    IndexQuery predicate = predicates[0];\n+    switch (predicate.type())\n     {\n-        NodeValueIterator nodeValueIterator = new NodeValueIterator();\n-        query( nodeValueIterator, IndexOrder.NONE, predicates );\n-        return nodeValueIterator;\n+      case exists:\n+        startSeekForExists(cursor, predicate);\n+        break;\n+      case exact:\n+        startSeekForExact(cursor, ((ExactPredicate) predicate).value(), predicate);\n+        break;\n+      case range:\n+        GeometryRangePredicate rangePredicate = (GeometryRangePredicate) predicate;\n+        if (!rangePredicate.crs().equals(spatial.crs))\n+        {\n+          throw new IllegalArgumentException(\n+              \"IndexQuery on spatial index with mismatching CoordinateReferenceSystem: \" + rangePredicate.crs() + \" != \" + spatial.crs);\n+        }\n+        startSeekForRange(cursor, rangePredicate, predicates);\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"IndexQuery of type \" + predicate.type() + \" is not supported.\");\n     }\n+  }\n \n-    @Override\n-    public void query( IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates )\n+  @Override\n+  public void distinctValues(IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor)\n+  {\n+    // This is basically a version of the basic implementation, but with added consulting of the PropertyAccessor\n+    // since these are lossy spatial values.\n+    SpatialSchemaKey lowest = layout.newKey();\n+    lowest.initialize(Long.MIN_VALUE);\n+    lowest.initValueAsLowest();\n+    SpatialSchemaKey highest = layout.newKey();\n+    highest.initialize(Long.MAX_VALUE);\n+    highest.initValueAsHighest();\n+    try\n     {\n-        validateQuery( indexOrder, predicates );\n-        IndexQuery predicate = predicates[0];\n-        switch ( predicate.type() )\n-        {\n-        case exists:\n-            startSeekForExists( cursor, predicate );\n-            break;\n-        case exact:\n-            startSeekForExact( cursor, ((ExactPredicate) predicate).value(), predicate );\n-            break;\n-        case range:\n-            GeometryRangePredicate rangePredicate = (GeometryRangePredicate) predicate;\n-            if ( !rangePredicate.crs().equals( spatial.crs ) )\n+      RawCursor<Hit<SpatialSchemaKey, VALUE>, IOException> seeker = tree.seek(lowest, highest);\n+      SchemaLayout<SpatialSchemaKey> schemaLayout = (SchemaLayout<SpatialSchemaKey>) layout;\n+      Comparator<SpatialSchemaKey> comparator =\n+          new PropertyLookupFallbackComparator<>(schemaLayout, propertyAccessor, descriptor.schema().getPropertyId());\n+      NativeDistinctValuesProgressor<SpatialSchemaKey, VALUE> progressor =\n+          new NativeDistinctValuesProgressor<SpatialSchemaKey, VALUE>(seeker, client, openSeekers, schemaLayout, comparator)\n+          {\n+            @Override\n+            Value[] extractValues(SpatialSchemaKey key)\n             {\n-                throw new IllegalArgumentException(\n-                        \"IndexQuery on spatial index with mismatching CoordinateReferenceSystem: \" + rangePredicate.crs() + \" != \" + spatial.crs );\n+              try\n+              {\n+                return new Value[] {propertyAccessor.getPropertyValue(key.getEntityId(), descriptor.schema().getPropertyId())};\n+              } catch (EntityNotFoundException e)\n+              {\n+                // We couldn't get the value due to the entity not being there. Concurrently deleted?\n+                return null;\n+              }\n             }\n-            startSeekForRange( cursor, rangePredicate, predicates );\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"IndexQuery of type \" + predicate.type() + \" is not supported.\" );\n-        }\n-    }\n-\n-    @Override\n-    public void distinctValues( IndexProgressor.NodeValueClient client, PropertyAccessor propertyAccessor )\n+          };\n+      client.initialize(descriptor, progressor, new IndexQuery[0]);\n+    } catch (IOException e)\n     {\n-        // This is basically a version of the basic implementation, but with added consulting of the PropertyAccessor\n-        // since these are lossy spatial values.\n-        SpatialSchemaKey lowest = layout.newKey();\n-        lowest.initialize( Long.MIN_VALUE );\n-        lowest.initValueAsLowest();\n-        SpatialSchemaKey highest = layout.newKey();\n-        highest.initialize( Long.MAX_VALUE );\n-        highest.initValueAsHighest();\n-        try\n-        {\n-            RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = tree.seek( lowest, highest );\n-            SchemaLayout<SpatialSchemaKey> schemaLayout = (SchemaLayout<SpatialSchemaKey>) layout;\n-            Comparator<SpatialSchemaKey> comparator =\n-                    new PropertyLookupFallbackComparator<>( schemaLayout, propertyAccessor, descriptor.schema().getPropertyId() );\n-            NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE> progressor =\n-                    new NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE>( seeker, client, openSeekers, schemaLayout, comparator )\n-                    {\n-                        @Override\n-                        Value[] extractValues( SpatialSchemaKey key )\n-                        {\n-                            try\n-                            {\n-                                return new Value[]{propertyAccessor.getPropertyValue( key.getEntityId(), descriptor.schema().getPropertyId() )};\n-                            }\n-                            catch ( EntityNotFoundException e )\n-                            {\n-                                // We couldn't get the value due to the entity not being there. Concurrently deleted?\n-                                return null;\n-                            }\n-                        }\n-                    };\n-            client.initialize( descriptor, progressor, new IndexQuery[0] );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    private void startSeekForExists( IndexProgressor.NodeValueClient client, IndexQuery... predicates )\n-    {\n-        SpatialSchemaKey treeKeyFrom = layout.newKey();\n-        SpatialSchemaKey treeKeyTo = layout.newKey();\n-        treeKeyFrom.initAsLowest();\n-        treeKeyTo.initAsHighest();\n-        startSeekForInitializedRange( client, treeKeyFrom, treeKeyTo, predicates, false );\n-    }\n+  private void startSeekForExists(IndexProgressor.NodeValueClient client, IndexQuery... predicates)\n+  {\n+    SpatialSchemaKey treeKeyFrom = layout.newKey();\n+    SpatialSchemaKey treeKeyTo = layout.newKey();\n+    treeKeyFrom.initAsLowest();\n+    treeKeyTo.initAsHighest();\n+    startSeekForInitializedRange(client, treeKeyFrom, treeKeyTo, predicates, false);\n+  }\n \n-    private void startSeekForExact( IndexProgressor.NodeValueClient client, Value value, IndexQuery... predicates )\n+  private void startSeekForExact(IndexProgressor.NodeValueClient client, Value value, IndexQuery... predicates)\n+  {\n+    SpatialSchemaKey treeKeyFrom = layout.newKey();\n+    SpatialSchemaKey treeKeyTo = layout.newKey();\n+    treeKeyFrom.from(Long.MIN_VALUE, value);\n+    treeKeyTo.from(Long.MAX_VALUE, value);\n+    startSeekForInitializedRange(client, treeKeyFrom, treeKeyTo, predicates, false);\n+  }\n+\n+  private void startSeekForRange(IndexProgressor.NodeValueClient client, GeometryRangePredicate rangePredicate, IndexQuery[] query)\n+  {\n+    try\n     {\n+      BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor(client, descriptor.schema().getPropertyIds());\n+      client.initialize(descriptor, multiProgressor, query);\n+      SpaceFillingCurve curve = spatial.getSpaceFillingCurve();\n+      double[] from = rangePredicate.from() == null ? null : rangePredicate.from().coordinate();\n+      double[] to = rangePredicate.to() == null ? null : rangePredicate.to().coordinate();\n+      List<SpaceFillingCurve.LongRange> ranges = curve.getTilesIntersectingEnvelope(from, to, configuration);\n+      for (SpaceFillingCurve.LongRange range : ranges)\n+      {\n         SpatialSchemaKey treeKeyFrom = layout.newKey();\n         SpatialSchemaKey treeKeyTo = layout.newKey();\n-        treeKeyFrom.from( Long.MIN_VALUE, value );\n-        treeKeyTo.from( Long.MAX_VALUE, value );\n-        startSeekForInitializedRange( client, treeKeyFrom, treeKeyTo, predicates, false );\n-    }\n-\n-    private void startSeekForRange( IndexProgressor.NodeValueClient client, GeometryRangePredicate rangePredicate, IndexQuery[] query )\n+        treeKeyFrom.fromDerivedValue(Long.MIN_VALUE, range.min);\n+        treeKeyTo.fromDerivedValue(Long.MAX_VALUE, range.max + 1);\n+        RawCursor<Hit<SpatialSchemaKey, VALUE>, IOException> seeker = makeIndexSeeker(treeKeyFrom, treeKeyTo);\n+        IndexProgressor hitProgressor = new SpatialHitIndexProgressor<>(seeker, client, openSeekers);\n+        multiProgressor.initialize(descriptor, hitProgressor, query);\n+      }\n+    } catch (IllegalArgumentException e)\n     {\n-        try\n-        {\n-            BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( client, descriptor.schema().getPropertyIds() );\n-            client.initialize( descriptor, multiProgressor, query );\n-            SpaceFillingCurve curve = spatial.getSpaceFillingCurve();\n-            double[] from = rangePredicate.from() == null ? null : rangePredicate.from().coordinate();\n-            double[] to = rangePredicate.to() == null ? null : rangePredicate.to().coordinate();\n-            List<SpaceFillingCurve.LongRange> ranges = curve.getTilesIntersectingEnvelope( from, to, configuration );\n-            for ( SpaceFillingCurve.LongRange range : ranges )\n-            {\n-                SpatialSchemaKey treeKeyFrom = layout.newKey();\n-                SpatialSchemaKey treeKeyTo = layout.newKey();\n-                treeKeyFrom.fromDerivedValue( Long.MIN_VALUE, range.min );\n-                treeKeyTo.fromDerivedValue( Long.MAX_VALUE, range.max + 1 );\n-                RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = makeIndexSeeker( treeKeyFrom, treeKeyTo );\n-                IndexProgressor hitProgressor = new SpatialHitIndexProgressor<>( seeker, client, openSeekers );\n-                multiProgressor.initialize( descriptor, hitProgressor, query );\n-            }\n-        }\n-        catch ( IllegalArgumentException e )\n-        {\n-            // Invalid query ranges will cause this state (eg. min>max)\n-            client.initialize( descriptor, IndexProgressor.EMPTY, query );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n+      // Invalid query ranges will cause this state (eg. min>max)\n+      client.initialize(descriptor, IndexProgressor.EMPTY, query);\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    @Override\n-    void startSeekForInitializedRange( IndexProgressor.NodeValueClient client, SpatialSchemaKey treeKeyFrom,\n-            SpatialSchemaKey treeKeyTo, IndexQuery[] query, boolean needFilter )\n+  @Override\n+  void startSeekForInitializedRange(IndexProgressor.NodeValueClient client, SpatialSchemaKey treeKeyFrom,\n+                                    SpatialSchemaKey treeKeyTo, IndexQuery[] query, boolean needFilter)\n+  {\n+    if (layout.compare(treeKeyFrom, treeKeyTo) > 0)\n     {\n-        if ( layout.compare( treeKeyFrom, treeKeyTo ) > 0 )\n-        {\n-            client.initialize( descriptor, IndexProgressor.EMPTY, query );\n-            return;\n-        }\n-        try\n-        {\n-            RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = makeIndexSeeker( treeKeyFrom, treeKeyTo );\n-            IndexProgressor hitProgressor = new SpatialHitIndexProgressor<>( seeker, client, openSeekers );\n-            client.initialize( descriptor, hitProgressor, query );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n+      client.initialize(descriptor, IndexProgressor.EMPTY, query);\n+      return;\n     }\n-\n-    @Override\n-    public boolean hasFullValuePrecision( IndexQuery... predicates )\n+    try\n     {\n-        return false;\n+      RawCursor<Hit<SpatialSchemaKey, VALUE>, IOException> seeker = makeIndexSeeker(treeKeyFrom, treeKeyTo);\n+      IndexProgressor hitProgressor = new SpatialHitIndexProgressor<>(seeker, client, openSeekers);\n+      client.initialize(descriptor, hitProgressor, query);\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n+  }\n+\n+  @Override\n+  public boolean hasFullValuePrecision(IndexQuery... predicates)\n+  {\n+    return false;\n+  }\n }\n",
            "diff_size": 243
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/447/SpatialIndexPartReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/447/SpatialIndexPartReader.java\nindex 7ab5707631f..b4916f8db64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/447/SpatialIndexPartReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/447/SpatialIndexPartReader.java\n@@ -99,10 +99,10 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n             GeometryRangePredicate rangePredicate = (GeometryRangePredicate) predicate;\n             if ( !rangePredicate.crs().equals( spatial.crs ) )\n             {\n-                throw new IllegalArgumentException(\n-                        \"IndexQuery on spatial index with mismatching CoordinateReferenceSystem: \" + rangePredicate.crs() + \" != \" + spatial.crs );\n+                throw new IllegalArgumentException( \"IndexQuery on spatial index with mismatching CoordinateReferenceSystem: \" + rangePredicate.crs() + \" != \" + spatial.crs );\n             }\n-            startSeekForRange( cursor, rangePredicate, predicates );\n+\n+startSeekForRange( cursor, rangePredicate, predicates );\n             break;\n         default:\n             throw new IllegalArgumentException( \"IndexQuery of type \" + predicate.type() + \" is not supported.\" );\n@@ -124,10 +124,8 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n         {\n             RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = tree.seek( lowest, highest );\n             SchemaLayout<SpatialSchemaKey> schemaLayout = (SchemaLayout<SpatialSchemaKey>) layout;\n-            Comparator<SpatialSchemaKey> comparator =\n-                    new PropertyLookupFallbackComparator<>( schemaLayout, propertyAccessor, descriptor.schema().getPropertyId() );\n-            NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE> progressor =\n-                    new NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE>( seeker, client, openSeekers, schemaLayout, comparator )\n+            Comparator<SpatialSchemaKey> comparator = new PropertyLookupFallbackComparator<>( schemaLayout, propertyAccessor, descriptor.schema().getPropertyId() );\n+NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE> progressor = new NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE>( seeker, client, openSeekers, schemaLayout, comparator )\n                     {\n                         @Override\n                         Value[] extractValues( SpatialSchemaKey key )\n@@ -143,7 +141,7 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n                             }\n                         }\n                     };\n-            client.initialize( descriptor, progressor, new IndexQuery[0] );\n+client.initialize( descriptor, progressor, new IndexQuery[0] );\n         }\n         catch ( IOException e )\n         {\n@@ -210,7 +208,8 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n             client.initialize( descriptor, IndexProgressor.EMPTY, query );\n             return;\n         }\n-        try\n+\n+try\n         {\n             RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = makeIndexSeeker( treeKeyFrom, treeKeyTo );\n             IndexProgressor hitProgressor = new SpatialHitIndexProgressor<>( seeker, client, openSeekers );\n@@ -227,4 +226,4 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n     {\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "37",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "column": "116",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "175",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "175",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/447/SpatialIndexPartReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/447/SpatialIndexPartReader.java\nindex 7ab5707631f..de8fd85d294 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/447/SpatialIndexPartReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/447/SpatialIndexPartReader.java\n@@ -23,7 +23,6 @@ import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Comparator;\n import java.util.List;\n-\n import org.neo4j.collection.primitive.PrimitiveLongResourceIterator;\n import org.neo4j.cursor.RawCursor;\n import org.neo4j.gis.spatial.index.curves.SpaceFillingCurve;\n@@ -43,22 +42,19 @@ import org.neo4j.kernel.impl.index.schema.fusion.BridgingIndexProgressor;\n import org.neo4j.storageengine.api.schema.IndexProgressor;\n import org.neo4j.values.storable.Value;\n \n-public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends NativeSchemaIndexReader<SpatialSchemaKey,VALUE>\n+public class SpatialIndexPartReader <VALUE extends NativeSchemaValue> extends NativeSchemaIndexReader<SpatialSchemaKey,VALUE>\n {\n     private final SpatialLayout spatial;\n     private final SpaceFillingCurveConfiguration configuration;\n \n-    SpatialIndexPartReader( GBPTree<SpatialSchemaKey,VALUE> tree, Layout<SpatialSchemaKey,VALUE> layout,\n-            IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor,\n-            SpaceFillingCurveConfiguration configuration )\n+    SpatialIndexPartReader( GBPTree<SpatialSchemaKey,VALUE> tree, Layout<SpatialSchemaKey,VALUE> layout, IndexSamplingConfig samplingConfig, SchemaIndexDescriptor descriptor, SpaceFillingCurveConfiguration configuration )\n     {\n         super( tree, layout, samplingConfig, descriptor );\n         spatial = (SpatialLayout) layout;\n         this.configuration = configuration;\n     }\n \n-    @Override\n-    void validateQuery( IndexOrder indexOrder, IndexQuery[] predicates )\n+    @Override void validateQuery( IndexOrder indexOrder, IndexQuery[] predicates )\n     {\n         if ( predicates.length != 1 )\n         {\n@@ -86,7 +82,7 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n     public void query( IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates )\n     {\n         validateQuery( indexOrder, predicates );\n-        IndexQuery predicate = predicates[0];\n+        IndexQuery predicate = predicates[ 0];\n         switch ( predicate.type() )\n         {\n         case exists:\n@@ -97,11 +93,11 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n             break;\n         case range:\n             GeometryRangePredicate rangePredicate = (GeometryRangePredicate) predicate;\n-            if ( !rangePredicate.crs().equals( spatial.crs ) )\n+            if ( ! rangePredicate.crs().equals( spatial.crs ) )\n             {\n-                throw new IllegalArgumentException(\n-                        \"IndexQuery on spatial index with mismatching CoordinateReferenceSystem: \" + rangePredicate.crs() + \" != \" + spatial.crs );\n+                throw new IllegalArgumentException( \"IndexQuery on spatial index with mismatching CoordinateReferenceSystem: \" + rangePredicate.crs() + \" != \" + spatial.crs );\n             }\n+\n             startSeekForRange( cursor, rangePredicate, predicates );\n             break;\n         default:\n@@ -124,25 +120,22 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n         {\n             RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = tree.seek( lowest, highest );\n             SchemaLayout<SpatialSchemaKey> schemaLayout = (SchemaLayout<SpatialSchemaKey>) layout;\n-            Comparator<SpatialSchemaKey> comparator =\n-                    new PropertyLookupFallbackComparator<>( schemaLayout, propertyAccessor, descriptor.schema().getPropertyId() );\n-            NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE> progressor =\n-                    new NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE>( seeker, client, openSeekers, schemaLayout, comparator )\n-                    {\n-                        @Override\n-                        Value[] extractValues( SpatialSchemaKey key )\n-                        {\n-                            try\n-                            {\n-                                return new Value[]{propertyAccessor.getPropertyValue( key.getEntityId(), descriptor.schema().getPropertyId() )};\n-                            }\n-                            catch ( EntityNotFoundException e )\n-                            {\n+            Comparator<SpatialSchemaKey> comparator = new PropertyLookupFallbackComparator<>( schemaLayout, propertyAccessor, descriptor.schema().getPropertyId() );\n+            NativeDistinctValuesProgressor<SpatialSchemaKey,VALUE> progressor = new NativeDistinctValuesProgressor <SpatialSchemaKey,VALUE>( seeker, client, openSeekers, schemaLayout, comparator )\n+{\n+    @Override Value[] extractValues( SpatialSchemaKey key )\n+    {\n+        try\n+        {\n+            return new Value[]{propertyAccessor.getPropertyValue( key.getEntityId(), descriptor.schema().getPropertyId() )};\n+        }\n+        catch ( EntityNotFoundException e )\n+        {\n                                 // We couldn't get the value due to the entity not being there. Concurrently deleted?\n-                                return null;\n-                            }\n-                        }\n-                    };\n+            return null;\n+        }\n+    }\n+};\n             client.initialize( descriptor, progressor, new IndexQuery[0] );\n         }\n         catch ( IOException e )\n@@ -179,7 +172,7 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n             double[] from = rangePredicate.from() == null ? null : rangePredicate.from().coordinate();\n             double[] to = rangePredicate.to() == null ? null : rangePredicate.to().coordinate();\n             List<SpaceFillingCurve.LongRange> ranges = curve.getTilesIntersectingEnvelope( from, to, configuration );\n-            for ( SpaceFillingCurve.LongRange range : ranges )\n+            for( SpaceFillingCurve.LongRange range : ranges)\n             {\n                 SpatialSchemaKey treeKeyFrom = layout.newKey();\n                 SpatialSchemaKey treeKeyTo = layout.newKey();\n@@ -195,21 +188,21 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n             // Invalid query ranges will cause this state (eg. min>max)\n             client.initialize( descriptor, IndexProgressor.EMPTY, query );\n         }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n+\n+            catch ( IOException e )\n+            {\n+                throw new UncheckedIOException( e );\n+            }\n     }\n \n-    @Override\n-    void startSeekForInitializedRange( IndexProgressor.NodeValueClient client, SpatialSchemaKey treeKeyFrom,\n-            SpatialSchemaKey treeKeyTo, IndexQuery[] query, boolean needFilter )\n+    @Override void startSeekForInitializedRange( IndexProgressor.NodeValueClient client, SpatialSchemaKey treeKeyFrom, SpatialSchemaKey treeKeyTo, IndexQuery[] query, boolean needFilter )\n     {\n         if ( layout.compare( treeKeyFrom, treeKeyTo ) > 0 )\n         {\n             client.initialize( descriptor, IndexProgressor.EMPTY, query );\n             return;\n         }\n+\n         try\n         {\n             RawCursor<Hit<SpatialSchemaKey,VALUE>,IOException> seeker = makeIndexSeeker( treeKeyFrom, treeKeyTo );\n@@ -227,4 +220,4 @@ public class SpatialIndexPartReader<VALUE extends NativeSchemaValue> extends Nat\n     {\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}