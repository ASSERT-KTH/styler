{
    "project_name": "CESNET-perun",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t\"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n\t\t\"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + \n\t\tserviceMappingSelectQuery + \", \" +\n\t\t\"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/17/ServicesManagerImpl.java\nindex a4062ce650f..65053ded5b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/17/ServicesManagerImpl.java\n@@ -74,7 +74,7 @@ public class ServicesManagerImpl implements ServicesManagerImplApi {\n \tpublic final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" +\n \t\t\"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n \t\t\"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n-\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + \n+\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" +\n \t\tserviceMappingSelectQuery + \", \" +\n \t\t\"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/17/ServicesManagerImpl.java\nindex a4062ce650f..2fc58a2407d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/17/ServicesManagerImpl.java\n@@ -43,628 +43,671 @@ import org.springframework.dao.DuplicateKeyException;\n public class ServicesManagerImpl implements ServicesManagerImplApi {\n \n \n-\tfinal static Logger log = LoggerFactory.getLogger(ServicesManagerImpl.class);\n-\n-\t// http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate static JdbcPerunTemplate jdbc;\n-\n-\tpublic ServicesManagerImpl(DataSource perunPool) {\n-\t\tjdbc = new JdbcPerunTemplate(perunPool);\n-\t}\n-\n-\tpublic final static String serviceMappingSelectQuery = \" services.id as services_id, services.name as services_name, \" +\n-\t\t\"services.description as services_description, services.delay as services_delay, services.recurrence as services_recurrence, \" +\n-\t\t\"services.enabled as services_enabled, services.script as services_script, \" +\n-\t\t\"services.created_at as services_created_at, services.created_by as services_created_by, \" +\n-\t\t\"services.modified_by as services_modified_by, services.modified_at as services_modified_at, \" +\n-\t\t\"services.created_by_uid as services_created_by_uid, services.modified_by_uid as services_modified_by_uid\";\n-\n-\tpublic final static String servicePackageMappingSelectQuery = \" service_packages.id as service_packages_id, service_packages.description as service_packages_description, \" +\n-\t\t\"service_packages.name as service_packages_name, service_packages.created_at as service_packages_created_at, service_packages.created_by as service_packages_created_by, \" +\n-\t\t\"service_packages.modified_by as service_packages_modified_by, service_packages.modified_at as service_packages_modified_at, \" +\n-\t\t\"service_packages.modified_by_uid as s_packages_modified_by_uid, service_packages.created_by_uid as s_packages_created_by_uid\";\n-\n-\tpublic final static String destinationMappingSelectQuery = \" destinations.id as destinations_id, destinations.destination as destinations_destination, \" +\n-\t\t\"destinations.type as destinations_type, destinations.created_at as destinations_created_at, destinations.created_by as destinations_created_by, \" +\n-\t\t\"destinations.modified_by as destinations_modified_by, destinations.modified_at as destinations_modified_at, \" +\n-\t\t\"destinations.modified_by_uid as destinations_modified_by_uid, destinations.created_by_uid as destinations_created_by_uid\";\n-\n-\tpublic final static String facilityDestinationMappingSelectQuery = destinationMappingSelectQuery + \", facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n-\n-\tpublic final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" +\n-\t\t\"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n-\t\t\"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n-\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + \n-\t\tserviceMappingSelectQuery + \", \" +\n-\t\t\"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n-\n-\tpublic static final RowMapper<Service> SERVICE_MAPPER = new RowMapper<Service>() {\n-\t\tpublic Service mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tService service = new Service();\n-\t\t\tservice.setId(rs.getInt(\"services_id\"));\n-\t\t\tservice.setName(rs.getString(\"services_name\"));\n-\t\t\tservice.setDescription(rs.getString(\"services_description\"));\n-\t\t\tservice.setDelay(rs.getInt(\"services_delay\"));\n-\t\t\tservice.setRecurrence(rs.getInt(\"services_recurrence\"));\n-\t\t\tchar enabled = rs.getString(\"services_enabled\").charAt(0);\n-\t\t\tif (enabled == '0') {\n-\t\t\t\tservice.setEnabled(false);\n-\t\t\t} else {\n-\t\t\t\tservice.setEnabled(true);\n-\t\t\t}\n-\t\t\tservice.setScript(rs.getString(\"services_script\"));\n-\t\t\tservice.setCreatedAt(rs.getString(\"services_created_at\"));\n-\t\t\tservice.setCreatedBy(rs.getString(\"services_created_by\"));\n-\t\t\tservice.setModifiedAt(rs.getString(\"services_modified_at\"));\n-\t\t\tservice.setModifiedBy(rs.getString(\"services_modified_by\"));\n-\t\t\tif(rs.getInt(\"services_modified_by_uid\") == 0) service.setModifiedByUid(null);\n-\t\t\telse service.setModifiedByUid(rs.getInt(\"services_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"services_created_by_uid\") == 0) service.setCreatedByUid(null);\n-\t\t\telse service.setCreatedByUid(rs.getInt(\"services_created_by_uid\"));\n-\t\t\treturn service;\n-\n-\t\t}\n-\t};\n-\n-\tpublic static final RowMapper<ServicesPackage> SERVICESPACKAGE_MAPPER = new RowMapper<ServicesPackage>() {\n-\n-\t\tpublic ServicesPackage mapRow(ResultSet rs, int i) throws SQLException {\n-\n-\t\t\tServicesPackage sPackage = new ServicesPackage();\n-\t\t\tsPackage.setId(rs.getInt(\"service_packages_id\"));\n-\t\t\tsPackage.setDescription(rs.getString(\"service_packages_description\"));\n-\t\t\tsPackage.setName(rs.getString(\"service_packages_name\"));\n-\t\t\tsPackage.setCreatedAt(rs.getString(\"service_packages_created_at\"));\n-\t\t\tsPackage.setCreatedBy(rs.getString(\"service_packages_created_by\"));\n-\t\t\tsPackage.setModifiedAt(rs.getString(\"service_packages_modified_at\"));\n-\t\t\tsPackage.setModifiedBy(rs.getString(\"service_packages_modified_by\"));\n-\t\t\tif(rs.getInt(\"s_packages_modified_by_uid\") == 0) sPackage.setModifiedByUid(null);\n-\t\t\telse sPackage.setModifiedByUid(rs.getInt(\"s_packages_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"s_packages_created_by_uid\") == 0) sPackage.setCreatedByUid(null);\n-\t\t\telse sPackage.setCreatedByUid(rs.getInt(\"s_packages_created_by_uid\"));\n-\t\t\treturn sPackage;\n-\t\t}\n-\n-\t};\n-\n-\tpublic static final RowMapper<Destination> DESTINATION_MAPPER = new RowMapper<Destination>() {\n-\t\tpublic Destination mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tDestination destination = new Destination();\n-\t\t\tdestination.setId(rs.getInt(\"destinations_id\"));\n-\t\t\tdestination.setDestination(rs.getString(\"destinations_destination\"));\n-\t\t\tdestination.setType(rs.getString(\"destinations_type\"));\n-\t\t\tdestination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n-\t\t\tdestination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n-\t\t\tdestination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n-\t\t\tdestination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n-\t\t\ttry { // do not mind if the column is not in the results\n-\t\t\t\tString ptype = rs.getString(\"f_s_des_propagation_type\");\n-\t\t\t\tif(ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n-\t\t\t\t\tdestination.setPropagationType(ptype);\n-\t\t\t\t} else {\n-\t\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t\t}\n-\t\t\t} catch (SQLException e) {\n-\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t}\n-\t\t\tif(rs.getInt(\"destinations_modified_by_uid\") == 0) destination.setModifiedByUid(null);\n-\t\t\telse destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"destinations_created_by_uid\") == 0) destination.setCreatedByUid(null);\n-\t\t\telse destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n-\t\t\treturn destination;\n-\t\t}\n-\t};\n-\n-\tpublic static final RowMapper<RichDestination> RICH_DESTINATION_MAPPER = new RowMapper<RichDestination>() {\n-\t\tpublic RichDestination mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tDestination destination = new Destination();\n-\t\t\tdestination.setId(rs.getInt(\"destinations_id\"));\n-\t\t\tdestination.setDestination(rs.getString(\"destinations_destination\"));\n-\t\t\tdestination.setType(rs.getString(\"destinations_type\"));\n-\t\t\tdestination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n-\t\t\tdestination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n-\t\t\tdestination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n-\t\t\tdestination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n-\t\t\ttry { // do not mind if the column is not in the results\n-\t\t\t\tString ptype = rs.getString(\"f_s_des_propagation_type\");\n-\t\t\t\tif(ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n-\t\t\t\t\tdestination.setPropagationType(ptype);\n-\t\t\t\t} else {\n-\t\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t\t}\n-\t\t\t} catch (SQLException e) {\n-\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t}\n-\t\t\tif(rs.getInt(\"destinations_modified_by_uid\") == 0) destination.setModifiedByUid(null);\n-\t\t\telse destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"destinations_created_by_uid\") == 0) destination.setCreatedByUid(null);\n-\t\t\telse destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n-\n-\t\t\tFacility facility = new Facility();\n-\t\t\tfacility.setId(rs.getInt(\"facilities_id\"));\n-\t\t\tfacility.setName(rs.getString(\"facilities_name\"));\n-\t\t\tfacility.setCreatedAt(rs.getString(\"facilities_created_at\"));\n-\t\t\tfacility.setCreatedBy(rs.getString(\"facilities_created_by\"));\n-\t\t\tfacility.setModifiedAt(rs.getString(\"facilities_modified_at\"));\n-\t\t\tfacility.setModifiedBy(rs.getString(\"facilities_modified_by\"));\n-\t\t\tif(rs.getInt(\"facilities_modified_by_uid\") == 0) facility.setModifiedByUid(null);\n-\t\t\telse facility.setModifiedByUid(rs.getInt(\"facilities_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"facilities_created_by_uid\") == 0) facility.setCreatedByUid(null);\n-\t\t\telse facility.setCreatedByUid(rs.getInt(\"facilities_created_by_uid\"));\n-\n-\t\t\tService service = SERVICE_MAPPER.mapRow(rs, i);\n-\n-\t\t\treturn new RichDestination(destination, facility, service);\n-\t\t}\n-\t};\n-\n-\tpublic Service createService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint newId = Utils.getNewId(jdbc, \"services_id_seq\");\n-\t\t\t// if not set, make sure script path is set based on service name\n-\t\t\tif (service.getScript() == null || service.getScript().isEmpty()) {\n-\t\t\t\tservice.setScript(\"./\"+service.getName());\n-\t\t\t}\n-\t\t\tjdbc.update(\"insert into services(id,name,description,delay,recurrence,enabled,script,created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, service.getName(),\n-\t\t\t\t\tservice.getDescription(), service.getDelay(), service.getRecurrence(), service.isEnabled() ? '1' : '0', service.getScript(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tlog.info(\"Service created: {}\", service);\n-\n-\t\t\tservice.setId(newId);\n-\n-\t\t\treturn service;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void deleteService(PerunSession sess, Service service) throws InternalErrorException, ServiceAlreadyRemovedException {\n-\t\ttry {\n-\t\t\t// Delete authz entries for this service\n-\t\t\tAuthzResolverBlImpl.removeAllAuthzForService(sess, service);\n-\n-\t\t\tint numAffected = jdbc.update(\"delete from services where id=?\", service.getId());\n-\t\t\tif(numAffected == 0) throw new ServiceAlreadyRemovedException(\"Service: \" + service);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void updateService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\t// if not set, make sure script path is set based on new service name\n-\t\t\tif (service.getScript() == null || service.getScript().isEmpty()) {\n-\t\t\t\tservice.setScript(\"./\"+service.getName());\n-\t\t\t}\n-\t\t\tjdbc.update(\"update services set name=?, description=?, delay=?, recurrence=?, enabled=?, script=?, \" +\n-\t\t\t\t\t\t\t\"modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id=?\",\n-\t\t\t\t\tservice.getName(), service.getDescription(), service.getDelay(), service.getRecurrence(),\n-\t\t\t\t\tservice.isEnabled() ? '1' : '0', service.getScript(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), service.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic Service getServiceByName(PerunSession sess, String name) throws InternalErrorException, ServiceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where name=?\", SERVICE_MAPPER, name);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServiceNotExistsException(\"Service not exists. name=\" + name);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic Service getServiceById(PerunSession sess, int id) throws InternalErrorException, ServiceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where id=?\", SERVICE_MAPPER, id);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServiceNotExistsException(\"Service not exists. Id=\" + id);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Service> getServices(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services\", SERVICE_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tlog.info(\"ServicesManager.getAllServices: No service found.\");\n-\t\t\treturn new ArrayList<Service>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services join service_required_attrs on services.id=service_required_attrs.service_id \"\n-\t\t\t\t\t+ \"where service_required_attrs.attr_id=?\", SERVICE_MAPPER, attributeDefinition.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tlog.info(\"ServicesManager.getServicesByAttributeDefinition: No service found.\");\n-\t\t\treturn new ArrayList<Service>();\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Resource> getAssignedResources(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + ResourcesManagerImpl.resourceMappingSelectQuery + \" from resource_services join resources on \" +\n-\t\t\t\t\t\"resource_services.resource_id=resources.id  where service_id=?\", ResourcesManagerImpl.RESOURCE_MAPPER, service.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<ServicesPackage> getServicesPackages(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tList<ServicesPackage> servicesPackages = jdbc.query(\"select \" + servicePackageMappingSelectQuery + \" from service_packages\", SERVICESPACKAGE_MAPPER);\n-\t\t\treturn servicesPackages;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic ServicesPackage getServicesPackageById(PerunSession sess, int servicesPackageId) throws InternalErrorException, ServicesPackageNotExistsException {\n-\t\ttry {\n-\t\t\tServicesPackage servicesPackage = jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where id = ?\", SERVICESPACKAGE_MAPPER,  new Integer(servicesPackageId));\n-\n-\t\t\treturn servicesPackage;\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServicesPackageNotExistsException(\"ServicesPackage with id '\" + servicesPackageId + \"' desn't exists\", ex);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic ServicesPackage createServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\n-\t\t\tint newId = Utils.getNewId(jdbc, \"service_packages_id_seq\");\n-\n-\t\t\tjdbc.update(\"insert into service_packages (id, name, description, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, servicesPackage.getName(),\n-\t\t\t\t\tservicesPackage.getDescription(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tservicesPackage.setId(newId);\n-\n-\t\t\treturn servicesPackage;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void updateServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update service_packages set description = ?, name = ?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id = ?\",\n-\t\t\t\t\tservicesPackage.getDescription(), servicesPackage.getName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), servicesPackage.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void deleteServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from service_packages where id = ?\", servicesPackage.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addServiceToServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyAssignedException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into service_service_packages (package_id, service_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", servicesPackage.getId(), service.getId(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch (DuplicateKeyException e) {\n-\t\t\tthrow new ServiceAlreadyAssignedException(\"Service with id \" + service.getId() + \" is already assigned to the service package with id \" + servicesPackage.getId(), e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeServiceFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyRemovedFromServicePackageException {\n-\t\ttry {\n-\t\t\tint numAffected = jdbc.update(\"delete from service_service_packages where package_id=? and service_id=?\", servicesPackage.getId(), service.getId());\n-\t\t\tif(numAffected == 0) throw new ServiceAlreadyRemovedFromServicePackageException(\"Service: \" + service + \" , ServicePackage: \" + servicesPackage);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic ServicesPackage getServicesPackageByName(PerunSession sess, String name) throws InternalErrorException, ServicesPackageNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where name=?\", SERVICESPACKAGE_MAPPER, name);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServicesPackageNotExistsException(\"ServicesPackage not exists. name=\" + name);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Service> getServicesFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tList<Service> services = new ArrayList<Service>();\n-\t\t\tList<Integer> servicesId = jdbc.query(\"select service_id as id from service_service_packages where package_id=?\", Utils.ID_MAPPER, servicesPackage.getId());\n-\t\t\tfor(Integer serviceId: servicesId) {\n-\t\t\t\ttry {\n-\t\t\t\t\tservices.add(getServiceById(sess, serviceId));\n-\t\t\t\t} catch(ServiceNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn services;\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void addRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeAlreadyAssignedException {\n-\t\ttry {\n-\t\t\tif (0 < jdbc.queryForInt(\"select count(*) from service_required_attrs where service_id=? and attr_id=?\", service.getId(), attribute.getId())) {\n-\t\t\t\tthrow new AttributeAlreadyAssignedException(\"Service: \" + service  + \" already required attribute \" + attribute);\n-\t\t\t}\n-\t\t\tjdbc.update(\"insert into service_required_attrs(service_id, attr_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), attribute.getId(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeAlreadyAssignedException {\n-\t\tfor(AttributeDefinition attribute : attributes) addRequiredAttribute(sess, service, attribute);\n-\t}\n-\n-\tpublic void removeRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeNotAssignedException {\n-\t\ttry {\n-\t\t\tif(0 == jdbc.update(\"delete from service_required_attrs where service_id=? and attr_id=?\", service.getId(), attribute.getId())) {\n-\t\t\t\tthrow new AttributeNotAssignedException(attribute);\n-\t\t\t}\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotAssignedException {\n-\t\tfor(AttributeDefinition attribute : attributes) removeRequiredAttribute(sess, service, attribute);\n-\t}\n-\n-\tpublic void removeAllRequiredAttributes(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from service_required_attrs where service_id=?\", service.getId());\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean serviceExists(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from services where id=?\", service.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\tpublic void checkServiceExists(PerunSession sess, Service service) throws InternalErrorException, ServiceNotExistsException {\n-\t\tif(!serviceExists(sess, service)) throw new ServiceNotExistsException(\"Service not exists: \" + service);\n-\t}\n-\n-\tpublic void checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException {\n-\t\tif(!servicesPackageExists(sess, servicesPackage)) throw new ServicesPackageNotExistsException(\"ServicesPackage not exists: \" + servicesPackage);\n-\t}\n-\n-\tpublic boolean servicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from service_packages where id=?\", servicesPackage.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\tpublic Destination getDestinationById(PerunSession sess, int id) throws InternalErrorException, DestinationNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where id=?\", DESTINATION_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new DestinationNotExistsException(\"Destination.id=\" + id, e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Deprecated\n-\tpublic int getDestinationIdByName(PerunSession sess, String name) throws InternalErrorException, DestinationNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select id from destinations where destination=?\", name);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new DestinationNotExistsException(e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addDestination(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into facility_service_destinations (service_id, facility_id, destination_id, propagation_type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), facility.getId(), destination.getId(),\n-\t\t\t\t\tdestination.getPropagationType(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeDestination(PerunSession sess, Service service,  Facility facility, Destination destination) throws InternalErrorException, DestinationAlreadyRemovedException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=? and destination_id=?\", service.getId(), facility.getId(), destination.getId())) {\n-\t\t\t\tthrow new DestinationAlreadyRemovedException(destination);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Destination> getDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"where service_id=? and facility_id=? order by destinations.destination\", DESTINATION_MAPPER, service.getId(), facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Destination> getDestinations(PerunSession perunSession) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + destinationMappingSelectQuery + \" from destinations\", DESTINATION_MAPPER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Destination> getDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"where facility_id=? order by destinations.destination\", DESTINATION_MAPPER, facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"join services on services.id=facility_service_destinations.service_id \" +\n-\t\t\t\t\t\"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"where facility_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"join services on services.id=facility_service_destinations.service_id \" +\n-\t\t\t\t\t\"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"where service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, service.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service) throws InternalErrorException{\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"join services on services.id=facility_service_destinations.service_id \" +\n-\t\t\t\t\t\"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"where facility_id=? and service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId(), service.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\tpublic void removeAllDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=?\", service.getId(), facility.getId());\n-\t\t\t//TODO remove from table destinations?\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllDestinations(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from facility_service_destinations where facility_id=?\", facility.getId());\n-\t\t\t//TODO remove from table destinations?\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from facility_service_destinations fsd join destinations d on fsd.destination_id = d.id where fsd.service_id=? and fsd.facility_id=? and d.destination=? and d.type=?\", service.getId(), facility.getId(), destination.getDestination(), destination.getType());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic boolean destinationExists(PerunSession sess, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from destinations where id=? and destination=? and type=?\", destination.getId(), destination.getDestination(), destination.getType());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Service> getAssignedServices(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + serviceMappingSelectQuery + \" from services join resource_services on services.id = resource_services.service_id join resources on resource_services.resource_id = resources.id where resources.facility_id=?\", SERVICE_MAPPER, facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic Destination getDestination(PerunSession sess, String destination, String type) throws InternalErrorException, DestinationNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where destination=? and type=?\", DESTINATION_MAPPER, destination, type);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new DestinationNotExistsException(ex);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic Destination createDestination(PerunSession sess, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint destinationId = Utils.getNewId(jdbc, \"destinations_id_seq\");\n-\t\t\tjdbc.update(\"insert into destinations (id, destination, type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", destinationId, destination.getDestination(), destination.getType(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tdestination.setId(destinationId);\n-\t\t\treturn destination;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + destinationMappingSelectQuery + \" from destinations, facility_service_destinations, facilities, resources \" +\n-\t\t\t\t\t\"where destinations.id = facility_service_destinations.destination_id and facilities.id = facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"and facilities.id = resources.facility_id and resources.vo_id = ?\", DESTINATION_MAPPER, vo.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic int getDestinationsCount(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(*) from destinations\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n+    final static Logger log = LoggerFactory.getLogger(ServicesManagerImpl.class);\n+\n+    // http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+    private static JdbcPerunTemplate jdbc;\n+\n+    public ServicesManagerImpl(DataSource perunPool) {\n+        jdbc = new JdbcPerunTemplate(perunPool);\n+    }\n+\n+    public final static String serviceMappingSelectQuery = \" services.id as services_id, services.name as services_name, \" +\n+            \"services.description as services_description, services.delay as services_delay, services.recurrence as services_recurrence, \" +\n+            \"services.enabled as services_enabled, services.script as services_script, \" +\n+            \"services.created_at as services_created_at, services.created_by as services_created_by, \" +\n+            \"services.modified_by as services_modified_by, services.modified_at as services_modified_at, \" +\n+            \"services.created_by_uid as services_created_by_uid, services.modified_by_uid as services_modified_by_uid\";\n+\n+    public final static String servicePackageMappingSelectQuery = \" service_packages.id as service_packages_id, service_packages.description as service_packages_description, \" +\n+            \"service_packages.name as service_packages_name, service_packages.created_at as service_packages_created_at, service_packages.created_by as service_packages_created_by, \" +\n+            \"service_packages.modified_by as service_packages_modified_by, service_packages.modified_at as service_packages_modified_at, \" +\n+            \"service_packages.modified_by_uid as s_packages_modified_by_uid, service_packages.created_by_uid as s_packages_created_by_uid\";\n+\n+    public final static String destinationMappingSelectQuery = \" destinations.id as destinations_id, destinations.destination as destinations_destination, \" +\n+            \"destinations.type as destinations_type, destinations.created_at as destinations_created_at, destinations.created_by as destinations_created_by, \" +\n+            \"destinations.modified_by as destinations_modified_by, destinations.modified_at as destinations_modified_at, \" +\n+            \"destinations.modified_by_uid as destinations_modified_by_uid, destinations.created_by_uid as destinations_created_by_uid\";\n+\n+    public final static String facilityDestinationMappingSelectQuery = destinationMappingSelectQuery + \", facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n+\n+    public final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" +\n+            \"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n+            \"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n+            \"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" +\n+            serviceMappingSelectQuery + \", \" +\n+            \"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n+\n+    public static final RowMapper<Service> SERVICE_MAPPER = new RowMapper<Service>() {\n+        public Service mapRow(ResultSet rs, int i) throws SQLException {\n+            Service service = new Service();\n+            service.setId(rs.getInt(\"services_id\"));\n+            service.setName(rs.getString(\"services_name\"));\n+            service.setDescription(rs.getString(\"services_description\"));\n+            service.setDelay(rs.getInt(\"services_delay\"));\n+            service.setRecurrence(rs.getInt(\"services_recurrence\"));\n+            char enabled = rs.getString(\"services_enabled\").charAt(0);\n+            if (enabled == '0') {\n+                service.setEnabled(false);\n+            } else {\n+                service.setEnabled(true);\n+            }\n+            service.setScript(rs.getString(\"services_script\"));\n+            service.setCreatedAt(rs.getString(\"services_created_at\"));\n+            service.setCreatedBy(rs.getString(\"services_created_by\"));\n+            service.setModifiedAt(rs.getString(\"services_modified_at\"));\n+            service.setModifiedBy(rs.getString(\"services_modified_by\"));\n+            if (rs.getInt(\"services_modified_by_uid\") == 0) {\n+                service.setModifiedByUid(null);\n+            } else {\n+                service.setModifiedByUid(rs.getInt(\"services_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"services_created_by_uid\") == 0) {\n+                service.setCreatedByUid(null);\n+            } else {\n+                service.setCreatedByUid(rs.getInt(\"services_created_by_uid\"));\n+            }\n+            return service;\n+\n+        }\n+    };\n+\n+    public static final RowMapper<ServicesPackage> SERVICESPACKAGE_MAPPER = new RowMapper<ServicesPackage>() {\n+\n+        public ServicesPackage mapRow(ResultSet rs, int i) throws SQLException {\n+\n+            ServicesPackage sPackage = new ServicesPackage();\n+            sPackage.setId(rs.getInt(\"service_packages_id\"));\n+            sPackage.setDescription(rs.getString(\"service_packages_description\"));\n+            sPackage.setName(rs.getString(\"service_packages_name\"));\n+            sPackage.setCreatedAt(rs.getString(\"service_packages_created_at\"));\n+            sPackage.setCreatedBy(rs.getString(\"service_packages_created_by\"));\n+            sPackage.setModifiedAt(rs.getString(\"service_packages_modified_at\"));\n+            sPackage.setModifiedBy(rs.getString(\"service_packages_modified_by\"));\n+            if (rs.getInt(\"s_packages_modified_by_uid\") == 0) {\n+                sPackage.setModifiedByUid(null);\n+            } else {\n+                sPackage.setModifiedByUid(rs.getInt(\"s_packages_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"s_packages_created_by_uid\") == 0) {\n+                sPackage.setCreatedByUid(null);\n+            } else {\n+                sPackage.setCreatedByUid(rs.getInt(\"s_packages_created_by_uid\"));\n+            }\n+            return sPackage;\n+        }\n+\n+    };\n+\n+    public static final RowMapper<Destination> DESTINATION_MAPPER = new RowMapper<Destination>() {\n+        public Destination mapRow(ResultSet rs, int i) throws SQLException {\n+            Destination destination = new Destination();\n+            destination.setId(rs.getInt(\"destinations_id\"));\n+            destination.setDestination(rs.getString(\"destinations_destination\"));\n+            destination.setType(rs.getString(\"destinations_type\"));\n+            destination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n+            destination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n+            destination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n+            destination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n+            try { // do not mind if the column is not in the results\n+                String ptype = rs.getString(\"f_s_des_propagation_type\");\n+                if (ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) ||\n+                        ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) ||\n+                        ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n+                    destination.setPropagationType(ptype);\n+                } else {\n+                    destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+                }\n+            } catch (SQLException e) {\n+                destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+            }\n+            if (rs.getInt(\"destinations_modified_by_uid\") == 0) {\n+                destination.setModifiedByUid(null);\n+            } else {\n+                destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"destinations_created_by_uid\") == 0) {\n+                destination.setCreatedByUid(null);\n+            } else {\n+                destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n+            }\n+            return destination;\n+        }\n+    };\n+\n+    public static final RowMapper<RichDestination> RICH_DESTINATION_MAPPER = new RowMapper<RichDestination>() {\n+        public RichDestination mapRow(ResultSet rs, int i) throws SQLException {\n+            Destination destination = new Destination();\n+            destination.setId(rs.getInt(\"destinations_id\"));\n+            destination.setDestination(rs.getString(\"destinations_destination\"));\n+            destination.setType(rs.getString(\"destinations_type\"));\n+            destination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n+            destination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n+            destination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n+            destination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n+            try { // do not mind if the column is not in the results\n+                String ptype = rs.getString(\"f_s_des_propagation_type\");\n+                if (ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) ||\n+                        ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) ||\n+                        ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n+                    destination.setPropagationType(ptype);\n+                } else {\n+                    destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+                }\n+            } catch (SQLException e) {\n+                destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+            }\n+            if (rs.getInt(\"destinations_modified_by_uid\") == 0) {\n+                destination.setModifiedByUid(null);\n+            } else {\n+                destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"destinations_created_by_uid\") == 0) {\n+                destination.setCreatedByUid(null);\n+            } else {\n+                destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n+            }\n+\n+            Facility facility = new Facility();\n+            facility.setId(rs.getInt(\"facilities_id\"));\n+            facility.setName(rs.getString(\"facilities_name\"));\n+            facility.setCreatedAt(rs.getString(\"facilities_created_at\"));\n+            facility.setCreatedBy(rs.getString(\"facilities_created_by\"));\n+            facility.setModifiedAt(rs.getString(\"facilities_modified_at\"));\n+            facility.setModifiedBy(rs.getString(\"facilities_modified_by\"));\n+            if (rs.getInt(\"facilities_modified_by_uid\") == 0) {\n+                facility.setModifiedByUid(null);\n+            } else {\n+                facility.setModifiedByUid(rs.getInt(\"facilities_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"facilities_created_by_uid\") == 0) {\n+                facility.setCreatedByUid(null);\n+            } else {\n+                facility.setCreatedByUid(rs.getInt(\"facilities_created_by_uid\"));\n+            }\n+\n+            Service service = SERVICE_MAPPER.mapRow(rs, i);\n+\n+            return new RichDestination(destination, facility, service);\n+        }\n+    };\n+\n+    public Service createService(PerunSession sess, Service service) throws InternalErrorException {\n+        try {\n+            int newId = Utils.getNewId(jdbc, \"services_id_seq\");\n+            // if not set, make sure script path is set based on service name\n+            if (service.getScript() == null || service.getScript().isEmpty()) {\n+                service.setScript(\"./\" + service.getName());\n+            }\n+            jdbc.update(\"insert into services(id,name,description,delay,recurrence,enabled,script,created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n+                            \"values (?,?,?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, service.getName(),\n+                    service.getDescription(), service.getDelay(), service.getRecurrence(), service.isEnabled() ? '1' : '0', service.getScript(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+            log.info(\"Service created: {}\", service);\n+\n+            service.setId(newId);\n+\n+            return service;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public void deleteService(PerunSession sess, Service service) throws InternalErrorException, ServiceAlreadyRemovedException {\n+        try {\n+            // Delete authz entries for this service\n+            AuthzResolverBlImpl.removeAllAuthzForService(sess, service);\n+\n+            int numAffected = jdbc.update(\"delete from services where id=?\", service.getId());\n+            if (numAffected == 0) {\n+                throw new ServiceAlreadyRemovedException(\"Service: \" + service);\n+            }\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public void updateService(PerunSession sess, Service service) throws InternalErrorException {\n+        try {\n+            // if not set, make sure script path is set based on new service name\n+            if (service.getScript() == null || service.getScript().isEmpty()) {\n+                service.setScript(\"./\" + service.getName());\n+            }\n+            jdbc.update(\"update services set name=?, description=?, delay=?, recurrence=?, enabled=?, script=?, \" +\n+                            \"modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id=?\",\n+                    service.getName(), service.getDescription(), service.getDelay(), service.getRecurrence(),\n+                    service.isEnabled() ? '1' : '0', service.getScript(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), service.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public Service getServiceByName(PerunSession sess, String name) throws InternalErrorException, ServiceNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where name=?\", SERVICE_MAPPER, name);\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new ServiceNotExistsException(\"Service not exists. name=\" + name);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public Service getServiceById(PerunSession sess, int id) throws InternalErrorException, ServiceNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where id=?\", SERVICE_MAPPER, id);\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new ServiceNotExistsException(\"Service not exists. Id=\" + id);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Service> getServices(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services\", SERVICE_MAPPER);\n+        } catch (EmptyResultDataAccessException ex) {\n+            log.info(\"ServicesManager.getAllServices: No service found.\");\n+            return new ArrayList<Service>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services join service_required_attrs on services.id=service_required_attrs.service_id \"\n+                    + \"where service_required_attrs.attr_id=?\", SERVICE_MAPPER, attributeDefinition.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            log.info(\"ServicesManager.getServicesByAttributeDefinition: No service found.\");\n+            return new ArrayList<Service>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Resource> getAssignedResources(PerunSession sess, Service service) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + ResourcesManagerImpl.resourceMappingSelectQuery + \" from resource_services join resources on \" +\n+                    \"resource_services.resource_id=resources.id  where service_id=?\", ResourcesManagerImpl.RESOURCE_MAPPER, service.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<ServicesPackage> getServicesPackages(PerunSession sess) throws InternalErrorException {\n+        try {\n+            List<ServicesPackage> servicesPackages = jdbc.query(\"select \" + servicePackageMappingSelectQuery + \" from service_packages\", SERVICESPACKAGE_MAPPER);\n+            return servicesPackages;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public ServicesPackage getServicesPackageById(PerunSession sess, int servicesPackageId) throws InternalErrorException, ServicesPackageNotExistsException {\n+        try {\n+            ServicesPackage servicesPackage = jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where id = ?\", SERVICESPACKAGE_MAPPER, new Integer(servicesPackageId));\n+\n+            return servicesPackage;\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new ServicesPackageNotExistsException(\"ServicesPackage with id '\" + servicesPackageId + \"' desn't exists\", ex);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public ServicesPackage createServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+        try {\n+\n+            int newId = Utils.getNewId(jdbc, \"service_packages_id_seq\");\n+\n+            jdbc.update(\"insert into service_packages (id, name, description, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n+                            \"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, servicesPackage.getName(),\n+                    servicesPackage.getDescription(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+            servicesPackage.setId(newId);\n+\n+            return servicesPackage;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void updateServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"update service_packages set description = ?, name = ?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id = ?\",\n+                    servicesPackage.getDescription(), servicesPackage.getName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), servicesPackage.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void deleteServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from service_packages where id = ?\", servicesPackage.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void addServiceToServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyAssignedException {\n+        try {\n+            jdbc.update(\"insert into service_service_packages (package_id, service_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n+                            \"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", servicesPackage.getId(), service.getId(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+        } catch (DuplicateKeyException e) {\n+            throw new ServiceAlreadyAssignedException(\"Service with id \" + service.getId() + \" is already assigned to the service package with id \" + servicesPackage.getId(), e);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void removeServiceFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyRemovedFromServicePackageException {\n+        try {\n+            int numAffected = jdbc.update(\"delete from service_service_packages where package_id=? and service_id=?\", servicesPackage.getId(), service.getId());\n+            if (numAffected == 0) {\n+                throw new ServiceAlreadyRemovedFromServicePackageException(\"Service: \" + service + \" , ServicePackage: \" + servicesPackage);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public ServicesPackage getServicesPackageByName(PerunSession sess, String name) throws InternalErrorException, ServicesPackageNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where name=?\", SERVICESPACKAGE_MAPPER, name);\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new ServicesPackageNotExistsException(\"ServicesPackage not exists. name=\" + name);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Service> getServicesFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+        try {\n+            List<Service> services = new ArrayList<Service>();\n+            List<Integer> servicesId = jdbc.query(\"select service_id as id from service_service_packages where package_id=?\", Utils.ID_MAPPER, servicesPackage.getId());\n+            for (Integer serviceId : servicesId) {\n+                try {\n+                    services.add(getServiceById(sess, serviceId));\n+                } catch (ServiceNotExistsException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+            }\n+            return services;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public void addRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeAlreadyAssignedException {\n+        try {\n+            if (0 < jdbc.queryForInt(\"select count(*) from service_required_attrs where service_id=? and attr_id=?\", service.getId(), attribute.getId())) {\n+                throw new AttributeAlreadyAssignedException(\"Service: \" + service + \" already required attribute \" + attribute);\n+            }\n+            jdbc.update(\"insert into service_required_attrs(service_id, attr_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n+                            \"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), attribute.getId(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void addRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeAlreadyAssignedException {\n+        for (AttributeDefinition attribute : attributes) {\n+            addRequiredAttribute(sess, service, attribute);\n+        }\n+    }\n+\n+    public void removeRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeNotAssignedException {\n+        try {\n+            if (0 == jdbc.update(\"delete from service_required_attrs where service_id=? and attr_id=?\", service.getId(), attribute.getId())) {\n+                throw new AttributeNotAssignedException(attribute);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void removeRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotAssignedException {\n+        for (AttributeDefinition attribute : attributes) {\n+            removeRequiredAttribute(sess, service, attribute);\n+        }\n+    }\n+\n+    public void removeAllRequiredAttributes(PerunSession sess, Service service) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from service_required_attrs where service_id=?\", service.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public boolean serviceExists(PerunSession sess, Service service) throws InternalErrorException {\n+        try {\n+            return 1 == jdbc.queryForInt(\"select 1 from services where id=?\", service.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+    }\n+\n+    public void checkServiceExists(PerunSession sess, Service service) throws InternalErrorException, ServiceNotExistsException {\n+        if (!serviceExists(sess, service)) {\n+            throw new ServiceNotExistsException(\"Service not exists: \" + service);\n+        }\n+    }\n+\n+    public void checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException {\n+        if (!servicesPackageExists(sess, servicesPackage)) {\n+            throw new ServicesPackageNotExistsException(\"ServicesPackage not exists: \" + servicesPackage);\n+        }\n+    }\n+\n+    public boolean servicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+        try {\n+            return 1 == jdbc.queryForInt(\"select 1 from service_packages where id=?\", servicesPackage.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+    }\n+\n+    public Destination getDestinationById(PerunSession sess, int id) throws InternalErrorException, DestinationNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where id=?\", DESTINATION_MAPPER, id);\n+        } catch (EmptyResultDataAccessException e) {\n+            throw new DestinationNotExistsException(\"Destination.id=\" + id, e);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Deprecated\n+    public int getDestinationIdByName(PerunSession sess, String name) throws InternalErrorException, DestinationNotExistsException {\n+        try {\n+            return jdbc.queryForInt(\"select id from destinations where destination=?\", name);\n+        } catch (EmptyResultDataAccessException e) {\n+            throw new DestinationNotExistsException(e);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void addDestination(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"insert into facility_service_destinations (service_id, facility_id, destination_id, propagation_type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n+                            \"values (?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), facility.getId(), destination.getId(),\n+                    destination.getPropagationType(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void removeDestination(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException, DestinationAlreadyRemovedException {\n+        try {\n+            if (0 == jdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=? and destination_id=?\", service.getId(), facility.getId(), destination.getId())) {\n+                throw new DestinationAlreadyRemovedException(destination);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Destination> getDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations join destinations on destinations.id=facility_service_destinations.destination_id \" +\n+                    \"where service_id=? and facility_id=? order by destinations.destination\", DESTINATION_MAPPER, service.getId(), facility.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Destination> getDestinations(PerunSession perunSession) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + destinationMappingSelectQuery + \" from destinations\", DESTINATION_MAPPER);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Destination> getDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n+                    \"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n+                    \"where facility_id=? order by destinations.destination\", DESTINATION_MAPPER, facility.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n+                    \"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n+                    \"join services on services.id=facility_service_destinations.service_id \" +\n+                    \"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n+                    \"where facility_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n+                    \"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n+                    \"join services on services.id=facility_service_destinations.service_id \" +\n+                    \"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n+                    \"where service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, service.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n+                    \"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n+                    \"join services on services.id=facility_service_destinations.service_id \" +\n+                    \"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n+                    \"where facility_id=? and service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId(), service.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+\n+    public void removeAllDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=?\", service.getId(), facility.getId());\n+            //TODO remove from table destinations?\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void removeAllDestinations(PerunSession sess, Facility facility) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from facility_service_destinations where facility_id=?\", facility.getId());\n+            //TODO remove from table destinations?\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public boolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n+        try {\n+            return 1 == jdbc.queryForInt(\"select 1 from facility_service_destinations fsd join destinations d on fsd.destination_id = d.id where fsd.service_id=? and fsd.facility_id=? and d.destination=? and d.type=?\", service.getId(), facility.getId(), destination.getDestination(),\n+                    destination.getType());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public boolean destinationExists(PerunSession sess, Destination destination) throws InternalErrorException {\n+        try {\n+            return 1 == jdbc.queryForInt(\"select 1 from destinations where id=? and destination=? and type=?\", destination.getId(), destination.getDestination(), destination.getType());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Service> getAssignedServices(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select distinct \" + serviceMappingSelectQuery + \" from services join resource_services on services.id = resource_services.service_id join resources on resource_services.resource_id = resources.id where resources.facility_id=?\", SERVICE_MAPPER, facility.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public Destination getDestination(PerunSession sess, String destination, String type) throws InternalErrorException, DestinationNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where destination=? and type=?\", DESTINATION_MAPPER, destination, type);\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new DestinationNotExistsException(ex);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public Destination createDestination(PerunSession sess, Destination destination) throws InternalErrorException {\n+        try {\n+            int destinationId = Utils.getNewId(jdbc, \"destinations_id_seq\");\n+            jdbc.update(\"insert into destinations (id, destination, type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n+                            \"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", destinationId, destination.getDestination(), destination.getType(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+            destination.setId(destinationId);\n+            return destination;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    public List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select distinct \" + destinationMappingSelectQuery + \" from destinations, facility_service_destinations, facilities, resources \" +\n+                    \"where destinations.id = facility_service_destinations.destination_id and facilities.id = facility_service_destinations.facility_id \" +\n+                    \"and facilities.id = resources.facility_id and resources.vo_id = ?\", DESTINATION_MAPPER, vo.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public int getDestinationsCount(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForInt(\"select count(*) from destinations\");\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n }\n",
            "diff_size": 667
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/17/ServicesManagerImpl.java\nindex a4062ce650f..c6c3c6ee9fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/17/ServicesManagerImpl.java\n@@ -4,15 +4,12 @@ import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.sql.DataSource;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcPerunTemplate;\n import org.springframework.jdbc.core.RowMapper;\n-\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n import cz.metacentrum.perun.core.api.Destination;\n import cz.metacentrum.perun.core.api.RichDestination;\n@@ -40,631 +37,580 @@ import org.springframework.dao.DuplicateKeyException;\n  * @author Michal Prochazka <michalp@ics.muni.cz>\n  * @author Slavek Licehammer <glory@ics.muni.cz>\n  */\n-public class ServicesManagerImpl implements ServicesManagerImplApi {\n \n \n-\tfinal static Logger log = LoggerFactory.getLogger(ServicesManagerImpl.class);\n-\n-\t// http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate static JdbcPerunTemplate jdbc;\n-\n-\tpublic ServicesManagerImpl(DataSource perunPool) {\n-\t\tjdbc = new JdbcPerunTemplate(perunPool);\n-\t}\n-\n-\tpublic final static String serviceMappingSelectQuery = \" services.id as services_id, services.name as services_name, \" +\n-\t\t\"services.description as services_description, services.delay as services_delay, services.recurrence as services_recurrence, \" +\n-\t\t\"services.enabled as services_enabled, services.script as services_script, \" +\n-\t\t\"services.created_at as services_created_at, services.created_by as services_created_by, \" +\n-\t\t\"services.modified_by as services_modified_by, services.modified_at as services_modified_at, \" +\n-\t\t\"services.created_by_uid as services_created_by_uid, services.modified_by_uid as services_modified_by_uid\";\n-\n-\tpublic final static String servicePackageMappingSelectQuery = \" service_packages.id as service_packages_id, service_packages.description as service_packages_description, \" +\n-\t\t\"service_packages.name as service_packages_name, service_packages.created_at as service_packages_created_at, service_packages.created_by as service_packages_created_by, \" +\n-\t\t\"service_packages.modified_by as service_packages_modified_by, service_packages.modified_at as service_packages_modified_at, \" +\n-\t\t\"service_packages.modified_by_uid as s_packages_modified_by_uid, service_packages.created_by_uid as s_packages_created_by_uid\";\n-\n-\tpublic final static String destinationMappingSelectQuery = \" destinations.id as destinations_id, destinations.destination as destinations_destination, \" +\n-\t\t\"destinations.type as destinations_type, destinations.created_at as destinations_created_at, destinations.created_by as destinations_created_by, \" +\n-\t\t\"destinations.modified_by as destinations_modified_by, destinations.modified_at as destinations_modified_at, \" +\n-\t\t\"destinations.modified_by_uid as destinations_modified_by_uid, destinations.created_by_uid as destinations_created_by_uid\";\n-\n-\tpublic final static String facilityDestinationMappingSelectQuery = destinationMappingSelectQuery + \", facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n-\n-\tpublic final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" +\n-\t\t\"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n-\t\t\"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n-\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + \n-\t\tserviceMappingSelectQuery + \", \" +\n-\t\t\"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n-\n-\tpublic static final RowMapper<Service> SERVICE_MAPPER = new RowMapper<Service>() {\n-\t\tpublic Service mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tService service = new Service();\n-\t\t\tservice.setId(rs.getInt(\"services_id\"));\n-\t\t\tservice.setName(rs.getString(\"services_name\"));\n-\t\t\tservice.setDescription(rs.getString(\"services_description\"));\n-\t\t\tservice.setDelay(rs.getInt(\"services_delay\"));\n-\t\t\tservice.setRecurrence(rs.getInt(\"services_recurrence\"));\n-\t\t\tchar enabled = rs.getString(\"services_enabled\").charAt(0);\n-\t\t\tif (enabled == '0') {\n-\t\t\t\tservice.setEnabled(false);\n-\t\t\t} else {\n-\t\t\t\tservice.setEnabled(true);\n-\t\t\t}\n-\t\t\tservice.setScript(rs.getString(\"services_script\"));\n-\t\t\tservice.setCreatedAt(rs.getString(\"services_created_at\"));\n-\t\t\tservice.setCreatedBy(rs.getString(\"services_created_by\"));\n-\t\t\tservice.setModifiedAt(rs.getString(\"services_modified_at\"));\n-\t\t\tservice.setModifiedBy(rs.getString(\"services_modified_by\"));\n-\t\t\tif(rs.getInt(\"services_modified_by_uid\") == 0) service.setModifiedByUid(null);\n-\t\t\telse service.setModifiedByUid(rs.getInt(\"services_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"services_created_by_uid\") == 0) service.setCreatedByUid(null);\n-\t\t\telse service.setCreatedByUid(rs.getInt(\"services_created_by_uid\"));\n-\t\t\treturn service;\n-\n-\t\t}\n-\t};\n-\n-\tpublic static final RowMapper<ServicesPackage> SERVICESPACKAGE_MAPPER = new RowMapper<ServicesPackage>() {\n-\n-\t\tpublic ServicesPackage mapRow(ResultSet rs, int i) throws SQLException {\n-\n-\t\t\tServicesPackage sPackage = new ServicesPackage();\n-\t\t\tsPackage.setId(rs.getInt(\"service_packages_id\"));\n-\t\t\tsPackage.setDescription(rs.getString(\"service_packages_description\"));\n-\t\t\tsPackage.setName(rs.getString(\"service_packages_name\"));\n-\t\t\tsPackage.setCreatedAt(rs.getString(\"service_packages_created_at\"));\n-\t\t\tsPackage.setCreatedBy(rs.getString(\"service_packages_created_by\"));\n-\t\t\tsPackage.setModifiedAt(rs.getString(\"service_packages_modified_at\"));\n-\t\t\tsPackage.setModifiedBy(rs.getString(\"service_packages_modified_by\"));\n-\t\t\tif(rs.getInt(\"s_packages_modified_by_uid\") == 0) sPackage.setModifiedByUid(null);\n-\t\t\telse sPackage.setModifiedByUid(rs.getInt(\"s_packages_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"s_packages_created_by_uid\") == 0) sPackage.setCreatedByUid(null);\n-\t\t\telse sPackage.setCreatedByUid(rs.getInt(\"s_packages_created_by_uid\"));\n-\t\t\treturn sPackage;\n-\t\t}\n-\n-\t};\n-\n-\tpublic static final RowMapper<Destination> DESTINATION_MAPPER = new RowMapper<Destination>() {\n-\t\tpublic Destination mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tDestination destination = new Destination();\n-\t\t\tdestination.setId(rs.getInt(\"destinations_id\"));\n-\t\t\tdestination.setDestination(rs.getString(\"destinations_destination\"));\n-\t\t\tdestination.setType(rs.getString(\"destinations_type\"));\n-\t\t\tdestination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n-\t\t\tdestination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n-\t\t\tdestination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n-\t\t\tdestination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n-\t\t\ttry { // do not mind if the column is not in the results\n-\t\t\t\tString ptype = rs.getString(\"f_s_des_propagation_type\");\n-\t\t\t\tif(ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n-\t\t\t\t\tdestination.setPropagationType(ptype);\n-\t\t\t\t} else {\n-\t\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t\t}\n-\t\t\t} catch (SQLException e) {\n-\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t}\n-\t\t\tif(rs.getInt(\"destinations_modified_by_uid\") == 0) destination.setModifiedByUid(null);\n-\t\t\telse destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"destinations_created_by_uid\") == 0) destination.setCreatedByUid(null);\n-\t\t\telse destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n-\t\t\treturn destination;\n-\t\t}\n-\t};\n-\n-\tpublic static final RowMapper<RichDestination> RICH_DESTINATION_MAPPER = new RowMapper<RichDestination>() {\n-\t\tpublic RichDestination mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tDestination destination = new Destination();\n-\t\t\tdestination.setId(rs.getInt(\"destinations_id\"));\n-\t\t\tdestination.setDestination(rs.getString(\"destinations_destination\"));\n-\t\t\tdestination.setType(rs.getString(\"destinations_type\"));\n-\t\t\tdestination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n-\t\t\tdestination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n-\t\t\tdestination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n-\t\t\tdestination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n-\t\t\ttry { // do not mind if the column is not in the results\n-\t\t\t\tString ptype = rs.getString(\"f_s_des_propagation_type\");\n-\t\t\t\tif(ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) ||\n-\t\t\t\t   ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n-\t\t\t\t\tdestination.setPropagationType(ptype);\n-\t\t\t\t} else {\n-\t\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t\t}\n-\t\t\t} catch (SQLException e) {\n-\t\t\t\tdestination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n-\t\t\t}\n-\t\t\tif(rs.getInt(\"destinations_modified_by_uid\") == 0) destination.setModifiedByUid(null);\n-\t\t\telse destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"destinations_created_by_uid\") == 0) destination.setCreatedByUid(null);\n-\t\t\telse destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n-\n-\t\t\tFacility facility = new Facility();\n-\t\t\tfacility.setId(rs.getInt(\"facilities_id\"));\n-\t\t\tfacility.setName(rs.getString(\"facilities_name\"));\n-\t\t\tfacility.setCreatedAt(rs.getString(\"facilities_created_at\"));\n-\t\t\tfacility.setCreatedBy(rs.getString(\"facilities_created_by\"));\n-\t\t\tfacility.setModifiedAt(rs.getString(\"facilities_modified_at\"));\n-\t\t\tfacility.setModifiedBy(rs.getString(\"facilities_modified_by\"));\n-\t\t\tif(rs.getInt(\"facilities_modified_by_uid\") == 0) facility.setModifiedByUid(null);\n-\t\t\telse facility.setModifiedByUid(rs.getInt(\"facilities_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"facilities_created_by_uid\") == 0) facility.setCreatedByUid(null);\n-\t\t\telse facility.setCreatedByUid(rs.getInt(\"facilities_created_by_uid\"));\n-\n-\t\t\tService service = SERVICE_MAPPER.mapRow(rs, i);\n-\n-\t\t\treturn new RichDestination(destination, facility, service);\n-\t\t}\n-\t};\n-\n-\tpublic Service createService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint newId = Utils.getNewId(jdbc, \"services_id_seq\");\n-\t\t\t// if not set, make sure script path is set based on service name\n-\t\t\tif (service.getScript() == null || service.getScript().isEmpty()) {\n-\t\t\t\tservice.setScript(\"./\"+service.getName());\n-\t\t\t}\n-\t\t\tjdbc.update(\"insert into services(id,name,description,delay,recurrence,enabled,script,created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, service.getName(),\n-\t\t\t\t\tservice.getDescription(), service.getDelay(), service.getRecurrence(), service.isEnabled() ? '1' : '0', service.getScript(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tlog.info(\"Service created: {}\", service);\n-\n-\t\t\tservice.setId(newId);\n-\n-\t\t\treturn service;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void deleteService(PerunSession sess, Service service) throws InternalErrorException, ServiceAlreadyRemovedException {\n-\t\ttry {\n-\t\t\t// Delete authz entries for this service\n-\t\t\tAuthzResolverBlImpl.removeAllAuthzForService(sess, service);\n-\n-\t\t\tint numAffected = jdbc.update(\"delete from services where id=?\", service.getId());\n-\t\t\tif(numAffected == 0) throw new ServiceAlreadyRemovedException(\"Service: \" + service);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void updateService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\t// if not set, make sure script path is set based on new service name\n-\t\t\tif (service.getScript() == null || service.getScript().isEmpty()) {\n-\t\t\t\tservice.setScript(\"./\"+service.getName());\n-\t\t\t}\n-\t\t\tjdbc.update(\"update services set name=?, description=?, delay=?, recurrence=?, enabled=?, script=?, \" +\n-\t\t\t\t\t\t\t\"modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id=?\",\n-\t\t\t\t\tservice.getName(), service.getDescription(), service.getDelay(), service.getRecurrence(),\n-\t\t\t\t\tservice.isEnabled() ? '1' : '0', service.getScript(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), service.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic Service getServiceByName(PerunSession sess, String name) throws InternalErrorException, ServiceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where name=?\", SERVICE_MAPPER, name);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServiceNotExistsException(\"Service not exists. name=\" + name);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic Service getServiceById(PerunSession sess, int id) throws InternalErrorException, ServiceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where id=?\", SERVICE_MAPPER, id);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServiceNotExistsException(\"Service not exists. Id=\" + id);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Service> getServices(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services\", SERVICE_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tlog.info(\"ServicesManager.getAllServices: No service found.\");\n-\t\t\treturn new ArrayList<Service>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services join service_required_attrs on services.id=service_required_attrs.service_id \"\n-\t\t\t\t\t+ \"where service_required_attrs.attr_id=?\", SERVICE_MAPPER, attributeDefinition.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tlog.info(\"ServicesManager.getServicesByAttributeDefinition: No service found.\");\n-\t\t\treturn new ArrayList<Service>();\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Resource> getAssignedResources(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + ResourcesManagerImpl.resourceMappingSelectQuery + \" from resource_services join resources on \" +\n-\t\t\t\t\t\"resource_services.resource_id=resources.id  where service_id=?\", ResourcesManagerImpl.RESOURCE_MAPPER, service.getId());\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<ServicesPackage> getServicesPackages(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tList<ServicesPackage> servicesPackages = jdbc.query(\"select \" + servicePackageMappingSelectQuery + \" from service_packages\", SERVICESPACKAGE_MAPPER);\n-\t\t\treturn servicesPackages;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic ServicesPackage getServicesPackageById(PerunSession sess, int servicesPackageId) throws InternalErrorException, ServicesPackageNotExistsException {\n-\t\ttry {\n-\t\t\tServicesPackage servicesPackage = jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where id = ?\", SERVICESPACKAGE_MAPPER,  new Integer(servicesPackageId));\n-\n-\t\t\treturn servicesPackage;\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServicesPackageNotExistsException(\"ServicesPackage with id '\" + servicesPackageId + \"' desn't exists\", ex);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic ServicesPackage createServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\n-\t\t\tint newId = Utils.getNewId(jdbc, \"service_packages_id_seq\");\n-\n-\t\t\tjdbc.update(\"insert into service_packages (id, name, description, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, servicesPackage.getName(),\n-\t\t\t\t\tservicesPackage.getDescription(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tservicesPackage.setId(newId);\n-\n-\t\t\treturn servicesPackage;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void updateServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update service_packages set description = ?, name = ?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id = ?\",\n-\t\t\t\t\tservicesPackage.getDescription(), servicesPackage.getName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), servicesPackage.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void deleteServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from service_packages where id = ?\", servicesPackage.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addServiceToServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyAssignedException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into service_service_packages (package_id, service_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", servicesPackage.getId(), service.getId(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch (DuplicateKeyException e) {\n-\t\t\tthrow new ServiceAlreadyAssignedException(\"Service with id \" + service.getId() + \" is already assigned to the service package with id \" + servicesPackage.getId(), e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeServiceFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyRemovedFromServicePackageException {\n-\t\ttry {\n-\t\t\tint numAffected = jdbc.update(\"delete from service_service_packages where package_id=? and service_id=?\", servicesPackage.getId(), service.getId());\n-\t\t\tif(numAffected == 0) throw new ServiceAlreadyRemovedFromServicePackageException(\"Service: \" + service + \" , ServicePackage: \" + servicesPackage);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic ServicesPackage getServicesPackageByName(PerunSession sess, String name) throws InternalErrorException, ServicesPackageNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where name=?\", SERVICESPACKAGE_MAPPER, name);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ServicesPackageNotExistsException(\"ServicesPackage not exists. name=\" + name);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Service> getServicesFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tList<Service> services = new ArrayList<Service>();\n-\t\t\tList<Integer> servicesId = jdbc.query(\"select service_id as id from service_service_packages where package_id=?\", Utils.ID_MAPPER, servicesPackage.getId());\n-\t\t\tfor(Integer serviceId: servicesId) {\n-\t\t\t\ttry {\n-\t\t\t\t\tservices.add(getServiceById(sess, serviceId));\n-\t\t\t\t} catch(ServiceNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn services;\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void addRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeAlreadyAssignedException {\n-\t\ttry {\n-\t\t\tif (0 < jdbc.queryForInt(\"select count(*) from service_required_attrs where service_id=? and attr_id=?\", service.getId(), attribute.getId())) {\n-\t\t\t\tthrow new AttributeAlreadyAssignedException(\"Service: \" + service  + \" already required attribute \" + attribute);\n-\t\t\t}\n-\t\t\tjdbc.update(\"insert into service_required_attrs(service_id, attr_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), attribute.getId(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeAlreadyAssignedException {\n-\t\tfor(AttributeDefinition attribute : attributes) addRequiredAttribute(sess, service, attribute);\n-\t}\n-\n-\tpublic void removeRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeNotAssignedException {\n-\t\ttry {\n-\t\t\tif(0 == jdbc.update(\"delete from service_required_attrs where service_id=? and attr_id=?\", service.getId(), attribute.getId())) {\n-\t\t\t\tthrow new AttributeNotAssignedException(attribute);\n-\t\t\t}\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotAssignedException {\n-\t\tfor(AttributeDefinition attribute : attributes) removeRequiredAttribute(sess, service, attribute);\n-\t}\n-\n-\tpublic void removeAllRequiredAttributes(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from service_required_attrs where service_id=?\", service.getId());\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean serviceExists(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from services where id=?\", service.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\tpublic void checkServiceExists(PerunSession sess, Service service) throws InternalErrorException, ServiceNotExistsException {\n-\t\tif(!serviceExists(sess, service)) throw new ServiceNotExistsException(\"Service not exists: \" + service);\n-\t}\n-\n-\tpublic void checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException {\n-\t\tif(!servicesPackageExists(sess, servicesPackage)) throw new ServicesPackageNotExistsException(\"ServicesPackage not exists: \" + servicesPackage);\n-\t}\n-\n-\tpublic boolean servicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from service_packages where id=?\", servicesPackage.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\tpublic Destination getDestinationById(PerunSession sess, int id) throws InternalErrorException, DestinationNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where id=?\", DESTINATION_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new DestinationNotExistsException(\"Destination.id=\" + id, e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Deprecated\n-\tpublic int getDestinationIdByName(PerunSession sess, String name) throws InternalErrorException, DestinationNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select id from destinations where destination=?\", name);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new DestinationNotExistsException(e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addDestination(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into facility_service_destinations (service_id, facility_id, destination_id, propagation_type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), facility.getId(), destination.getId(),\n-\t\t\t\t\tdestination.getPropagationType(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeDestination(PerunSession sess, Service service,  Facility facility, Destination destination) throws InternalErrorException, DestinationAlreadyRemovedException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=? and destination_id=?\", service.getId(), facility.getId(), destination.getId())) {\n-\t\t\t\tthrow new DestinationAlreadyRemovedException(destination);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Destination> getDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"where service_id=? and facility_id=? order by destinations.destination\", DESTINATION_MAPPER, service.getId(), facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Destination> getDestinations(PerunSession perunSession) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + destinationMappingSelectQuery + \" from destinations\", DESTINATION_MAPPER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Destination> getDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"where facility_id=? order by destinations.destination\", DESTINATION_MAPPER, facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"join services on services.id=facility_service_destinations.service_id \" +\n-\t\t\t\t\t\"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"where facility_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"join services on services.id=facility_service_destinations.service_id \" +\n-\t\t\t\t\t\"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"where service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, service.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service) throws InternalErrorException{\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" +\n-\t\t\t\t\t\"join destinations on destinations.id=facility_service_destinations.destination_id \" +\n-\t\t\t\t\t\"join services on services.id=facility_service_destinations.service_id \" +\n-\t\t\t\t\t\"join facilities on facilities.id=facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"where facility_id=? and service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId(), service.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\tpublic void removeAllDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=?\", service.getId(), facility.getId());\n-\t\t\t//TODO remove from table destinations?\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllDestinations(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from facility_service_destinations where facility_id=?\", facility.getId());\n-\t\t\t//TODO remove from table destinations?\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic boolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from facility_service_destinations fsd join destinations d on fsd.destination_id = d.id where fsd.service_id=? and fsd.facility_id=? and d.destination=? and d.type=?\", service.getId(), facility.getId(), destination.getDestination(), destination.getType());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic boolean destinationExists(PerunSession sess, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select 1 from destinations where id=? and destination=? and type=?\", destination.getId(), destination.getDestination(), destination.getType());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Service> getAssignedServices(PerunSession perunSession, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + serviceMappingSelectQuery + \" from services join resource_services on services.id = resource_services.service_id join resources on resource_services.resource_id = resources.id where resources.facility_id=?\", SERVICE_MAPPER, facility.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic Destination getDestination(PerunSession sess, String destination, String type) throws InternalErrorException, DestinationNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where destination=? and type=?\", DESTINATION_MAPPER, destination, type);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\tthrow new DestinationNotExistsException(ex);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic Destination createDestination(PerunSession sess, Destination destination) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint destinationId = Utils.getNewId(jdbc, \"destinations_id_seq\");\n-\t\t\tjdbc.update(\"insert into destinations (id, destination, type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", destinationId, destination.getDestination(), destination.getType(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tdestination.setId(destinationId);\n-\t\t\treturn destination;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + destinationMappingSelectQuery + \" from destinations, facility_service_destinations, facilities, resources \" +\n-\t\t\t\t\t\"where destinations.id = facility_service_destinations.destination_id and facilities.id = facility_service_destinations.facility_id \" +\n-\t\t\t\t\t\"and facilities.id = resources.facility_id and resources.vo_id = ?\", DESTINATION_MAPPER, vo.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic int getDestinationsCount(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(*) from destinations\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-}\n+public class ServicesManagerImpl implements ServicesManagerImplApi {\n+\n+ final static Logger log = LoggerFactory.getLogger(ServicesManagerImpl.class);\n+\n+ // http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+ private static JdbcPerunTemplate jdbc;\n+\n+\n+ public ServicesManagerImpl(DataSource perunPool) {\n+  jdbc = new JdbcPerunTemplate(perunPool);\n+ }\n+\n+ public final static String serviceMappingSelectQuery = \" services.id as services_id, services.name as services_name, \" + \"services.description as services_description, services.delay as services_delay, services.recurrence as services_recurrence, \" + \"services.enabled as services_enabled, services.script as services_script, \" + \"services.created_at as services_created_at, services.created_by as services_created_by, \" + \"services.modified_by as services_modified_by, services.modified_at as services_modified_at, \" + \"services.created_by_uid as services_created_by_uid, services.modified_by_uid as services_modified_by_uid\";\n+\n+ public final static String servicePackageMappingSelectQuery = \" service_packages.id as service_packages_id, service_packages.description as service_packages_description, \" + \"service_packages.name as service_packages_name, service_packages.created_at as service_packages_created_at, service_packages.created_by as service_packages_created_by, \" + \"service_packages.modified_by as service_packages_modified_by, service_packages.modified_at as service_packages_modified_at, \" + \"service_packages.modified_by_uid as s_packages_modified_by_uid, service_packages.created_by_uid as s_packages_created_by_uid\";\n+\n+ public final static String destinationMappingSelectQuery = \" destinations.id as destinations_id, destinations.destination as destinations_destination, \" + \"destinations.type as destinations_type, destinations.created_at as destinations_created_at, destinations.created_by as destinations_created_by, \" + \"destinations.modified_by as destinations_modified_by, destinations.modified_at as destinations_modified_at, \" + \"destinations.modified_by_uid as destinations_modified_by_uid, destinations.created_by_uid as destinations_created_by_uid\";\n+\n+ public final static String facilityDestinationMappingSelectQuery = destinationMappingSelectQuery + \", facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n+\n+ public final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" + \"facilities.id as facilities_id, facilities.name as facilities_name, \" + \"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" + \"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + serviceMappingSelectQuery + \", \" + \"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n+\n+ public static final RowMapper<Service> SERVICE_MAPPER = new RowMapper<Service>() {\n+                                         public Service mapRow(ResultSet rs, int i) throws SQLException {\n+                                          Service service = new Service();\n+                                          service.setId(rs.getInt(\"services_id\"));\n+                                          service.setName(rs.getString(\"services_name\"));\n+                                          service.setDescription(rs.getString(\"services_description\"));\n+                                          service.setDelay(rs.getInt(\"services_delay\"));\n+                                          service.setRecurrence(rs.getInt(\"services_recurrence\"));\n+                                          char enabled = rs.getString(\"services_enabled\").charAt(0);\n+                                          if (enabled == '0') {\n+                                           service.setEnabled(false);\n+                                          } else {\n+                                           service.setEnabled(true);\n+                                          }\n+                                          service.setScript(rs.getString(\"services_script\"));\n+                                          service.setCreatedAt(rs.getString(\"services_created_at\"));\n+                                          service.setCreatedBy(rs.getString(\"services_created_by\"));\n+                                          service.setModifiedAt(rs.getString(\"services_modified_at\"));\n+                                          service.setModifiedBy(rs.getString(\"services_modified_by\"));\n+                                          if (rs.getInt(\"services_modified_by_uid\") == 0) service.setModifiedByUid(null);\n+                                          else service.setModifiedByUid(rs.getInt(\"services_modified_by_uid\"));\n+                                          if (rs.getInt(\"services_created_by_uid\") == 0) service.setCreatedByUid(null);\n+                                          else service.setCreatedByUid(rs.getInt(\"services_created_by_uid\"));\n+                                          return service;\n+                                         }\n+                                        };\n+\n+ public static final RowMapper<ServicesPackage> SERVICESPACKAGE_MAPPER = new RowMapper<ServicesPackage>() {\n+                                                 public ServicesPackage mapRow(ResultSet rs, int i) throws SQLException {\n+                                                  ServicesPackage sPackage = new ServicesPackage();\n+                                                  sPackage.setId(rs.getInt(\"service_packages_id\"));\n+                                                  sPackage.setDescription(rs.getString(\"service_packages_description\"));\n+                                                  sPackage.setName(rs.getString(\"service_packages_name\"));\n+                                                  sPackage.setCreatedAt(rs.getString(\"service_packages_created_at\"));\n+                                                  sPackage.setCreatedBy(rs.getString(\"service_packages_created_by\"));\n+                                                  sPackage.setModifiedAt(rs.getString(\"service_packages_modified_at\"));\n+                                                  sPackage.setModifiedBy(rs.getString(\"service_packages_modified_by\"));\n+                                                  if (rs.getInt(\"s_packages_modified_by_uid\") == 0) sPackage.setModifiedByUid(null);\n+                                                  else sPackage.setModifiedByUid(rs.getInt(\"s_packages_modified_by_uid\"));\n+                                                  if (rs.getInt(\"s_packages_created_by_uid\") == 0) sPackage.setCreatedByUid(null);\n+                                                  else sPackage.setCreatedByUid(rs.getInt(\"s_packages_created_by_uid\"));\n+                                                  return sPackage;\n+                                                 }\n+                                                };\n+\n+ public static final RowMapper<Destination> DESTINATION_MAPPER = new RowMapper<Destination>() {\n+                                             public Destination mapRow(ResultSet rs, int i) throws SQLException {\n+                                              Destination destination = new Destination();\n+                                              destination.setId(rs.getInt(\"destinations_id\"));\n+                                              destination.setDestination(rs.getString(\"destinations_destination\"));\n+                                              destination.setType(rs.getString(\"destinations_type\"));\n+                                              destination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n+                                              destination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n+                                              destination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n+                                              destination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n+\n+                                              try { // do not mind if the column is not in the results\n+                                               String ptype = rs.getString(\"f_s_des_propagation_type\");\n+                                               if (ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) || ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) || ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n+                                                destination.setPropagationType(ptype);\n+                                               } else {\n+                                                destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+                                               }\n+                                              } catch (SQLException e) {\n+                                               destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+                                              }\n+                                              if (rs.getInt(\"destinations_modified_by_uid\") == 0) destination.setModifiedByUid(null);\n+                                              else destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n+                                              if (rs.getInt(\"destinations_created_by_uid\") == 0) destination.setCreatedByUid(null);\n+                                              else destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n+                                              return destination;\n+                                             }\n+                                            };\n+\n+ public static final RowMapper<RichDestination> RICH_DESTINATION_MAPPER = new RowMapper<RichDestination>() {\n+                                                 public RichDestination mapRow(ResultSet rs, int i) throws SQLException {\n+                                                  Destination destination = new Destination();\n+                                                  destination.setId(rs.getInt(\"destinations_id\"));\n+                                                  destination.setDestination(rs.getString(\"destinations_destination\"));\n+                                                  destination.setType(rs.getString(\"destinations_type\"));\n+                                                  destination.setCreatedAt(rs.getString(\"destinations_created_at\"));\n+                                                  destination.setCreatedBy(rs.getString(\"destinations_created_by\"));\n+                                                  destination.setModifiedAt(rs.getString(\"destinations_modified_at\"));\n+                                                  destination.setModifiedBy(rs.getString(\"destinations_modified_by\"));\n+\n+                                                  try { // do not mind if the column is not in the results\n+                                                   String ptype = rs.getString(\"f_s_des_propagation_type\");\n+                                                   if (ptype.equals(Destination.PROPAGATIONTYPE_SERIAL) || ptype.equals(Destination.PROPAGATIONTYPE_PARALLEL) || ptype.equals(Destination.PROPAGATIONTYPE_DUMMY)) {\n+                                                    destination.setPropagationType(ptype);\n+                                                   } else {\n+                                                    destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+                                                   }\n+                                                  } catch (SQLException e) {\n+                                                   destination.setPropagationType(Destination.PROPAGATIONTYPE_PARALLEL);\n+                                                  }\n+                                                  if (rs.getInt(\"destinations_modified_by_uid\") == 0) destination.setModifiedByUid(null);\n+                                                  else destination.setModifiedByUid(rs.getInt(\"destinations_modified_by_uid\"));\n+                                                  if (rs.getInt(\"destinations_created_by_uid\") == 0) destination.setCreatedByUid(null);\n+                                                  else destination.setCreatedByUid(rs.getInt(\"destinations_created_by_uid\"));\n+                                                  Facility facility = new Facility();\n+                                                  facility.setId(rs.getInt(\"facilities_id\"));\n+                                                  facility.setName(rs.getString(\"facilities_name\"));\n+                                                  facility.setCreatedAt(rs.getString(\"facilities_created_at\"));\n+                                                  facility.setCreatedBy(rs.getString(\"facilities_created_by\"));\n+                                                  facility.setModifiedAt(rs.getString(\"facilities_modified_at\"));\n+                                                  facility.setModifiedBy(rs.getString(\"facilities_modified_by\"));\n+                                                  if (rs.getInt(\"facilities_modified_by_uid\") == 0) facility.setModifiedByUid(null);\n+                                                  else facility.setModifiedByUid(rs.getInt(\"facilities_modified_by_uid\"));\n+                                                  if (rs.getInt(\"facilities_created_by_uid\") == 0) facility.setCreatedByUid(null);\n+                                                  else facility.setCreatedByUid(rs.getInt(\"facilities_created_by_uid\"));\n+                                                  Service service = SERVICE_MAPPER.mapRow(rs, i);\n+                                                  return new RichDestination(destination, facility, service);\n+                                                 }\n+                                                };\n+\n+ public Service createService(PerunSession sess, Service service) throws InternalErrorException {\n+  try {\n+   int newId = Utils.getNewId(jdbc, \"services_id_seq\");\n+   // if not set, make sure script path is set based on service name\n+   if (service.getScript() == null || service.getScript().isEmpty()) {\n+    service.setScript(\"./\" + service.getName());\n+   }\n+   jdbc.update(\"insert into services(id,name,description,delay,recurrence,enabled,script,created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" + \"values (?,?,?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, service.getName(), service.getDescription(), service.getDelay(), service.getRecurrence(), service.isEnabled() ? '1' : '0', service.getScript(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+   log.info(\"Service created: {}\", service);\n+   service.setId(newId);\n+   return service;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public void deleteService(PerunSession sess, Service service) throws InternalErrorException, ServiceAlreadyRemovedException {\n+  try {\n+   // Delete authz entries for this service\n+   AuthzResolverBlImpl.removeAllAuthzForService(sess, service);\n+\n+   int numAffected = jdbc.update(\"delete from services where id=?\", service.getId());\n+   if (numAffected == 0) throw new ServiceAlreadyRemovedException(\"Service: \" + service);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public void updateService(PerunSession sess, Service service) throws InternalErrorException {\n+  try {\n+   // if not set, make sure script path is set based on new service name\n+   if (service.getScript() == null || service.getScript().isEmpty()) {\n+    service.setScript(\"./\" + service.getName());\n+   }\n+   jdbc.update(\"update services set name=?, description=?, delay=?, recurrence=?, enabled=?, script=?, \" + \"modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id=?\", service.getName(), service.getDescription(), service.getDelay(), service.getRecurrence(), service.isEnabled() ? '1' : '0', service.getScript(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), service.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public Service getServiceByName(PerunSession sess, String name) throws InternalErrorException, ServiceNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where name=?\", SERVICE_MAPPER, name);\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new ServiceNotExistsException(\"Service not exists. name=\" + name);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public Service getServiceById(PerunSession sess, int id) throws InternalErrorException, ServiceNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + serviceMappingSelectQuery + \" from services where id=?\", SERVICE_MAPPER, id);\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new ServiceNotExistsException(\"Service not exists. Id=\" + id);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Service> getServices(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services\", SERVICE_MAPPER);\n+  } catch (EmptyResultDataAccessException ex) {\n+   log.info(\"ServicesManager.getAllServices: No service found.\");\n+   return new ArrayList<Service>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + serviceMappingSelectQuery + \" from services join service_required_attrs on services.id=service_required_attrs.service_id \" + \"where service_required_attrs.attr_id=?\", SERVICE_MAPPER, attributeDefinition.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   log.info(\"ServicesManager.getServicesByAttributeDefinition: No service found.\");\n+   return new ArrayList<Service>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Resource> getAssignedResources(PerunSession sess, Service service) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + ResourcesManagerImpl.resourceMappingSelectQuery + \" from resource_services join resources on \" + \"resource_services.resource_id=resources.id  where service_id=?\", ResourcesManagerImpl.RESOURCE_MAPPER, service.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<ServicesPackage> getServicesPackages(PerunSession sess) throws InternalErrorException {\n+  try {\n+   List<ServicesPackage> servicesPackages = jdbc.query(\"select \" + servicePackageMappingSelectQuery + \" from service_packages\", SERVICESPACKAGE_MAPPER);\n+   return servicesPackages;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public ServicesPackage getServicesPackageById(PerunSession sess, int servicesPackageId) throws InternalErrorException, ServicesPackageNotExistsException {\n+  try {\n+   ServicesPackage servicesPackage = jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where id = ?\", SERVICESPACKAGE_MAPPER, new Integer(servicesPackageId));\n+   return servicesPackage;\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new ServicesPackageNotExistsException(\"ServicesPackage with id '\" + servicesPackageId + \"' desn't exists\", ex);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public ServicesPackage createServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+  try {\n+   int newId = Utils.getNewId(jdbc, \"service_packages_id_seq\");\n+   jdbc.update(\"insert into service_packages (id, name, description, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" + \"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", newId, servicesPackage.getName(), servicesPackage.getDescription(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+   servicesPackage.setId(newId);\n+   return servicesPackage;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void updateServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"update service_packages set description = ?, name = ?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \"  where id = ?\", servicesPackage.getDescription(), servicesPackage.getName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), servicesPackage.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void deleteServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from service_packages where id = ?\", servicesPackage.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void addServiceToServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyAssignedException {\n+  try {\n+   jdbc.update(\"insert into service_service_packages (package_id, service_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" + \"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", servicesPackage.getId(), service.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+  } catch (DuplicateKeyException e) {\n+   throw new ServiceAlreadyAssignedException(\"Service with id \" + service.getId() + \" is already assigned to the service package with id \" + servicesPackage.getId(),\n+e);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void removeServiceFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage, Service service) throws InternalErrorException, ServiceAlreadyRemovedFromServicePackageException {\n+  try {\n+   int numAffected = jdbc.update(\"delete from service_service_packages where package_id=? and service_id=?\",\n+   servicesPackage.getId(),\n+   service.getId());\n+   if (numAffected == 0) throw new ServiceAlreadyRemovedFromServicePackageException(\"Service: \" + service + \" , ServicePackage: \" + servicesPackage);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public ServicesPackage getServicesPackageByName(PerunSession sess, String name) throws InternalErrorException, ServicesPackageNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + servicePackageMappingSelectQuery + \" from service_packages where name=?\",\n+   SERVICESPACKAGE_MAPPER,\n+   name);\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new ServicesPackageNotExistsException(\"ServicesPackage not exists. name=\" + name);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Service> getServicesFromServicesPackage(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+  try {\n+   List<Service> services = new ArrayList<Service>();\n+   List<Integer> servicesId = jdbc.query(\"select service_id as id from service_service_packages where package_id=?\",\n+   Utils.ID_MAPPER,\n+   servicesPackage.getId());\n+   for (Integer serviceId : servicesId) {\n+    try {\n+     services.add(getServiceById(sess, serviceId));\n+    } catch (ServiceNotExistsException ex) {\n+     throw new InternalErrorException(ex);\n+    }\n+   }\n+\n+   return services;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public void addRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeAlreadyAssignedException {\n+  try {\n+   if (0 <jdbc.queryForInt(\"select count(*) from service_required_attrs where service_id=? and attr_id=?\",\n+   service.getId(),\n+   attribute.getId())) {\n+    throw new AttributeAlreadyAssignedException(\"Service: \" + service + \" already required attribute \" + attribute);\n+   }\n+   jdbc.update(\"insert into service_required_attrs(service_id, attr_id, created_by,created_at,modified_by,modified_at,created_by_uid,modified_by_uid) \" + \"values (?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), attribute.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void addRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeAlreadyAssignedException {\n+\n+  for (AttributeDefinition attribute : attributes)\n+  addRequiredAttribute(sess, service, attribute);\n+ }\n+\n+ public void removeRequiredAttribute(PerunSession sess, Service service, AttributeDefinition attribute) throws InternalErrorException, AttributeNotAssignedException {\n+  try {\n+   if (0 == jdbc.update(\"delete from service_required_attrs where service_id=? and attr_id=?\",\n+   service.getId(),\n+   attribute.getId())) {\n+    throw new AttributeNotAssignedException(attribute);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void removeRequiredAttributes(PerunSession sess, Service service, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotAssignedException {\n+\n+  for (AttributeDefinition attribute : attributes)\n+  removeRequiredAttribute(sess, service, attribute);\n+ }\n+\n+ public void removeAllRequiredAttributes(PerunSession sess, Service service) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from service_required_attrs where service_id=?\", service.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public boolean serviceExists(PerunSession sess, Service service) throws InternalErrorException {\n+  try {\n+   return 1 == jdbc.queryForInt(\"select 1 from services where id=?\", service.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public void checkServiceExists(PerunSession sess, Service service) throws InternalErrorException, ServiceNotExistsException {\n+  if (!serviceExists(sess, service)) throw new ServiceNotExistsException(\"Service not exists: \" + service);\n+ }\n+\n+ public void checkServicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException {\n+  if (!servicesPackageExists(sess, servicesPackage)) throw new ServicesPackageNotExistsException(\"ServicesPackage not exists: \" + servicesPackage);\n+ }\n+\n+ public boolean servicesPackageExists(PerunSession sess, ServicesPackage servicesPackage) throws InternalErrorException {\n+  try {\n+   return 1 == jdbc.queryForInt(\"select 1 from service_packages where id=?\", servicesPackage.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public Destination getDestinationById(PerunSession sess, int id) throws InternalErrorException, DestinationNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where id=?\", DESTINATION_MAPPER, id);\n+  } catch (EmptyResultDataAccessException e) {\n+   throw new DestinationNotExistsException(\"Destination.id=\" + id, e);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Deprecated\n+ public int getDestinationIdByName(PerunSession sess, String name) throws InternalErrorException, DestinationNotExistsException {\n+  try {\n+   return jdbc.queryForInt(\"select id from destinations where destination=?\", name);\n+  } catch (EmptyResultDataAccessException e) {\n+   throw new DestinationNotExistsException(e);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void addDestination(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"insert into facility_service_destinations (service_id, facility_id, destination_id, propagation_type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" + \"values (?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", service.getId(), facility.getId(), destination.getId(), destination.getPropagationType(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void removeDestination(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException, DestinationAlreadyRemovedException {\n+  try {\n+   if (0 == jdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=? and destination_id=?\", service.getId(), facility.getId(), destination.getId())) {\n+    throw new DestinationAlreadyRemovedException(destination);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Destination> getDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations join destinations on destinations.id=facility_service_destinations.destination_id \" + \"where service_id=? and facility_id=? order by destinations.destination\", DESTINATION_MAPPER, service.getId(), facility.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Destination> getDestinations(PerunSession perunSession) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + destinationMappingSelectQuery + \" from destinations\", DESTINATION_MAPPER);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Destination> getDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + facilityDestinationMappingSelectQuery + \" from facility_service_destinations \" + \"join destinations on destinations.id=facility_service_destinations.destination_id \" + \"where facility_id=? order by destinations.destination\", DESTINATION_MAPPER, facility.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" + \"join destinations on destinations.id=facility_service_destinations.destination_id \" + \"join services on services.id=facility_service_destinations.service_id \" + \"join facilities on facilities.id=facility_service_destinations.facility_id \" + \"where facility_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" + \"join destinations on destinations.id=facility_service_destinations.destination_id \" + \"join services on services.id=facility_service_destinations.service_id \" + \"join facilities on facilities.id=facility_service_destinations.facility_id \" + \"where service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, service.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + richDestinationMappingSelectQuery + \" from facility_service_destinations \" + \"join destinations on destinations.id=facility_service_destinations.destination_id \" + \"join services on services.id=facility_service_destinations.service_id \" + \"join facilities on facilities.id=facility_service_destinations.facility_id \" + \"where facility_id=? and service_id=? order by destinations.destination\", RICH_DESTINATION_MAPPER, facility.getId(), service.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void removeAllDestinations(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from facility_service_destinations where service_id=? and facility_id=?\",\n+   service.getId(),\n+   facility.getId());\n+   //TODO remove from table destinations?\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void removeAllDestinations(PerunSession sess, Facility facility) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from facility_service_destinations where facility_id=?\", facility.getId());\n+   //TODO remove from table destinations?\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public boolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination) throws InternalErrorException {\n+  try {\n+   return 1 == jdbc.queryForInt(\"select 1 from facility_service_destinations fsd join destinations d on fsd.destination_id = d.id where fsd.service_id=? and fsd.facility_id=? and d.destination=? and d.type=?\", service.getId(), facility.getId(), destination.getDestination(), destination.getType());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public boolean destinationExists(PerunSession sess, Destination destination) throws InternalErrorException {\n+  try {\n+   return 1 == jdbc.queryForInt(\"select 1 from destinations where id=? and destination=? and type=?\", destination.getId(), destination.getDestination(), destination.getType());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Service> getAssignedServices(PerunSession perunSession, Facility facility) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select distinct \" + serviceMappingSelectQuery + \" from services join resource_services on services.id = resource_services.service_id join resources on resource_services.resource_id = resources.id where resources.facility_id=?\", SERVICE_MAPPER, facility.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public Destination getDestination(PerunSession sess, String destination, String type) throws InternalErrorException, DestinationNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + destinationMappingSelectQuery + \" from destinations where destination=? and type=?\", DESTINATION_MAPPER, destination, type);\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new DestinationNotExistsException(ex);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public Destination createDestination(PerunSession sess, Destination destination) throws InternalErrorException {\n+  try {\n+   int destinationId = Utils.getNewId(jdbc, \"destinations_id_seq\");\n+   jdbc.update(\"insert into destinations (id, destination, type, created_by,created_at,modified_by,modified_at,created_by_uid, modified_by_uid) \" + \"values (?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", destinationId, destination.getDestination(), destination.getType(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+   destination.setId(destinationId);\n+   return destination;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ public List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select distinct \" + destinationMappingSelectQuery + \" from destinations, facility_service_destinations, facilities, resources \" + \"where destinations.id = facility_service_destinations.destination_id and facilities.id = facility_service_destinations.facility_id \" + \"and facilities.id = resources.facility_id and resources.vo_id = ?\", DESTINATION_MAPPER, vo.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public int getDestinationsCount(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForInt(\"select count(*) from destinations\");\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 629
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/17/ServicesManagerImpl.java\nindex a4062ce650f..65053ded5b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/17/ServicesManagerImpl.java\n@@ -74,7 +74,7 @@ public class ServicesManagerImpl implements ServicesManagerImplApi {\n \tpublic final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" +\n \t\t\"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n \t\t\"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n-\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + \n+\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" +\n \t\tserviceMappingSelectQuery + \", \" +\n \t\t\"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/17/ServicesManagerImpl.java\nindex a4062ce650f..31a975fc2cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/17/ServicesManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/17/ServicesManagerImpl.java\n@@ -74,8 +74,8 @@ public class ServicesManagerImpl implements ServicesManagerImplApi {\n \tpublic final static String richDestinationMappingSelectQuery = \" \" + destinationMappingSelectQuery + \", \" +\n \t\t\"facilities.id as facilities_id, facilities.name as facilities_name, \" +\n \t\t\"facilities.created_at as facilities_created_at, facilities.created_by as facilities_created_by, facilities.modified_at as facilities_modified_at, facilities.modified_by as facilities_modified_by, \" +\n-\t\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + \n-\t\tserviceMappingSelectQuery + \", \" +\n+\t\"facilities.modified_by_uid as facilities_modified_by_uid, facilities.created_by_uid as facilities_created_by_uid, \" + serviceMappingSelectQuery\n+\t\t\t+ \", \" +\n \t\t\"facility_service_destinations.propagation_type as f_s_des_propagation_type \";\n \n \tpublic static final RowMapper<Service> SERVICE_MAPPER = new RowMapper<Service>() {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}