{
    "project_name": "Angel-ML-angel",
    "error_id": "1214",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1214/PlusRowsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1214/PlusRowsRequest.java\nindex 69c29fff81c..fe2cc1ad009 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1214/PlusRowsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1214/PlusRowsRequest.java\n@@ -21,20 +21,22 @@ import com.tencent.angel.psagent.matrix.transport.adapter.RowsUpdateSplit;\n import io.netty.buffer.ByteBuf;\n \n public class PlusRowsRequest extends PutPartitionUpdateRequest {\n-  /** the update row splits */\n+  /**\n+   * the update row splits\n+   */\n   private RowsUpdateSplit rowsSplit;\n \n   /**\n    * Create PutPartitionUpdateRequest.\n    *\n-   * @param taskIndex task index\n-   * @param clock clock value\n-   * @param partKey matrix partition key\n-   * @param rowsSplit update row splits\n+   * @param taskIndex   task index\n+   * @param clock       clock value\n+   * @param partKey     matrix partition key\n+   * @param rowsSplit   update row splits\n    * @param updateClock true means update the clock value of the matrix partition\n    */\n   public PlusRowsRequest(int taskIndex, int clock,\n-    PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n+                         PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n     super(taskIndex, clock, partKey, null, updateClock);\n     this.rowsSplit = rowsSplit;\n   }\n@@ -70,7 +72,7 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n   @Override\n   public int bufferLen() {\n     int len = super.bufferLen();\n-    if(rowsSplit != null)  {\n+    if (rowsSplit != null) {\n       len += rowsSplit.bufferLen();\n     }\n     return len;\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1214/PlusRowsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1214/PlusRowsRequest.java\nindex 69c29fff81c..2037c807ecf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1214/PlusRowsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1214/PlusRowsRequest.java\n@@ -33,9 +33,8 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n    * @param rowsSplit update row splits\n    * @param updateClock true means update the clock value of the matrix partition\n    */\n-  public PlusRowsRequest(int taskIndex, int clock,\n-    PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n-    super(taskIndex, clock, partKey, null, updateClock);\n+  public PlusRowsRequest(int taskIndex, int clock, PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n+  super(taskIndex, clock, partKey, null, updateClock);\n     this.rowsSplit = rowsSplit;\n   }\n \n@@ -70,9 +69,9 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n   @Override\n   public int bufferLen() {\n     int len = super.bufferLen();\n-    if(rowsSplit != null)  {\n+    if (rowsSplit != null) {\n       len += rowsSplit.bufferLen();\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1214/PlusRowsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1214/PlusRowsRequest.java\nindex 69c29fff81c..9d83b6a7755 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1214/PlusRowsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1214/PlusRowsRequest.java\n@@ -22,6 +22,7 @@ import io.netty.buffer.ByteBuf;\n \n public class PlusRowsRequest extends PutPartitionUpdateRequest {\n   /** the update row splits */\n+\n   private RowsUpdateSplit rowsSplit;\n \n   /**\n@@ -33,8 +34,8 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n    * @param rowsSplit update row splits\n    * @param updateClock true means update the clock value of the matrix partition\n    */\n-  public PlusRowsRequest(int taskIndex, int clock,\n-    PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n+\n+  public PlusRowsRequest(int taskIndex, int clock, PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n     super(taskIndex, clock, partKey, null, updateClock);\n     this.rowsSplit = rowsSplit;\n   }\n@@ -70,9 +71,9 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n   @Override\n   public int bufferLen() {\n     int len = super.bufferLen();\n-    if(rowsSplit != null)  {\n+    if (rowsSplit != null) {\n       len += rowsSplit.bufferLen();\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}