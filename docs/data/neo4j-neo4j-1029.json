{
    "project_name": "neo4j-neo4j",
    "error_id": "1029",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1029/BatchedRelationshipRecords.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1029/BatchedRelationshipRecords.java\nindex d82c356d668..f2cdf2ddc2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1029/BatchedRelationshipRecords.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1029/BatchedRelationshipRecords.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checker;\n \n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n@@ -53,7 +54,7 @@ class BatchedRelationshipRecords\n         return writeCursor < fields.length;\n     }\n \n-    void add( RelationshipRecord relationshipRecord )\n+    void add(RelationshipRecord relationshipRecord)\n     {\n         fields[writeCursor++] = relationshipRecord.getId();\n         fields[writeCursor++] = relationshipRecord.getFirstNode();\n@@ -62,24 +63,24 @@ class BatchedRelationshipRecords\n         fields[writeCursor++] = relationshipRecord.getFirstNextRel();\n         fields[writeCursor++] = relationshipRecord.getSecondPrevRel();\n         fields[writeCursor++] = relationshipRecord.getSecondNextRel();\n-        fields[writeCursor++] = longOf( relationshipRecord.isFirstInFirstChain() ) | longOf( relationshipRecord.isFirstInSecondChain() ) << 1;\n+        fields[writeCursor++] = longOf(relationshipRecord.isFirstInFirstChain()) | longOf(relationshipRecord.isFirstInSecondChain()) << 1;\n     }\n \n-    boolean fillNext( RelationshipRecord relationshipRecord )\n+    boolean fillNext(RelationshipRecord relationshipRecord)\n     {\n-        if ( readCursor < writeCursor )\n+        if (readCursor < writeCursor)\n         {\n-            relationshipRecord.setId( fields[readCursor++] );\n-            relationshipRecord.setFirstNode( fields[readCursor++] );\n-            relationshipRecord.setSecondNode( fields[readCursor++] );\n-            relationshipRecord.setFirstPrevRel( fields[readCursor++] );\n-            relationshipRecord.setFirstNextRel( fields[readCursor++] );\n-            relationshipRecord.setSecondPrevRel( fields[readCursor++] );\n-            relationshipRecord.setSecondNextRel( fields[readCursor++] );\n+            relationshipRecord.setId(fields[readCursor++]);\n+            relationshipRecord.setFirstNode(fields[readCursor++]);\n+            relationshipRecord.setSecondNode(fields[readCursor++]);\n+            relationshipRecord.setFirstPrevRel(fields[readCursor++]);\n+            relationshipRecord.setFirstNextRel(fields[readCursor++]);\n+            relationshipRecord.setSecondPrevRel(fields[readCursor++]);\n+            relationshipRecord.setSecondNextRel(fields[readCursor++]);\n             long flags = fields[readCursor++];\n-            relationshipRecord.setFirstInFirstChain( (flags & 0x1) != 0 );\n-            relationshipRecord.setFirstInSecondChain( (flags & 0x2) != 0 );\n-            relationshipRecord.setInUse( true );\n+            relationshipRecord.setFirstInFirstChain((flags & 0x1) != 0);\n+            relationshipRecord.setFirstInSecondChain((flags & 0x2) != 0);\n+            relationshipRecord.setInUse(true);\n             return true;\n         }\n         return false;\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}