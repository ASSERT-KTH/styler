{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "500",
    "information": {
        "errors": [
            {
                "line": "170",
                "column": "58",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    DocumentStatData documentStatData = (DocumentStatData)o;\n    return\n        Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n        Objects.equals(this.pageCount, documentStatData.pageCount) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/500/DocumentStatData.java\nindex 86d31361fea..23bd515aa83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/500/DocumentStatData.java\n@@ -167,7 +167,7 @@ public class DocumentStatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentStatData documentStatData = (DocumentStatData)o;\n+    DocumentStatData documentStatData = (DocumentStatData) o;\n     return\n         Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n         Objects.equals(this.pageCount, documentStatData.pageCount) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/500/DocumentStatData.java\nindex 86d31361fea..decd0c7c668 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/500/DocumentStatData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -61,6 +64,7 @@ public class DocumentStatData {\n \n     @SerializedName(\"WordCount\")\n     private Integer wordCount = null;\n+\n     public DocumentStatData footnotesStatData(FootnotesStatData footnotesStatData) {\n         this.footnotesStatData = footnotesStatData;\n         return this;\n@@ -68,8 +72,9 @@ public class DocumentStatData {\n \n     /**\n      * Gets or sets detailed statistics of footnotes.\n-    * @return footnotesStatData\n-    **/\n+     *\n+     * @return footnotesStatData\n+     **/\n     @ApiModelProperty(value = \"Gets or sets detailed statistics of footnotes.\")\n     public FootnotesStatData getFootnotesStatData() {\n         return footnotesStatData;\n@@ -86,8 +91,9 @@ public class DocumentStatData {\n \n     /**\n      * Gets or sets total count of pages in the document.\n-    * @return pageCount\n-    **/\n+     *\n+     * @return pageCount\n+     **/\n     @ApiModelProperty(value = \"Gets or sets total count of pages in the document.\")\n     public Integer getPageCount() {\n         return pageCount;\n@@ -112,8 +118,9 @@ public class DocumentStatData {\n \n     /**\n      * Gets or sets detailed statistics of all pages.\n-    * @return pageStatData\n-    **/\n+     *\n+     * @return pageStatData\n+     **/\n     @ApiModelProperty(value = \"Gets or sets detailed statistics of all pages.\")\n     public List<PageStatData> getPageStatData() {\n         return pageStatData;\n@@ -130,8 +137,9 @@ public class DocumentStatData {\n \n     /**\n      * Gets or sets total count of paragraphs in the document.\n-    * @return paragraphCount\n-    **/\n+     *\n+     * @return paragraphCount\n+     **/\n     @ApiModelProperty(value = \"Gets or sets total count of paragraphs in the document.\")\n     public Integer getParagraphCount() {\n         return paragraphCount;\n@@ -148,8 +156,9 @@ public class DocumentStatData {\n \n     /**\n      * Gets or sets total count of words in the document.\n-    * @return wordCount\n-    **/\n+     *\n+     * @return wordCount\n+     **/\n     @ApiModelProperty(value = \"Gets or sets total count of words in the document.\")\n     public Integer getWordCount() {\n         return wordCount;\n@@ -167,41 +176,41 @@ public class DocumentStatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentStatData documentStatData = (DocumentStatData)o;\n-    return\n-        Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n-        Objects.equals(this.pageCount, documentStatData.pageCount) &&\n-        Objects.equals(this.pageStatData, documentStatData.pageStatData) &&\n-        Objects.equals(this.paragraphCount, documentStatData.paragraphCount) &&\n-        Objects.equals(this.wordCount, documentStatData.wordCount);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(footnotesStatData, pageCount, pageStatData, paragraphCount, wordCount);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class DocumentStatData {\\n\");\n-    sb.append(\"    footnotesStatData: \").append(toIndentedString(footnotesStatData)).append(\"\\n\");\n-    sb.append(\"    pageCount: \").append(toIndentedString(pageCount)).append(\"\\n\");\n-    sb.append(\"    pageStatData: \").append(toIndentedString(pageStatData)).append(\"\\n\");\n-    sb.append(\"    paragraphCount: \").append(toIndentedString(paragraphCount)).append(\"\\n\");\n-    sb.append(\"    wordCount: \").append(toIndentedString(wordCount)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        DocumentStatData documentStatData = (DocumentStatData) o;\n+        return\n+            Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n+                Objects.equals(this.pageCount, documentStatData.pageCount) &&\n+                Objects.equals(this.pageStatData, documentStatData.pageStatData) &&\n+                Objects.equals(this.paragraphCount, documentStatData.paragraphCount) &&\n+                Objects.equals(this.wordCount, documentStatData.wordCount);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(footnotesStatData, pageCount, pageStatData, paragraphCount, wordCount);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class DocumentStatData {\\n\");\n+        sb.append(\"    footnotesStatData: \").append(toIndentedString(footnotesStatData)).append(\"\\n\");\n+        sb.append(\"    pageCount: \").append(toIndentedString(pageCount)).append(\"\\n\");\n+        sb.append(\"    pageStatData: \").append(toIndentedString(pageStatData)).append(\"\\n\");\n+        sb.append(\"    paragraphCount: \").append(toIndentedString(paragraphCount)).append(\"\\n\");\n+        sb.append(\"    wordCount: \").append(toIndentedString(wordCount)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/500/DocumentStatData.java\nindex 86d31361fea..029dd2477e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/500/DocumentStatData.java\n@@ -45,142 +45,159 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Container for the document's statistical data.\n  */\n+\n+\n @ApiModel(description = \"Container for the document's statistical data.\")\n+\n public class DocumentStatData {\n-    @SerializedName(\"FootnotesStatData\")\n-    private FootnotesStatData footnotesStatData = null;\n+  @SerializedName(\"FootnotesStatData\")\n+  private FootnotesStatData footnotesStatData = null;\n \n-    @SerializedName(\"PageCount\")\n-    private Integer pageCount = null;\n+  @SerializedName(\"PageCount\")\n+  private Integer pageCount = null;\n \n-    @SerializedName(\"PageStatData\")\n-    private List<PageStatData> pageStatData = null;\n+  @SerializedName(\"PageStatData\")\n+  private List<PageStatData> pageStatData = null;\n \n-    @SerializedName(\"ParagraphCount\")\n-    private Integer paragraphCount = null;\n+  @SerializedName(\"ParagraphCount\")\n+  private Integer paragraphCount = null;\n \n-    @SerializedName(\"WordCount\")\n-    private Integer wordCount = null;\n-    public DocumentStatData footnotesStatData(FootnotesStatData footnotesStatData) {\n-        this.footnotesStatData = footnotesStatData;\n-        return this;\n-    }\n+  @SerializedName(\"WordCount\")\n+  private Integer wordCount = null;\n+\n+  public DocumentStatData footnotesStatData(FootnotesStatData footnotesStatData) {\n+    this.footnotesStatData = footnotesStatData;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets detailed statistics of footnotes.\n     * @return footnotesStatData\n     **/\n-    @ApiModelProperty(value = \"Gets or sets detailed statistics of footnotes.\")\n-    public FootnotesStatData getFootnotesStatData() {\n-        return footnotesStatData;\n-    }\n \n-    public void setFootnotesStatData(FootnotesStatData footnotesStatData) {\n-        this.footnotesStatData = footnotesStatData;\n-    }\n \n-    public DocumentStatData pageCount(Integer pageCount) {\n-        this.pageCount = pageCount;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets detailed statistics of footnotes.\")\n+  public FootnotesStatData getFootnotesStatData() {\n+    return footnotesStatData;\n+  }\n+\n+  public void setFootnotesStatData(FootnotesStatData footnotesStatData) {\n+    this.footnotesStatData = footnotesStatData;\n+  }\n+\n+  public DocumentStatData pageCount(Integer pageCount) {\n+    this.pageCount = pageCount;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets total count of pages in the document.\n     * @return pageCount\n     **/\n-    @ApiModelProperty(value = \"Gets or sets total count of pages in the document.\")\n-    public Integer getPageCount() {\n-        return pageCount;\n-    }\n \n-    public void setPageCount(Integer pageCount) {\n-        this.pageCount = pageCount;\n-    }\n \n-    public DocumentStatData pageStatData(List<PageStatData> pageStatData) {\n-        this.pageStatData = pageStatData;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets total count of pages in the document.\")\n+  public Integer getPageCount() {\n+    return pageCount;\n+  }\n+\n+  public void setPageCount(Integer pageCount) {\n+    this.pageCount = pageCount;\n+  }\n \n-    public DocumentStatData addPageStatDataItem(PageStatData pageStatDataItem) {\n-        if (this.pageStatData == null) {\n-            this.pageStatData = new ArrayList<PageStatData>();\n-        }\n-        this.pageStatData.add(pageStatDataItem);\n-        return this;\n+  public DocumentStatData pageStatData(List<PageStatData> pageStatData) {\n+    this.pageStatData = pageStatData;\n+    return this;\n+  }\n+\n+  public DocumentStatData addPageStatDataItem(PageStatData pageStatDataItem) {\n+    if (this.pageStatData == null) {\n+      this.pageStatData = new ArrayList<PageStatData>();\n     }\n+    this.pageStatData.add(pageStatDataItem);\n+    return this;\n+  }\n \n     /**\n      * Gets or sets detailed statistics of all pages.\n     * @return pageStatData\n     **/\n-    @ApiModelProperty(value = \"Gets or sets detailed statistics of all pages.\")\n-    public List<PageStatData> getPageStatData() {\n-        return pageStatData;\n-    }\n \n-    public void setPageStatData(List<PageStatData> pageStatData) {\n-        this.pageStatData = pageStatData;\n-    }\n \n-    public DocumentStatData paragraphCount(Integer paragraphCount) {\n-        this.paragraphCount = paragraphCount;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets detailed statistics of all pages.\")\n+  public List<PageStatData> getPageStatData() {\n+    return pageStatData;\n+  }\n+\n+  public void setPageStatData(List<PageStatData> pageStatData) {\n+    this.pageStatData = pageStatData;\n+  }\n+\n+  public DocumentStatData paragraphCount(Integer paragraphCount) {\n+    this.paragraphCount = paragraphCount;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets total count of paragraphs in the document.\n     * @return paragraphCount\n     **/\n-    @ApiModelProperty(value = \"Gets or sets total count of paragraphs in the document.\")\n-    public Integer getParagraphCount() {\n-        return paragraphCount;\n-    }\n \n-    public void setParagraphCount(Integer paragraphCount) {\n-        this.paragraphCount = paragraphCount;\n-    }\n \n-    public DocumentStatData wordCount(Integer wordCount) {\n-        this.wordCount = wordCount;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets total count of paragraphs in the document.\")\n+  public Integer getParagraphCount() {\n+    return paragraphCount;\n+  }\n+\n+  public void setParagraphCount(Integer paragraphCount) {\n+    this.paragraphCount = paragraphCount;\n+  }\n+\n+  public DocumentStatData wordCount(Integer wordCount) {\n+    this.wordCount = wordCount;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets total count of words in the document.\n     * @return wordCount\n     **/\n-    @ApiModelProperty(value = \"Gets or sets total count of words in the document.\")\n-    public Integer getWordCount() {\n-        return wordCount;\n-    }\n \n-    public void setWordCount(Integer wordCount) {\n-        this.wordCount = wordCount;\n+\n+  @ApiModelProperty(value = \"Gets or sets total count of words in the document.\")\n+  public Integer getWordCount() {\n+    return wordCount;\n+  }\n+\n+  public void setWordCount(Integer wordCount) {\n+    this.wordCount = wordCount;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    DocumentStatData documentStatData = (DocumentStatData)o;\n-    return\n-        Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n-        Objects.equals(this.pageCount, documentStatData.pageCount) &&\n-        Objects.equals(this.pageStatData, documentStatData.pageStatData) &&\n-        Objects.equals(this.paragraphCount, documentStatData.paragraphCount) &&\n-        Objects.equals(this.wordCount, documentStatData.wordCount);\n+    DocumentStatData documentStatData = (DocumentStatData) o;\n+    return Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n+    Objects.equals(this.pageCount, documentStatData.pageCount) &&\n+    Objects.equals(this.pageStatData, documentStatData.pageStatData) &&\n+    Objects.equals(this.paragraphCount, documentStatData.paragraphCount) &&\n+    Objects.equals(this.wordCount, documentStatData.wordCount);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(footnotesStatData, pageCount, pageStatData, paragraphCount, wordCount);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -198,10 +215,11 @@ public class DocumentStatData {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 145
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/500/DocumentStatData.java\nindex 86d31361fea..23bd515aa83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/500/DocumentStatData.java\n@@ -167,7 +167,7 @@ public class DocumentStatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentStatData documentStatData = (DocumentStatData)o;\n+    DocumentStatData documentStatData = (DocumentStatData) o;\n     return\n         Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n         Objects.equals(this.pageCount, documentStatData.pageCount) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/500/DocumentStatData.java\nindex 86d31361fea..23bd515aa83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/500/DocumentStatData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/500/DocumentStatData.java\n@@ -167,7 +167,7 @@ public class DocumentStatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DocumentStatData documentStatData = (DocumentStatData)o;\n+    DocumentStatData documentStatData = (DocumentStatData) o;\n     return\n         Objects.equals(this.footnotesStatData, documentStatData.footnotesStatData) &&\n         Objects.equals(this.pageCount, documentStatData.pageCount) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}