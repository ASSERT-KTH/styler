{
    "project_name": "CESNET-perun",
    "error_id": "139",
    "information": {
        "errors": [
            {
                "line": "182",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t\t}\n\t\t}\n\t\t\n\t\t/* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n\t\t\t for (Facility facility: facilitiesBeforeMemberRemove) {\n\t\t// Remove user-facility attributes",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/139/MembersManagerBlImpl.java\nindex c3f617866dc..f2409a31a89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/139/MembersManagerBlImpl.java\n@@ -179,7 +179,7 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \t\t\t\t//it is ok, we just want to remove it anyway\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\t/* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n \t\t\t for (Facility facility: facilitiesBeforeMemberRemove) {\n \t\t// Remove user-facility attributes\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/139/MembersManagerBlImpl.java\nindex c3f617866dc..1798700a3bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/139/MembersManagerBlImpl.java\n@@ -85,100 +85,101 @@ import cz.metacentrum.perun.core.implApi.MembersManagerImplApi;\n \n public class MembersManagerBlImpl implements MembersManagerBl {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n+    final static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n \n-\tprivate MembersManagerImplApi membersManagerImpl;\n-\tprivate PerunBl perunBl;\n+    private MembersManagerImplApi membersManagerImpl;\n+    private PerunBl perunBl;\n \n-\t/**\n-\t * Constructor.\n-\t *\n-\t */\n-\tpublic MembersManagerBlImpl(MembersManagerImplApi membersManagerImpl) {\n-\t\tthis.membersManagerImpl = membersManagerImpl;\n-\t}\n+    /**\n+     * Constructor.\n+     */\n+    public MembersManagerBlImpl(MembersManagerImplApi membersManagerImpl) {\n+        this.membersManagerImpl = membersManagerImpl;\n+    }\n \n-\tpublic void deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n-\t\tVo vo = this.getMemberVo(sess, member);\n+    public void deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n+        Vo vo = this.getMemberVo(sess, member);\n \n-\t\tUser user;\n-\t\ttry {\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t} catch (UserNotExistsException e1) {\n-\t\t\tthrow new ConsistencyErrorException(\"Removing member who doesn't have corresponding user.\", e1);\n-\t\t}\n+        User user;\n+        try {\n+            user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+        } catch (UserNotExistsException e1) {\n+            throw new ConsistencyErrorException(\"Removing member who doesn't have corresponding user.\", e1);\n+        }\n \n-\t\tList<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        List<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n \n-\t\tMap<Facility, List<Attribute>> requiredAttributesBeforeMemberRemove = new HashMap<Facility, List<Attribute>>();\n+        Map<Facility, List<Attribute>> requiredAttributesBeforeMemberRemove = new HashMap<Facility, List<Attribute>>();\n \n-\t\tfor(Facility facility : allowedFacilities) {\n-\t\t\t// Get actually required attributes, they will be later compared with list of required attributes when the member will be removed from all resources in this VO\n-\t\t\trequiredAttributesBeforeMemberRemove.put(facility, getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n-\t\t}\n+        for (Facility facility : allowedFacilities) {\n+            // Get actually required attributes, they will be later compared with list of required attributes when the member will be removed from all resources in this VO\n+            requiredAttributesBeforeMemberRemove.put(facility, getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n+        }\n \n-\t\t// Remove member from all groups\n-\t\tList<Group> memberGroups = getPerunBl().getGroupsManagerBl().getMemberDirectGroups(sess, member);\n-\t\tfor (Group group: memberGroups) {\n-\t\t\t// Member must be removed from the members group using separate method\n-\t\t\tif(group.getName().equals(VosManager.MEMBERS_GROUP)) continue;\n-\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getGroupsManagerBl().removeMember(sess, group, member);\n-\t\t\t} catch (NotGroupMemberException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"getMemberGroups return group where the member is not member\", e);\n-\t\t\t} catch (GroupNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t}\n-\t\t}\n+        // Remove member from all groups\n+        List<Group> memberGroups = getPerunBl().getGroupsManagerBl().getMemberDirectGroups(sess, member);\n+        for (Group group : memberGroups) {\n+            // Member must be removed from the members group using separate method\n+            if (group.getName().equals(VosManager.MEMBERS_GROUP)) {\n+                continue;\n+            }\n \n-\t\t// Remove member from the VO members group\n-\t\ttry {\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getGroupsManagerBl().removeMemberFromMembersOrAdministratorsGroup(sess, g, member);\n-\t\t\t} catch (NotGroupMemberException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member is not in the \\\"members\\\" group.\" + member + \"  \" + g, e);\n-\t\t\t}\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n+            try {\n+                getPerunBl().getGroupsManagerBl().removeMember(sess, group, member);\n+            } catch (NotGroupMemberException e) {\n+                throw new ConsistencyErrorException(\"getMemberGroups return group where the member is not member\", e);\n+            } catch (GroupNotExistsException e) {\n+                throw new ConsistencyErrorException(e);\n+            }\n+        }\n \n-\t\t// Remove member's  attributes (namespaces: member and resource-member)\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, member);\n-\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\tfor(Resource resource : resources) {\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, member);\n-\t\t\t}\n-\t\t} catch(AttributeValueException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member is removed from all groups. There are no required attribute for this member. Member's attributes can be removed without problem.\", ex);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n+        // Remove member from the VO members group\n+        try {\n+            Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+            try {\n+                getPerunBl().getGroupsManagerBl().removeMemberFromMembersOrAdministratorsGroup(sess, g, member);\n+            } catch (NotGroupMemberException e) {\n+                throw new ConsistencyErrorException(\"Member is not in the \\\"members\\\" group.\" + member + \"  \" + g, e);\n+            }\n+        } catch (GroupNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\t\t// Remove user-facility attributes which are no longer required\n-\t\tfor(Facility facility : allowedFacilities) {\n-\t\t\tList<Attribute> requiredAttributes = requiredAttributesBeforeMemberRemove.get(facility);\n-\t\t\t//remove currently required attributes from requiredAttributesBeforeMemberRemove\n-\t\t\trequiredAttributes.removeAll(getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n-\t\t\t//remove attributes which are no longer required\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().removeAttributes(sess, facility, user, requiredAttributes);\n-\t\t\t} catch(AttributeValueException | WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t}\n+        // Remove member's  attributes (namespaces: member and resource-member)\n+        try {\n+            getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, member);\n+            List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+            for (Resource resource : resources) {\n+                getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, member);\n+            }\n+        } catch (AttributeValueException ex) {\n+            throw new ConsistencyErrorException(\"Member is removed from all groups. There are no required attribute for this member. Member's attributes can be removed without problem.\", ex);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n \n-\t\t//Remove all members bans\n-\t\tList<BanOnResource> bansOnResource = getPerunBl().getResourcesManagerBl().getBansForMember(sess, member.getId());\n-\t\tfor(BanOnResource banOnResource : bansOnResource) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getResourcesManagerBl().removeBan(sess, banOnResource.getId());\n-\t\t\t} catch (BanNotExistsException ex) {\n-\t\t\t\t//it is ok, we just want to remove it anyway\n-\t\t\t}\n-\t\t}\n+        // Remove user-facility attributes which are no longer required\n+        for (Facility facility : allowedFacilities) {\n+            List<Attribute> requiredAttributes = requiredAttributesBeforeMemberRemove.get(facility);\n+            //remove currently required attributes from requiredAttributesBeforeMemberRemove\n+            requiredAttributes.removeAll(getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n+            //remove attributes which are no longer required\n+            try {\n+                getPerunBl().getAttributesManagerBl().removeAttributes(sess, facility, user, requiredAttributes);\n+            } catch (AttributeValueException | WrongAttributeAssignmentException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+        }\n+\n+        //Remove all members bans\n+        List<BanOnResource> bansOnResource = getPerunBl().getResourcesManagerBl().getBansForMember(sess, member.getId());\n+        for (BanOnResource banOnResource : bansOnResource) {\n+            try {\n+                getPerunBl().getResourcesManagerBl().removeBan(sess, banOnResource.getId());\n+            } catch (BanNotExistsException ex) {\n+                //it is ok, we just want to remove it anyway\n+            }\n+        }\n \t\t\n \t\t/* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n \t\t\t for (Facility facility: facilitiesBeforeMemberRemove) {\n@@ -192,1898 +193,1980 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \t\t\t }\n \t\t\t */\n \n-\t\t// Remove member from the DB\n-\t\tgetMembersManagerImpl().deleteMember(sess, member);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} deleted.\", member);\n-\t}\n+        // Remove member from the DB\n+        getMembersManagerImpl().deleteMember(sess, member);\n+        getPerunBl().getAuditer().log(sess, \"{} deleted.\", member);\n+    }\n \n-\tpublic void deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n-\t\tfor (Member m: this.getMembers(sess, vo)) {\n-\t\t\tthis.deleteMember(sess, m);\n-\t\t}\n-\t}\n+    public void deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n+        for (Member m : this.getMembers(sess, vo)) {\n+            this.deleteMember(sess, m);\n+        }\n+    }\n \n-\tpublic Member createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n-\t\treturn this.createMember(sess, vo, user, null);\n-\t}\n+    public Member createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n+        return this.createMember(sess, vo, user, null);\n+    }\n \n-\tpublic Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n-\t\ttry {\n-\t\t\tMember member = getMemberByUser(sess, vo, user);\n-\t\t\tthrow new AlreadyMemberException(member);\n-\t\t} catch(MemberNotExistsException IGNORE) {\n-\t\t}\n-\t\tMember member = getMembersManagerImpl().createMember(sess, vo, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", member);\n+    public Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n+        try {\n+            Member member = getMemberByUser(sess, vo, user);\n+            throw new AlreadyMemberException(member);\n+        } catch (MemberNotExistsException IGNORE) {\n+        }\n+        Member member = getMembersManagerImpl().createMember(sess, vo, user);\n+        getPerunBl().getAuditer().log(sess, \"{} created.\", member);\n+\n+        // Set the initial membershipExpiration\n+\n+        // Get user LOA\n+        String memberLoa = null;\n+        try {\n+            Attribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n+            memberLoa = (String) loa.getValue();\n+        } catch (AttributeNotExistsException e) {\n+            // user has no loa defined - if required by VO, it will be stopped in checking method later\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\t\t// Set the initial membershipExpiration\n+        // check if user can be member - service members are not checked for LoA\n+        this.canBeMemberInternal(sess, vo, user, memberLoa, true);\n \n-\t\t// Get user LOA\n-\t\tString memberLoa = null;\n-\t\ttry {\n-\t\t\tAttribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n-\t\t\tmemberLoa = (String) loa.getValue();\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// user has no loa defined - if required by VO, it will be stopped in checking method later\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n+        // set initial membership expiration\n+        this.extendMembership(sess, member);\n \n-\t\t// check if user can be member - service members are not checked for LoA\n-\t\tthis.canBeMemberInternal(sess, vo, user, memberLoa, true);\n-\n-\t\t// set initial membership expiration\n-\t\tthis.extendMembership(sess, member);\n-\n-\t\tinsertToMemberGroup(sess, member, vo);\n-\n-\t\t// add member also to all groups in list\n-\t\tif(groups != null && !groups.isEmpty()) {\n-\t\t\tfor(Group group: groups) {\n-\t\t\t\ttry {\n-\t\t\t\t\tperunBl.getGroupsManagerBl().addMember(sess, group, member);\n-\t\t\t\t} catch (NotMemberOfParentGroupException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\", ex);\n-\t\t\t\t} catch (GroupNotExistsException e) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+        insertToMemberGroup(sess, member, vo);\n \n-\t\t// Set default membership expiration\n-\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n-\t}\n-\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\tif(specificUserType.equals(SpecificUserType.SERVICE)) candidate.setFirstName(\"(Service)\");\n-\n-\t\t//Set organization only if user in sessione exists (in tests there is no user in session)\n-\t\tif(sess.getPerunPrincipal().getUser() != null) {\n-\t\t\tString userOrganization = AttributesManager.NS_USER_ATTR_DEF + \":organization\";\n-\t\t\tString memberOrganization = AttributesManager.NS_MEMBER_ATTR_DEF + \":organization\";\n-\n-\t\t\tMap<String, String> candidateAttributes =  new HashMap<>();\n-\t\t\tif(candidate.getAttributes() != null) candidateAttributes.putAll(candidate.getAttributes());\n-\n-\t\t\tif(candidateAttributes.get(memberOrganization) == null) {\n-\t\t\t\tAttribute actorUserOrganization;\n-\t\t\t\tString actorUserOrganizationValue;\n-\t\t\t\ttry {\n-\t\t\t\t\tactorUserOrganization = perunBl.getAttributesManagerBl().getAttribute(sess, sess.getPerunPrincipal().getUser(), userOrganization);\n-\t\t\t\t\tactorUserOrganizationValue = (String) actorUserOrganization.getValue();\n-\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\n-\t\t\t\tif(actorUserOrganizationValue != null) {\n-\t\t\t\t\tcandidateAttributes.put(memberOrganization, actorUserOrganizationValue);\n-\t\t\t\t\tcandidate.setAttributes(candidateAttributes);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+        // add member also to all groups in list\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                try {\n+                    perunBl.getGroupsManagerBl().addMember(sess, group, member);\n+                } catch (NotMemberOfParentGroupException ex) {\n+                    throw new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\", ex);\n+                } catch (GroupNotExistsException e) {\n+                    throw new ConsistencyErrorException(e);\n+                }\n+            }\n+        }\n \n-\t\t//create member for service user from candidate\n-\t\tMember member = createMember(sess, vo, specificUserType, candidate, groups, null);\n-\n-\t\t//set specific user owners or sponsors\n-\t\tUser specificUser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tfor(User u: specificUserOwners) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getUsersManagerBl().addSpecificUserOwner(sess, u, specificUser);\n-\t\t\t} catch (RelationExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, User owner, Vo vo, int loa) throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, AlreadyMemberException, WrongReferenceAttributeValueException, WrongAttributeValueException, UserNotExistsException, ExtSourceNotExistsException, LoginNotExistsException {\n-\t\tString loginNamespaceUri = AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + namespace;\n-\t\tboolean passwordPresent = params.get(\"password\") != null;\n-\t\tif(params.get(loginNamespaceUri) == null) {\n-\t\t\tMap<String, String> generatedParams = getPerunBl().getUsersManagerBl().generateAccount(sess, namespace, params);\n-\t\t\tparams.putAll(generatedParams);\n-\t\t} else if (passwordPresent) {\n-\t\t\tgetPerunBl().getUsersManagerBl().reservePassword(sess, params.get(loginNamespaceUri), namespace, params.get(\"password\"));\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"If login for new account is provided, password must be provided also\");\n-\t\t}\n-\t\tIterator<String> iterator = params.keySet().iterator();\n-\t\t// remove non-valid entries from map for Candidate otherwise it would fail to create member\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tString next = iterator.next();\n-\t\t\tif (!next.startsWith(\"urn:perun:user\") && !next.startsWith(\"urn:perun:member\")) {\n-\t\t\t\titerator.remove();\n-\t\t\t}\n-\t\t}\n-\t\tString extSourceLogin = params.get(loginNamespaceUri) + extSourcePostfix;\n-\t\tUserExtSource userExtSource = new UserExtSource(extSource, loa, extSourceLogin);\n-\t\tCandidate candidate = new Candidate(userExtSource, params);\n-\t\tMember member = this.createSpecificMember(sess, vo, candidate, Arrays.asList(owner), SpecificUserType.SPONSORED);\n-\t\tthis.validateMemberAsync(sess, member);\n-\t\tif (passwordPresent) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\tgetPerunBl().getUsersManagerBl().validatePasswordAndSetExtSources(sess, user, params.get(loginNamespaceUri), namespace);\n-\t\t}\n-\t\treturn member;\n-\t}\n+        // Set default membership expiration\n \n-\tpublic Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMemberSync(sess, vo, candidate, null);\n-\t}\n+        return member;\n+    }\n \n-\tpublic Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\tMember member = createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, overwriteUserAttributes);\n+    public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n+    }\n \n-\t\t//Validate synchronously\n-\t\ttry {\n-\t\t\tmember = getPerunBl().getMembersManagerBl().validateMember(sess, member);\n-\t\t} catch (AttributeValueException ex) {\n-\t\t\tlog.info(\"Member can't be validated. He stays in invalid state. Cause: \" + ex);\n-\t\t}\n+    public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        if (specificUserType.equals(SpecificUserType.SERVICE)) {\n+            candidate.setFirstName(\"(Service)\");\n+        }\n \n-\t\treturn member;\n-\t}\n+        //Set organization only if user in sessione exists (in tests there is no user in session)\n+        if (sess.getPerunPrincipal().getUser() != null) {\n+            String userOrganization = AttributesManager.NS_USER_ATTR_DEF + \":organization\";\n+            String memberOrganization = AttributesManager.NS_MEMBER_ATTR_DEF + \":organization\";\n \n-\tpublic Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMemberSync(sess, vo, candidate, groups, null);\n-\t}\n+            Map<String, String> candidateAttributes = new HashMap<>();\n+            if (candidate.getAttributes() != null) {\n+                candidateAttributes.putAll(candidate.getAttributes());\n+            }\n \n-\tpublic Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createSpecificMemberSync(sess, vo, candidate, specificUserOwners, specificUserType, null);\n-\t}\n+            if (candidateAttributes.get(memberOrganization) == null) {\n+                Attribute actorUserOrganization;\n+                String actorUserOrganizationValue;\n+                try {\n+                    actorUserOrganization = perunBl.getAttributesManagerBl().getAttribute(sess, sess.getPerunPrincipal().getUser(), userOrganization);\n+                    actorUserOrganizationValue = (String) actorUserOrganization.getValue();\n+                } catch (WrongAttributeAssignmentException | AttributeNotExistsException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+\n+                if (actorUserOrganizationValue != null) {\n+                    candidateAttributes.put(memberOrganization, actorUserOrganizationValue);\n+                    candidate.setAttributes(candidateAttributes);\n+                }\n+            }\n+        }\n \n-\tpublic Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        //create member for service user from candidate\n+        Member member = createMember(sess, vo, specificUserType, candidate, groups, null);\n \n-\t\tMember member = createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, groups);\n+        //set specific user owners or sponsors\n+        User specificUser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+        for (User u : specificUserOwners) {\n+            try {\n+                getPerunBl().getUsersManagerBl().addSpecificUserOwner(sess, u, specificUser);\n+            } catch (RelationExistsException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+        return member;\n+    }\n \n-\t\t//Validate synchronously\n-\t\ttry {\n-\t\t\tmember = validateMember(sess, member);\n-\t\t} catch (AttributeValueException ex) {\n-\t\t\tlog.info(\"Specific Member can't be validated. He stays in invalid state. Cause: \" + ex);\n-\t\t}\n+    public Member createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, User owner, Vo vo, int loa)\n+            throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, AlreadyMemberException, WrongReferenceAttributeValueException, WrongAttributeValueException,\n+            UserNotExistsException, ExtSourceNotExistsException, LoginNotExistsException {\n+        String loginNamespaceUri = AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + namespace;\n+        boolean passwordPresent = params.get(\"password\") != null;\n+        if (params.get(loginNamespaceUri) == null) {\n+            Map<String, String> generatedParams = getPerunBl().getUsersManagerBl().generateAccount(sess, namespace, params);\n+            params.putAll(generatedParams);\n+        } else if (passwordPresent) {\n+            getPerunBl().getUsersManagerBl().reservePassword(sess, params.get(loginNamespaceUri), namespace, params.get(\"password\"));\n+        } else {\n+            throw new InternalErrorException(\"If login for new account is provided, password must be provided also\");\n+        }\n+        Iterator<String> iterator = params.keySet().iterator();\n+        // remove non-valid entries from map for Candidate otherwise it would fail to create member\n+        while (iterator.hasNext()) {\n+            String next = iterator.next();\n+            if (!next.startsWith(\"urn:perun:user\") && !next.startsWith(\"urn:perun:member\")) {\n+                iterator.remove();\n+            }\n+        }\n+        String extSourceLogin = params.get(loginNamespaceUri) + extSourcePostfix;\n+        UserExtSource userExtSource = new UserExtSource(extSource, loa, extSourceLogin);\n+        Candidate candidate = new Candidate(userExtSource, params);\n+        Member member = this.createSpecificMember(sess, vo, candidate, Arrays.asList(owner), SpecificUserType.SPONSORED);\n+        this.validateMemberAsync(sess, member);\n+        if (passwordPresent) {\n+            User user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+            getPerunBl().getUsersManagerBl().validatePasswordAndSetExtSources(sess, user, params.get(loginNamespaceUri), namespace);\n+        }\n+        return member;\n+    }\n \n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn createMember(sess, vo, candidate, null);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, null);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\t\treturn this.createMember(sess, vo, specificUserType, candidate, null, new ArrayList<String>());\n-\t}\n-\n-\t//MAIN METHOD\n-\tpublic Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\tlog.debug(\"Creating member for VO {} from candidate {}\", vo, candidate);\n-\n-\t\t// Get the user\n-\t\tUser user = null;\n-\n-\t\tif (candidate.getUserExtSources() != null) {\n-\t\t\tfor (UserExtSource ues: candidate.getUserExtSources()) {\n-\t\t\t\t// Check if the extSource exists\n-\t\t\t\tExtSource tmpExtSource = getPerunBl().getExtSourcesManagerBl().checkOrCreateExtSource(sess, ues.getExtSource().getName(),\n-\t\t\t\t\t\tues.getExtSource().getType());\n-\t\t\t\t// Set the extSource ID\n-\t\t\t\tues.getExtSource().setId(tmpExtSource.getId());\n-\t\t\t\ttry {\n-\t\t\t\t\t// Try to find the user by userExtSource\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByExtSourceNameAndExtLogin(sess, ues.getExtSource().getName(), ues.getLogin());\n-\t\t\t\t} catch (UserExtSourceNotExistsException e) {\n-\t\t\t\t\t// This is OK, non-existent userExtSource will be assigned later\n-\t\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\t\t// Ignore, we are only checking if the user exists\n-\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t// Ignore, we are only checking if the user exists\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    public Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createMemberSync(sess, vo, candidate, null);\n+    }\n \n-\t\t// If user hasn't been found, then create him\n-\t\tif (user == null) {\n-\t\t\tuser = new User();\n-\t\t\tuser.setFirstName(candidate.getFirstName());\n-\t\t\tuser.setLastName(candidate.getLastName());\n-\t\t\tuser.setMiddleName(candidate.getMiddleName());\n-\t\t\tuser.setTitleAfter(candidate.getTitleAfter());\n-\t\t\tuser.setTitleBefore(candidate.getTitleBefore());\n-\t\t\tif(specificUserType.equals(specificUserType.SERVICE)) user.setServiceUser(true);\n-\t\t\tif(specificUserType.equals(specificUserType.SPONSORED)) user.setSponsoredUser(true);\n-\t\t\t// Store the user, this must be done in separate transaction\n-\t\t\tuser = getPerunBl().getUsersManagerBl().createUser(sess, user);\n-\n-\t\t\tlog.debug(\"createMember: new user: {}\", user);\n-\t\t}\n+    public Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        Member member = createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, overwriteUserAttributes);\n \n-\t\t// Assign missing userExtSource and update LoA\n-\t\tif (candidate.getUserExtSources() != null) {\n-\t\t\tfor (UserExtSource userExtSource : candidate.getUserExtSources()) {\n-\t\t\t\ttry {\n-\t\t\t\t\tUserExtSource currentUserExtSource = getPerunBl().getUsersManagerBl().getUserExtSourceByExtLogin(sess, userExtSource.getExtSource(), userExtSource.getLogin());\n-\t\t\t\t\t// Update LoA\n-\t\t\t\t\tcurrentUserExtSource.setLoa(userExtSource.getLoa());\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().updateUserExtSource(sess, currentUserExtSource);\n-\t\t\t\t} catch (UserExtSourceNotExistsException e) {\n-\t\t\t\t\t// Create userExtSource\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, userExtSource);\n-\t\t\t\t\t} catch (UserExtSourceExistsException e1) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Adding userExtSource which already exists: \" + userExtSource);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+        //Validate synchronously\n+        try {\n+            member = getPerunBl().getMembersManagerBl().validateMember(sess, member);\n+        } catch (AttributeValueException ex) {\n+            log.info(\"Member can't be validated. He stays in invalid state. Cause: \" + ex);\n+        }\n \n-\t\ttry {\n-\t\t\tMember member = getMemberByUser(sess, vo, user);\n-\t\t\tthrow new AlreadyMemberException(member);\n-\t\t} catch(MemberNotExistsException IGNORE) {\n-\t\t}\n+        return member;\n+    }\n \n-\t\t// Create the member\n-\t\tMember member = getMembersManagerImpl().createMember(sess, vo, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", member);\n-\n-\t\t// Create the member's attributes\n-\t\tList<Attribute> membersAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> usersAttributesToMerge = new ArrayList<>();\n-\t\tList<Attribute> usersAttributesToModify = new ArrayList<>();\n-\t\tif (candidate.getAttributes() != null) {\n-\t\t\tfor (String attributeName: candidate.getAttributes().keySet()) {\n-\t\t\t\tAttributeDefinition attributeDefinition;\n-\t\t\t\ttry {\n-\t\t\t\t\tattributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\t\t\t\t} catch(AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tAttribute attribute = new Attribute(attributeDefinition);\n-\t\t\t\tattribute.setValue(getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), attribute.getType()));\n-\t\t\t\tif (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_DEF) ||\n-\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_OPT)) {\n-\t\t\t\t\t// This is member's attribute\n-\t\t\t\t\tmembersAttributes.add(attribute);\n-\t\t\t\t} else if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_DEF) ||\n-\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_OPT)) {\n-\t\t\t\t\tif(overwriteUserAttributes != null && !overwriteUserAttributes.isEmpty() && overwriteUserAttributes.contains(attribute.getName())) {\n-\t\t\t\t\t\tusersAttributesToModify.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tusersAttributesToMerge.add(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    public Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createMemberSync(sess, vo, candidate, groups, null);\n+    }\n \n-\t\t// Store the attributes\n-\t\ttry {\n-\t\t\t//if empty, skip setting or merging empty arrays of attributes at all\n-\t\t\tif(!membersAttributes.isEmpty()) getPerunBl().getAttributesManagerBl().setAttributes(sess, member, membersAttributes);\n-\t\t\tif(!usersAttributesToMerge.isEmpty()) getPerunBl().getAttributesManagerBl().mergeAttributesValues(sess, user, usersAttributesToMerge);\n-\t\t\tif(!usersAttributesToModify.isEmpty()) getPerunBl().getAttributesManagerBl().setAttributes(sess, user, usersAttributesToModify);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n+    public Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createSpecificMemberSync(sess, vo, candidate, specificUserOwners, specificUserType, null);\n+    }\n \n-\t\t// Set the initial membershipExpiration\n+    public Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n \n-\t\t// Get user LOA\n-\t\tString memberLoa = null;\n-\t\ttry {\n-\t\t\tAttribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n-\t\t\tmemberLoa = (String) loa.getValue();\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// user has no loa defined - if required by VO, it will be stopped in checking method later\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n+        Member member = createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, groups);\n \n-\t\t// check if user can be member\n-\t\tthis.canBeMemberInternal(sess, vo, user, memberLoa, true);\n-\n-\t\t// set initial membership expiration\n-\t\tthis.extendMembership(sess, member);\n-\n-\t\tinsertToMemberGroup(sess, member, vo);\n-\n-\t\t// add member also to all groups in list\n-\t\tif(groups != null && !groups.isEmpty()) {\n-\t\t\tfor(Group group: groups) {\n-\t\t\t\ttry {\n-\t\t\t\t\tperunBl.getGroupsManagerBl().addMember(sess, group, member);\n-\t\t\t\t} catch (NotMemberOfParentGroupException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\", ex);\n-\t\t\t\t} catch (GroupNotExistsException e) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+        //Validate synchronously\n+        try {\n+            member = validateMember(sess, member);\n+        } catch (AttributeValueException ex) {\n+            log.info(\"Specific Member can't be validated. He stays in invalid state. Cause: \" + ex);\n+        }\n \n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, loa, login, candidate, null);\n-\t}\n-\n-\t/*\n-\t * This method with support of LoA finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n-\t * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n-\t */\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\n-\t\t// Create ExtSource object\n-\t\tExtSource extSource = new ExtSource();\n-\t\textSource.setName(extSourceName);\n-\t\textSource.setType(extSourceType);\n-\n-\t\t// Create UserExtSource object\n-\t\tUserExtSource userExtSource = new UserExtSource();\n-\t\tuserExtSource.setLogin(login);\n-\t\tuserExtSource.setExtSource(extSource);\n-\t\tuserExtSource.setLoa(loa);\n-\n-\t\t// Set all above data to the candidate's userExtSource\n-\t\tcandidate.setUserExtSource(userExtSource);\n-\n-\t\treturn this.createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n-\t}\n-\n-\t/*\n-\t * This method finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n-\t * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n-\t */\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\n-\t\t// Create ExtSource object\n-\t\tExtSource extSource = new ExtSource();\n-\t\textSource.setName(extSourceName);\n-\t\textSource.setType(extSourceType);\n-\n-\t\t// Create UserExtSource object\n-\t\tUserExtSource userExtSource = new UserExtSource();\n-\t\tuserExtSource.setLogin(login);\n-\t\tuserExtSource.setExtSource(extSource);\n-\n-\t\t// Set all above data to the candidate's userExtSource\n-\t\tcandidate.setUserExtSource(userExtSource);\n-\n-\t\treturn this.createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\t//First of all get candidate from extSource directly\n-\t\tCandidate candidate = null;\n-\t\ttry {\n-\t\t\tif (extSource instanceof ExtSourceApi) {\n-\t\t\t\t//get first subject, then create candidate\n-\t\t\t\tMap<String, String> subject = ((ExtSourceSimpleApi) extSource).getSubjectByLogin(login);\n-\t\t\t\tcandidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, subject, extSource, login));\n-\t\t\t} else if (extSource instanceof ExtSourceSimpleApi) {\n-\t\t\t\t// get candidates from external source by login\n-\t\t\t\tcandidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, extSource, login));\n-\t\t\t}\n-\t\t} catch (CandidateNotExistsException | SubjectNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"Can't find candidate for login \" + login + \" in extSource \" + extSource, ex);\n-\t\t} catch (ExtSourceUnsupportedOperationException ex) {\n-\t\t\tthrow new InternalErrorException(\"Some operation is not allowed for extSource \" + extSource, ex);\n-\t\t} catch (ExtSourceNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"ExtSource \" + extSource + \" not exists.\");\n-\t\t}\n+        return member;\n+    }\n \n-\t\treturn this.createMember(sess, vo, candidate, groups);\n-\t}\n+    public Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return createMember(sess, vo, candidate, null);\n+    }\n \n-\tpublic Member updateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tMember storedMember;\n-\t\ttry {\n-\t\t\tstoredMember = getMemberById(sess, member.getId());\n-\t\t} catch(MemberNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n+    public Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, null);\n+    }\n \n-\t\tif(storedMember.getUserId() != member.getUserId()) throw new InternalErrorException(\"Can't change userId in object member\");\n-\t\tif(!storedMember.getStatus().equals(member.getStatus())) {\n-\t\t\ttry {\n-\t\t\t\tmember = setStatus(sess, storedMember, member.getStatus());\n-\t\t\t} catch(MemberNotValidYetException ex) {\n-\t\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t\t}\n-\t\t}\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberByUserExtSource(sess, vo, uea);\n-\t}\n-\n-\tpublic Member getMemberByUserExtSources(PerunSession sess, Vo vo, List<UserExtSource> ueas) throws InternalErrorException, MemberNotExistsException {\n-\t\tfor (UserExtSource ues: ueas) {\n-\t\t\ttry {\n-\t\t\t\treturn getMembersManagerImpl().getMemberByUserExtSource(sess, vo, ues);\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// Ignore\n-\t\t\t}\n-\t\t}\n-\t\tthrow new MemberNotExistsException(\"Member with userExtSources \" + ueas + \" doesn't exists.\");\n-\t}\n+    public Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createMember(sess, vo, specificUserType, candidate, null, new ArrayList<String>());\n+    }\n+\n+    //MAIN METHOD\n+    public Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        log.debug(\"Creating member for VO {} from candidate {}\", vo, candidate);\n+\n+        // Get the user\n+        User user = null;\n+\n+        if (candidate.getUserExtSources() != null) {\n+            for (UserExtSource ues : candidate.getUserExtSources()) {\n+                // Check if the extSource exists\n+                ExtSource tmpExtSource = getPerunBl().getExtSourcesManagerBl().checkOrCreateExtSource(sess, ues.getExtSource().getName(),\n+                        ues.getExtSource().getType());\n+                // Set the extSource ID\n+                ues.getExtSource().setId(tmpExtSource.getId());\n+                try {\n+                    // Try to find the user by userExtSource\n+                    user = getPerunBl().getUsersManagerBl().getUserByExtSourceNameAndExtLogin(sess, ues.getExtSource().getName(), ues.getLogin());\n+                } catch (UserExtSourceNotExistsException e) {\n+                    // This is OK, non-existent userExtSource will be assigned later\n+                } catch (UserNotExistsException e) {\n+                    // Ignore, we are only checking if the user exists\n+                } catch (ExtSourceNotExistsException e) {\n+                    // Ignore, we are only checking if the user exists\n+                }\n+            }\n+        }\n \n-\tpublic Member getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberById(sess, id);\n-\t}\n+        // If user hasn't been found, then create him\n+        if (user == null) {\n+            user = new User();\n+            user.setFirstName(candidate.getFirstName());\n+            user.setLastName(candidate.getLastName());\n+            user.setMiddleName(candidate.getMiddleName());\n+            user.setTitleAfter(candidate.getTitleAfter());\n+            user.setTitleBefore(candidate.getTitleBefore());\n+            if (specificUserType.equals(specificUserType.SERVICE)) {\n+                user.setServiceUser(true);\n+            }\n+            if (specificUserType.equals(specificUserType.SPONSORED)) {\n+                user.setSponsoredUser(true);\n+            }\n+            // Store the user, this must be done in separate transaction\n+            user = getPerunBl().getUsersManagerBl().createUser(sess, user);\n \n-\tpublic Member getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId());\n-\t}\n+            log.debug(\"createMember: new user: {}\", user);\n+        }\n \n-\tpublic Member getMemberByUserId(PerunSession sess, Vo vo, int userId) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberByUserId(sess, vo, userId);\n-\t}\n+        // Assign missing userExtSource and update LoA\n+        if (candidate.getUserExtSources() != null) {\n+            for (UserExtSource userExtSource : candidate.getUserExtSources()) {\n+                try {\n+                    UserExtSource currentUserExtSource = getPerunBl().getUsersManagerBl().getUserExtSourceByExtLogin(sess, userExtSource.getExtSource(), userExtSource.getLogin());\n+                    // Update LoA\n+                    currentUserExtSource.setLoa(userExtSource.getLoa());\n+                    getPerunBl().getUsersManagerBl().updateUserExtSource(sess, currentUserExtSource);\n+                } catch (UserExtSourceNotExistsException e) {\n+                    // Create userExtSource\n+                    try {\n+                        getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, userExtSource);\n+                    } catch (UserExtSourceExistsException e1) {\n+                        throw new ConsistencyErrorException(\"Adding userExtSource which already exists: \" + userExtSource);\n+                    }\n+                }\n+            }\n+        }\n \n-\tpublic List<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersByUser(sess, user);\n-\t}\n+        try {\n+            Member member = getMemberByUser(sess, vo, user);\n+            throw new AlreadyMemberException(member);\n+        } catch (MemberNotExistsException IGNORE) {\n+        }\n \n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\treturn getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g);\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n+        // Create the member\n+        Member member = getMembersManagerImpl().createMember(sess, vo, user);\n+        getPerunBl().getAuditer().log(sess, \"{} created.\", member);\n+\n+        // Create the member's attributes\n+        List<Attribute> membersAttributes = new ArrayList<Attribute>();\n+        List<Attribute> usersAttributesToMerge = new ArrayList<>();\n+        List<Attribute> usersAttributesToModify = new ArrayList<>();\n+        if (candidate.getAttributes() != null) {\n+            for (String attributeName : candidate.getAttributes().keySet()) {\n+                AttributeDefinition attributeDefinition;\n+                try {\n+                    attributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+                } catch (AttributeNotExistsException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+                Attribute attribute = new Attribute(attributeDefinition);\n+                attribute.setValue(getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), attribute.getType()));\n+                if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_DEF) ||\n+                        getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_OPT)) {\n+                    // This is member's attribute\n+                    membersAttributes.add(attribute);\n+                } else if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_DEF) ||\n+                        getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_OPT)) {\n+                    if (overwriteUserAttributes != null && !overwriteUserAttributes.isEmpty() && overwriteUserAttributes.contains(attribute.getName())) {\n+                        usersAttributesToModify.add(attribute);\n+                    } else {\n+                        usersAttributesToMerge.add(attribute);\n+                    }\n+                }\n+            }\n+        }\n \n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\treturn getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g, status);\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic RichMember getRichMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.add(member);\n-\t\treturn this.convertMembersToRichMembers(sess, members).get(0);\n-\t}\n-\n-\tpublic RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.add(member);\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<RichMember> richMembersWithAttributes =  this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n-\t\treturn richMembersWithAttributes.get(0);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n-\t\tfor(String atrrName: attrsNames) {\n-\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n-\t\t\tattrsDef.add(attrDef);\n-\t\t}\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tif(attrsNames == null || attrsNames.isEmpty()) {\n-\t\t\treturn this.getRichMembersWithAttributes(sess, vo);\n-\t\t} else {\n-\t\t\treturn this.getRichMembersWithAttributesByNames(sess, vo, attrsNames);\n-\t\t}\n-\t}\n+        // Store the attributes\n+        try {\n+            //if empty, skip setting or merging empty arrays of attributes at all\n+            if (!membersAttributes.isEmpty()) {\n+                getPerunBl().getAttributesManagerBl().setAttributes(sess, member, membersAttributes);\n+            }\n+            if (!usersAttributesToMerge.isEmpty()) {\n+                getPerunBl().getAttributesManagerBl().mergeAttributesValues(sess, user, usersAttributesToMerge);\n+            }\n+            if (!usersAttributesToModify.isEmpty()) {\n+                getPerunBl().getAttributesManagerBl().setAttributes(sess, user, usersAttributesToModify);\n+            }\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, vo, attrsNames), allowedStatuses);\n-\t}\n+        // Set the initial membershipExpiration\n+\n+        // Get user LOA\n+        String memberLoa = null;\n+        try {\n+            Attribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n+            memberLoa = (String) loa.getValue();\n+        } catch (AttributeNotExistsException e) {\n+            // user has no loa defined - if required by VO, it will be stopped in checking method later\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\tif(lookingInParentGroup) group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n+        // check if user can be member\n+        this.canBeMemberInternal(sess, vo, user, memberLoa, true);\n \n-\t\tif(attrsNames == null || attrsNames.isEmpty()) {\n-\t\t\treturn this.convertMembersToRichMembersWithAttributes(sess, getRichMembers(sess, group));\n-\t\t} else {\n-\t\t\treturn this.getRichMembersWithAttributesByNames(sess, group, attrsNames);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), allowedStatuses);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<RichMember> richMembersWithAttributesFromVo = this.findRichMembersWithAttributesInVo(sess, vo, searchString);\n-\t\treturn this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromVo, attrsNames);\n-\t}\n-\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<RichMember> richMembersWithAttributes = this.findRichMembersWithAttributes(sess, searchString);\n-\t\treturn this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributes, attrsNames);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, vo, attrsNames, searchString), allowedStatuses);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, attrsNames, searchString), allowedStatuses);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\tif(lookingInParentGroup) group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n-\t\tList<RichMember> richMembersWithAttributesFromGroup = this.findRichMembersWithAttributesInGroup(sess, group, searchString);\n-\t\treturn this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromGroup, attrsNames);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup), allowedStatuses);\n-\t}\n-\n-\t/**\n-\t * Return list of RichMembers with allowed statuses contains in list of allowedStatuses.\n-\t * If allowedStatuses is empty or null, get richMembers with all statuses.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @param allowedStatuses\n-\t * @return list of allowed richMembers\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate List<RichMember> getOnlyRichMembersWithAllowedStatuses(PerunSession sess, List<RichMember> richMembers, List<String> allowedStatuses) throws InternalErrorException {\n-\t\tList<RichMember> allowedRichMembers = new ArrayList<RichMember>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return allowedRichMembers;\n-\t\tif(allowedStatuses == null || allowedStatuses.isEmpty()) return richMembers;\n-\n-\t\t//Covert statuses to objects Status\n-\t\tList<Status> statuses = new ArrayList<Status>();\n-\t\tfor(String status: allowedStatuses) {\n-\t\t\tstatuses.add(Status.valueOf(status));\n-\t\t}\n+        // set initial membership expiration\n+        this.extendMembership(sess, member);\n \n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\tif(statuses.contains(rm.getStatus())) allowedRichMembers.add(rm);\n-\t\t}\n+        insertToMemberGroup(sess, member, vo);\n \n-\t\treturn allowedRichMembers;\n-\t}\n-\n-\t/**\n-\t * From list of richMembers with attributes get all these richMembers only with specificied attributes by attrsNames.\n-\t * If attrsNames is empty or null, return back all richMembers with all already defined attributes.\n-\t *\n-\t * @param sess\n-\t * @param richMembersWithAttributes\n-\t * @param attrsNames\n-\t * @return list of RichMembers with already specified attributes.\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tprivate List<RichMember> getRichMembersOnlyWithSpecificAttrNames(PerunSession sess, List<RichMember> richMembersWithAttributes, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tif(richMembersWithAttributes == null || richMembersWithAttributes.isEmpty()) return new ArrayList<RichMember>();\n-\t\tif(attrsNames == null || attrsNames.isEmpty()) return richMembersWithAttributes;\n-\t\tfor(RichMember rm: richMembersWithAttributes) {\n-\t\t\tfor(Iterator<Attribute> userAttributeIter = rm.getUserAttributes().iterator(); userAttributeIter.hasNext();) {\n-\t\t\t\tAttribute attr = userAttributeIter.next();\n-\t\t\t\tif(!attrsNames.contains(attr.getName())) userAttributeIter.remove();\n-\t\t\t}\n-\t\t\tfor(Iterator<Attribute> memberAttributeIter = rm.getMemberAttributes().iterator(); memberAttributeIter.hasNext();) {\n-\t\t\t\tAttribute attr = memberAttributeIter.next();\n-\t\t\t\tif(!attrsNames.contains(attr.getName())) memberAttributeIter.remove();\n-\t\t\t}\n-\t\t}\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n-\t\tfor(String atrrName: attrsNames) {\n-\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n-\t\t\tattrsDef.add(attrDef);\n-\t\t}\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tList<Member> members = this.getMembers(sess, vo);\n-\t\treturn this.convertMembersToRichMembers(sess, members);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\treturn richMembers;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\tList<Member> members = this.getMembers(sess, vo, status);\n-\t\treturn this.convertMembersToRichMembers(sess, members);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = this.getRichMembers(sess, vo);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = this.getRichMembers(sess, vo, status);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = this.getRichMembers(sess, group);\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.convertMembersToRichMembersWithAttributes(sess, richMembers), allowedStatuses);\n-\t}\n-\n-\n-\tpublic List<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = new ArrayList<RichMember>();\n-\n-\t\tfor (Member member: members) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n-\n-\t\t\tRichMember richMember = new RichMember(user, member, userExtSources);\n-\t\t\trichMembers.add(richMember);\n-\t\t}\n+        // add member also to all groups in list\n+        if (groups != null && !groups.isEmpty()) {\n+            for (Group group : groups) {\n+                try {\n+                    perunBl.getGroupsManagerBl().addMember(sess, group, member);\n+                } catch (NotMemberOfParentGroupException ex) {\n+                    throw new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\", ex);\n+                } catch (GroupNotExistsException e) {\n+                    throw new ConsistencyErrorException(e);\n+                }\n+            }\n+        }\n \n-\t\treturn richMembers;\n-\t}\n+        return member;\n+    }\n \n-\tpublic List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers)  throws InternalErrorException {\n-\t\tfor (RichMember richMember: richMembers) {\n-\t\t\tList<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser());\n-\t\t\tList<Attribute> memberAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember);\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createMember(sess, vo, extSourceName, extSourceType, loa, login, candidate, null);\n+    }\n \n-\t\t\trichMember.setUserAttributes(userAttributes);\n-\t\t\trichMember.setMemberAttributes(memberAttributes);\n-\t\t}\n+    /*\n+     * This method with support of LoA finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n+     * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n+     */\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n \n-\t\treturn richMembers;\n-\t}\n+        // Create ExtSource object\n+        ExtSource extSource = new ExtSource();\n+        extSource.setName(extSourceName);\n+        extSource.setType(extSourceType);\n \n-\tpublic List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef)  throws InternalErrorException {\n-\t\tList<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n-\t\tList<AttributeDefinition> membersAttributesDef = new ArrayList<AttributeDefinition>();\n+        // Create UserExtSource object\n+        UserExtSource userExtSource = new UserExtSource();\n+        userExtSource.setLogin(login);\n+        userExtSource.setExtSource(extSource);\n+        userExtSource.setLoa(loa);\n \n-\t\tfor(AttributeDefinition attrd: attrsDef) {\n-\t\t\tif(attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) usersAttributesDef.add(attrd);\n-\t\t\telse if(attrd.getName().startsWith(AttributesManager.NS_MEMBER_ATTR)) membersAttributesDef.add(attrd);\n-\t\t}\n+        // Set all above data to the candidate's userExtSource\n+        candidate.setUserExtSource(userExtSource);\n \n-\t\tfor (RichMember richMember: richMembers) {\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n+        return this.createMember(sess, vo, candidate, groups);\n+    }\n \n-\t\t\tList<String> userAttrNames = new ArrayList<String>();\n-\t\t\tfor(AttributeDefinition ad: usersAttributesDef) {\n-\t\t\t\tuserAttrNames.add(ad.getName());\n-\t\t\t}\n-\t\t\tuserAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser(), userAttrNames));\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        return this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n+    }\n \n-\t\t\tList<String> memberAttrNames = new ArrayList<String>();\n-\t\t\tfor(AttributeDefinition ad: membersAttributesDef) {\n-\t\t\t\tmemberAttrNames.add(ad.getName());\n-\t\t\t}\n-\t\t\tmemberAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember, memberAttrNames));\n+    /*\n+     * This method finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n+     * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n+     */\n+    public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n \n-\t\t\trichMember.setUserAttributes(userAttributes);\n-\t\t\trichMember.setMemberAttributes(memberAttributes);\n-\t\t}\n+        // Create ExtSource object\n+        ExtSource extSource = new ExtSource();\n+        extSource.setName(extSourceName);\n+        extSource.setType(extSourceType);\n \n-\t\treturn richMembers;\n-\t}\n+        // Create UserExtSource object\n+        UserExtSource userExtSource = new UserExtSource();\n+        userExtSource.setLogin(login);\n+        userExtSource.setExtSource(extSource);\n \n-\tpublic int getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersCount(sess, vo);\n-\t}\n+        // Set all above data to the candidate's userExtSource\n+        candidate.setUserExtSource(userExtSource);\n \n-\tpublic int getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersCount(sess, vo, status);\n-\t}\n+        return this.createMember(sess, vo, candidate, groups);\n+    }\n \n-\tpublic Vo getMemberVo(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn getPerunBl().getVosManagerBl().getVoById(sess, getMembersManagerImpl().getMemberVoId(sess, member));\n-\t\t} catch (VoNotExistsException e1) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member is under nonexistent VO\", e1);\n-\t\t}\n-\t}\n+    public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+        //First of all get candidate from extSource directly\n+        Candidate candidate = null;\n+        try {\n+            if (extSource instanceof ExtSourceApi) {\n+                //get first subject, then create candidate\n+                Map<String, String> subject = ((ExtSourceSimpleApi) extSource).getSubjectByLogin(login);\n+                candidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, subject, extSource, login));\n+            } else if (extSource instanceof ExtSourceSimpleApi) {\n+                // get candidates from external source by login\n+                candidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, extSource, login));\n+            }\n+        } catch (CandidateNotExistsException | SubjectNotExistsException ex) {\n+            throw new InternalErrorException(\"Can't find candidate for login \" + login + \" in extSource \" + extSource, ex);\n+        } catch (ExtSourceUnsupportedOperationException ex) {\n+            throw new InternalErrorException(\"Some operation is not allowed for extSource \" + extSource, ex);\n+        } catch (ExtSourceNotExistsException ex) {\n+            throw new InternalErrorException(\"ExtSource \" + extSource + \" not exists.\");\n+        }\n \n-\tpublic List<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+        return this.createMember(sess, vo, candidate, groups);\n+    }\n \n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n+    public Member updateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        Member storedMember;\n+        try {\n+            storedMember = getMemberById(sess, member.getId());\n+        } catch (MemberNotExistsException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n \n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\tmembers.addAll(getMembersManagerImpl().getMembersByUser(sess, user));\n-\t\t}\n+        if (storedMember.getUserId() != member.getUserId()) {\n+            throw new InternalErrorException(\"Can't change userId in object member\");\n+        }\n+        if (!storedMember.getStatus().equals(member.getStatus())) {\n+            try {\n+                member = setStatus(sess, storedMember, member.getStatus());\n+            } catch (MemberNotValidYetException ex) {\n+                throw new WrongAttributeValueException(ex);\n+            }\n+        }\n+        return member;\n+    }\n \n-\t\treturn members;\n-\t}\n+    public Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws InternalErrorException, MemberNotExistsException {\n+        return getMembersManagerImpl().getMemberByUserExtSource(sess, vo, uea);\n+    }\n \n-\tpublic List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+    public Member getMemberByUserExtSources(PerunSession sess, Vo vo, List<UserExtSource> ueas) throws InternalErrorException, MemberNotExistsException {\n+        for (UserExtSource ues : ueas) {\n+            try {\n+                return getMembersManagerImpl().getMemberByUserExtSource(sess, vo, ues);\n+            } catch (MemberNotExistsException e) {\n+                // Ignore\n+            }\n+        }\n+        throw new MemberNotExistsException(\"Member with userExtSources \" + ueas + \" doesn't exists.\");\n+    }\n \n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n+    public Member getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException {\n+        return getMembersManagerImpl().getMemberById(sess, id);\n+    }\n \n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\ttry {\n-\t\t\t\tmembers.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// User is not member of this VO\n-\t\t\t}\n-\t\t}\n+    public Member getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException {\n+        return getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId());\n+    }\n \n-\t\treturn this.setAllMembersSameType(members, MembershipType.DIRECT);\n-\t}\n+    public Member getMemberByUserId(PerunSession sess, Vo vo, int userId) throws InternalErrorException, MemberNotExistsException {\n+        return getMembersManagerImpl().getMemberByUserId(sess, vo, userId);\n+    }\n \n-\tpublic List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+    public List<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException {\n+        return getMembersManagerImpl().getMembersByUser(sess, user);\n+    }\n \n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+    public List<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+            return getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g);\n+        } catch (GroupNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n \n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\ttry {\n-\t\t\t\tmembers.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// User is not member of this VO\n-\t\t\t}\n-\t\t}\n+    public List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+        try {\n+            Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+            return getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g, status);\n+        } catch (GroupNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n \n-\t\treturn this.setAllMembersSameType(members, MembershipType.DIRECT);\n-\t}\n+    public RichMember getRichMember(PerunSession sess, Member member) throws InternalErrorException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.add(member);\n+        return this.convertMembersToRichMembers(sess, members).get(0);\n+    }\n \n-\tpublic List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException{\n+    public RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.add(member);\n+        List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+        List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n+        return richMembersWithAttributes.get(0);\n+    }\n \n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\t\tList<Member> allGroupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tList<Member> allFoundMembers = new ArrayList<Member>();\n-\t\tfor(User user: users){\n-\t\t\tallFoundMembers.addAll(getMembersByUser(sess, user));\n-\t\t}\n-\t\tallGroupMembers.retainAll(allFoundMembers);\n-\t\treturn allGroupMembers;\n-\t}\n-\n-\tpublic List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException{\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\t\tList<Member> allGroupMembers = new ArrayList<Member>();\n-\t\tif(group.getParentGroupId() == null) {\n-\t\t\tVo vo = null;\n-\t\t\ttry {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(group + \" is not in \" + vo);\n-\t\t\t}\n-\t\t\tallGroupMembers = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t} else {\n-\t\t\tallGroupMembers = getPerunBl().getGroupsManagerBl().getParentGroupMembers(sess, group);\n-\t\t}\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n+        List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+        List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+        return richMembersWithAttributes;\n+    }\n \n-\t\tList<Member> allFoundMembers = new ArrayList<Member>();\n-\t\tfor(User user: users){\n-\t\t\tallFoundMembers.addAll(getMembersByUser(sess, user));\n-\t\t}\n-\t\tallGroupMembers.retainAll(allFoundMembers);\n-\t\treturn allGroupMembers;\n-\t}\n+    public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n+        List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+        List<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n+        for (String atrrName : attrsNames) {\n+            AttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n+            attrsDef.add(attrDef);\n+        }\n+        List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+        return richMembersWithAttributes;\n+    }\n \n-\tpublic List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException{\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+        if (attrsNames == null || attrsNames.isEmpty()) {\n+            return this.getRichMembersWithAttributes(sess, vo);\n+        } else {\n+            return this.getRichMembersWithAttributesByNames(sess, vo, attrsNames);\n+        }\n+    }\n \n-\t\tList<Member> members = findMembersInGroup(sess, group, searchString);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n-\t}\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException {\n+        return getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, vo, attrsNames), allowedStatuses);\n+    }\n \n-\tpublic List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException{\n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+        if (lookingInParentGroup) {\n+            group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n+        }\n \n-\t\tList<Member> members = findMembersInParentGroup(sess, group, searchString);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n-\t}\n+        if (attrsNames == null || attrsNames.isEmpty()) {\n+            return this.convertMembersToRichMembersWithAttributes(sess, getRichMembers(sess, group));\n+        } else {\n+            return this.getRichMembersWithAttributesByNames(sess, group, attrsNames);\n+        }\n+    }\n \n+    public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+        return getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), allowedStatuses);\n+    }\n \n-\tpublic List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+        List<RichMember> richMembersWithAttributesFromVo = this.findRichMembersWithAttributesInVo(sess, vo, searchString);\n+        return this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromVo, attrsNames);\n+    }\n \n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n \n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\ttry {\n-\t\t\t\tmembers.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// User is not member of this VO\n-\t\t\t}\n-\t\t}\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+        List<RichMember> richMembersWithAttributes = this.findRichMembersWithAttributes(sess, searchString);\n+        return this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributes, attrsNames);\n+    }\n \n-\t\treturn this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n-\t}\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+        return getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, vo, attrsNames, searchString), allowedStatuses);\n+    }\n \n-\t@Override\n-\tpublic List<RichMember> findRichMembers(PerunSession sess, String searchString) throws InternalErrorException {\n+    @Override\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+        return getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, attrsNames, searchString), allowedStatuses);\n+    }\n \n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+        if (lookingInParentGroup) {\n+            group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n+        }\n+        List<RichMember> richMembersWithAttributesFromGroup = this.findRichMembersWithAttributesInGroup(sess, group, searchString);\n+        return this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromGroup, attrsNames);\n+    }\n \n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\tmembers.addAll(getMembersByUser(sess, user));\n-\t\t}\n+    public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+        return getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup), allowedStatuses);\n+    }\n \n-\t\treturn this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n-\t}\n-\n-\tpublic List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\n-\t\tList<RichMember> list = findRichMembersInVo(sess, vo, searchString);\n-\t\treturn convertMembersToRichMembersWithAttributes(sess, list);\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tList<RichMember> list = findRichMembers(sess, searchString);\n-\t\treturn convertMembersToRichMembersWithAttributes(sess, list);\n-\t}\n-\n-\tpublic void checkMemberExists(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException {\n-\t\tgetMembersManagerImpl().checkMemberExists(sess, member);\n-\t}\n-\n-\tpublic Member setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n-\t\tswitch(status) {\n-\t\t\tcase VALID:\n-\t\t\t\treturn validateMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase INVALID:\n-\t\t\t\treturn invalidateMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase SUSPENDED:\n-\t\t\t\treturn suspendMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase EXPIRED:\n-\t\t\t\treturn expireMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase DISABLED:\n-\t\t\t\treturn disableMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tdefault:\n-\t\t\t\tthrow new InternalErrorException(\"Unknown status:\" + status);\n-\t\t}\n-\t}\n+    /**\n+     * Return list of RichMembers with allowed statuses contains in list of allowedStatuses.\n+     * If allowedStatuses is empty or null, get richMembers with all statuses.\n+     *\n+     * @param sess\n+     * @param richMembers\n+     * @param allowedStatuses\n+     * @return list of allowed richMembers\n+     * @throws InternalErrorException\n+     */\n+    private List<RichMember> getOnlyRichMembersWithAllowedStatuses(PerunSession sess, List<RichMember> richMembers, List<String> allowedStatuses) throws InternalErrorException {\n+        List<RichMember> allowedRichMembers = new ArrayList<RichMember>();\n+        if (richMembers == null || richMembers.isEmpty()) {\n+            return allowedRichMembers;\n+        }\n+        if (allowedStatuses == null || allowedStatuses.isEmpty()) {\n+            return richMembers;\n+        }\n \n-\tpublic Member validateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif(this.haveStatus(sess, member, Status.VALID)) {\n-\t\t\tlog.debug(\"Trying to validate member who is already valid. \" + member);\n-\t\t\treturn member;\n-\t\t}\n+        //Covert statuses to objects Status\n+        List<Status> statuses = new ArrayList<Status>();\n+        for (String status : allowedStatuses) {\n+            statuses.add(Status.valueOf(status));\n+        }\n \n-\t\tStatus oldStatus = member.getStatus();\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.VALID);\n-\t\tmember.setStatus(Status.VALID);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} validated.\", member);\n-\t\tif(oldStatus.equals(Status.INVALID)) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().doTheMagic(sess, member);\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n+        for (RichMember rm : richMembers) {\n+            if (statuses.contains(rm.getStatus())) {\n+                allowedRichMembers.add(rm);\n+            }\n+        }\n \n-\t\treturn member;\n-\t}\n-\n-\tpublic Member validateMemberAsync(final PerunSession sess, final Member member) throws InternalErrorException {\n-\t\tnew Thread(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tThread.sleep(5000);\n-\t\t\t\t} catch (InterruptedException e) {\n-\t\t\t\t\t// TODO Auto-generated catch block\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t\tStatus oldStatus = Status.getStatus(member.getStatus().getCode());\n-\n-\t\t\t\ttry {\n-\t\t\t\t\t((PerunSessionImpl) sess).getPerunBl().getMembersManagerBl().validateMember(sess, member);\n-\t\t\t\t} catch(Exception ex) {\n-\t\t\t\t\tlog.info(\"validateMemberAsync failed. Cause: {}\", ex);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getAuditer().log(sess, \"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n-\t\t\t\t\t\tlog.info(\"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n-\t\t\t\t\t} catch(InternalErrorException internalError) {\n-\t\t\t\t\t\tlog.error(\"Store message to auditer failed. message: Validation of {} failed. He stays in {} state. cause: {}\", new Object[] {member, oldStatus, internalError});\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}, \"validateMemberAsync\").start();\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member invalidateMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) {\n-\t\t\tlog.debug(\"Trying to invalidate member who is already invalid. \" + member);\n-\t\t\treturn member;\n-\t\t}\n+        return allowedRichMembers;\n+    }\n \n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.INVALID);\n-\t\tmember.setStatus(Status.INVALID);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} invalidated.\", member);\n-\t\treturn member;\n-\t}\n+    /**\n+     * From list of richMembers with attributes get all these richMembers only with specificied attributes by attrsNames.\n+     * If attrsNames is empty or null, return back all richMembers with all already defined attributes.\n+     *\n+     * @param sess\n+     * @param richMembersWithAttributes\n+     * @param attrsNames\n+     * @return list of RichMembers with already specified attributes.\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     */\n+    private List<RichMember> getRichMembersOnlyWithSpecificAttrNames(PerunSession sess, List<RichMember> richMembersWithAttributes, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+        if (richMembersWithAttributes == null || richMembersWithAttributes.isEmpty()) {\n+            return new ArrayList<RichMember>();\n+        }\n+        if (attrsNames == null || attrsNames.isEmpty()) {\n+            return richMembersWithAttributes;\n+        }\n+        for (RichMember rm : richMembersWithAttributes) {\n+            for (Iterator<Attribute> userAttributeIter = rm.getUserAttributes().iterator(); userAttributeIter.hasNext(); ) {\n+                Attribute attr = userAttributeIter.next();\n+                if (!attrsNames.contains(attr.getName())) {\n+                    userAttributeIter.remove();\n+                }\n+            }\n+            for (Iterator<Attribute> memberAttributeIter = rm.getMemberAttributes().iterator(); memberAttributeIter.hasNext(); ) {\n+                Attribute attr = memberAttributeIter.next();\n+                if (!attrsNames.contains(attr.getName())) {\n+                    memberAttributeIter.remove();\n+                }\n+            }\n+        }\n+        return richMembersWithAttributes;\n+    }\n \n-\tpublic Member suspendMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n-\t\tif(this.haveStatus(sess, member, Status.SUSPENDED)) {\n-\t\t\tlog.warn(\"Trying to suspend member who is already suspended. Suspend operation will be procesed anyway (to be shure).\" + member);\n-\t\t}\n+    public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n+        List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+        List<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n+        for (String atrrName : attrsNames) {\n+            AttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n+            attrsDef.add(attrDef);\n+        }\n+        List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+        return richMembersWithAttributes;\n+    }\n \n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.SUSPENDED);\n-\t\tmember.setStatus(Status.SUSPENDED);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} suspended #{}.\", member, Auditer.engineForceKeyword);\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member expireMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n-\t\tif(this.haveStatus(sess, member, Status.EXPIRED)) {\n-\t\t\tlog.debug(\"Trying to set member expired but he's already expired. \" + member);\n-\t\t\treturn member;\n-\t\t}\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n+        List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+        List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+        return richMembersWithAttributes;\n+    }\n \n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.EXPIRED);\n-\t\tmember.setStatus(Status.EXPIRED);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} expired.\", member);\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member disableMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n-\t\tif(this.haveStatus(sess, member, Status.DISABLED)) {\n-\t\t\tlog.debug(\"Trying to disable member who is already disabled. \" + member);\n-\t\t\treturn member;\n-\t\t}\n+    public List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n+        List<Member> members = this.getMembers(sess, vo);\n+        return this.convertMembersToRichMembers(sess, members);\n+    }\n \n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.DISABLED);\n-\t\tmember.setStatus(Status.DISABLED);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} disabled.\", member);\n-\t\treturn member;\n-\t}\n+    public List<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException {\n+        List<Member> members = new ArrayList<Member>();\n+        members.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n+        List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+        return richMembers;\n+    }\n \n-\tpublic void insertToMemberGroup(PerunSession sess, Member member, Vo vo) throws InternalErrorException, AlreadyMemberException, GroupOperationsException {\n-\t\t// Insert member into the members group\n-\t\ttry {\n-\t\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\tgetPerunBl().getGroupsManagerBl().addMemberToMembersGroup(sess, g, member);\n-\t\t} catch (NotMemberOfParentGroupException ex) {\n-\t\t\t//members group is top level -> this should not happen\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeValueException e) {\n-\t\t\tthrow new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n-\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n-\t\t}\n-\t}\n+    public List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+        List<Member> members = this.getMembers(sess, vo, status);\n+        return this.convertMembersToRichMembers(sess, members);\n+    }\n \n-\tpublic List<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status) throws InternalErrorException {\n-\t\tIterator<Member> iterator =  members.iterator();\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tMember member = iterator.next();\n-\t\t\tif(!haveStatus(sess, member, status)) iterator.remove();\n-\t\t}\n-\t\treturn members;\n-\t}\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n+        List<RichMember> richMembers = this.getRichMembers(sess, vo);\n+        return this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n+    }\n \n-\tpublic List<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersByUsersIds(sess, usersIds, vo);\n-\t}\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+        List<RichMember> richMembers = this.getRichMembers(sess, vo, status);\n+        return this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n+    }\n \n-\tpublic List<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersByUsers(sess, users, vo);\n-\t}\n+    public List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException {\n+        List<RichMember> richMembers = this.getRichMembers(sess, group);\n+        return getOnlyRichMembersWithAllowedStatuses(sess, this.convertMembersToRichMembersWithAttributes(sess, richMembers), allowedStatuses);\n+    }\n \n-\tpublic boolean haveStatus(PerunSession sess, Member member, Status status) {\n-\t\treturn member.getStatus().equals(status);\n-\t}\n \n-\tpublic void extendMembership(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n-\t\tthis.manageMembershipExpiration(sess, member, true, true);\n-\t}\n+    public List<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members) throws InternalErrorException {\n+        List<RichMember> richMembers = new ArrayList<RichMember>();\n \n-\tpublic boolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tPair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n-\t\t\treturn ret.getLeft();\n-\t\t} catch (ExtendMembershipException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n-\t\tPair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, true);\n-\t\treturn ret.getLeft();\n-\t}\n-\n-\tpublic Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, ExtendMembershipException {\n-\t  // Check if the VO has set membershipExpirationRules attribute\n-    LinkedHashMap<String, String> membershipExpirationRules;\n-\n-    Attribute membershipExpirationRulesAttribute = null;\n-    try {\n-      membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n-      membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n-      // If attribute was not filled, then silently exit with null\n-      if (membershipExpirationRules == null) return null;\n-    } catch (AttributeNotExistsException e) {\n-      // No rules set, so leave it as it is\n-      return null;\n-    } catch (WrongAttributeAssignmentException e) {\n-      throw new InternalErrorException(\"Shouldn't happen.\");\n-    }\n-\n-    // Which LOA we won't extend? This is applicable only for members who have already set expiration from the previous period\n-    if (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null) {\n-      String[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n-\n-      for (String doNotExtendLoa : doNotExtendLoas) {\n-        if (doNotExtendLoa.equals(loa)) {\n-          // LOA provided is not allowed for extension\n-          throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n-                \"Provided LoA \" + loa + \" doesn't have required level for VO id \" + vo.getId() + \".\");\n-        }\n-      }\n-    }\n-\n-    Calendar calendar = Calendar.getInstance();\n-\n-    String period = null;\n-    // Default extension\n-    if (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n-      period = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n-    }\n-\n-    // Do we extend particular LoA? Attribute syntax LoA|[period][.]\n-    if (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n-      // Which period\n-      String[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n-      String membershipLoa = membershipPeriodLoa[0];\n-      String periodLoa = membershipPeriodLoa[1];\n-      // Does the user have this LoA?\n-      if (membershipLoa.equals(loa)) {\n-        period = periodLoa;\n-      }\n-    }\n-\n-    // Do we extend for x months or for static date?\n-    if (period != null) {\n-      if (period.startsWith(\"+\")) {\n-        // By default do not add nothing\n-        int amount = 0;\n-        int field;\n+        for (Member member : members) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n \n-        // We will add days/months/years\n-        Pattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n-        Matcher m = p.matcher(period);\n-        if (m.matches()) {\n-          String countString = m.group(1);\n-          amount = Integer.valueOf(countString);\n+            RichMember richMember = new RichMember(user, member, userExtSources);\n+            richMembers.add(richMember);\n+        }\n \n-          String dmyString = m.group(2);\n-          if (dmyString.equals(\"d\")) {\n-            field = Calendar.DAY_OF_YEAR;\n-          } else if (dmyString.equals(\"m\")) {\n-            field = Calendar.MONTH;\n-          } else if (dmyString.equals(\"y\")) {\n-            field = Calendar.YEAR;\n-          } else {\n-            throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-          }\n-        } else {\n-          throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-        }\n-\n-        // Add days/months/years\n-        calendar.add(field, amount);\n-      } else {\n-        // We will extend to particular date\n-\n-        // Parse date\n-        Pattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n-        Matcher m = p.matcher(period);\n-        if (m.matches()) {\n-          int day = Integer.valueOf(m.group(1));\n-          int month = Integer.valueOf(m.group(2));\n-\n-          // Get current year\n-          int year = calendar.get(Calendar.YEAR);\n-\n-          // We must detect if the extension date is in current year or in a next year\n-          boolean extensionInNextYear;\n-          Calendar extensionCalendar = Calendar.getInstance();\n-          extensionCalendar.set(year, month-1, day);\n-          Calendar today = Calendar.getInstance();\n-          if (extensionCalendar.before(today)) {\n-            // Extension date is in a next year\n-            extensionInNextYear = true;\n-          } else {\n-            // Extension is in the current year\n-            extensionInNextYear = false;\n-          }\n-\n-          // Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n-          calendar.set(year, month-1, day); // month is 0-based\n-          if (extensionInNextYear) {\n-            calendar.add(Calendar.YEAR, 1);\n-          }\n-\n-          // ***** GRACE PERIOD *****\n-          // Is there a grace period?\n-          if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n-            String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n-            // If the extension is requested in period-gracePeriod then extend to next period\n-\n-            // Get the value of the grace period\n-            p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n-            m = p.matcher(gracePeriod);\n-            if (m.matches()) {\n-              String countString = m.group(1);\n-              int amount = Integer.valueOf(countString);\n-\n-              // Set the gracePeriodCalendar to the extension date\n-              Calendar gracePeriodCalendar = Calendar.getInstance();\n-              gracePeriodCalendar.set(year, month-1, day);\n-              if (extensionInNextYear) {\n-                gracePeriodCalendar.add(Calendar.YEAR, 1);\n-              }\n-\n-              int field;\n-              String dmyString = m.group(2);\n-              if (dmyString.equals(\"d\")) {\n-                field = Calendar.DAY_OF_YEAR;\n-              } else if (dmyString.equals(\"m\")) {\n-                field = Calendar.MONTH;\n-              } else if (dmyString.equals(\"y\")) {\n-                field = Calendar.YEAR;\n-              } else {\n-                throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-              }\n-              // subtracts period definition, e.g. 3m\n-              gracePeriodCalendar.add(field, -amount);\n-\n-              // Check if we are in grace period\n-              if (gracePeriodCalendar.before(Calendar.getInstance())) {\n-                // We are in grace period, so extend to the next period\n-                calendar.add(Calendar.YEAR, 1);\n-              }\n+        return richMembers;\n+    }\n+\n+    public List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers) throws InternalErrorException {\n+        for (RichMember richMember : richMembers) {\n+            List<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser());\n+            List<Attribute> memberAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember);\n+\n+            richMember.setUserAttributes(userAttributes);\n+            richMember.setMemberAttributes(memberAttributes);\n+        }\n+\n+        return richMembers;\n+    }\n+\n+    public List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+        List<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n+        List<AttributeDefinition> membersAttributesDef = new ArrayList<AttributeDefinition>();\n+\n+        for (AttributeDefinition attrd : attrsDef) {\n+            if (attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) {\n+                usersAttributesDef.add(attrd);\n+            } else if (attrd.getName().startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+                membersAttributesDef.add(attrd);\n+            }\n+        }\n+\n+        for (RichMember richMember : richMembers) {\n+            List<Attribute> userAttributes = new ArrayList<Attribute>();\n+            List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+\n+            List<String> userAttrNames = new ArrayList<String>();\n+            for (AttributeDefinition ad : usersAttributesDef) {\n+                userAttrNames.add(ad.getName());\n+            }\n+            userAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser(), userAttrNames));\n+\n+            List<String> memberAttrNames = new ArrayList<String>();\n+            for (AttributeDefinition ad : membersAttributesDef) {\n+                memberAttrNames.add(ad.getName());\n             }\n-          }\n+            memberAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember, memberAttrNames));\n+\n+            richMember.setUserAttributes(userAttributes);\n+            richMember.setMemberAttributes(memberAttributes);\n+        }\n+\n+        return richMembers;\n+    }\n+\n+    public int getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException {\n+        return getMembersManagerImpl().getMembersCount(sess, vo);\n+    }\n+\n+    public int getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+        return getMembersManagerImpl().getMembersCount(sess, vo, status);\n+    }\n+\n+    public Vo getMemberVo(PerunSession sess, Member member) throws InternalErrorException {\n+        try {\n+            return getPerunBl().getVosManagerBl().getVoById(sess, getMembersManagerImpl().getMemberVoId(sess, member));\n+        } catch (VoNotExistsException e1) {\n+            throw new ConsistencyErrorException(\"Member is under nonexistent VO\", e1);\n+        }\n+    }\n+\n+    public List<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n+\n+        List<Member> members = new ArrayList<Member>();\n+        for (User user : users) {\n+            members.addAll(getMembersManagerImpl().getMembersByUser(sess, user));\n+        }\n+\n+        return members;\n+    }\n+\n+    public List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n+\n+        List<Member> members = new ArrayList<Member>();\n+        for (User user : users) {\n+            try {\n+                members.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n+            } catch (MemberNotExistsException e) {\n+                // User is not member of this VO\n+            }\n+        }\n+\n+        return this.setAllMembersSameType(members, MembershipType.DIRECT);\n+    }\n+\n+    public List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+\n+        List<Member> members = new ArrayList<Member>();\n+        for (User user : users) {\n+            try {\n+                members.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n+            } catch (MemberNotExistsException e) {\n+                // User is not member of this VO\n+            }\n+        }\n+\n+        return this.setAllMembersSameType(members, MembershipType.DIRECT);\n+    }\n+\n+    public List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n+\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+        List<Member> allGroupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        List<Member> allFoundMembers = new ArrayList<Member>();\n+        for (User user : users) {\n+            allFoundMembers.addAll(getMembersByUser(sess, user));\n+        }\n+        allGroupMembers.retainAll(allFoundMembers);\n+        return allGroupMembers;\n+    }\n+\n+    public List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException {\n+\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+        List<Member> allGroupMembers = new ArrayList<Member>();\n+        if (group.getParentGroupId() == null) {\n+            Vo vo = null;\n+            try {\n+                vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+            } catch (VoNotExistsException ex) {\n+                throw new ConsistencyErrorException(group + \" is not in \" + vo);\n+            }\n+            allGroupMembers = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n         } else {\n-          throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+            allGroupMembers = getPerunBl().getGroupsManagerBl().getParentGroupMembers(sess, group);\n         }\n-      }\n \n-      // Reset hours, minutes and seconds to 0\n-      calendar.set(Calendar.HOUR, 0);\n-      calendar.set(Calendar.MINUTE, 0);\n-      calendar.set(Calendar.SECOND, 0);\n-      calendar.set(Calendar.MILLISECOND, 0);\n+        List<Member> allFoundMembers = new ArrayList<Member>();\n+        for (User user : users) {\n+            allFoundMembers.addAll(getMembersByUser(sess, user));\n+        }\n+        allGroupMembers.retainAll(allFoundMembers);\n+        return allGroupMembers;\n     }\n \n-    return calendar.getTime();\n-\t}\n+    public List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n \n-\tpublic Date getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tPair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n-\t\t\tif (ret.getLeft()) {\n-\t\t\t\treturn ret.getRight();\n-\t\t\t}\n-\t\t} catch (ExtendMembershipException e) {}\n-\n-\t\treturn null;\n-\t}\n-\n-\t/* Check if the user can apply for VO membership\n-\t*/\n-\tpublic boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, ExtendMembershipException {\n-\t\treturn this.canBeMemberInternal(sess, vo, user, loa, true);\n-\t}\n-\n-\t/* Check if the user can apply for VO membership\n-\t*/\n-\tpublic boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn this.canBeMemberInternal(sess, vo, user, loa, false);\n-\t\t} catch (ExtendMembershipException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic RichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember) throws InternalErrorException {\n-\t\tif(richMember == null) throw new InternalErrorException(\"RichMember can't be null.\");\n-\t\tif(richMember.getUser() == null) throw new InternalErrorException(\"User cant be null in RichMember.\");\n-\t\t//Filtering members attributes\n-\t\tif(richMember.getMemberAttributes() != null) {\n-\t\t\tList<Attribute> memberAttributes = richMember.getMemberAttributes();\n-\t\t\tList<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute membAttr: memberAttributes) {\n-\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, richMember, null)) {\n-\t\t\t\t\tmembAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, richMember, null));\n-\t\t\t\t\tallowedMemberAttributes.add(membAttr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\trichMember.setMemberAttributes(allowedMemberAttributes);\n-\t\t}\n-\t\t//Filtering users attributes\n-\t\tif(richMember.getUserAttributes() != null) {\n-\t\t\tList<Attribute> userAttributes = richMember.getUserAttributes();\n-\t\t\tList<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute userAttr: userAttributes) {\n-\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richMember.getUser(), null)) {\n-\t\t\t\t\tuserAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richMember.getUser(), null));\n-\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\trichMember.setUserAttributes(allowedUserAttributes);\n-\t\t}\n-\t\treturn richMember;\n-\t}\n+        List<Member> members = findMembersInGroup(sess, group, searchString);\n+        return this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n+    }\n \n-\tpublic List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers) throws InternalErrorException {\n-\t\tList<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return filteredRichMembers;\n+    public List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException {\n \n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\tfilteredRichMembers.add(this.filterOnlyAllowedAttributes(sess, rm));\n-\t\t}\n+        List<Member> members = findMembersInParentGroup(sess, group, searchString);\n+        return this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n+    }\n \n-\t\treturn filteredRichMembers;\n-\t}\n-\n-\tpublic List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, boolean useContext) throws InternalErrorException {\n-\t\t//If no context should be used - every attribute is unique in context of member (for every member test access rights for all attributes again)\n-\t\tif(!useContext) return filterOnlyAllowedAttributes(sess, richMembers);\n-\n-\t\t//If context should be used - every attribute is unique in context of friendlyName (every attribute test only once per friendlyName)\n-\t\tList<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return filteredRichMembers;\n-\n-\t\t// attr_name to boolean where null means - no rights at all, false means no write rights, true means read and write rights\n-\t\tMap<String, Boolean> contextMap = new HashMap<>();\n-\t\t// voId is there the context\n-\t\tInteger voId = null;\n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\t//set or test voId for testing of context\n-\t\t\tif(voId == null) {\n-\t\t\t\tvoId = rm.getVoId();\n-\t\t\t} else {\n-\t\t\t\tif(rm.getVoId() != voId) throw new InternalErrorException(\"Method using filtering by context, but some members are not from the same Vo!\");\n-\t\t\t}\n-\n-\t\t\t//Filtering members attributes\n-\t\t\tif(rm.getMemberAttributes() != null) {\n-\t\t\t\tList<Attribute> memberAttributes = rm.getMemberAttributes();\n-\t\t\t\tList<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n-\t\t\t\tfor(Attribute membAttr: memberAttributes) {\n-\t\t\t\t\t//if there is record in contextMap, use it\n-\t\t\t\t\tif(contextMap.containsKey(membAttr.getFriendlyName())) {\n-\t\t\t\t\t\tBoolean isWritable = contextMap.get(membAttr.getFriendlyName());\n-\t\t\t\t\t\tif(isWritable != null) {\n-\t\t\t\t\t\t\tmembAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedMemberAttributes.add(membAttr);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t//if not, get information about authz rights and set record to contextMap\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, rm, null)) {\n-\t\t\t\t\t\t\tboolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, rm, null);\n-\t\t\t\t\t\t\tmembAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedMemberAttributes.add(membAttr);\n-\t\t\t\t\t\t\tcontextMap.put(membAttr.getFriendlyName(), isWritable);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcontextMap.put(membAttr.getFriendlyName(), null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\trm.setMemberAttributes(allowedMemberAttributes);\n-\t\t\t}\n-\t\t\t//Filtering users attributes\n-\t\t\tif(rm.getUserAttributes() != null) {\n-\t\t\t\tList<Attribute> userAttributes = rm.getUserAttributes();\n-\t\t\t\tList<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n-\t\t\t\tfor(Attribute userAttr: userAttributes) {\n-\t\t\t\t\t//if there is record in contextMap, use it\n-\t\t\t\t\tif(contextMap.containsKey(userAttr.getFriendlyName())) {\n-\t\t\t\t\t\tBoolean isWritable = contextMap.get(userAttr.getFriendlyName());\n-\t\t\t\t\t\tif(isWritable != null) {\n-\t\t\t\t\t\t\tuserAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t//if not, get information about authz rights and set record to contextMap\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, rm.getUser(), null)) {\n-\t\t\t\t\t\t\tboolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, rm.getUser(), null);\n-\t\t\t\t\t\t\tuserAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t\t\t\tcontextMap.put(userAttr.getFriendlyName(), isWritable);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcontextMap.put(userAttr.getFriendlyName(), null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\trm.setUserAttributes(allowedUserAttributes);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfilteredRichMembers.add(rm);\n-\t\t}\n-\t\treturn filteredRichMembers;\n-\t}\n-\n-\t/**\n-\t * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n-\t *\n-\t * Check if the user can apply for VO membership. VO restrictions doesn't apply to service users.\n-\t *\n-\t * @param sess session\n-\t * @param vo VO to apply for\n-\t * @param user User applying for membership\n-\t * @param loa level of assurance provided by user's external identity\n-\t * @param throwExceptions TRUE = throw exceptions / FALSE = return false when user can't be member of VO\n-\t * @return True if user can become member of VO / false or exception otherwise.\n-\t *\n-\t * @throws ExtendMembershipException When user can't be member of VO and throwExceptions is set to true\n-\t * @throws InternalErrorException\n-\t*/\n-\tprotected boolean canBeMemberInternal(PerunSession sess, Vo vo, User user, String loa, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n-\n-\t\tif (user != null && user.isServiceUser()) return true;\n-\n-\t\t// Check if the VO has set membershipExpirationRules attribute\n-\t\tLinkedHashMap<String, String> membershipExpirationRules;\n-\n-\t\tAttribute membershipExpirationRulesAttribute = null;\n-\t\ttry {\n-\t\t\tmembershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n-\t\t\tmembershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n-\t\t\t// If attribute was not filled, then silently exit\n-\t\t\tif (membershipExpirationRules == null) return true;\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// No rules set, so leave it as it is\n-\t\t\treturn true;\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(\"Shouldn't happen.\");\n-\t\t}\n \n-\t\t// Which LOA we won't allow?\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) {\n-\t\t\tif (loa == null) {\n-\t\t\t\t// User doesn't have LOA defined and LOA is required for getting in, so do not allow membership.\n-\t\t\t\tlog.warn(\"User {} doesn't have LOA defined, but 'doNotAllowLoa' option is set for VO {}.\", user, vo);\n-\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA,\n-\t\t\t\t\t\t\t\"User \" + user + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + vo.getId() + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tString[] doNotAllowLoas = membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName).split(\",\");\n-\n-\t\t\tfor (String doNotAllowLoa : doNotAllowLoas) {\n-\t\t\t\tif (doNotAllowLoa.equals(loa)) {\n-\t\t\t\t\t// User has LOA which is not allowed for getting in\n-\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n-\t\t\t\t\t\t\t\t\"User \" + user + \" doesn't have required LOA for VO id \" + vo.getId() + \".\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n-\t *\n-\t * If setAttributeValue is true, then store the membership expiration date into the attribute, otherwise\n-\t * return object pair containing true/false if the member can be extended and date specifying exact date of the new expiration\n-\t *\n-\t * @param sess session\n-\t * @param member member to check / set membership expiration\n-\t * @param setAttributeValue TRUE = set new membership expiration date / FALSE = do NOT set new expiration date (just calculate it)\n-\t * @param throwExceptions TRUE = throw exception / FALSE = return false when member can't extend membership\n-\t * @return Pair with result in left side (can / can't extend membership) and Date in right side telling new membership expiration date\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException When member can't extend membership and throwException is set to true.\n-\t */\n-\tprotected Pair<Boolean, Date> manageMembershipExpiration(PerunSession sess, Member member, boolean setAttributeValue, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n-\t\t// Check if the VO has set membershipExpirationRules attribute\n-\t\tLinkedHashMap<String, String> membershipExpirationRules;\n-\n-\t\tVo vo;\n-\t\tAttribute membershipExpirationRulesAttribute = null;\n-\t\ttry {\n-\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n-\t\t\tmembershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n-\t\t\tmembershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n-\t\t\t// If attribute was not filled, then silently exit\n-\t\t\tif (membershipExpirationRules == null) return new Pair<Boolean, Date>(true, null);\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member \" + member + \" of non-existing VO id=\" + member.getVoId());\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// There is no attribute definition for membership expiration rules.\n-\t\t\treturn new Pair<Boolean, Date>(true, null);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(\"Shouldn't happen.\");\n-\t\t}\n+    public List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n \n-\t\t// Get user LOA\n-\t\tString memberLoa = null;\n-\t\ttry {\n-\t\t\tAttribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n-\t\t\tmemberLoa = (String) loa.getValue();\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// Ignore, will be probably set further\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n \n-\t\t// Get current membershipExpiration date\n-\t\tAttribute membershipExpirationAttribute = null;\n-\t\ttry {\n-\t\t\tmembershipExpirationAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member,\n-\t\t\t\t\tAttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute: \" + AttributesManager.NS_MEMBER_ATTR_DEF +\n-\t\t\t\t\t\t\":membershipExpiration\" + \" must be defined in order to use membershipExpirationRules\");\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n+        List<Member> members = new ArrayList<Member>();\n+        for (User user : users) {\n+            try {\n+                members.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n+            } catch (MemberNotExistsException e) {\n+                // User is not member of this VO\n+            }\n+        }\n \n-\t\tboolean isServiceUser = false;\n-\t\ttry {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\tisServiceUser = user.isServiceUser();\n-\t\t} catch (UserNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"User must exists for \"+member+\" when checking expiration rules.\");\n-\t\t}\n+        return this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n+    }\n \n-\t\t// Which LOA we won't extend?\n-\t\t// This is applicable only for members who have already set expiration from the previous period\n-\t\t// and are not service users\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null &&\n-\t\t\t\tmembershipExpirationAttribute.getValue() != null &&\n-\t\t\t\t!isServiceUser) {\n-\t\t\tif (memberLoa == null) {\n-\t\t\t\t// Member doesn't have LOA defined and LOA is required for extension, so do not extend membership.\n-\t\t\t\tlog.warn(\"Member {} doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id {}.\", member, member.getVoId());\n-\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA,\n-\t\t\t\t\t\t\t\"Member \" + member + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tString[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n-\n-\t\t\tfor (String doNotExtendLoa : doNotExtendLoas) {\n-\t\t\t\tif (doNotExtendLoa.equals(memberLoa)) {\n-\t\t\t\t\t// Member has LOA which is not allowed for extension\n-\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION,\n-\t\t\t\t\t\t\t\t\"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    @Override\n+    public List<RichMember> findRichMembers(PerunSession sess, String searchString) throws InternalErrorException {\n \n-\t\tCalendar calendar = Calendar.getInstance();\n+        List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n \n-\t\t// Does the user have expired membership, if yes, then for canExtendMembership return true\n-\t\tif (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n-\t\t\ttry {\n-\t\t\t\tDate currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n+        List<Member> members = new ArrayList<Member>();\n+        for (User user : users) {\n+            members.addAll(getMembersByUser(sess, user));\n+        }\n \n-\t\t\t\tCalendar currentMemberExpirationCalendar = Calendar.getInstance();\n-\t\t\t\tcurrentMemberExpirationCalendar.setTime(currentMemberExpiration);\n+        return this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n+    }\n \n-\t\t\t\tif (calendar.after(currentMemberExpirationCalendar)) {\n-\t\t\t\t\treturn new Pair<Boolean, Date>(true, null);\n-\t\t\t\t}\n-\t\t\t} catch (ParseException e) {\n-\t\t\t\tthrow new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n-\t\t\t}\n-\t\t}\n+    public List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n \n-\t\tString period = null;\n-\t\t// Default extension\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n-\t\t\tperiod = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n-\t\t}\n+        List<RichMember> list = findRichMembersInVo(sess, vo, searchString);\n+        return convertMembersToRichMembersWithAttributes(sess, list);\n \n-\t\t// Do we extend particular LoA? Attribute syntax LoA|[period][.]\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n-\t\t\t// Which period\n-\t\t\tString[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n-\t\t\tString loa = membershipPeriodLoa[0];\n-\t\t\tString periodLoa = membershipPeriodLoa[1];\n-\t\t\t// Does the user have this LoA?\n-\t\t\tif (loa.equals(memberLoa)) {\n-\t\t\t\tif (periodLoa.endsWith(\".\")) {\n-\t\t\t\t\t// If period ends with ., then we do not allow extension for users with particular LoA if they are already members\n-\t\t\t\t\tif (membershipExpirationAttribute.getValue() != null) {\n-\t\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION,\n-\t\t\t\t\t\t\t\t\t\"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t// remove dot from the end of the string\n-\t\t\t\t\tperiod = periodLoa.substring(0, periodLoa.length() - 1);\n-\t\t\t\t} else {\n-\t\t\t\t\tperiod = periodLoa;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    }\n \n-\t\t// Do we extend for x months or for static date?\n-\t\tif (period != null) {\n-\t\t\tif (period.startsWith(\"+\")) {\n-\t\t\t\tif (!isMemberInGracePeriod(membershipExpirationRules, (String) membershipExpirationAttribute.getValue())) {\n-\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(),\n-\t\t\t\t\t\t\t\t\"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t// By default do not add nothing\n-\t\t\t\tint amount = 0;\n-\t\t\t\tint field;\n-\n-\t\t\t\t// We will add days/months/years\n-\t\t\t\tPattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n-\t\t\t\tMatcher m = p.matcher(period);\n-\t\t\t\tif (m.matches()) {\n-\t\t\t\t\tString countString = m.group(1);\n-\t\t\t\t\tamount = Integer.valueOf(countString);\n-\n-\t\t\t\t\tString dmyString = m.group(2);\n-\t\t\t\t\tif (dmyString.equals(\"d\")) {\n-\t\t\t\t\t\tfield = Calendar.DAY_OF_YEAR;\n-\t\t\t\t\t} else if (dmyString.equals(\"m\")) {\n-\t\t\t\t\t\tfield = Calendar.MONTH;\n-\t\t\t\t\t} else if (dmyString.equals(\"y\")) {\n-\t\t\t\t\t\tfield = Calendar.YEAR;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-\t\t\t\t}\n-\n-\t\t\t\t// Add days/months/years\n-\t\t\t\tcalendar.add(field, amount);\n-\t\t\t} else {\n-\t\t\t\t// We will extend to particular date\n-\n-\t\t\t\t// Parse date\n-\t\t\t\tPattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n-\t\t\t\tMatcher m = p.matcher(period);\n-\t\t\t\tif (m.matches()) {\n-\t\t\t\t\tint day = Integer.valueOf(m.group(1));\n-\t\t\t\t\tint month = Integer.valueOf(m.group(2));\n-\n-\t\t\t\t\t// Get current year\n-\t\t\t\t\tint year = calendar.get(Calendar.YEAR);\n-\n-\t\t\t\t\t// We must detect if the extension date is in current year or in a next year\n-\t\t\t\t\tboolean extensionInNextYear;\n-\t\t\t\t\tCalendar extensionCalendar = Calendar.getInstance();\n-\t\t\t\t\textensionCalendar.set(year, month-1, day);\n-\t\t\t\t\tCalendar today = Calendar.getInstance();\n-\t\t\t\t\tif (extensionCalendar.before(today)) {\n-\t\t\t\t\t\t// Extension date is in a next year\n-\t\t\t\t\t\textensionInNextYear = true;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Extension is in the current year\n-\t\t\t\t\t\textensionInNextYear = false;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n-\t\t\t\t\tcalendar.set(year, month-1, day); // month is 0-based\n-\t\t\t\t\tif (extensionInNextYear) {\n-\t\t\t\t\t\tcalendar.add(Calendar.YEAR, 1);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// ***** GRACE PERIOD *****\n-\t\t\t\t\t// Is there a grace period?\n-\t\t\t\t\tif (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n-\t\t\t\t\t\tString gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n-\t\t\t\t\t\t// If the extension is requested in period-gracePeriod then extend to next period\n-\n-\t\t\t\t\t\t// Get the value of the grace period\n-\t\t\t\t\t\tp = Pattern.compile(\"([0-9]+)([dmy]?)\");\n-\t\t\t\t\t\tm = p.matcher(gracePeriod);\n-\t\t\t\t\t\tif (m.matches()) {\n-\t\t\t\t\t\t\tString countString = m.group(1);\n-\t\t\t\t\t\t\tint amount = Integer.valueOf(countString);\n-\n-\t\t\t\t\t\t\t// Set the gracePeriodCalendar to the extension date\n-\t\t\t\t\t\t\tCalendar gracePeriodCalendar = Calendar.getInstance();\n-\t\t\t\t\t\t\tgracePeriodCalendar.set(year, month-1, day);\n-\t\t\t\t\t\t\tif (extensionInNextYear) {\n-\t\t\t\t\t\t\t\tgracePeriodCalendar.add(Calendar.YEAR, 1);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tint field;\n-\t\t\t\t\t\t\tString dmyString = m.group(2);\n-\t\t\t\t\t\t\tif (dmyString.equals(\"d\")) {\n-\t\t\t\t\t\t\t\tfield = Calendar.DAY_OF_YEAR;\n-\t\t\t\t\t\t\t} else if (dmyString.equals(\"m\")) {\n-\t\t\t\t\t\t\t\tfield = Calendar.MONTH;\n-\t\t\t\t\t\t\t} else if (dmyString.equals(\"y\")) {\n-\t\t\t\t\t\t\t\tfield = Calendar.YEAR;\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t// subtracts period definition, e.g. 3m\n-\t\t\t\t\t\t\tgracePeriodCalendar.add(field, -amount);\n-\n-\t\t\t\t\t\t\t// Check if we are in grace period\n-\t\t\t\t\t\t\tif (gracePeriodCalendar.before(Calendar.getInstance())) {\n-\t\t\t\t\t\t\t\t// We are in grace period, so extend to the next period\n-\t\t\t\t\t\t\t\tcalendar.add(Calendar.YEAR, 1);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t// If we do not need to set the attribute value, only check if the current member's expiration time is not in grace period\n-\t\t\t\t\t\t\tif (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\tDate currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n-\t\t\t\t\t\t\t\t\t// subtracts grace period from the currentMemberExpiration\n-\t\t\t\t\t\t\t\t\tCalendar currentMemberExpirationCalendar = Calendar.getInstance();\n-\t\t\t\t\t\t\t\t\tcurrentMemberExpirationCalendar.setTime(currentMemberExpiration);\n-\n-\t\t\t\t\t\t\t\t\tcurrentMemberExpirationCalendar.add(field, -amount);\n-\n-\t\t\t\t\t\t\t\t\t// if today is before that time, user can extend his period\n-\t\t\t\t\t\t\t\t\tif (currentMemberExpirationCalendar.after(Calendar.getInstance())) {\n-\t\t\t\t\t\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (ParseException e) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Reset hours, minutes and seconds to 0\n-\t\t\tcalendar.set(Calendar.HOUR, 0);\n-\t\t\tcalendar.set(Calendar.MINUTE, 0);\n-\t\t\tcalendar.set(Calendar.SECOND, 0);\n-\t\t\tcalendar.set(Calendar.MILLISECOND, 0);\n-\n-\t\t\t// Set new value of the membershipExpiration for the member\n-\t\t\tif (setAttributeValue) {\n-\t\t\t\tmembershipExpirationAttribute.setValue(BeansUtils.getDateFormatterWithoutTime().format(calendar.getTime()));\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, member, membershipExpirationAttribute);\n-\t\t\t\t} catch (WrongAttributeValueException e) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Wrong value: \" + membershipExpirationAttribute.getValue(),e);\n-\t\t\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn new Pair<Boolean, Date>(true, calendar.getTime());\n-\t}\n-\n-\t/**\n-\t * Return true if member is in grace period. If grace period is not set return always true.\n-\t * If member has not expiration date return always true.\n-\t *\n-\t * @param membershipExpirationRules\n-\t * @param membershipExpiration\n-\t * @return true if member is in grace period. Be carefull about special cases - read method description.\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate boolean isMemberInGracePeriod(Map<String, String> membershipExpirationRules, String membershipExpiration) throws InternalErrorException {\n-\t\t// Is a grace period set?\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) == null) {\n-\t\t\t// If not grace period is infinite\n-\t\t\treturn true;\n-\t\t}\n-\t\t// does member have expiration date?\n-\t\tif (membershipExpiration == null) {\n-\t\t\t// if not grace period is infinite\n-\t\t\treturn true;\n-\t\t}\n+    @Override\n+    public List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString) throws InternalErrorException {\n+        List<RichMember> list = findRichMembers(sess, searchString);\n+        return convertMembersToRichMembersWithAttributes(sess, list);\n+    }\n \n-\t\tString gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+    public void checkMemberExists(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException {\n+        getMembersManagerImpl().checkMemberExists(sess, member);\n+    }\n \n-\t\t// If the extension is requested in period-gracePeriod then extend to next period\n-\t\tPattern p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n-\t\tMatcher m = p.matcher(gracePeriod);\n+    public Member setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n+        switch (status) {\n+            case VALID:\n+                return validateMember(sess, member);\n+            //break;\n+            case INVALID:\n+                return invalidateMember(sess, member);\n+            //break;\n+            case SUSPENDED:\n+                return suspendMember(sess, member);\n+            //break;\n+            case EXPIRED:\n+                return expireMember(sess, member);\n+            //break;\n+            case DISABLED:\n+                return disableMember(sess, member);\n+            //break;\n+            default:\n+                throw new InternalErrorException(\"Unknown status:\" + status);\n+        }\n+    }\n \n-\t\tif (!m.matches()) {\n-\t\t\tthrow new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-\t\t}\n+    public Member validateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (this.haveStatus(sess, member, Status.VALID)) {\n+            log.debug(\"Trying to validate member who is already valid. \" + member);\n+            return member;\n+        }\n \n-\t\tint amount = Integer.valueOf(m.group(1));\n-\n-\t\tint field;\n-\t\tString dmyString = m.group(2);\n-\t\tif (dmyString.equals(\"d\")) {\n-\t\t\tfield = Calendar.DAY_OF_YEAR;\n-\t\t} else if (dmyString.equals(\"m\")) {\n-\t\t\tfield = Calendar.MONTH;\n-\t\t} else if (dmyString.equals(\"y\")) {\n-\t\t\tfield = Calendar.YEAR;\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-\t\t}\n+        Status oldStatus = member.getStatus();\n+        getMembersManagerImpl().setStatus(sess, member, Status.VALID);\n+        member.setStatus(Status.VALID);\n+        getPerunBl().getAuditer().log(sess, \"{} validated.\", member);\n+        if (oldStatus.equals(Status.INVALID)) {\n+            try {\n+                getPerunBl().getAttributesManagerBl().doTheMagic(sess, member);\n+            } catch (WrongAttributeAssignmentException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n \n-\t\ttry {\n-\t\t\tCalendar beginOfGracePeriod = Calendar.getInstance();\n-\t\t\tDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\t\t\tbeginOfGracePeriod.setTime(format.parse(membershipExpiration));\n-\t\t\tbeginOfGracePeriod.add(field, -amount);\n-\t\t\tif (beginOfGracePeriod.before(Calendar.getInstance())) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t} catch (ParseException e) {\n-\t\t\tthrow new InternalErrorException(\"Wrong format of membership expiration attribute: \" + membershipExpiration, e);\n-\t\t}\n+        return member;\n+    }\n \n-\t\treturn false;\n+    public Member validateMemberAsync(final PerunSession sess, final Member member) throws InternalErrorException {\n+        new Thread(new Runnable() {\n+            public void run() {\n+                try {\n+                    Thread.sleep(5000);\n+                } catch (InterruptedException e) {\n+                    // TODO Auto-generated catch block\n+                    e.printStackTrace();\n+                }\n+                Status oldStatus = Status.getStatus(member.getStatus().getCode());\n+\n+                try {\n+                    ((PerunSessionImpl) sess).getPerunBl().getMembersManagerBl().validateMember(sess, member);\n+                } catch (Exception ex) {\n+                    log.info(\"validateMemberAsync failed. Cause: {}\", ex);\n+                    try {\n+                        getPerunBl().getAuditer().log(sess, \"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n+                        log.info(\"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n+                    } catch (InternalErrorException internalError) {\n+                        log.error(\"Store message to auditer failed. message: Validation of {} failed. He stays in {} state. cause: {}\", new Object[] {member, oldStatus, internalError});\n+                    }\n+                }\n+            }\n+        }, \"validateMemberAsync\").start();\n+        return member;\n+    }\n \n-\t}\n+    public Member invalidateMember(PerunSession sess, Member member) throws InternalErrorException {\n+        if (this.haveStatus(sess, member, Status.INVALID)) {\n+            log.debug(\"Trying to invalidate member who is already invalid. \" + member);\n+            return member;\n+        }\n \n-\tpublic void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException {\n+        getMembersManagerImpl().setStatus(sess, member, Status.INVALID);\n+        member.setStatus(Status.INVALID);\n+        getPerunBl().getAuditer().log(sess, \"{} invalidated.\", member);\n+        return member;\n+    }\n \n-\t\tUser user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+    public Member suspendMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n+        if (this.haveStatus(sess, member, Status.SUSPENDED)) {\n+            log.warn(\"Trying to suspend member who is already suspended. Suspend operation will be procesed anyway (to be shure).\" + member);\n+        }\n \n-\t\tList<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n-\t\tboolean found = false;\n-\t\tfor (Attribute a : logins) {\n-\t\t\tif (a.getFriendlyNameParameter().equals(namespace)) found = true;\n-\t\t}\n-\t\tif (!found) throw new InternalErrorException(user.toString()+\" doesn't have login in namespace: \"+namespace);\n+        if (this.haveStatus(sess, member, Status.INVALID)) {\n+            throw new MemberNotValidYetException(member);\n+        }\n+        getMembersManagerImpl().setStatus(sess, member, Status.SUSPENDED);\n+        member.setStatus(Status.SUSPENDED);\n+        getPerunBl().getAuditer().log(sess, \"{} suspended #{}.\", member, Auditer.engineForceKeyword);\n+        return member;\n+    }\n \n-\t\tString email = \"\";\n-\t\ttry {\n-\t\t\tAttribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\t\tif (a != null && a.getValue() != null) {\n-\t\t\t\temail = (String)a.getValue();\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n+    public Member expireMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n+        if (this.haveStatus(sess, member, Status.EXPIRED)) {\n+            log.debug(\"Trying to set member expired but he's already expired. \" + member);\n+            return member;\n+        }\n \n-\t\tint id = getMembersManagerImpl().storePasswordResetRequest(sess, user, namespace);\n-\t\tUtils.sendPasswordResetEmail(user, email, namespace, url, id);\n-\n-\t}\n-\n-\t/**\n-\t * Take list of members and set them all the same type.\n-\t *\n-\t * @param members\n-\t * @param type\n-\t * @return list of members with the same type\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate List<Member> setAllMembersSameType(List<Member> members, MembershipType type) throws InternalErrorException {\n-\t\tif(members == null) return new ArrayList<Member>();\n-\t\tfor(Member m: members) {\n-\t\t\tm.setMembershipType(type);\n-\t\t}\n-\t\treturn members;\n-\t}\n-\n-\t/**\n-\t * Gets the membersManagerImpl.\n-\t *\n-\t * @return The membersManagerImpl.\n-\t */\n-\tpublic MembersManagerImplApi getMembersManagerImpl() {\n-\t\treturn this.membersManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n+        if (this.haveStatus(sess, member, Status.INVALID)) {\n+            throw new MemberNotValidYetException(member);\n+        }\n+        getMembersManagerImpl().setStatus(sess, member, Status.EXPIRED);\n+        member.setStatus(Status.EXPIRED);\n+        getPerunBl().getAuditer().log(sess, \"{} expired.\", member);\n+        return member;\n+    }\n+\n+    public Member disableMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n+        if (this.haveStatus(sess, member, Status.DISABLED)) {\n+            log.debug(\"Trying to disable member who is already disabled. \" + member);\n+            return member;\n+        }\n+\n+        if (this.haveStatus(sess, member, Status.INVALID)) {\n+            throw new MemberNotValidYetException(member);\n+        }\n+        getMembersManagerImpl().setStatus(sess, member, Status.DISABLED);\n+        member.setStatus(Status.DISABLED);\n+        getPerunBl().getAuditer().log(sess, \"{} disabled.\", member);\n+        return member;\n+    }\n+\n+    public void insertToMemberGroup(PerunSession sess, Member member, Vo vo) throws InternalErrorException, AlreadyMemberException, GroupOperationsException {\n+        // Insert member into the members group\n+        try {\n+            getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+            Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+            getPerunBl().getGroupsManagerBl().addMemberToMembersGroup(sess, g, member);\n+        } catch (NotMemberOfParentGroupException ex) {\n+            //members group is top level -> this should not happen\n+            throw new ConsistencyErrorException(ex);\n+        } catch (GroupNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        } catch (VoNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        } catch (WrongAttributeValueException e) {\n+            throw new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n+        } catch (WrongReferenceAttributeValueException e) {\n+            throw new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n+        }\n+    }\n+\n+    public List<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status) throws InternalErrorException {\n+        Iterator<Member> iterator = members.iterator();\n+        while (iterator.hasNext()) {\n+            Member member = iterator.next();\n+            if (!haveStatus(sess, member, status)) {\n+                iterator.remove();\n+            }\n+        }\n+        return members;\n+    }\n+\n+    public List<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo) throws InternalErrorException {\n+        return getMembersManagerImpl().getMembersByUsersIds(sess, usersIds, vo);\n+    }\n+\n+    public List<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo) throws InternalErrorException {\n+        return getMembersManagerImpl().getMembersByUsers(sess, users, vo);\n+    }\n+\n+    public boolean haveStatus(PerunSession sess, Member member, Status status) {\n+        return member.getStatus().equals(status);\n+    }\n+\n+    public void extendMembership(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n+        this.manageMembershipExpiration(sess, member, true, true);\n+    }\n+\n+    public boolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n+        try {\n+            Pair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n+            return ret.getLeft();\n+        } catch (ExtendMembershipException e) {\n+            return false;\n+        }\n+    }\n+\n+    public boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n+        Pair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, true);\n+        return ret.getLeft();\n+    }\n+\n+    public Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, ExtendMembershipException {\n+        // Check if the VO has set membershipExpirationRules attribute\n+        LinkedHashMap<String, String> membershipExpirationRules;\n+\n+        Attribute membershipExpirationRulesAttribute = null;\n+        try {\n+            membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n+            membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n+            // If attribute was not filled, then silently exit with null\n+            if (membershipExpirationRules == null) {\n+                return null;\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            // No rules set, so leave it as it is\n+            return null;\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(\"Shouldn't happen.\");\n+        }\n+\n+        // Which LOA we won't extend? This is applicable only for members who have already set expiration from the previous period\n+        if (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null) {\n+            String[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n+\n+            for (String doNotExtendLoa : doNotExtendLoas) {\n+                if (doNotExtendLoa.equals(loa)) {\n+                    // LOA provided is not allowed for extension\n+                    throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n+                            \"Provided LoA \" + loa + \" doesn't have required level for VO id \" + vo.getId() + \".\");\n+                }\n+            }\n+        }\n+\n+        Calendar calendar = Calendar.getInstance();\n+\n+        String period = null;\n+        // Default extension\n+        if (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n+            period = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n+        }\n+\n+        // Do we extend particular LoA? Attribute syntax LoA|[period][.]\n+        if (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n+            // Which period\n+            String[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n+            String membershipLoa = membershipPeriodLoa[0];\n+            String periodLoa = membershipPeriodLoa[1];\n+            // Does the user have this LoA?\n+            if (membershipLoa.equals(loa)) {\n+                period = periodLoa;\n+            }\n+        }\n+\n+        // Do we extend for x months or for static date?\n+        if (period != null) {\n+            if (period.startsWith(\"+\")) {\n+                // By default do not add nothing\n+                int amount = 0;\n+                int field;\n+\n+                // We will add days/months/years\n+                Pattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n+                Matcher m = p.matcher(period);\n+                if (m.matches()) {\n+                    String countString = m.group(1);\n+                    amount = Integer.valueOf(countString);\n+\n+                    String dmyString = m.group(2);\n+                    if (dmyString.equals(\"d\")) {\n+                        field = Calendar.DAY_OF_YEAR;\n+                    } else if (dmyString.equals(\"m\")) {\n+                        field = Calendar.MONTH;\n+                    } else if (dmyString.equals(\"y\")) {\n+                        field = Calendar.YEAR;\n+                    } else {\n+                        throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+                    }\n+                } else {\n+                    throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+                }\n+\n+                // Add days/months/years\n+                calendar.add(field, amount);\n+            } else {\n+                // We will extend to particular date\n+\n+                // Parse date\n+                Pattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n+                Matcher m = p.matcher(period);\n+                if (m.matches()) {\n+                    int day = Integer.valueOf(m.group(1));\n+                    int month = Integer.valueOf(m.group(2));\n+\n+                    // Get current year\n+                    int year = calendar.get(Calendar.YEAR);\n+\n+                    // We must detect if the extension date is in current year or in a next year\n+                    boolean extensionInNextYear;\n+                    Calendar extensionCalendar = Calendar.getInstance();\n+                    extensionCalendar.set(year, month - 1, day);\n+                    Calendar today = Calendar.getInstance();\n+                    if (extensionCalendar.before(today)) {\n+                        // Extension date is in a next year\n+                        extensionInNextYear = true;\n+                    } else {\n+                        // Extension is in the current year\n+                        extensionInNextYear = false;\n+                    }\n+\n+                    // Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n+                    calendar.set(year, month - 1, day); // month is 0-based\n+                    if (extensionInNextYear) {\n+                        calendar.add(Calendar.YEAR, 1);\n+                    }\n+\n+                    // ***** GRACE PERIOD *****\n+                    // Is there a grace period?\n+                    if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n+                        String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+                        // If the extension is requested in period-gracePeriod then extend to next period\n+\n+                        // Get the value of the grace period\n+                        p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n+                        m = p.matcher(gracePeriod);\n+                        if (m.matches()) {\n+                            String countString = m.group(1);\n+                            int amount = Integer.valueOf(countString);\n+\n+                            // Set the gracePeriodCalendar to the extension date\n+                            Calendar gracePeriodCalendar = Calendar.getInstance();\n+                            gracePeriodCalendar.set(year, month - 1, day);\n+                            if (extensionInNextYear) {\n+                                gracePeriodCalendar.add(Calendar.YEAR, 1);\n+                            }\n+\n+                            int field;\n+                            String dmyString = m.group(2);\n+                            if (dmyString.equals(\"d\")) {\n+                                field = Calendar.DAY_OF_YEAR;\n+                            } else if (dmyString.equals(\"m\")) {\n+                                field = Calendar.MONTH;\n+                            } else if (dmyString.equals(\"y\")) {\n+                                field = Calendar.YEAR;\n+                            } else {\n+                                throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+                            }\n+                            // subtracts period definition, e.g. 3m\n+                            gracePeriodCalendar.add(field, -amount);\n+\n+                            // Check if we are in grace period\n+                            if (gracePeriodCalendar.before(Calendar.getInstance())) {\n+                                // We are in grace period, so extend to the next period\n+                                calendar.add(Calendar.YEAR, 1);\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+                }\n+            }\n+\n+            // Reset hours, minutes and seconds to 0\n+            calendar.set(Calendar.HOUR, 0);\n+            calendar.set(Calendar.MINUTE, 0);\n+            calendar.set(Calendar.SECOND, 0);\n+            calendar.set(Calendar.MILLISECOND, 0);\n+        }\n+\n+        return calendar.getTime();\n+    }\n+\n+    public Date getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n+        try {\n+            Pair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n+            if (ret.getLeft()) {\n+                return ret.getRight();\n+            }\n+        } catch (ExtendMembershipException e) {\n+        }\n+\n+        return null;\n+    }\n+\n+    /* Check if the user can apply for VO membership\n+     */\n+    public boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, ExtendMembershipException {\n+        return this.canBeMemberInternal(sess, vo, user, loa, true);\n+    }\n+\n+    /* Check if the user can apply for VO membership\n+     */\n+    public boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException {\n+        try {\n+            return this.canBeMemberInternal(sess, vo, user, loa, false);\n+        } catch (ExtendMembershipException e) {\n+            return false;\n+        }\n+    }\n+\n+    public RichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember) throws InternalErrorException {\n+        if (richMember == null) {\n+            throw new InternalErrorException(\"RichMember can't be null.\");\n+        }\n+        if (richMember.getUser() == null) {\n+            throw new InternalErrorException(\"User cant be null in RichMember.\");\n+        }\n+        //Filtering members attributes\n+        if (richMember.getMemberAttributes() != null) {\n+            List<Attribute> memberAttributes = richMember.getMemberAttributes();\n+            List<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n+            for (Attribute membAttr : memberAttributes) {\n+                if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, richMember, null)) {\n+                    membAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, richMember, null));\n+                    allowedMemberAttributes.add(membAttr);\n+                }\n+            }\n+            richMember.setMemberAttributes(allowedMemberAttributes);\n+        }\n+        //Filtering users attributes\n+        if (richMember.getUserAttributes() != null) {\n+            List<Attribute> userAttributes = richMember.getUserAttributes();\n+            List<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n+            for (Attribute userAttr : userAttributes) {\n+                if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richMember.getUser(), null)) {\n+                    userAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richMember.getUser(), null));\n+                    allowedUserAttributes.add(userAttr);\n+                }\n+            }\n+            richMember.setUserAttributes(allowedUserAttributes);\n+        }\n+        return richMember;\n+    }\n+\n+    public List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers) throws InternalErrorException {\n+        List<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n+        if (richMembers == null || richMembers.isEmpty()) {\n+            return filteredRichMembers;\n+        }\n+\n+        for (RichMember rm : richMembers) {\n+            filteredRichMembers.add(this.filterOnlyAllowedAttributes(sess, rm));\n+        }\n+\n+        return filteredRichMembers;\n+    }\n+\n+    public List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, boolean useContext) throws InternalErrorException {\n+        //If no context should be used - every attribute is unique in context of member (for every member test access rights for all attributes again)\n+        if (!useContext) {\n+            return filterOnlyAllowedAttributes(sess, richMembers);\n+        }\n+\n+        //If context should be used - every attribute is unique in context of friendlyName (every attribute test only once per friendlyName)\n+        List<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n+        if (richMembers == null || richMembers.isEmpty()) {\n+            return filteredRichMembers;\n+        }\n+\n+        // attr_name to boolean where null means - no rights at all, false means no write rights, true means read and write rights\n+        Map<String, Boolean> contextMap = new HashMap<>();\n+        // voId is there the context\n+        Integer voId = null;\n+        for (RichMember rm : richMembers) {\n+            //set or test voId for testing of context\n+            if (voId == null) {\n+                voId = rm.getVoId();\n+            } else {\n+                if (rm.getVoId() != voId) {\n+                    throw new InternalErrorException(\"Method using filtering by context, but some members are not from the same Vo!\");\n+                }\n+            }\n+\n+            //Filtering members attributes\n+            if (rm.getMemberAttributes() != null) {\n+                List<Attribute> memberAttributes = rm.getMemberAttributes();\n+                List<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n+                for (Attribute membAttr : memberAttributes) {\n+                    //if there is record in contextMap, use it\n+                    if (contextMap.containsKey(membAttr.getFriendlyName())) {\n+                        Boolean isWritable = contextMap.get(membAttr.getFriendlyName());\n+                        if (isWritable != null) {\n+                            membAttr.setWritable(isWritable);\n+                            allowedMemberAttributes.add(membAttr);\n+                        }\n+                        //if not, get information about authz rights and set record to contextMap\n+                    } else {\n+                        if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, rm, null)) {\n+                            boolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, rm, null);\n+                            membAttr.setWritable(isWritable);\n+                            allowedMemberAttributes.add(membAttr);\n+                            contextMap.put(membAttr.getFriendlyName(), isWritable);\n+                        } else {\n+                            contextMap.put(membAttr.getFriendlyName(), null);\n+                        }\n+                    }\n+                }\n+                rm.setMemberAttributes(allowedMemberAttributes);\n+            }\n+            //Filtering users attributes\n+            if (rm.getUserAttributes() != null) {\n+                List<Attribute> userAttributes = rm.getUserAttributes();\n+                List<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n+                for (Attribute userAttr : userAttributes) {\n+                    //if there is record in contextMap, use it\n+                    if (contextMap.containsKey(userAttr.getFriendlyName())) {\n+                        Boolean isWritable = contextMap.get(userAttr.getFriendlyName());\n+                        if (isWritable != null) {\n+                            userAttr.setWritable(isWritable);\n+                            allowedUserAttributes.add(userAttr);\n+                        }\n+                        //if not, get information about authz rights and set record to contextMap\n+                    } else {\n+                        if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, rm.getUser(), null)) {\n+                            boolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, rm.getUser(), null);\n+                            userAttr.setWritable(isWritable);\n+                            allowedUserAttributes.add(userAttr);\n+                            contextMap.put(userAttr.getFriendlyName(), isWritable);\n+                        } else {\n+                            contextMap.put(userAttr.getFriendlyName(), null);\n+                        }\n+                    }\n+                    rm.setUserAttributes(allowedUserAttributes);\n+                }\n+            }\n+            filteredRichMembers.add(rm);\n+        }\n+        return filteredRichMembers;\n+    }\n+\n+    /**\n+     * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n+     * <p>\n+     * Check if the user can apply for VO membership. VO restrictions doesn't apply to service users.\n+     *\n+     * @param sess            session\n+     * @param vo              VO to apply for\n+     * @param user            User applying for membership\n+     * @param loa             level of assurance provided by user's external identity\n+     * @param throwExceptions TRUE = throw exceptions / FALSE = return false when user can't be member of VO\n+     * @return True if user can become member of VO / false or exception otherwise.\n+     * @throws ExtendMembershipException When user can't be member of VO and throwExceptions is set to true\n+     * @throws InternalErrorException\n+     */\n+    protected boolean canBeMemberInternal(PerunSession sess, Vo vo, User user, String loa, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n+\n+        if (user != null && user.isServiceUser()) {\n+            return true;\n+        }\n+\n+        // Check if the VO has set membershipExpirationRules attribute\n+        LinkedHashMap<String, String> membershipExpirationRules;\n+\n+        Attribute membershipExpirationRulesAttribute = null;\n+        try {\n+            membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n+            membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n+            // If attribute was not filled, then silently exit\n+            if (membershipExpirationRules == null) {\n+                return true;\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            // No rules set, so leave it as it is\n+            return true;\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(\"Shouldn't happen.\");\n+        }\n+\n+        // Which LOA we won't allow?\n+        if (membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) {\n+            if (loa == null) {\n+                // User doesn't have LOA defined and LOA is required for getting in, so do not allow membership.\n+                log.warn(\"User {} doesn't have LOA defined, but 'doNotAllowLoa' option is set for VO {}.\", user, vo);\n+                if (throwExceptions) {\n+                    throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA,\n+                            \"User \" + user + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + vo.getId() + \".\");\n+                } else {\n+                    return false;\n+                }\n+            }\n+\n+            String[] doNotAllowLoas = membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName).split(\",\");\n+\n+            for (String doNotAllowLoa : doNotAllowLoas) {\n+                if (doNotAllowLoa.equals(loa)) {\n+                    // User has LOA which is not allowed for getting in\n+                    if (throwExceptions) {\n+                        throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n+                                \"User \" + user + \" doesn't have required LOA for VO id \" + vo.getId() + \".\");\n+                    } else {\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n+     * <p>\n+     * If setAttributeValue is true, then store the membership expiration date into the attribute, otherwise\n+     * return object pair containing true/false if the member can be extended and date specifying exact date of the new expiration\n+     *\n+     * @param sess              session\n+     * @param member            member to check / set membership expiration\n+     * @param setAttributeValue TRUE = set new membership expiration date / FALSE = do NOT set new expiration date (just calculate it)\n+     * @param throwExceptions   TRUE = throw exception / FALSE = return false when member can't extend membership\n+     * @return Pair with result in left side (can / can't extend membership) and Date in right side telling new membership expiration date\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException When member can't extend membership and throwException is set to true.\n+     */\n+    protected Pair<Boolean, Date> manageMembershipExpiration(PerunSession sess, Member member, boolean setAttributeValue, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n+        // Check if the VO has set membershipExpirationRules attribute\n+        LinkedHashMap<String, String> membershipExpirationRules;\n+\n+        Vo vo;\n+        Attribute membershipExpirationRulesAttribute = null;\n+        try {\n+            vo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n+            membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n+            membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n+            // If attribute was not filled, then silently exit\n+            if (membershipExpirationRules == null) {\n+                return new Pair<Boolean, Date>(true, null);\n+            }\n+        } catch (VoNotExistsException e) {\n+            throw new ConsistencyErrorException(\"Member \" + member + \" of non-existing VO id=\" + member.getVoId());\n+        } catch (AttributeNotExistsException e) {\n+            // There is no attribute definition for membership expiration rules.\n+            return new Pair<Boolean, Date>(true, null);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(\"Shouldn't happen.\");\n+        }\n+\n+        // Get user LOA\n+        String memberLoa = null;\n+        try {\n+            Attribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n+            memberLoa = (String) loa.getValue();\n+        } catch (AttributeNotExistsException e) {\n+            // Ignore, will be probably set further\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        // Get current membershipExpiration date\n+        Attribute membershipExpirationAttribute = null;\n+        try {\n+            membershipExpirationAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member,\n+                    AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n+        } catch (AttributeNotExistsException e) {\n+            throw new ConsistencyErrorException(\"Attribute: \" + AttributesManager.NS_MEMBER_ATTR_DEF +\n+                    \":membershipExpiration\" + \" must be defined in order to use membershipExpirationRules\");\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        boolean isServiceUser = false;\n+        try {\n+            User user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+            isServiceUser = user.isServiceUser();\n+        } catch (UserNotExistsException ex) {\n+            throw new ConsistencyErrorException(\"User must exists for \" + member + \" when checking expiration rules.\");\n+        }\n+\n+        // Which LOA we won't extend?\n+        // This is applicable only for members who have already set expiration from the previous period\n+        // and are not service users\n+        if (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null &&\n+                membershipExpirationAttribute.getValue() != null &&\n+                !isServiceUser) {\n+            if (memberLoa == null) {\n+                // Member doesn't have LOA defined and LOA is required for extension, so do not extend membership.\n+                log.warn(\"Member {} doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id {}.\", member, member.getVoId());\n+                if (throwExceptions) {\n+                    throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA,\n+                            \"Member \" + member + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + member.getVoId() + \".\");\n+                } else {\n+                    return new Pair<Boolean, Date>(false, null);\n+                }\n+            }\n+\n+            String[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n+\n+            for (String doNotExtendLoa : doNotExtendLoas) {\n+                if (doNotExtendLoa.equals(memberLoa)) {\n+                    // Member has LOA which is not allowed for extension\n+                    if (throwExceptions) {\n+                        throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION,\n+                                \"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n+                    } else {\n+                        return new Pair<Boolean, Date>(false, null);\n+                    }\n+                }\n+            }\n+        }\n+\n+        Calendar calendar = Calendar.getInstance();\n+\n+        // Does the user have expired membership, if yes, then for canExtendMembership return true\n+        if (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n+            try {\n+                Date currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n+\n+                Calendar currentMemberExpirationCalendar = Calendar.getInstance();\n+                currentMemberExpirationCalendar.setTime(currentMemberExpiration);\n+\n+                if (calendar.after(currentMemberExpirationCalendar)) {\n+                    return new Pair<Boolean, Date>(true, null);\n+                }\n+            } catch (ParseException e) {\n+                throw new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n+            }\n+        }\n+\n+        String period = null;\n+        // Default extension\n+        if (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n+            period = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n+        }\n+\n+        // Do we extend particular LoA? Attribute syntax LoA|[period][.]\n+        if (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n+            // Which period\n+            String[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n+            String loa = membershipPeriodLoa[0];\n+            String periodLoa = membershipPeriodLoa[1];\n+            // Does the user have this LoA?\n+            if (loa.equals(memberLoa)) {\n+                if (periodLoa.endsWith(\".\")) {\n+                    // If period ends with ., then we do not allow extension for users with particular LoA if they are already members\n+                    if (membershipExpirationAttribute.getValue() != null) {\n+                        if (throwExceptions) {\n+                            throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION,\n+                                    \"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n+                        } else {\n+                            return new Pair<Boolean, Date>(false, null);\n+                        }\n+                    }\n+                    // remove dot from the end of the string\n+                    period = periodLoa.substring(0, periodLoa.length() - 1);\n+                } else {\n+                    period = periodLoa;\n+                }\n+            }\n+        }\n+\n+        // Do we extend for x months or for static date?\n+        if (period != null) {\n+            if (period.startsWith(\"+\")) {\n+                if (!isMemberInGracePeriod(membershipExpirationRules, (String) membershipExpirationAttribute.getValue())) {\n+                    if (throwExceptions) {\n+                        throw new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(),\n+                                \"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n+                    } else {\n+                        return new Pair<Boolean, Date>(false, null);\n+                    }\n+                }\n+                // By default do not add nothing\n+                int amount = 0;\n+                int field;\n+\n+                // We will add days/months/years\n+                Pattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n+                Matcher m = p.matcher(period);\n+                if (m.matches()) {\n+                    String countString = m.group(1);\n+                    amount = Integer.valueOf(countString);\n+\n+                    String dmyString = m.group(2);\n+                    if (dmyString.equals(\"d\")) {\n+                        field = Calendar.DAY_OF_YEAR;\n+                    } else if (dmyString.equals(\"m\")) {\n+                        field = Calendar.MONTH;\n+                    } else if (dmyString.equals(\"y\")) {\n+                        field = Calendar.YEAR;\n+                    } else {\n+                        throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+                    }\n+                } else {\n+                    throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+                }\n+\n+                // Add days/months/years\n+                calendar.add(field, amount);\n+            } else {\n+                // We will extend to particular date\n+\n+                // Parse date\n+                Pattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n+                Matcher m = p.matcher(period);\n+                if (m.matches()) {\n+                    int day = Integer.valueOf(m.group(1));\n+                    int month = Integer.valueOf(m.group(2));\n+\n+                    // Get current year\n+                    int year = calendar.get(Calendar.YEAR);\n+\n+                    // We must detect if the extension date is in current year or in a next year\n+                    boolean extensionInNextYear;\n+                    Calendar extensionCalendar = Calendar.getInstance();\n+                    extensionCalendar.set(year, month - 1, day);\n+                    Calendar today = Calendar.getInstance();\n+                    if (extensionCalendar.before(today)) {\n+                        // Extension date is in a next year\n+                        extensionInNextYear = true;\n+                    } else {\n+                        // Extension is in the current year\n+                        extensionInNextYear = false;\n+                    }\n+\n+                    // Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n+                    calendar.set(year, month - 1, day); // month is 0-based\n+                    if (extensionInNextYear) {\n+                        calendar.add(Calendar.YEAR, 1);\n+                    }\n+\n+                    // ***** GRACE PERIOD *****\n+                    // Is there a grace period?\n+                    if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n+                        String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+                        // If the extension is requested in period-gracePeriod then extend to next period\n+\n+                        // Get the value of the grace period\n+                        p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n+                        m = p.matcher(gracePeriod);\n+                        if (m.matches()) {\n+                            String countString = m.group(1);\n+                            int amount = Integer.valueOf(countString);\n+\n+                            // Set the gracePeriodCalendar to the extension date\n+                            Calendar gracePeriodCalendar = Calendar.getInstance();\n+                            gracePeriodCalendar.set(year, month - 1, day);\n+                            if (extensionInNextYear) {\n+                                gracePeriodCalendar.add(Calendar.YEAR, 1);\n+                            }\n+\n+                            int field;\n+                            String dmyString = m.group(2);\n+                            if (dmyString.equals(\"d\")) {\n+                                field = Calendar.DAY_OF_YEAR;\n+                            } else if (dmyString.equals(\"m\")) {\n+                                field = Calendar.MONTH;\n+                            } else if (dmyString.equals(\"y\")) {\n+                                field = Calendar.YEAR;\n+                            } else {\n+                                throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+                            }\n+                            // subtracts period definition, e.g. 3m\n+                            gracePeriodCalendar.add(field, -amount);\n+\n+                            // Check if we are in grace period\n+                            if (gracePeriodCalendar.before(Calendar.getInstance())) {\n+                                // We are in grace period, so extend to the next period\n+                                calendar.add(Calendar.YEAR, 1);\n+                            }\n+\n+                            // If we do not need to set the attribute value, only check if the current member's expiration time is not in grace period\n+                            if (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n+                                try {\n+                                    Date currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n+                                    // subtracts grace period from the currentMemberExpiration\n+                                    Calendar currentMemberExpirationCalendar = Calendar.getInstance();\n+                                    currentMemberExpirationCalendar.setTime(currentMemberExpiration);\n+\n+                                    currentMemberExpirationCalendar.add(field, -amount);\n+\n+                                    // if today is before that time, user can extend his period\n+                                    if (currentMemberExpirationCalendar.after(Calendar.getInstance())) {\n+                                        if (throwExceptions) {\n+                                            throw new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(),\n+                                                    \"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n+                                        } else {\n+                                            return new Pair<Boolean, Date>(false, null);\n+                                        }\n+                                    }\n+                                } catch (ParseException e) {\n+                                    throw new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+                }\n+            }\n+\n+            // Reset hours, minutes and seconds to 0\n+            calendar.set(Calendar.HOUR, 0);\n+            calendar.set(Calendar.MINUTE, 0);\n+            calendar.set(Calendar.SECOND, 0);\n+            calendar.set(Calendar.MILLISECOND, 0);\n+\n+            // Set new value of the membershipExpiration for the member\n+            if (setAttributeValue) {\n+                membershipExpirationAttribute.setValue(BeansUtils.getDateFormatterWithoutTime().format(calendar.getTime()));\n+                try {\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, member, membershipExpirationAttribute);\n+                } catch (WrongAttributeValueException e) {\n+                    throw new InternalErrorException(\"Wrong value: \" + membershipExpirationAttribute.getValue(), e);\n+                } catch (WrongReferenceAttributeValueException e) {\n+                    throw new InternalErrorException(e);\n+                } catch (WrongAttributeAssignmentException e) {\n+                    throw new InternalErrorException(e);\n+                }\n+            }\n+        }\n+        return new Pair<Boolean, Date>(true, calendar.getTime());\n+    }\n+\n+    /**\n+     * Return true if member is in grace period. If grace period is not set return always true.\n+     * If member has not expiration date return always true.\n+     *\n+     * @param membershipExpirationRules\n+     * @param membershipExpiration\n+     * @return true if member is in grace period. Be carefull about special cases - read method description.\n+     * @throws InternalErrorException\n+     */\n+    private boolean isMemberInGracePeriod(Map<String, String> membershipExpirationRules, String membershipExpiration) throws InternalErrorException {\n+        // Is a grace period set?\n+        if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) == null) {\n+            // If not grace period is infinite\n+            return true;\n+        }\n+        // does member have expiration date?\n+        if (membershipExpiration == null) {\n+            // if not grace period is infinite\n+            return true;\n+        }\n+\n+        String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+\n+        // If the extension is requested in period-gracePeriod then extend to next period\n+        Pattern p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n+        Matcher m = p.matcher(gracePeriod);\n+\n+        if (!m.matches()) {\n+            throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+        }\n+\n+        int amount = Integer.valueOf(m.group(1));\n+\n+        int field;\n+        String dmyString = m.group(2);\n+        if (dmyString.equals(\"d\")) {\n+            field = Calendar.DAY_OF_YEAR;\n+        } else if (dmyString.equals(\"m\")) {\n+            field = Calendar.MONTH;\n+        } else if (dmyString.equals(\"y\")) {\n+            field = Calendar.YEAR;\n+        } else {\n+            throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+        }\n+\n+        try {\n+            Calendar beginOfGracePeriod = Calendar.getInstance();\n+            DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            beginOfGracePeriod.setTime(format.parse(membershipExpiration));\n+            beginOfGracePeriod.add(field, -amount);\n+            if (beginOfGracePeriod.before(Calendar.getInstance())) {\n+                return true;\n+            }\n+        } catch (ParseException e) {\n+            throw new InternalErrorException(\"Wrong format of membership expiration attribute: \" + membershipExpiration, e);\n+        }\n+\n+        return false;\n+\n+    }\n+\n+    public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException {\n+\n+        User user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n+        boolean found = false;\n+        for (Attribute a : logins) {\n+            if (a.getFriendlyNameParameter().equals(namespace)) {\n+                found = true;\n+            }\n+        }\n+        if (!found) {\n+            throw new InternalErrorException(user.toString() + \" doesn't have login in namespace: \" + namespace);\n+        }\n+\n+        String email = \"\";\n+        try {\n+            Attribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+            if (a != null && a.getValue() != null) {\n+                email = (String) a.getValue();\n+            }\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (AttributeNotExistsException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        int id = getMembersManagerImpl().storePasswordResetRequest(sess, user, namespace);\n+        Utils.sendPasswordResetEmail(user, email, namespace, url, id);\n+\n+    }\n+\n+    /**\n+     * Take list of members and set them all the same type.\n+     *\n+     * @param members\n+     * @param type\n+     * @return list of members with the same type\n+     * @throws InternalErrorException\n+     */\n+    private List<Member> setAllMembersSameType(List<Member> members, MembershipType type) throws InternalErrorException {\n+        if (members == null) {\n+            return new ArrayList<Member>();\n+        }\n+        for (Member m : members) {\n+            m.setMembershipType(type);\n+        }\n+        return members;\n+    }\n+\n+    /**\n+     * Gets the membersManagerImpl.\n+     *\n+     * @return The membersManagerImpl.\n+     */\n+    public MembersManagerImplApi getMembersManagerImpl() {\n+        return this.membersManagerImpl;\n+    }\n+\n+    /**\n+     * Gets the perunBl.\n+     *\n+     * @return The perunBl.\n+     */\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n+\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n \n \n }\n",
            "diff_size": 3170
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/139/MembersManagerBlImpl.java\nindex c3f617866dc..192ad370c74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/139/MembersManagerBlImpl.java\n@@ -1,7 +1,6 @@\n package cz.metacentrum.perun.core.blImpl;\n \n import cz.metacentrum.perun.core.api.ActionType;\n-\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n@@ -16,7 +15,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-\n import cz.metacentrum.perun.core.api.exceptions.GroupOperationsException;\n import cz.metacentrum.perun.core.api.exceptions.LoginNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.PasswordCreationFailedException;\n@@ -24,7 +22,6 @@ import cz.metacentrum.perun.core.api.exceptions.PasswordOperationTimeoutExceptio\n import cz.metacentrum.perun.core.api.exceptions.PasswordStrengthFailedException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import cz.metacentrum.perun.core.api.BeansUtils;\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n@@ -83,2007 +80,2003 @@ import cz.metacentrum.perun.core.implApi.ExtSourceApi;\n import cz.metacentrum.perun.core.implApi.ExtSourceSimpleApi;\n import cz.metacentrum.perun.core.implApi.MembersManagerImplApi;\n \n+\n public class MembersManagerBlImpl implements MembersManagerBl {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n-\n-\tprivate MembersManagerImplApi membersManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t */\n-\tpublic MembersManagerBlImpl(MembersManagerImplApi membersManagerImpl) {\n-\t\tthis.membersManagerImpl = membersManagerImpl;\n-\t}\n-\n-\tpublic void deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n-\t\tVo vo = this.getMemberVo(sess, member);\n-\n-\t\tUser user;\n-\t\ttry {\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t} catch (UserNotExistsException e1) {\n-\t\t\tthrow new ConsistencyErrorException(\"Removing member who doesn't have corresponding user.\", e1);\n-\t\t}\n-\n-\t\tList<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\n-\t\tMap<Facility, List<Attribute>> requiredAttributesBeforeMemberRemove = new HashMap<Facility, List<Attribute>>();\n-\n-\t\tfor(Facility facility : allowedFacilities) {\n-\t\t\t// Get actually required attributes, they will be later compared with list of required attributes when the member will be removed from all resources in this VO\n-\t\t\trequiredAttributesBeforeMemberRemove.put(facility, getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n-\t\t}\n-\n-\t\t// Remove member from all groups\n-\t\tList<Group> memberGroups = getPerunBl().getGroupsManagerBl().getMemberDirectGroups(sess, member);\n-\t\tfor (Group group: memberGroups) {\n-\t\t\t// Member must be removed from the members group using separate method\n-\t\t\tif(group.getName().equals(VosManager.MEMBERS_GROUP)) continue;\n-\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getGroupsManagerBl().removeMember(sess, group, member);\n-\t\t\t} catch (NotGroupMemberException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"getMemberGroups return group where the member is not member\", e);\n-\t\t\t} catch (GroupNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Remove member from the VO members group\n-\t\ttry {\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getGroupsManagerBl().removeMemberFromMembersOrAdministratorsGroup(sess, g, member);\n-\t\t\t} catch (NotGroupMemberException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member is not in the \\\"members\\\" group.\" + member + \"  \" + g, e);\n-\t\t\t}\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// Remove member's  attributes (namespaces: member and resource-member)\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, member);\n-\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\tfor(Resource resource : resources) {\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, member);\n-\t\t\t}\n-\t\t} catch(AttributeValueException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member is removed from all groups. There are no required attribute for this member. Member's attributes can be removed without problem.\", ex);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\t// Remove user-facility attributes which are no longer required\n-\t\tfor(Facility facility : allowedFacilities) {\n-\t\t\tList<Attribute> requiredAttributes = requiredAttributesBeforeMemberRemove.get(facility);\n-\t\t\t//remove currently required attributes from requiredAttributesBeforeMemberRemove\n-\t\t\trequiredAttributes.removeAll(getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n-\t\t\t//remove attributes which are no longer required\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().removeAttributes(sess, facility, user, requiredAttributes);\n-\t\t\t} catch(AttributeValueException | WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Remove all members bans\n-\t\tList<BanOnResource> bansOnResource = getPerunBl().getResourcesManagerBl().getBansForMember(sess, member.getId());\n-\t\tfor(BanOnResource banOnResource : bansOnResource) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getResourcesManagerBl().removeBan(sess, banOnResource.getId());\n-\t\t\t} catch (BanNotExistsException ex) {\n-\t\t\t\t//it is ok, we just want to remove it anyway\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t/* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n-\t\t\t for (Facility facility: facilitiesBeforeMemberRemove) {\n-\t\t// Remove user-facility attributes\n-\t\ttry {\n-\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, facility, user);\n-\t\tlog.debug(\"Removing user-facility attributes for facility {}\", facility);\n-\t\t} catch (AttributeValueException e) {\n-\t\tthrow new ConsistencyErrorException(\"Member is removed from all resources. There are no required attribute for this member. User-facility attributes can be removed without problem.\", e);\n-\t\t}\n-\t\t\t }\n-\t\t\t */\n-\n-\t\t// Remove member from the DB\n-\t\tgetMembersManagerImpl().deleteMember(sess, member);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} deleted.\", member);\n-\t}\n-\n-\tpublic void deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n-\t\tfor (Member m: this.getMembers(sess, vo)) {\n-\t\t\tthis.deleteMember(sess, m);\n-\t\t}\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n-\t\treturn this.createMember(sess, vo, user, null);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n-\t\ttry {\n-\t\t\tMember member = getMemberByUser(sess, vo, user);\n-\t\t\tthrow new AlreadyMemberException(member);\n-\t\t} catch(MemberNotExistsException IGNORE) {\n-\t\t}\n-\t\tMember member = getMembersManagerImpl().createMember(sess, vo, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", member);\n-\n-\t\t// Set the initial membershipExpiration\n-\n-\t\t// Get user LOA\n-\t\tString memberLoa = null;\n-\t\ttry {\n-\t\t\tAttribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n-\t\t\tmemberLoa = (String) loa.getValue();\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// user has no loa defined - if required by VO, it will be stopped in checking method later\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// check if user can be member - service members are not checked for LoA\n-\t\tthis.canBeMemberInternal(sess, vo, user, memberLoa, true);\n-\n-\t\t// set initial membership expiration\n-\t\tthis.extendMembership(sess, member);\n-\n-\t\tinsertToMemberGroup(sess, member, vo);\n-\n-\t\t// add member also to all groups in list\n-\t\tif(groups != null && !groups.isEmpty()) {\n-\t\t\tfor(Group group: groups) {\n-\t\t\t\ttry {\n-\t\t\t\t\tperunBl.getGroupsManagerBl().addMember(sess, group, member);\n-\t\t\t\t} catch (NotMemberOfParentGroupException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\", ex);\n-\t\t\t\t} catch (GroupNotExistsException e) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Set default membership expiration\n-\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n-\t}\n-\n-\tpublic Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\tif(specificUserType.equals(SpecificUserType.SERVICE)) candidate.setFirstName(\"(Service)\");\n-\n-\t\t//Set organization only if user in sessione exists (in tests there is no user in session)\n-\t\tif(sess.getPerunPrincipal().getUser() != null) {\n-\t\t\tString userOrganization = AttributesManager.NS_USER_ATTR_DEF + \":organization\";\n-\t\t\tString memberOrganization = AttributesManager.NS_MEMBER_ATTR_DEF + \":organization\";\n-\n-\t\t\tMap<String, String> candidateAttributes =  new HashMap<>();\n-\t\t\tif(candidate.getAttributes() != null) candidateAttributes.putAll(candidate.getAttributes());\n-\n-\t\t\tif(candidateAttributes.get(memberOrganization) == null) {\n-\t\t\t\tAttribute actorUserOrganization;\n-\t\t\t\tString actorUserOrganizationValue;\n-\t\t\t\ttry {\n-\t\t\t\t\tactorUserOrganization = perunBl.getAttributesManagerBl().getAttribute(sess, sess.getPerunPrincipal().getUser(), userOrganization);\n-\t\t\t\t\tactorUserOrganizationValue = (String) actorUserOrganization.getValue();\n-\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\n-\t\t\t\tif(actorUserOrganizationValue != null) {\n-\t\t\t\t\tcandidateAttributes.put(memberOrganization, actorUserOrganizationValue);\n-\t\t\t\t\tcandidate.setAttributes(candidateAttributes);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//create member for service user from candidate\n-\t\tMember member = createMember(sess, vo, specificUserType, candidate, groups, null);\n-\n-\t\t//set specific user owners or sponsors\n-\t\tUser specificUser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tfor(User u: specificUserOwners) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getUsersManagerBl().addSpecificUserOwner(sess, u, specificUser);\n-\t\t\t} catch (RelationExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, User owner, Vo vo, int loa) throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, AlreadyMemberException, WrongReferenceAttributeValueException, WrongAttributeValueException, UserNotExistsException, ExtSourceNotExistsException, LoginNotExistsException {\n-\t\tString loginNamespaceUri = AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + namespace;\n-\t\tboolean passwordPresent = params.get(\"password\") != null;\n-\t\tif(params.get(loginNamespaceUri) == null) {\n-\t\t\tMap<String, String> generatedParams = getPerunBl().getUsersManagerBl().generateAccount(sess, namespace, params);\n-\t\t\tparams.putAll(generatedParams);\n-\t\t} else if (passwordPresent) {\n-\t\t\tgetPerunBl().getUsersManagerBl().reservePassword(sess, params.get(loginNamespaceUri), namespace, params.get(\"password\"));\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"If login for new account is provided, password must be provided also\");\n-\t\t}\n-\t\tIterator<String> iterator = params.keySet().iterator();\n-\t\t// remove non-valid entries from map for Candidate otherwise it would fail to create member\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tString next = iterator.next();\n-\t\t\tif (!next.startsWith(\"urn:perun:user\") && !next.startsWith(\"urn:perun:member\")) {\n-\t\t\t\titerator.remove();\n-\t\t\t}\n-\t\t}\n-\t\tString extSourceLogin = params.get(loginNamespaceUri) + extSourcePostfix;\n-\t\tUserExtSource userExtSource = new UserExtSource(extSource, loa, extSourceLogin);\n-\t\tCandidate candidate = new Candidate(userExtSource, params);\n-\t\tMember member = this.createSpecificMember(sess, vo, candidate, Arrays.asList(owner), SpecificUserType.SPONSORED);\n-\t\tthis.validateMemberAsync(sess, member);\n-\t\tif (passwordPresent) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\tgetPerunBl().getUsersManagerBl().validatePasswordAndSetExtSources(sess, user, params.get(loginNamespaceUri), namespace);\n-\t\t}\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMemberSync(sess, vo, candidate, null);\n-\t}\n-\n-\tpublic Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\tMember member = createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, overwriteUserAttributes);\n-\n-\t\t//Validate synchronously\n-\t\ttry {\n-\t\t\tmember = getPerunBl().getMembersManagerBl().validateMember(sess, member);\n-\t\t} catch (AttributeValueException ex) {\n-\t\t\tlog.info(\"Member can't be validated. He stays in invalid state. Cause: \" + ex);\n-\t\t}\n-\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMemberSync(sess, vo, candidate, groups, null);\n-\t}\n-\n-\tpublic Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createSpecificMemberSync(sess, vo, candidate, specificUserOwners, specificUserType, null);\n-\t}\n-\n-\tpublic Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\n-\t\tMember member = createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, groups);\n-\n-\t\t//Validate synchronously\n-\t\ttry {\n-\t\t\tmember = validateMember(sess, member);\n-\t\t} catch (AttributeValueException ex) {\n-\t\t\tlog.info(\"Specific Member can't be validated. He stays in invalid state. Cause: \" + ex);\n-\t\t}\n-\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn createMember(sess, vo, candidate, null);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, null);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\t\treturn this.createMember(sess, vo, specificUserType, candidate, null, new ArrayList<String>());\n-\t}\n-\n-\t//MAIN METHOD\n-\tpublic Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\tlog.debug(\"Creating member for VO {} from candidate {}\", vo, candidate);\n-\n-\t\t// Get the user\n-\t\tUser user = null;\n-\n-\t\tif (candidate.getUserExtSources() != null) {\n-\t\t\tfor (UserExtSource ues: candidate.getUserExtSources()) {\n-\t\t\t\t// Check if the extSource exists\n-\t\t\t\tExtSource tmpExtSource = getPerunBl().getExtSourcesManagerBl().checkOrCreateExtSource(sess, ues.getExtSource().getName(),\n-\t\t\t\t\t\tues.getExtSource().getType());\n-\t\t\t\t// Set the extSource ID\n-\t\t\t\tues.getExtSource().setId(tmpExtSource.getId());\n-\t\t\t\ttry {\n-\t\t\t\t\t// Try to find the user by userExtSource\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByExtSourceNameAndExtLogin(sess, ues.getExtSource().getName(), ues.getLogin());\n-\t\t\t\t} catch (UserExtSourceNotExistsException e) {\n-\t\t\t\t\t// This is OK, non-existent userExtSource will be assigned later\n-\t\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\t\t// Ignore, we are only checking if the user exists\n-\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t// Ignore, we are only checking if the user exists\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// If user hasn't been found, then create him\n-\t\tif (user == null) {\n-\t\t\tuser = new User();\n-\t\t\tuser.setFirstName(candidate.getFirstName());\n-\t\t\tuser.setLastName(candidate.getLastName());\n-\t\t\tuser.setMiddleName(candidate.getMiddleName());\n-\t\t\tuser.setTitleAfter(candidate.getTitleAfter());\n-\t\t\tuser.setTitleBefore(candidate.getTitleBefore());\n-\t\t\tif(specificUserType.equals(specificUserType.SERVICE)) user.setServiceUser(true);\n-\t\t\tif(specificUserType.equals(specificUserType.SPONSORED)) user.setSponsoredUser(true);\n-\t\t\t// Store the user, this must be done in separate transaction\n-\t\t\tuser = getPerunBl().getUsersManagerBl().createUser(sess, user);\n-\n-\t\t\tlog.debug(\"createMember: new user: {}\", user);\n-\t\t}\n-\n-\t\t// Assign missing userExtSource and update LoA\n-\t\tif (candidate.getUserExtSources() != null) {\n-\t\t\tfor (UserExtSource userExtSource : candidate.getUserExtSources()) {\n-\t\t\t\ttry {\n-\t\t\t\t\tUserExtSource currentUserExtSource = getPerunBl().getUsersManagerBl().getUserExtSourceByExtLogin(sess, userExtSource.getExtSource(), userExtSource.getLogin());\n-\t\t\t\t\t// Update LoA\n-\t\t\t\t\tcurrentUserExtSource.setLoa(userExtSource.getLoa());\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().updateUserExtSource(sess, currentUserExtSource);\n-\t\t\t\t} catch (UserExtSourceNotExistsException e) {\n-\t\t\t\t\t// Create userExtSource\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, userExtSource);\n-\t\t\t\t\t} catch (UserExtSourceExistsException e1) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Adding userExtSource which already exists: \" + userExtSource);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tMember member = getMemberByUser(sess, vo, user);\n-\t\t\tthrow new AlreadyMemberException(member);\n-\t\t} catch(MemberNotExistsException IGNORE) {\n-\t\t}\n-\n-\t\t// Create the member\n-\t\tMember member = getMembersManagerImpl().createMember(sess, vo, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", member);\n-\n-\t\t// Create the member's attributes\n-\t\tList<Attribute> membersAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> usersAttributesToMerge = new ArrayList<>();\n-\t\tList<Attribute> usersAttributesToModify = new ArrayList<>();\n-\t\tif (candidate.getAttributes() != null) {\n-\t\t\tfor (String attributeName: candidate.getAttributes().keySet()) {\n-\t\t\t\tAttributeDefinition attributeDefinition;\n-\t\t\t\ttry {\n-\t\t\t\t\tattributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\t\t\t\t} catch(AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tAttribute attribute = new Attribute(attributeDefinition);\n-\t\t\t\tattribute.setValue(getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), attribute.getType()));\n-\t\t\t\tif (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_DEF) ||\n-\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_OPT)) {\n-\t\t\t\t\t// This is member's attribute\n-\t\t\t\t\tmembersAttributes.add(attribute);\n-\t\t\t\t} else if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_DEF) ||\n-\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_OPT)) {\n-\t\t\t\t\tif(overwriteUserAttributes != null && !overwriteUserAttributes.isEmpty() && overwriteUserAttributes.contains(attribute.getName())) {\n-\t\t\t\t\t\tusersAttributesToModify.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tusersAttributesToMerge.add(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Store the attributes\n-\t\ttry {\n-\t\t\t//if empty, skip setting or merging empty arrays of attributes at all\n-\t\t\tif(!membersAttributes.isEmpty()) getPerunBl().getAttributesManagerBl().setAttributes(sess, member, membersAttributes);\n-\t\t\tif(!usersAttributesToMerge.isEmpty()) getPerunBl().getAttributesManagerBl().mergeAttributesValues(sess, user, usersAttributesToMerge);\n-\t\t\tif(!usersAttributesToModify.isEmpty()) getPerunBl().getAttributesManagerBl().setAttributes(sess, user, usersAttributesToModify);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// Set the initial membershipExpiration\n-\n-\t\t// Get user LOA\n-\t\tString memberLoa = null;\n-\t\ttry {\n-\t\t\tAttribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n-\t\t\tmemberLoa = (String) loa.getValue();\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// user has no loa defined - if required by VO, it will be stopped in checking method later\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// check if user can be member\n-\t\tthis.canBeMemberInternal(sess, vo, user, memberLoa, true);\n-\n-\t\t// set initial membership expiration\n-\t\tthis.extendMembership(sess, member);\n-\n-\t\tinsertToMemberGroup(sess, member, vo);\n-\n-\t\t// add member also to all groups in list\n-\t\tif(groups != null && !groups.isEmpty()) {\n-\t\t\tfor(Group group: groups) {\n-\t\t\t\ttry {\n-\t\t\t\t\tperunBl.getGroupsManagerBl().addMember(sess, group, member);\n-\t\t\t\t} catch (NotMemberOfParentGroupException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\", ex);\n-\t\t\t\t} catch (GroupNotExistsException e) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, loa, login, candidate, null);\n-\t}\n-\n-\t/*\n-\t * This method with support of LoA finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n-\t * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n-\t */\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\n-\t\t// Create ExtSource object\n-\t\tExtSource extSource = new ExtSource();\n-\t\textSource.setName(extSourceName);\n-\t\textSource.setType(extSourceType);\n-\n-\t\t// Create UserExtSource object\n-\t\tUserExtSource userExtSource = new UserExtSource();\n-\t\tuserExtSource.setLogin(login);\n-\t\tuserExtSource.setExtSource(extSource);\n-\t\tuserExtSource.setLoa(loa);\n-\n-\t\t// Set all above data to the candidate's userExtSource\n-\t\tcandidate.setUserExtSource(userExtSource);\n-\n-\t\treturn this.createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\treturn this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n-\t}\n-\n-\t/*\n-\t * This method finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n-\t * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n-\t */\n-\tpublic Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\n-\t\t// Create ExtSource object\n-\t\tExtSource extSource = new ExtSource();\n-\t\textSource.setName(extSourceName);\n-\t\textSource.setType(extSourceType);\n-\n-\t\t// Create UserExtSource object\n-\t\tUserExtSource userExtSource = new UserExtSource();\n-\t\tuserExtSource.setLogin(login);\n-\t\tuserExtSource.setExtSource(extSource);\n-\n-\t\t// Set all above data to the candidate's userExtSource\n-\t\tcandidate.setUserExtSource(userExtSource);\n-\n-\t\treturn this.createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\tpublic Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n-\t\t//First of all get candidate from extSource directly\n-\t\tCandidate candidate = null;\n-\t\ttry {\n-\t\t\tif (extSource instanceof ExtSourceApi) {\n-\t\t\t\t//get first subject, then create candidate\n-\t\t\t\tMap<String, String> subject = ((ExtSourceSimpleApi) extSource).getSubjectByLogin(login);\n-\t\t\t\tcandidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, subject, extSource, login));\n-\t\t\t} else if (extSource instanceof ExtSourceSimpleApi) {\n-\t\t\t\t// get candidates from external source by login\n-\t\t\t\tcandidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, extSource, login));\n-\t\t\t}\n-\t\t} catch (CandidateNotExistsException | SubjectNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"Can't find candidate for login \" + login + \" in extSource \" + extSource, ex);\n-\t\t} catch (ExtSourceUnsupportedOperationException ex) {\n-\t\t\tthrow new InternalErrorException(\"Some operation is not allowed for extSource \" + extSource, ex);\n-\t\t} catch (ExtSourceNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"ExtSource \" + extSource + \" not exists.\");\n-\t\t}\n-\n-\t\treturn this.createMember(sess, vo, candidate, groups);\n-\t}\n-\n-\tpublic Member updateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tMember storedMember;\n-\t\ttry {\n-\t\t\tstoredMember = getMemberById(sess, member.getId());\n-\t\t} catch(MemberNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tif(storedMember.getUserId() != member.getUserId()) throw new InternalErrorException(\"Can't change userId in object member\");\n-\t\tif(!storedMember.getStatus().equals(member.getStatus())) {\n-\t\t\ttry {\n-\t\t\t\tmember = setStatus(sess, storedMember, member.getStatus());\n-\t\t\t} catch(MemberNotValidYetException ex) {\n-\t\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t\t}\n-\t\t}\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberByUserExtSource(sess, vo, uea);\n-\t}\n-\n-\tpublic Member getMemberByUserExtSources(PerunSession sess, Vo vo, List<UserExtSource> ueas) throws InternalErrorException, MemberNotExistsException {\n-\t\tfor (UserExtSource ues: ueas) {\n-\t\t\ttry {\n-\t\t\t\treturn getMembersManagerImpl().getMemberByUserExtSource(sess, vo, ues);\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// Ignore\n-\t\t\t}\n-\t\t}\n-\t\tthrow new MemberNotExistsException(\"Member with userExtSources \" + ueas + \" doesn't exists.\");\n-\t}\n-\n-\tpublic Member getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberById(sess, id);\n-\t}\n-\n-\tpublic Member getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId());\n-\t}\n-\n-\tpublic Member getMemberByUserId(PerunSession sess, Vo vo, int userId) throws InternalErrorException, MemberNotExistsException {\n-\t\treturn getMembersManagerImpl().getMemberByUserId(sess, vo, userId);\n-\t}\n-\n-\tpublic List<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersByUser(sess, user);\n-\t}\n-\n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\treturn getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g);\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\treturn getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g, status);\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic RichMember getRichMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.add(member);\n-\t\treturn this.convertMembersToRichMembers(sess, members).get(0);\n-\t}\n-\n-\tpublic RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.add(member);\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<RichMember> richMembersWithAttributes =  this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n-\t\treturn richMembersWithAttributes.get(0);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n-\t\tfor(String atrrName: attrsNames) {\n-\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n-\t\t\tattrsDef.add(attrDef);\n-\t\t}\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tif(attrsNames == null || attrsNames.isEmpty()) {\n-\t\t\treturn this.getRichMembersWithAttributes(sess, vo);\n-\t\t} else {\n-\t\t\treturn this.getRichMembersWithAttributesByNames(sess, vo, attrsNames);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, vo, attrsNames), allowedStatuses);\n-\t}\n-\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\tif(lookingInParentGroup) group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n-\n-\t\tif(attrsNames == null || attrsNames.isEmpty()) {\n-\t\t\treturn this.convertMembersToRichMembersWithAttributes(sess, getRichMembers(sess, group));\n-\t\t} else {\n-\t\t\treturn this.getRichMembersWithAttributesByNames(sess, group, attrsNames);\n-\t\t}\n-\t}\n-\n-\tpublic List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), allowedStatuses);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<RichMember> richMembersWithAttributesFromVo = this.findRichMembersWithAttributesInVo(sess, vo, searchString);\n-\t\treturn this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromVo, attrsNames);\n-\t}\n-\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<RichMember> richMembersWithAttributes = this.findRichMembersWithAttributes(sess, searchString);\n-\t\treturn this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributes, attrsNames);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, vo, attrsNames, searchString), allowedStatuses);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, attrsNames, searchString), allowedStatuses);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\tif(lookingInParentGroup) group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n-\t\tList<RichMember> richMembersWithAttributesFromGroup = this.findRichMembersWithAttributesInGroup(sess, group, searchString);\n-\t\treturn this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromGroup, attrsNames);\n-\t}\n-\n-\tpublic List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup), allowedStatuses);\n-\t}\n-\n-\t/**\n-\t * Return list of RichMembers with allowed statuses contains in list of allowedStatuses.\n-\t * If allowedStatuses is empty or null, get richMembers with all statuses.\n-\t *\n-\t * @param sess\n-\t * @param richMembers\n-\t * @param allowedStatuses\n-\t * @return list of allowed richMembers\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate List<RichMember> getOnlyRichMembersWithAllowedStatuses(PerunSession sess, List<RichMember> richMembers, List<String> allowedStatuses) throws InternalErrorException {\n-\t\tList<RichMember> allowedRichMembers = new ArrayList<RichMember>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return allowedRichMembers;\n-\t\tif(allowedStatuses == null || allowedStatuses.isEmpty()) return richMembers;\n-\n-\t\t//Covert statuses to objects Status\n-\t\tList<Status> statuses = new ArrayList<Status>();\n-\t\tfor(String status: allowedStatuses) {\n-\t\t\tstatuses.add(Status.valueOf(status));\n-\t\t}\n-\n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\tif(statuses.contains(rm.getStatus())) allowedRichMembers.add(rm);\n-\t\t}\n-\n-\t\treturn allowedRichMembers;\n-\t}\n-\n-\t/**\n-\t * From list of richMembers with attributes get all these richMembers only with specificied attributes by attrsNames.\n-\t * If attrsNames is empty or null, return back all richMembers with all already defined attributes.\n-\t *\n-\t * @param sess\n-\t * @param richMembersWithAttributes\n-\t * @param attrsNames\n-\t * @return list of RichMembers with already specified attributes.\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tprivate List<RichMember> getRichMembersOnlyWithSpecificAttrNames(PerunSession sess, List<RichMember> richMembersWithAttributes, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tif(richMembersWithAttributes == null || richMembersWithAttributes.isEmpty()) return new ArrayList<RichMember>();\n-\t\tif(attrsNames == null || attrsNames.isEmpty()) return richMembersWithAttributes;\n-\t\tfor(RichMember rm: richMembersWithAttributes) {\n-\t\t\tfor(Iterator<Attribute> userAttributeIter = rm.getUserAttributes().iterator(); userAttributeIter.hasNext();) {\n-\t\t\t\tAttribute attr = userAttributeIter.next();\n-\t\t\t\tif(!attrsNames.contains(attr.getName())) userAttributeIter.remove();\n-\t\t\t}\n-\t\t\tfor(Iterator<Attribute> memberAttributeIter = rm.getMemberAttributes().iterator(); memberAttributeIter.hasNext();) {\n-\t\t\t\tAttribute attr = memberAttributeIter.next();\n-\t\t\t\tif(!attrsNames.contains(attr.getName())) memberAttributeIter.remove();\n-\t\t\t}\n-\t\t}\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n-\t\tfor(String atrrName: attrsNames) {\n-\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n-\t\t\tattrsDef.add(attrDef);\n-\t\t}\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\tList<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n-\t\treturn richMembersWithAttributes;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tList<Member> members = this.getMembers(sess, vo);\n-\t\treturn this.convertMembersToRichMembers(sess, members);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException {\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tmembers.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n-\t\tList<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n-\t\treturn richMembers;\n-\t}\n-\n-\tpublic List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\tList<Member> members = this.getMembers(sess, vo, status);\n-\t\treturn this.convertMembersToRichMembers(sess, members);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = this.getRichMembers(sess, vo);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = this.getRichMembers(sess, vo, status);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n-\t}\n-\n-\tpublic List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = this.getRichMembers(sess, group);\n-\t\treturn getOnlyRichMembersWithAllowedStatuses(sess, this.convertMembersToRichMembersWithAttributes(sess, richMembers), allowedStatuses);\n-\t}\n-\n-\n-\tpublic List<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members) throws InternalErrorException {\n-\t\tList<RichMember> richMembers = new ArrayList<RichMember>();\n-\n-\t\tfor (Member member: members) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n-\n-\t\t\tRichMember richMember = new RichMember(user, member, userExtSources);\n-\t\t\trichMembers.add(richMember);\n-\t\t}\n-\n-\t\treturn richMembers;\n-\t}\n-\n-\tpublic List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers)  throws InternalErrorException {\n-\t\tfor (RichMember richMember: richMembers) {\n-\t\t\tList<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser());\n-\t\t\tList<Attribute> memberAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember);\n-\n-\t\t\trichMember.setUserAttributes(userAttributes);\n-\t\t\trichMember.setMemberAttributes(memberAttributes);\n-\t\t}\n-\n-\t\treturn richMembers;\n-\t}\n-\n-\tpublic List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef)  throws InternalErrorException {\n-\t\tList<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n-\t\tList<AttributeDefinition> membersAttributesDef = new ArrayList<AttributeDefinition>();\n-\n-\t\tfor(AttributeDefinition attrd: attrsDef) {\n-\t\t\tif(attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) usersAttributesDef.add(attrd);\n-\t\t\telse if(attrd.getName().startsWith(AttributesManager.NS_MEMBER_ATTR)) membersAttributesDef.add(attrd);\n-\t\t}\n-\n-\t\tfor (RichMember richMember: richMembers) {\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\n-\t\t\tList<String> userAttrNames = new ArrayList<String>();\n-\t\t\tfor(AttributeDefinition ad: usersAttributesDef) {\n-\t\t\t\tuserAttrNames.add(ad.getName());\n-\t\t\t}\n-\t\t\tuserAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser(), userAttrNames));\n-\n-\t\t\tList<String> memberAttrNames = new ArrayList<String>();\n-\t\t\tfor(AttributeDefinition ad: membersAttributesDef) {\n-\t\t\t\tmemberAttrNames.add(ad.getName());\n-\t\t\t}\n-\t\t\tmemberAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember, memberAttrNames));\n-\n-\t\t\trichMember.setUserAttributes(userAttributes);\n-\t\t\trichMember.setMemberAttributes(memberAttributes);\n-\t\t}\n-\n-\t\treturn richMembers;\n-\t}\n-\n-\tpublic int getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersCount(sess, vo);\n-\t}\n-\n-\tpublic int getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersCount(sess, vo, status);\n-\t}\n-\n-\tpublic Vo getMemberVo(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn getPerunBl().getVosManagerBl().getVoById(sess, getMembersManagerImpl().getMemberVoId(sess, member));\n-\t\t} catch (VoNotExistsException e1) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member is under nonexistent VO\", e1);\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException {\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n-\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\tmembers.addAll(getMembersManagerImpl().getMembersByUser(sess, user));\n-\t\t}\n-\n-\t\treturn members;\n-\t}\n-\n-\tpublic List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n-\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\ttry {\n-\t\t\t\tmembers.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// User is not member of this VO\n-\t\t\t}\n-\t\t}\n+ final static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n+ private MembersManagerImplApi membersManagerImpl;\n+ private PerunBl perunBl;\n+\n+ /**\n+  * Constructor.\n+  *\n+  */\n+\n+\n+ public MembersManagerBlImpl(MembersManagerImplApi membersManagerImpl) {\n+  this.membersManagerImpl = membersManagerImpl;\n+ }\n+\n+ public void deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n+  Vo vo = this.getMemberVo(sess, member);\n+  User user;\n+  try {\n+   user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+  } catch (UserNotExistsException e1) {\n+   throw new ConsistencyErrorException(\"Removing member who doesn't have corresponding user.\", e1);\n+  }\n+  List<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+  Map<Facility, List<Attribute>> requiredAttributesBeforeMemberRemove = new HashMap<Facility, List<Attribute>>();\n+  for (Facility facility : allowedFacilities) {\n+   // Get actually required attributes, they will be later compared with list of required attributes when the member will be removed from all resources in this VO\n+   requiredAttributesBeforeMemberRemove.put(facility, getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n+  }\n+\n+  // Remove member from all groups\n+  List<Group> memberGroups = getPerunBl().getGroupsManagerBl().getMemberDirectGroups(sess, member);\n+  for (Group group : memberGroups) {\n+   // Member must be removed from the members group using separate method\n+   if (group.getName().equals(VosManager.MEMBERS_GROUP)) continue;\n+\n+   try {\n+    getPerunBl().getGroupsManagerBl().removeMember(sess, group, member);\n+   } catch (NotGroupMemberException e) {\n+    throw new ConsistencyErrorException(\"getMemberGroups return group where the member is not member\", e);\n+   } catch (GroupNotExistsException e) {\n+    throw new ConsistencyErrorException(e);\n+   }\n+  }\n+\n+  // Remove member from the VO members group\n+\n+  try {\n+   Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+   try {\n+    getPerunBl().getGroupsManagerBl().removeMemberFromMembersOrAdministratorsGroup(sess, g, member);\n+   } catch (NotGroupMemberException e) {\n+    throw new ConsistencyErrorException(\"Member is not in the \\\"members\\\" group.\" + member + \"  \" + g, e);\n+   }\n+  } catch (GroupNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  // Remove member's  attributes (namespaces: member and resource-member)\n+\n+  try {\n+   getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, member);\n+   List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+   for (Resource resource : resources) {\n+    getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, member);\n+   }\n+  } catch (AttributeValueException ex) {\n+   throw new ConsistencyErrorException(\"Member is removed from all groups. There are no required attribute for this member. Member's attributes can be removed without problem.\", ex);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+\n+  // Remove user-facility attributes which are no longer required\n+\n+  for (Facility facility : allowedFacilities) {\n+   List<Attribute> requiredAttributes = requiredAttributesBeforeMemberRemove.get(facility);\n+   //remove currently required attributes from requiredAttributesBeforeMemberRemove\n+   requiredAttributes.removeAll(getPerunBl().getAttributesManagerBl().getRequiredAttributes(sess, facility, user));\n+   //remove attributes which are no longer required\n+\n+   try {\n+    getPerunBl().getAttributesManagerBl().removeAttributes(sess, facility, user, requiredAttributes);\n+   } catch (AttributeValueException | WrongAttributeAssignmentException ex) {\n+    throw new ConsistencyErrorException(ex);\n+   }\n+  }\n+\n+  //Remove all members bans\n+  List<BanOnResource> bansOnResource = getPerunBl().getResourcesManagerBl().getBansForMember(sess, member.getId());\n+  for (BanOnResource banOnResource : bansOnResource) {\n+   try {\n+    getPerunBl().getResourcesManagerBl().removeBan(sess, banOnResource.getId());\n+   } catch (BanNotExistsException ex) {\n+    //it is ok, we just want to remove it anyway\n+\n+   }\n+  }\n+  \n+  /* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n+    for (Facility facility: facilitiesBeforeMemberRemove) {\n+  // Remove user-facility attributes\n+  try {\n+  getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, facility, user);\n+  log.debug(\"Removing user-facility attributes for facility {}\", facility);\n+  } catch (AttributeValueException e) {\n+  throw new ConsistencyErrorException(\"Member is removed from all resources. There are no required attribute for this member. User-facility attributes can be removed without problem.\", e);\n+  }\n+    }\n+    */\n+\n+  // Remove member from the DB\n+  getMembersManagerImpl().deleteMember(sess, member);\n+  getPerunBl().getAuditer().log(sess, \"{} deleted.\", member);\n+ }\n+\n+ public void deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, MemberAlreadyRemovedException, GroupOperationsException {\n+\n+  for (Member m : this.getMembers(sess, vo)) {\n+   this.deleteMember(sess, m);\n+  }\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n+  return this.createMember(sess, vo, user, null);\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, AlreadyMemberException, ExtendMembershipException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupOperationsException {\n+  try {\n+   Member member = getMemberByUser(sess, vo, user);\n+   throw new AlreadyMemberException(member);\n+  } catch (MemberNotExistsException IGNORE) {\n+\n+  }\n+  Member member = getMembersManagerImpl().createMember(sess, vo, user);\n+  getPerunBl().getAuditer().log(sess, \"{} created.\", member);\n+\n+  // Set the initial membershipExpiration\n+\n+  // Get user LOA\n+  String memberLoa = null;\n+  try {\n+   Attribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n+   memberLoa = (String) loa.getValue();\n+  } catch (AttributeNotExistsException e) {\n+   // user has no loa defined - if required by VO, it will be stopped in checking method later\n+\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n \n-\t\treturn this.setAllMembersSameType(members, MembershipType.DIRECT);\n-\t}\n-\n-\tpublic List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\ttry {\n-\t\t\t\tmembers.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// User is not member of this VO\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn this.setAllMembersSameType(members, MembershipType.DIRECT);\n-\t}\n-\n-\tpublic List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException{\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\t\tList<Member> allGroupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tList<Member> allFoundMembers = new ArrayList<Member>();\n-\t\tfor(User user: users){\n-\t\t\tallFoundMembers.addAll(getMembersByUser(sess, user));\n-\t\t}\n-\t\tallGroupMembers.retainAll(allFoundMembers);\n-\t\treturn allGroupMembers;\n-\t}\n-\n-\tpublic List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException{\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\t\tList<Member> allGroupMembers = new ArrayList<Member>();\n-\t\tif(group.getParentGroupId() == null) {\n-\t\t\tVo vo = null;\n-\t\t\ttry {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(group + \" is not in \" + vo);\n-\t\t\t}\n-\t\t\tallGroupMembers = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t} else {\n-\t\t\tallGroupMembers = getPerunBl().getGroupsManagerBl().getParentGroupMembers(sess, group);\n-\t\t}\n-\n-\t\tList<Member> allFoundMembers = new ArrayList<Member>();\n-\t\tfor(User user: users){\n-\t\t\tallFoundMembers.addAll(getMembersByUser(sess, user));\n-\t\t}\n-\t\tallGroupMembers.retainAll(allFoundMembers);\n-\t\treturn allGroupMembers;\n-\t}\n-\n-\tpublic List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException{\n-\n-\t\tList<Member> members = findMembersInGroup(sess, group, searchString);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n-\t}\n-\n-\tpublic List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException{\n-\n-\t\tList<Member> members = findMembersInParentGroup(sess, group, searchString);\n-\t\treturn this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n-\t}\n-\n-\n-\tpublic List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\ttry {\n-\t\t\t\tmembers.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n-\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t// User is not member of this VO\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembers(PerunSession sess, String searchString) throws InternalErrorException {\n-\n-\t\tList<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n-\n-\t\tList<Member> members = new ArrayList<Member>();\n-\t\tfor (User user: users) {\n-\t\t\tmembers.addAll(getMembersByUser(sess, user));\n-\t\t}\n-\n-\t\treturn this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n-\t}\n-\n-\tpublic List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\n-\t\tList<RichMember> list = findRichMembersInVo(sess, vo, searchString);\n-\t\treturn convertMembersToRichMembersWithAttributes(sess, list);\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tList<RichMember> list = findRichMembers(sess, searchString);\n-\t\treturn convertMembersToRichMembersWithAttributes(sess, list);\n-\t}\n-\n-\tpublic void checkMemberExists(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException {\n-\t\tgetMembersManagerImpl().checkMemberExists(sess, member);\n-\t}\n-\n-\tpublic Member setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n-\t\tswitch(status) {\n-\t\t\tcase VALID:\n-\t\t\t\treturn validateMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase INVALID:\n-\t\t\t\treturn invalidateMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase SUSPENDED:\n-\t\t\t\treturn suspendMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase EXPIRED:\n-\t\t\t\treturn expireMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tcase DISABLED:\n-\t\t\t\treturn disableMember(sess, member);\n-\t\t\t\t//break;\n-\t\t\tdefault:\n-\t\t\t\tthrow new InternalErrorException(\"Unknown status:\" + status);\n-\t\t}\n-\t}\n-\n-\tpublic Member validateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif(this.haveStatus(sess, member, Status.VALID)) {\n-\t\t\tlog.debug(\"Trying to validate member who is already valid. \" + member);\n-\t\t\treturn member;\n-\t\t}\n-\n-\t\tStatus oldStatus = member.getStatus();\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.VALID);\n-\t\tmember.setStatus(Status.VALID);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} validated.\", member);\n-\t\tif(oldStatus.equals(Status.INVALID)) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().doTheMagic(sess, member);\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member validateMemberAsync(final PerunSession sess, final Member member) throws InternalErrorException {\n-\t\tnew Thread(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tThread.sleep(5000);\n-\t\t\t\t} catch (InterruptedException e) {\n-\t\t\t\t\t// TODO Auto-generated catch block\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t\tStatus oldStatus = Status.getStatus(member.getStatus().getCode());\n-\n-\t\t\t\ttry {\n-\t\t\t\t\t((PerunSessionImpl) sess).getPerunBl().getMembersManagerBl().validateMember(sess, member);\n-\t\t\t\t} catch(Exception ex) {\n-\t\t\t\t\tlog.info(\"validateMemberAsync failed. Cause: {}\", ex);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getAuditer().log(sess, \"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n-\t\t\t\t\t\tlog.info(\"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n-\t\t\t\t\t} catch(InternalErrorException internalError) {\n-\t\t\t\t\t\tlog.error(\"Store message to auditer failed. message: Validation of {} failed. He stays in {} state. cause: {}\", new Object[] {member, oldStatus, internalError});\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}, \"validateMemberAsync\").start();\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member invalidateMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) {\n-\t\t\tlog.debug(\"Trying to invalidate member who is already invalid. \" + member);\n-\t\t\treturn member;\n-\t\t}\n-\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.INVALID);\n-\t\tmember.setStatus(Status.INVALID);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} invalidated.\", member);\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member suspendMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n-\t\tif(this.haveStatus(sess, member, Status.SUSPENDED)) {\n-\t\t\tlog.warn(\"Trying to suspend member who is already suspended. Suspend operation will be procesed anyway (to be shure).\" + member);\n-\t\t}\n-\n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.SUSPENDED);\n-\t\tmember.setStatus(Status.SUSPENDED);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} suspended #{}.\", member, Auditer.engineForceKeyword);\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member expireMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n-\t\tif(this.haveStatus(sess, member, Status.EXPIRED)) {\n-\t\t\tlog.debug(\"Trying to set member expired but he's already expired. \" + member);\n-\t\t\treturn member;\n-\t\t}\n-\n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.EXPIRED);\n-\t\tmember.setStatus(Status.EXPIRED);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} expired.\", member);\n-\t\treturn member;\n-\t}\n-\n-\tpublic Member disableMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n-\t\tif(this.haveStatus(sess, member, Status.DISABLED)) {\n-\t\t\tlog.debug(\"Trying to disable member who is already disabled. \" + member);\n-\t\t\treturn member;\n-\t\t}\n-\n-\t\tif(this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n-\t\tgetMembersManagerImpl().setStatus(sess, member, Status.DISABLED);\n-\t\tmember.setStatus(Status.DISABLED);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} disabled.\", member);\n-\t\treturn member;\n-\t}\n-\n-\tpublic void insertToMemberGroup(PerunSession sess, Member member, Vo vo) throws InternalErrorException, AlreadyMemberException, GroupOperationsException {\n-\t\t// Insert member into the members group\n-\t\ttry {\n-\t\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\t\tGroup g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n-\t\t\tgetPerunBl().getGroupsManagerBl().addMemberToMembersGroup(sess, g, member);\n-\t\t} catch (NotMemberOfParentGroupException ex) {\n-\t\t\t//members group is top level -> this should not happen\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeValueException e) {\n-\t\t\tthrow new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n-\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n-\t\t}\n-\t}\n-\n-\tpublic List<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status) throws InternalErrorException {\n-\t\tIterator<Member> iterator =  members.iterator();\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tMember member = iterator.next();\n-\t\t\tif(!haveStatus(sess, member, status)) iterator.remove();\n-\t\t}\n-\t\treturn members;\n-\t}\n-\n-\tpublic List<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersByUsersIds(sess, usersIds, vo);\n-\t}\n-\n-\tpublic List<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo) throws InternalErrorException {\n-\t\treturn getMembersManagerImpl().getMembersByUsers(sess, users, vo);\n-\t}\n-\n-\tpublic boolean haveStatus(PerunSession sess, Member member, Status status) {\n-\t\treturn member.getStatus().equals(status);\n-\t}\n-\n-\tpublic void extendMembership(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n-\t\tthis.manageMembershipExpiration(sess, member, true, true);\n-\t}\n-\n-\tpublic boolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tPair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n-\t\t\treturn ret.getLeft();\n-\t\t} catch (ExtendMembershipException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n-\t\tPair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, true);\n-\t\treturn ret.getLeft();\n-\t}\n-\n-\tpublic Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, ExtendMembershipException {\n-\t  // Check if the VO has set membershipExpirationRules attribute\n-    LinkedHashMap<String, String> membershipExpirationRules;\n-\n-    Attribute membershipExpirationRulesAttribute = null;\n+  // check if user can be member - service members are not checked for LoA\n+\n+  this.canBeMemberInternal(sess, vo, user, memberLoa, true);\n+\n+  // set initial membership expiration\n+  this.extendMembership(sess, member);\n+  insertToMemberGroup(sess, member, vo);\n+\n+  // add member also to all groups in list\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n     try {\n-      membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n-      membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n-      // If attribute was not filled, then silently exit with null\n-      if (membershipExpirationRules == null) return null;\n-    } catch (AttributeNotExistsException e) {\n-      // No rules set, so leave it as it is\n-      return null;\n-    } catch (WrongAttributeAssignmentException e) {\n-      throw new InternalErrorException(\"Shouldn't happen.\");\n+     perunBl.getGroupsManagerBl().addMember(sess, group, member);\n+    } catch (NotMemberOfParentGroupException ex) {\n+     throw new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\",\n+ex);\n+    } catch (GroupNotExistsException e) {\n+     throw new ConsistencyErrorException(e);\n     }\n+   }\n+  }\n+\n+  // Set default membership expiration\n+\n+  return member;\n+ }\n+\n+ public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, null);\n+ }\n+\n+ public Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  if (specificUserType.equals(SpecificUserType.SERVICE)) candidate.setFirstName(\"(Service)\");\n+\n+  //Set organization only if user in sessione exists (in tests there is no user in session)\n+  if (sess.getPerunPrincipal().getUser() != null) {\n+   String userOrganization = AttributesManager.NS_USER_ATTR_DEF + \":organization\";\n+   String memberOrganization = AttributesManager.NS_MEMBER_ATTR_DEF + \":organization\";\n+   Map<String, String> candidateAttributes = new HashMap<>();\n+   if (candidate.getAttributes() != null) candidateAttributes.putAll(candidate.getAttributes());\n+   if (candidateAttributes.get(memberOrganization) == null) {\n+    Attribute actorUserOrganization;\n+    String actorUserOrganizationValue;\n+    try {\n+     actorUserOrganization = perunBl.getAttributesManagerBl().getAttribute(sess, sess.getPerunPrincipal().getUser(), userOrganization);\n+     actorUserOrganizationValue = (String) actorUserOrganization.getValue();\n+    } catch (WrongAttributeAssignmentException | AttributeNotExistsException ex) {\n+     throw new InternalErrorException(ex);\n+    }\n+    if (actorUserOrganizationValue != null) {\n+     candidateAttributes.put(memberOrganization, actorUserOrganizationValue);\n+     candidate.setAttributes(candidateAttributes);\n+    }\n+   }\n+  }\n+\n+  //create member for service user from candidate\n+  Member member = createMember(sess, vo, specificUserType, candidate, groups, null);\n+\n+  //set specific user owners or sponsors\n+  User specificUser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+  for (User u : specificUserOwners) {\n+   try {\n+    getPerunBl().getUsersManagerBl().addSpecificUserOwner(sess, u, specificUser);\n+   } catch (RelationExistsException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, User owner, Vo vo, int loa) throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, AlreadyMemberException, WrongReferenceAttributeValueException, WrongAttributeValueException, UserNotExistsException, ExtSourceNotExistsException, LoginNotExistsException {\n+  String loginNamespaceUri = AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + namespace;\n+  boolean passwordPresent = params.get(\"password\") != null;\n+  if (params.get(loginNamespaceUri) == null) {\n+   Map<String, String> generatedParams = getPerunBl().getUsersManagerBl().generateAccount(sess, namespace, params);\n+   params.putAll(generatedParams);\n+  } else if (passwordPresent) {\n+   getPerunBl().getUsersManagerBl().reservePassword(sess, params.get(loginNamespaceUri), namespace, params.get(\"password\"));\n+  } else {\n+   throw new InternalErrorException(\"If login for new account is provided, password must be provided also\");\n+  }\n+  Iterator<String> iterator = params.keySet().iterator();\n+  // remove non-valid entries from map for Candidate otherwise it would fail to create member\n+  while (iterator.hasNext()) {\n+   String next = iterator.next();\n+   if (!next.startsWith(\"urn:perun:user\") && !next.startsWith(\"urn:perun:member\")) {\n+    iterator.remove();\n+   }\n+  }\n+  String extSourceLogin = params.get(loginNamespaceUri) + extSourcePostfix;\n+  UserExtSource userExtSource = new UserExtSource(extSource, loa, extSourceLogin);\n+  Candidate candidate = new Candidate(userExtSource, params);\n+  Member member = this.createSpecificMember(sess, vo, candidate, Arrays.asList(owner), SpecificUserType.SPONSORED);\n+  this.validateMemberAsync(sess, member);\n+  if (passwordPresent) {\n+   User user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+   getPerunBl().getUsersManagerBl().validatePasswordAndSetExtSources(sess, user, params.get(loginNamespaceUri), namespace);\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createMemberSync(sess, vo, candidate, null);\n+ }\n+\n+ public Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  Member member = createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, overwriteUserAttributes);\n+\n+  //Validate synchronously\n+  try {\n+   member = getPerunBl().getMembersManagerBl().validateMember(sess, member);\n+  } catch (AttributeValueException ex) {\n+   log.info(\"Member can't be validated. He stays in invalid state. Cause: \" + ex);\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member createMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createMemberSync(sess, vo, candidate, groups, null);\n+ }\n+\n+ public Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createSpecificMemberSync(sess, vo, candidate, specificUserOwners, specificUserType, null);\n+ }\n+\n+ public Member createSpecificMemberSync(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  Member member = createSpecificMember(sess, vo, candidate, specificUserOwners, specificUserType, groups);\n+\n+  //Validate synchronously\n+  try {\n+   member = validateMember(sess, member);\n+  } catch (AttributeValueException ex) {\n+   log.info(\"Specific Member can't be validated. He stays in invalid state. Cause: \" + ex);\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return createMember(sess, vo, candidate, null);\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return createMember(sess, vo, SpecificUserType.NORMAL, candidate, groups, null);\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createMember(sess, vo, specificUserType, candidate, null, new ArrayList<String>());\n+ }\n+\n+ //MAIN METHOD\n+\n+ public Member createMember(PerunSession sess, Vo vo, SpecificUserType specificUserType, Candidate candidate, List<Group> groups, List<String> overwriteUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  log.debug(\"Creating member for VO {} from candidate {}\", vo, candidate);\n+\n+  // Get the user\n+  User user = null;\n+  if (candidate.getUserExtSources() != null) {\n+\n+   for (UserExtSource ues : candidate.getUserExtSources()) {\n+    // Check if the extSource exists\n+    ExtSource tmpExtSource = getPerunBl().getExtSourcesManagerBl().checkOrCreateExtSource(sess, ues.getExtSource().getName(), ues.getExtSource().getType());\n+    // Set the extSource ID\n+    ues.getExtSource().setId(tmpExtSource.getId());\n \n-    // Which LOA we won't extend? This is applicable only for members who have already set expiration from the previous period\n-    if (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null) {\n-      String[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n+    try {\n+     // Try to find the user by userExtSource\n+     user = getPerunBl().getUsersManagerBl().getUserByExtSourceNameAndExtLogin(sess, ues.getExtSource().getName(), ues.getLogin());\n+    } catch (UserExtSourceNotExistsException e) {\n+     // This is OK, non-existent userExtSource will be assigned later\n+\n+    } catch (UserNotExistsException e) {\n+     // Ignore, we are only checking if the user exists\n+\n+    } catch (ExtSourceNotExistsException e) {\n+     // Ignore, we are only checking if the user exists\n \n-      for (String doNotExtendLoa : doNotExtendLoas) {\n-        if (doNotExtendLoa.equals(loa)) {\n-          // LOA provided is not allowed for extension\n-          throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n-                \"Provided LoA \" + loa + \" doesn't have required level for VO id \" + vo.getId() + \".\");\n-        }\n-      }\n     }\n+   }\n+  }\n+\n+  // If user hasn't been found, then create him\n+  if (user == null) {\n+   user = new User();\n+   user.setFirstName(candidate.getFirstName());\n+   user.setLastName(candidate.getLastName());\n+   user.setMiddleName(candidate.getMiddleName());\n+   user.setTitleAfter(candidate.getTitleAfter());\n+   user.setTitleBefore(candidate.getTitleBefore());\n+   if (specificUserType.equals(specificUserType.SERVICE)) user.setServiceUser(true);\n+   if (specificUserType.equals(specificUserType.SPONSORED)) user.setSponsoredUser(true);\n+   // Store the user, this must be done in separate transaction\n+   user = getPerunBl().getUsersManagerBl().createUser(sess, user);\n+   log.debug(\"createMember: new user: {}\", user);\n+  }\n+\n+  // Assign missing userExtSource and update LoA\n+  if (candidate.getUserExtSources() != null) {\n+\n+   for (UserExtSource userExtSource : candidate.getUserExtSources()) {\n+    try {\n+     UserExtSource currentUserExtSource = getPerunBl().getUsersManagerBl().getUserExtSourceByExtLogin(sess, userExtSource.getExtSource(), userExtSource.getLogin());\n+     // Update LoA\n+     currentUserExtSource.setLoa(userExtSource.getLoa());\n+     getPerunBl().getUsersManagerBl().updateUserExtSource(sess, currentUserExtSource);\n+    } catch (UserExtSourceNotExistsException e) {\n+     // Create userExtSource\n+     try {\n+      getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, userExtSource);\n+     } catch (UserExtSourceExistsException e1) {\n+      throw new ConsistencyErrorException(\"Adding userExtSource which already exists: \" + userExtSource);\n+     }\n+    }\n+   }\n+  }\n \n-    Calendar calendar = Calendar.getInstance();\n+  try {\n+   Member member = getMemberByUser(sess, vo, user);\n+   throw new AlreadyMemberException(member);\n+  } catch (MemberNotExistsException IGNORE) {\n \n-    String period = null;\n-    // Default extension\n-    if (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n-      period = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n+  }\n+\n+  // Create the member\n+  Member member = getMembersManagerImpl().createMember(sess, vo, user);\n+  getPerunBl().getAuditer().log(sess, \"{} created.\", member);\n+\n+  // Create the member's attributes\n+  List<Attribute> membersAttributes = new ArrayList<Attribute>();\n+  List<Attribute> usersAttributesToMerge = new ArrayList<>();\n+  List<Attribute> usersAttributesToModify = new ArrayList<>();\n+  if (candidate.getAttributes() != null) {\n+\n+   for (String attributeName : candidate.getAttributes().keySet()) {\n+    AttributeDefinition attributeDefinition;\n+    try {\n+     attributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+    } catch (AttributeNotExistsException ex) {\n+     throw new InternalErrorException(ex);\n+    }\n+    Attribute attribute = new Attribute(attributeDefinition);\n+    attribute.setValue(getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), attribute.getType()));\n+    if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_DEF) || getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR_OPT)) {\n+     // This is member's attribute\n+     membersAttributes.add(attribute);\n+    } else if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_DEF) || getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR_OPT)) {\n+     if (overwriteUserAttributes != null && !overwriteUserAttributes.isEmpty() && overwriteUserAttributes.contains(attribute.getName())) {\n+      usersAttributesToModify.add(attribute);\n+     } else {\n+      usersAttributesToMerge.add(attribute);\n+     }\n     }\n+   }\n+  }\n+\n+  // Store the attributes\n+\n+  try {\n+   //if empty, skip setting or merging empty arrays of attributes at all\n+   if (!membersAttributes.isEmpty()) getPerunBl().getAttributesManagerBl().setAttributes(sess, member, membersAttributes);\n+   if (!usersAttributesToMerge.isEmpty()) getPerunBl().getAttributesManagerBl().mergeAttributesValues(sess, user, usersAttributesToMerge);\n+   if (!usersAttributesToModify.isEmpty()) getPerunBl().getAttributesManagerBl().setAttributes(sess, user, usersAttributesToModify);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  // Set the initial membershipExpiration\n+\n+  // Get user LOA\n+  String memberLoa = null;\n+  try {\n+   Attribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n+   memberLoa = (String) loa.getValue();\n+  } catch (AttributeNotExistsException e) {\n+   // user has no loa defined - if required by VO, it will be stopped in checking method later\n+\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  // check if user can be member\n+\n+  this.canBeMemberInternal(sess, vo, user, memberLoa, true);\n+\n+  // set initial membership expiration\n+  this.extendMembership(sess, member);\n+  insertToMemberGroup(sess, member, vo);\n+\n+  // add member also to all groups in list\n+  if (groups != null && !groups.isEmpty()) {\n+\n+   for (Group group : groups) {\n+    try {\n+     perunBl.getGroupsManagerBl().addMember(sess, group, member);\n+    } catch (NotMemberOfParentGroupException ex) {\n+     throw new InternalErrorException(\"Member \" + member + \" can't be add to the group \" + group + \" because he is not member of it's parent group.\",\n+ex);\n+    } catch (GroupNotExistsException e) {\n+     throw new ConsistencyErrorException(e);\n+    }\n+   }\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createMember(sess, vo, extSourceName, extSourceType, loa, login, candidate, null);\n+ }\n+\n+ /*\n+  * This method with support of LoA finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n+  * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n+  */\n+\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int loa, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+\n+  // Create ExtSource object\n+  ExtSource extSource = new ExtSource();\n+  extSource.setName(extSourceName);\n+  extSource.setType(extSourceType);\n+\n+  // Create UserExtSource object\n+  UserExtSource userExtSource = new UserExtSource();\n+  userExtSource.setLogin(login);\n+  userExtSource.setExtSource(extSource);\n+  userExtSource.setLoa(loa);\n+\n+  // Set all above data to the candidate's userExtSource\n+  candidate.setUserExtSource(userExtSource);\n+  return this.createMember(sess, vo, candidate, groups);\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  return this.createMember(sess, vo, extSourceName, extSourceType, login, candidate, null);\n+ }\n+\n+ /*\n+  * This method finally has to call this.createMember(PerunSession sess, Vo vo, UserExtSource userExtSource)\n+  * @see cz.metacentrum.perun.core.api.MembersManager#createMember(cz.metacentrum.perun.core.api.PerunSession, cz.metacentrum.perun.core.api.Vo, java.lang.String, java.lang.String, java.lang.String, cz.metacentrum.perun.core.api.Candidate)\n+  */\n+\n+ public Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+\n+  // Create ExtSource object\n+  ExtSource extSource = new ExtSource();\n+  extSource.setName(extSourceName);\n+  extSource.setType(extSourceType);\n+\n+  // Create UserExtSource object\n+  UserExtSource userExtSource = new UserExtSource();\n+  userExtSource.setLogin(login);\n+  userExtSource.setExtSource(extSource);\n+\n+  // Set all above data to the candidate's userExtSource\n+  candidate.setUserExtSource(userExtSource);\n+  return this.createMember(sess, vo, candidate, groups);\n+ }\n+\n+ public Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, GroupOperationsException {\n+  //First of all get candidate from extSource directly\n+  Candidate candidate = null;\n+  try {\n+   if (extSource instanceof ExtSourceApi) {\n+    //get first subject, then create candidate\n+    Map<String, String> subject = ((ExtSourceSimpleApi) extSource).getSubjectByLogin(login);\n+    candidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, subject, extSource, login));\n+   } else if (extSource instanceof ExtSourceSimpleApi) {\n+    // get candidates from external source by login\n+    candidate = (getPerunBl().getExtSourcesManagerBl().getCandidate(sess, extSource, login));\n+   }\n+  } catch (CandidateNotExistsException | SubjectNotExistsException ex) {\n+   throw new InternalErrorException(\"Can't find candidate for login \" + login + \" in extSource \" + extSource, ex);\n+  } catch (ExtSourceUnsupportedOperationException ex) {\n+   throw new InternalErrorException(\"Some operation is not allowed for extSource \" + extSource, ex);\n+  } catch (ExtSourceNotExistsException ex) {\n+   throw new InternalErrorException(\"ExtSource \" + extSource + \" not exists.\");\n+  }\n+\n+  return this.createMember(sess, vo, candidate, groups);\n+ }\n+\n+ public Member updateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  Member storedMember;\n+  try {\n+   storedMember = getMemberById(sess, member.getId());\n+  } catch (MemberNotExistsException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+  if (storedMember.getUserId() != member.getUserId()) throw new InternalErrorException(\"Can't change userId in object member\");\n+  if (!storedMember.getStatus().equals(member.getStatus())) {\n+   try {\n+    member = setStatus(sess, storedMember, member.getStatus());\n+   } catch (MemberNotValidYetException ex) {\n+    throw new WrongAttributeValueException(ex);\n+   }\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member getMemberByUserExtSource(PerunSession sess, Vo vo, UserExtSource uea) throws InternalErrorException, MemberNotExistsException {\n+  return getMembersManagerImpl().getMemberByUserExtSource(sess, vo, uea);\n+ }\n+\n+ public Member getMemberByUserExtSources(PerunSession sess, Vo vo, List<UserExtSource> ueas) throws InternalErrorException, MemberNotExistsException {\n+\n+  for (UserExtSource ues : ueas) {\n+   try {\n+    return getMembersManagerImpl().getMemberByUserExtSource(sess, vo, ues);\n+   } catch (MemberNotExistsException e) {\n+    // Ignore\n+\n+   }\n+  }\n+\n+  throw new MemberNotExistsException(\"Member with userExtSources \" + ueas + \" doesn't exists.\");\n+ }\n+\n+ public Member getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException {\n+  return getMembersManagerImpl().getMemberById(sess, id);\n+ }\n+\n+ public Member getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException {\n+  return getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId());\n+ }\n+\n+ public Member getMemberByUserId(PerunSession sess, Vo vo, int userId) throws InternalErrorException, MemberNotExistsException {\n+  return getMembersManagerImpl().getMemberByUserId(sess, vo, userId);\n+ }\n+\n+ public List<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException {\n+  return getMembersManagerImpl().getMembersByUser(sess, user);\n+ }\n+\n+ public List<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+   return getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g);\n+  } catch (GroupNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+  try {\n+   Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+   return getPerunBl().getGroupsManagerBl().getGroupMembers(sess, g, status);\n+  } catch (GroupNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public RichMember getRichMember(PerunSession sess, Member member) throws InternalErrorException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.add(member);\n+  return this.convertMembersToRichMembers(sess, members).get(0);\n+ }\n+\n+ public RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.add(member);\n+  List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+  List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n+  return richMembersWithAttributes.get(0);\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n+  List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+  List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+  return richMembersWithAttributes;\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.addAll(perunBl.getMembersManagerBl().getMembers(sess, vo));\n+  List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+  List<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n+  for (String atrrName : attrsNames) {\n+   AttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n+   attrsDef.add(attrDef);\n+  }\n+  List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+  return richMembersWithAttributes;\n+ }\n+\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+  if (attrsNames == null || attrsNames.isEmpty()) {\n+   return this.getRichMembersWithAttributes(sess, vo);\n+  } else {\n+   return this.getRichMembersWithAttributesByNames(sess, vo, attrsNames);\n+  }\n+ }\n+\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException {\n+  return getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, vo, attrsNames), allowedStatuses);\n+ }\n+\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+  if (lookingInParentGroup) group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n+  if (attrsNames == null || attrsNames.isEmpty()) {\n+   return this.convertMembersToRichMembersWithAttributes(sess, getRichMembers(sess, group));\n+  } else {\n+   return this.getRichMembersWithAttributesByNames(sess, group, attrsNames);\n+  }\n+ }\n+\n+ public List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+  return getOnlyRichMembersWithAllowedStatuses(sess, this.getCompleteRichMembers(sess, group, attrsNames, lookingInParentGroup), allowedStatuses);\n+ }\n+\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+  List<RichMember> richMembersWithAttributesFromVo = this.findRichMembersWithAttributesInVo(sess, vo, searchString);\n+  return this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromVo, attrsNames);\n+ }\n+\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+  List<RichMember> richMembersWithAttributes = this.findRichMembersWithAttributes(sess, searchString);\n+  return this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributes, attrsNames);\n+ }\n+\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+  return getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, vo, attrsNames, searchString), allowedStatuses);\n+ }\n+\n+ @Override\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, AttributeNotExistsException {\n+  return getOnlyRichMembersWithAllowedStatuses(sess, this.findCompleteRichMembers(sess, attrsNames, searchString), allowedStatuses);\n+ }\n+\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+  if (lookingInParentGroup) group = getPerunBl().getGroupsManagerBl().getParentGroup(sess, group);\n+  List<RichMember> richMembersWithAttributesFromGroup = this.findRichMembersWithAttributesInGroup(sess, group, searchString);\n+  return this.getRichMembersOnlyWithSpecificAttrNames(sess, richMembersWithAttributesFromGroup, attrsNames);\n+ }\n+\n+ public List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException {\n+  return getOnlyRichMembersWithAllowedStatuses(sess,\n+                                               this.findCompleteRichMembers(sess, group, attrsNames, searchString, lookingInParentGroup),\n+                                                allowedStatuses);\n+ }\n+\n+ /**\n+  * Return list of RichMembers with allowed statuses contains in list of allowedStatuses.\n+  * If allowedStatuses is empty or null, get richMembers with all statuses.\n+  *\n+  * @param sess\n+  * @param richMembers\n+  * @param allowedStatuses\n+  * @return list of allowed richMembers\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private List<RichMember> getOnlyRichMembersWithAllowedStatuses(PerunSession sess, List<RichMember> richMembers, List<String> allowedStatuses) throws InternalErrorException {\n+  List<RichMember> allowedRichMembers = new ArrayList<RichMember>();\n+  if (richMembers == null || richMembers.isEmpty())\n+   return allowedRichMembers;\n+  if (allowedStatuses == null || allowedStatuses.isEmpty())\n+   return richMembers;\n+\n+  //Covert statuses to objects Status\n+  List<Status> statuses = new ArrayList<Status>();\n+  for (String status : allowedStatuses) {\n+   statuses.add(Status.valueOf(status));\n+  }\n+\n+  for (RichMember rm : richMembers) {\n+   if (statuses.contains(rm.getStatus())) allowedRichMembers.add(rm);\n+  }\n+\n+  return allowedRichMembers;\n+ }\n+\n+ /**\n+  * From list of richMembers with attributes get all these richMembers only with specificied attributes by attrsNames.\n+  * If attrsNames is empty or null, return back all richMembers with all already defined attributes.\n+  *\n+  * @param sess\n+  * @param richMembersWithAttributes\n+  * @param attrsNames\n+  * @return list of RichMembers with already specified attributes.\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ private List<RichMember> getRichMembersOnlyWithSpecificAttrNames(PerunSession sess,\n+                                                                  List<RichMember> richMembersWithAttributes, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+  if (richMembersWithAttributes == null || richMembersWithAttributes.isEmpty())\n+   return new ArrayList<RichMember>();\n+  if (attrsNames == null || attrsNames.isEmpty())\n+   return richMembersWithAttributes;\n+  for (RichMember rm : richMembersWithAttributes) {\n+\n+   for (Iterator<Attribute> userAttributeIter = rm.getUserAttributes().iterator(); userAttributeIter.hasNext();) {\n+    Attribute attr = userAttributeIter.next();\n+    if (!attrsNames.contains(attr.getName())) userAttributeIter.remove();\n+   }\n+\n+   for (Iterator<Attribute> memberAttributeIter = rm.getMemberAttributes().iterator(); memberAttributeIter.hasNext();) {\n+    Attribute attr = memberAttributeIter.next();\n+    if (!attrsNames.contains(attr.getName())) memberAttributeIter.remove();\n+   }\n+  }\n+\n+  return richMembersWithAttributes;\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, AttributeNotExistsException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n+  List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+  List<AttributeDefinition> attrsDef = new ArrayList<AttributeDefinition>();\n+  for (String atrrName : attrsNames) {\n+   AttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, atrrName);\n+   attrsDef.add(attrDef);\n+  }\n+  List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+  return richMembersWithAttributes;\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n+  List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+  List<RichMember> richMembersWithAttributes = this.convertMembersToRichMembersWithAttributes(sess, richMembers, attrsDef);\n+  return richMembersWithAttributes;\n+ }\n+\n+ public List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException {\n+  List<Member> members = this.getMembers(sess, vo);\n+  return this.convertMembersToRichMembers(sess, members);\n+ }\n+\n+ public List<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException {\n+  List<Member> members = new ArrayList<Member>();\n+  members.addAll(perunBl.getGroupsManagerBl().getGroupMembers(sess, group));\n+  List<RichMember> richMembers = this.convertMembersToRichMembers(sess, members);\n+  return richMembers;\n+ }\n+\n+ public List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+  List<Member> members = this.getMembers(sess, vo, status);\n+  return this.convertMembersToRichMembers(sess, members);\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n+  List<RichMember> richMembers = this.getRichMembers(sess, vo);\n+  return this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+  List<RichMember> richMembers = this.getRichMembers(sess, vo, status);\n+  return this.convertMembersToRichMembersWithAttributes(sess, richMembers);\n+ }\n+\n+ public List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException {\n+  List<RichMember> richMembers = this.getRichMembers(sess, group);\n+  return getOnlyRichMembersWithAllowedStatuses(sess, this.convertMembersToRichMembersWithAttributes(sess, richMembers), allowedStatuses);\n+ }\n+\n+ public List<RichMember> convertMembersToRichMembers(PerunSession sess, List<Member> members) throws InternalErrorException {\n+  List<RichMember> richMembers = new ArrayList<RichMember>();\n+  for (Member member : members) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   List<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n+   RichMember richMember = new RichMember(user, member, userExtSources);\n+   richMembers.add(richMember);\n+  }\n+\n+  return richMembers;\n+ }\n+\n+ public List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers) throws InternalErrorException {\n+\n+  for (RichMember richMember : richMembers) {\n+   List<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser());\n+   List<Attribute> memberAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember);\n+   richMember.setUserAttributes(userAttributes);\n+   richMember.setMemberAttributes(memberAttributes);\n+  }\n+\n+  return richMembers;\n+ }\n+\n+ public List<RichMember> convertMembersToRichMembersWithAttributes(PerunSession sess, List<RichMember> richMembers, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+  List<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n+  List<AttributeDefinition> membersAttributesDef = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attrd : attrsDef) {\n+   if (attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) usersAttributesDef.add(attrd);\n+   else if (attrd.getName().startsWith(AttributesManager.NS_MEMBER_ATTR)) membersAttributesDef.add(attrd);\n+  }\n+\n+  for (RichMember richMember : richMembers) {\n+   List<Attribute> userAttributes = new ArrayList<Attribute>();\n+   List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+   List<String> userAttrNames = new ArrayList<String>();\n+   for (AttributeDefinition ad : usersAttributesDef) {\n+    userAttrNames.add(ad.getName());\n+   }\n+   userAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember.getUser(), userAttrNames));\n+   List<String> memberAttrNames = new ArrayList<String>();\n+   for (AttributeDefinition ad : membersAttributesDef) {\n+    memberAttrNames.add(ad.getName());\n+   }\n+   memberAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richMember, memberAttrNames));\n+   richMember.setUserAttributes(userAttributes);\n+   richMember.setMemberAttributes(memberAttributes);\n+  }\n+\n+  return richMembers;\n+ }\n+\n+ public int getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException {\n+  return getMembersManagerImpl().getMembersCount(sess, vo);\n+ }\n+\n+ public int getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException {\n+  return getMembersManagerImpl().getMembersCount(sess, vo, status);\n+ }\n+\n+ public Vo getMemberVo(PerunSession sess, Member member) throws InternalErrorException {\n+  try {\n+   return getPerunBl().getVosManagerBl().getVoById(sess, getMembersManagerImpl().getMemberVoId(sess, member));\n+  } catch (VoNotExistsException e1) {\n+   throw new ConsistencyErrorException(\"Member is under nonexistent VO\", e1);\n+  }\n+ }\n+\n+ public List<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n+  List<Member> members = new ArrayList<Member>();\n+  for (User user : users) {\n+   members.addAll(getMembersManagerImpl().getMembersByUser(sess, user));\n+  }\n+\n+  return members;\n+ }\n+\n+ public List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsersByName(sess, searchString);\n+  List<Member> members = new ArrayList<Member>();\n+  for (User user : users) {\n+   try {\n+    members.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n+   } catch (MemberNotExistsException e) {\n+    // User is not member of this VO\n+\n+   }\n+  }\n+\n+  return this.setAllMembersSameType(members, MembershipType.DIRECT);\n+ }\n+\n+ public List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+  List<Member> members = new ArrayList<Member>();\n+  for (User user : users) {\n+   try {\n+    members.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n+   } catch (MemberNotExistsException e) {\n+    // User is not member of this VO\n+\n+   }\n+  }\n+\n+  return this.setAllMembersSameType(members, MembershipType.DIRECT);\n+ }\n+\n+ public List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+  List<Member> allGroupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+  List<Member> allFoundMembers = new ArrayList<Member>();\n+  for (User user : users) {\n+   allFoundMembers.addAll(getMembersByUser(sess, user));\n+  }\n+  allGroupMembers.retainAll(allFoundMembers);\n+  return allGroupMembers;\n+ }\n+\n+ public List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+  List<Member> allGroupMembers = new ArrayList<Member>();\n+  if (group.getParentGroupId() == null) {\n+   Vo vo = null;\n+   try {\n+    vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+   } catch (VoNotExistsException ex) {\n+    throw new ConsistencyErrorException(group + \" is not in \" + vo);\n+   }\n+   allGroupMembers = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+  } else {\n+   allGroupMembers = getPerunBl().getGroupsManagerBl().getParentGroupMembers(sess, group);\n+  }\n+  List<Member> allFoundMembers = new ArrayList<Member>();\n+  for (User user : users) {\n+   allFoundMembers.addAll(getMembersByUser(sess, user));\n+  }\n+  allGroupMembers.retainAll(allFoundMembers);\n+  return allGroupMembers;\n+ }\n+\n+ public List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n+  List<Member> members = findMembersInGroup(sess, group, searchString);\n+  return this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n+ }\n+\n+ public List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, ParentGroupNotExistsException {\n+  List<Member> members = findMembersInParentGroup(sess, group, searchString);\n+  return this.convertMembersToRichMembersWithAttributes(sess, this.convertMembersToRichMembers(sess, members));\n+ }\n+\n+ public List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+  List<Member> members = new ArrayList<Member>();\n+  for (User user : users) {\n+   try {\n+    members.add(getMembersManagerImpl().getMemberByUserId(sess, vo, user.getId()));\n+   } catch (MemberNotExistsException e) {\n+    // User is not member of this VO\n+\n+   }\n+  }\n+\n+  return this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n+ }\n+\n+ @Override\n+ public List<RichMember> findRichMembers(PerunSession sess, String searchString) throws InternalErrorException {\n+  List<User> users = getPerunBl().getUsersManagerBl().findUsers(sess, searchString);\n+  List<Member> members = new ArrayList<Member>();\n+  for (User user : users) {\n+   members.addAll(getMembersByUser(sess, user));\n+  }\n+\n+  return this.convertMembersToRichMembers(sess, this.setAllMembersSameType(members, MembershipType.DIRECT));\n+ }\n+\n+ public List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+  List<RichMember> list = findRichMembersInVo(sess, vo, searchString);\n+  return convertMembersToRichMembersWithAttributes(sess, list);\n+ }\n+\n+ @Override\n+ public List<RichMember> findRichMembersWithAttributes(PerunSession sess, String searchString) throws InternalErrorException {\n+  List<RichMember> list = findRichMembers(sess, searchString);\n+  return convertMembersToRichMembersWithAttributes(sess, list);\n+ }\n+\n+ public void checkMemberExists(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException {\n+  getMembersManagerImpl().checkMemberExists(sess, member);\n+ }\n+\n+ public Member setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException {\n+  switch (status) {\n+   case VALID:\n+    return validateMember(sess, member);\n+    //break;\n+   case INVALID:\n+    return invalidateMember(sess, member);\n+    //break;\n+   case SUSPENDED:\n+    return suspendMember(sess, member);\n+    //break;\n+   case EXPIRED:\n+    return expireMember(sess, member);\n+    //break;\n+   case DISABLED:\n+    return disableMember(sess, member);\n+    //break;\n+   default:\n+    throw new InternalErrorException(\"Unknown status:\" + status);\n+  }\n+ }\n+\n+ public Member validateMember(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (this.haveStatus(sess, member, Status.VALID)) {\n+   log.debug(\"Trying to validate member who is already valid. \" + member);\n+   return member;\n+  }\n+  Status oldStatus = member.getStatus();\n+  getMembersManagerImpl().setStatus(sess, member, Status.VALID);\n+  member.setStatus(Status.VALID);\n+  getPerunBl().getAuditer().log(sess, \"{} validated.\", member);\n+  if (oldStatus.equals(Status.INVALID)) {\n+   try {\n+    getPerunBl().getAttributesManagerBl().doTheMagic(sess, member);\n+   } catch (WrongAttributeAssignmentException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+\n+  return member;\n+ }\n+\n+ public Member validateMemberAsync(final PerunSession sess, final Member member) throws InternalErrorException {\n+  new Thread(new Runnable() {\n+   public void run() {\n+    try {\n+     Thread.sleep(5000);\n+    } catch (InterruptedException e) {\n+     // TODO Auto-generated catch block\n+     e.printStackTrace();\n+    }\n+    Status oldStatus = Status.getStatus(member.getStatus().getCode());\n+    try {\n+     ((PerunSessionImpl) sess).getPerunBl().getMembersManagerBl().validateMember(sess, member);\n+    } catch (Exception ex) {\n+     log.info(\"validateMemberAsync failed. Cause: {}\", ex);\n+\n+     try {\n+      getPerunBl().getAuditer().log(sess, \"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n+      log.info(\"Validation of {} failed. He stays in {} state.\", member, oldStatus);\n+     } catch (InternalErrorException internalError) {\n+      log.error(\"Store message to auditer failed. message: Validation of {} failed. He stays in {} state. cause: {}\", new Object[] {member, oldStatus, internalError});\n+     }\n+    }\n+   }\n+  }, \"validateMemberAsync\").start();\n+  return member;\n+ }\n+\n+ public Member invalidateMember(PerunSession sess, Member member) throws InternalErrorException {\n+  if (this.haveStatus(sess, member, Status.INVALID)) {\n+   log.debug(\"Trying to invalidate member who is already invalid. \" + member);\n+   return member;\n+  }\n+  getMembersManagerImpl().setStatus(sess, member, Status.INVALID);\n+  member.setStatus(Status.INVALID);\n+  getPerunBl().getAuditer().log(sess, \"{} invalidated.\", member);\n+  return member;\n+ }\n+\n+ public Member suspendMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n+  if (this.haveStatus(sess, member, Status.SUSPENDED)) {\n+   log.warn(\"Trying to suspend member who is already suspended. Suspend operation will be procesed anyway (to be shure).\" + member);\n+  }\n+  if (this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n+  getMembersManagerImpl().setStatus(sess, member, Status.SUSPENDED);\n+  member.setStatus(Status.SUSPENDED);\n+  getPerunBl().getAuditer().log(sess, \"{} suspended #{}.\", member, Auditer.engineForceKeyword);\n+  return member;\n+ }\n+\n+ public Member expireMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n+  if (this.haveStatus(sess, member, Status.EXPIRED)) {\n+   log.debug(\"Trying to set member expired but he's already expired. \" + member);\n+   return member;\n+  }\n+  if (this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n+  getMembersManagerImpl().setStatus(sess, member, Status.EXPIRED);\n+  member.setStatus(Status.EXPIRED);\n+  getPerunBl().getAuditer().log(sess, \"{} expired.\", member);\n+  return member;\n+ }\n+\n+ public Member disableMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotValidYetException {\n+  if (this.haveStatus(sess, member, Status.DISABLED)) {\n+   log.debug(\"Trying to disable member who is already disabled. \" + member);\n+   return member;\n+  }\n+  if (this.haveStatus(sess, member, Status.INVALID)) throw new MemberNotValidYetException(member);\n+  getMembersManagerImpl().setStatus(sess, member, Status.DISABLED);\n+  member.setStatus(Status.DISABLED);\n+  getPerunBl().getAuditer().log(sess, \"{} disabled.\", member);\n+  return member;\n+ }\n+\n+ public void insertToMemberGroup(PerunSession sess, Member member, Vo vo) throws InternalErrorException, AlreadyMemberException, GroupOperationsException {\n+  // Insert member into the members group\n+  try {\n+   getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+   Group g = getPerunBl().getGroupsManagerBl().getGroupByName(sess, vo, VosManager.MEMBERS_GROUP);\n+   getPerunBl().getGroupsManagerBl().addMemberToMembersGroup(sess, g, member);\n+  } catch (NotMemberOfParentGroupException ex) {\n+   //members group is top level -> this should not happen\n+   throw new ConsistencyErrorException(ex);\n+  } catch (GroupNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  } catch (VoNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  } catch (WrongAttributeValueException e) {\n+   throw new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n+  } catch (WrongReferenceAttributeValueException e) {\n+   throw new ConsistencyErrorException(e); //Member is not valid, so he couldn't have truly required atributes, neither he couldn't have influence on user attributes\n+  }\n+ }\n+\n+ public List<Member> retainMembersWithStatus(PerunSession sess, List<Member> members, Status status) throws InternalErrorException {\n+  Iterator<Member> iterator = members.iterator();\n+  while (iterator.hasNext()) {\n+   Member member = iterator.next();\n+   if (!haveStatus(sess, member, status)) iterator.remove();\n+  }\n+\n+  return members;\n+ }\n+\n+ public List<Member> getMembersByUsersIds(PerunSession sess, List<Integer> usersIds, Vo vo) throws InternalErrorException {\n+  return getMembersManagerImpl().getMembersByUsersIds(sess, usersIds, vo);\n+ }\n+\n+ public List<Member> getMembersByUsers(PerunSession sess, List<User> users, Vo vo) throws InternalErrorException {\n+  return getMembersManagerImpl().getMembersByUsers(sess, users, vo);\n+ }\n+\n+ public boolean haveStatus(PerunSession sess, Member member, Status status) {\n+  return member.getStatus().equals(status);\n+ }\n+\n+ public void extendMembership(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n+  this.manageMembershipExpiration(sess, member, true, true);\n+ }\n+\n+ public boolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n+  try {\n+   Pair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n+   return ret.getLeft();\n+  } catch (ExtendMembershipException e) {\n+   return false;\n+  }\n+ }\n+\n+ public boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException {\n+  Pair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, true);\n+  return ret.getLeft();\n+ }\n+\n+ public Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, ExtendMembershipException {\n+   // Check if the VO has set membershipExpirationRules attribute\n+  LinkedHashMap<String, String> membershipExpirationRules;\n+  Attribute membershipExpirationRulesAttribute = null;\n+  try {\n+   membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n+   membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n+      // If attribute was not filled, then silently exit with null\n+   if (membershipExpirationRules == null)\n+    return null;\n+  } catch (AttributeNotExistsException e) {\n+      // No rules set, so leave it as it is\n+   return null;\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(\"Shouldn't happen.\");\n+  }\n+\n+    // Which LOA we won't extend? This is applicable only for members who have already set expiration from the previous period\n+  if (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null) {\n+   String[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n+   for (String doNotExtendLoa : doNotExtendLoas) {\n+    if (doNotExtendLoa.equals(loa)) {\n+          // LOA provided is not allowed for extension\n+     throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA, \"Provided LoA \" + loa + \" doesn't have required level for VO id \" + vo.getId() + \".\");\n+    }\n+   }\n+  }\n+  Calendar calendar = Calendar.getInstance();\n+  String period = null;\n+    // Default extension\n+  if (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n+   period = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n+  }\n \n     // Do we extend particular LoA? Attribute syntax LoA|[period][.]\n-    if (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n+  if (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n       // Which period\n-      String[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n-      String membershipLoa = membershipPeriodLoa[0];\n-      String periodLoa = membershipPeriodLoa[1];\n+   String[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n+   String membershipLoa = membershipPeriodLoa[0];\n+   String periodLoa = membershipPeriodLoa[1];\n       // Does the user have this LoA?\n-      if (membershipLoa.equals(loa)) {\n-        period = periodLoa;\n-      }\n-    }\n+   if (membershipLoa.equals(loa)) {\n+    period = periodLoa;\n+   }\n+  }\n \n     // Do we extend for x months or for static date?\n-    if (period != null) {\n-      if (period.startsWith(\"+\")) {\n+  if (period != null) {\n+   if (period.startsWith(\"+\")) {\n         // By default do not add nothing\n-        int amount = 0;\n-        int field;\n+    int amount = 0;\n+    int field;\n \n         // We will add days/months/years\n-        Pattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n-        Matcher m = p.matcher(period);\n-        if (m.matches()) {\n-          String countString = m.group(1);\n-          amount = Integer.valueOf(countString);\n-\n-          String dmyString = m.group(2);\n-          if (dmyString.equals(\"d\")) {\n-            field = Calendar.DAY_OF_YEAR;\n-          } else if (dmyString.equals(\"m\")) {\n-            field = Calendar.MONTH;\n-          } else if (dmyString.equals(\"y\")) {\n-            field = Calendar.YEAR;\n-          } else {\n-            throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-          }\n-        } else {\n-          throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-        }\n+    Pattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n+    Matcher m = p.matcher(period);\n+    if (m.matches()) {\n+     String countString = m.group(1);\n+     amount = Integer.valueOf(countString);\n+     String dmyString = m.group(2);\n+     if (dmyString.equals(\"d\")) {\n+      field = Calendar.DAY_OF_YEAR;\n+     } else if (dmyString.equals(\"m\")) {\n+      field = Calendar.MONTH;\n+     } else if (dmyString.equals(\"y\")) {\n+             field = Calendar.YEAR;\n+            } else {\n+             throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+            }\n+    } else {\n+     throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+    }\n \n         // Add days/months/years\n-        calendar.add(field, amount);\n-      } else {\n+    calendar.add(field, amount);\n+   } else {\n         // We will extend to particular date\n \n         // Parse date\n-        Pattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n-        Matcher m = p.matcher(period);\n-        if (m.matches()) {\n-          int day = Integer.valueOf(m.group(1));\n-          int month = Integer.valueOf(m.group(2));\n+    Pattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n+    Matcher m = p.matcher(period);\n+    if (m.matches()) {\n+     int day = Integer.valueOf(m.group(1));\n+     int month = Integer.valueOf(m.group(2));\n \n           // Get current year\n-          int year = calendar.get(Calendar.YEAR);\n+     int year = calendar.get(Calendar.YEAR);\n \n           // We must detect if the extension date is in current year or in a next year\n-          boolean extensionInNextYear;\n-          Calendar extensionCalendar = Calendar.getInstance();\n-          extensionCalendar.set(year, month-1, day);\n-          Calendar today = Calendar.getInstance();\n-          if (extensionCalendar.before(today)) {\n+     boolean extensionInNextYear;\n+     Calendar extensionCalendar = Calendar.getInstance();\n+     extensionCalendar.set(year, month -1, day);\n+     Calendar today = Calendar.getInstance();\n+     if (extensionCalendar.before(today)) {\n             // Extension date is in a next year\n-            extensionInNextYear = true;\n-          } else {\n+      extensionInNextYear = true;\n+     } else {\n             // Extension is in the current year\n-            extensionInNextYear = false;\n-          }\n+      extensionInNextYear = false;\n+     }\n \n           // Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n-          calendar.set(year, month-1, day); // month is 0-based\n-          if (extensionInNextYear) {\n-            calendar.add(Calendar.YEAR, 1);\n-          }\n+     calendar.set(year, month -1, day); // month is 0-based\n+     if (extensionInNextYear) {\n+      calendar.add(Calendar.YEAR, 1);\n+     }\n \n           // ***** GRACE PERIOD *****\n           // Is there a grace period?\n-          if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n-            String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+     if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n+      String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n             // If the extension is requested in period-gracePeriod then extend to next period\n \n             // Get the value of the grace period\n-            p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n-            m = p.matcher(gracePeriod);\n-            if (m.matches()) {\n-              String countString = m.group(1);\n-              int amount = Integer.valueOf(countString);\n+      p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n+      m = p.matcher(gracePeriod);\n+      if (m.matches()) {\n+       String countString = m.group(1);\n+       int amount = Integer.valueOf(countString);\n \n               // Set the gracePeriodCalendar to the extension date\n-              Calendar gracePeriodCalendar = Calendar.getInstance();\n-              gracePeriodCalendar.set(year, month-1, day);\n-              if (extensionInNextYear) {\n-                gracePeriodCalendar.add(Calendar.YEAR, 1);\n-              }\n-\n-              int field;\n-              String dmyString = m.group(2);\n-              if (dmyString.equals(\"d\")) {\n-                field = Calendar.DAY_OF_YEAR;\n-              } else if (dmyString.equals(\"m\")) {\n-                field = Calendar.MONTH;\n-              } else if (dmyString.equals(\"y\")) {\n-                field = Calendar.YEAR;\n+       Calendar gracePeriodCalendar = Calendar.getInstance();\n+       gracePeriodCalendar.set(year, month -1, day);\n+       if (extensionInNextYear) {\n+        gracePeriodCalendar.add(Calendar.YEAR, 1);\n+       }\n+\n+       int field;\n+       String dmyString = m.group(2);\n+       if (dmyString.equals(\"d\")) {\n+        field = Calendar.DAY_OF_YEAR;\n+       } else if (dmyString.equals(\"m\")) {\n+        field = Calendar.MONTH;\n+       } else if (dmyString.equals(\"y\")) {\n+               field = Calendar.YEAR;\n               } else {\n-                throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+               throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n               }\n               // subtracts period definition, e.g. 3m\n-              gracePeriodCalendar.add(field, -amount);\n+       gracePeriodCalendar.add(field, -amount);\n \n               // Check if we are in grace period\n-              if (gracePeriodCalendar.before(Calendar.getInstance())) {\n+       if (gracePeriodCalendar.before(Calendar.getInstance())) {\n                 // We are in grace period, so extend to the next period\n-                calendar.add(Calendar.YEAR, 1);\n-              }\n+        calendar.add(Calendar.YEAR, 1);\n+       }\n+      }\n+     }\n+    } else {\n+     throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+    }\n+   }\n+\n+      // Reset hours, minutes and seconds to 0\n+   calendar.set(Calendar.HOUR, 0);\n+   calendar.set(Calendar.MINUTE, 0);\n+   calendar.set(Calendar.SECOND, 0);\n+   calendar.set(Calendar.MILLISECOND, 0);\n+  }\n+\n+  return calendar.getTime();\n+ }\n+\n+ public Date getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n+  try {\n+   Pair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n+   if (ret.getLeft()) {\n+    return ret.getRight();\n+   }\n+  } catch (ExtendMembershipException e) {\n+\n+  }\n+\n+  return null;\n+ }\n+\n+ /* Check if the user can apply for VO membership\n+ */\n+\n+ public boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, ExtendMembershipException {\n+  return this.canBeMemberInternal(sess, vo, user, loa, true);\n+ }\n+\n+ /* Check if the user can apply for VO membership\n+ */\n+\n+ public boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException {\n+  try {\n+   return this.canBeMemberInternal(sess, vo, user, loa, false);\n+  } catch (ExtendMembershipException e) {\n+   return false;\n+  }\n+ }\n+\n+ public RichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember) throws InternalErrorException {\n+  if (richMember == null) throw new InternalErrorException(\"RichMember can't be null.\");\n+  if (richMember.getUser() == null) throw new InternalErrorException(\"User cant be null in RichMember.\");\n+  //Filtering members attributes\n+  if (richMember.getMemberAttributes() != null) {\n+   List<Attribute> memberAttributes = richMember.getMemberAttributes();\n+   List<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n+   for (Attribute membAttr : memberAttributes) {\n+    if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, richMember, null)) {\n+     membAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, richMember, null));\n+     allowedMemberAttributes.add(membAttr);\n+    }\n+   }\n+   richMember.setMemberAttributes(allowedMemberAttributes);\n+  }\n+  //Filtering users attributes\n+  if (richMember.getUserAttributes() != null) {\n+   List<Attribute> userAttributes = richMember.getUserAttributes();\n+   List<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n+   for (Attribute userAttr : userAttributes) {\n+    if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richMember.getUser(), null)) {\n+     userAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richMember.getUser(), null));\n+     allowedUserAttributes.add(userAttr);\n+    }\n+   }\n+   richMember.setUserAttributes(allowedUserAttributes);\n+  }\n+\n+  return richMember;\n+ }\n+\n+ public List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers) throws InternalErrorException {\n+  List<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n+  if (richMembers == null || richMembers.isEmpty())\n+   return filteredRichMembers;\n+  for (RichMember rm : richMembers) {\n+   filteredRichMembers.add(this.filterOnlyAllowedAttributes(sess, rm));\n+  }\n+\n+  return filteredRichMembers;\n+ }\n+\n+ public List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, boolean useContext) throws InternalErrorException {\n+  //If no context should be used - every attribute is unique in context of member (for every member test access rights for all attributes again)\n+  if (!useContext)\n+   return filterOnlyAllowedAttributes(sess, richMembers);\n+\n+  //If context should be used - every attribute is unique in context of friendlyName (every attribute test only once per friendlyName)\n+  List<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n+  if (richMembers == null || richMembers.isEmpty())\n+   return filteredRichMembers;\n+\n+  // attr_name to boolean where null means - no rights at all, false means no write rights, true means read and write rights\n+  Map<String, Boolean> contextMap = new HashMap<>();\n+  // voId is there the context\n+  Integer voId = null;\n+  for (RichMember rm : richMembers) {\n+   //set or test voId for testing of context\n+   if (voId == null) {\n+    voId = rm.getVoId();\n+   } else {\n+    if (rm.getVoId() != voId) throw new InternalErrorException(\"Method using filtering by context, but some members are not from the same Vo!\");\n+   }\n+\n+   //Filtering members attributes\n+   if (rm.getMemberAttributes() != null) {\n+    List<Attribute> memberAttributes = rm.getMemberAttributes();\n+    List<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n+    for (Attribute membAttr : memberAttributes) {\n+     //if there is record in contextMap, use it\n+     if (contextMap.containsKey(membAttr.getFriendlyName())) {\n+      Boolean isWritable = contextMap.get(membAttr.getFriendlyName());\n+      if (isWritable != null) {\n+       membAttr.setWritable(isWritable);\n+       allowedMemberAttributes.add(membAttr);\n+      }\n+     //if not, get information about authz rights and set record to contextMap\n+     } else {\n+      if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, rm, null)) {\n+\n+       boolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, rm, null);\n+       membAttr.setWritable(isWritable);\n+       allowedMemberAttributes.add(membAttr);\n+       contextMap.put(membAttr.getFriendlyName(), isWritable);\n+      } else {\n+       contextMap.put(membAttr.getFriendlyName(), null);\n+      }\n+     }\n+    }\n+    rm.setMemberAttributes(allowedMemberAttributes);\n+   }\n+   //Filtering users attributes\n+   if (rm.getUserAttributes() != null) {\n+    List<Attribute> userAttributes = rm.getUserAttributes();\n+    List<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n+    for (Attribute userAttr : userAttributes) {\n+     //if there is record in contextMap, use it\n+     if (contextMap.containsKey(userAttr.getFriendlyName())) {\n+      Boolean isWritable = contextMap.get(userAttr.getFriendlyName());\n+      if (isWritable != null) {\n+       userAttr.setWritable(isWritable);\n+       allowedUserAttributes.add(userAttr);\n+      }\n+     //if not, get information about authz rights and set record to contextMap\n+     } else {\n+      if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, rm.getUser(), null)) {\n+\n+       boolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, rm.getUser(), null);\n+       userAttr.setWritable(isWritable);\n+       allowedUserAttributes.add(userAttr);\n+       contextMap.put(userAttr.getFriendlyName(), isWritable);\n+      } else {\n+       contextMap.put(userAttr.getFriendlyName(), null);\n+      }\n+     }\n+     rm.setUserAttributes(allowedUserAttributes);\n+    }\n+   }\n+   filteredRichMembers.add(rm);\n+  }\n+\n+  return filteredRichMembers;\n+ }\n+\n+ /**\n+  * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n+  *\n+  * Check if the user can apply for VO membership. VO restrictions doesn't apply to service users.\n+  *\n+  * @param sess session\n+  * @param vo VO to apply for\n+  * @param user User applying for membership\n+  * @param loa level of assurance provided by user's external identity\n+  * @param throwExceptions TRUE = throw exceptions / FALSE = return false when user can't be member of VO\n+  * @return True if user can become member of VO / false or exception otherwise.\n+  *\n+  * @throws ExtendMembershipException When user can't be member of VO and throwExceptions is set to true\n+  * @throws InternalErrorException\n+ */\n+\n+ protected boolean canBeMemberInternal(PerunSession sess, Vo vo, User user, String loa, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n+  if (user != null && user.isServiceUser())\n+   return true;\n+\n+  // Check if the VO has set membershipExpirationRules attribute\n+  LinkedHashMap<String, String> membershipExpirationRules;\n+  Attribute membershipExpirationRulesAttribute = null;\n+  try {\n+   membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n+   membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n+   // If attribute was not filled, then silently exit\n+   if (membershipExpirationRules == null)\n+    return true;\n+  } catch (AttributeNotExistsException e) {\n+   // No rules set, so leave it as it is\n+   return true;\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(\"Shouldn't happen.\");\n+  }\n+\n+  // Which LOA we won't allow?\n+  if (membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) {\n+   if (loa == null) {\n+    // User doesn't have LOA defined and LOA is required for getting in, so do not allow membership.\n+    log.warn(\"User {} doesn't have LOA defined, but 'doNotAllowLoa' option is set for VO {}.\", user, vo);\n+    if (throwExceptions) {\n+     throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA, \"User \" + user + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + vo.getId() + \".\");\n+    } else {\n+     return false;\n+    }\n+   }\n+   String[] doNotAllowLoas = membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName).split(\",\");\n+   for (String doNotAllowLoa : doNotAllowLoas) {\n+    if (doNotAllowLoa.equals(loa)) {\n+     // User has LOA which is not allowed for getting in\n+     if (throwExceptions) {\n+      throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n+\"User \" + user + \" doesn't have required LOA for VO id \" + vo.getId() + \".\");\n+     } else {\n+      return false;\n+     }\n+    }\n+   }\n+  }\n+\n+  return true;\n+ }\n+\n+ /**\n+  * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n+  *\n+  * If setAttributeValue is true, then store the membership expiration date into the attribute, otherwise\n+  * return object pair containing true/false if the member can be extended and date specifying exact date of the new expiration\n+  *\n+  * @param sess session\n+  * @param member member to check / set membership expiration\n+  * @param setAttributeValue TRUE = set new membership expiration date / FALSE = do NOT set new expiration date (just calculate it)\n+  * @param throwExceptions TRUE = throw exception / FALSE = return false when member can't extend membership\n+  * @return Pair with result in left side (can / can't extend membership) and Date in right side telling new membership expiration date\n+  *\n+  * @throws InternalErrorException\n+  * @throws ExtendMembershipException When member can't extend membership and throwException is set to true.\n+  */\n+\n+ protected Pair<Boolean, Date> manageMembershipExpiration(PerunSession sess, Member member, boolean setAttributeValue, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n+  // Check if the VO has set membershipExpirationRules attribute\n+  LinkedHashMap<String, String> membershipExpirationRules;\n+  Vo vo;\n+  Attribute membershipExpirationRulesAttribute = null;\n+  try {\n+   vo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n+   membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n+   membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n+   // If attribute was not filled, then silently exit\n+   if (membershipExpirationRules == null)\n+    return new Pair<Boolean, Date>(true, null);\n+  } catch (VoNotExistsException e) {\n+   throw new ConsistencyErrorException(\"Member \" + member + \" of non-existing VO id=\" + member.getVoId());\n+  } catch (AttributeNotExistsException e) {\n+   // There is no attribute definition for membership expiration rules.\n+   return new Pair<Boolean, Date>(true, null);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(\"Shouldn't happen.\");\n+  }\n+\n+  // Get user LOA\n+  String memberLoa = null;\n+  try {\n+   Attribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n+   memberLoa = (String) loa.getValue();\n+  } catch (AttributeNotExistsException e) {\n+   // Ignore, will be probably set further\n+\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  // Get current membershipExpiration date\n+  Attribute membershipExpirationAttribute = null;\n+  try {\n+   membershipExpirationAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n+  } catch (AttributeNotExistsException e) {\n+   throw new ConsistencyErrorException(\"Attribute: \" + AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\" + \" must be defined in order to use membershipExpirationRules\");\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  boolean isServiceUser = false;\n+  try {\n+   User user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+   isServiceUser = user.isServiceUser();\n+  } catch (UserNotExistsException ex) {\n+   throw new ConsistencyErrorException(\"User must exists for \" + member + \" when checking expiration rules.\");\n+  }\n+\n+  // Which LOA we won't extend?\n+  // This is applicable only for members who have already set expiration from the previous period\n+  // and are not service users\n+  if (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null && membershipExpirationAttribute.getValue() != null && !isServiceUser) {\n+   if (memberLoa == null) {\n+    // Member doesn't have LOA defined and LOA is required for extension, so do not extend membership.\n+    log.warn(\"Member {} doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id {}.\",\n+    member,\n+    member.getVoId());\n+    if (throwExceptions) {\n+     throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA, \"Member \" + member + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + member.getVoId() + \".\");\n+    } else {\n+     return new Pair<Boolean, Date>(false, null);\n+    }\n+   }\n+   String[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n+   for (String doNotExtendLoa : doNotExtendLoas) {\n+    if (doNotExtendLoa.equals(memberLoa)) {\n+     // Member has LOA which is not allowed for extension\n+     if (throwExceptions) {\n+      throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION, \"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n+     } else {\n+      return new Pair<Boolean, Date>(false, null);\n+     }\n+    }\n+   }\n+  }\n+  Calendar calendar = Calendar.getInstance();\n+\n+  // Does the user have expired membership, if yes, then for canExtendMembership return true\n+  if (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n+   try {\n+    Date currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n+    Calendar currentMemberExpirationCalendar = Calendar.getInstance();\n+    currentMemberExpirationCalendar.setTime(currentMemberExpiration);\n+    if (calendar.after(currentMemberExpirationCalendar)) {\n+     return new Pair<Boolean, Date>(true, null);\n+    }\n+   } catch (ParseException e) {\n+    throw new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n+   }\n+  }\n+  String period = null;\n+  // Default extension\n+  if (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n+   period = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n+  }\n+\n+  // Do we extend particular LoA? Attribute syntax LoA|[period][.]\n+  if (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n+   // Which period\n+   String[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n+   String loa = membershipPeriodLoa[0];\n+   String periodLoa = membershipPeriodLoa[1];\n+   // Does the user have this LoA?\n+   if (loa.equals(memberLoa)) {\n+    if (periodLoa.endsWith(\".\")) {\n+     // If period ends with ., then we do not allow extension for users with particular LoA if they are already members\n+     if (membershipExpirationAttribute.getValue() != null) {\n+      if (throwExceptions) {\n+       throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION, \"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n+      } else {\n+       return new Pair<Boolean, Date>(false, null);\n+      }\n+     }\n+     // remove dot from the end of the string\n+     period = periodLoa.substring(0, periodLoa.length()-1);\n+    } else {\n+     period = periodLoa;\n+    }\n+   }\n+  }\n+\n+  // Do we extend for x months or for static date?\n+  if (period != null) {\n+   if (period.startsWith(\"+\")) {\n+    if (!isMemberInGracePeriod(membershipExpirationRules, (String) membershipExpirationAttribute.getValue())) {\n+     if (throwExceptions) {\n+      throw new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(), \"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n+     } else {\n+      return new Pair<Boolean, Date>(false, null);\n+     }\n+    }\n+    // By default do not add nothing\n+\n+    int amount = 0;\n+    int field;\n+\n+    // We will add days/months/years\n+    Pattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n+    Matcher m = p.matcher(period);\n+    if (m.matches()) {\n+     String countString = m.group(1);\n+     amount = Integer.valueOf(countString);\n+     String dmyString = m.group(2);\n+     if (dmyString.equals(\"d\")) {\n+      field = Calendar.DAY_OF_YEAR;\n+     } else if (dmyString.equals(\"m\")) {\n+      field = Calendar.MONTH;\n+     } else if (dmyString.equals(\"y\")) {\n+             field = Calendar.YEAR;\n+            } else {\n+             throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n             }\n+    } else {\n+     throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+    }\n+\n+    // Add days/months/years\n+    calendar.add(field, amount);\n+   } else {\n+    // We will extend to particular date\n+\n+    // Parse date\n+    Pattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n+    Matcher m = p.matcher(period);\n+    if (m.matches()) {\n+     int day = Integer.valueOf(m.group(1));\n+     int month = Integer.valueOf(m.group(2));\n+\n+     // Get current year\n+     int year = calendar.get(Calendar.YEAR);\n+\n+     // We must detect if the extension date is in current year or in a next year\n+     boolean extensionInNextYear;\n+     Calendar extensionCalendar = Calendar.getInstance();\n+     extensionCalendar.set(year, month -1, day);\n+     Calendar today = Calendar.getInstance();\n+     if (extensionCalendar.before(today)) {\n+      // Extension date is in a next year\n+      extensionInNextYear = true;\n+     } else {\n+      // Extension is in the current year\n+      extensionInNextYear = false;\n+     }\n+\n+     // Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n+     calendar.set(year, month -1, day); // month is 0-based\n+     if (extensionInNextYear) {\n+      calendar.add(Calendar.YEAR, 1);\n+     }\n+\n+     // ***** GRACE PERIOD *****\n+     // Is there a grace period?\n+     if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n+      String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+      // If the extension is requested in period-gracePeriod then extend to next period\n+\n+      // Get the value of the grace period\n+      p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n+      m = p.matcher(gracePeriod);\n+      if (m.matches()) {\n+       String countString = m.group(1);\n+       int amount = Integer.valueOf(countString);\n+\n+       // Set the gracePeriodCalendar to the extension date\n+       Calendar gracePeriodCalendar = Calendar.getInstance();\n+       gracePeriodCalendar.set(year, month -1, day);\n+       if (extensionInNextYear) {\n+        gracePeriodCalendar.add(Calendar.YEAR, 1);\n+       }\n+\n+       int field;\n+       String dmyString = m.group(2);\n+       if (dmyString.equals(\"d\")) {\n+        field = Calendar.DAY_OF_YEAR;\n+       } else if (dmyString.equals(\"m\")) {\n+        field = Calendar.MONTH;\n+       } else if (dmyString.equals(\"y\")) {\n+               field = Calendar.YEAR;\n+              } else {\n+               throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+              }\n+       // subtracts period definition, e.g. 3m\n+       gracePeriodCalendar.add(field, -amount);\n+\n+       // Check if we are in grace period\n+       if (gracePeriodCalendar.before(Calendar.getInstance())) {\n+        // We are in grace period, so extend to the next period\n+        calendar.add(Calendar.YEAR, 1);\n+       }\n+\n+       // If we do not need to set the attribute value, only check if the current member's expiration time is not in grace period\n+       if (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n+        try {\n+         Date currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n+         // subtracts grace period from the currentMemberExpiration\n+         Calendar currentMemberExpirationCalendar = Calendar.getInstance();\n+         currentMemberExpirationCalendar.setTime(currentMemberExpiration);\n+         currentMemberExpirationCalendar.add(field, -amount);\n+\n+         // if today is before that time, user can extend his period\n+         if (currentMemberExpirationCalendar.after(Calendar.getInstance())) {\n+          if (throwExceptions) {\n+           throw new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(), \"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n+          } else {\n+           return new Pair<Boolean, Date>(false, null);\n           }\n-        } else {\n-          throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n+         }\n+        } catch (ParseException e) {\n+         throw new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n         }\n+       }\n       }\n-\n-      // Reset hours, minutes and seconds to 0\n-      calendar.set(Calendar.HOUR, 0);\n-      calendar.set(Calendar.MINUTE, 0);\n-      calendar.set(Calendar.SECOND, 0);\n-      calendar.set(Calendar.MILLISECOND, 0);\n+     }\n+    } else {\n+     throw new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n     }\n+   }\n+\n+   // Reset hours, minutes and seconds to 0\n+   calendar.set(Calendar.HOUR, 0);\n+   calendar.set(Calendar.MINUTE, 0);\n+   calendar.set(Calendar.SECOND, 0);\n+   calendar.set(Calendar.MILLISECOND, 0);\n+\n+   // Set new value of the membershipExpiration for the member\n+   if (setAttributeValue) {\n+    membershipExpirationAttribute.setValue(BeansUtils.getDateFormatterWithoutTime().format(calendar.getTime()));\n \n-    return calendar.getTime();\n-\t}\n-\n-\tpublic Date getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tPair<Boolean, Date> ret = this.manageMembershipExpiration(sess, member, false, false);\n-\t\t\tif (ret.getLeft()) {\n-\t\t\t\treturn ret.getRight();\n-\t\t\t}\n-\t\t} catch (ExtendMembershipException e) {}\n-\n-\t\treturn null;\n-\t}\n-\n-\t/* Check if the user can apply for VO membership\n-\t*/\n-\tpublic boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, ExtendMembershipException {\n-\t\treturn this.canBeMemberInternal(sess, vo, user, loa, true);\n-\t}\n-\n-\t/* Check if the user can apply for VO membership\n-\t*/\n-\tpublic boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn this.canBeMemberInternal(sess, vo, user, loa, false);\n-\t\t} catch (ExtendMembershipException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic RichMember filterOnlyAllowedAttributes(PerunSession sess, RichMember richMember) throws InternalErrorException {\n-\t\tif(richMember == null) throw new InternalErrorException(\"RichMember can't be null.\");\n-\t\tif(richMember.getUser() == null) throw new InternalErrorException(\"User cant be null in RichMember.\");\n-\t\t//Filtering members attributes\n-\t\tif(richMember.getMemberAttributes() != null) {\n-\t\t\tList<Attribute> memberAttributes = richMember.getMemberAttributes();\n-\t\t\tList<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute membAttr: memberAttributes) {\n-\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, richMember, null)) {\n-\t\t\t\t\tmembAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, richMember, null));\n-\t\t\t\t\tallowedMemberAttributes.add(membAttr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\trichMember.setMemberAttributes(allowedMemberAttributes);\n-\t\t}\n-\t\t//Filtering users attributes\n-\t\tif(richMember.getUserAttributes() != null) {\n-\t\t\tList<Attribute> userAttributes = richMember.getUserAttributes();\n-\t\t\tList<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute userAttr: userAttributes) {\n-\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richMember.getUser(), null)) {\n-\t\t\t\t\tuserAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richMember.getUser(), null));\n-\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\trichMember.setUserAttributes(allowedUserAttributes);\n-\t\t}\n-\t\treturn richMember;\n-\t}\n-\n-\tpublic List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers) throws InternalErrorException {\n-\t\tList<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return filteredRichMembers;\n-\n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\tfilteredRichMembers.add(this.filterOnlyAllowedAttributes(sess, rm));\n-\t\t}\n-\n-\t\treturn filteredRichMembers;\n-\t}\n-\n-\tpublic List<RichMember> filterOnlyAllowedAttributes(PerunSession sess, List<RichMember> richMembers, boolean useContext) throws InternalErrorException {\n-\t\t//If no context should be used - every attribute is unique in context of member (for every member test access rights for all attributes again)\n-\t\tif(!useContext) return filterOnlyAllowedAttributes(sess, richMembers);\n-\n-\t\t//If context should be used - every attribute is unique in context of friendlyName (every attribute test only once per friendlyName)\n-\t\tList<RichMember> filteredRichMembers = new ArrayList<RichMember>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return filteredRichMembers;\n-\n-\t\t// attr_name to boolean where null means - no rights at all, false means no write rights, true means read and write rights\n-\t\tMap<String, Boolean> contextMap = new HashMap<>();\n-\t\t// voId is there the context\n-\t\tInteger voId = null;\n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\t//set or test voId for testing of context\n-\t\t\tif(voId == null) {\n-\t\t\t\tvoId = rm.getVoId();\n-\t\t\t} else {\n-\t\t\t\tif(rm.getVoId() != voId) throw new InternalErrorException(\"Method using filtering by context, but some members are not from the same Vo!\");\n-\t\t\t}\n-\n-\t\t\t//Filtering members attributes\n-\t\t\tif(rm.getMemberAttributes() != null) {\n-\t\t\t\tList<Attribute> memberAttributes = rm.getMemberAttributes();\n-\t\t\t\tList<Attribute> allowedMemberAttributes = new ArrayList<Attribute>();\n-\t\t\t\tfor(Attribute membAttr: memberAttributes) {\n-\t\t\t\t\t//if there is record in contextMap, use it\n-\t\t\t\t\tif(contextMap.containsKey(membAttr.getFriendlyName())) {\n-\t\t\t\t\t\tBoolean isWritable = contextMap.get(membAttr.getFriendlyName());\n-\t\t\t\t\t\tif(isWritable != null) {\n-\t\t\t\t\t\t\tmembAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedMemberAttributes.add(membAttr);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t//if not, get information about authz rights and set record to contextMap\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, membAttr, rm, null)) {\n-\t\t\t\t\t\t\tboolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, membAttr, rm, null);\n-\t\t\t\t\t\t\tmembAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedMemberAttributes.add(membAttr);\n-\t\t\t\t\t\t\tcontextMap.put(membAttr.getFriendlyName(), isWritable);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcontextMap.put(membAttr.getFriendlyName(), null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\trm.setMemberAttributes(allowedMemberAttributes);\n-\t\t\t}\n-\t\t\t//Filtering users attributes\n-\t\t\tif(rm.getUserAttributes() != null) {\n-\t\t\t\tList<Attribute> userAttributes = rm.getUserAttributes();\n-\t\t\t\tList<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n-\t\t\t\tfor(Attribute userAttr: userAttributes) {\n-\t\t\t\t\t//if there is record in contextMap, use it\n-\t\t\t\t\tif(contextMap.containsKey(userAttr.getFriendlyName())) {\n-\t\t\t\t\t\tBoolean isWritable = contextMap.get(userAttr.getFriendlyName());\n-\t\t\t\t\t\tif(isWritable != null) {\n-\t\t\t\t\t\t\tuserAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t//if not, get information about authz rights and set record to contextMap\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, rm.getUser(), null)) {\n-\t\t\t\t\t\t\tboolean isWritable = AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, rm.getUser(), null);\n-\t\t\t\t\t\t\tuserAttr.setWritable(isWritable);\n-\t\t\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t\t\t\tcontextMap.put(userAttr.getFriendlyName(), isWritable);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcontextMap.put(userAttr.getFriendlyName(), null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\trm.setUserAttributes(allowedUserAttributes);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfilteredRichMembers.add(rm);\n-\t\t}\n-\t\treturn filteredRichMembers;\n-\t}\n-\n-\t/**\n-\t * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n-\t *\n-\t * Check if the user can apply for VO membership. VO restrictions doesn't apply to service users.\n-\t *\n-\t * @param sess session\n-\t * @param vo VO to apply for\n-\t * @param user User applying for membership\n-\t * @param loa level of assurance provided by user's external identity\n-\t * @param throwExceptions TRUE = throw exceptions / FALSE = return false when user can't be member of VO\n-\t * @return True if user can become member of VO / false or exception otherwise.\n-\t *\n-\t * @throws ExtendMembershipException When user can't be member of VO and throwExceptions is set to true\n-\t * @throws InternalErrorException\n-\t*/\n-\tprotected boolean canBeMemberInternal(PerunSession sess, Vo vo, User user, String loa, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n-\n-\t\tif (user != null && user.isServiceUser()) return true;\n-\n-\t\t// Check if the VO has set membershipExpirationRules attribute\n-\t\tLinkedHashMap<String, String> membershipExpirationRules;\n-\n-\t\tAttribute membershipExpirationRulesAttribute = null;\n-\t\ttry {\n-\t\t\tmembershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n-\t\t\tmembershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n-\t\t\t// If attribute was not filled, then silently exit\n-\t\t\tif (membershipExpirationRules == null) return true;\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// No rules set, so leave it as it is\n-\t\t\treturn true;\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(\"Shouldn't happen.\");\n-\t\t}\n-\n-\t\t// Which LOA we won't allow?\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) {\n-\t\t\tif (loa == null) {\n-\t\t\t\t// User doesn't have LOA defined and LOA is required for getting in, so do not allow membership.\n-\t\t\t\tlog.warn(\"User {} doesn't have LOA defined, but 'doNotAllowLoa' option is set for VO {}.\", user, vo);\n-\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA,\n-\t\t\t\t\t\t\t\"User \" + user + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + vo.getId() + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tString[] doNotAllowLoas = membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName).split(\",\");\n-\n-\t\t\tfor (String doNotAllowLoa : doNotAllowLoas) {\n-\t\t\t\tif (doNotAllowLoa.equals(loa)) {\n-\t\t\t\t\t// User has LOA which is not allowed for getting in\n-\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA,\n-\t\t\t\t\t\t\t\t\"User \" + user + \" doesn't have required LOA for VO id \" + vo.getId() + \".\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t/**\n-\t * More info on https://wiki.metacentrum.cz/wiki/VO_managers%27s_manual\n-\t *\n-\t * If setAttributeValue is true, then store the membership expiration date into the attribute, otherwise\n-\t * return object pair containing true/false if the member can be extended and date specifying exact date of the new expiration\n-\t *\n-\t * @param sess session\n-\t * @param member member to check / set membership expiration\n-\t * @param setAttributeValue TRUE = set new membership expiration date / FALSE = do NOT set new expiration date (just calculate it)\n-\t * @param throwExceptions TRUE = throw exception / FALSE = return false when member can't extend membership\n-\t * @return Pair with result in left side (can / can't extend membership) and Date in right side telling new membership expiration date\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException When member can't extend membership and throwException is set to true.\n-\t */\n-\tprotected Pair<Boolean, Date> manageMembershipExpiration(PerunSession sess, Member member, boolean setAttributeValue, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {\n-\t\t// Check if the VO has set membershipExpirationRules attribute\n-\t\tLinkedHashMap<String, String> membershipExpirationRules;\n-\n-\t\tVo vo;\n-\t\tAttribute membershipExpirationRulesAttribute = null;\n-\t\ttry {\n-\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n-\t\t\tmembershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName);\n-\t\t\tmembershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue();\n-\t\t\t// If attribute was not filled, then silently exit\n-\t\t\tif (membershipExpirationRules == null) return new Pair<Boolean, Date>(true, null);\n-\t\t} catch (VoNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member \" + member + \" of non-existing VO id=\" + member.getVoId());\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// There is no attribute definition for membership expiration rules.\n-\t\t\treturn new Pair<Boolean, Date>(true, null);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(\"Shouldn't happen.\");\n-\t\t}\n-\n-\t\t// Get user LOA\n-\t\tString memberLoa = null;\n-\t\ttry {\n-\t\t\tAttribute loa = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_VIRT + \":loa\");\n-\t\t\tmemberLoa = (String) loa.getValue();\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t// Ignore, will be probably set further\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// Get current membershipExpiration date\n-\t\tAttribute membershipExpirationAttribute = null;\n-\t\ttry {\n-\t\t\tmembershipExpirationAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member,\n-\t\t\t\t\tAttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute: \" + AttributesManager.NS_MEMBER_ATTR_DEF +\n-\t\t\t\t\t\t\":membershipExpiration\" + \" must be defined in order to use membershipExpirationRules\");\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tboolean isServiceUser = false;\n-\t\ttry {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\tisServiceUser = user.isServiceUser();\n-\t\t} catch (UserNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"User must exists for \"+member+\" when checking expiration rules.\");\n-\t\t}\n-\n-\t\t// Which LOA we won't extend?\n-\t\t// This is applicable only for members who have already set expiration from the previous period\n-\t\t// and are not service users\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName) != null &&\n-\t\t\t\tmembershipExpirationAttribute.getValue() != null &&\n-\t\t\t\t!isServiceUser) {\n-\t\t\tif (memberLoa == null) {\n-\t\t\t\t// Member doesn't have LOA defined and LOA is required for extension, so do not extend membership.\n-\t\t\t\tlog.warn(\"Member {} doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id {}.\", member, member.getVoId());\n-\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA,\n-\t\t\t\t\t\t\t\"Member \" + member + \" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tString[] doNotExtendLoas = membershipExpirationRules.get(MembersManager.membershipDoNotExtendLoaKeyName).split(\",\");\n-\n-\t\t\tfor (String doNotExtendLoa : doNotExtendLoas) {\n-\t\t\t\tif (doNotExtendLoa.equals(memberLoa)) {\n-\t\t\t\t\t// Member has LOA which is not allowed for extension\n-\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION,\n-\t\t\t\t\t\t\t\t\"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tCalendar calendar = Calendar.getInstance();\n-\n-\t\t// Does the user have expired membership, if yes, then for canExtendMembership return true\n-\t\tif (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n-\t\t\ttry {\n-\t\t\t\tDate currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n-\n-\t\t\t\tCalendar currentMemberExpirationCalendar = Calendar.getInstance();\n-\t\t\t\tcurrentMemberExpirationCalendar.setTime(currentMemberExpiration);\n-\n-\t\t\t\tif (calendar.after(currentMemberExpirationCalendar)) {\n-\t\t\t\t\treturn new Pair<Boolean, Date>(true, null);\n-\t\t\t\t}\n-\t\t\t} catch (ParseException e) {\n-\t\t\t\tthrow new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n-\t\t\t}\n-\t\t}\n-\n-\t\tString period = null;\n-\t\t// Default extension\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipPeriodKeyName) != null) {\n-\t\t\tperiod = membershipExpirationRules.get(MembersManager.membershipPeriodKeyName);\n-\t\t}\n-\n-\t\t// Do we extend particular LoA? Attribute syntax LoA|[period][.]\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName) != null) {\n-\t\t\t// Which period\n-\t\t\tString[] membershipPeriodLoa = membershipExpirationRules.get(MembersManager.membershipPeriodLoaKeyName).split(\"\\\\|\");\n-\t\t\tString loa = membershipPeriodLoa[0];\n-\t\t\tString periodLoa = membershipPeriodLoa[1];\n-\t\t\t// Does the user have this LoA?\n-\t\t\tif (loa.equals(memberLoa)) {\n-\t\t\t\tif (periodLoa.endsWith(\".\")) {\n-\t\t\t\t\t// If period ends with ., then we do not allow extension for users with particular LoA if they are already members\n-\t\t\t\t\tif (membershipExpirationAttribute.getValue() != null) {\n-\t\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOAFOREXTENSION,\n-\t\t\t\t\t\t\t\t\t\"Member \" + member + \" doesn't have required LOA for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t// remove dot from the end of the string\n-\t\t\t\t\tperiod = periodLoa.substring(0, periodLoa.length() - 1);\n-\t\t\t\t} else {\n-\t\t\t\t\tperiod = periodLoa;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Do we extend for x months or for static date?\n-\t\tif (period != null) {\n-\t\t\tif (period.startsWith(\"+\")) {\n-\t\t\t\tif (!isMemberInGracePeriod(membershipExpirationRules, (String) membershipExpirationAttribute.getValue())) {\n-\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(),\n-\t\t\t\t\t\t\t\t\"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t// By default do not add nothing\n-\t\t\t\tint amount = 0;\n-\t\t\t\tint field;\n-\n-\t\t\t\t// We will add days/months/years\n-\t\t\t\tPattern p = Pattern.compile(\"\\\\+([0-9]+)([dmy]?)\");\n-\t\t\t\tMatcher m = p.matcher(period);\n-\t\t\t\tif (m.matches()) {\n-\t\t\t\t\tString countString = m.group(1);\n-\t\t\t\t\tamount = Integer.valueOf(countString);\n-\n-\t\t\t\t\tString dmyString = m.group(2);\n-\t\t\t\t\tif (dmyString.equals(\"d\")) {\n-\t\t\t\t\t\tfield = Calendar.DAY_OF_YEAR;\n-\t\t\t\t\t} else if (dmyString.equals(\"m\")) {\n-\t\t\t\t\t\tfield = Calendar.MONTH;\n-\t\t\t\t\t} else if (dmyString.equals(\"y\")) {\n-\t\t\t\t\t\tfield = Calendar.YEAR;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-\t\t\t\t}\n-\n-\t\t\t\t// Add days/months/years\n-\t\t\t\tcalendar.add(field, amount);\n-\t\t\t} else {\n-\t\t\t\t// We will extend to particular date\n-\n-\t\t\t\t// Parse date\n-\t\t\t\tPattern p = Pattern.compile(\"([0-9]+).([0-9]+).\");\n-\t\t\t\tMatcher m = p.matcher(period);\n-\t\t\t\tif (m.matches()) {\n-\t\t\t\t\tint day = Integer.valueOf(m.group(1));\n-\t\t\t\t\tint month = Integer.valueOf(m.group(2));\n-\n-\t\t\t\t\t// Get current year\n-\t\t\t\t\tint year = calendar.get(Calendar.YEAR);\n-\n-\t\t\t\t\t// We must detect if the extension date is in current year or in a next year\n-\t\t\t\t\tboolean extensionInNextYear;\n-\t\t\t\t\tCalendar extensionCalendar = Calendar.getInstance();\n-\t\t\t\t\textensionCalendar.set(year, month-1, day);\n-\t\t\t\t\tCalendar today = Calendar.getInstance();\n-\t\t\t\t\tif (extensionCalendar.before(today)) {\n-\t\t\t\t\t\t// Extension date is in a next year\n-\t\t\t\t\t\textensionInNextYear = true;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// Extension is in the current year\n-\t\t\t\t\t\textensionInNextYear = false;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Set the date to which the membershi should be extended, can be changed if there was grace period, see next part of the code\n-\t\t\t\t\tcalendar.set(year, month-1, day); // month is 0-based\n-\t\t\t\t\tif (extensionInNextYear) {\n-\t\t\t\t\t\tcalendar.add(Calendar.YEAR, 1);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// ***** GRACE PERIOD *****\n-\t\t\t\t\t// Is there a grace period?\n-\t\t\t\t\tif (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) != null) {\n-\t\t\t\t\t\tString gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n-\t\t\t\t\t\t// If the extension is requested in period-gracePeriod then extend to next period\n-\n-\t\t\t\t\t\t// Get the value of the grace period\n-\t\t\t\t\t\tp = Pattern.compile(\"([0-9]+)([dmy]?)\");\n-\t\t\t\t\t\tm = p.matcher(gracePeriod);\n-\t\t\t\t\t\tif (m.matches()) {\n-\t\t\t\t\t\t\tString countString = m.group(1);\n-\t\t\t\t\t\t\tint amount = Integer.valueOf(countString);\n-\n-\t\t\t\t\t\t\t// Set the gracePeriodCalendar to the extension date\n-\t\t\t\t\t\t\tCalendar gracePeriodCalendar = Calendar.getInstance();\n-\t\t\t\t\t\t\tgracePeriodCalendar.set(year, month-1, day);\n-\t\t\t\t\t\t\tif (extensionInNextYear) {\n-\t\t\t\t\t\t\t\tgracePeriodCalendar.add(Calendar.YEAR, 1);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tint field;\n-\t\t\t\t\t\t\tString dmyString = m.group(2);\n-\t\t\t\t\t\t\tif (dmyString.equals(\"d\")) {\n-\t\t\t\t\t\t\t\tfield = Calendar.DAY_OF_YEAR;\n-\t\t\t\t\t\t\t} else if (dmyString.equals(\"m\")) {\n-\t\t\t\t\t\t\t\tfield = Calendar.MONTH;\n-\t\t\t\t\t\t\t} else if (dmyString.equals(\"y\")) {\n-\t\t\t\t\t\t\t\tfield = Calendar.YEAR;\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t// subtracts period definition, e.g. 3m\n-\t\t\t\t\t\t\tgracePeriodCalendar.add(field, -amount);\n-\n-\t\t\t\t\t\t\t// Check if we are in grace period\n-\t\t\t\t\t\t\tif (gracePeriodCalendar.before(Calendar.getInstance())) {\n-\t\t\t\t\t\t\t\t// We are in grace period, so extend to the next period\n-\t\t\t\t\t\t\t\tcalendar.add(Calendar.YEAR, 1);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t// If we do not need to set the attribute value, only check if the current member's expiration time is not in grace period\n-\t\t\t\t\t\t\tif (!setAttributeValue && membershipExpirationAttribute.getValue() != null) {\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\tDate currentMemberExpiration = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpirationAttribute.getValue());\n-\t\t\t\t\t\t\t\t\t// subtracts grace period from the currentMemberExpiration\n-\t\t\t\t\t\t\t\t\tCalendar currentMemberExpirationCalendar = Calendar.getInstance();\n-\t\t\t\t\t\t\t\t\tcurrentMemberExpirationCalendar.setTime(currentMemberExpiration);\n-\n-\t\t\t\t\t\t\t\t\tcurrentMemberExpirationCalendar.add(field, -amount);\n-\n-\t\t\t\t\t\t\t\t\t// if today is before that time, user can extend his period\n-\t\t\t\t\t\t\t\t\tif (currentMemberExpirationCalendar.after(Calendar.getInstance())) {\n-\t\t\t\t\t\t\t\t\t\tif (throwExceptions) {\n-\t\t\t\t\t\t\t\t\t\t\tthrow new ExtendMembershipException(ExtendMembershipException.Reason.OUTSIDEEXTENSIONPERIOD, (String) membershipExpirationAttribute.getValue(),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\"Member \" + member + \" cannot extend because we are outside grace period for VO id \" + member.getVoId() + \".\");\n-\t\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\t\treturn new Pair<Boolean, Date>(false, null);\n-\t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (ParseException e) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of the membersExpiration: \" + membershipExpirationAttribute.getValue(), e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Wrong format of period in VO membershipExpirationRules attribute. Period: \" + period);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Reset hours, minutes and seconds to 0\n-\t\t\tcalendar.set(Calendar.HOUR, 0);\n-\t\t\tcalendar.set(Calendar.MINUTE, 0);\n-\t\t\tcalendar.set(Calendar.SECOND, 0);\n-\t\t\tcalendar.set(Calendar.MILLISECOND, 0);\n-\n-\t\t\t// Set new value of the membershipExpiration for the member\n-\t\t\tif (setAttributeValue) {\n-\t\t\t\tmembershipExpirationAttribute.setValue(BeansUtils.getDateFormatterWithoutTime().format(calendar.getTime()));\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, member, membershipExpirationAttribute);\n-\t\t\t\t} catch (WrongAttributeValueException e) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Wrong value: \" + membershipExpirationAttribute.getValue(),e);\n-\t\t\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn new Pair<Boolean, Date>(true, calendar.getTime());\n-\t}\n-\n-\t/**\n-\t * Return true if member is in grace period. If grace period is not set return always true.\n-\t * If member has not expiration date return always true.\n-\t *\n-\t * @param membershipExpirationRules\n-\t * @param membershipExpiration\n-\t * @return true if member is in grace period. Be carefull about special cases - read method description.\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate boolean isMemberInGracePeriod(Map<String, String> membershipExpirationRules, String membershipExpiration) throws InternalErrorException {\n-\t\t// Is a grace period set?\n-\t\tif (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) == null) {\n-\t\t\t// If not grace period is infinite\n-\t\t\treturn true;\n-\t\t}\n-\t\t// does member have expiration date?\n-\t\tif (membershipExpiration == null) {\n-\t\t\t// if not grace period is infinite\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tString gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n-\n-\t\t// If the extension is requested in period-gracePeriod then extend to next period\n-\t\tPattern p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n-\t\tMatcher m = p.matcher(gracePeriod);\n-\n-\t\tif (!m.matches()) {\n-\t\t\tthrow new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-\t\t}\n-\n-\t\tint amount = Integer.valueOf(m.group(1));\n-\n-\t\tint field;\n-\t\tString dmyString = m.group(2);\n-\t\tif (dmyString.equals(\"d\")) {\n-\t\t\tfield = Calendar.DAY_OF_YEAR;\n-\t\t} else if (dmyString.equals(\"m\")) {\n-\t\t\tfield = Calendar.MONTH;\n-\t\t} else if (dmyString.equals(\"y\")) {\n-\t\t\tfield = Calendar.YEAR;\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tCalendar beginOfGracePeriod = Calendar.getInstance();\n-\t\t\tDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\t\t\tbeginOfGracePeriod.setTime(format.parse(membershipExpiration));\n-\t\t\tbeginOfGracePeriod.add(field, -amount);\n-\t\t\tif (beginOfGracePeriod.before(Calendar.getInstance())) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t} catch (ParseException e) {\n-\t\t\tthrow new InternalErrorException(\"Wrong format of membership expiration attribute: \" + membershipExpiration, e);\n-\t\t}\n-\n-\t\treturn false;\n-\n-\t}\n-\n-\tpublic void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException {\n-\n-\t\tUser user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n-\t\tboolean found = false;\n-\t\tfor (Attribute a : logins) {\n-\t\t\tif (a.getFriendlyNameParameter().equals(namespace)) found = true;\n-\t\t}\n-\t\tif (!found) throw new InternalErrorException(user.toString()+\" doesn't have login in namespace: \"+namespace);\n-\n-\t\tString email = \"\";\n-\t\ttry {\n-\t\t\tAttribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\t\tif (a != null && a.getValue() != null) {\n-\t\t\t\temail = (String)a.getValue();\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tint id = getMembersManagerImpl().storePasswordResetRequest(sess, user, namespace);\n-\t\tUtils.sendPasswordResetEmail(user, email, namespace, url, id);\n-\n-\t}\n-\n-\t/**\n-\t * Take list of members and set them all the same type.\n-\t *\n-\t * @param members\n-\t * @param type\n-\t * @return list of members with the same type\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate List<Member> setAllMembersSameType(List<Member> members, MembershipType type) throws InternalErrorException {\n-\t\tif(members == null) return new ArrayList<Member>();\n-\t\tfor(Member m: members) {\n-\t\t\tm.setMembershipType(type);\n-\t\t}\n-\t\treturn members;\n-\t}\n-\n-\t/**\n-\t * Gets the membersManagerImpl.\n-\t *\n-\t * @return The membersManagerImpl.\n-\t */\n-\tpublic MembersManagerImplApi getMembersManagerImpl() {\n-\t\treturn this.membersManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\n-}\n+    try {\n+     getPerunBl().getAttributesManagerBl().setAttribute(sess, member, membershipExpirationAttribute);\n+    } catch (WrongAttributeValueException e) {\n+     throw new InternalErrorException(\"Wrong value: \" + membershipExpirationAttribute.getValue(), e);\n+    } catch (WrongReferenceAttributeValueException e) {\n+     throw new InternalErrorException(e);\n+    } catch (WrongAttributeAssignmentException e) {\n+     throw new InternalErrorException(e);\n+    }\n+   }\n+  }\n+\n+  return new Pair<Boolean, Date>(true, calendar.getTime());\n+ }\n+\n+ /**\n+  * Return true if member is in grace period. If grace period is not set return always true.\n+  * If member has not expiration date return always true.\n+  *\n+  * @param membershipExpirationRules\n+  * @param membershipExpiration\n+  * @return true if member is in grace period. Be carefull about special cases - read method description.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private boolean isMemberInGracePeriod(Map<String, String> membershipExpirationRules, String membershipExpiration) throws InternalErrorException {\n+  // Is a grace period set?\n+  if (membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName) == null) {\n+   // If not grace period is infinite\n+   return true;\n+  }\n+  // does member have expiration date?\n+  if (membershipExpiration == null) {\n+   // if not grace period is infinite\n+   return true;\n+  }\n+  String gracePeriod = membershipExpirationRules.get(MembersManager.membershipGracePeriodKeyName);\n+\n+  // If the extension is requested in period-gracePeriod then extend to next period\n+  Pattern p = Pattern.compile(\"([0-9]+)([dmy]?)\");\n+  Matcher m = p.matcher(gracePeriod);\n+  if (!m.matches()) {\n+   throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+  }\n+\n+  int amount = Integer.valueOf(m.group(1));\n+  int field;\n+  String dmyString = m.group(2);\n+  if (dmyString.equals(\"d\")) {\n+   field = Calendar.DAY_OF_YEAR;\n+  } else if (dmyString.equals(\"m\")) {\n+   field = Calendar.MONTH;\n+  } else if (dmyString.equals(\"y\")) {\n+          field = Calendar.YEAR;\n+         } else {\n+          throw new InternalErrorException(\"Wrong format of gracePeriod in VO membershipExpirationRules attribute. gracePeriod: \" + gracePeriod);\n+         }\n+\n+  try {\n+   Calendar beginOfGracePeriod = Calendar.getInstance();\n+   DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+   beginOfGracePeriod.setTime(format.parse(membershipExpiration));\n+   beginOfGracePeriod.add(field, -amount);\n+   if (beginOfGracePeriod.before(Calendar.getInstance())) {\n+    return true;\n+   }\n+  } catch (ParseException e) {\n+   throw new InternalErrorException(\"Wrong format of membership expiration attribute: \" + membershipExpiration, e);\n+  }\n+\n+  return false;\n+ }\n+\n+ public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException {\n+  User user = perunBl.getUsersManagerBl().getUserByMember(sess, member);\n+  List<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n+  boolean found = false;\n+  for (Attribute a : logins) {\n+   if (a.getFriendlyNameParameter().equals(namespace)) found = true;\n+  }\n+  if (!found) throw new InternalErrorException(user.toString() + \" doesn't have login in namespace: \" + namespace);\n+  String email = \"\";\n+  try {\n+   Attribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+   if (a != null && a.getValue() != null) {\n+    email = (String) a.getValue();\n+   }\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  } catch (AttributeNotExistsException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+\n+  int id = getMembersManagerImpl().storePasswordResetRequest(sess, user, namespace);\n+  Utils.sendPasswordResetEmail(user, email, namespace, url, id);\n+ }\n+\n+ /**\n+  * Take list of members and set them all the same type.\n+  *\n+  * @param members\n+  * @param type\n+  * @return list of members with the same type\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private List<Member> setAllMembersSameType(List<Member> members, MembershipType type) throws InternalErrorException {\n+  if (members == null)\n+   return new ArrayList<Member>();\n+  for (Member m : members) {\n+   m.setMembershipType(type);\n+  }\n+\n+  return members;\n+ }\n+\n+ /**\n+  * Gets the membersManagerImpl.\n+  *\n+  * @return The membersManagerImpl.\n+  */\n+\n+ public MembersManagerImplApi getMembersManagerImpl() {\n+  return this.membersManagerImpl;\n+ }\n+\n+ /**\n+  * Gets the perunBl.\n+  *\n+  * @return The perunBl.\n+  */\n+\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n+\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 3502
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/139/MembersManagerBlImpl.java\nindex c3f617866dc..f2409a31a89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/139/MembersManagerBlImpl.java\n@@ -179,7 +179,7 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \t\t\t\t//it is ok, we just want to remove it anyway\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\t/* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n \t\t\t for (Facility facility: facilitiesBeforeMemberRemove) {\n \t\t// Remove user-facility attributes\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/139/MembersManagerBlImpl.java\nindex c3f617866dc..f2409a31a89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/139/MembersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/139/MembersManagerBlImpl.java\n@@ -179,7 +179,7 @@ public class MembersManagerBlImpl implements MembersManagerBl {\n \t\t\t\t//it is ok, we just want to remove it anyway\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\t/* TODO this can be used for future optimization. If the user is not asigned to the facility anymore all user-facility attributes (for this facility) can be safely removed.\n \t\t\t for (Facility facility: facilitiesBeforeMemberRemove) {\n \t\t// Remove user-facility attributes\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}