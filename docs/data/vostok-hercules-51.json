{
    "project_name": "vostok-hercules",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "118",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 221).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                int retryCount = retryLimit;\n                do {\n                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n                    for (ElasticDocument document : readyToSend.values()) {\n                        writeEventToStream(dataStream, document.index(), document.id(), document.document());\n                    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/51/ElasticSender.java\nindex 5e90d915bb3..72ed9192cd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/51/ElasticSender.java\n@@ -115,7 +115,7 @@ public class ElasticSender extends Sender {\n             if (!readyToSend.isEmpty()) {\n                 int retryCount = retryLimit;\n                 do {\n-                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n+                ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n                     for (ElasticDocument document : readyToSend.values()) {\n                         writeEventToStream(dataStream, document.index(), document.id(), document.document());\n                     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/51/ElasticSender.java\nindex 5e90d915bb3..ca599fa15f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/51/ElasticSender.java\n@@ -32,196 +32,197 @@ import java.util.Properties;\n  * @author Gregory Koshelev\n  */\n public class ElasticSender extends Sender {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n \n-    private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n-    private static final ValidationResult UNDEFINED_INDEX_VALIDATION_RESULT = ValidationResult.error(\"Undefined index\");\n+  private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n+  private static final ValidationResult UNDEFINED_INDEX_VALIDATION_RESULT = ValidationResult.error(\"Undefined index\");\n \n-    private final IndexPolicy indexPolicy;\n-    private final IndexResolver indexResolver;\n+  private final IndexPolicy indexPolicy;\n+  private final IndexResolver indexResolver;\n \n-    private final EventJsonFormatter eventFormatter;\n+  private final EventJsonFormatter eventFormatter;\n \n-    private final ElasticClient client;\n+  private final ElasticClient client;\n \n-    private final int retryLimit;\n-    private final boolean retryOnUnknownErrors;\n+  private final int retryLimit;\n+  private final boolean retryOnUnknownErrors;\n \n-    private final boolean leproseryEnable;\n-    private final LeproserySender leproserySender;\n+  private final boolean leproseryEnable;\n+  private final LeproserySender leproserySender;\n \n-    private final IndicesMetricsCollector totalEventsIndicesMetricsCollector;\n-    private final IndicesMetricsCollector nonRetryableEventsIndicesMetricsCollector;\n-    private final Meter droppedNonRetryableErrorsMeter;\n-    private final Meter indexValidationErrorsMeter;\n+  private final IndicesMetricsCollector totalEventsIndicesMetricsCollector;\n+  private final IndicesMetricsCollector nonRetryableEventsIndicesMetricsCollector;\n+  private final Meter droppedNonRetryableErrorsMeter;\n+  private final Meter indexValidationErrorsMeter;\n \n-    public ElasticSender(Properties properties, MetricsCollector metricsCollector) {\n-        super(properties, metricsCollector);\n+  public ElasticSender(Properties properties, MetricsCollector metricsCollector) {\n+    super(properties, metricsCollector);\n \n-        this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties).get();\n+    this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties).get();\n \n-        Properties indexResolverProperties = PropertiesUtil.ofScope(properties, \"elastic.index.resolver\");\n-        this.indexResolver = IndexResolver.forPolicy(indexPolicy, indexResolverProperties);\n+    Properties indexResolverProperties = PropertiesUtil.ofScope(properties, \"elastic.index.resolver\");\n+    this.indexResolver = IndexResolver.forPolicy(indexPolicy, indexResolverProperties);\n \n-        this.eventFormatter = new EventJsonFormatter(PropertiesUtil.ofScope(properties, \"elastic.format\"));\n+    this.eventFormatter = new EventJsonFormatter(PropertiesUtil.ofScope(properties, \"elastic.format\"));\n \n-        this.client = new ElasticClient(PropertiesUtil.ofScope(properties, \"elastic.client\"), indexPolicy, metricsCollector);\n+    this.client = new ElasticClient(PropertiesUtil.ofScope(properties, \"elastic.client\"), indexPolicy, metricsCollector);\n \n-        this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties).get();\n-        this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties).get();\n+    this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties).get();\n+    this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties).get();\n \n-        this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n-        this.leproserySender = leproseryEnable\n-                ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY), metricsCollector)\n-                : null;\n+    this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n+    this.leproserySender = leproseryEnable\n+      ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY), metricsCollector)\n+      : null;\n \n-        this.totalEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"totalEvents\", 10_000, metricsCollector);\n-        this.nonRetryableEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"nonRetryableEvents\", 10_000, metricsCollector);\n-        this.droppedNonRetryableErrorsMeter = metricsCollector.meter(\"droppedNonRetryableErrors\");\n-        this.indexValidationErrorsMeter = metricsCollector.meter(\"indexValidationErrors\");\n-    }\n+    this.totalEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"totalEvents\", 10_000, metricsCollector);\n+    this.nonRetryableEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"nonRetryableEvents\", 10_000, metricsCollector);\n+    this.droppedNonRetryableErrorsMeter = metricsCollector.meter(\"droppedNonRetryableErrors\");\n+    this.indexValidationErrorsMeter = metricsCollector.meter(\"indexValidationErrors\");\n+  }\n+\n+  @Override\n+  public ProcessorStatus ping() {\n+    return client.ping() ? ProcessorStatus.AVAILABLE : ProcessorStatus.UNAVAILABLE;\n+  }\n \n-    @Override\n-    public ProcessorStatus ping() {\n-        return client.ping() ? ProcessorStatus.AVAILABLE : ProcessorStatus.UNAVAILABLE;\n+  @Override\n+  protected int send(List<Event> events) throws BackendServiceFailedException {\n+    if (events.size() == 0) {\n+      return 0;\n     }\n \n-    @Override\n-    protected int send(List<Event> events) throws BackendServiceFailedException {\n-        if (events.size() == 0) {\n-            return 0;\n+    int droppedCount;\n+    Map<ElasticDocument, ValidationResult> nonRetryableErrorsMap = new HashMap<>(events.size());\n+    //event-id -> elastic document\n+    Map<String, ElasticDocument> readyToSend = new HashMap<>(events.size());\n+\n+    try {\n+      for (Event event : events) {\n+        Optional<String> index = indexResolver.resolve(event);\n+        String nonNullIndex = index.orElse(\"null\");\n+        totalEventsIndicesMetricsCollector.markEvent(nonNullIndex);\n+        Document jsonDocument = eventFormatter.format(event);\n+        ElasticDocument document = new ElasticDocument(EventUtil.extractStringId(event), nonNullIndex, jsonDocument);\n+        if (index.isPresent()) {\n+          readyToSend.put(document.id(), document);\n+        } else {\n+          indexValidationErrorsMeter.mark();\n+          nonRetryableErrorsMap.put(document, UNDEFINED_INDEX_VALIDATION_RESULT);\n         }\n-\n-        int droppedCount;\n-        Map<ElasticDocument, ValidationResult> nonRetryableErrorsMap = new HashMap<>(events.size());\n-        //event-id -> elastic document\n-        Map<String, ElasticDocument> readyToSend = new HashMap<>(events.size());\n-\n-        try {\n-            for (Event event : events) {\n-                Optional<String> index = indexResolver.resolve(event);\n-                String nonNullIndex = index.orElse(\"null\");\n-                totalEventsIndicesMetricsCollector.markEvent(nonNullIndex);\n-                Document jsonDocument = eventFormatter.format(event);\n-                ElasticDocument document = new ElasticDocument(EventUtil.extractStringId(event), nonNullIndex, jsonDocument);\n-                if (index.isPresent()) {\n-                    readyToSend.put(document.id(), document);\n-                } else {\n-                    indexValidationErrorsMeter.mark();\n-                    nonRetryableErrorsMap.put(document, UNDEFINED_INDEX_VALIDATION_RESULT);\n-                }\n-            }\n-\n-            if (!readyToSend.isEmpty()) {\n-                int retryCount = retryLimit;\n-                do {\n-                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n-                    for (ElasticDocument document : readyToSend.values()) {\n-                        writeEventToStream(dataStream, document.index(), document.id(), document.document());\n-                    }\n-\n-                    ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n-                    if (result.getTotalErrors() != 0) {\n-                        resultProcess(result).forEach((eventId, validationResult) ->\n-                                nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n-                    } else {\n-                        readyToSend.clear();\n-                    }\n-                } while (!readyToSend.isEmpty() && 0 < retryCount--);\n-\n-                if (!readyToSend.isEmpty()) {\n-                    throw new Exception(\"Have retryable errors in elasticsearch response\");\n-                }\n-            }\n-\n-            droppedCount = errorsProcess(nonRetryableErrorsMap);\n-        } catch (Exception ex) {\n-            throw new BackendServiceFailedException(ex);\n+      }\n+\n+      if (!readyToSend.isEmpty()) {\n+        int retryCount = retryLimit;\n+        do {\n+          ByteArrayOutputStream dataStream = new ByteArrayOutputStream(\n+            readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n+          for (ElasticDocument document : readyToSend.values()) {\n+            writeEventToStream(dataStream, document.index(), document.id(), document.document());\n+          }\n+\n+          ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n+          if (result.getTotalErrors() != 0) {\n+            resultProcess(result).forEach((eventId, validationResult) ->\n+              nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n+          } else {\n+            readyToSend.clear();\n+          }\n+        } while (!readyToSend.isEmpty() && 0 < retryCount--);\n+\n+        if (!readyToSend.isEmpty()) {\n+          throw new Exception(\"Have retryable errors in elasticsearch response\");\n         }\n+      }\n \n-        return events.size() - droppedCount;\n+      droppedCount = errorsProcess(nonRetryableErrorsMap);\n+    } catch (Exception ex) {\n+      throw new BackendServiceFailedException(ex);\n     }\n \n-    private Map<String, ValidationResult> resultProcess(ElasticResponseHandler.Result result) {\n-        LOGGER.info(\n-                \"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\",\n-                result.getRetryableErrorCount(),\n-                result.getNonRetryableErrorCount(),\n-                result.getUnknownErrorCount(),\n-                result.getTotalErrors()\n-        );\n-\n-        Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors().size());\n-        for (Map.Entry<String, ErrorInfo> entry : result.getErrors().entrySet()) {\n-            String eventId = entry.getKey();\n-            ErrorInfo errorInfo = entry.getValue();\n-            ErrorType type = errorInfo.getType();\n-            if (type.equals(ErrorType.NON_RETRYABLE) || (type.equals(ErrorType.UNKNOWN) && !retryOnUnknownErrors)) {\n-                errorsMap.put(eventId, ValidationResult.error(errorInfo.getError()));\n-            }\n-        }\n-        return errorsMap;\n+    return events.size() - droppedCount;\n+  }\n+\n+  private Map<String, ValidationResult> resultProcess(ElasticResponseHandler.Result result) {\n+    LOGGER.info(\n+      \"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\",\n+      result.getRetryableErrorCount(),\n+      result.getNonRetryableErrorCount(),\n+      result.getUnknownErrorCount(),\n+      result.getTotalErrors()\n+    );\n+\n+    Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors().size());\n+    for (Map.Entry<String, ErrorInfo> entry : result.getErrors().entrySet()) {\n+      String eventId = entry.getKey();\n+      ErrorInfo errorInfo = entry.getValue();\n+      ErrorType type = errorInfo.getType();\n+      if (type.equals(ErrorType.NON_RETRYABLE) || (type.equals(ErrorType.UNKNOWN) && !retryOnUnknownErrors)) {\n+        errorsMap.put(eventId, ValidationResult.error(errorInfo.getError()));\n+      }\n     }\n-\n-    /**\n-     * @return count of dropped events\n-     */\n-    private int errorsProcess(Map<ElasticDocument, ValidationResult> nonRetryableErrorsInfo) {\n-        if (nonRetryableErrorsInfo.isEmpty()) {\n-            return 0;\n-        }\n-\n-        for (ElasticDocument document : nonRetryableErrorsInfo.keySet()) {\n-            nonRetryableEventsIndicesMetricsCollector.markEvent(document.index());\n-        }\n-\n-        if (leproseryEnable) {\n-            try {\n-                leproserySender.convertAndSend(nonRetryableErrorsInfo);\n-                return 0;\n-            } catch (Exception ex) {\n-                LOGGER.warn(\"Failed to send non retryable events to leprosery\", ex);\n-                droppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n-                return nonRetryableErrorsInfo.size();\n-            }\n-        } else {\n-            nonRetryableErrorsInfo.forEach((document, validationResult) ->\n-                    LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n-                            document.id(),\n-                            document.index(),\n-                            validationResult.error()));\n-            droppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n-            return nonRetryableErrorsInfo.size();\n-        }\n+    return errorsMap;\n+  }\n+\n+  /**\n+   * @return count of dropped events\n+   */\n+  private int errorsProcess(Map<ElasticDocument, ValidationResult> nonRetryableErrorsInfo) {\n+    if (nonRetryableErrorsInfo.isEmpty()) {\n+      return 0;\n     }\n \n-    private void writeEventToStream(ByteArrayOutputStream stream, String index, String documentId, Document document) throws IOException {\n-        IndexToElasticJsonWriter.writeIndex(stream, index, documentId);\n-        stream.write('\\n');\n-        DocumentWriter.writeTo(stream, document);\n-        stream.write('\\n');\n+    for (ElasticDocument document : nonRetryableErrorsInfo.keySet()) {\n+      nonRetryableEventsIndicesMetricsCollector.markEvent(document.index());\n     }\n \n-    private static class Props {\n-        static final Parameter<IndexPolicy> INDEX_POLICY =\n-                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n-                        withDefault(IndexPolicy.DAILY).\n-                        build();\n-\n-        static final Parameter<Integer> RETRY_LIMIT = Parameter\n-                .integerParameter(\"retryLimit\")\n-                .withDefault(3)\n-                .withValidator(IntegerValidators.nonNegative())\n-                .build();\n-\n-        static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter\n-                .booleanParameter(\"retryOnUnknownErrors\")\n-                .withDefault(Boolean.FALSE)\n-                .build();\n-\n-        static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter\n-                .booleanParameter(\"leprosery.enable\")\n-                .withDefault(false)\n-                .build();\n+    if (leproseryEnable) {\n+      try {\n+        leproserySender.convertAndSend(nonRetryableErrorsInfo);\n+        return 0;\n+      } catch (Exception ex) {\n+        LOGGER.warn(\"Failed to send non retryable events to leprosery\", ex);\n+        droppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n+        return nonRetryableErrorsInfo.size();\n+      }\n+    } else {\n+      nonRetryableErrorsInfo.forEach((document, validationResult) ->\n+        LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n+          document.id(),\n+          document.index(),\n+          validationResult.error()));\n+      droppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n+      return nonRetryableErrorsInfo.size();\n     }\n+  }\n+\n+  private void writeEventToStream(ByteArrayOutputStream stream, String index, String documentId, Document document) throws IOException {\n+    IndexToElasticJsonWriter.writeIndex(stream, index, documentId);\n+    stream.write('\\n');\n+    DocumentWriter.writeTo(stream, document);\n+    stream.write('\\n');\n+  }\n+\n+  private static class Props {\n+    static final Parameter<IndexPolicy> INDEX_POLICY =\n+      Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n+        withDefault(IndexPolicy.DAILY).\n+        build();\n+\n+    static final Parameter<Integer> RETRY_LIMIT = Parameter\n+      .integerParameter(\"retryLimit\")\n+      .withDefault(3)\n+      .withValidator(IntegerValidators.nonNegative())\n+      .build();\n+\n+    static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter\n+      .booleanParameter(\"retryOnUnknownErrors\")\n+      .withDefault(Boolean.FALSE)\n+      .build();\n+\n+    static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter\n+      .booleanParameter(\"leprosery.enable\")\n+      .withDefault(false)\n+      .build();\n+  }\n }\n",
            "diff_size": 217
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/51/ElasticSender.java\nindex 5e90d915bb3..aac93165e98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/51/ElasticSender.java\n@@ -72,10 +72,8 @@ public class ElasticSender extends Sender {\n \n         this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n         this.leproserySender = leproseryEnable\n-                ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY), metricsCollector)\n-                : null;\n-\n-        this.totalEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"totalEvents\", 10_000, metricsCollector);\n+                ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY), metricsCollector) : null;\n+this.totalEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"totalEvents\", 10_000, metricsCollector);\n         this.nonRetryableEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"nonRetryableEvents\", 10_000, metricsCollector);\n         this.droppedNonRetryableErrorsMeter = metricsCollector.meter(\"droppedNonRetryableErrors\");\n         this.indexValidationErrorsMeter = metricsCollector.meter(\"indexValidationErrors\");\n@@ -122,8 +120,7 @@ public class ElasticSender extends Sender {\n \n                     ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n                     if (result.getTotalErrors() != 0) {\n-                        resultProcess(result).forEach((eventId, validationResult) ->\n-                                nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n+                        resultProcess(result).forEach((eventId, validationResult) -> nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n                     } else {\n                         readyToSend.clear();\n                     }\n@@ -185,8 +182,7 @@ public class ElasticSender extends Sender {\n                 return nonRetryableErrorsInfo.size();\n             }\n         } else {\n-            nonRetryableErrorsInfo.forEach((document, validationResult) ->\n-                    LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n+            nonRetryableErrorsInfo.forEach((document, validationResult) -> LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n                             document.id(),\n                             document.index(),\n                             validationResult.error()));\n@@ -204,9 +200,7 @@ public class ElasticSender extends Sender {\n \n     private static class Props {\n         static final Parameter<IndexPolicy> INDEX_POLICY =\n-                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n-                        withDefault(IndexPolicy.DAILY).\n-                        build();\n+                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).withDefault(IndexPolicy.DAILY).build();\n \n         static final Parameter<Integer> RETRY_LIMIT = Parameter\n                 .integerParameter(\"retryLimit\")\n@@ -224,4 +218,4 @@ public class ElasticSender extends Sender {\n                 .withDefault(false)\n                 .build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/51/ElasticSender.java\nindex 5e90d915bb3..875c5e28ff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/51/ElasticSender.java\n@@ -19,7 +19,6 @@ import ru.kontur.vostok.hercules.util.parameter.Parameter;\n import ru.kontur.vostok.hercules.util.properties.PropertiesUtil;\n import ru.kontur.vostok.hercules.util.validation.IntegerValidators;\n import ru.kontur.vostok.hercules.util.validation.ValidationResult;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.HashMap;\n@@ -31,25 +30,21 @@ import java.util.Properties;\n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class ElasticSender extends Sender {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n     private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n     private static final ValidationResult UNDEFINED_INDEX_VALIDATION_RESULT = ValidationResult.error(\"Undefined index\");\n-\n     private final IndexPolicy indexPolicy;\n     private final IndexResolver indexResolver;\n-\n     private final EventJsonFormatter eventFormatter;\n-\n     private final ElasticClient client;\n-\n     private final int retryLimit;\n     private final boolean retryOnUnknownErrors;\n-\n     private final boolean leproseryEnable;\n     private final LeproserySender leproserySender;\n-\n     private final IndicesMetricsCollector totalEventsIndicesMetricsCollector;\n     private final IndicesMetricsCollector nonRetryableEventsIndicesMetricsCollector;\n     private final Meter droppedNonRetryableErrorsMeter;\n@@ -57,24 +52,24 @@ public class ElasticSender extends Sender {\n \n     public ElasticSender(Properties properties, MetricsCollector metricsCollector) {\n         super(properties, metricsCollector);\n-\n-        this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties).get();\n+        this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties)\n+        .get();\n \n         Properties indexResolverProperties = PropertiesUtil.ofScope(properties, \"elastic.index.resolver\");\n         this.indexResolver = IndexResolver.forPolicy(indexPolicy, indexResolverProperties);\n-\n         this.eventFormatter = new EventJsonFormatter(PropertiesUtil.ofScope(properties, \"elastic.format\"));\n-\n-        this.client = new ElasticClient(PropertiesUtil.ofScope(properties, \"elastic.client\"), indexPolicy, metricsCollector);\n-\n-        this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties).get();\n-        this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties).get();\n-\n-        this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n-        this.leproserySender = leproseryEnable\n-                ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY), metricsCollector)\n-                : null;\n-\n+        this.client = new ElasticClient(\n+            PropertiesUtil.ofScope(properties, \"elastic.client\"),\n+            indexPolicy,\n+            metricsCollector\n+        );\n+        this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties)\n+        .get();\n+        this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties)\n+        .get();\n+        this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties)\n+        .get();\n+        this.leproserySender = leproseryEnable ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY), metricsCollector) : null;\n         this.totalEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"totalEvents\", 10_000, metricsCollector);\n         this.nonRetryableEventsIndicesMetricsCollector = new IndicesMetricsCollector(\"nonRetryableEvents\", 10_000, metricsCollector);\n         this.droppedNonRetryableErrorsMeter = metricsCollector.meter(\"droppedNonRetryableErrors\");\n@@ -96,12 +91,12 @@ public class ElasticSender extends Sender {\n         Map<ElasticDocument, ValidationResult> nonRetryableErrorsMap = new HashMap<>(events.size());\n         //event-id -> elastic document\n         Map<String, ElasticDocument> readyToSend = new HashMap<>(events.size());\n-\n         try {\n             for (Event event : events) {\n                 Optional<String> index = indexResolver.resolve(event);\n                 String nonNullIndex = index.orElse(\"null\");\n                 totalEventsIndicesMetricsCollector.markEvent(nonNullIndex);\n+\n                 Document jsonDocument = eventFormatter.format(event);\n                 ElasticDocument document = new ElasticDocument(EventUtil.extractStringId(event), nonNullIndex, jsonDocument);\n                 if (index.isPresent()) {\n@@ -111,7 +106,6 @@ public class ElasticSender extends Sender {\n                     nonRetryableErrorsMap.put(document, UNDEFINED_INDEX_VALIDATION_RESULT);\n                 }\n             }\n-\n             if (!readyToSend.isEmpty()) {\n                 int retryCount = retryLimit;\n                 do {\n@@ -122,13 +116,11 @@ public class ElasticSender extends Sender {\n \n                     ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n                     if (result.getTotalErrors() != 0) {\n-                        resultProcess(result).forEach((eventId, validationResult) ->\n-                                nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n+                        resultProcess(result).forEach((eventId, validationResult) -> nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n                     } else {\n                         readyToSend.clear();\n                     }\n                 } while (!readyToSend.isEmpty() && 0 < retryCount--);\n-\n                 if (!readyToSend.isEmpty()) {\n                     throw new Exception(\"Have retryable errors in elasticsearch response\");\n                 }\n@@ -138,21 +130,16 @@ public class ElasticSender extends Sender {\n         } catch (Exception ex) {\n             throw new BackendServiceFailedException(ex);\n         }\n-\n         return events.size() - droppedCount;\n     }\n \n     private Map<String, ValidationResult> resultProcess(ElasticResponseHandler.Result result) {\n-        LOGGER.info(\n-                \"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\",\n-                result.getRetryableErrorCount(),\n-                result.getNonRetryableErrorCount(),\n-                result.getUnknownErrorCount(),\n-                result.getTotalErrors()\n-        );\n+        LOGGER.info(\"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\", result.getRetryableErrorCount(), result.getNonRetryableErrorCount(), result.getUnknownErrorCount(), result.getTotalErrors());\n \n-        Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors().size());\n-        for (Map.Entry<String, ErrorInfo> entry : result.getErrors().entrySet()) {\n+        Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors()\n+        .size());\n+        for (Map.Entry<String, ErrorInfo> entry : result.getErrors()\n+        .entrySet()) {\n             String eventId = entry.getKey();\n             ErrorInfo errorInfo = entry.getValue();\n             ErrorType type = errorInfo.getType();\n@@ -166,6 +153,7 @@ public class ElasticSender extends Sender {\n     /**\n      * @return count of dropped events\n      */\n+\n     private int errorsProcess(Map<ElasticDocument, ValidationResult> nonRetryableErrorsInfo) {\n         if (nonRetryableErrorsInfo.isEmpty()) {\n             return 0;\n@@ -174,7 +162,6 @@ public class ElasticSender extends Sender {\n         for (ElasticDocument document : nonRetryableErrorsInfo.keySet()) {\n             nonRetryableEventsIndicesMetricsCollector.markEvent(document.index());\n         }\n-\n         if (leproseryEnable) {\n             try {\n                 leproserySender.convertAndSend(nonRetryableErrorsInfo);\n@@ -185,11 +172,7 @@ public class ElasticSender extends Sender {\n                 return nonRetryableErrorsInfo.size();\n             }\n         } else {\n-            nonRetryableErrorsInfo.forEach((document, validationResult) ->\n-                    LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n-                            document.id(),\n-                            document.index(),\n-                            validationResult.error()));\n+            nonRetryableErrorsInfo.forEach((document, validationResult) -> LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\", document.id(), document.index(), validationResult.error()));\n             droppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n             return nonRetryableErrorsInfo.size();\n         }\n@@ -203,25 +186,21 @@ public class ElasticSender extends Sender {\n     }\n \n     private static class Props {\n-        static final Parameter<IndexPolicy> INDEX_POLICY =\n-                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n-                        withDefault(IndexPolicy.DAILY).\n-                        build();\n-\n-        static final Parameter<Integer> RETRY_LIMIT = Parameter\n-                .integerParameter(\"retryLimit\")\n-                .withDefault(3)\n-                .withValidator(IntegerValidators.nonNegative())\n-                .build();\n-\n-        static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter\n-                .booleanParameter(\"retryOnUnknownErrors\")\n-                .withDefault(Boolean.FALSE)\n-                .build();\n-\n-        static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter\n-                .booleanParameter(\"leprosery.enable\")\n-                .withDefault(false)\n-                .build();\n+        static final Parameter<IndexPolicy> INDEX_POLICY = Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class)\n+        .withDefault(IndexPolicy.DAILY)\n+        .build();\n+\n+        static final Parameter<Integer> RETRY_LIMIT = Parameter.integerParameter(\"retryLimit\")\n+        .withDefault(3)\n+        .withValidator(IntegerValidators.nonNegative())\n+        .build();\n+\n+        static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter.booleanParameter(\"retryOnUnknownErrors\")\n+        .withDefault(Boolean.FALSE)\n+        .build();\n+\n+        static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter.booleanParameter(\"leprosery.enable\")\n+        .withDefault(false)\n+        .build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/51/ElasticSender.java\nindex 5e90d915bb3..72ed9192cd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/51/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/51/ElasticSender.java\n@@ -115,7 +115,7 @@ public class ElasticSender extends Sender {\n             if (!readyToSend.isEmpty()) {\n                 int retryCount = retryLimit;\n                 do {\n-                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n+                ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n                     for (ElasticDocument document : readyToSend.values()) {\n                         writeEventToStream(dataStream, document.index(), document.id(), document.document());\n                     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}