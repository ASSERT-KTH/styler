{
    "project_name": "opencb-opencga",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "193",
                "column": "16",
                "severity": "error",
                "message": "'try' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        if (file.exists() && file.isFile()) {\n            // Read the file\n            try(BufferedReader br = new BufferedReader(new FileReader(ids))) {\n                StringBuilder sb = new StringBuilder();\n                String line = br.readLine();\n                boolean isNotFirstLine = false;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/19/OpencgaCommandExecutor.java\nindex 772b60ea225..2a0cdb5f04a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/19/OpencgaCommandExecutor.java\n@@ -190,7 +190,7 @@ public abstract class OpencgaCommandExecutor extends CommandExecutor {\n         File file = new File(ids);\n         if (file.exists() && file.isFile()) {\n             // Read the file\n-            try(BufferedReader br = new BufferedReader(new FileReader(ids))) {\n+            try (BufferedReader br = new BufferedReader(new FileReader(ids))) {\n                 StringBuilder sb = new StringBuilder();\n                 String line = br.readLine();\n                 boolean isNotFirstLine = false;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/19/OpencgaCommandExecutor.java\nindex 772b60ea225..a6fb4a5ea58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/19/OpencgaCommandExecutor.java\n@@ -48,217 +48,217 @@ import java.util.Map;\n  */\n public abstract class OpencgaCommandExecutor extends CommandExecutor {\n \n-    protected OpenCGAClient openCGAClient;\n-\n-    protected AbstractOutputWriter writer;\n-\n-    protected static final String ANSI_RESET = \"\\033[0m\";\n-    protected static final String ANSI_RED = \"\\033[31m\";\n-\n-    public OpencgaCommandExecutor(GeneralCliOptions.CommonCommandOptions options) {\n-        this(options, false);\n-    }\n-\n-    public OpencgaCommandExecutor(GeneralCliOptions.CommonCommandOptions options, boolean skipDuration) {\n-        super(options, true);\n-\n-        init(options, skipDuration);\n-    }\n-\n-    private void init(GeneralCliOptions.CommonCommandOptions options, boolean skipDuration) {\n-\n-        try {\n-            WriterConfiguration writerConfiguration = new WriterConfiguration();\n-            writerConfiguration.setMetadata(options.metadata);\n-            writerConfiguration.setHeader(!options.noHeader);\n-\n-            switch (options.outputFormat.toLowerCase()) {\n-                case \"json_pretty\":\n-                    writerConfiguration.setPretty(true);\n-                case \"json\":\n-                    this.writer = new JsonOutputWriter(writerConfiguration);\n-                    break;\n-                case \"yaml\":\n-                    this.writer = new YamlOutputWriter(writerConfiguration);\n-                    break;\n-                case \"table\":\n-                    this.writer = new TextOutputWriter(writerConfiguration, Table.PrinterType.ASCII);\n-                    break;\n-                case \"text\":\n-                default:\n-                    this.writer = new TextOutputWriter(writerConfiguration);\n-                    break;\n-            }\n+  protected OpenCGAClient openCGAClient;\n+\n+  protected AbstractOutputWriter writer;\n+\n+  protected static final String ANSI_RESET = \"\\033[0m\";\n+  protected static final String ANSI_RED = \"\\033[31m\";\n+\n+  public OpencgaCommandExecutor(GeneralCliOptions.CommonCommandOptions options) {\n+    this(options, false);\n+  }\n+\n+  public OpencgaCommandExecutor(GeneralCliOptions.CommonCommandOptions options, boolean skipDuration) {\n+    super(options, true);\n+\n+    init(options, skipDuration);\n+  }\n+\n+  private void init(GeneralCliOptions.CommonCommandOptions options, boolean skipDuration) {\n+\n+    try {\n+      WriterConfiguration writerConfiguration = new WriterConfiguration();\n+      writerConfiguration.setMetadata(options.metadata);\n+      writerConfiguration.setHeader(!options.noHeader);\n+\n+      switch (options.outputFormat.toLowerCase()) {\n+        case \"json_pretty\":\n+          writerConfiguration.setPretty(true);\n+        case \"json\":\n+          this.writer = new JsonOutputWriter(writerConfiguration);\n+          break;\n+        case \"yaml\":\n+          this.writer = new YamlOutputWriter(writerConfiguration);\n+          break;\n+        case \"table\":\n+          this.writer = new TextOutputWriter(writerConfiguration, Table.PrinterType.ASCII);\n+          break;\n+        case \"text\":\n+        default:\n+          this.writer = new TextOutputWriter(writerConfiguration);\n+          break;\n+      }\n \n //            CliSession cliSession = loadCliSessionFile();\n-            logger.debug(\"sessionFile = \" + cliSession);\n-            if (StringUtils.isNotEmpty(options.token)) {\n-                // Ignore session file. Overwrite with command line information (just sessionId)\n-                cliSession = new CliSession(clientConfiguration.getRest().getHost(), null, options.token, null);\n-                token = options.token;\n-                userId = null;\n-\n-                openCGAClient = new OpenCGAClient(new AuthenticationResponse(options.token), clientConfiguration);\n-            } else if (cliSession != null) {\n-                // 'logout' field is only null or empty while no logout is executed\n-                if (StringUtils.isNotEmpty(cliSession.getToken())) {\n-                    // no timeout checks\n-                    if (skipDuration) {\n-                        openCGAClient = new OpenCGAClient(new AuthenticationResponse(cliSession.getToken(), cliSession.getRefreshToken()),\n-                                clientConfiguration);\n-                        openCGAClient.setUserId(cliSession.getUser());\n-                        if (options.token == null) {\n-                            options.token = cliSession.getToken();\n-                        }\n-                    } else {\n-                        // Get the expiration of the token stored in the session file\n-                        String myClaims = StringUtils.split(cliSession.getToken(), \".\")[1];\n-                        String decodedClaimsString = new String(Base64.getDecoder().decode(myClaims), StandardCharsets.UTF_8);\n-                        ObjectMap claimsMap = new ObjectMapper().readValue(decodedClaimsString, ObjectMap.class);\n-\n-                        Date expirationDate = new Date(claimsMap.getLong(\"exp\") * 1000L);\n-\n-                        Date currentDate = new Date();\n-\n-                        if (currentDate.before(expirationDate) || !claimsMap.containsKey(\"exp\")) {\n-                            logger.debug(\"Session ok!!\");\n-                            //                            this.sessionId = cliSession.getSessionId();\n-                            openCGAClient = new OpenCGAClient(new AuthenticationResponse(cliSession.getToken(),\n-                                    cliSession.getRefreshToken()), clientConfiguration);\n-                            openCGAClient.setUserId(cliSession.getUser());\n-\n-                            // Update token\n-                            if (clientConfiguration.getRest().isTokenAutoRefresh() && claimsMap.containsKey(\"exp\")) {\n-                                AuthenticationResponse refreshResponse = openCGAClient.refresh();\n-                                cliSession.setToken(refreshResponse.getToken());\n-                                cliSession.setRefreshToken(refreshResponse.getRefreshToken());\n-                                updateCliSessionFile();\n-                            }\n-\n-                            if (options.token == null) {\n-                                options.token = cliSession.getToken();\n-                            }\n-                        } else {\n-                            String message = \"ERROR: Your session has expired. Please, either login again or logout to work as \"\n-                                    + \"anonymous.\";\n-                            System.err.println(ANSI_RED + message + ANSI_RESET);\n-                            System.exit(1);\n-                        }\n-                    }\n-                } else {\n-                    logger.debug(\"Session already closed\");\n-                    openCGAClient = new OpenCGAClient(clientConfiguration);\n-                }\n+      logger.debug(\"sessionFile = \" + cliSession);\n+      if (StringUtils.isNotEmpty(options.token)) {\n+        // Ignore session file. Overwrite with command line information (just sessionId)\n+        cliSession = new CliSession(clientConfiguration.getRest().getHost(), null, options.token, null);\n+        token = options.token;\n+        userId = null;\n+\n+        openCGAClient = new OpenCGAClient(new AuthenticationResponse(options.token), clientConfiguration);\n+      } else if (cliSession != null) {\n+        // 'logout' field is only null or empty while no logout is executed\n+        if (StringUtils.isNotEmpty(cliSession.getToken())) {\n+          // no timeout checks\n+          if (skipDuration) {\n+            openCGAClient = new OpenCGAClient(new AuthenticationResponse(cliSession.getToken(), cliSession.getRefreshToken()),\n+                clientConfiguration);\n+            openCGAClient.setUserId(cliSession.getUser());\n+            if (options.token == null) {\n+              options.token = cliSession.getToken();\n+            }\n+          } else {\n+            // Get the expiration of the token stored in the session file\n+            String myClaims = StringUtils.split(cliSession.getToken(), \".\")[1];\n+            String decodedClaimsString = new String(Base64.getDecoder().decode(myClaims), StandardCharsets.UTF_8);\n+            ObjectMap claimsMap = new ObjectMapper().readValue(decodedClaimsString, ObjectMap.class);\n+\n+            Date expirationDate = new Date(claimsMap.getLong(\"exp\") * 1000L);\n+\n+            Date currentDate = new Date();\n+\n+            if (currentDate.before(expirationDate) || !claimsMap.containsKey(\"exp\")) {\n+              logger.debug(\"Session ok!!\");\n+              //                            this.sessionId = cliSession.getSessionId();\n+              openCGAClient = new OpenCGAClient(new AuthenticationResponse(cliSession.getToken(),\n+                  cliSession.getRefreshToken()), clientConfiguration);\n+              openCGAClient.setUserId(cliSession.getUser());\n+\n+              // Update token\n+              if (clientConfiguration.getRest().isTokenAutoRefresh() && claimsMap.containsKey(\"exp\")) {\n+                AuthenticationResponse refreshResponse = openCGAClient.refresh();\n+                cliSession.setToken(refreshResponse.getToken());\n+                cliSession.setRefreshToken(refreshResponse.getRefreshToken());\n+                updateCliSessionFile();\n+              }\n+\n+              if (options.token == null) {\n+                options.token = cliSession.getToken();\n+              }\n             } else {\n-                logger.debug(\"No Session file\");\n-                openCGAClient = new OpenCGAClient(clientConfiguration);\n+              String message = \"ERROR: Your session has expired. Please, either login again or logout to work as \"\n+                  + \"anonymous.\";\n+              System.err.println(ANSI_RED + message + ANSI_RESET);\n+              System.exit(1);\n             }\n-        } catch (ClientException | IOException e) {\n-            e.printStackTrace();\n+          }\n+        } else {\n+          logger.debug(\"Session already closed\");\n+          openCGAClient = new OpenCGAClient(clientConfiguration);\n         }\n+      } else {\n+        logger.debug(\"No Session file\");\n+        openCGAClient = new OpenCGAClient(clientConfiguration);\n+      }\n+    } catch (ClientException | IOException e) {\n+      e.printStackTrace();\n     }\n+  }\n \n-    protected ObjectMap loadFile(String filePath) throws CatalogException {\n-        return loadFile(filePath, ObjectMap.class);\n-    }\n+  protected ObjectMap loadFile(String filePath) throws CatalogException {\n+    return loadFile(filePath, ObjectMap.class);\n+  }\n \n-    protected <T> T loadFile(String filePath, Class<T> clazz) throws CatalogException {\n-        File file = Paths.get(filePath).toFile();\n-        if (!file.exists() || file.isDirectory()) {\n-            throw new CatalogException(\"File \" + filePath + \" not found\");\n-        }\n-        FileInputStream fileInputStream;\n-        try {\n-            fileInputStream = FileUtils.openInputStream(file);\n-        } catch (IOException e) {\n-            throw new CatalogException(\"Could not open file \" + filePath + \". \" + e.getMessage(), e);\n-        }\n-        ObjectMapper objectMapper = JacksonUtils.getUpdateObjectMapper();\n-        try {\n-            return objectMapper.readValue(fileInputStream, clazz);\n-        } catch (IOException e) {\n-            throw new CatalogException(\"Could not parse file \" + filePath + \". Is it a valid JSON file?. \"\n-                    + e.getMessage(), e);\n-        }\n+  protected <T> T loadFile(String filePath, Class<T> clazz) throws CatalogException {\n+    File file = Paths.get(filePath).toFile();\n+    if (!file.exists() || file.isDirectory()) {\n+      throw new CatalogException(\"File \" + filePath + \" not found\");\n+    }\n+    FileInputStream fileInputStream;\n+    try {\n+      fileInputStream = FileUtils.openInputStream(file);\n+    } catch (IOException e) {\n+      throw new CatalogException(\"Could not open file \" + filePath + \". \" + e.getMessage(), e);\n     }\n+    ObjectMapper objectMapper = JacksonUtils.getUpdateObjectMapper();\n+    try {\n+      return objectMapper.readValue(fileInputStream, clazz);\n+    } catch (IOException e) {\n+      throw new CatalogException(\"Could not parse file \" + filePath + \". Is it a valid JSON file?. \"\n+          + e.getMessage(), e);\n+    }\n+  }\n \n-    protected String extractIdsFromListOrFile(String ids) throws CatalogException {\n-        if (StringUtils.isEmpty(ids)) {\n-            return null;\n-        }\n+  protected String extractIdsFromListOrFile(String ids) throws CatalogException {\n+    if (StringUtils.isEmpty(ids)) {\n+      return null;\n+    }\n \n-        File file = new File(ids);\n-        if (file.exists() && file.isFile()) {\n-            // Read the file\n-            try(BufferedReader br = new BufferedReader(new FileReader(ids))) {\n-                StringBuilder sb = new StringBuilder();\n-                String line = br.readLine();\n-                boolean isNotFirstLine = false;\n-\n-                while (line != null) {\n-                    if (StringUtils.isNotEmpty(line)) {\n-                        if (isNotFirstLine) {\n-                            sb.append(\",\");\n-                        } else {\n-                            isNotFirstLine = true;\n-                        }\n-                        sb.append(line);\n-                    }\n-                    line = br.readLine();\n-                }\n-                return sb.toString();\n-            } catch (IOException e) {\n-                throw new CatalogException(\"File could not be parsed. Does it contain a line per id?\");\n+    File file = new File(ids);\n+    if (file.exists() && file.isFile()) {\n+      // Read the file\n+      try (BufferedReader br = new BufferedReader(new FileReader(ids))) {\n+        StringBuilder sb = new StringBuilder();\n+        String line = br.readLine();\n+        boolean isNotFirstLine = false;\n+\n+        while (line != null) {\n+          if (StringUtils.isNotEmpty(line)) {\n+            if (isNotFirstLine) {\n+              sb.append(\",\");\n+            } else {\n+              isNotFirstLine = true;\n             }\n-        } else {\n-            return ids;\n+            sb.append(line);\n+          }\n+          line = br.readLine();\n         }\n+        return sb.toString();\n+      } catch (IOException e) {\n+        throw new CatalogException(\"File could not be parsed. Does it contain a line per id?\");\n+      }\n+    } else {\n+      return ids;\n     }\n+  }\n \n-    public void createOutput(RestResponse queryResponse) {\n-        if (queryResponse != null) {\n-            writer.print(queryResponse);\n-        }\n+  public void createOutput(RestResponse queryResponse) {\n+    if (queryResponse != null) {\n+      writer.print(queryResponse);\n     }\n-\n-    public ObjectMap getCommonParams(String study) {\n-        return getCommonParams(null, study, new HashMap<>());\n+  }\n+\n+  public ObjectMap getCommonParams(String study) {\n+    return getCommonParams(null, study, new HashMap<>());\n+  }\n+\n+  public ObjectMap getCommonParams(String study, Map<String, String> initialParams) {\n+    return getCommonParams(null, study, initialParams);\n+  }\n+\n+  public ObjectMap getCommonParams(String project, String study, Map<String, String> initialParams) {\n+    ObjectMap params = new ObjectMap(initialParams);\n+    params.putIfNotEmpty(ParamConstants.PROJECT_PARAM, project);\n+    params.putIfNotEmpty(ParamConstants.STUDY_PARAM, study);\n+    return params;\n+  }\n+\n+  public ObjectMap addJobParams(GeneralCliOptions.JobOptions jobOptions, ObjectMap params) {\n+    params.putIfNotEmpty(ParamConstants.JOB_ID, jobOptions.jobId);\n+    params.putIfNotEmpty(ParamConstants.JOB_DESCRIPTION, jobOptions.jobDescription);\n+    if (jobOptions.jobDependsOn != null) {\n+      params.put(ParamConstants.JOB_DEPENDS_ON, String.join(\",\", jobOptions.jobDependsOn));\n     }\n-\n-    public ObjectMap getCommonParams(String study, Map<String, String> initialParams) {\n-        return getCommonParams(null, study, initialParams);\n+    if (jobOptions.jobTags != null) {\n+      params.put(ParamConstants.JOB_TAGS, String.join(\",\", jobOptions.jobTags));\n     }\n+    return params;\n+  }\n \n-    public ObjectMap getCommonParams(String project, String study, Map<String, String> initialParams) {\n-        ObjectMap params = new ObjectMap(initialParams);\n-        params.putIfNotEmpty(ParamConstants.PROJECT_PARAM, project);\n-        params.putIfNotEmpty(ParamConstants.STUDY_PARAM, study);\n-        return params;\n+  public ObjectMap addNumericParams(GeneralCliOptions.NumericOptions numericOptions, ObjectMap params) {\n+    if (numericOptions.limit > 0) {\n+      params.put(QueryOptions.LIMIT, numericOptions.limit);\n     }\n-\n-    public ObjectMap addJobParams(GeneralCliOptions.JobOptions jobOptions, ObjectMap params) {\n-        params.putIfNotEmpty(ParamConstants.JOB_ID, jobOptions.jobId);\n-        params.putIfNotEmpty(ParamConstants.JOB_DESCRIPTION, jobOptions.jobDescription);\n-        if (jobOptions.jobDependsOn != null) {\n-            params.put(ParamConstants.JOB_DEPENDS_ON, String.join(\",\", jobOptions.jobDependsOn));\n-        }\n-        if (jobOptions.jobTags != null) {\n-            params.put(ParamConstants.JOB_TAGS, String.join(\",\", jobOptions.jobTags));\n-        }\n-        return params;\n+    if (numericOptions.skip > 0) {\n+      params.put(QueryOptions.SKIP, numericOptions.skip);\n     }\n-\n-    public ObjectMap addNumericParams(GeneralCliOptions.NumericOptions numericOptions, ObjectMap params) {\n-        if (numericOptions.limit > 0) {\n-            params.put(QueryOptions.LIMIT, numericOptions.limit);\n-        }\n-        if (numericOptions.skip > 0) {\n-            params.put(QueryOptions.SKIP, numericOptions.skip);\n-        }\n-        if (numericOptions.count) {\n-            params.put(QueryOptions.COUNT, numericOptions.count);\n-        }\n-        return params;\n+    if (numericOptions.count) {\n+      params.put(QueryOptions.COUNT, numericOptions.count);\n     }\n+    return params;\n+  }\n \n }\n",
            "diff_size": 240
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/19/OpencgaCommandExecutor.java\nindex 772b60ea225..b05de414824 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/19/OpencgaCommandExecutor.java\n@@ -89,8 +89,7 @@ public abstract class OpencgaCommandExecutor extends CommandExecutor {\n                     this.writer = new TextOutputWriter(writerConfiguration);\n                     break;\n             }\n-\n-//            CliSession cliSession = loadCliSessionFile();\n+            //            CliSession cliSession = loadCliSessionFile();\n             logger.debug(\"sessionFile = \" + cliSession);\n             if (StringUtils.isNotEmpty(options.token)) {\n                 // Ignore session file. Overwrite with command line information (just sessionId)\n@@ -190,7 +189,7 @@ public abstract class OpencgaCommandExecutor extends CommandExecutor {\n         File file = new File(ids);\n         if (file.exists() && file.isFile()) {\n             // Read the file\n-            try(BufferedReader br = new BufferedReader(new FileReader(ids))) {\n+            try (BufferedReader br = new BufferedReader(new FileReader(ids))) {\n                 StringBuilder sb = new StringBuilder();\n                 String line = br.readLine();\n                 boolean isNotFirstLine = false;\n@@ -261,4 +260,4 @@ public abstract class OpencgaCommandExecutor extends CommandExecutor {\n         return params;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/19/OpencgaCommandExecutor.java\nindex 772b60ea225..2a0cdb5f04a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/19/OpencgaCommandExecutor.java\n@@ -190,7 +190,7 @@ public abstract class OpencgaCommandExecutor extends CommandExecutor {\n         File file = new File(ids);\n         if (file.exists() && file.isFile()) {\n             // Read the file\n-            try(BufferedReader br = new BufferedReader(new FileReader(ids))) {\n+            try (BufferedReader br = new BufferedReader(new FileReader(ids))) {\n                 StringBuilder sb = new StringBuilder();\n                 String line = br.readLine();\n                 boolean isNotFirstLine = false;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/19/OpencgaCommandExecutor.java\nindex 772b60ea225..2a0cdb5f04a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/19/OpencgaCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/19/OpencgaCommandExecutor.java\n@@ -190,7 +190,7 @@ public abstract class OpencgaCommandExecutor extends CommandExecutor {\n         File file = new File(ids);\n         if (file.exists() && file.isFile()) {\n             // Read the file\n-            try(BufferedReader br = new BufferedReader(new FileReader(ids))) {\n+            try (BufferedReader br = new BufferedReader(new FileReader(ids))) {\n                 StringBuilder sb = new StringBuilder();\n                 String line = br.readLine();\n                 boolean isNotFirstLine = false;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}