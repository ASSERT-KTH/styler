{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4480",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4480/NodeRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4480/NodeRecordFormat.java\nindex 014d40caa2f..faa1cc07b05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4480/NodeRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4480/NodeRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -27,14 +28,14 @@ import org.neo4j.kernel.impl.store.record.Record;\n /**\n  * LEGEND:\n  * V: variable between 3B-8B\n- *\n+ * <p>\n  * Record format:\n  * 1B   header\n  * VB   first relationship\n  * VB   first property\n  * 5B   labels\n  * => 12B-22B\n- *\n+ * <p>\n  * Fixed reference record format:\n  * 1B   header\n  * 1B   modifiers\n@@ -45,151 +46,149 @@ import org.neo4j.kernel.impl.store.record.Record;\n  */\n class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n {\n-    static final int RECORD_SIZE = 16;\n-    // size of the record in fixed references format;\n-    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n-                                                Byte.BYTES /* modifiers */ +\n-                                                Integer.BYTES /* first relationship */ +\n-                                                Integer.BYTES /* first property */ +\n-                                                Integer.BYTES /* labels */ +\n-                                                Byte.BYTES /* labels */;\n-\n-    private static final long NULL_LABELS = Record.NO_LABELS_FIELD.intValue();\n-    private static final int DENSE_NODE_BIT       = 0b0000_1000;\n-    private static final int HAS_RELATIONSHIP_BIT = 0b0001_0000;\n-    private static final int HAS_PROPERTY_BIT     = 0b0010_0000;\n-    private static final int HAS_LABELS_BIT       = 0b0100_0000;\n-\n-    private static final long HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK = 0xF_0000_0000L;\n-    private static final long HIGH_DWORD_LOWER_NIBBLE_MASK = 0xFFFF_FFF0_0000_0000L;\n-    private static final long LOWER_NIBBLE_READ_MASK = 0xFL;\n-    private static final long HIGHER_NIBBLE_READ_MASK = 0xF0L;\n-\n-    NodeRecordFormat()\n-    {\n-        this( RECORD_SIZE );\n-    }\n-\n-    NodeRecordFormat( int recordSize )\n-    {\n-        super( fixedRecordSize( recordSize ), 0, HighLimitFormatSettings.NODE_MAXIMUM_ID_BITS );\n-    }\n-\n-    @Override\n-    public NodeRecord newRecord()\n-    {\n-        return new NodeRecord( -1 );\n-    }\n-\n-    @Override\n-    protected void doReadInternal( NodeRecord record, PageCursor cursor, int recordSize, long headerByte,\n-                                   boolean inUse )\n-    {\n-        // Interpret the header byte\n-        boolean dense = has( headerByte, DENSE_NODE_BIT );\n-        if ( record.isUseFixedReferences() )\n-        {\n-            // read record in a fixed reference format\n-            readFixedReferencesRecord( record, cursor, inUse, dense );\n-            record.setUseFixedReferences( true );\n-        }\n-        else\n-        {\n-            // Now read the rest of the data. The adapter will take care of moving the cursor over to the\n-            // other unit when we've exhausted the first one.\n-            long nextRel = decodeCompressedReference( cursor, headerByte, HAS_RELATIONSHIP_BIT, NULL );\n-            long nextProp = decodeCompressedReference( cursor, headerByte, HAS_PROPERTY_BIT, NULL );\n-            long labelField = decodeCompressedReference( cursor, headerByte, HAS_LABELS_BIT, NULL_LABELS );\n-            record.initialize( inUse, nextProp, dense, nextRel, labelField );\n-        }\n-    }\n-\n-    @Override\n-    public int requiredDataLength( NodeRecord record )\n-    {\n-        return  length( record.getNextRel(), NULL ) +\n-                length( record.getNextProp(), NULL ) +\n-                length( record.getLabelField(), NULL_LABELS );\n-    }\n-\n-    @Override\n-    protected byte headerBits( NodeRecord record )\n+  static final int RECORD_SIZE = 16;\n+  // size of the record in fixed references format;\n+  static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n+      Byte.BYTES /* modifiers */ +\n+      Integer.BYTES /* first relationship */ +\n+      Integer.BYTES /* first property */ +\n+      Integer.BYTES /* labels */ +\n+      Byte.BYTES /* labels */;\n+\n+  private static final long NULL_LABELS = Record.NO_LABELS_FIELD.intValue();\n+  private static final int DENSE_NODE_BIT = 0b0000_1000;\n+  private static final int HAS_RELATIONSHIP_BIT = 0b0001_0000;\n+  private static final int HAS_PROPERTY_BIT = 0b0010_0000;\n+  private static final int HAS_LABELS_BIT = 0b0100_0000;\n+\n+  private static final long HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK = 0xF_0000_0000L;\n+  private static final long HIGH_DWORD_LOWER_NIBBLE_MASK = 0xFFFF_FFF0_0000_0000L;\n+  private static final long LOWER_NIBBLE_READ_MASK = 0xFL;\n+  private static final long HIGHER_NIBBLE_READ_MASK = 0xF0L;\n+\n+  NodeRecordFormat()\n+  {\n+    this(RECORD_SIZE);\n+  }\n+\n+  NodeRecordFormat(int recordSize)\n+  {\n+    super(fixedRecordSize(recordSize), 0, HighLimitFormatSettings.NODE_MAXIMUM_ID_BITS);\n+  }\n+\n+  @Override\n+  public NodeRecord newRecord()\n+  {\n+    return new NodeRecord(-1);\n+  }\n+\n+  @Override\n+  protected void doReadInternal(NodeRecord record, PageCursor cursor, int recordSize, long headerByte,\n+                                boolean inUse)\n+  {\n+    // Interpret the header byte\n+    boolean dense = has(headerByte, DENSE_NODE_BIT);\n+    if (record.isUseFixedReferences())\n     {\n-        byte header = 0;\n-        header = set( header, DENSE_NODE_BIT, record.isDense() );\n-        header = set( header, HAS_RELATIONSHIP_BIT, record.getNextRel(), NULL );\n-        header = set( header, HAS_PROPERTY_BIT, record.getNextProp(), NULL );\n-        header = set( header, HAS_LABELS_BIT, record.getLabelField(), NULL_LABELS );\n-        return header;\n-    }\n-\n-    @Override\n-    protected boolean canUseFixedReferences( NodeRecord record, int recordSize )\n-    {\n-        return isRecordBigEnoughForFixedReferences( recordSize ) &&\n-                (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_NIBBLE_MASK) == 0) &&\n-                (record.getNextRel() == NULL || (record.getNextRel() & HIGH_DWORD_LOWER_NIBBLE_MASK) == 0);\n-    }\n-\n-    private boolean isRecordBigEnoughForFixedReferences( int recordSize )\n+      // read record in a fixed reference format\n+      readFixedReferencesRecord(record, cursor, inUse, dense);\n+      record.setUseFixedReferences(true);\n+    } else\n     {\n-        return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n+      // Now read the rest of the data. The adapter will take care of moving the cursor over to the\n+      // other unit when we've exhausted the first one.\n+      long nextRel = decodeCompressedReference(cursor, headerByte, HAS_RELATIONSHIP_BIT, NULL);\n+      long nextProp = decodeCompressedReference(cursor, headerByte, HAS_PROPERTY_BIT, NULL);\n+      long labelField = decodeCompressedReference(cursor, headerByte, HAS_LABELS_BIT, NULL_LABELS);\n+      record.initialize(inUse, nextProp, dense, nextRel, labelField);\n     }\n-\n-    @Override\n-    protected void doWriteInternal( NodeRecord record, PageCursor cursor )\n-    {\n-        if ( record.isUseFixedReferences() )\n-        {\n-            // write record in fixed reference format\n-            writeFixedReferencesRecord( record, cursor );\n-        }\n-        else\n-        {\n-            encode( cursor, record.getNextRel(), NULL );\n-            encode( cursor, record.getNextProp(), NULL );\n-            encode( cursor, record.getLabelField(), NULL_LABELS );\n-        }\n-    }\n-\n-    private void readFixedReferencesRecord( NodeRecord record, PageCursor cursor, boolean inUse, boolean dense )\n+  }\n+\n+  @Override\n+  public int requiredDataLength(NodeRecord record)\n+  {\n+    return length(record.getNextRel(), NULL) +\n+        length(record.getNextProp(), NULL) +\n+        length(record.getLabelField(), NULL_LABELS);\n+  }\n+\n+  @Override\n+  protected byte headerBits(NodeRecord record)\n+  {\n+    byte header = 0;\n+    header = set(header, DENSE_NODE_BIT, record.isDense());\n+    header = set(header, HAS_RELATIONSHIP_BIT, record.getNextRel(), NULL);\n+    header = set(header, HAS_PROPERTY_BIT, record.getNextProp(), NULL);\n+    header = set(header, HAS_LABELS_BIT, record.getLabelField(), NULL_LABELS);\n+    return header;\n+  }\n+\n+  @Override\n+  protected boolean canUseFixedReferences(NodeRecord record, int recordSize)\n+  {\n+    return isRecordBigEnoughForFixedReferences(recordSize) &&\n+        (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_NIBBLE_MASK) == 0) &&\n+        (record.getNextRel() == NULL || (record.getNextRel() & HIGH_DWORD_LOWER_NIBBLE_MASK) == 0);\n+  }\n+\n+  private boolean isRecordBigEnoughForFixedReferences(int recordSize)\n+  {\n+    return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n+  }\n+\n+  @Override\n+  protected void doWriteInternal(NodeRecord record, PageCursor cursor)\n+  {\n+    if (record.isUseFixedReferences())\n     {\n-        byte modifiers = cursor.getByte();\n-        long relModifier = (modifiers & LOWER_NIBBLE_READ_MASK) << 32;\n-        long propModifier = (modifiers & HIGHER_NIBBLE_READ_MASK) << 28;\n-\n-        long nextRel = cursor.getInt() & 0xFFFFFFFFL;\n-        long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-\n-        long lsbLabels = cursor.getInt() & 0xFFFFFFFFL;\n-        long hsbLabels = cursor.getByte() & 0xFF; // so that a negative byte won't fill the \"extended\" bits with ones.\n-        long labels = lsbLabels | (hsbLabels << 32);\n-\n-        record.initialize( inUse,\n-                BaseRecordFormat.longFromIntAndMod( nextProp, propModifier ), dense,\n-                BaseRecordFormat.longFromIntAndMod( nextRel, relModifier ), labels );\n-    }\n-\n-    private void writeFixedReferencesRecord( NodeRecord record, PageCursor cursor )\n+      // write record in fixed reference format\n+      writeFixedReferencesRecord(record, cursor);\n+    } else\n     {\n-        long nextRel = record.getNextRel();\n-        long nextProp = record.getNextProp();\n-\n-        short relModifier = nextRel == NULL ? 0 : (short)((nextRel & HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK) >> 32);\n-        short propModifier = nextProp == NULL ? 0 : (short) ((nextProp & HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK) >> 28);\n-\n-        // [    ,xxxx] higher bits for rel id\n-        // [xxxx,    ] higher bits for prop id\n-        short modifiers = (short) ( relModifier | propModifier );\n-\n-        cursor.putByte( (byte) modifiers );\n-        cursor.putInt( (int) nextRel );\n-        cursor.putInt( (int) nextProp );\n-\n-        // lsb of labels\n-        long labelField = record.getLabelField();\n-        cursor.putInt( (int) labelField );\n-        // msb of labels\n-        cursor.putByte( (byte) ((labelField & 0xFF_0000_0000L) >> 32) );\n+      encode(cursor, record.getNextRel(), NULL);\n+      encode(cursor, record.getNextProp(), NULL);\n+      encode(cursor, record.getLabelField(), NULL_LABELS);\n     }\n+  }\n+\n+  private void readFixedReferencesRecord(NodeRecord record, PageCursor cursor, boolean inUse, boolean dense)\n+  {\n+    byte modifiers = cursor.getByte();\n+    long relModifier = (modifiers & LOWER_NIBBLE_READ_MASK) << 32;\n+    long propModifier = (modifiers & HIGHER_NIBBLE_READ_MASK) << 28;\n+\n+    long nextRel = cursor.getInt() & 0xFFFFFFFFL;\n+    long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n+\n+    long lsbLabels = cursor.getInt() & 0xFFFFFFFFL;\n+    long hsbLabels = cursor.getByte() & 0xFF; // so that a negative byte won't fill the \"extended\" bits with ones.\n+    long labels = lsbLabels | (hsbLabels << 32);\n+\n+    record.initialize(inUse,\n+        BaseRecordFormat.longFromIntAndMod(nextProp, propModifier), dense,\n+        BaseRecordFormat.longFromIntAndMod(nextRel, relModifier), labels);\n+  }\n+\n+  private void writeFixedReferencesRecord(NodeRecord record, PageCursor cursor)\n+  {\n+    long nextRel = record.getNextRel();\n+    long nextProp = record.getNextProp();\n+\n+    short relModifier = nextRel == NULL ? 0 : (short) ((nextRel & HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK) >> 32);\n+    short propModifier = nextProp == NULL ? 0 : (short) ((nextProp & HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK) >> 28);\n+\n+    // [    ,xxxx] higher bits for rel id\n+    // [xxxx,    ] higher bits for prop id\n+    short modifiers = (short) (relModifier | propModifier);\n+\n+    cursor.putByte((byte) modifiers);\n+    cursor.putInt((int) nextRel);\n+    cursor.putInt((int) nextProp);\n+\n+    // lsb of labels\n+    long labelField = record.getLabelField();\n+    cursor.putInt((int) labelField);\n+    // msb of labels\n+    cursor.putByte((byte) ((labelField & 0xFF_0000_0000L) >> 32));\n+  }\n }\n",
            "diff_size": 211
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "column": "89",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "129",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "165",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 253).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "column": "65",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "98",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "123",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "160",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "192",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "216",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "147",
                    "column": "39",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "147",
                    "column": "64",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "147",
                    "column": "64",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "40",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "66",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "66",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "column": "40",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "151",
                    "column": "41",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "42",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "32",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "column": "69",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "161",
                    "column": "106",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "72",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "109",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "166",
                    "column": "48",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "175",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "175",
                    "column": "63",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4480/NodeRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4480/NodeRecordFormat.java\nindex 014d40caa2f..8e78601ebfc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4480/NodeRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4480/NodeRecordFormat.java\n@@ -43,23 +43,17 @@ import org.neo4j.kernel.impl.store.record.Record;\n  * 5B   labels\n  * => 15B\n  */\n+\n class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n {\n     static final int RECORD_SIZE = 16;\n     // size of the record in fixed references format;\n-    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n-                                                Byte.BYTES /* modifiers */ +\n-                                                Integer.BYTES /* first relationship */ +\n-                                                Integer.BYTES /* first property */ +\n-                                                Integer.BYTES /* labels */ +\n-                                                Byte.BYTES /* labels */;\n-\n+    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE + Byte.BYTES /* modifiers */+ Integer.BYTES /* first relationship */+ Integer.BYTES /* first property */+ Integer.BYTES /* labels */ + Byte.BYTES /* labels */;\n     private static final long NULL_LABELS = Record.NO_LABELS_FIELD.intValue();\n-    private static final int DENSE_NODE_BIT       = 0b0000_1000;\n+    private static final int DENSE_NODE_BIT = 0b0000_1000;\n     private static final int HAS_RELATIONSHIP_BIT = 0b0001_0000;\n-    private static final int HAS_PROPERTY_BIT     = 0b0010_0000;\n-    private static final int HAS_LABELS_BIT       = 0b0100_0000;\n-\n+    private static final int HAS_PROPERTY_BIT = 0b0010_0000;\n+    private static final int HAS_LABELS_BIT = 0b0100_0000;\n     private static final long HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK = 0xF_0000_0000L;\n     private static final long HIGH_DWORD_LOWER_NIBBLE_MASK = 0xFFFF_FFF0_0000_0000L;\n     private static final long LOWER_NIBBLE_READ_MASK = 0xFL;\n@@ -67,7 +61,7 @@ class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n \n     NodeRecordFormat()\n     {\n-        this( RECORD_SIZE );\n+        this ( RECORD_SIZE );\n     }\n \n     NodeRecordFormat( int recordSize )\n@@ -78,12 +72,11 @@ class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n     @Override\n     public NodeRecord newRecord()\n     {\n-        return new NodeRecord( -1 );\n+        return new NodeRecord( - 1 );\n     }\n \n     @Override\n-    protected void doReadInternal( NodeRecord record, PageCursor cursor, int recordSize, long headerByte,\n-                                   boolean inUse )\n+    protected void doReadInternal( NodeRecord record, PageCursor cursor, int recordSize, long headerByte, boolean inUse )\n     {\n         // Interpret the header byte\n         boolean dense = has( headerByte, DENSE_NODE_BIT );\n@@ -107,9 +100,7 @@ class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n     @Override\n     public int requiredDataLength( NodeRecord record )\n     {\n-        return  length( record.getNextRel(), NULL ) +\n-                length( record.getNextProp(), NULL ) +\n-                length( record.getLabelField(), NULL_LABELS );\n+        return length( record.getNextRel(), NULL ) + length( record.getNextProp(), NULL ) + length( record.getLabelField(), NULL_LABELS );\n     }\n \n     @Override\n@@ -126,9 +117,7 @@ class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n     @Override\n     protected boolean canUseFixedReferences( NodeRecord record, int recordSize )\n     {\n-        return isRecordBigEnoughForFixedReferences( recordSize ) &&\n-                (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_NIBBLE_MASK) == 0) &&\n-                (record.getNextRel() == NULL || (record.getNextRel() & HIGH_DWORD_LOWER_NIBBLE_MASK) == 0);\n+        return isRecordBigEnoughForFixedReferences( recordSize )&& ( record.getNextProp() == NULL|| ( record.getNextProp()& HIGH_DWORD_LOWER_NIBBLE_MASK) == 0)&& ( record.getNextRel() == NULL|| ( record.getNextRel()& HIGH_DWORD_LOWER_NIBBLE_MASK) == 0);\n     }\n \n     private boolean isRecordBigEnoughForFixedReferences( int recordSize )\n@@ -155,33 +144,26 @@ class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n     private void readFixedReferencesRecord( NodeRecord record, PageCursor cursor, boolean inUse, boolean dense )\n     {\n         byte modifiers = cursor.getByte();\n-        long relModifier = (modifiers & LOWER_NIBBLE_READ_MASK) << 32;\n-        long propModifier = (modifiers & HIGHER_NIBBLE_READ_MASK) << 28;\n-\n-        long nextRel = cursor.getInt() & 0xFFFFFFFFL;\n-        long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-\n-        long lsbLabels = cursor.getInt() & 0xFFFFFFFFL;\n-        long hsbLabels = cursor.getByte() & 0xFF; // so that a negative byte won't fill the \"extended\" bits with ones.\n-        long labels = lsbLabels | (hsbLabels << 32);\n-\n-        record.initialize( inUse,\n-                BaseRecordFormat.longFromIntAndMod( nextProp, propModifier ), dense,\n-                BaseRecordFormat.longFromIntAndMod( nextRel, relModifier ), labels );\n+        long relModifier = ( modifiers& LOWER_NIBBLE_READ_MASK)<<32;\n+        long propModifier = ( modifiers& HIGHER_NIBBLE_READ_MASK)<<28;\n+        long nextRel = cursor.getInt()& 0xFFFFFFFFL;\n+        long nextProp = cursor.getInt()& 0xFFFFFFFFL;\n+        long lsbLabels = cursor.getInt()& 0xFFFFFFFFL;\n+        long hsbLabels = cursor.getByte()& 0xFF; // so that a negative byte won't fill the \"extended\" bits with ones.\n+        long labels = lsbLabels| ( hsbLabels<<32);\n+        record.initialize( inUse, BaseRecordFormat.longFromIntAndMod( nextProp, propModifier ), dense, BaseRecordFormat.longFromIntAndMod( nextRel, relModifier ), labels );\n     }\n \n     private void writeFixedReferencesRecord( NodeRecord record, PageCursor cursor )\n     {\n         long nextRel = record.getNextRel();\n         long nextProp = record.getNextProp();\n-\n-        short relModifier = nextRel == NULL ? 0 : (short)((nextRel & HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK) >> 32);\n-        short propModifier = nextProp == NULL ? 0 : (short) ((nextProp & HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK) >> 28);\n+        short relModifier = nextRel == NULL ? 0 : (short) (( nextRel& HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK)>> 32);\n+        short propModifier = nextProp == NULL ? 0 : (short) (( nextProp& HIGH_DWORD_LOWER_NIBBLE_CHECK_MASK)>> 28);\n \n         // [    ,xxxx] higher bits for rel id\n         // [xxxx,    ] higher bits for prop id\n-        short modifiers = (short) ( relModifier | propModifier );\n-\n+        short modifiers = (short) ( relModifier| propModifier);\n         cursor.putByte( (byte) modifiers );\n         cursor.putInt( (int) nextRel );\n         cursor.putInt( (int) nextProp );\n@@ -190,6 +172,6 @@ class NodeRecordFormat extends BaseHighLimitRecordFormat<NodeRecord>\n         long labelField = record.getLabelField();\n         cursor.putInt( (int) labelField );\n         // msb of labels\n-        cursor.putByte( (byte) ((labelField & 0xFF_0000_0000L) >> 32) );\n+        cursor.putByte( (byte) (( labelField& 0xFF_0000_0000L)>> 32) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}