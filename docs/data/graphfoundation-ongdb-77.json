{
    "project_name": "graphfoundation-ongdb",
    "error_id": "77",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/77/InputNodeCacheReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/77/InputNodeCacheReader.java\nindex 8241f17dc93..b8ab58f622e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/77/InputNodeCacheReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/77/InputNodeCacheReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input;\n \n import java.io.IOException;\n@@ -35,88 +36,86 @@ import static org.neo4j.unsafe.impl.batchimport.input.InputCache.LABEL_TOKEN;\n  */\n public class InputNodeCacheReader extends InputEntityCacheReader\n {\n-    public InputNodeCacheReader( StoreChannel channel, StoreChannel header ) throws IOException\n-    {\n-        super( channel, header );\n-    }\n+  public InputNodeCacheReader(StoreChannel channel, StoreChannel header) throws IOException\n+  {\n+    super(channel, header);\n+  }\n \n-    @Override\n-    public InputChunk newChunk()\n-    {\n-        return new InputNodeDeserializer();\n-    }\n-\n-    class InputNodeDeserializer extends InputEntityDeserializer\n-    {\n-        protected String[] previousLabels = InputEntityCacheWriter.EMPTY_STRING_ARRAY;\n+  @Override\n+  public InputChunk newChunk()\n+  {\n+    return new InputNodeDeserializer();\n+  }\n \n-        @Override\n-        public boolean next( InputEntityVisitor visitor ) throws IOException\n-        {\n-            if ( !readProperties( visitor ) )\n-            {\n-                return false;\n-            }\n+  class InputNodeDeserializer extends InputEntityDeserializer\n+  {\n+    protected String[] previousLabels = InputEntityCacheWriter.EMPTY_STRING_ARRAY;\n \n-            // group\n-            Group group = readGroup( 0 );\n+    @Override\n+    public boolean next(InputEntityVisitor visitor) throws IOException\n+    {\n+      if (!readProperties(visitor))\n+      {\n+        return false;\n+      }\n \n-            // id\n-            Object id = readValue();\n-            visitor.id( id, group );\n+      // group\n+      Group group = readGroup(0);\n \n-            // labels (diff from previous node)\n-            byte labelsMode = channel.get();\n-            if ( labelsMode == HAS_LABEL_FIELD )\n-            {\n-                visitor.labelField( channel.getLong() );\n-            }\n-            else if ( labelsMode == END_OF_LABEL_CHANGES )\n-            {   // Same as for previous node\n-                visitor.labels( previousLabels );\n-            }\n-            else\n-            {\n-                String[] newLabels = previousLabels.clone();\n-                int cursor = newLabels.length;\n-                while ( labelsMode != END_OF_LABEL_CHANGES )\n-                {\n-                    switch ( labelsMode )\n-                    {\n-                    case LABEL_REMOVAL:\n-                        remove( (String) readToken( LABEL_TOKEN ), newLabels, cursor-- );\n-                        break;\n-                    case LABEL_ADDITION:\n-                        (newLabels = ensureRoomForOneMore( newLabels, cursor ))[cursor++] = (String) readToken( LABEL_TOKEN );\n-                        break;\n-                    default:\n-                        throw new IllegalArgumentException( \"Unrecognized label mode \" + labelsMode );\n-                    }\n-                    labelsMode = channel.get();\n-                }\n-                visitor.labels( previousLabels = cursor == newLabels.length ? newLabels : Arrays.copyOf( newLabels, cursor ) );\n-            }\n-            return true;\n-        }\n+      // id\n+      Object id = readValue();\n+      visitor.id(id, group);\n \n-        private String[] ensureRoomForOneMore( String[] labels, int cursor )\n+      // labels (diff from previous node)\n+      byte labelsMode = channel.get();\n+      if (labelsMode == HAS_LABEL_FIELD)\n+      {\n+        visitor.labelField(channel.getLong());\n+      } else if (labelsMode == END_OF_LABEL_CHANGES)\n+      {   // Same as for previous node\n+        visitor.labels(previousLabels);\n+      } else\n+      {\n+        String[] newLabels = previousLabels.clone();\n+        int cursor = newLabels.length;\n+        while (labelsMode != END_OF_LABEL_CHANGES)\n         {\n-            return cursor >= labels.length ? Arrays.copyOf( labels, cursor + 1 ) : labels;\n+          switch (labelsMode)\n+          {\n+            case LABEL_REMOVAL:\n+              remove((String) readToken(LABEL_TOKEN), newLabels, cursor--);\n+              break;\n+            case LABEL_ADDITION:\n+              (newLabels = ensureRoomForOneMore(newLabels, cursor))[cursor++] = (String) readToken(LABEL_TOKEN);\n+              break;\n+            default:\n+              throw new IllegalArgumentException(\"Unrecognized label mode \" + labelsMode);\n+          }\n+          labelsMode = channel.get();\n         }\n+        visitor.labels(previousLabels = cursor == newLabels.length ? newLabels : Arrays.copyOf(newLabels, cursor));\n+      }\n+      return true;\n+    }\n \n-        private void remove( String item, String[] from, int cursor )\n+    private String[] ensureRoomForOneMore(String[] labels, int cursor)\n+    {\n+      return cursor >= labels.length ? Arrays.copyOf(labels, cursor + 1) : labels;\n+    }\n+\n+    private void remove(String item, String[] from, int cursor)\n+    {\n+      for (int i = 0; i < cursor; i++)\n+      {\n+        if (item.equals(from[i]))\n         {\n-            for ( int i = 0; i < cursor; i++ )\n-            {\n-                if ( item.equals( from[i] ) )\n-                {\n-                    from[i] = from[cursor - 1];\n-                    from[cursor - 1] = null;\n-                    return;\n-                }\n-            }\n-            throw new IllegalArgumentException( \"Diff said to remove \" + item + \" from \" +\n-                    Arrays.toString( from ) + \", but it didn't contain it\" );\n+          from[i] = from[cursor - 1];\n+          from[cursor - 1] = null;\n+          return;\n         }\n+      }\n+      throw new IllegalArgumentException(\"Diff said to remove \" + item + \" from \" +\n+          Arrays.toString(from) + \", but it didn't contain it\");\n     }\n+  }\n }\n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/77/InputNodeCacheReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/77/InputNodeCacheReader.java\nindex 8241f17dc93..a8b9c5b4e8f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/77/InputNodeCacheReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/77/InputNodeCacheReader.java\n@@ -72,7 +72,8 @@ public class InputNodeCacheReader extends InputEntityCacheReader\n                 visitor.labelField( channel.getLong() );\n             }\n             else if ( labelsMode == END_OF_LABEL_CHANGES )\n-            {   // Same as for previous node\n+            {\n+    // Same as for previous node\n                 visitor.labels( previousLabels );\n             }\n             else\n@@ -92,7 +93,8 @@ public class InputNodeCacheReader extends InputEntityCacheReader\n                     default:\n                         throw new IllegalArgumentException( \"Unrecognized label mode \" + labelsMode );\n                     }\n-                    labelsMode = channel.get();\n+\n+labelsMode = channel.get();\n                 }\n                 visitor.labels( previousLabels = cursor == newLabels.length ? newLabels : Arrays.copyOf( newLabels, cursor ) );\n             }\n@@ -115,8 +117,7 @@ public class InputNodeCacheReader extends InputEntityCacheReader\n                     return;\n                 }\n             }\n-            throw new IllegalArgumentException( \"Diff said to remove \" + item + \" from \" +\n-                    Arrays.toString( from ) + \", but it didn't contain it\" );\n-        }\n+            throw new IllegalArgumentException( \"Diff said to remove \" + item + \" from \" + Arrays.toString( from ) + \", but it didn't contain it\" );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}