{
    "project_name": "CESNET-perun",
    "error_id": "142",
    "information": {
        "errors": [
            {
                "line": "109",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n\t\t\tproducer = producerFactory.getProducer();\n\t\t\t\n\t\t\t// Step 11. Deliver output and try to receive the message\n\t\t\tTextMessage messageReceived = null;\n\t\t\ttry {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/142/EngineMessageConsumer.java\nindex 98f66d9a535..de922d3aed9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/142/EngineMessageConsumer.java\n@@ -106,7 +106,7 @@ public class EngineMessageConsumer extends AbstractRunner {\n \t\twhile (!shouldStop()) {\n \n \t\t\tproducer = producerFactory.getProducer();\n-\t\t\t\n+\n \t\t\t// Step 11. Deliver output and try to receive the message\n \t\t\tTextMessage messageReceived = null;\n \t\t\ttry {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/142/EngineMessageConsumer.java\nindex 98f66d9a535..8a4de383371 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/142/EngineMessageConsumer.java\n@@ -18,144 +18,143 @@ import org.springframework.beans.factory.annotation.Autowired;\n  * Received messages are then parsed by SystemQueueProcessor.\n  * If parsing fails, it tries to restart whole JMS processing.\n  *\n- * @see EngineMessageProcessor\n- *\n  * @author Michal Karm Babacek\n  * @author Michal Voc\u016f\n  * @author David \u0160arman\n  * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n+ * @see EngineMessageProcessor\n  */\n @org.springframework.stereotype.Service(value = \"engineMessageConsumer\")\n public class EngineMessageConsumer extends AbstractRunner {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(EngineMessageConsumer.class);\n-\n-\tprivate final static int timeout = 5000; // ms\n-\n-\tprivate EngineMessageProcessor engineMessageProcessor;\n-\tprivate MessageConsumer messageConsumer = null;\n-\tprivate Session session = null;\n-\tprivate String queueName = null;\n-\t@Autowired\n-\tprivate EngineMessageProducerFactory producerFactory;\n-\tprivate EngineMessageProducer producer = null;\n-\n-\tpublic EngineMessageConsumer() {\n-\t}\n-\n-\t// ----- setters -------------------------------------\n-\n-\n-\tpublic EngineMessageProcessor getEngineMessageProcessor() {\n-\t\treturn engineMessageProcessor;\n-\t}\n-\n-\t@Autowired\n-\tpublic void setEngineMessageProcessor(EngineMessageProcessor engineMessageProcessor) {\n-\t\tthis.engineMessageProcessor = engineMessageProcessor;\n-\t}\n-\n-\tpublic EngineMessageProducerFactory getProducerFactory() {\n-\t\treturn producerFactory;\n-\t}\n-\n-\tpublic void setProducerFactory(EngineMessageProducerFactory producerFactory) {\n-\t\tthis.producerFactory = producerFactory;\n-\t}\n-\n-\n-\t// ----- methods -------------------------------------\n-\n-\n-\t/**\n-\t * Set QueueName and HornetQ session in order to create correct message consumer.\n-\t *\n-\t * @param queueName Name of the JMS queue\n-\t * @param session HornetQ session\n-\t */\n-\tpublic void setUp(String queueName, Session session) {\n-\t\tthis.queueName = queueName;\n-\t\tthis.session = session;\n-\t}\n-\n-\t/**\n-\t * Create JMS message consumer for a queue and pass message content to EngineMessageProcessor.\n-\t *\n-\t * @see EngineMessageProcessor\n-\t */\n-\t@Override\n-\tpublic void run() {\n-\n-\t\tlog.debug(\"SystemQueueReceiver has started...\");\n-\t\ttry {\n-\n-\t\t\t// Step 1. Directly instantiate the JMS Queue object.\n-\t\t\tlog.debug(\"Creating queue...\");\n-\t\t\tQueue queue = HornetQJMSClient.createQueue(queueName);\n-\n-\t\t\t// Step 9. Create a JMS Message Consumer\n-\t\t\tlog.debug(\"Creating consumer...\");\n-\t\t\tmessageConsumer = session.createConsumer(queue);\n-\n-\t\t} catch (JMSException e) {\n-\t\t\tlog.error(e.toString(), e);\n-\t\t} catch (Exception e) {\n-\t\t\tlog.error(e.toString(), e);\n-\t\t}\n-\n-\t\twhile (!shouldStop()) {\n-\n-\t\t\tproducer = producerFactory.getProducer();\n-\t\t\t\n-\t\t\t// Step 11. Deliver output and try to receive the message\n-\t\t\tTextMessage messageReceived = null;\n-\t\t\ttry {\n-\t\t\t\tif(producer != null) {\n-\t\t\t\t\tproducer.deliverOutputMessages();\n-\t\t\t\t}\n-\n-\t\t\t\tlog.debug(\"Gonna call messageConsumer.receive(timeout)...\");\n-\t\t\t\tmessageReceived = (TextMessage) messageConsumer.receive(timeout);\n-\t\t\t\tif (messageReceived != null) {\n-\t\t\t\t\tif (log.isDebugEnabled()) {\n-\t\t\t\t\t\tlog.debug(\"System message received [\" + messageReceived.getText() + \"]\");\n-\t\t\t\t\t}\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tengineMessageProcessor.processEngineMessage(messageReceived.getText());\n-\t\t\t\t\t} catch (MessageFormatException ex) {\n-\t\t\t\t\t\t// engine sent wrongly formatted messages\n-\t\t\t\t\t\t// shouldn't kill whole messaging process\n-\t\t\t\t\t\tlog.error(ex.toString(), ex);\n-\t\t\t\t\t}\n-\t\t\t\t\tmessageReceived.acknowledge();\n-\t\t\t\t} else {\n-\t\t\t\t\tif (log.isDebugEnabled()) {\n-\t\t\t\t\t\tlog.debug(\"No message available...\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\t// try to restart JMS messaging\n-\t\t\t\tlog.error(e.toString(), e);\n-\t\t\t\t// NOTE: this will call stop() on us\n-\t\t\t\tengineMessageProcessor.stopProcessingSystemMessages();\n-\t\t\t\tengineMessageProcessor.startProcessingSystemMessages();\n-\t\t\t\ttry {\n-\t\t\t\t\tThread.sleep(10000);\n-\t\t\t\t} catch (InterruptedException ex) {\n-\t\t\t\t\tlog.error(ex.toString(), ex);\n-\t\t\t\t\tstop();\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.error(e.toString(), e);\n-\t\t\t\tstop();\n-\t\t\t}\n-\t\t}\n-\t\ttry {\n-\t\t\tmessageConsumer.close();\n-\t\t} catch (JMSException e) {\n-\t\t\tlog.error(e.toString(), e);\n-\t\t}\n-\t\tmessageConsumer = null;\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(EngineMessageConsumer.class);\n+\n+    private final static int timeout = 5000; // ms\n+\n+    private EngineMessageProcessor engineMessageProcessor;\n+    private MessageConsumer messageConsumer = null;\n+    private Session session = null;\n+    private String queueName = null;\n+    @Autowired\n+    private EngineMessageProducerFactory producerFactory;\n+    private EngineMessageProducer producer = null;\n+\n+    public EngineMessageConsumer() {\n+    }\n+\n+    // ----- setters -------------------------------------\n+\n+\n+    public EngineMessageProcessor getEngineMessageProcessor() {\n+        return engineMessageProcessor;\n+    }\n+\n+    @Autowired\n+    public void setEngineMessageProcessor(EngineMessageProcessor engineMessageProcessor) {\n+        this.engineMessageProcessor = engineMessageProcessor;\n+    }\n+\n+    public EngineMessageProducerFactory getProducerFactory() {\n+        return producerFactory;\n+    }\n+\n+    public void setProducerFactory(EngineMessageProducerFactory producerFactory) {\n+        this.producerFactory = producerFactory;\n+    }\n+\n+\n+    // ----- methods -------------------------------------\n+\n+\n+    /**\n+     * Set QueueName and HornetQ session in order to create correct message consumer.\n+     *\n+     * @param queueName Name of the JMS queue\n+     * @param session   HornetQ session\n+     */\n+    public void setUp(String queueName, Session session) {\n+        this.queueName = queueName;\n+        this.session = session;\n+    }\n+\n+    /**\n+     * Create JMS message consumer for a queue and pass message content to EngineMessageProcessor.\n+     *\n+     * @see EngineMessageProcessor\n+     */\n+    @Override\n+    public void run() {\n+\n+        log.debug(\"SystemQueueReceiver has started...\");\n+        try {\n+\n+            // Step 1. Directly instantiate the JMS Queue object.\n+            log.debug(\"Creating queue...\");\n+            Queue queue = HornetQJMSClient.createQueue(queueName);\n+\n+            // Step 9. Create a JMS Message Consumer\n+            log.debug(\"Creating consumer...\");\n+            messageConsumer = session.createConsumer(queue);\n+\n+        } catch (JMSException e) {\n+            log.error(e.toString(), e);\n+        } catch (Exception e) {\n+            log.error(e.toString(), e);\n+        }\n+\n+        while (!shouldStop()) {\n+\n+            producer = producerFactory.getProducer();\n+\n+            // Step 11. Deliver output and try to receive the message\n+            TextMessage messageReceived = null;\n+            try {\n+                if (producer != null) {\n+                    producer.deliverOutputMessages();\n+                }\n+\n+                log.debug(\"Gonna call messageConsumer.receive(timeout)...\");\n+                messageReceived = (TextMessage) messageConsumer.receive(timeout);\n+                if (messageReceived != null) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"System message received [\" + messageReceived.getText() + \"]\");\n+                    }\n+                    try {\n+                        engineMessageProcessor.processEngineMessage(messageReceived.getText());\n+                    } catch (MessageFormatException ex) {\n+                        // engine sent wrongly formatted messages\n+                        // shouldn't kill whole messaging process\n+                        log.error(ex.toString(), ex);\n+                    }\n+                    messageReceived.acknowledge();\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No message available...\");\n+                    }\n+                }\n+            } catch (JMSException e) {\n+                // try to restart JMS messaging\n+                log.error(e.toString(), e);\n+                // NOTE: this will call stop() on us\n+                engineMessageProcessor.stopProcessingSystemMessages();\n+                engineMessageProcessor.startProcessingSystemMessages();\n+                try {\n+                    Thread.sleep(10000);\n+                } catch (InterruptedException ex) {\n+                    log.error(ex.toString(), ex);\n+                    stop();\n+                }\n+            } catch (Exception e) {\n+                log.error(e.toString(), e);\n+                stop();\n+            }\n+        }\n+        try {\n+            messageConsumer.close();\n+        } catch (JMSException e) {\n+            log.error(e.toString(), e);\n+        }\n+        messageConsumer = null;\n+    }\n \n }\n",
            "diff_size": 132
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/142/EngineMessageConsumer.java\nindex 98f66d9a535..d221e6b65f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/142/EngineMessageConsumer.java\n@@ -5,7 +5,6 @@ import javax.jms.MessageConsumer;\n import javax.jms.Queue;\n import javax.jms.Session;\n import javax.jms.TextMessage;\n-\n import cz.metacentrum.perun.dispatcher.exceptions.MessageFormatException;\n import cz.metacentrum.perun.taskslib.runners.impl.AbstractRunner;\n import org.hornetq.api.jms.HornetQJMSClient;\n@@ -25,137 +24,140 @@ import org.springframework.beans.factory.annotation.Autowired;\n  * @author David \u0160arman\n  * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n  */\n+\n+\n @org.springframework.stereotype.Service(value = \"engineMessageConsumer\")\n public class EngineMessageConsumer extends AbstractRunner {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(EngineMessageConsumer.class);\n-\n-\tprivate final static int timeout = 5000; // ms\n-\n-\tprivate EngineMessageProcessor engineMessageProcessor;\n-\tprivate MessageConsumer messageConsumer = null;\n-\tprivate Session session = null;\n-\tprivate String queueName = null;\n-\t@Autowired\n-\tprivate EngineMessageProducerFactory producerFactory;\n-\tprivate EngineMessageProducer producer = null;\n-\n-\tpublic EngineMessageConsumer() {\n-\t}\n-\n-\t// ----- setters -------------------------------------\n-\n-\n-\tpublic EngineMessageProcessor getEngineMessageProcessor() {\n-\t\treturn engineMessageProcessor;\n-\t}\n-\n-\t@Autowired\n-\tpublic void setEngineMessageProcessor(EngineMessageProcessor engineMessageProcessor) {\n-\t\tthis.engineMessageProcessor = engineMessageProcessor;\n-\t}\n-\n-\tpublic EngineMessageProducerFactory getProducerFactory() {\n-\t\treturn producerFactory;\n-\t}\n-\n-\tpublic void setProducerFactory(EngineMessageProducerFactory producerFactory) {\n-\t\tthis.producerFactory = producerFactory;\n-\t}\n-\n-\n-\t// ----- methods -------------------------------------\n-\n-\n-\t/**\n-\t * Set QueueName and HornetQ session in order to create correct message consumer.\n-\t *\n-\t * @param queueName Name of the JMS queue\n-\t * @param session HornetQ session\n-\t */\n-\tpublic void setUp(String queueName, Session session) {\n-\t\tthis.queueName = queueName;\n-\t\tthis.session = session;\n-\t}\n-\n-\t/**\n-\t * Create JMS message consumer for a queue and pass message content to EngineMessageProcessor.\n-\t *\n-\t * @see EngineMessageProcessor\n-\t */\n-\t@Override\n-\tpublic void run() {\n-\n-\t\tlog.debug(\"SystemQueueReceiver has started...\");\n-\t\ttry {\n-\n-\t\t\t// Step 1. Directly instantiate the JMS Queue object.\n-\t\t\tlog.debug(\"Creating queue...\");\n-\t\t\tQueue queue = HornetQJMSClient.createQueue(queueName);\n-\n-\t\t\t// Step 9. Create a JMS Message Consumer\n-\t\t\tlog.debug(\"Creating consumer...\");\n-\t\t\tmessageConsumer = session.createConsumer(queue);\n-\n-\t\t} catch (JMSException e) {\n-\t\t\tlog.error(e.toString(), e);\n-\t\t} catch (Exception e) {\n-\t\t\tlog.error(e.toString(), e);\n-\t\t}\n-\n-\t\twhile (!shouldStop()) {\n-\n-\t\t\tproducer = producerFactory.getProducer();\n-\t\t\t\n-\t\t\t// Step 11. Deliver output and try to receive the message\n-\t\t\tTextMessage messageReceived = null;\n-\t\t\ttry {\n-\t\t\t\tif(producer != null) {\n-\t\t\t\t\tproducer.deliverOutputMessages();\n-\t\t\t\t}\n-\n-\t\t\t\tlog.debug(\"Gonna call messageConsumer.receive(timeout)...\");\n-\t\t\t\tmessageReceived = (TextMessage) messageConsumer.receive(timeout);\n-\t\t\t\tif (messageReceived != null) {\n-\t\t\t\t\tif (log.isDebugEnabled()) {\n-\t\t\t\t\t\tlog.debug(\"System message received [\" + messageReceived.getText() + \"]\");\n-\t\t\t\t\t}\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tengineMessageProcessor.processEngineMessage(messageReceived.getText());\n-\t\t\t\t\t} catch (MessageFormatException ex) {\n-\t\t\t\t\t\t// engine sent wrongly formatted messages\n-\t\t\t\t\t\t// shouldn't kill whole messaging process\n-\t\t\t\t\t\tlog.error(ex.toString(), ex);\n-\t\t\t\t\t}\n-\t\t\t\t\tmessageReceived.acknowledge();\n-\t\t\t\t} else {\n-\t\t\t\t\tif (log.isDebugEnabled()) {\n-\t\t\t\t\t\tlog.debug(\"No message available...\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\t// try to restart JMS messaging\n-\t\t\t\tlog.error(e.toString(), e);\n-\t\t\t\t// NOTE: this will call stop() on us\n-\t\t\t\tengineMessageProcessor.stopProcessingSystemMessages();\n-\t\t\t\tengineMessageProcessor.startProcessingSystemMessages();\n-\t\t\t\ttry {\n-\t\t\t\t\tThread.sleep(10000);\n-\t\t\t\t} catch (InterruptedException ex) {\n-\t\t\t\t\tlog.error(ex.toString(), ex);\n-\t\t\t\t\tstop();\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tlog.error(e.toString(), e);\n-\t\t\t\tstop();\n-\t\t\t}\n-\t\t}\n-\t\ttry {\n-\t\t\tmessageConsumer.close();\n-\t\t} catch (JMSException e) {\n-\t\t\tlog.error(e.toString(), e);\n-\t\t}\n-\t\tmessageConsumer = null;\n-\t}\n-\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(EngineMessageConsumer.class);\n+ private final static int timeout = 5000; // ms\n+ private EngineMessageProcessor engineMessageProcessor;\n+ private MessageConsumer messageConsumer = null;\n+ private Session session = null;\n+ private String queueName = null;\n+\n+ @Autowired\n+ private EngineMessageProducerFactory producerFactory;\n+ private EngineMessageProducer producer = null;\n+\n+\n+ public EngineMessageConsumer() {}\n+\n+ // ----- setters -------------------------------------\n+\n+\n+ public EngineMessageProcessor getEngineMessageProcessor() {\n+  return engineMessageProcessor;\n+ }\n+\n+ @Autowired\n+ public void setEngineMessageProcessor(EngineMessageProcessor engineMessageProcessor) {\n+  this.engineMessageProcessor = engineMessageProcessor;\n+ }\n+\n+ public EngineMessageProducerFactory getProducerFactory() {\n+  return producerFactory;\n+ }\n+\n+ public void setProducerFactory(EngineMessageProducerFactory producerFactory) {\n+  this.producerFactory = producerFactory;\n+ }\n+\n+\n+ // ----- methods -------------------------------------\n+\n+\n+ /**\n+  * Set QueueName and HornetQ session in order to create correct message consumer.\n+  *\n+  * @param queueName Name of the JMS queue\n+  * @param session HornetQ session\n+  */\n+\n+ public void setUp(String queueName, Session session) {\n+  this.queueName = queueName;\n+  this.session = session;\n+ }\n+\n+ /**\n+  * Create JMS message consumer for a queue and pass message content to EngineMessageProcessor.\n+  *\n+  * @see EngineMessageProcessor\n+  */\n+\n+ @Override\n+ public void run() {\n+  log.debug(\"SystemQueueReceiver has started...\");\n+\n+  try {\n+\n+   // Step 1. Directly instantiate the JMS Queue object.\n+   log.debug(\"Creating queue...\");\n+   Queue queue = HornetQJMSClient.createQueue(queueName);\n+\n+   // Step 9. Create a JMS Message Consumer\n+   log.debug(\"Creating consumer...\");\n+   messageConsumer = session.createConsumer(queue);\n+  } catch (JMSException e) {\n+   log.error(e.toString(), e);\n+  } catch (Exception e) {\n+   log.error(e.toString(), e);\n+  }\n+  while (!shouldStop()) {\n+   producer = producerFactory.getProducer();\n+   \n+   // Step 11. Deliver output and try to receive the message\n+   TextMessage messageReceived = null;\n+   try {\n+    if (producer != null) {\n+     producer.deliverOutputMessages();\n+    }\n+    log.debug(\"Gonna call messageConsumer.receive(timeout)...\");\n+    messageReceived = (TextMessage) messageConsumer.receive(timeout);\n+    if (messageReceived != null) {\n+     if (log.isDebugEnabled()) {\n+      log.debug(\"System message received [\" + messageReceived.getText() + \"]\");\n+     }\n+\n+     try {\n+      engineMessageProcessor.processEngineMessage(messageReceived.getText());\n+     } catch (MessageFormatException ex) {\n+      // engine sent wrongly formatted messages\n+      // shouldn't kill whole messaging process\n+      log.error(ex.toString(), ex);\n+     }\n+     messageReceived.acknowledge();\n+    } else {\n+     if (log.isDebugEnabled()) {\n+      log.debug(\"No message available...\");\n+     }\n+    }\n+   } catch (JMSException e) {\n+    // try to restart JMS messaging\n+    log.error(e.toString(), e);\n+    // NOTE: this will call stop() on us\n+    engineMessageProcessor.stopProcessingSystemMessages();\n+    engineMessageProcessor.startProcessingSystemMessages();\n+\n+    try {\n+     Thread.sleep(10000);\n+    } catch (InterruptedException ex) {\n+     log.error(ex.toString(), ex);\n+     stop();\n+    }\n+   } catch (Exception e) {\n+    log.error(e.toString(), e);\n+    stop();\n+   }\n+  }\n+\n+  try {\n+   messageConsumer.close();\n+  } catch (JMSException e) {\n+   log.error(e.toString(), e);\n+  }\n+  messageConsumer = null;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 135
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/142/EngineMessageConsumer.java\nindex 98f66d9a535..de922d3aed9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/142/EngineMessageConsumer.java\n@@ -106,7 +106,7 @@ public class EngineMessageConsumer extends AbstractRunner {\n \t\twhile (!shouldStop()) {\n \n \t\t\tproducer = producerFactory.getProducer();\n-\t\t\t\n+\n \t\t\t// Step 11. Deliver output and try to receive the message\n \t\t\tTextMessage messageReceived = null;\n \t\t\ttry {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/142/EngineMessageConsumer.java\nindex 98f66d9a535..82826271e9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/142/EngineMessageConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/142/EngineMessageConsumer.java\n@@ -105,9 +105,9 @@ public class EngineMessageConsumer extends AbstractRunner {\n \n \t\twhile (!shouldStop()) {\n \n-\t\t\tproducer = producerFactory.getProducer();\n-\t\t\t\n-\t\t\t// Step 11. Deliver output and try to receive the message\n+\t\t\tproducer = producerFactory.getProducer()\n+\n+\t\t\t; // Step 11. Deliver output and try to receive the message\n \t\t\tTextMessage messageReceived = null;\n \t\t\ttry {\n \t\t\t\tif(producer != null) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}