{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3416",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3416/LogEntryCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3416/LogEntryCursor.java\nindex e7716aced6e..e0fdfd90d6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3416/LogEntryCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3416/LogEntryCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.IOException;\n@@ -30,47 +31,47 @@ import org.neo4j.kernel.impl.transaction.log.entry.LogEntryReader;\n  */\n public class LogEntryCursor implements IOCursor<LogEntry>\n {\n-    private final LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader;\n-    private final ReadableClosablePositionAwareChannel channel;\n-    private final LogPositionMarker position = new LogPositionMarker();\n-    private LogEntry entry;\n+  private final LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader;\n+  private final ReadableClosablePositionAwareChannel channel;\n+  private final LogPositionMarker position = new LogPositionMarker();\n+  private LogEntry entry;\n \n-    public LogEntryCursor( LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n-                           ReadableClosablePositionAwareChannel channel )\n-    {\n-        this.logEntryReader = logEntryReader;\n-        this.channel = channel;\n-    }\n+  public LogEntryCursor(LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n+                        ReadableClosablePositionAwareChannel channel)\n+  {\n+    this.logEntryReader = logEntryReader;\n+    this.channel = channel;\n+  }\n \n-    @Override\n-    public LogEntry get()\n-    {\n-        return entry;\n-    }\n+  @Override\n+  public LogEntry get()\n+  {\n+    return entry;\n+  }\n \n-    @Override\n-    public boolean next() throws IOException\n-    {\n-        entry = logEntryReader.readLogEntry( channel );\n+  @Override\n+  public boolean next() throws IOException\n+  {\n+    entry = logEntryReader.readLogEntry(channel);\n \n-        return entry != null;\n-    }\n+    return entry != null;\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        channel.close();\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    channel.close();\n+  }\n \n-    /**\n-     * Reading {@link LogEntry log entries} may have the source move over physically multiple log files.\n-     * This accessor returns the log version of the most recent call to {@link #next()}.\n-     *\n-     * @return the log version of the most recent {@link LogEntry} returned from {@link #next().\n-     */\n-    public long getCurrentLogVersion() throws IOException\n-    {\n-        channel.getCurrentPosition( position );\n-        return position.getLogVersion();\n-    }\n+  /**\n+   * Reading {@link LogEntry log entries} may have the source move over physically multiple log files.\n+   * This accessor returns the log version of the most recent call to {@link #next()}.\n+   *\n+   * @return the log version of the most recent {@link LogEntry} returned from {@link #next().\n+   */\n+  public long getCurrentLogVersion() throws IOException\n+  {\n+    channel.getCurrentPosition(position);\n+    return position.getLogVersion();\n+  }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3416/LogEntryCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3416/LogEntryCursor.java\nindex e7716aced6e..d729c237a15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3416/LogEntryCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3416/LogEntryCursor.java\n@@ -35,9 +35,8 @@ public class LogEntryCursor implements IOCursor<LogEntry>\n     private final LogPositionMarker position = new LogPositionMarker();\n     private LogEntry entry;\n \n-    public LogEntryCursor( LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader,\n-                           ReadableClosablePositionAwareChannel channel )\n-    {\n+    public LogEntryCursor( LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader, ReadableClosablePositionAwareChannel channel )\n+{\n         this.logEntryReader = logEntryReader;\n         this.channel = channel;\n     }\n@@ -52,8 +51,7 @@ public class LogEntryCursor implements IOCursor<LogEntry>\n     public boolean next() throws IOException\n     {\n         entry = logEntryReader.readLogEntry( channel );\n-\n-        return entry != null;\n+return entry != null;\n     }\n \n     @Override\n@@ -73,4 +71,4 @@ public class LogEntryCursor implements IOCursor<LogEntry>\n         channel.getCurrentPosition( position );\n         return position.getLogVersion();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}