{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "144",
    "information": {
        "errors": [
            {
                "line": "153",
                "column": "116",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n        if (count != 1) {\n            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n                    \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "153",
                    "column": "115",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "115",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/144/ReservationRepositoryImpl.java\nindex 38100dec73b..59ae1b0e5dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/144/ReservationRepositoryImpl.java\n@@ -150,7 +150,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                        .execute();\n \n         if (count != 1) {\n-            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n+            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \"+\n                     \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "154",
                    "column": "110",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/144/ReservationRepositoryImpl.java\nindex 38100dec73b..cb1391e7f14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/144/ReservationRepositoryImpl.java\n@@ -37,183 +37,184 @@ import static jooq.steve.db.tables.Reservation.RESERVATION;\n @Repository\n public class ReservationRepositoryImpl implements ReservationRepository {\n \n-    @Autowired private DSLContext ctx;\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<Reservation> getReservations(ReservationQueryForm form) {\n-        SelectQuery selectQuery = ctx.selectQuery();\n-        selectQuery.addFrom(RESERVATION);\n-        selectQuery.addJoin(OCPP_TAG, OCPP_TAG.ID_TAG.eq(RESERVATION.ID_TAG));\n-        selectQuery.addJoin(CONNECTOR, CONNECTOR.CONNECTOR_PK.eq(RESERVATION.CONNECTOR_PK));\n-        selectQuery.addJoin(CHARGE_BOX, CONNECTOR.CHARGE_BOX_ID.eq(CHARGE_BOX.CHARGE_BOX_ID));\n-\n-        selectQuery.addSelect(\n-                RESERVATION.RESERVATION_PK,\n-                RESERVATION.TRANSACTION_PK,\n-                OCPP_TAG.OCPP_TAG_PK,\n-                CHARGE_BOX.CHARGE_BOX_PK,\n-                OCPP_TAG.ID_TAG,\n-                CHARGE_BOX.CHARGE_BOX_ID,\n-                RESERVATION.START_DATETIME,\n-                RESERVATION.EXPIRY_DATETIME,\n-                RESERVATION.STATUS,\n-                CONNECTOR.CONNECTOR_ID\n-        );\n-\n-        if (form.isChargeBoxIdSet()) {\n-            selectQuery.addConditions(CHARGE_BOX.CHARGE_BOX_ID.eq(form.getChargeBoxId()));\n-        }\n-\n-        if (form.isOcppIdTagSet()) {\n-            selectQuery.addConditions(RESERVATION.ID_TAG.eq(form.getOcppIdTag()));\n-        }\n-\n-        if (form.isStatusSet()) {\n-            selectQuery.addConditions(RESERVATION.STATUS.eq(form.getStatus().name()));\n-        }\n-\n-        processType(selectQuery, form);\n-\n-        // Default order\n-        selectQuery.addOrderBy(RESERVATION.EXPIRY_DATETIME.asc());\n-\n-        return selectQuery.fetch().map(new ReservationMapper());\n-    }\n-\n-    @Override\n-    public List<Integer> getActiveReservationIds(String chargeBoxId) {\n-        return ctx.select(RESERVATION.RESERVATION_PK)\n-                  .from(RESERVATION)\n-                  .where(RESERVATION.CONNECTOR_PK.in(DSL.select(CONNECTOR.CONNECTOR_PK)\n-                                                        .from(CONNECTOR)\n-                                                        .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))))\n-                  .and(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()))\n-                  .and(RESERVATION.STATUS.equal(ReservationStatus.ACCEPTED.name()))\n-                  .fetch(RESERVATION.RESERVATION_PK);\n+  @Autowired\n+  private DSLContext ctx;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Reservation> getReservations(ReservationQueryForm form) {\n+    SelectQuery selectQuery = ctx.selectQuery();\n+    selectQuery.addFrom(RESERVATION);\n+    selectQuery.addJoin(OCPP_TAG, OCPP_TAG.ID_TAG.eq(RESERVATION.ID_TAG));\n+    selectQuery.addJoin(CONNECTOR, CONNECTOR.CONNECTOR_PK.eq(RESERVATION.CONNECTOR_PK));\n+    selectQuery.addJoin(CHARGE_BOX, CONNECTOR.CHARGE_BOX_ID.eq(CHARGE_BOX.CHARGE_BOX_ID));\n+\n+    selectQuery.addSelect(\n+      RESERVATION.RESERVATION_PK,\n+      RESERVATION.TRANSACTION_PK,\n+      OCPP_TAG.OCPP_TAG_PK,\n+      CHARGE_BOX.CHARGE_BOX_PK,\n+      OCPP_TAG.ID_TAG,\n+      CHARGE_BOX.CHARGE_BOX_ID,\n+      RESERVATION.START_DATETIME,\n+      RESERVATION.EXPIRY_DATETIME,\n+      RESERVATION.STATUS,\n+      CONNECTOR.CONNECTOR_ID\n+    );\n+\n+    if (form.isChargeBoxIdSet()) {\n+      selectQuery.addConditions(CHARGE_BOX.CHARGE_BOX_ID.eq(form.getChargeBoxId()));\n     }\n \n-    @Override\n-    public int insert(InsertReservationParams params) {\n-        // Check overlapping\n-        //isOverlapping(startTimestamp, expiryTimestamp, chargeBoxId);\n-\n-        SelectConditionStep<Record1<Integer>> connectorPkQuery =\n-                DSL.select(CONNECTOR.CONNECTOR_PK)\n-                   .from(CONNECTOR)\n-                   .where(CONNECTOR.CHARGE_BOX_ID.equal(params.getChargeBoxId()))\n-                   .and(CONNECTOR.CONNECTOR_ID.equal(params.getConnectorId()));\n-\n-        int reservationId = ctx.insertInto(RESERVATION)\n-                               .set(RESERVATION.CONNECTOR_PK, connectorPkQuery)\n-                               .set(RESERVATION.ID_TAG, params.getIdTag())\n-                               .set(RESERVATION.START_DATETIME, params.getStartTimestamp())\n-                               .set(RESERVATION.EXPIRY_DATETIME, params.getExpiryTimestamp())\n-                               .set(RESERVATION.STATUS, ReservationStatus.WAITING.name())\n-                               .returning(RESERVATION.RESERVATION_PK)\n-                               .fetchOne()\n-                               .getReservationPk();\n-\n-        log.debug(\"A new reservation '{}' is inserted.\", reservationId);\n-        return reservationId;\n+    if (form.isOcppIdTagSet()) {\n+      selectQuery.addConditions(RESERVATION.ID_TAG.eq(form.getOcppIdTag()));\n     }\n \n-    @Override\n-    public void delete(int reservationId) {\n-        ctx.delete(RESERVATION)\n-           .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n-           .execute();\n-\n-        log.debug(\"The reservation '{}' is deleted.\", reservationId);\n+    if (form.isStatusSet()) {\n+      selectQuery.addConditions(RESERVATION.STATUS.eq(form.getStatus().name()));\n     }\n \n-    @Override\n-    public void accepted(int reservationId) {\n-        internalUpdateReservation(reservationId, ReservationStatus.ACCEPTED);\n+    processType(selectQuery, form);\n+\n+    // Default order\n+    selectQuery.addOrderBy(RESERVATION.EXPIRY_DATETIME.asc());\n+\n+    return selectQuery.fetch().map(new ReservationMapper());\n+  }\n+\n+  @Override\n+  public List<Integer> getActiveReservationIds(String chargeBoxId) {\n+    return ctx.select(RESERVATION.RESERVATION_PK)\n+      .from(RESERVATION)\n+      .where(RESERVATION.CONNECTOR_PK.in(DSL.select(CONNECTOR.CONNECTOR_PK)\n+        .from(CONNECTOR)\n+        .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))))\n+      .and(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()))\n+      .and(RESERVATION.STATUS.equal(ReservationStatus.ACCEPTED.name()))\n+      .fetch(RESERVATION.RESERVATION_PK);\n+  }\n+\n+  @Override\n+  public int insert(InsertReservationParams params) {\n+    // Check overlapping\n+    //isOverlapping(startTimestamp, expiryTimestamp, chargeBoxId);\n+\n+    SelectConditionStep<Record1<Integer>> connectorPkQuery =\n+      DSL.select(CONNECTOR.CONNECTOR_PK)\n+        .from(CONNECTOR)\n+        .where(CONNECTOR.CHARGE_BOX_ID.equal(params.getChargeBoxId()))\n+        .and(CONNECTOR.CONNECTOR_ID.equal(params.getConnectorId()));\n+\n+    int reservationId = ctx.insertInto(RESERVATION)\n+      .set(RESERVATION.CONNECTOR_PK, connectorPkQuery)\n+      .set(RESERVATION.ID_TAG, params.getIdTag())\n+      .set(RESERVATION.START_DATETIME, params.getStartTimestamp())\n+      .set(RESERVATION.EXPIRY_DATETIME, params.getExpiryTimestamp())\n+      .set(RESERVATION.STATUS, ReservationStatus.WAITING.name())\n+      .returning(RESERVATION.RESERVATION_PK)\n+      .fetchOne()\n+      .getReservationPk();\n+\n+    log.debug(\"A new reservation '{}' is inserted.\", reservationId);\n+    return reservationId;\n+  }\n+\n+  @Override\n+  public void delete(int reservationId) {\n+    ctx.delete(RESERVATION)\n+      .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n+      .execute();\n+\n+    log.debug(\"The reservation '{}' is deleted.\", reservationId);\n+  }\n+\n+  @Override\n+  public void accepted(int reservationId) {\n+    internalUpdateReservation(reservationId, ReservationStatus.ACCEPTED);\n+  }\n+\n+  @Override\n+  public void cancelled(int reservationId) {\n+    internalUpdateReservation(reservationId, ReservationStatus.CANCELLED);\n+  }\n+\n+  @Override\n+  public void used(DSLContext ctx, Select<Record1<Integer>> connectorPkSelect, String ocppIdTag,\n+                   int reservationId, int transactionId) {\n+    int count = ctx.update(RESERVATION)\n+      .set(RESERVATION.STATUS, ReservationStatus.USED.name())\n+      .set(RESERVATION.TRANSACTION_PK, transactionId)\n+      .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n+      .and(RESERVATION.ID_TAG.equal(ocppIdTag))\n+      .and(RESERVATION.CONNECTOR_PK.equal(connectorPkSelect))\n+      .and(RESERVATION.STATUS.eq(ReservationStatus.ACCEPTED.name()))\n+      .execute();\n+\n+    if (count != 1) {\n+      log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n+        \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n     }\n+  }\n \n-    @Override\n-    public void cancelled(int reservationId) {\n-        internalUpdateReservation(reservationId, ReservationStatus.CANCELLED);\n-    }\n+  // -------------------------------------------------------------------------\n+  // Private helpers\n+  // -------------------------------------------------------------------------\n \n+  private static class ReservationMapper implements\n+    RecordMapper<Record10<Integer, Integer, Integer, Integer, String,\n+      String, DateTime, DateTime, String, Integer>, Reservation> {\n     @Override\n-    public void used(DSLContext ctx, Select<Record1<Integer>> connectorPkSelect, String ocppIdTag,\n-                     int reservationId, int transactionId) {\n-        int count = ctx.update(RESERVATION)\n-                       .set(RESERVATION.STATUS, ReservationStatus.USED.name())\n-                       .set(RESERVATION.TRANSACTION_PK, transactionId)\n-                       .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n-                       .and(RESERVATION.ID_TAG.equal(ocppIdTag))\n-                       .and(RESERVATION.CONNECTOR_PK.equal(connectorPkSelect))\n-                       .and(RESERVATION.STATUS.eq(ReservationStatus.ACCEPTED.name()))\n-                       .execute();\n-\n-        if (count != 1) {\n-            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n-                    \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n-        }\n+    public Reservation map(Record10<Integer, Integer, Integer, Integer, String,\n+      String, DateTime, DateTime, String, Integer> r) {\n+      return Reservation.builder()\n+        .id(r.value1())\n+        .transactionId(r.value2())\n+        .ocppTagPk(r.value3())\n+        .chargeBoxPk(r.value4())\n+        .ocppIdTag(r.value5())\n+        .chargeBoxId(r.value6())\n+        .startDatetimeDT(r.value7())\n+        .startDatetime(DateTimeUtils.humanize(r.value7()))\n+        .expiryDatetimeDT(r.value8())\n+        .expiryDatetime(DateTimeUtils.humanize(r.value8()))\n+        .status(r.value9())\n+        .connectorId(r.value10())\n+        .build();\n     }\n-\n-    // -------------------------------------------------------------------------\n-    // Private helpers\n-    // -------------------------------------------------------------------------\n-\n-    private static class ReservationMapper implements\n-            RecordMapper<Record10<Integer, Integer, Integer, Integer, String,\n-                                  String, DateTime, DateTime, String, Integer>, Reservation> {\n-        @Override\n-        public Reservation map(Record10<Integer, Integer, Integer, Integer, String,\n-                                        String, DateTime, DateTime, String, Integer> r) {\n-            return Reservation.builder()\n-                              .id(r.value1())\n-                              .transactionId(r.value2())\n-                              .ocppTagPk(r.value3())\n-                              .chargeBoxPk(r.value4())\n-                              .ocppIdTag(r.value5())\n-                              .chargeBoxId(r.value6())\n-                              .startDatetimeDT(r.value7())\n-                              .startDatetime(DateTimeUtils.humanize(r.value7()))\n-                              .expiryDatetimeDT(r.value8())\n-                              .expiryDatetime(DateTimeUtils.humanize(r.value8()))\n-                              .status(r.value9())\n-                              .connectorId(r.value10())\n-                              .build();\n-        }\n-    }\n-\n-    private void internalUpdateReservation(int reservationId, ReservationStatus status) {\n-        try {\n-            ctx.update(RESERVATION)\n-               .set(RESERVATION.STATUS, status.name())\n-               .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n-               .execute();\n-        } catch (DataAccessException e) {\n-            log.error(\"Updating of reservationId '{}' to status '{}' FAILED.\", reservationId, status, e);\n-        }\n+  }\n+\n+  private void internalUpdateReservation(int reservationId, ReservationStatus status) {\n+    try {\n+      ctx.update(RESERVATION)\n+        .set(RESERVATION.STATUS, status.name())\n+        .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n+        .execute();\n+    } catch (DataAccessException e) {\n+      log.error(\"Updating of reservationId '{}' to status '{}' FAILED.\", reservationId, status, e);\n     }\n+  }\n+\n+  private void processType(SelectQuery selectQuery, ReservationQueryForm form) {\n+    switch (form.getPeriodType()) {\n+      case ACTIVE:\n+        selectQuery.addConditions(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()));\n+        break;\n+\n+      case FROM_TO:\n+        selectQuery.addConditions(\n+          RESERVATION.START_DATETIME.greaterOrEqual(form.getFrom().toDateTime()),\n+          RESERVATION.EXPIRY_DATETIME.lessOrEqual(form.getTo().toDateTime())\n+        );\n+        break;\n \n-    private void processType(SelectQuery selectQuery, ReservationQueryForm form) {\n-        switch (form.getPeriodType()) {\n-            case ACTIVE:\n-                selectQuery.addConditions(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()));\n-                break;\n-\n-            case FROM_TO:\n-                selectQuery.addConditions(\n-                        RESERVATION.START_DATETIME.greaterOrEqual(form.getFrom().toDateTime()),\n-                        RESERVATION.EXPIRY_DATETIME.lessOrEqual(form.getTo().toDateTime())\n-                );\n-                break;\n-\n-            default:\n-                throw new SteveException(\"Unknown enum type\");\n-        }\n+      default:\n+        throw new SteveException(\"Unknown enum type\");\n     }\n+  }\n \n-    /**\n-     * Throws exception, if there are rows whose date/time ranges overlap with the input\n-     */\n+  /**\n+   * Throws exception, if there are rows whose date/time ranges overlap with the input\n+   */\n //    private void isOverlapping(DateTime start, DateTime stop, String chargeBoxId) {\n //        try {\n //            int count = ctx.selectOne()\n",
            "diff_size": 258
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/144/ReservationRepositoryImpl.java\nindex 38100dec73b..b7041baf9ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/144/ReservationRepositoryImpl.java\n@@ -88,7 +88,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                   .where(RESERVATION.CONNECTOR_PK.in(DSL.select(CONNECTOR.CONNECTOR_PK)\n                                                         .from(CONNECTOR)\n                                                         .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))))\n-                  .and(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()))\n+.and(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()))\n                   .and(RESERVATION.STATUS.equal(ReservationStatus.ACCEPTED.name()))\n                   .fetch(RESERVATION.RESERVATION_PK);\n     }\n@@ -103,8 +103,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                    .from(CONNECTOR)\n                    .where(CONNECTOR.CHARGE_BOX_ID.equal(params.getChargeBoxId()))\n                    .and(CONNECTOR.CONNECTOR_ID.equal(params.getConnectorId()));\n-\n-        int reservationId = ctx.insertInto(RESERVATION)\n+int reservationId = ctx.insertInto(RESERVATION)\n                                .set(RESERVATION.CONNECTOR_PK, connectorPkQuery)\n                                .set(RESERVATION.ID_TAG, params.getIdTag())\n                                .set(RESERVATION.START_DATETIME, params.getStartTimestamp())\n@@ -138,9 +137,8 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n     }\n \n     @Override\n-    public void used(DSLContext ctx, Select<Record1<Integer>> connectorPkSelect, String ocppIdTag,\n-                     int reservationId, int transactionId) {\n-        int count = ctx.update(RESERVATION)\n+    public void used(DSLContext ctx, Select<Record1<Integer>> connectorPkSelect, String ocppIdTag, int reservationId, int transactionId) {\n+    int count = ctx.update(RESERVATION)\n                        .set(RESERVATION.STATUS, ReservationStatus.USED.name())\n                        .set(RESERVATION.TRANSACTION_PK, transactionId)\n                        .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n@@ -150,8 +148,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                        .execute();\n \n         if (count != 1) {\n-            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n-                    \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n+            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" + \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n         }\n     }\n \n@@ -160,9 +157,8 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n     // -------------------------------------------------------------------------\n \n     private static class ReservationMapper implements\n-            RecordMapper<Record10<Integer, Integer, Integer, Integer, String,\n-                                  String, DateTime, DateTime, String, Integer>, Reservation> {\n-        @Override\n+            RecordMapper<Record10<Integer, Integer, Integer, Integer, String, String, DateTime, DateTime, String, Integer>, Reservation> {\n+    @Override\n         public Reservation map(Record10<Integer, Integer, Integer, Integer, String,\n                                         String, DateTime, DateTime, String, Integer> r) {\n             return Reservation.builder()\n@@ -231,4 +227,4 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n //            log.error(\"Exception occurred\", e);\n //        }\n //    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 278).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/144/ReservationRepositoryImpl.java\nindex 38100dec73b..c4c7c714d95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/144/ReservationRepositoryImpl.java\n@@ -21,7 +21,6 @@ import org.jooq.exception.DataAccessException;\n import org.jooq.impl.DSL;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-\n import java.util.List;\n \n import static jooq.steve.db.tables.ChargeBox.CHARGE_BOX;\n@@ -33,12 +32,13 @@ import static jooq.steve.db.tables.Reservation.RESERVATION;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 14.08.2014\n  */\n+\n+\n @Slf4j\n @Repository\n public class ReservationRepositoryImpl implements ReservationRepository {\n \n     @Autowired private DSLContext ctx;\n-\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<Reservation> getReservations(ReservationQueryForm form) {\n@@ -47,19 +47,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n         selectQuery.addJoin(OCPP_TAG, OCPP_TAG.ID_TAG.eq(RESERVATION.ID_TAG));\n         selectQuery.addJoin(CONNECTOR, CONNECTOR.CONNECTOR_PK.eq(RESERVATION.CONNECTOR_PK));\n         selectQuery.addJoin(CHARGE_BOX, CONNECTOR.CHARGE_BOX_ID.eq(CHARGE_BOX.CHARGE_BOX_ID));\n-\n-        selectQuery.addSelect(\n-                RESERVATION.RESERVATION_PK,\n-                RESERVATION.TRANSACTION_PK,\n-                OCPP_TAG.OCPP_TAG_PK,\n-                CHARGE_BOX.CHARGE_BOX_PK,\n-                OCPP_TAG.ID_TAG,\n-                CHARGE_BOX.CHARGE_BOX_ID,\n-                RESERVATION.START_DATETIME,\n-                RESERVATION.EXPIRY_DATETIME,\n-                RESERVATION.STATUS,\n-                CONNECTOR.CONNECTOR_ID\n-        );\n+        selectQuery.addSelect(RESERVATION.RESERVATION_PK, RESERVATION.TRANSACTION_PK, OCPP_TAG.OCPP_TAG_PK, CHARGE_BOX.CHARGE_BOX_PK, OCPP_TAG.ID_TAG, CHARGE_BOX.CHARGE_BOX_ID, RESERVATION.START_DATETIME, RESERVATION.EXPIRY_DATETIME, RESERVATION.STATUS, CONNECTOR.CONNECTOR_ID);\n \n         if (form.isChargeBoxIdSet()) {\n             selectQuery.addConditions(CHARGE_BOX.CHARGE_BOX_ID.eq(form.getChargeBoxId()));\n@@ -70,50 +58,47 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n         }\n \n         if (form.isStatusSet()) {\n-            selectQuery.addConditions(RESERVATION.STATUS.eq(form.getStatus().name()));\n+            selectQuery.addConditions(RESERVATION.STATUS.eq(form.getStatus()\n+                .name()));\n         }\n \n         processType(selectQuery, form);\n \n         // Default order\n         selectQuery.addOrderBy(RESERVATION.EXPIRY_DATETIME.asc());\n-\n-        return selectQuery.fetch().map(new ReservationMapper());\n+        return selectQuery.fetch()\n+            .map(new ReservationMapper());\n     }\n \n     @Override\n     public List<Integer> getActiveReservationIds(String chargeBoxId) {\n         return ctx.select(RESERVATION.RESERVATION_PK)\n-                  .from(RESERVATION)\n-                  .where(RESERVATION.CONNECTOR_PK.in(DSL.select(CONNECTOR.CONNECTOR_PK)\n-                                                        .from(CONNECTOR)\n-                                                        .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))))\n-                  .and(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()))\n-                  .and(RESERVATION.STATUS.equal(ReservationStatus.ACCEPTED.name()))\n-                  .fetch(RESERVATION.RESERVATION_PK);\n+            .from(RESERVATION)\n+            .where(RESERVATION.CONNECTOR_PK.in(DSL.select(CONNECTOR.CONNECTOR_PK)\n+                .from(CONNECTOR)\n+                .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))))\n+            .and(RESERVATION.EXPIRY_DATETIME.greaterThan(CustomDSL.utcTimestamp()))\n+            .and(RESERVATION.STATUS.equal(ReservationStatus.ACCEPTED.name()))\n+            .fetch(RESERVATION.RESERVATION_PK);\n     }\n \n     @Override\n     public int insert(InsertReservationParams params) {\n         // Check overlapping\n         //isOverlapping(startTimestamp, expiryTimestamp, chargeBoxId);\n-\n-        SelectConditionStep<Record1<Integer>> connectorPkQuery =\n-                DSL.select(CONNECTOR.CONNECTOR_PK)\n-                   .from(CONNECTOR)\n-                   .where(CONNECTOR.CHARGE_BOX_ID.equal(params.getChargeBoxId()))\n-                   .and(CONNECTOR.CONNECTOR_ID.equal(params.getConnectorId()));\n-\n+        SelectConditionStep<Record1<Integer>> connectorPkQuery = DSL.select(CONNECTOR.CONNECTOR_PK)\n+            .from(CONNECTOR)\n+            .where(CONNECTOR.CHARGE_BOX_ID.equal(params.getChargeBoxId()))\n+            .and(CONNECTOR.CONNECTOR_ID.equal(params.getConnectorId()));\n         int reservationId = ctx.insertInto(RESERVATION)\n-                               .set(RESERVATION.CONNECTOR_PK, connectorPkQuery)\n-                               .set(RESERVATION.ID_TAG, params.getIdTag())\n-                               .set(RESERVATION.START_DATETIME, params.getStartTimestamp())\n-                               .set(RESERVATION.EXPIRY_DATETIME, params.getExpiryTimestamp())\n-                               .set(RESERVATION.STATUS, ReservationStatus.WAITING.name())\n-                               .returning(RESERVATION.RESERVATION_PK)\n-                               .fetchOne()\n-                               .getReservationPk();\n-\n+            .set(RESERVATION.CONNECTOR_PK, connectorPkQuery)\n+            .set(RESERVATION.ID_TAG, params.getIdTag())\n+            .set(RESERVATION.START_DATETIME, params.getStartTimestamp())\n+            .set(RESERVATION.EXPIRY_DATETIME, params.getExpiryTimestamp())\n+            .set(RESERVATION.STATUS, ReservationStatus.WAITING.name())\n+            .returning(RESERVATION.RESERVATION_PK)\n+            .fetchOne()\n+            .getReservationPk();\n         log.debug(\"A new reservation '{}' is inserted.\", reservationId);\n         return reservationId;\n     }\n@@ -121,9 +106,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n     @Override\n     public void delete(int reservationId) {\n         ctx.delete(RESERVATION)\n-           .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n-           .execute();\n-\n+           .where(RESERVATION.RESERVATION_PK.equal(reservationId)).execute();\n         log.debug(\"The reservation '{}' is deleted.\", reservationId);\n     }\n \n@@ -138,20 +121,20 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n     }\n \n     @Override\n-    public void used(DSLContext ctx, Select<Record1<Integer>> connectorPkSelect, String ocppIdTag,\n+    public void used(DSLContext ctx,\n+                     Select<Record1<Integer>> connectorPkSelect,\n+                     String ocppIdTag,\n                      int reservationId, int transactionId) {\n         int count = ctx.update(RESERVATION)\n-                       .set(RESERVATION.STATUS, ReservationStatus.USED.name())\n-                       .set(RESERVATION.TRANSACTION_PK, transactionId)\n-                       .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n-                       .and(RESERVATION.ID_TAG.equal(ocppIdTag))\n-                       .and(RESERVATION.CONNECTOR_PK.equal(connectorPkSelect))\n-                       .and(RESERVATION.STATUS.eq(ReservationStatus.ACCEPTED.name()))\n-                       .execute();\n-\n+            .set(RESERVATION.STATUS, ReservationStatus.USED.name())\n+            .set(RESERVATION.TRANSACTION_PK, transactionId)\n+            .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n+            .and(RESERVATION.ID_TAG.equal(ocppIdTag))\n+            .and(RESERVATION.CONNECTOR_PK.equal(connectorPkSelect))\n+            .and(RESERVATION.STATUS.eq(ReservationStatus.ACCEPTED.name()))\n+            .execute();\n         if (count != 1) {\n-            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n-                    \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n+            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" + \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n         }\n     }\n \n@@ -159,35 +142,32 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n     // Private helpers\n     // -------------------------------------------------------------------------\n \n-    private static class ReservationMapper implements\n-            RecordMapper<Record10<Integer, Integer, Integer, Integer, String,\n-                                  String, DateTime, DateTime, String, Integer>, Reservation> {\n+    private static class ReservationMapper implements RecordMapper<Record10<Integer, Integer, Integer, Integer, String, String, DateTime, DateTime, String, Integer>, Reservation> {\n+\n         @Override\n-        public Reservation map(Record10<Integer, Integer, Integer, Integer, String,\n-                                        String, DateTime, DateTime, String, Integer> r) {\n+        public Reservation map(Record10<Integer, Integer, Integer, Integer, String, String, DateTime, DateTime, String, Integer> r) {\n             return Reservation.builder()\n-                              .id(r.value1())\n-                              .transactionId(r.value2())\n-                              .ocppTagPk(r.value3())\n-                              .chargeBoxPk(r.value4())\n-                              .ocppIdTag(r.value5())\n-                              .chargeBoxId(r.value6())\n-                              .startDatetimeDT(r.value7())\n-                              .startDatetime(DateTimeUtils.humanize(r.value7()))\n-                              .expiryDatetimeDT(r.value8())\n-                              .expiryDatetime(DateTimeUtils.humanize(r.value8()))\n-                              .status(r.value9())\n-                              .connectorId(r.value10())\n-                              .build();\n+                .id(r.value1())\n+                .transactionId(r.value2())\n+                .ocppTagPk(r.value3())\n+                .chargeBoxPk(r.value4())\n+                .ocppIdTag(r.value5())\n+                .chargeBoxId(r.value6())\n+                .startDatetimeDT(r.value7())\n+                .startDatetime(DateTimeUtils.humanize(r.value7()))\n+                .expiryDatetimeDT(r.value8())\n+                .expiryDatetime(DateTimeUtils.humanize(r.value8()))\n+                .status(r.value9())\n+                .connectorId(r.value10())\n+                .build();\n         }\n     }\n \n     private void internalUpdateReservation(int reservationId, ReservationStatus status) {\n         try {\n             ctx.update(RESERVATION)\n-               .set(RESERVATION.STATUS, status.name())\n-               .where(RESERVATION.RESERVATION_PK.equal(reservationId))\n-               .execute();\n+.set(RESERVATION.STATUS, status.name())\n+.where(RESERVATION.RESERVATION_PK.equal(reservationId)).execute();\n         } catch (DataAccessException e) {\n             log.error(\"Updating of reservationId '{}' to status '{}' FAILED.\", reservationId, status, e);\n         }\n@@ -200,10 +180,9 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                 break;\n \n             case FROM_TO:\n-                selectQuery.addConditions(\n-                        RESERVATION.START_DATETIME.greaterOrEqual(form.getFrom().toDateTime()),\n-                        RESERVATION.EXPIRY_DATETIME.lessOrEqual(form.getTo().toDateTime())\n-                );\n+                selectQuery.addConditions(RESERVATION.START_DATETIME.greaterOrEqual(form.getFrom()\n+                    .toDateTime()), RESERVATION.EXPIRY_DATETIME.lessOrEqual(form.getTo()\n+                        .toDateTime()));\n                 break;\n \n             default:\n@@ -231,4 +210,4 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n //            log.error(\"Exception occurred\", e);\n //        }\n //    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "153",
                    "column": "115",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "115",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/144/ReservationRepositoryImpl.java\nindex 38100dec73b..59ae1b0e5dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/144/ReservationRepositoryImpl.java\n@@ -150,7 +150,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                        .execute();\n \n         if (count != 1) {\n-            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n+            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \"+\n                     \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "153",
                    "column": "115",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "column": "115",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/144/ReservationRepositoryImpl.java\nindex 38100dec73b..59ae1b0e5dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/144/ReservationRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/144/ReservationRepositoryImpl.java\n@@ -150,7 +150,7 @@ public class ReservationRepositoryImpl implements ReservationRepository {\n                        .execute();\n \n         if (count != 1) {\n-            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \" +\n+            log.warn(\"Could not mark the reservation '{}' as used: Problems occurred due to sent reservation id, \"+\n                     \"charge box connector, user id tag or the reservation was used already.\", reservationId);\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}