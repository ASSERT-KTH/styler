{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1834",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1834/SocketAddress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1834/SocketAddress.java\nindex 270f38d0b58..b95b068eefa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1834/SocketAddress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1834/SocketAddress.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.net.InetSocketAddress;\n@@ -32,78 +33,78 @@ import static org.neo4j.helpers.collection.Iterators.asSet;\n  */\n public class SocketAddress\n {\n-    private static final Collection<String> WILDCARDS = asSet( \"0.0.0.0\", \"::\" );\n+  private static final Collection<String> WILDCARDS = asSet(\"0.0.0.0\", \"::\");\n \n-    private final String hostname;\n-    private final int port;\n+  private final String hostname;\n+  private final int port;\n \n-    public SocketAddress( String hostname, int port )\n+  public SocketAddress(String hostname, int port)\n+  {\n+    if (hostname == null)\n     {\n-        if ( hostname == null )\n-        {\n-            throw new IllegalArgumentException( \"hostname cannot be null\" );\n-        }\n-        if ( hostname.contains( \"[\" ) || hostname.contains( \"]\" ) )\n-        {\n-            throw new IllegalArgumentException( \"hostname cannot contain '[' or ']'\" );\n-        }\n-\n-        this.hostname = hostname;\n-        this.port = port;\n+      throw new IllegalArgumentException(\"hostname cannot be null\");\n     }\n-\n-    /**\n-     * @return hostname or IP address; we don't care.\n-     */\n-    public String getHostname()\n+    if (hostname.contains(\"[\") || hostname.contains(\"]\"))\n     {\n-        return hostname;\n+      throw new IllegalArgumentException(\"hostname cannot contain '[' or ']'\");\n     }\n \n-    public int getPort()\n-    {\n-        return port;\n-    }\n+    this.hostname = hostname;\n+    this.port = port;\n+  }\n \n-    public InetSocketAddress socketAddress()\n-    {\n-        return new InetSocketAddress( hostname, port );\n-    }\n+  /**\n+   * @return hostname or IP address; we don't care.\n+   */\n+  public String getHostname()\n+  {\n+    return hostname;\n+  }\n \n-    public boolean isWildcard()\n-    {\n-        return WILDCARDS.contains( hostname );\n-    }\n+  public int getPort()\n+  {\n+    return port;\n+  }\n \n-    public boolean isIPv6()\n-    {\n-        return hostname.contains( \":\" );\n-    }\n+  public InetSocketAddress socketAddress()\n+  {\n+    return new InetSocketAddress(hostname, port);\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( isIPv6() ? \"[%s]:%s\" : \"%s:%s\", hostname, port );\n-    }\n+  public boolean isWildcard()\n+  {\n+    return WILDCARDS.contains(hostname);\n+  }\n \n-    @Override\n-    public boolean equals( Object o )\n+  public boolean isIPv6()\n+  {\n+    return hostname.contains(\":\");\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(isIPv6() ? \"[%s]:%s\" : \"%s:%s\", hostname, port);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        SocketAddress that = (SocketAddress) o;\n-        return port == that.port && Objects.equals( hostname, that.hostname );\n+      return true;\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return Objects.hash( hostname, port );\n+      return false;\n     }\n+    SocketAddress that = (SocketAddress) o;\n+    return port == that.port && Objects.equals(hostname, that.hostname);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(hostname, port);\n+  }\n }\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1834/SocketAddress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1834/SocketAddress.java\nindex 270f38d0b58..3a111fba10c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1834/SocketAddress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1834/SocketAddress.java\n@@ -43,7 +43,8 @@ public class SocketAddress\n         {\n             throw new IllegalArgumentException( \"hostname cannot be null\" );\n         }\n-        if ( hostname.contains( \"[\" ) || hostname.contains( \"]\" ) )\n+\n+if ( hostname.contains( \"[\" ) || hostname.contains( \"]\" ) )\n         {\n             throw new IllegalArgumentException( \"hostname cannot contain '[' or ']'\" );\n         }\n@@ -93,11 +94,13 @@ public class SocketAddress\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        SocketAddress that = (SocketAddress) o;\n+\n+SocketAddress that = (SocketAddress) o;\n         return port == that.port && Objects.equals( hostname, that.hostname );\n     }\n \n@@ -106,4 +109,4 @@ public class SocketAddress\n     {\n         return Objects.hash( hostname, port );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}