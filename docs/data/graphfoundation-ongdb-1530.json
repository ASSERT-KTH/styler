{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1530",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1530/GBPTreeLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1530/GBPTreeLock.java\nindex 1325e719566..53440816b90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1530/GBPTreeLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1530/GBPTreeLock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.concurrent.TimeUnit;\n@@ -26,94 +27,94 @@ import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n \n class GBPTreeLock\n {\n-    private static final long stateOffset = UnsafeUtil.getFieldOffset( GBPTreeLock.class, \"state\" );\n-    private static final long writerLockBit = 0x00000000_00000001L;\n-    private static final long cleanerLockBit = 0x00000000_00000002L;\n-    private volatile long state;\n+  private static final long stateOffset = UnsafeUtil.getFieldOffset(GBPTreeLock.class, \"state\");\n+  private static final long writerLockBit = 0x00000000_00000001L;\n+  private static final long cleanerLockBit = 0x00000000_00000002L;\n+  private volatile long state;\n \n-    // Used for testing\n-    GBPTreeLock copy()\n-    {\n-        GBPTreeLock copy = new GBPTreeLock();\n-        copy.state = state;\n-        return copy;\n-    }\n+  // Used for testing\n+  GBPTreeLock copy()\n+  {\n+    GBPTreeLock copy = new GBPTreeLock();\n+    copy.state = state;\n+    return copy;\n+  }\n \n-    void writerLock()\n-    {\n-        doLock( writerLockBit );\n-    }\n+  void writerLock()\n+  {\n+    doLock(writerLockBit);\n+  }\n \n-    void writerUnlock()\n-    {\n-        doUnlock( writerLockBit );\n-    }\n+  void writerUnlock()\n+  {\n+    doUnlock(writerLockBit);\n+  }\n \n-    void cleanerLock()\n-    {\n-        doLock( cleanerLockBit );\n-    }\n+  void cleanerLock()\n+  {\n+    doLock(cleanerLockBit);\n+  }\n \n-    void cleanerUnlock()\n-    {\n-        doUnlock( cleanerLockBit );\n-    }\n+  void cleanerUnlock()\n+  {\n+    doUnlock(cleanerLockBit);\n+  }\n \n-    void writerAndCleanerLock()\n-    {\n-        doLock( writerLockBit | cleanerLockBit );\n-    }\n+  void writerAndCleanerLock()\n+  {\n+    doLock(writerLockBit | cleanerLockBit);\n+  }\n \n-    void writerAndCleanerUnlock()\n-    {\n-        doUnlock( writerLockBit | cleanerLockBit );\n-    }\n+  void writerAndCleanerUnlock()\n+  {\n+    doUnlock(writerLockBit | cleanerLockBit);\n+  }\n \n-    private void doLock( long targetLockBit )\n+  private void doLock(long targetLockBit)\n+  {\n+    long currentState;\n+    long newState;\n+    do\n     {\n-        long currentState;\n-        long newState;\n-        do\n-        {\n-            currentState = state;\n-            while ( !canLock( currentState, targetLockBit ) )\n-            {\n-                // sleep\n-                sleep();\n-                currentState = state;\n-            }\n-            newState = currentState | targetLockBit;\n-        } while ( !UnsafeUtil.compareAndSwapLong( this, stateOffset, currentState, newState ) );\n-    }\n+      currentState = state;\n+      while (!canLock(currentState, targetLockBit))\n+      {\n+        // sleep\n+        sleep();\n+        currentState = state;\n+      }\n+      newState = currentState | targetLockBit;\n+    } while (!UnsafeUtil.compareAndSwapLong(this, stateOffset, currentState, newState));\n+  }\n \n-    private void doUnlock( long targetLockBit )\n+  private void doUnlock(long targetLockBit)\n+  {\n+    long currentState;\n+    long newState;\n+    do\n     {\n-        long currentState;\n-        long newState;\n-        do\n-        {\n-            currentState = state;\n-            if ( !canUnlock( currentState, targetLockBit) )\n-            {\n-                throw new IllegalStateException( \"Can not unlock lock that is already locked\" );\n-            }\n-            newState = currentState & ~targetLockBit;\n-        }\n-        while ( !UnsafeUtil.compareAndSwapLong( this, stateOffset, currentState, newState ) );\n+      currentState = state;\n+      if (!canUnlock(currentState, targetLockBit))\n+      {\n+        throw new IllegalStateException(\"Can not unlock lock that is already locked\");\n+      }\n+      newState = currentState & ~targetLockBit;\n     }\n+    while (!UnsafeUtil.compareAndSwapLong(this, stateOffset, currentState, newState));\n+  }\n \n-    private boolean canLock( long state, long targetLockBit )\n-    {\n-        return (state & targetLockBit) == 0;\n-    }\n+  private boolean canLock(long state, long targetLockBit)\n+  {\n+    return (state & targetLockBit) == 0;\n+  }\n \n-    private boolean canUnlock( long state, long targetLockBit )\n-    {\n-        return (state & targetLockBit) == targetLockBit;\n-    }\n+  private boolean canUnlock(long state, long targetLockBit)\n+  {\n+    return (state & targetLockBit) == targetLockBit;\n+  }\n \n-    private void sleep()\n-    {\n-        LockSupport.parkNanos( TimeUnit.MILLISECONDS.toNanos( 10 ) );\n-    }\n+  private void sleep()\n+  {\n+    LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(10));\n+  }\n }\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1530/GBPTreeLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1530/GBPTreeLock.java\nindex 1325e719566..1b5b7cd2385 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1530/GBPTreeLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1530/GBPTreeLock.java\n@@ -82,7 +82,8 @@ class GBPTreeLock\n                 sleep();\n                 currentState = state;\n             }\n-            newState = currentState | targetLockBit;\n+\n+newState = currentState | targetLockBit;\n         } while ( !UnsafeUtil.compareAndSwapLong( this, stateOffset, currentState, newState ) );\n     }\n \n@@ -97,23 +98,24 @@ class GBPTreeLock\n             {\n                 throw new IllegalStateException( \"Can not unlock lock that is already locked\" );\n             }\n-            newState = currentState & ~targetLockBit;\n+\n+newState = currentState & ~targetLockBit;\n         }\n         while ( !UnsafeUtil.compareAndSwapLong( this, stateOffset, currentState, newState ) );\n     }\n \n     private boolean canLock( long state, long targetLockBit )\n     {\n-        return (state & targetLockBit) == 0;\n+        return ( state & targetLockBit) == 0;\n     }\n \n     private boolean canUnlock( long state, long targetLockBit )\n     {\n-        return (state & targetLockBit) == targetLockBit;\n+        return ( state & targetLockBit) == targetLockBit;\n     }\n \n     private void sleep()\n     {\n         LockSupport.parkNanos( TimeUnit.MILLISECONDS.toNanos( 10 ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}