{
    "project_name": "intuit-Tank",
    "error_id": "82",
    "information": {
        "errors": [
            {
                "line": "127",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    public String extractContentType() {\n        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n    }\n\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/82/Response.java\nindex c5e645abd2f..00ef6e76df2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/82/Response.java\n@@ -124,7 +124,4 @@ public class Response {\n     }\n \n     public String extractContentType() {\n-        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n-    }\n-\n-}\n+        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");}}\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/82/Response.java\nindex c5e645abd2f..fa016640492 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/82/Response.java\n@@ -19,112 +19,110 @@ import org.apache.commons.lang3.builder.HashCodeBuilder;\n @XmlAccessorType(XmlAccessType.FIELD)\n public class Response {\n \n-    @XmlElement(name = \"firstLine\", namespace = Namespace.NAMESPACE_V1)\n-    private String firstLine;\n-\n-    @XmlElementWrapper(name = \"headers\", namespace = Namespace.NAMESPACE_V1)\n-    @XmlElement(name = \"header\", namespace = Namespace.NAMESPACE_V1)\n-    private List<Header> headers = new ArrayList<Header>();\n-\n-    @XmlElement(name = \"body\", namespace = Namespace.NAMESPACE_V1)\n-    private byte[] body;\n-\n-    /**\n-     * @return the firstLine\n-     */\n-    public String getFirstLine() {\n-        return firstLine;\n-    }\n-\n-    /**\n-     * @param firstLine\n-     *            the firstLine to set\n-     */\n-    public void setFirstLine(String firstLine) {\n-        this.firstLine = firstLine;\n-    }\n-\n-    public byte[] getBody() {\n-        return body;\n-    }\n-\n-    public void setBody(byte[] body) {\n-        this.body = body;\n+  @XmlElement(name = \"firstLine\", namespace = Namespace.NAMESPACE_V1)\n+  private String firstLine;\n+\n+  @XmlElementWrapper(name = \"headers\", namespace = Namespace.NAMESPACE_V1)\n+  @XmlElement(name = \"header\", namespace = Namespace.NAMESPACE_V1)\n+  private List<Header> headers = new ArrayList<Header>();\n+\n+  @XmlElement(name = \"body\", namespace = Namespace.NAMESPACE_V1)\n+  private byte[] body;\n+\n+  /**\n+   * @return the firstLine\n+   */\n+  public String getFirstLine() {\n+    return firstLine;\n+  }\n+\n+  /**\n+   * @param firstLine the firstLine to set\n+   */\n+  public void setFirstLine(String firstLine) {\n+    this.firstLine = firstLine;\n+  }\n+\n+  public byte[] getBody() {\n+    return body;\n+  }\n+\n+  public void setBody(byte[] body) {\n+    this.body = body;\n+  }\n+\n+  /**\n+   * @return\n+   */\n+  @XmlTransient\n+  public String getBodyAsString() {\n+    String ret = null;\n+    if (body != null) {\n+      try {\n+        ret = new String(body, \"UTF-8\");\n+      } catch (UnsupportedEncodingException e) {\n+        // swallow this should never occur.\n+      }\n     }\n-\n-    /**\n-     * \n-     * @return\n-     */\n-    @XmlTransient\n-    public String getBodyAsString() {\n-        String ret = null;\n-        if (body != null) {\n-            try {\n-                ret = new String(body, \"UTF-8\");\n-            } catch (UnsupportedEncodingException e) {\n-                // swallow this should never occur.\n-            }\n-        }\n-        return ret;\n+    return ret;\n+  }\n+\n+  /**\n+   * @return the headers\n+   */\n+  public List<Header> getHeaders() {\n+    return headers;\n+  }\n+\n+  /**\n+   * @param header the headers to set\n+   */\n+  public void addHeader(@Nonnull Header header) {\n+    this.headers.add(header);\n+  }\n+\n+  /**\n+   * @param key\n+   * @param value\n+   */\n+  public void addHeader(@Nonnull String key, @Nonnull String value) {\n+    this.headers.add(new Header(key, value));\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see java.lang.Object#hashCode()\n+   */\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(19, 25).append(headers).append(body).toHashCode();\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see java.lang.Object#equals(java.lang.Object)\n+   */\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (obj == null) {\n+      return false;\n     }\n-\n-    /**\n-     * @return the headers\n-     */\n-    public List<Header> getHeaders() {\n-        return headers;\n+    if (obj == this) {\n+      return true;\n     }\n-\n-    /**\n-     * @param header\n-     *            the headers to set\n-     */\n-    public void addHeader(@Nonnull Header header) {\n-        this.headers.add(header);\n+    if (obj.getClass() != getClass()) {\n+      return false;\n     }\n+    Response o = (Response) obj;\n \n-    /**\n-     * @param key\n-     * @param value\n-     */\n-    public void addHeader(@Nonnull String key, @Nonnull String value) {\n-        this.headers.add(new Header(key, value));\n-    }\n+    return new EqualsBuilder().append(o.getBody(), getBody()).append(o.getHeaders(), getHeaders()).isEquals();\n+  }\n \n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see java.lang.Object#hashCode()\n-     */\n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder(19, 25).append(headers).append(body).toHashCode();\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (obj == this) {\n-            return true;\n-        }\n-        if (obj.getClass() != getClass()) {\n-            return false;\n-        }\n-        Response o = (Response) obj;\n-\n-        return new EqualsBuilder().append(o.getBody(), getBody()).append(o.getHeaders(), getHeaders()).isEquals();\n-    }\n-\n-    public String extractContentType() {\n-        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n-    }\n+  public String extractContentType() {\n+    return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst()\n+      .map(Header::getValue).orElse(\"\");\n+  }\n \n }\n",
            "diff_size": 143
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/82/Response.java\nindex c5e645abd2f..cfa0557ef65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/82/Response.java\n@@ -127,4 +127,4 @@ public class Response {\n         return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/82/Response.java\nindex c5e645abd2f..4371b1436c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/82/Response.java\n@@ -1,9 +1,10 @@\n package com.intuit.tank.conversation;\n \n+\n+\n import java.io.UnsupportedEncodingException;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.annotation.Nonnull;\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n@@ -11,14 +12,12 @@ import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n-\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"response\", namespace = Namespace.NAMESPACE_V1)\n @XmlAccessorType(XmlAccessType.FIELD)\n public class Response {\n-\n     @XmlElement(name = \"firstLine\", namespace = Namespace.NAMESPACE_V1)\n     private String firstLine;\n \n@@ -32,6 +31,8 @@ public class Response {\n     /**\n      * @return the firstLine\n      */\n+\n+\n     public String getFirstLine() {\n         return firstLine;\n     }\n@@ -40,14 +41,18 @@ public class Response {\n      * @param firstLine\n      *            the firstLine to set\n      */\n+\n+\n     public void setFirstLine(String firstLine) {\n         this.firstLine = firstLine;\n     }\n \n+\n     public byte[] getBody() {\n         return body;\n     }\n \n+\n     public void setBody(byte[] body) {\n         this.body = body;\n     }\n@@ -56,6 +61,7 @@ public class Response {\n      * \n      * @return\n      */\n+\n     @XmlTransient\n     public String getBodyAsString() {\n         String ret = null;\n@@ -64,6 +70,7 @@ public class Response {\n                 ret = new String(body, \"UTF-8\");\n             } catch (UnsupportedEncodingException e) {\n                 // swallow this should never occur.\n+\n             }\n         }\n         return ret;\n@@ -72,6 +79,8 @@ public class Response {\n     /**\n      * @return the headers\n      */\n+\n+\n     public List<Header> getHeaders() {\n         return headers;\n     }\n@@ -80,6 +89,8 @@ public class Response {\n      * @param header\n      *            the headers to set\n      */\n+\n+\n     public void addHeader(@Nonnull Header header) {\n         this.headers.add(header);\n     }\n@@ -88,6 +99,8 @@ public class Response {\n      * @param key\n      * @param value\n      */\n+\n+\n     public void addHeader(@Nonnull String key, @Nonnull String value) {\n         this.headers.add(new Header(key, value));\n     }\n@@ -97,6 +110,7 @@ public class Response {\n      * \n      * @see java.lang.Object#hashCode()\n      */\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder(19, 25).append(headers).append(body).toHashCode();\n@@ -107,6 +121,7 @@ public class Response {\n      * \n      * @see java.lang.Object#equals(java.lang.Object)\n      */\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == null) {\n@@ -119,12 +134,12 @@ public class Response {\n             return false;\n         }\n         Response o = (Response) obj;\n-\n         return new EqualsBuilder().append(o.getBody(), getBody()).append(o.getHeaders(), getHeaders()).isEquals();\n     }\n \n+\n     public String extractContentType() {\n-        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n+        return headers.stream().filter(header-> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/82/Response.java\nindex c5e645abd2f..00ef6e76df2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/82/Response.java\n@@ -124,7 +124,4 @@ public class Response {\n     }\n \n     public String extractContentType() {\n-        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n-    }\n-\n-}\n+        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");}}\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "128",
                    "column": "9",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "128",
                    "column": "45",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/82/Response.java\nindex c5e645abd2f..df0f668b857 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/82/Response.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/82/Response.java\n@@ -124,7 +124,9 @@ public class Response {\n     }\n \n     public String extractContentType() {\n-        return headers.stream().filter(header -> header.getKey().equalsIgnoreCase(\"content-type\")).findFirst().map(Header::getValue).orElse(\"\");\n+        return headers.stream().filter(header->header.getKey()\n+        . equalsIgnoreCase(\"content-type\")) . findFirst().map(Header::\n+    getValue).orElse(\"\");\n     }\n \n }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}