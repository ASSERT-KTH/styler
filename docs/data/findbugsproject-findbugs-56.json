{
    "project_name": "findbugsproject-findbugs",
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "137",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        Mockito.when(mockRequest.getParameter(Matchers.<String>any())).thenAnswer(new Answer<String>() {\n            @Override\n\t\t\tpublic String answer(InvocationOnMock inv) throws Throwable {\n                String key = (String) inv.getArguments()[0];\n                return params.get(key);\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/56/AbstractFlybushServletTest.java\nindex abbbbd2ea85..52ffeefdf76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/56/AbstractFlybushServletTest.java\n@@ -134,7 +134,7 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n         Mockito.when(mockRequest.getRequestURI()).thenReturn(actualUri);\n         Mockito.when(mockRequest.getParameter(Matchers.<String>any())).thenAnswer(new Answer<String>() {\n             @Override\n-\t\t\tpublic String answer(InvocationOnMock inv) throws Throwable {\n+                    public String answer(InvocationOnMock inv) throws Throwable {\n                 String key = (String) inv.getArguments()[0];\n                 return params.get(key);\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/56/AbstractFlybushServletTest.java\nindex abbbbd2ea85..6c25e71e7b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/56/AbstractFlybushServletTest.java\n@@ -27,7 +27,7 @@ import com.google.common.collect.Maps;\n public abstract class AbstractFlybushServletTest<PersistenceHelper extends BasePersistenceHelper> extends TestCase {\n \n     protected static final long SAMPLE_TIMESTAMP = System.currentTimeMillis()\n-            - 3L*30*24*3600*1000;\n+        - 3L * 30 * 24 * 3600 * 1000;\n \n     protected HttpServletResponse mockResponse;\n \n@@ -63,9 +63,9 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n     // ========================= supporting methods\n     // ================================\n \n-    \n+\n     protected void initServletAndMocks() throws IOException, ServletException {\n-        \n+\n         servlet = createServlet();\n         servlet.setPersistenceHelper(persistenceHelper);\n         mockRequest = Mockito.mock(HttpServletRequest.class);\n@@ -122,19 +122,19 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n \n     protected void prepareRequestAndResponse(String requestUri, byte[] input) throws IOException {\n         int qpos = requestUri.indexOf('?');\n-        final Map<String,String> params = Maps.newHashMap();\n+        final Map<String, String> params = Maps.newHashMap();\n         String actualUri;\n         if (qpos == -1) {\n             actualUri = requestUri;\n         } else {\n             actualUri = requestUri.substring(0, qpos);\n-            String paramstr = requestUri.substring(qpos+1);\n+            String paramstr = requestUri.substring(qpos + 1);\n             parseParams(params, paramstr);\n         }\n         Mockito.when(mockRequest.getRequestURI()).thenReturn(actualUri);\n         Mockito.when(mockRequest.getParameter(Matchers.<String>any())).thenAnswer(new Answer<String>() {\n             @Override\n-\t\t\tpublic String answer(InvocationOnMock inv) throws Throwable {\n+            public String answer(InvocationOnMock inv) throws Throwable {\n                 String key = (String) inv.getArguments()[0];\n                 return params.get(key);\n             }\n@@ -166,5 +166,5 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n         return testHelper.getPersistenceManager();\n     }\n \n-   \n+\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/56/AbstractFlybushServletTest.java\nindex abbbbd2ea85..472ff150ea0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/56/AbstractFlybushServletTest.java\n@@ -6,28 +6,22 @@ import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.UnsupportedEncodingException;\n import java.util.Map;\n-\n import javax.jdo.PersistenceManager;\n import javax.servlet.ServletException;\n import javax.servlet.ServletInputStream;\n import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-\n import junit.framework.TestCase;\n-\n import org.junit.Assert;\n import org.mockito.Matchers;\n import org.mockito.Mockito;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n-\n import com.google.common.collect.Maps;\n \n public abstract class AbstractFlybushServletTest<PersistenceHelper extends BasePersistenceHelper> extends TestCase {\n-\n-    protected static final long SAMPLE_TIMESTAMP = System.currentTimeMillis()\n-            - 3L*30*24*3600*1000;\n+    protected static final long SAMPLE_TIMESTAMP = System.currentTimeMillis() - 3L * 30 * 24 * 3600 * 1000;\n \n     protected HttpServletResponse mockResponse;\n \n@@ -63,32 +57,28 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n     // ========================= supporting methods\n     // ================================\n \n-    \n     protected void initServletAndMocks() throws IOException, ServletException {\n-        \n         servlet = createServlet();\n         servlet.setPersistenceHelper(persistenceHelper);\n         mockRequest = Mockito.mock(HttpServletRequest.class);\n         mockResponse = Mockito.mock(HttpServletResponse.class);\n         outputCollector = new ByteArrayOutputStream();\n         ServletOutputStream servletOutputStream = new ServletOutputStream() {\n-            @Override\n-            public void write(int b) throws IOException {\n-                outputCollector.write(b);\n-            }\n-        };\n+                                @Override\n+                                public void write(int b) throws IOException {\n+                                    outputCollector.write(b);\n+                                }\n+                            };\n         Mockito.when(mockResponse.getOutputStream()).thenReturn(servletOutputStream);\n         Mockito.when(mockResponse.getWriter()).thenReturn(new PrintWriter(servletOutputStream, true));\n     }\n \n-\n     protected void executeGet(String requestUri) throws IOException, ServletException {\n         executeGet(servlet, requestUri);\n     }\n \n     protected void executeGet(AbstractFlybushServlet<PersistenceHelper> servlet, String requestUri) throws IOException, ServletException {\n         prepareRequestAndResponse(requestUri, null);\n-\n         servlet.doGet(mockRequest, mockResponse);\n     }\n \n@@ -96,9 +86,9 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n         executePost(servlet, requestUri, input);\n     }\n \n-    protected void executePost(AbstractFlybushServlet<PersistenceHelper> servlet, String requestUri, byte[] input) throws IOException {\n+    protected void executePost(AbstractFlybushServlet<PersistenceHelper> servlet,\n+        String requestUri, byte[] input) throws IOException {\n         prepareRequestAndResponse(requestUri, input);\n-\n         servlet.doPost(mockRequest, mockResponse);\n     }\n \n@@ -122,23 +112,23 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n \n     protected void prepareRequestAndResponse(String requestUri, byte[] input) throws IOException {\n         int qpos = requestUri.indexOf('?');\n-        final Map<String,String> params = Maps.newHashMap();\n+        final Map<String, String> params = Maps.newHashMap();\n         String actualUri;\n         if (qpos == -1) {\n             actualUri = requestUri;\n         } else {\n             actualUri = requestUri.substring(0, qpos);\n-            String paramstr = requestUri.substring(qpos+1);\n+            String paramstr = requestUri.substring(qpos + 1);\n             parseParams(params, paramstr);\n         }\n         Mockito.when(mockRequest.getRequestURI()).thenReturn(actualUri);\n-        Mockito.when(mockRequest.getParameter(Matchers.<String>any())).thenAnswer(new Answer<String>() {\n+        Mockito.when(mockRequest.getParameter(Matchers.<String> any())).thenAnswer(new Answer<String>() {\n             @Override\n-\t\t\tpublic String answer(InvocationOnMock inv) throws Throwable {\n+            public String answer(InvocationOnMock inv) throws Throwable {\n                 String key = (String) inv.getArguments()[0];\n                 return params.get(key);\n             }\n-        });\n+                                                                                   });\n         if (input != null) {\n             final ByteArrayInputStream inputStream = new ByteArrayInputStream(input);\n             Mockito.when(mockRequest.getInputStream()).thenReturn(new ServletInputStream() {\n@@ -150,6 +140,7 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n         }\n     }\n \n+\n     private void parseParams(Map<String, String> params, String paramstr) {\n         for (String pair : paramstr.split(\"&\")) {\n             int epos = pair.indexOf(\"=\");\n@@ -161,10 +152,7 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n         }\n     }\n \n-\n     protected PersistenceManager getPersistenceManager() {\n         return testHelper.getPersistenceManager();\n     }\n-\n-   \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/56/AbstractFlybushServletTest.java\nindex abbbbd2ea85..52ffeefdf76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/56/AbstractFlybushServletTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/56/AbstractFlybushServletTest.java\n@@ -134,7 +134,7 @@ public abstract class AbstractFlybushServletTest<PersistenceHelper extends BaseP\n         Mockito.when(mockRequest.getRequestURI()).thenReturn(actualUri);\n         Mockito.when(mockRequest.getParameter(Matchers.<String>any())).thenAnswer(new Answer<String>() {\n             @Override\n-\t\t\tpublic String answer(InvocationOnMock inv) throws Throwable {\n+                    public String answer(InvocationOnMock inv) throws Throwable {\n                 String key = (String) inv.getArguments()[0];\n                 return params.get(key);\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}