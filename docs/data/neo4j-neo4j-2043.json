{
    "project_name": "neo4j-neo4j",
    "error_id": "2043",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2043/ReadOnlyIndexPartition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2043/ReadOnlyIndexPartition.java\nindex f3f2178e931..5a9c5423ca3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2043/ReadOnlyIndexPartition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2043/ReadOnlyIndexPartition.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index.partition;\n \n import org.apache.lucene.index.IndexWriter;\n@@ -39,17 +40,17 @@ public class ReadOnlyIndexPartition extends AbstractIndexPartition\n {\n     private final SearcherManager searcherManager;\n \n-    ReadOnlyIndexPartition( Path partitionFolder, Directory directory ) throws IOException\n+    ReadOnlyIndexPartition(Path partitionFolder, Directory directory) throws IOException\n     {\n-        super( partitionFolder, directory );\n-        this.searcherManager = new SearcherManager( directory, new Neo4jSearcherFactory() );\n+        super(partitionFolder, directory);\n+        this.searcherManager = new SearcherManager(directory, new Neo4jSearcherFactory());\n     }\n \n     @Override\n     public IndexWriter getIndexWriter()\n     {\n-        throw new UnsupportedOperationException( \"Retrieving index writer from read only index partition is \" +\n-                                                 \"unsupported.\" );\n+        throw new UnsupportedOperationException(\"Retrieving index writer from read only index partition is \" +\n+          \"unsupported.\");\n     }\n \n     /**\n@@ -58,11 +59,11 @@ public class ReadOnlyIndexPartition extends AbstractIndexPartition\n     @Override\n     public PartitionSearcher acquireSearcher() throws IOException\n     {\n-        return new PartitionSearcher( searcherManager );\n+        return new PartitionSearcher(searcherManager);\n     }\n \n     /**\n-     *  Refresh partition. No-op in read only partition.\n+     * Refresh partition. No-op in read only partition.\n      *\n      * @throws IOException if refreshing fails.\n      */\n@@ -75,7 +76,7 @@ public class ReadOnlyIndexPartition extends AbstractIndexPartition\n     @Override\n     public void close() throws IOException\n     {\n-        IOUtils.closeAll( searcherManager, directory );\n+        IOUtils.closeAll(searcherManager, directory);\n     }\n \n     /**\n@@ -87,7 +88,7 @@ public class ReadOnlyIndexPartition extends AbstractIndexPartition\n     @Override\n     public ResourceIterator<Path> snapshot() throws IOException\n     {\n-        return LuceneIndexSnapshots.forIndex( partitionFolder, directory );\n+        return LuceneIndexSnapshots.forIndex(partitionFolder, directory);\n     }\n }\n \n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}