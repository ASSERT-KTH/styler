{
    "project_name": "wso2-attic-commons",
    "error_id": "216",
    "information": {
        "errors": [
            {
                "line": "42",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * The following features are implemented:\n * <ul>\n *   <li>{@link org.eclipse.wst.wsdl.binding.mime.internal.impl.MIMEMultipartRelatedImpl#getEMIMEPart <em>EMIME Part</em>}</li>\n * </ul>\n * </p>\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/216/MIMEMultipartRelatedImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/216/MIMEMultipartRelatedImpl.java\nindex 1854f2d1686..cf5c47ee598 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/216/MIMEMultipartRelatedImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/216/MIMEMultipartRelatedImpl.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsdl.binding.mime.internal.impl;\n \n \n@@ -45,8 +46,7 @@ import org.w3c.dom.Element;\n  *\n  * @generated\n  */\n-public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implements MIMEMultipartRelated\n-{\n+public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implements MIMEMultipartRelated {\n   /**\n    * This class is not intended to be serialized.\n    * serialVersionUID is assigned with 1L to avoid\n@@ -58,41 +58,41 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n    * The cached value of the '{@link #getEMIMEPart() <em>EMIME Part</em>}' containment reference list.\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n-   * @see #getEMIMEPart()\n+   *\n    * @generated\n    * @ordered\n+   * @see #getEMIMEPart()\n    */\n   protected EList eMIMEPart;\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  protected MIMEMultipartRelatedImpl()\n-  {\n+  protected MIMEMultipartRelatedImpl() {\n     super();\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  protected EClass eStaticClass()\n-  {\n+  protected EClass eStaticClass() {\n     return MIMEPackage.Literals.MIME_MULTIPART_RELATED;\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public EList getEMIMEPart()\n-  {\n-    if (eMIMEPart == null)\n-    {\n+  public EList getEMIMEPart() {\n+    if (eMIMEPart == null) {\n       eMIMEPart = new EObjectContainmentEList(MIMEPart.class, this, MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART);\n     }\n     return eMIMEPart;\n@@ -101,34 +101,33 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated NOT\n    */\n-  public void addMIMEPart(javax.wsdl.extensions.mime.MIMEPart mimePart)\n-  {\n+  public void addMIMEPart(javax.wsdl.extensions.mime.MIMEPart mimePart) {\n     getEMIMEPart().add(mimePart);\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated NOT\n    */\n-  public List getMIMEParts()\n-  {\n+  public List getMIMEParts() {\n     return getEMIMEPart();\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n-  {\n-    switch (featureID)\n-    {\n-      case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n-      return ((InternalEList)getEMIMEPart()).basicRemove(otherEnd, msgs);\n+  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {\n+    switch (featureID) {\n+    case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n+      return ((InternalEList) getEMIMEPart()).basicRemove(otherEnd, msgs);\n     }\n     return super.eInverseRemove(otherEnd, featureID, msgs);\n   }\n@@ -136,13 +135,12 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public Object eGet(int featureID, boolean resolve, boolean coreType)\n-  {\n-    switch (featureID)\n-    {\n-      case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n+  public Object eGet(int featureID, boolean resolve, boolean coreType) {\n+    switch (featureID) {\n+    case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n       return getEMIMEPart();\n     }\n     return super.eGet(featureID, resolve, coreType);\n@@ -151,15 +149,14 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void eSet(int featureID, Object newValue)\n-  {\n-    switch (featureID)\n-    {\n-      case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n+  public void eSet(int featureID, Object newValue) {\n+    switch (featureID) {\n+    case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n       getEMIMEPart().clear();\n-      getEMIMEPart().addAll((Collection)newValue);\n+      getEMIMEPart().addAll((Collection) newValue);\n       return;\n     }\n     super.eSet(featureID, newValue);\n@@ -168,13 +165,12 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void eUnset(int featureID)\n-  {\n-    switch (featureID)\n-    {\n-      case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n+  public void eUnset(int featureID) {\n+    switch (featureID) {\n+    case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n       getEMIMEPart().clear();\n       return;\n     }\n@@ -184,22 +180,19 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public boolean eIsSet(int featureID)\n-  {\n-    switch (featureID)\n-    {\n-      case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n+  public boolean eIsSet(int featureID) {\n+    switch (featureID) {\n+    case MIMEPackage.MIME_MULTIPART_RELATED__EMIME_PART:\n       return eMIMEPart != null && !eMIMEPart.isEmpty();\n     }\n     return super.eIsSet(featureID);\n   }\n \n-  public void handleUnreconciledElement(Element child, Collection remainingModelObjects)\n-  {\n-    if (MIMEConstants.PART_ELEMENT_TAG.equals(child.getLocalName()))\n-    {\n+  public void handleUnreconciledElement(Element child, Collection remainingModelObjects) {\n+    if (MIMEConstants.PART_ELEMENT_TAG.equals(child.getLocalName())) {\n       MIMEPart mimePart = MIMEFactory.eINSTANCE.createMIMEPart();\n       mimePart.setEnclosingDefinition(getEnclosingDefinition());\n       mimePart.setElement(child);\n@@ -207,28 +200,25 @@ public class MIMEMultipartRelatedImpl extends ExtensibilityElementImpl implement\n     }\n   }\n \n-  public QName getElementType()\n-  {\n-    if (elementType == null)\n+  public QName getElementType() {\n+    if (elementType == null) {\n       elementType = new QName(MIMEConstants.MIME_NAMESPACE_URI, MIMEConstants.MULTIPART_RELATED_ELEMENT_TAG);\n+    }\n     return elementType;\n   }\n \n   /* (non-Javadoc)\n    * @see org.eclipse.wst.wsdl.internal.impl.ExtensibilityElementImpl#createElement()\n    */\n-  public Element createElement()\n-  {\n+  public Element createElement() {\n     Element newElement = super.createElement();\n \n     Iterator iterator = getMIMEParts().iterator();\n-    while (iterator.hasNext())\n-    {\n+    while (iterator.hasNext()) {\n       Object obj = iterator.next();\n-      if (obj instanceof MIMEPart)\n-      {\n-        MIMEPart mimePart = (MIMEPart)obj;\n-        Element child = ((MIMEPartImpl)mimePart).createElement();\n+      if (obj instanceof MIMEPart) {\n+        MIMEPart mimePart = (MIMEPart) obj;\n+        Element child = ((MIMEPartImpl) mimePart).createElement();\n         newElement.appendChild(child);\n       }\n     }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}