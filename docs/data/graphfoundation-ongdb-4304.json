{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4304",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4304/ClassSourceWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4304/ClassSourceWriter.java\nindex 501ad62f972..01c1e93cbe4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4304/ClassSourceWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4304/ClassSourceWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.source;\n \n import java.lang.reflect.Modifier;\n@@ -32,152 +33,149 @@ import org.neo4j.codegen.TypeReference;\n \n class ClassSourceWriter implements ClassEmitter\n {\n-    private final StringBuilder target;\n-    final Configuration configuration;\n+  private final StringBuilder target;\n+  final Configuration configuration;\n \n-    ClassSourceWriter( StringBuilder target, Configuration configuration )\n-    {\n-        this.target = target;\n-        this.configuration = configuration;\n-    }\n+  ClassSourceWriter(StringBuilder target, Configuration configuration)\n+  {\n+    this.target = target;\n+    this.configuration = configuration;\n+  }\n+\n+  void declarePackage(TypeReference type)\n+  {\n+    append(\"package \").append(type.packageName()).append(\";\\n\");\n+  }\n+\n+  void javadoc(String javadoc)\n+  {\n+    append(\"/** \").append(javadoc).append(\" */\\n\");\n+  }\n \n-    void declarePackage( TypeReference type )\n+  void publicClass(TypeReference type)\n+  {\n+    append(\"public class \").append(type.name());\n+  }\n+\n+  void extendClass(TypeReference base)\n+  {\n+    append(\" extends \").append(base.fullName()).append(\"\\n\");\n+  }\n+\n+  void implement(TypeReference[] interfaces)\n+  {\n+    String prefix = \"    implements \";\n+    for (TypeReference iFace : interfaces)\n     {\n-        append( \"package \" ).append( type.packageName() ).append( \";\\n\" );\n+      append(prefix).append(iFace.fullName());\n+      prefix = \", \";\n     }\n-\n-    void javadoc( String javadoc )\n+    if (prefix.length() == 2)\n     {\n-        append( \"/** \" ).append( javadoc ).append( \" */\\n\" );\n+      append(\"\\n\");\n     }\n+  }\n+\n+  void begin()\n+  {\n+    append(\"{\\n\");\n+  }\n \n-    void publicClass( TypeReference type )\n+  @Override\n+  public MethodEmitter method(MethodDeclaration signature)\n+  {\n+    StringBuilder target = new StringBuilder();\n+    if (signature.isConstructor())\n     {\n-        append( \"public class \" ).append( type.name() );\n+      if (signature.isStatic())\n+      {\n+        target.append(\"    static\\n    {\\n\");\n+        return new MethodSourceWriter(target, this);\n+      } else\n+      {\n+        target.append(\"    \").append(Modifier.toString(signature.modifiers())).append(\" \");\n+        typeParameters(target, signature);\n+        target.append(signature.declaringClass().name());\n+      }\n+    } else\n+    {\n+      target.append(\"    \").append(Modifier.toString(signature.modifiers())).append(\" \");\n+      typeParameters(target, signature);\n+      target.append(signature.returnType().fullName()).append(\" \").append(signature.name());\n     }\n-\n-    void extendClass( TypeReference base )\n+    target.append(\"(\");\n+    String prefix = \" \";\n+    for (Parameter parameter : signature.parameters())\n     {\n-        append( \" extends \" ).append( base.fullName() ).append( \"\\n\" );\n+      target.append(prefix).append(parameter.type().fullName()).append(\" \").append(parameter.name());\n+      prefix = \", \";\n     }\n-\n-    void implement( TypeReference[] interfaces )\n+    if (prefix.length() > 1)\n     {\n-        String prefix = \"    implements \";\n-        for ( TypeReference iFace : interfaces )\n-        {\n-            append( prefix ).append( iFace.fullName() );\n-            prefix = \", \";\n-        }\n-        if ( prefix.length() == 2 )\n-        {\n-            append( \"\\n\" );\n-        }\n+      target.append(\" \");\n     }\n-\n-    void begin()\n+    target.append(')');\n+    String sep = \" throws \";\n+    for (TypeReference thrown : signature.throwsList())\n     {\n-        append( \"{\\n\" );\n+      target.append(sep).append(thrown.fullName());\n+      sep = \", \";\n     }\n+    target.append(\"\\n    {\\n\");\n+    return new MethodSourceWriter(target, this);\n+  }\n \n-    @Override\n-    public MethodEmitter method( MethodDeclaration signature )\n+  private static void typeParameters(StringBuilder target, MethodDeclaration method)\n+  {\n+    List<MethodDeclaration.TypeParameter> parameters = method.typeParameters();\n+    if (!parameters.isEmpty())\n     {\n-        StringBuilder target = new StringBuilder();\n-        if ( signature.isConstructor() )\n+      target.append('<');\n+      String sep = \"\";\n+      for (MethodDeclaration.TypeParameter parameter : parameters)\n+      {\n+        target.append(sep).append(parameter.name());\n+        TypeReference ext = parameter.extendsBound();\n+        TypeReference sup = parameter.superBound();\n+        if (ext != null)\n         {\n-            if ( signature.isStatic() )\n-            {\n-                target.append( \"    static\\n    {\\n\" );\n-                return new MethodSourceWriter( target, this );\n-            }\n-            else\n-            {\n-                target.append( \"    \" ).append( Modifier.toString( signature.modifiers() ) ).append( \" \" );\n-                typeParameters( target, signature );\n-                target.append( signature.declaringClass().name() );\n-            }\n-        }\n-        else\n+          target.append(\" extends \").append(ext.fullName());\n+        } else if (sup != null)\n         {\n-            target.append( \"    \" ).append( Modifier.toString( signature.modifiers() ) ).append( \" \" );\n-            typeParameters( target, signature );\n-            target.append( signature.returnType().fullName() ).append( \" \" ).append( signature.name() );\n+          target.append(\" super \").append(sup.fullName());\n         }\n-        target.append( \"(\" );\n-        String prefix = \" \";\n-        for ( Parameter parameter : signature.parameters() )\n-        {\n-            target.append( prefix ).append( parameter.type().fullName() ).append( \" \" ).append( parameter.name() );\n-            prefix = \", \";\n-        }\n-        if ( prefix.length() > 1 )\n-        {\n-            target.append( \" \" );\n-        }\n-        target.append( ')' );\n-        String sep = \" throws \";\n-        for ( TypeReference thrown : signature.throwsList() )\n-        {\n-            target.append( sep ).append( thrown.fullName() );\n-            sep = \", \";\n-        }\n-        target.append( \"\\n    {\\n\" );\n-        return new MethodSourceWriter( target, this );\n+        sep = \", \";\n+      }\n+      target.append(\"> \");\n     }\n+  }\n \n-    private static void typeParameters( StringBuilder target, MethodDeclaration method )\n-    {\n-        List<MethodDeclaration.TypeParameter> parameters = method.typeParameters();\n-        if ( !parameters.isEmpty() )\n-        {\n-            target.append( '<' );\n-            String sep = \"\";\n-            for ( MethodDeclaration.TypeParameter parameter : parameters )\n-            {\n-                target.append( sep ).append( parameter.name() );\n-                TypeReference ext = parameter.extendsBound();\n-                TypeReference sup = parameter.superBound();\n-                if ( ext != null )\n-                {\n-                    target.append( \" extends \" ).append( ext.fullName() );\n-                }\n-                else if ( sup != null )\n-                {\n-                    target.append( \" super \" ).append( sup.fullName() );\n-                }\n-                sep = \", \";\n-            }\n-            target.append( \"> \" );\n-        }\n-    }\n+  @Override\n+  public void done()\n+  {\n+    append(\"}\\n\");\n+  }\n \n-    @Override\n-    public void done()\n+  @Override\n+  public void field(FieldReference field, Expression value)\n+  {\n+    String modifiers = Modifier.toString(field.modifiers());\n+    append(\"    \").append(modifiers);\n+    if (!modifiers.isEmpty())\n     {\n-        append( \"}\\n\" );\n+      append(\" \");\n     }\n-\n-    @Override\n-    public void field( FieldReference field, Expression value )\n+    append(field.type().fullName()).append(' ').append(field.name());\n+    if (value != null)\n     {\n-        String modifiers = Modifier.toString( field.modifiers() );\n-        append( \"    \" ).append( modifiers );\n-        if ( !modifiers.isEmpty() )\n-        {\n-            append( \" \" );\n-        }\n-        append( field.type().fullName() ).append( ' ' ).append( field.name() );\n-        if ( value != null )\n-        {\n-            append( \" = \" );\n-            value.accept( new MethodSourceWriter( target, this ) );\n-        }\n-        append( \";\\n\" );\n+      append(\" = \");\n+      value.accept(new MethodSourceWriter(target, this));\n     }\n+    append(\";\\n\");\n+  }\n \n-    StringBuilder append( CharSequence chars )\n-    {\n-        return target.append( chars );\n-    }\n+  StringBuilder append(CharSequence chars)\n+  {\n+    return target.append(chars);\n+  }\n }\n",
            "diff_size": 191
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4304/ClassSourceWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4304/ClassSourceWriter.java\nindex 501ad62f972..154691b41ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4304/ClassSourceWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4304/ClassSourceWriter.java\n@@ -69,7 +69,8 @@ class ClassSourceWriter implements ClassEmitter\n             append( prefix ).append( iFace.fullName() );\n             prefix = \", \";\n         }\n-        if ( prefix.length() == 2 )\n+\n+if ( prefix.length() == 2 )\n         {\n             append( \"\\n\" );\n         }\n@@ -111,7 +112,8 @@ class ClassSourceWriter implements ClassEmitter\n             target.append( prefix ).append( parameter.type().fullName() ).append( \" \" ).append( parameter.name() );\n             prefix = \", \";\n         }\n-        if ( prefix.length() > 1 )\n+\n+if ( prefix.length() > 1 )\n         {\n             target.append( \" \" );\n         }\n@@ -146,7 +148,8 @@ class ClassSourceWriter implements ClassEmitter\n                 {\n                     target.append( \" super \" ).append( sup.fullName() );\n                 }\n-                sep = \", \";\n+\n+sep = \", \";\n             }\n             target.append( \"> \" );\n         }\n@@ -167,17 +170,19 @@ class ClassSourceWriter implements ClassEmitter\n         {\n             append( \" \" );\n         }\n-        append( field.type().fullName() ).append( ' ' ).append( field.name() );\n+\n+append( field.type().fullName() ).append( ' ' ).append( field.name() );\n         if ( value != null )\n         {\n             append( \" = \" );\n             value.accept( new MethodSourceWriter( target, this ) );\n         }\n-        append( \";\\n\" );\n+\n+append( \";\\n\" );\n     }\n \n     StringBuilder append( CharSequence chars )\n     {\n         return target.append( chars );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}