{
    "project_name": "neo4j-neo4j",
    "error_id": "1367",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1367/FieldInjections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1367/FieldInjections.java\nindex 47a9c88bd82..9a3d2bf2602 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1367/FieldInjections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1367/FieldInjections.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.impl;\n \n import java.lang.reflect.Field;\n@@ -39,89 +40,90 @@ class FieldInjections\n {\n     private final ComponentRegistry components;\n \n-    FieldInjections( ComponentRegistry components )\n+    FieldInjections(ComponentRegistry components)\n     {\n         this.components = components;\n     }\n \n     /**\n      * For each annotated field in the provided class, creates a `FieldSetter`.\n+     *\n      * @param cls The class where injection should happen.\n      * @return A list of `FieldSetters`\n      * @throws ProcedureException if the type of the injected field does not match what has been registered.\n      */\n-    List<FieldSetter> setters( Class<?> cls ) throws ProcedureException\n+    List<FieldSetter> setters(Class<?> cls) throws ProcedureException\n     {\n         List<FieldSetter> setters = new LinkedList<>();\n         Class<?> currentClass = cls;\n \n         do\n         {\n-            for ( Field field : currentClass.getDeclaredFields() )\n+            for (Field field : currentClass.getDeclaredFields())\n             {\n                 //ignore synthetic fields\n-                if ( field.isSynthetic() )\n+                if (field.isSynthetic())\n                 {\n                     continue;\n                 }\n-                if ( Modifier.isStatic( field.getModifiers() ) )\n+                if (Modifier.isStatic(field.getModifiers()))\n                 {\n-                    if ( field.isAnnotationPresent( Context.class ) )\n+                    if (field.isAnnotationPresent(Context.class))\n                     {\n-                        throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                                 \"The field `%s` in the class named `%s` is annotated as a @Context field,%n\" +\n-                                \"but it is static. @Context fields must be public, non-final and non-static,%n\" +\n-                                \"because they are reset each time a procedure is invoked.\",\n-                                field.getName(), cls.getSimpleName() );\n+                        throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+                          \"The field `%s` in the class named `%s` is annotated as a @Context field,%n\" +\n+                            \"but it is static. @Context fields must be public, non-final and non-static,%n\" +\n+                            \"because they are reset each time a procedure is invoked.\",\n+                          field.getName(), cls.getSimpleName());\n                     }\n                     continue;\n                 }\n \n-                assertValidForInjection( cls, field );\n-                setters.add( createInjector( cls, field ) );\n+                assertValidForInjection(cls, field);\n+                setters.add(createInjector(cls, field));\n             }\n         }\n-        while ( (currentClass = currentClass.getSuperclass()) != null );\n+        while ((currentClass = currentClass.getSuperclass()) != null);\n \n         return setters;\n     }\n \n-    private FieldSetter createInjector( Class<?> cls, Field field ) throws ProcedureException\n+    private FieldSetter createInjector(Class<?> cls, Field field) throws ProcedureException\n     {\n \n-        ThrowingFunction<org.neo4j.kernel.api.procedure.Context,?,ProcedureException> provider = components.providerFor( field.getType() );\n-        if ( provider == null )\n+        ThrowingFunction<org.neo4j.kernel.api.procedure.Context, ?, ProcedureException> provider = components.providerFor(field.getType());\n+        if (provider == null)\n         {\n-            throw new ComponentInjectionException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Unable to set up injection for procedure `%s`, the field `%s` \" +\n-                    \"has type `%s` which is not a known injectable component.\",\n-                    cls.getSimpleName(), field.getName(), field.getType() );\n+            throw new ComponentInjectionException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Unable to set up injection for procedure `%s`, the field `%s` \" +\n+                \"has type `%s` which is not a known injectable component.\",\n+              cls.getSimpleName(), field.getName(), field.getType());\n         }\n-        if ( !isPublic( field.getModifiers() ) )\n+        if (!isPublic(field.getModifiers()))\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Unable to set up injection for `%s`, failed to access field `%s\", cls.getSimpleName(),\n-                    field.getName() );\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Unable to set up injection for `%s`, failed to access field `%s\", cls.getSimpleName(),\n+              field.getName());\n         }\n \n-        return new FieldSetter( field, provider );\n+        return new FieldSetter(field, provider);\n     }\n \n-    private void assertValidForInjection( Class<?> cls, Field field ) throws ProcedureException\n+    private void assertValidForInjection(Class<?> cls, Field field) throws ProcedureException\n     {\n-        if ( !field.isAnnotationPresent( Context.class ) )\n+        if (!field.isAnnotationPresent(Context.class))\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Field `%s` on `%s` is not annotated as a @\" + Context.class.getSimpleName() +\n-                            \" and is not static. If you want to store state along with your procedure,\" +\n-                            \" please use a static field.\",\n-                    field.getName(), cls.getSimpleName() );\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Field `%s` on `%s` is not annotated as a @\" + Context.class.getSimpleName() +\n+                \" and is not static. If you want to store state along with your procedure,\" +\n+                \" please use a static field.\",\n+              field.getName(), cls.getSimpleName());\n         }\n \n-        if ( !isPublic( field.getModifiers() ) || Modifier.isFinal( field.getModifiers() ) )\n+        if (!isPublic(field.getModifiers()) || Modifier.isFinal(field.getModifiers()))\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                    \"Field `%s` on `%s` must be non-final and public.\", field.getName(), cls.getSimpleName() );\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Field `%s` on `%s` must be non-final and public.\", field.getName(), cls.getSimpleName());\n \n         }\n     }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1367/FieldInjections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1367/FieldInjections.java\nindex 47a9c88bd82..757ae9953e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1367/FieldInjections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1367/FieldInjections.java\n@@ -125,4 +125,4 @@ class FieldInjections\n \n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}