{
    "project_name": "codefollower-H2-Research",
    "error_id": "109",
    "information": {
        "errors": [
            {
                "line": "155",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     */\n    @SafeVarargs\n\tpublic static <K> ImmutableArray2<K> create(K... array) {\n        return new ImmutableArray2<K>(array, array.length);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/109/ImmutableArray2.java\nindex b595a393eb9..47a632d9fb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/109/ImmutableArray2.java\n@@ -152,7 +152,7 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray2<K> create(K... array) {\n+public static <K> ImmutableArray2<K> create(K... array) {\n         return new ImmutableArray2<K>(array, array.length);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/109/ImmutableArray2.java\nindex b595a393eb9..26d578e4007 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/109/ImmutableArray2.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.dev.util;\n \n import java.util.Arrays;\n@@ -18,202 +19,202 @@ import org.h2.mvstore.DataUtils;\n  */\n public final class ImmutableArray2<K> implements Iterable<K> {\n \n-    private static final ImmutableArray2<?> EMPTY = new ImmutableArray2<Object>(\n-            new Object[0], 0);\n-\n-    /**\n-     * The array.\n-     */\n-    private final K[] array;\n-    private final int length;\n-    private AtomicBoolean canExtend;\n-\n-    private ImmutableArray2(K[] array, int len) {\n-        this.array = array;\n-        this.length = len;\n+  private static final ImmutableArray2<?> EMPTY = new ImmutableArray2<Object>(\n+      new Object[0], 0);\n+\n+  /**\n+   * The array.\n+   */\n+  private final K[] array;\n+  private final int length;\n+  private AtomicBoolean canExtend;\n+\n+  private ImmutableArray2(K[] array, int len) {\n+    this.array = array;\n+    this.length = len;\n+  }\n+\n+  private ImmutableArray2(K[] array, int len, boolean canExtend) {\n+    this.array = array;\n+    this.length = len;\n+    if (canExtend) {\n+      this.canExtend = new AtomicBoolean(true);\n     }\n-\n-    private ImmutableArray2(K[] array, int len, boolean canExtend) {\n-        this.array = array;\n-        this.length = len;\n-        if (canExtend) {\n-            this.canExtend = new AtomicBoolean(true);\n-        }\n+  }\n+\n+  /**\n+   * Get the entry at this index.\n+   *\n+   * @param index the index\n+   * @return the entry\n+   */\n+  public K get(int index) {\n+    if (index >= length) {\n+      throw new IndexOutOfBoundsException();\n     }\n-\n-    /**\n-     * Get the entry at this index.\n-     *\n-     * @param index the index\n-     * @return the entry\n-     */\n-    public K get(int index) {\n-        if (index >= length) {\n-            throw new IndexOutOfBoundsException();\n+    return array[index];\n+  }\n+\n+  /**\n+   * Get the length.\n+   *\n+   * @return the length\n+   */\n+  public int length() {\n+    return length;\n+  }\n+\n+  /**\n+   * Set the entry at this index.\n+   *\n+   * @param index the index\n+   * @param obj   the object\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray2<K> set(int index, K obj) {\n+    K[] a2 = Arrays.copyOf(array, length);\n+    a2[index] = obj;\n+    return new ImmutableArray2<K>(a2, length);\n+  }\n+\n+  /**\n+   * Insert an entry at this index.\n+   *\n+   * @param index the index\n+   * @param obj   the object\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray2<K> insert(int index, K obj) {\n+    int len = length + 1;\n+    int newLen = len;\n+    boolean extendable;\n+    if (index == len - 1) {\n+      AtomicBoolean x = canExtend;\n+      if (x != null) {\n+        // can set it to null early - we anyway\n+        // reset the flag, so it is no longer useful\n+        canExtend = null;\n+        if (array.length > index && x.getAndSet(false)) {\n+          array[index] = obj;\n+          return new ImmutableArray2<K>(array, len, true);\n         }\n-        return array[index];\n-    }\n-\n-    /**\n-     * Get the length.\n-     *\n-     * @return the length\n-     */\n-    public int length() {\n-        return length;\n+      }\n+      extendable = true;\n+      newLen = len + 4;\n+    } else {\n+      extendable = false;\n     }\n-\n-    /**\n-     * Set the entry at this index.\n-     *\n-     * @param index the index\n-     * @param obj the object\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray2<K> set(int index, K obj) {\n-        K[] a2 = Arrays.copyOf(array, length);\n-        a2[index] = obj;\n-        return new ImmutableArray2<K>(a2, length);\n-    }\n-\n-    /**\n-     * Insert an entry at this index.\n-     *\n-     * @param index the index\n-     * @param obj the object\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray2<K> insert(int index, K obj) {\n-        int len = length + 1;\n-        int newLen = len;\n-        boolean extendable;\n-        if (index == len - 1) {\n-            AtomicBoolean x = canExtend;\n-            if (x != null) {\n-                // can set it to null early - we anyway\n-                // reset the flag, so it is no longer useful\n-                canExtend = null;\n-                if (array.length > index && x.getAndSet(false)) {\n-                    array[index] = obj;\n-                    return new ImmutableArray2<K>(array, len, true);\n-                }\n-            }\n-            extendable = true;\n-            newLen = len + 4;\n-        } else {\n-            extendable = false;\n-        }\n-        @SuppressWarnings(\"unchecked\")\n-        K[] a2 = (K[]) new Object[newLen];\n-        DataUtils.copyWithGap(array, a2, length, index);\n-        a2[index] = obj;\n-        return new ImmutableArray2<K>(a2, len, extendable);\n-    }\n-\n-    /**\n-     * Remove the entry at this index.\n-     *\n-     * @param index the index\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray2<K> remove(int index) {\n-        int len = length - 1;\n-        if (index == len) {\n-            return new ImmutableArray2<K>(array, len);\n-        }\n-        @SuppressWarnings(\"unchecked\")\n-        K[] a2 = (K[]) new Object[len];\n-        DataUtils.copyExcept(array, a2, length, index);\n-        return new ImmutableArray2<K>(a2, len);\n-    }\n-\n-    /**\n-     * Get a sub-array.\n-     *\n-     * @param fromIndex the index of the first entry\n-     * @param toIndex the end index, plus one\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray2<K> subArray(int fromIndex, int toIndex) {\n-        int len = toIndex - fromIndex;\n-        if (fromIndex == 0) {\n-            return new ImmutableArray2<K>(array, len);\n-        }\n-        @SuppressWarnings(\"unchecked\")\n-        K[] a2 = (K[]) new Object[len];\n-        System.arraycopy(array, fromIndex, a2, 0, toIndex - fromIndex);\n-        return new ImmutableArray2<K>(a2, len);\n-    }\n-\n-    /**\n-     * Create an immutable array.\n-     *\n-     * @param array the data\n-     * @return the new immutable array\n-     */\n-    @SafeVarargs\n-\tpublic static <K> ImmutableArray2<K> create(K... array) {\n-        return new ImmutableArray2<K>(array, array.length);\n-    }\n-\n-    /**\n-     * Get the data.\n-     *\n-     * @return the data\n-     */\n-    public K[] array() {\n-        return array;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder buff = new StringBuilder();\n-        for (K obj : this) {\n-            buff.append(' ').append(obj);\n-        }\n-        return buff.toString();\n+    @SuppressWarnings(\"unchecked\")\n+    K[] a2 = (K[]) new Object[newLen];\n+    DataUtils.copyWithGap(array, a2, length, index);\n+    a2[index] = obj;\n+    return new ImmutableArray2<K>(a2, len, extendable);\n+  }\n+\n+  /**\n+   * Remove the entry at this index.\n+   *\n+   * @param index the index\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray2<K> remove(int index) {\n+    int len = length - 1;\n+    if (index == len) {\n+      return new ImmutableArray2<K>(array, len);\n     }\n-\n-    /**\n-     * Get an empty immutable array.\n-     *\n-     * @param <K> the key type\n-     * @return the array\n-     */\n     @SuppressWarnings(\"unchecked\")\n-    public static <K> ImmutableArray2<K> empty() {\n-        return (ImmutableArray2<K>) EMPTY;\n+    K[] a2 = (K[]) new Object[len];\n+    DataUtils.copyExcept(array, a2, length, index);\n+    return new ImmutableArray2<K>(a2, len);\n+  }\n+\n+  /**\n+   * Get a sub-array.\n+   *\n+   * @param fromIndex the index of the first entry\n+   * @param toIndex   the end index, plus one\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray2<K> subArray(int fromIndex, int toIndex) {\n+    int len = toIndex - fromIndex;\n+    if (fromIndex == 0) {\n+      return new ImmutableArray2<K>(array, len);\n     }\n-\n-    /**\n-     * Get an iterator over all entries.\n-     *\n-     * @return the iterator\n-     */\n-    @Override\n-    public Iterator<K> iterator() {\n-        return new Iterator<K>() {\n-\n-            ImmutableArray2<K> a = ImmutableArray2.this;\n-            int index;\n-\n-            @Override\n-            public boolean hasNext() {\n-                return index < a.length();\n-            }\n-\n-            @Override\n-            public K next() {\n-                return a.get(index++);\n-            }\n-\n-            @Override\n-            public void remove() {\n-                throw DataUtils.newUnsupportedOperationException(\"remove\");\n-            }\n-\n-        };\n+    @SuppressWarnings(\"unchecked\")\n+    K[] a2 = (K[]) new Object[len];\n+    System.arraycopy(array, fromIndex, a2, 0, toIndex - fromIndex);\n+    return new ImmutableArray2<K>(a2, len);\n+  }\n+\n+  /**\n+   * Create an immutable array.\n+   *\n+   * @param array the data\n+   * @return the new immutable array\n+   */\n+  @SafeVarargs\n+  public static <K> ImmutableArray2<K> create(K... array) {\n+    return new ImmutableArray2<K>(array, array.length);\n+  }\n+\n+  /**\n+   * Get the data.\n+   *\n+   * @return the data\n+   */\n+  public K[] array() {\n+    return array;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder buff = new StringBuilder();\n+    for (K obj : this) {\n+      buff.append(' ').append(obj);\n     }\n+    return buff.toString();\n+  }\n+\n+  /**\n+   * Get an empty immutable array.\n+   *\n+   * @param <K> the key type\n+   * @return the array\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <K> ImmutableArray2<K> empty() {\n+    return (ImmutableArray2<K>) EMPTY;\n+  }\n+\n+  /**\n+   * Get an iterator over all entries.\n+   *\n+   * @return the iterator\n+   */\n+  @Override\n+  public Iterator<K> iterator() {\n+    return new Iterator<K>() {\n+\n+      ImmutableArray2<K> a = ImmutableArray2.this;\n+      int index;\n+\n+      @Override\n+      public boolean hasNext() {\n+        return index < a.length();\n+      }\n+\n+      @Override\n+      public K next() {\n+        return a.get(index++);\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw DataUtils.newUnsupportedOperationException(\"remove\");\n+      }\n+\n+    };\n+  }\n \n }\n \n",
            "diff_size": 294
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/109/ImmutableArray2.java\nindex b595a393eb9..609223df33b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/109/ImmutableArray2.java\n@@ -152,8 +152,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray2<K> create(K... array) {\n-        return new ImmutableArray2<K>(array, array.length);\n+public static <K> ImmutableArray2<K> create(K... array) {\n+    return new ImmutableArray2<K>(array, array.length);\n     }\n \n     /**\n@@ -215,5 +215,4 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n         };\n     }\n \n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/109/ImmutableArray2.java\nindex b595a393eb9..22e1aa64f3d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/109/ImmutableArray2.java\n@@ -8,7 +8,6 @@ package org.h2.dev.util;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.concurrent.atomic.AtomicBoolean;\n-\n import org.h2.mvstore.DataUtils;\n \n /**\n@@ -16,10 +15,12 @@ import org.h2.mvstore.DataUtils;\n  *\n  * @param <K> the type\n  */\n+\n+\n public final class ImmutableArray2<K> implements Iterable<K> {\n \n     private static final ImmutableArray2<?> EMPTY = new ImmutableArray2<Object>(\n-            new Object[0], 0);\n+        new Object[0], 0);\n \n     /**\n      * The array.\n@@ -47,6 +48,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param index the index\n      * @return the entry\n      */\n+\n+\n     public K get(int index) {\n         if (index >= length) {\n             throw new IndexOutOfBoundsException();\n@@ -59,6 +62,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      *\n      * @return the length\n      */\n+\n+\n     public int length() {\n         return length;\n     }\n@@ -70,6 +75,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param obj the object\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray2<K> set(int index, K obj) {\n         K[] a2 = Arrays.copyOf(array, length);\n         a2[index] = obj;\n@@ -83,6 +90,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param obj the object\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray2<K> insert(int index, K obj) {\n         int len = length + 1;\n         int newLen = len;\n@@ -116,6 +125,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param index the index\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray2<K> remove(int index) {\n         int len = length - 1;\n         if (index == len) {\n@@ -134,6 +145,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param toIndex the end index, plus one\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray2<K> subArray(int fromIndex, int toIndex) {\n         int len = toIndex - fromIndex;\n         if (fromIndex == 0) {\n@@ -151,8 +164,9 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param array the data\n      * @return the new immutable array\n      */\n+\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray2<K> create(K... array) {\n+    public static <K> ImmutableArray2<K> create(K... array) {\n         return new ImmutableArray2<K>(array, array.length);\n     }\n \n@@ -161,6 +175,8 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      *\n      * @return the data\n      */\n+\n+\n     public K[] array() {\n         return array;\n     }\n@@ -180,6 +196,7 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @param <K> the key type\n      * @return the array\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     public static <K> ImmutableArray2<K> empty() {\n         return (ImmutableArray2<K>) EMPTY;\n@@ -190,11 +207,15 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      *\n      * @return the iterator\n      */\n+\n     @Override\n     public Iterator<K> iterator() {\n         return new Iterator<K>() {\n \n+\n             ImmutableArray2<K> a = ImmutableArray2.this;\n+\n+\n             int index;\n \n             @Override\n@@ -215,5 +236,4 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n         };\n     }\n \n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/109/ImmutableArray2.java\nindex b595a393eb9..47a632d9fb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/109/ImmutableArray2.java\n@@ -152,7 +152,7 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray2<K> create(K... array) {\n+public static <K> ImmutableArray2<K> create(K... array) {\n         return new ImmutableArray2<K>(array, array.length);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/109/ImmutableArray2.java\nindex b595a393eb9..66b22af0ab7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/109/ImmutableArray2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/109/ImmutableArray2.java\n@@ -152,7 +152,7 @@ public final class ImmutableArray2<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray2<K> create(K... array) {\n+    public static <K> ImmutableArray2<K> create(K... array) {\n         return new ImmutableArray2<K>(array, array.length);\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}