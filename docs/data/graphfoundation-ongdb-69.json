{
    "project_name": "graphfoundation-ongdb",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "341",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "459",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/69/ConsistencyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/69/ConsistencyChecker.java\nindex 523740ababc..7f5766626c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/69/ConsistencyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/69/ConsistencyChecker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.io.IOException;\n@@ -47,528 +48,526 @@ import static org.neo4j.index.internal.gbptree.TreeNode.Type.LEAF;\n  */\n class ConsistencyChecker<KEY>\n {\n-    private final TreeNode<KEY,?> node;\n-    private final KEY readKey;\n-    private final Comparator<KEY> comparator;\n-    private final Layout<KEY,?> layout;\n-    private final List<RightmostInChain> rightmostPerLevel = new ArrayList<>();\n-    private final long stableGeneration;\n-    private final long unstableGeneration;\n-\n-    ConsistencyChecker( TreeNode<KEY,?> node, Layout<KEY,?> layout, long stableGeneration, long unstableGeneration )\n+  private final TreeNode<KEY, ?> node;\n+  private final KEY readKey;\n+  private final Comparator<KEY> comparator;\n+  private final Layout<KEY, ?> layout;\n+  private final List<RightmostInChain> rightmostPerLevel = new ArrayList<>();\n+  private final long stableGeneration;\n+  private final long unstableGeneration;\n+\n+  ConsistencyChecker(TreeNode<KEY, ?> node, Layout<KEY, ?> layout, long stableGeneration, long unstableGeneration)\n+  {\n+    this.node = node;\n+    this.readKey = layout.newKey();\n+    this.comparator = node.keyComparator();\n+    this.layout = layout;\n+    this.stableGeneration = stableGeneration;\n+    this.unstableGeneration = unstableGeneration;\n+  }\n+\n+  public boolean check(PageCursor cursor, long expectedGeneration) throws IOException\n+  {\n+    assertOnTreeNode(cursor);\n+    KeyRange<KEY> openRange = new KeyRange<>(comparator, null, null, layout, null);\n+    boolean result = checkSubtree(cursor, openRange, expectedGeneration, 0);\n+\n+    // Assert that rightmost node on each level has empty right sibling.\n+    rightmostPerLevel.forEach(RightmostInChain::assertLast);\n+    return result;\n+  }\n+\n+  /**\n+   * Checks so that all pages between {@link IdSpace#MIN_TREE_NODE_ID} and highest allocated id\n+   * are either in use in the tree, on the free-list or free-list nodes.\n+   *\n+   * @param cursor      {@link PageCursor} to use for reading.\n+   * @param lastId      highest allocated id in the store.\n+   * @param freelistIds page ids making up free-list pages and page ids on the free-list.\n+   * @return {@code true} if all pages are taken, otherwise {@code false}. Also is compatible with java\n+   * assert calls.\n+   * @throws IOException on {@link PageCursor} error.\n+   */\n+  boolean checkSpace(PageCursor cursor, long lastId, PrimitiveLongIterator freelistIds) throws IOException\n+  {\n+    assertOnTreeNode(cursor);\n+\n+    // TODO: limitation, can't run on an index larger than Integer.MAX_VALUE pages (which is fairly large)\n+    long highId = lastId + 1;\n+    BitSet seenIds = new BitSet(toIntExact(highId));\n+    while (freelistIds.hasNext())\n     {\n-        this.node = node;\n-        this.readKey = layout.newKey();\n-        this.comparator = node.keyComparator();\n-        this.layout = layout;\n-        this.stableGeneration = stableGeneration;\n-        this.unstableGeneration = unstableGeneration;\n+      addToSeenList(seenIds, freelistIds.next(), lastId);\n     }\n \n-    public boolean check( PageCursor cursor, long expectedGeneration ) throws IOException\n+    // Traverse the tree\n+    do\n     {\n-        assertOnTreeNode( cursor );\n-        KeyRange<KEY> openRange = new KeyRange<>( comparator, null, null, layout, null );\n-        boolean result = checkSubtree( cursor, openRange, expectedGeneration, 0 );\n+      // One level at the time\n+      long leftmostSibling = cursor.getCurrentPageId();\n+      addToSeenList(seenIds, leftmostSibling, lastId);\n \n-        // Assert that rightmost node on each level has empty right sibling.\n-        rightmostPerLevel.forEach( RightmostInChain::assertLast );\n-        return result;\n-    }\n+      // Go right through all siblings\n+      traverseAndAddRightSiblings(cursor, seenIds, lastId);\n \n-    /**\n-     * Checks so that all pages between {@link IdSpace#MIN_TREE_NODE_ID} and highest allocated id\n-     * are either in use in the tree, on the free-list or free-list nodes.\n-     *\n-     * @param cursor {@link PageCursor} to use for reading.\n-     * @param lastId highest allocated id in the store.\n-     * @param freelistIds page ids making up free-list pages and page ids on the free-list.\n-     * @return {@code true} if all pages are taken, otherwise {@code false}. Also is compatible with java\n-     * assert calls.\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    boolean checkSpace( PageCursor cursor, long lastId, PrimitiveLongIterator freelistIds ) throws IOException\n+      // Then go back to the left-most node on this level\n+      TreeNode.goTo(cursor, \"back\", leftmostSibling);\n+    }\n+    // And continue down to next level if this level was an internal level\n+    while (goToLeftmostChild(cursor));\n+\n+    assertAllIdsOccupied(highId, seenIds);\n+    return true;\n+  }\n+\n+  private boolean goToLeftmostChild(PageCursor cursor) throws IOException\n+  {\n+    boolean isInternal;\n+    long leftmostSibling = -1;\n+    do\n     {\n-        assertOnTreeNode( cursor );\n-\n-        // TODO: limitation, can't run on an index larger than Integer.MAX_VALUE pages (which is fairly large)\n-        long highId = lastId + 1;\n-        BitSet seenIds = new BitSet( toIntExact( highId ) );\n-        while ( freelistIds.hasNext() )\n-        {\n-            addToSeenList( seenIds, freelistIds.next(), lastId );\n-        }\n-\n-        // Traverse the tree\n-        do\n-        {\n-            // One level at the time\n-            long leftmostSibling = cursor.getCurrentPageId();\n-            addToSeenList( seenIds, leftmostSibling, lastId );\n-\n-            // Go right through all siblings\n-            traverseAndAddRightSiblings( cursor, seenIds, lastId );\n-\n-            // Then go back to the left-most node on this level\n-            TreeNode.goTo( cursor, \"back\", leftmostSibling );\n-        }\n-        // And continue down to next level if this level was an internal level\n-        while ( goToLeftmostChild( cursor ) );\n-\n-        assertAllIdsOccupied( highId, seenIds );\n-        return true;\n+      isInternal = TreeNode.isInternal(cursor);\n+      if (isInternal)\n+      {\n+        leftmostSibling = node.childAt(cursor, 0, stableGeneration, unstableGeneration);\n+      }\n     }\n+    while (cursor.shouldRetry());\n \n-    private boolean goToLeftmostChild( PageCursor cursor ) throws IOException\n+    if (isInternal)\n     {\n-        boolean isInternal;\n-        long leftmostSibling = -1;\n-        do\n-        {\n-            isInternal = TreeNode.isInternal( cursor );\n-            if ( isInternal )\n-            {\n-                leftmostSibling = node.childAt( cursor, 0, stableGeneration, unstableGeneration );\n-            }\n-        }\n-        while ( cursor.shouldRetry() );\n-\n-        if ( isInternal )\n-        {\n-            TreeNode.goTo( cursor, \"child\", leftmostSibling );\n-        }\n-        return isInternal;\n+      TreeNode.goTo(cursor, \"child\", leftmostSibling);\n     }\n+    return isInternal;\n+  }\n \n-    private static void assertAllIdsOccupied( long highId, BitSet seenIds )\n+  private static void assertAllIdsOccupied(long highId, BitSet seenIds)\n+  {\n+    long expectedNumberOfPages = highId - IdSpace.MIN_TREE_NODE_ID;\n+    if (seenIds.cardinality() != expectedNumberOfPages)\n     {\n-        long expectedNumberOfPages = highId - IdSpace.MIN_TREE_NODE_ID;\n-        if ( seenIds.cardinality() != expectedNumberOfPages )\n+      StringBuilder builder = new StringBuilder(\"[\");\n+      int index = (int) IdSpace.MIN_TREE_NODE_ID;\n+      int count = 0;\n+      while (index >= 0 && index < highId)\n+      {\n+        index = seenIds.nextClearBit(index);\n+        if (index != -1)\n         {\n-            StringBuilder builder = new StringBuilder( \"[\" );\n-            int index = (int) IdSpace.MIN_TREE_NODE_ID;\n-            int count = 0;\n-            while ( index >= 0 && index < highId )\n-            {\n-                index = seenIds.nextClearBit( index );\n-                if ( index != -1 )\n-                {\n-                    if ( count++ > 0 )\n-                    {\n-                        builder.append( \",\" );\n-                    }\n-                    builder.append( index );\n-                    index++;\n-                }\n-            }\n-            builder.append( \"]\" );\n-            throw new RuntimeException( \"There are \" + count + \" unused pages in the store:\" + builder );\n+          if (count++ > 0)\n+          {\n+            builder.append(\",\");\n+          }\n+          builder.append(index);\n+          index++;\n         }\n+      }\n+      builder.append(\"]\");\n+      throw new RuntimeException(\"There are \" + count + \" unused pages in the store:\" + builder);\n     }\n+  }\n \n-    private void traverseAndAddRightSiblings( PageCursor cursor, BitSet seenIds, long lastId ) throws IOException\n+  private void traverseAndAddRightSiblings(PageCursor cursor, BitSet seenIds, long lastId) throws IOException\n+  {\n+    long rightSibling;\n+    do\n     {\n-        long rightSibling;\n-        do\n-        {\n-            do\n-            {\n-                rightSibling = TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n-            }\n-            while ( cursor.shouldRetry() );\n-\n-            if ( TreeNode.isNode( rightSibling ) )\n-            {\n-                TreeNode.goTo( cursor, \"right sibling\", rightSibling );\n-                addToSeenList( seenIds, pointer( rightSibling ), lastId );\n-            }\n-        }\n-        while ( TreeNode.isNode( rightSibling ) );\n+      do\n+      {\n+        rightSibling = TreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);\n+      }\n+      while (cursor.shouldRetry());\n+\n+      if (TreeNode.isNode(rightSibling))\n+      {\n+        TreeNode.goTo(cursor, \"right sibling\", rightSibling);\n+        addToSeenList(seenIds, pointer(rightSibling), lastId);\n+      }\n     }\n+    while (TreeNode.isNode(rightSibling));\n+  }\n \n-    private static void addToSeenList( BitSet target, long id, long lastId )\n+  private static void addToSeenList(BitSet target, long id, long lastId)\n+  {\n+    int index = toIntExact(id);\n+    if (target.get(index))\n     {\n-        int index = toIntExact( id );\n-        if ( target.get( index ) )\n-        {\n-            throw new IllegalStateException( id + \" already seen\" );\n-        }\n-        if ( id > lastId )\n-        {\n-            throw new IllegalStateException( \"Unexpectedly high id \" + id + \" seen when last id is \" + lastId );\n-        }\n-        target.set( index );\n+      throw new IllegalStateException(id + \" already seen\");\n     }\n-\n-    static void assertOnTreeNode( PageCursor cursor ) throws IOException\n+    if (id > lastId)\n     {\n-        byte nodeType;\n-        boolean isInternal;\n-        boolean isLeaf;\n-        do\n-        {\n-            nodeType = TreeNode.nodeType( cursor );\n-            isInternal = TreeNode.isInternal( cursor );\n-            isLeaf = TreeNode.isLeaf( cursor );\n-        }\n-        while ( cursor.shouldRetry() );\n-\n-        if ( nodeType != TreeNode.NODE_TYPE_TREE_NODE )\n-        {\n-            throw new IllegalArgumentException( \"Cursor is not pinned to a tree node page. pageId:\" +\n-                    cursor.getCurrentPageId() );\n-        }\n-        if ( !isInternal && !isLeaf )\n-        {\n-            throw new IllegalArgumentException( \"Cursor is not pinned to a page containing a tree node. pageId:\" +\n-                    cursor.getCurrentPageId() );\n-        }\n+      throw new IllegalStateException(\"Unexpectedly high id \" + id + \" seen when last id is \" + lastId);\n     }\n-\n-    private boolean checkSubtree( PageCursor cursor, KeyRange<KEY> range, long expectedGeneration, int level )\n-            throws IOException\n+    target.set(index);\n+  }\n+\n+  static void assertOnTreeNode(PageCursor cursor) throws IOException\n+  {\n+    byte nodeType;\n+    boolean isInternal;\n+    boolean isLeaf;\n+    do\n     {\n-        boolean isInternal = false;\n-        boolean isLeaf = false;\n-        int keyCount;\n-        long successor;\n-        long successorGeneration;\n-\n-        long leftSiblingPointer;\n-        long rightSiblingPointer;\n-        long leftSiblingPointerGeneration;\n-        long rightSiblingPointerGeneration;\n-        long currentNodeGeneration;\n-\n-        do\n-        {\n-            // check header pointers\n-            assertNoCrashOrBrokenPointerInGSPP(\n-                    cursor, stableGeneration, unstableGeneration, \"LeftSibling\", TreeNode.BYTE_POS_LEFTSIBLING );\n-            assertNoCrashOrBrokenPointerInGSPP(\n-                    cursor, stableGeneration, unstableGeneration, \"RightSibling\", TreeNode.BYTE_POS_RIGHTSIBLING );\n-            assertNoCrashOrBrokenPointerInGSPP(\n-                    cursor, stableGeneration, unstableGeneration, \"Successor\", TreeNode.BYTE_POS_SUCCESSOR );\n-\n-            // for assertSiblings\n-            leftSiblingPointer = TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration );\n-            rightSiblingPointer = TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n-            leftSiblingPointerGeneration = node.pointerGeneration( cursor, leftSiblingPointer );\n-            rightSiblingPointerGeneration = node.pointerGeneration( cursor, rightSiblingPointer );\n-            leftSiblingPointer = pointer( leftSiblingPointer );\n-            rightSiblingPointer = pointer( rightSiblingPointer );\n-            currentNodeGeneration = TreeNode.generation( cursor );\n-\n-            successor = TreeNode.successor( cursor, stableGeneration, unstableGeneration );\n-            successorGeneration = node.pointerGeneration( cursor, successor );\n-\n-            keyCount = TreeNode.keyCount( cursor );\n-            if ( !node.reasonableKeyCount( keyCount ) )\n-            {\n-                cursor.setCursorException( \"Unexpected keyCount:\" + keyCount );\n-                continue;\n-            }\n-            isInternal = TreeNode.isInternal( cursor );\n-            isLeaf = TreeNode.isLeaf( cursor );\n-        }\n-        while ( cursor.shouldRetry() );\n-        checkAfterShouldRetry( cursor );\n-\n-        if ( !isInternal && !isLeaf )\n-        {\n-            throw new TreeInconsistencyException( \"Page:\" + cursor.getCurrentPageId() + \" at level:\" + level +\n-                    \" isn't a tree node, parent expected range \" + range );\n-        }\n-\n-        do\n-        {\n-            assertKeyOrder( cursor, range, keyCount, isLeaf ? LEAF : INTERNAL );\n-        }\n-        while ( cursor.shouldRetry() );\n-        checkAfterShouldRetry( cursor );\n-\n-        assertPointerGenerationMatchesGeneration( cursor, currentNodeGeneration, expectedGeneration );\n-        assertSiblings( cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n-                rightSiblingPointerGeneration, level );\n-        checkSuccessorPointerGeneration( cursor, successor, successorGeneration );\n-\n-        if ( isInternal )\n-        {\n-            assertSubtrees( cursor, range, keyCount, level );\n-        }\n-        return true;\n+      nodeType = TreeNode.nodeType(cursor);\n+      isInternal = TreeNode.isInternal(cursor);\n+      isLeaf = TreeNode.isLeaf(cursor);\n     }\n+    while (cursor.shouldRetry());\n \n-    private static void assertPointerGenerationMatchesGeneration( PageCursor cursor, long nodeGeneration,\n-            long expectedGeneration )\n+    if (nodeType != TreeNode.NODE_TYPE_TREE_NODE)\n     {\n-        if ( nodeGeneration > expectedGeneration )\n-        {\n-            throw new TreeInconsistencyException( \"Expected node:%d generation:%d to be \u2264 pointer generation:%d\", cursor.getCurrentPageId(), nodeGeneration,\n-                    expectedGeneration );\n-        }\n+      throw new IllegalArgumentException(\"Cursor is not pinned to a tree node page. pageId:\" +\n+          cursor.getCurrentPageId());\n     }\n-\n-    private void checkSuccessorPointerGeneration( PageCursor cursor, long successor, long successorGeneration )\n-            throws IOException\n+    if (!isInternal && !isLeaf)\n     {\n-        if ( TreeNode.isNode( successor ) )\n-        {\n-            cursor.setCursorException( \"WARNING: we ended up on an old generation \" + cursor.getCurrentPageId() +\n-                    \" which had successor:\" + pointer( successor ) );\n-            long origin = cursor.getCurrentPageId();\n-            TreeNode.goTo( cursor, \"successor\", successor );\n-            try\n-            {\n-                long nodeGeneration;\n-                do\n-                {\n-                    nodeGeneration = TreeNode.generation( cursor );\n-                }\n-                while ( cursor.shouldRetry() );\n-                checkAfterShouldRetry( cursor );\n-\n-                assertPointerGenerationMatchesGeneration( cursor, nodeGeneration, successorGeneration );\n-            }\n-            finally\n-            {\n-                TreeNode.goTo( cursor, \"back\", origin );\n-            }\n-        }\n+      throw new IllegalArgumentException(\"Cursor is not pinned to a page containing a tree node. pageId:\" +\n+          cursor.getCurrentPageId());\n     }\n-\n-    // Assumption: We traverse the tree from left to right on every level\n-    private void assertSiblings( PageCursor cursor, long currentNodeGeneration, long leftSiblingPointer,\n-            long leftSiblingPointerGeneration, long rightSiblingPointer, long rightSiblingPointerGeneration, int level )\n+  }\n+\n+  private boolean checkSubtree(PageCursor cursor, KeyRange<KEY> range, long expectedGeneration, int level)\n+      throws IOException\n+  {\n+    boolean isInternal = false;\n+    boolean isLeaf = false;\n+    int keyCount;\n+    long successor;\n+    long successorGeneration;\n+\n+    long leftSiblingPointer;\n+    long rightSiblingPointer;\n+    long leftSiblingPointerGeneration;\n+    long rightSiblingPointerGeneration;\n+    long currentNodeGeneration;\n+\n+    do\n     {\n-        // If this is the first time on this level, we will add a new entry\n-        for ( int i = rightmostPerLevel.size(); i <= level; i++ )\n-        {\n-            rightmostPerLevel.add( i, new RightmostInChain() );\n-        }\n-        RightmostInChain rightmost = rightmostPerLevel.get( level );\n+      // check header pointers\n+      assertNoCrashOrBrokenPointerInGSPP(\n+          cursor, stableGeneration, unstableGeneration, \"LeftSibling\", TreeNode.BYTE_POS_LEFTSIBLING);\n+      assertNoCrashOrBrokenPointerInGSPP(\n+          cursor, stableGeneration, unstableGeneration, \"RightSibling\", TreeNode.BYTE_POS_RIGHTSIBLING);\n+      assertNoCrashOrBrokenPointerInGSPP(\n+          cursor, stableGeneration, unstableGeneration, \"Successor\", TreeNode.BYTE_POS_SUCCESSOR);\n+\n+      // for assertSiblings\n+      leftSiblingPointer = TreeNode.leftSibling(cursor, stableGeneration, unstableGeneration);\n+      rightSiblingPointer = TreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);\n+      leftSiblingPointerGeneration = node.pointerGeneration(cursor, leftSiblingPointer);\n+      rightSiblingPointerGeneration = node.pointerGeneration(cursor, rightSiblingPointer);\n+      leftSiblingPointer = pointer(leftSiblingPointer);\n+      rightSiblingPointer = pointer(rightSiblingPointer);\n+      currentNodeGeneration = TreeNode.generation(cursor);\n+\n+      successor = TreeNode.successor(cursor, stableGeneration, unstableGeneration);\n+      successorGeneration = node.pointerGeneration(cursor, successor);\n+\n+      keyCount = TreeNode.keyCount(cursor);\n+      if (!node.reasonableKeyCount(keyCount))\n+      {\n+        cursor.setCursorException(\"Unexpected keyCount:\" + keyCount);\n+        continue;\n+      }\n+      isInternal = TreeNode.isInternal(cursor);\n+      isLeaf = TreeNode.isLeaf(cursor);\n+    }\n+    while (cursor.shouldRetry());\n+    checkAfterShouldRetry(cursor);\n \n-        rightmost.assertNext( cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n-                rightSiblingPointerGeneration );\n+    if (!isInternal && !isLeaf)\n+    {\n+      throw new TreeInconsistencyException(\"Page:\" + cursor.getCurrentPageId() + \" at level:\" + level +\n+          \" isn't a tree node, parent expected range \" + range);\n     }\n \n-    private void assertSubtrees( PageCursor cursor, KeyRange<KEY> range, int keyCount, int level )\n-            throws IOException\n+    do\n     {\n-        long pageId = cursor.getCurrentPageId();\n-        KEY prev = null;\n-        KeyRange<KEY> childRange;\n+      assertKeyOrder(cursor, range, keyCount, isLeaf ? LEAF : INTERNAL);\n+    }\n+    while (cursor.shouldRetry());\n+    checkAfterShouldRetry(cursor);\n \n-        // Check children, all except the last one\n-        int pos = 0;\n-        while ( pos < keyCount )\n-        {\n-            long child;\n-            long childGeneration;\n-            do\n-            {\n-                child = childAt( cursor, pos );\n-                childGeneration = node.pointerGeneration( cursor, child );\n-                node.keyAt( cursor, readKey, pos, INTERNAL );\n-            }\n-            while ( cursor.shouldRetry() );\n-            checkAfterShouldRetry( cursor );\n-\n-            childRange = range.restrictRight( readKey );\n-            if ( pos > 0 )\n-            {\n-                childRange = range.restrictLeft( prev );\n-            }\n-\n-            TreeNode.goTo( cursor, \"child at pos \" + pos, child );\n-            checkSubtree( cursor, childRange, childGeneration, level + 1 );\n-\n-            TreeNode.goTo( cursor, \"parent\", pageId );\n-\n-            if ( pos == 0 )\n-            {\n-                prev = layout.newKey();\n-            }\n-            layout.copyKey( readKey, prev );\n-            pos++;\n-        }\n+    assertPointerGenerationMatchesGeneration(cursor, currentNodeGeneration, expectedGeneration);\n+    assertSiblings(cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n+        rightSiblingPointerGeneration, level);\n+    checkSuccessorPointerGeneration(cursor, successor, successorGeneration);\n \n-        // Check last child\n-        long child;\n-        long childGeneration;\n-        do\n-        {\n-            child = childAt( cursor, pos );\n-        }\n-        while ( cursor.shouldRetry() );\n-        checkAfterShouldRetry( cursor );\n+    if (isInternal)\n+    {\n+      assertSubtrees(cursor, range, keyCount, level);\n+    }\n+    return true;\n+  }\n \n+  private static void assertPointerGenerationMatchesGeneration(PageCursor cursor, long nodeGeneration,\n+                                                               long expectedGeneration)\n+  {\n+    if (nodeGeneration > expectedGeneration)\n+    {\n+      throw new TreeInconsistencyException(\"Expected node:%d generation:%d to be \u2264 pointer generation:%d\", cursor.getCurrentPageId(), nodeGeneration,\n+          expectedGeneration);\n+    }\n+  }\n+\n+  private void checkSuccessorPointerGeneration(PageCursor cursor, long successor, long successorGeneration)\n+      throws IOException\n+  {\n+    if (TreeNode.isNode(successor))\n+    {\n+      cursor.setCursorException(\"WARNING: we ended up on an old generation \" + cursor.getCurrentPageId() +\n+          \" which had successor:\" + pointer(successor));\n+      long origin = cursor.getCurrentPageId();\n+      TreeNode.goTo(cursor, \"successor\", successor);\n+      try\n+      {\n+        long nodeGeneration;\n         do\n         {\n-            childGeneration = node.pointerGeneration( cursor, child );\n+          nodeGeneration = TreeNode.generation(cursor);\n         }\n-        while ( cursor.shouldRetry() );\n-        checkAfterShouldRetry( cursor );\n-\n-        TreeNode.goTo( cursor, \"child at pos \" + pos, child );\n-        childRange = range.restrictLeft( prev );\n-        checkSubtree( cursor, childRange, childGeneration, level + 1 );\n-        TreeNode.goTo( cursor, \"parent\", pageId );\n+        while (cursor.shouldRetry());\n+        checkAfterShouldRetry(cursor);\n+\n+        assertPointerGenerationMatchesGeneration(cursor, nodeGeneration, successorGeneration);\n+      } finally\n+      {\n+        TreeNode.goTo(cursor, \"back\", origin);\n+      }\n     }\n-\n-    private static void checkAfterShouldRetry( PageCursor cursor ) throws CursorException\n+  }\n+\n+  // Assumption: We traverse the tree from left to right on every level\n+  private void assertSiblings(PageCursor cursor, long currentNodeGeneration, long leftSiblingPointer,\n+                              long leftSiblingPointerGeneration, long rightSiblingPointer, long rightSiblingPointerGeneration, int level)\n+  {\n+    // If this is the first time on this level, we will add a new entry\n+    for (int i = rightmostPerLevel.size(); i <= level; i++)\n     {\n-        checkOutOfBounds( cursor );\n-        cursor.checkAndClearCursorException();\n+      rightmostPerLevel.add(i, new RightmostInChain());\n     }\n-\n-    private long childAt( PageCursor cursor, int pos )\n+    RightmostInChain rightmost = rightmostPerLevel.get(level);\n+\n+    rightmost.assertNext(cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n+        rightSiblingPointerGeneration);\n+  }\n+\n+  private void assertSubtrees(PageCursor cursor, KeyRange<KEY> range, int keyCount, int level)\n+      throws IOException\n+  {\n+    long pageId = cursor.getCurrentPageId();\n+    KEY prev = null;\n+    KeyRange<KEY> childRange;\n+\n+    // Check children, all except the last one\n+    int pos = 0;\n+    while (pos < keyCount)\n     {\n-        assertNoCrashOrBrokenPointerInGSPP(\n-                cursor, stableGeneration, unstableGeneration, \"Child\", node.childOffset( pos ) );\n-        return node.childAt( cursor, pos, stableGeneration, unstableGeneration );\n+      long child;\n+      long childGeneration;\n+      do\n+      {\n+        child = childAt(cursor, pos);\n+        childGeneration = node.pointerGeneration(cursor, child);\n+        node.keyAt(cursor, readKey, pos, INTERNAL);\n+      }\n+      while (cursor.shouldRetry());\n+      checkAfterShouldRetry(cursor);\n+\n+      childRange = range.restrictRight(readKey);\n+      if (pos > 0)\n+      {\n+        childRange = range.restrictLeft(prev);\n+      }\n+\n+      TreeNode.goTo(cursor, \"child at pos \" + pos, child);\n+      checkSubtree(cursor, childRange, childGeneration, level + 1);\n+\n+      TreeNode.goTo(cursor, \"parent\", pageId);\n+\n+      if (pos == 0)\n+      {\n+        prev = layout.newKey();\n+      }\n+      layout.copyKey(readKey, prev);\n+      pos++;\n     }\n \n-    private void assertKeyOrder( PageCursor cursor, KeyRange<KEY> range, int keyCount, TreeNode.Type type )\n+    // Check last child\n+    long child;\n+    long childGeneration;\n+    do\n     {\n-        KEY prev = layout.newKey();\n-        boolean first = true;\n-        for ( int pos = 0; pos < keyCount; pos++ )\n-        {\n-            node.keyAt( cursor, readKey, pos, type );\n-            if ( !range.inRange( readKey ) )\n-            {\n-                cursor.setCursorException(\n-                        format( \"Expected range for this node is %n%s%n but found %s in position %d, with keyCount %d on page %d\",\n-                        range, readKey, pos, keyCount, cursor.getCurrentPageId() ) );\n-            }\n-            if ( !first )\n-            {\n-                if ( comparator.compare( prev, readKey ) >= 0 )\n-                {\n-                    cursor.setCursorException( \"Non-unique key \" + readKey );\n-                }\n-            }\n-            else\n-            {\n-                first = false;\n-            }\n-            layout.copyKey( readKey, prev );\n-        }\n+      child = childAt(cursor, pos);\n     }\n+    while (cursor.shouldRetry());\n+    checkAfterShouldRetry(cursor);\n \n-    static void assertNoCrashOrBrokenPointerInGSPP( PageCursor cursor, long stableGeneration, long unstableGeneration,\n-            String pointerFieldName, int offset )\n+    do\n     {\n-        cursor.setOffset( offset );\n-        long currentNodeId = cursor.getCurrentPageId();\n-        // A\n-        long generationA = GenerationSafePointer.readGeneration( cursor );\n-        long readPointerA = GenerationSafePointer.readPointer( cursor );\n-        long pointerA = GenerationSafePointerPair.pointer( readPointerA );\n-        short checksumA = GenerationSafePointer.readChecksum( cursor );\n-        boolean correctChecksumA = GenerationSafePointer.checksumOf( generationA, readPointerA ) == checksumA;\n-        byte stateA = GenerationSafePointerPair.pointerState(\n-                stableGeneration, unstableGeneration, generationA, readPointerA, correctChecksumA );\n-        boolean okA = stateA != GenerationSafePointerPair.BROKEN && stateA != GenerationSafePointerPair.CRASH;\n-\n-        // B\n-        long generationB = GenerationSafePointer.readGeneration( cursor );\n-        long readPointerB = GenerationSafePointer.readPointer( cursor );\n-        long pointerB = GenerationSafePointerPair.pointer( readPointerA );\n-        short checksumB = GenerationSafePointer.readChecksum( cursor );\n-        boolean correctChecksumB = GenerationSafePointer.checksumOf( generationB, readPointerB ) == checksumB;\n-        byte stateB = GenerationSafePointerPair.pointerState(\n-                stableGeneration, unstableGeneration, generationB, readPointerB, correctChecksumB );\n-        boolean okB = stateB != GenerationSafePointerPair.BROKEN && stateB != GenerationSafePointerPair.CRASH;\n-\n-        if ( !(okA && okB) )\n+      childGeneration = node.pointerGeneration(cursor, child);\n+    }\n+    while (cursor.shouldRetry());\n+    checkAfterShouldRetry(cursor);\n+\n+    TreeNode.goTo(cursor, \"child at pos \" + pos, child);\n+    childRange = range.restrictLeft(prev);\n+    checkSubtree(cursor, childRange, childGeneration, level + 1);\n+    TreeNode.goTo(cursor, \"parent\", pageId);\n+  }\n+\n+  private static void checkAfterShouldRetry(PageCursor cursor) throws CursorException\n+  {\n+    checkOutOfBounds(cursor);\n+    cursor.checkAndClearCursorException();\n+  }\n+\n+  private long childAt(PageCursor cursor, int pos)\n+  {\n+    assertNoCrashOrBrokenPointerInGSPP(\n+        cursor, stableGeneration, unstableGeneration, \"Child\", node.childOffset(pos));\n+    return node.childAt(cursor, pos, stableGeneration, unstableGeneration);\n+  }\n+\n+  private void assertKeyOrder(PageCursor cursor, KeyRange<KEY> range, int keyCount, TreeNode.Type type)\n+  {\n+    KEY prev = layout.newKey();\n+    boolean first = true;\n+    for (int pos = 0; pos < keyCount; pos++)\n+    {\n+      node.keyAt(cursor, readKey, pos, type);\n+      if (!range.inRange(readKey))\n+      {\n+        cursor.setCursorException(\n+            format(\"Expected range for this node is %n%s%n but found %s in position %d, with keyCount %d on page %d\",\n+                range, readKey, pos, keyCount, cursor.getCurrentPageId()));\n+      }\n+      if (!first)\n+      {\n+        if (comparator.compare(prev, readKey) >= 0)\n         {\n-            boolean isInternal = TreeNode.isInternal( cursor );\n-            String type = isInternal ? \"internal\" : \"leaf\";\n-            cursor.setCursorException( format(\n-                    \"GSPP state found that was not ok in %s field in %s node with id %d%n  slotA[%s]%n  slotB[%s]\",\n-                    pointerFieldName, type, currentNodeId,\n-                    stateToString( generationA, readPointerA, pointerA, stateA ),\n-                    stateToString( generationB, readPointerB, pointerB, stateB ) ) );\n+          cursor.setCursorException(\"Non-unique key \" + readKey);\n         }\n+      } else\n+      {\n+        first = false;\n+      }\n+      layout.copyKey(readKey, prev);\n     }\n-\n-    private static String stateToString( long generation, long readPointer, long pointer, byte stateA )\n+  }\n+\n+  static void assertNoCrashOrBrokenPointerInGSPP(PageCursor cursor, long stableGeneration, long unstableGeneration,\n+                                                 String pointerFieldName, int offset)\n+  {\n+    cursor.setOffset(offset);\n+    long currentNodeId = cursor.getCurrentPageId();\n+    // A\n+    long generationA = GenerationSafePointer.readGeneration(cursor);\n+    long readPointerA = GenerationSafePointer.readPointer(cursor);\n+    long pointerA = GenerationSafePointerPair.pointer(readPointerA);\n+    short checksumA = GenerationSafePointer.readChecksum(cursor);\n+    boolean correctChecksumA = GenerationSafePointer.checksumOf(generationA, readPointerA) == checksumA;\n+    byte stateA = GenerationSafePointerPair.pointerState(\n+        stableGeneration, unstableGeneration, generationA, readPointerA, correctChecksumA);\n+    boolean okA = stateA != GenerationSafePointerPair.BROKEN && stateA != GenerationSafePointerPair.CRASH;\n+\n+    // B\n+    long generationB = GenerationSafePointer.readGeneration(cursor);\n+    long readPointerB = GenerationSafePointer.readPointer(cursor);\n+    long pointerB = GenerationSafePointerPair.pointer(readPointerA);\n+    short checksumB = GenerationSafePointer.readChecksum(cursor);\n+    boolean correctChecksumB = GenerationSafePointer.checksumOf(generationB, readPointerB) == checksumB;\n+    byte stateB = GenerationSafePointerPair.pointerState(\n+        stableGeneration, unstableGeneration, generationB, readPointerB, correctChecksumB);\n+    boolean okB = stateB != GenerationSafePointerPair.BROKEN && stateB != GenerationSafePointerPair.CRASH;\n+\n+    if (!(okA && okB))\n     {\n-        return format( \"generation=%d, readPointer=%d, pointer=%d, state=%s\",\n-                generation, readPointer, pointer, GenerationSafePointerPair.pointerStateName( stateA ) );\n+      boolean isInternal = TreeNode.isInternal(cursor);\n+      String type = isInternal ? \"internal\" : \"leaf\";\n+      cursor.setCursorException(format(\n+          \"GSPP state found that was not ok in %s field in %s node with id %d%n  slotA[%s]%n  slotB[%s]\",\n+          pointerFieldName, type, currentNodeId,\n+          stateToString(generationA, readPointerA, pointerA, stateA),\n+          stateToString(generationB, readPointerB, pointerB, stateB)));\n     }\n+  }\n+\n+  private static String stateToString(long generation, long readPointer, long pointer, byte stateA)\n+  {\n+    return format(\"generation=%d, readPointer=%d, pointer=%d, state=%s\",\n+        generation, readPointer, pointer, GenerationSafePointerPair.pointerStateName(stateA));\n+  }\n \n-    private static class KeyRange<KEY>\n+  private static class KeyRange<KEY>\n+  {\n+    private final Comparator<KEY> comparator;\n+    private final KEY fromInclusive;\n+    private final KEY toExclusive;\n+    private final Layout<KEY, ?> layout;\n+    private final KeyRange<KEY> superRange;\n+\n+    private KeyRange(Comparator<KEY> comparator, KEY fromInclusive, KEY toExclusive, Layout<KEY, ?> layout,\n+                     KeyRange<KEY> superRange)\n     {\n-        private final Comparator<KEY> comparator;\n-        private final KEY fromInclusive;\n-        private final KEY toExclusive;\n-        private final Layout<KEY,?> layout;\n-        private final KeyRange<KEY> superRange;\n-\n-        private KeyRange( Comparator<KEY> comparator, KEY fromInclusive, KEY toExclusive, Layout<KEY,?> layout,\n-                KeyRange<KEY> superRange )\n-        {\n-            this.comparator = comparator;\n-            this.superRange = superRange;\n-            this.fromInclusive = fromInclusive == null ? null : layout.copyKey( fromInclusive, layout.newKey() );\n-            this.toExclusive = toExclusive == null ? null : layout.copyKey( toExclusive, layout.newKey() );\n-            this.layout = layout;\n-        }\n+      this.comparator = comparator;\n+      this.superRange = superRange;\n+      this.fromInclusive = fromInclusive == null ? null : layout.copyKey(fromInclusive, layout.newKey());\n+      this.toExclusive = toExclusive == null ? null : layout.copyKey(toExclusive, layout.newKey());\n+      this.layout = layout;\n+    }\n \n-        boolean inRange( KEY key )\n+    boolean inRange(KEY key)\n+    {\n+      if (fromInclusive != null)\n+      {\n+        if (toExclusive != null)\n         {\n-            if ( fromInclusive != null )\n-            {\n-                if ( toExclusive != null )\n-                {\n-                    return comparator.compare( key, fromInclusive ) >= 0 && comparator.compare( key, toExclusive ) < 0;\n-                }\n-                return comparator.compare( key, fromInclusive ) >= 0;\n-            }\n-            return toExclusive == null || comparator.compare( key, toExclusive ) < 0;\n+          return comparator.compare(key, fromInclusive) >= 0 && comparator.compare(key, toExclusive) < 0;\n         }\n+        return comparator.compare(key, fromInclusive) >= 0;\n+      }\n+      return toExclusive == null || comparator.compare(key, toExclusive) < 0;\n+    }\n \n-        KeyRange<KEY> restrictLeft( KEY left )\n-        {\n-            if ( fromInclusive == null )\n-            {\n-                return new KeyRange<>( comparator, left, toExclusive, layout, this );\n-            }\n-            if ( left == null )\n-            {\n-                return new KeyRange<>( comparator, fromInclusive, toExclusive, layout, this );\n-            }\n-            if ( comparator.compare( fromInclusive, left ) < 0 )\n-            {\n-                return new KeyRange<>( comparator, left, toExclusive, layout, this );\n-            }\n-            return new KeyRange<>( comparator, fromInclusive, toExclusive, layout, this );\n-        }\n+    KeyRange<KEY> restrictLeft(KEY left)\n+    {\n+      if (fromInclusive == null)\n+      {\n+        return new KeyRange<>(comparator, left, toExclusive, layout, this);\n+      }\n+      if (left == null)\n+      {\n+        return new KeyRange<>(comparator, fromInclusive, toExclusive, layout, this);\n+      }\n+      if (comparator.compare(fromInclusive, left) < 0)\n+      {\n+        return new KeyRange<>(comparator, left, toExclusive, layout, this);\n+      }\n+      return new KeyRange<>(comparator, fromInclusive, toExclusive, layout, this);\n+    }\n \n-        KeyRange<KEY> restrictRight( KEY right )\n-        {\n-            if ( toExclusive == null )\n-            {\n-                return new KeyRange<>( comparator, fromInclusive, right, layout, this );\n-            }\n-            if ( right == null )\n-            {\n-                return new KeyRange<>( comparator, fromInclusive, toExclusive, layout, this );\n-            }\n-            if ( comparator.compare( toExclusive, right ) > 0 )\n-            {\n-                return new KeyRange<>( comparator, fromInclusive, right, layout, this );\n-            }\n-            return new KeyRange<>( comparator, fromInclusive, toExclusive, layout, this );\n-        }\n+    KeyRange<KEY> restrictRight(KEY right)\n+    {\n+      if (toExclusive == null)\n+      {\n+        return new KeyRange<>(comparator, fromInclusive, right, layout, this);\n+      }\n+      if (right == null)\n+      {\n+        return new KeyRange<>(comparator, fromInclusive, toExclusive, layout, this);\n+      }\n+      if (comparator.compare(toExclusive, right) > 0)\n+      {\n+        return new KeyRange<>(comparator, fromInclusive, right, layout, this);\n+      }\n+      return new KeyRange<>(comparator, fromInclusive, toExclusive, layout, this);\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return (superRange != null ? format( \"%s%n\", superRange ) : \"\") + fromInclusive + \" \u2264 key < \" + toExclusive;\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return (superRange != null ? format(\"%s%n\", superRange) : \"\") + fromInclusive + \" \u2264 key < \" + toExclusive;\n     }\n+  }\n }\n",
            "diff_size": 725
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "149",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "8",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "305",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "422",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "467",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/69/ConsistencyChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/69/ConsistencyChecker.java\nindex 523740ababc..f3b704179c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/69/ConsistencyChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/69/ConsistencyChecker.java\n@@ -132,12 +132,12 @@ class ConsistencyChecker<KEY>\n             }\n         }\n         while ( cursor.shouldRetry() );\n-\n-        if ( isInternal )\n+if ( isInternal )\n         {\n             TreeNode.goTo( cursor, \"child\", leftmostSibling );\n         }\n-        return isInternal;\n+\n+return isInternal;\n     }\n \n     private static void assertAllIdsOccupied( long highId, BitSet seenIds )\n@@ -146,7 +146,7 @@ class ConsistencyChecker<KEY>\n         if ( seenIds.cardinality() != expectedNumberOfPages )\n         {\n             StringBuilder builder = new StringBuilder( \"[\" );\n-            int index = (int) IdSpace.MIN_TREE_NODE_ID;\n+            int index = ( int) IdSpace.MIN_TREE_NODE_ID;\n             int count = 0;\n             while ( index >= 0 && index < highId )\n             {\n@@ -176,8 +176,7 @@ class ConsistencyChecker<KEY>\n                 rightSibling = TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n             }\n             while ( cursor.shouldRetry() );\n-\n-            if ( TreeNode.isNode( rightSibling ) )\n+if ( TreeNode.isNode( rightSibling ) )\n             {\n                 TreeNode.goTo( cursor, \"right sibling\", rightSibling );\n                 addToSeenList( seenIds, pointer( rightSibling ), lastId );\n@@ -193,7 +192,8 @@ class ConsistencyChecker<KEY>\n         {\n             throw new IllegalStateException( id + \" already seen\" );\n         }\n-        if ( id > lastId )\n+\n+if ( id> lastId )\n         {\n             throw new IllegalStateException( \"Unexpectedly high id \" + id + \" seen when last id is \" + lastId );\n         }\n@@ -212,22 +212,19 @@ class ConsistencyChecker<KEY>\n             isLeaf = TreeNode.isLeaf( cursor );\n         }\n         while ( cursor.shouldRetry() );\n-\n-        if ( nodeType != TreeNode.NODE_TYPE_TREE_NODE )\n+if ( nodeType != TreeNode.NODE_TYPE_TREE_NODE )\n         {\n-            throw new IllegalArgumentException( \"Cursor is not pinned to a tree node page. pageId:\" +\n-                    cursor.getCurrentPageId() );\n+            throw new IllegalArgumentException( \"Cursor is not pinned to a tree node page. pageId:\" + cursor.getCurrentPageId() );\n         }\n-        if ( !isInternal && !isLeaf )\n+\n+if ( !isInternal && !isLeaf )\n         {\n-            throw new IllegalArgumentException( \"Cursor is not pinned to a page containing a tree node. pageId:\" +\n-                    cursor.getCurrentPageId() );\n-        }\n+            throw new IllegalArgumentException( \"Cursor is not pinned to a page containing a tree node. pageId:\" + cursor.getCurrentPageId() );\n+    }\n     }\n \n-    private boolean checkSubtree( PageCursor cursor, KeyRange<KEY> range, long expectedGeneration, int level )\n-            throws IOException\n-    {\n+    private boolean checkSubtree( PageCursor cursor, KeyRange<KEY> range, long expectedGeneration, int level ) throws IOException\n+{\n         boolean isInternal = false;\n         boolean isLeaf = false;\n         int keyCount;\n@@ -243,14 +240,10 @@ class ConsistencyChecker<KEY>\n         do\n         {\n             // check header pointers\n-            assertNoCrashOrBrokenPointerInGSPP(\n-                    cursor, stableGeneration, unstableGeneration, \"LeftSibling\", TreeNode.BYTE_POS_LEFTSIBLING );\n-            assertNoCrashOrBrokenPointerInGSPP(\n-                    cursor, stableGeneration, unstableGeneration, \"RightSibling\", TreeNode.BYTE_POS_RIGHTSIBLING );\n-            assertNoCrashOrBrokenPointerInGSPP(\n-                    cursor, stableGeneration, unstableGeneration, \"Successor\", TreeNode.BYTE_POS_SUCCESSOR );\n-\n-            // for assertSiblings\n+            assertNoCrashOrBrokenPointerInGSPP( cursor, stableGeneration, unstableGeneration, \"LeftSibling\", TreeNode.BYTE_POS_LEFTSIBLING );\n+assertNoCrashOrBrokenPointerInGSPP( cursor, stableGeneration, unstableGeneration, \"RightSibling\", TreeNode.BYTE_POS_RIGHTSIBLING );\n+assertNoCrashOrBrokenPointerInGSPP( cursor, stableGeneration, unstableGeneration, \"Successor\", TreeNode.BYTE_POS_SUCCESSOR );\n+    // for assertSiblings\n             leftSiblingPointer = TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration );\n             rightSiblingPointer = TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n             leftSiblingPointerGeneration = node.pointerGeneration( cursor, leftSiblingPointer );\n@@ -258,26 +251,23 @@ class ConsistencyChecker<KEY>\n             leftSiblingPointer = pointer( leftSiblingPointer );\n             rightSiblingPointer = pointer( rightSiblingPointer );\n             currentNodeGeneration = TreeNode.generation( cursor );\n-\n-            successor = TreeNode.successor( cursor, stableGeneration, unstableGeneration );\n+successor = TreeNode.successor( cursor, stableGeneration, unstableGeneration );\n             successorGeneration = node.pointerGeneration( cursor, successor );\n-\n-            keyCount = TreeNode.keyCount( cursor );\n+keyCount = TreeNode.keyCount( cursor );\n             if ( !node.reasonableKeyCount( keyCount ) )\n             {\n                 cursor.setCursorException( \"Unexpected keyCount:\" + keyCount );\n                 continue;\n             }\n-            isInternal = TreeNode.isInternal( cursor );\n+\n+isInternal = TreeNode.isInternal( cursor );\n             isLeaf = TreeNode.isLeaf( cursor );\n         }\n         while ( cursor.shouldRetry() );\n         checkAfterShouldRetry( cursor );\n-\n-        if ( !isInternal && !isLeaf )\n+if ( !isInternal && !isLeaf )\n         {\n-            throw new TreeInconsistencyException( \"Page:\" + cursor.getCurrentPageId() + \" at level:\" + level +\n-                    \" isn't a tree node, parent expected range \" + range );\n+            throw new TreeInconsistencyException( \"Page:\" + cursor.getCurrentPageId() + \" at level:\" + level + \" isn't a tree node, parent expected range \" + range );\n         }\n \n         do\n@@ -290,9 +280,8 @@ class ConsistencyChecker<KEY>\n         assertPointerGenerationMatchesGeneration( cursor, currentNodeGeneration, expectedGeneration );\n         assertSiblings( cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n                 rightSiblingPointerGeneration, level );\n-        checkSuccessorPointerGeneration( cursor, successor, successorGeneration );\n-\n-        if ( isInternal )\n+checkSuccessorPointerGeneration( cursor, successor, successorGeneration );\n+if ( isInternal )\n         {\n             assertSubtrees( cursor, range, keyCount, level );\n         }\n@@ -302,21 +291,19 @@ class ConsistencyChecker<KEY>\n     private static void assertPointerGenerationMatchesGeneration( PageCursor cursor, long nodeGeneration,\n             long expectedGeneration )\n     {\n-        if ( nodeGeneration > expectedGeneration )\n+        if ( nodeGeneration> expectedGeneration )\n         {\n             throw new TreeInconsistencyException( \"Expected node:%d generation:%d to be \u2264 pointer generation:%d\", cursor.getCurrentPageId(), nodeGeneration,\n                     expectedGeneration );\n-        }\n+    }\n     }\n \n-    private void checkSuccessorPointerGeneration( PageCursor cursor, long successor, long successorGeneration )\n-            throws IOException\n-    {\n+    private void checkSuccessorPointerGeneration( PageCursor cursor, long successor, long successorGeneration ) throws IOException\n+{\n         if ( TreeNode.isNode( successor ) )\n         {\n-            cursor.setCursorException( \"WARNING: we ended up on an old generation \" + cursor.getCurrentPageId() +\n-                    \" which had successor:\" + pointer( successor ) );\n-            long origin = cursor.getCurrentPageId();\n+            cursor.setCursorException( \"WARNING: we ended up on an old generation \" + cursor.getCurrentPageId() + \" which had successor:\" + pointer( successor ) );\n+    long origin = cursor.getCurrentPageId();\n             TreeNode.goTo( cursor, \"successor\", successor );\n             try\n             {\n@@ -346,15 +333,14 @@ class ConsistencyChecker<KEY>\n         {\n             rightmostPerLevel.add( i, new RightmostInChain() );\n         }\n-        RightmostInChain rightmost = rightmostPerLevel.get( level );\n \n-        rightmost.assertNext( cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n+RightmostInChain rightmost = rightmostPerLevel.get( level );\n+rightmost.assertNext( cursor, currentNodeGeneration, leftSiblingPointer, leftSiblingPointerGeneration, rightSiblingPointer,\n                 rightSiblingPointerGeneration );\n     }\n \n-    private void assertSubtrees( PageCursor cursor, KeyRange<KEY> range, int keyCount, int level )\n-            throws IOException\n-    {\n+    private void assertSubtrees( PageCursor cursor, KeyRange<KEY> range, int keyCount, int level ) throws IOException\n+{\n         long pageId = cursor.getCurrentPageId();\n         KEY prev = null;\n         KeyRange<KEY> childRange;\n@@ -373,8 +359,7 @@ class ConsistencyChecker<KEY>\n             }\n             while ( cursor.shouldRetry() );\n             checkAfterShouldRetry( cursor );\n-\n-            childRange = range.restrictRight( readKey );\n+childRange = range.restrictRight( readKey );\n             if ( pos > 0 )\n             {\n                 childRange = range.restrictLeft( prev );\n@@ -382,10 +367,8 @@ class ConsistencyChecker<KEY>\n \n             TreeNode.goTo( cursor, \"child at pos \" + pos, child );\n             checkSubtree( cursor, childRange, childGeneration, level + 1 );\n-\n-            TreeNode.goTo( cursor, \"parent\", pageId );\n-\n-            if ( pos == 0 )\n+TreeNode.goTo( cursor, \"parent\", pageId );\n+if ( pos == 0 )\n             {\n                 prev = layout.newKey();\n             }\n@@ -409,8 +392,7 @@ class ConsistencyChecker<KEY>\n         }\n         while ( cursor.shouldRetry() );\n         checkAfterShouldRetry( cursor );\n-\n-        TreeNode.goTo( cursor, \"child at pos \" + pos, child );\n+TreeNode.goTo( cursor, \"child at pos \" + pos, child );\n         childRange = range.restrictLeft( prev );\n         checkSubtree( cursor, childRange, childGeneration, level + 1 );\n         TreeNode.goTo( cursor, \"parent\", pageId );\n@@ -424,9 +406,8 @@ class ConsistencyChecker<KEY>\n \n     private long childAt( PageCursor cursor, int pos )\n     {\n-        assertNoCrashOrBrokenPointerInGSPP(\n-                cursor, stableGeneration, unstableGeneration, \"Child\", node.childOffset( pos ) );\n-        return node.childAt( cursor, pos, stableGeneration, unstableGeneration );\n+        assertNoCrashOrBrokenPointerInGSPP( cursor, stableGeneration, unstableGeneration, \"Child\", node.childOffset( pos ) );\n+return node.childAt( cursor, pos, stableGeneration, unstableGeneration );\n     }\n \n     private void assertKeyOrder( PageCursor cursor, KeyRange<KEY> range, int keyCount, TreeNode.Type type )\n@@ -438,11 +419,10 @@ class ConsistencyChecker<KEY>\n             node.keyAt( cursor, readKey, pos, type );\n             if ( !range.inRange( readKey ) )\n             {\n-                cursor.setCursorException(\n-                        format( \"Expected range for this node is %n%s%n but found %s in position %d, with keyCount %d on page %d\",\n-                        range, readKey, pos, keyCount, cursor.getCurrentPageId() ) );\n+                cursor.setCursorException( format( \"Expected range for this node is %n%s%n but found %s in position %d, with keyCount %d on page %d\", range, readKey, pos, keyCount, cursor.getCurrentPageId() ) );\n             }\n-            if ( !first )\n+\n+if ( !first )\n             {\n                 if ( comparator.compare( prev, readKey ) >= 0 )\n                 {\n@@ -468,9 +448,8 @@ class ConsistencyChecker<KEY>\n         long pointerA = GenerationSafePointerPair.pointer( readPointerA );\n         short checksumA = GenerationSafePointer.readChecksum( cursor );\n         boolean correctChecksumA = GenerationSafePointer.checksumOf( generationA, readPointerA ) == checksumA;\n-        byte stateA = GenerationSafePointerPair.pointerState(\n-                stableGeneration, unstableGeneration, generationA, readPointerA, correctChecksumA );\n-        boolean okA = stateA != GenerationSafePointerPair.BROKEN && stateA != GenerationSafePointerPair.CRASH;\n+        byte stateA = GenerationSafePointerPair.pointerState( stableGeneration, unstableGeneration, generationA, readPointerA, correctChecksumA );\n+    boolean okA = stateA != GenerationSafePointerPair.BROKEN && stateA != GenerationSafePointerPair.CRASH;\n \n         // B\n         long generationB = GenerationSafePointer.readGeneration( cursor );\n@@ -478,20 +457,16 @@ class ConsistencyChecker<KEY>\n         long pointerB = GenerationSafePointerPair.pointer( readPointerA );\n         short checksumB = GenerationSafePointer.readChecksum( cursor );\n         boolean correctChecksumB = GenerationSafePointer.checksumOf( generationB, readPointerB ) == checksumB;\n-        byte stateB = GenerationSafePointerPair.pointerState(\n-                stableGeneration, unstableGeneration, generationB, readPointerB, correctChecksumB );\n-        boolean okB = stateB != GenerationSafePointerPair.BROKEN && stateB != GenerationSafePointerPair.CRASH;\n+        byte stateB = GenerationSafePointerPair.pointerState( stableGeneration, unstableGeneration, generationB, readPointerB, correctChecksumB );\n+    boolean okB = stateB != GenerationSafePointerPair.BROKEN && stateB != GenerationSafePointerPair.CRASH;\n \n-        if ( !(okA && okB) )\n+        if ( !( okA && okB) )\n         {\n             boolean isInternal = TreeNode.isInternal( cursor );\n             String type = isInternal ? \"internal\" : \"leaf\";\n-            cursor.setCursorException( format(\n-                    \"GSPP state found that was not ok in %s field in %s node with id %d%n  slotA[%s]%n  slotB[%s]\",\n-                    pointerFieldName, type, currentNodeId,\n-                    stateToString( generationA, readPointerA, pointerA, stateA ),\n-                    stateToString( generationB, readPointerB, pointerB, stateB ) ) );\n-        }\n+            cursor.setCursorException( format( \"GSPP state found that was not ok in %s field in %s node with id %d%n  slotA[%s]%n  slotB[%s]\", pointerFieldName, type, currentNodeId,\n+                    stateToString( generationA, readPointerA, pointerA, stateA ), stateToString( generationB, readPointerB, pointerB, stateB ) ) );\n+    }\n     }\n \n     private static String stateToString( long generation, long readPointer, long pointer, byte stateA )\n@@ -508,8 +483,7 @@ class ConsistencyChecker<KEY>\n         private final Layout<KEY,?> layout;\n         private final KeyRange<KEY> superRange;\n \n-        private KeyRange( Comparator<KEY> comparator, KEY fromInclusive, KEY toExclusive, Layout<KEY,?> layout,\n-                KeyRange<KEY> superRange )\n+        private KeyRange( Comparator<KEY> comparator, KEY fromInclusive, KEY toExclusive, Layout<KEY,?> layout, KeyRange<KEY> superRange )\n         {\n             this.comparator = comparator;\n             this.superRange = superRange;\n@@ -526,9 +500,11 @@ class ConsistencyChecker<KEY>\n                 {\n                     return comparator.compare( key, fromInclusive ) >= 0 && comparator.compare( key, toExclusive ) < 0;\n                 }\n-                return comparator.compare( key, fromInclusive ) >= 0;\n+\n+return comparator.compare( key, fromInclusive ) >= 0;\n             }\n-            return toExclusive == null || comparator.compare( key, toExclusive ) < 0;\n+\n+return toExclusive == null || comparator.compare( key, toExclusive ) < 0;\n         }\n \n         KeyRange<KEY> restrictLeft( KEY left )\n@@ -537,11 +513,13 @@ class ConsistencyChecker<KEY>\n             {\n                 return new KeyRange<>( comparator, left, toExclusive, layout, this );\n             }\n-            if ( left == null )\n+\n+if ( left == null )\n             {\n                 return new KeyRange<>( comparator, fromInclusive, toExclusive, layout, this );\n             }\n-            if ( comparator.compare( fromInclusive, left ) < 0 )\n+\n+if ( comparator.compare( fromInclusive, left ) < 0 )\n             {\n                 return new KeyRange<>( comparator, left, toExclusive, layout, this );\n             }\n@@ -554,11 +532,13 @@ class ConsistencyChecker<KEY>\n             {\n                 return new KeyRange<>( comparator, fromInclusive, right, layout, this );\n             }\n-            if ( right == null )\n+\n+if ( right == null )\n             {\n                 return new KeyRange<>( comparator, fromInclusive, toExclusive, layout, this );\n             }\n-            if ( comparator.compare( toExclusive, right ) > 0 )\n+\n+if ( comparator.compare( toExclusive, right ) > 0 )\n             {\n                 return new KeyRange<>( comparator, fromInclusive, right, layout, this );\n             }\n@@ -571,4 +551,4 @@ class ConsistencyChecker<KEY>\n             return (superRange != null ? format( \"%s%n\", superRange ) : \"\") + fromInclusive + \" \u2264 key < \" + toExclusive;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 100
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}