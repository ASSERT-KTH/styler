{
    "project_name": "graphfoundation-ongdb",
    "error_id": "775",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "145",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/775/ExplicitIndexTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/775/ExplicitIndexTransactionApplier.java\nindex a1611d85e39..225d208f7b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/775/ExplicitIndexTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/775/ExplicitIndexTransactionApplier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.io.IOException;\n@@ -41,172 +42,173 @@ import static org.neo4j.graphdb.index.IndexManager.PROVIDER;\n public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n {\n \n-    // We have these two maps here for \"applier lookup\" performance reasons. Every command that we apply we must\n-    // redirect to the correct applier, i.e. the _single_ applier for the provider managing the specific index.\n-    // Looking up provider for an index has a certain cost so those are cached in applierByIndex.\n-    private Map<String/*indexName*/,TransactionApplier> applierByNodeIndex = Collections.emptyMap();\n-    private Map<String/*indexName*/,TransactionApplier> applierByRelationshipIndex = Collections.emptyMap();\n-    Map<String/*providerName*/,TransactionApplier> applierByProvider = Collections.emptyMap();\n-\n-    private final ExplicitIndexApplierLookup applierLookup;\n-    private final IndexConfigStore indexConfigStore;\n-    private final TransactionApplicationMode mode;\n-    private final IdOrderingQueue transactionOrdering;\n-    private IndexDefineCommand defineCommand;\n-    private long transactionId = -1;\n-\n-    public ExplicitIndexTransactionApplier( ExplicitIndexApplierLookup applierLookup,\n-            IndexConfigStore indexConfigStore, TransactionApplicationMode mode, IdOrderingQueue transactionOrdering )\n-    {\n-        this.applierLookup = applierLookup;\n-        this.indexConfigStore = indexConfigStore;\n-        this.mode = mode;\n-        this.transactionOrdering = transactionOrdering;\n-    }\n-\n-    /**\n-     * Ability to set transaction id allows the applier instance to be cached.\n-     * @param txId the currently active TransactionId\n-     */\n-    void setTransactionId( long txId )\n-    {\n-        this.transactionId = txId;\n-    }\n-\n-    /**\n-     * Get an applier suitable for the specified IndexCommand.\n-     */\n-    private TransactionApplier applier( IndexCommand command ) throws IOException\n-    {\n-        // Have we got an applier for this index?\n-        String indexName = defineCommand.getIndexName( command.getIndexNameId() );\n-        Map<String,TransactionApplier> applierByIndex = applierByIndexMap( command );\n-        TransactionApplier applier = applierByIndex.get( indexName );\n-        if ( applier == null )\n-        {\n-            // We don't. Have we got an applier for the provider of this index?\n-            IndexEntityType entityType = IndexEntityType.byId( command.getEntityType() );\n-            Map<String,String> config = indexConfigStore.get( entityType.entityClass(), indexName );\n-            if ( config == null )\n-            {\n-                // This provider doesn't even exist, return an EMPTY handler, i.e. ignore these changes.\n-                // Could be that the index provider is temporarily unavailable?\n-                return TransactionApplier.EMPTY;\n-            }\n-            String providerName = config.get( PROVIDER );\n-            applier = applierByProvider.get( providerName );\n-            if ( applier == null )\n-            {\n-                // We don't, so create the applier\n-                applier = applierLookup.newApplier( providerName, mode.needsIdempotencyChecks() );\n-                applier.visitIndexDefineCommand( defineCommand );\n-                applierByProvider.put( providerName, applier );\n-            }\n-\n-            // Also cache this applier for this index\n-            applierByIndex.put( indexName, applier );\n-        }\n-        return applier;\n-    }\n-\n-    // Some lazy creation of Maps for holding appliers per provider and index\n-    private Map<String,TransactionApplier> applierByIndexMap( IndexCommand command )\n-    {\n-        if ( command.getEntityType() == IndexEntityType.Node.id() )\n-        {\n-            if ( applierByNodeIndex.isEmpty() )\n-            {\n-                applierByNodeIndex = new HashMap<>();\n-                lazyCreateApplierByprovider();\n-            }\n-            return applierByNodeIndex;\n-        }\n-        if ( command.getEntityType() == IndexEntityType.Relationship.id() )\n-        {\n-            if ( applierByRelationshipIndex.isEmpty() )\n-            {\n-                applierByRelationshipIndex = new HashMap<>();\n-                lazyCreateApplierByprovider();\n-            }\n-            return applierByRelationshipIndex;\n-        }\n-        throw new UnsupportedOperationException( \"Unknown entity type \" + command.getEntityType() );\n-    }\n-\n-    private void lazyCreateApplierByprovider()\n+  // We have these two maps here for \"applier lookup\" performance reasons. Every command that we apply we must\n+  // redirect to the correct applier, i.e. the _single_ applier for the provider managing the specific index.\n+  // Looking up provider for an index has a certain cost so those are cached in applierByIndex.\n+  private Map<String/*indexName*/, TransactionApplier> applierByNodeIndex = Collections.emptyMap();\n+  private Map<String/*indexName*/, TransactionApplier> applierByRelationshipIndex = Collections.emptyMap();\n+  Map<String/*providerName*/, TransactionApplier> applierByProvider = Collections.emptyMap();\n+\n+  private final ExplicitIndexApplierLookup applierLookup;\n+  private final IndexConfigStore indexConfigStore;\n+  private final TransactionApplicationMode mode;\n+  private final IdOrderingQueue transactionOrdering;\n+  private IndexDefineCommand defineCommand;\n+  private long transactionId = -1;\n+\n+  public ExplicitIndexTransactionApplier(ExplicitIndexApplierLookup applierLookup,\n+                                         IndexConfigStore indexConfigStore, TransactionApplicationMode mode, IdOrderingQueue transactionOrdering)\n+  {\n+    this.applierLookup = applierLookup;\n+    this.indexConfigStore = indexConfigStore;\n+    this.mode = mode;\n+    this.transactionOrdering = transactionOrdering;\n+  }\n+\n+  /**\n+   * Ability to set transaction id allows the applier instance to be cached.\n+   *\n+   * @param txId the currently active TransactionId\n+   */\n+  void setTransactionId(long txId)\n+  {\n+    this.transactionId = txId;\n+  }\n+\n+  /**\n+   * Get an applier suitable for the specified IndexCommand.\n+   */\n+  private TransactionApplier applier(IndexCommand command) throws IOException\n+  {\n+    // Have we got an applier for this index?\n+    String indexName = defineCommand.getIndexName(command.getIndexNameId());\n+    Map<String, TransactionApplier> applierByIndex = applierByIndexMap(command);\n+    TransactionApplier applier = applierByIndex.get(indexName);\n+    if (applier == null)\n     {\n-        if ( applierByProvider.isEmpty() )\n-        {\n-            applierByProvider = new HashMap<>();\n-        }\n+      // We don't. Have we got an applier for the provider of this index?\n+      IndexEntityType entityType = IndexEntityType.byId(command.getEntityType());\n+      Map<String, String> config = indexConfigStore.get(entityType.entityClass(), indexName);\n+      if (config == null)\n+      {\n+        // This provider doesn't even exist, return an EMPTY handler, i.e. ignore these changes.\n+        // Could be that the index provider is temporarily unavailable?\n+        return TransactionApplier.EMPTY;\n+      }\n+      String providerName = config.get(PROVIDER);\n+      applier = applierByProvider.get(providerName);\n+      if (applier == null)\n+      {\n+        // We don't, so create the applier\n+        applier = applierLookup.newApplier(providerName, mode.needsIdempotencyChecks());\n+        applier.visitIndexDefineCommand(defineCommand);\n+        applierByProvider.put(providerName, applier);\n+      }\n+\n+      // Also cache this applier for this index\n+      applierByIndex.put(indexName, applier);\n     }\n+    return applier;\n+  }\n \n-    @Override\n-    public void close()\n+  // Some lazy creation of Maps for holding appliers per provider and index\n+  private Map<String, TransactionApplier> applierByIndexMap(IndexCommand command)\n+  {\n+    if (command.getEntityType() == IndexEntityType.Node.id())\n     {\n-        // Let other transactions in same batch run\n-        // Last transaction notifies on the batch level, to let appliers close before-hand.\n-        // Internal appliers are closed on the batch level (ExplicitIndexBatchApplier)\n-        notifyExplicitIndexOperationQueue();\n-\n+      if (applierByNodeIndex.isEmpty())\n+      {\n+        applierByNodeIndex = new HashMap<>();\n+        lazyCreateApplierByprovider();\n+      }\n+      return applierByNodeIndex;\n     }\n-\n-    private void notifyExplicitIndexOperationQueue()\n+    if (command.getEntityType() == IndexEntityType.Relationship.id())\n     {\n-        if ( transactionId != -1 )\n-        {\n-            transactionOrdering.removeChecked( transactionId );\n-            transactionId = -1;\n-        }\n+      if (applierByRelationshipIndex.isEmpty())\n+      {\n+        applierByRelationshipIndex = new HashMap<>();\n+        lazyCreateApplierByprovider();\n+      }\n+      return applierByRelationshipIndex;\n     }\n+    throw new UnsupportedOperationException(\"Unknown entity type \" + command.getEntityType());\n+  }\n \n-    @Override\n-    public boolean visitIndexAddNodeCommand( IndexCommand.AddNodeCommand command ) throws IOException\n+  private void lazyCreateApplierByprovider()\n+  {\n+    if (applierByProvider.isEmpty())\n     {\n-        return applier( command ).visitIndexAddNodeCommand( command );\n+      applierByProvider = new HashMap<>();\n     }\n+  }\n \n-    @Override\n-    public boolean visitIndexAddRelationshipCommand( IndexCommand.AddRelationshipCommand command ) throws IOException\n-    {\n-        return applier( command ).visitIndexAddRelationshipCommand( command );\n-    }\n+  @Override\n+  public void close()\n+  {\n+    // Let other transactions in same batch run\n+    // Last transaction notifies on the batch level, to let appliers close before-hand.\n+    // Internal appliers are closed on the batch level (ExplicitIndexBatchApplier)\n+    notifyExplicitIndexOperationQueue();\n \n-    @Override\n-    public boolean visitIndexRemoveCommand( IndexCommand.RemoveCommand command ) throws IOException\n-    {\n-        return applier( command ).visitIndexRemoveCommand( command );\n-    }\n+  }\n \n-    @Override\n-    public boolean visitIndexDeleteCommand( IndexCommand.DeleteCommand command ) throws IOException\n+  private void notifyExplicitIndexOperationQueue()\n+  {\n+    if (transactionId != -1)\n     {\n-        return applier( command ).visitIndexDeleteCommand( command );\n+      transactionOrdering.removeChecked(transactionId);\n+      transactionId = -1;\n     }\n-\n-    @Override\n-    public boolean visitIndexCreateCommand( IndexCommand.CreateCommand command ) throws IOException\n-    {\n-        indexConfigStore.setIfNecessary( IndexEntityType.byId( command.getEntityType() ).entityClass(),\n-                defineCommand.getIndexName( command.getIndexNameId() ), command.getConfig() );\n-        return applier( command ).visitIndexCreateCommand( command );\n-    }\n-\n-    @Override\n-    public boolean visitIndexDefineCommand( IndexDefineCommand command ) throws IOException\n-    {\n-        this.defineCommand = command;\n-        forward( command, applierByNodeIndex );\n-        forward( command, applierByRelationshipIndex );\n-        forward( command, applierByProvider );\n-        return false;\n-    }\n-\n-    private void forward( IndexDefineCommand definitions, Map<String,TransactionApplier> appliers ) throws IOException\n+  }\n+\n+  @Override\n+  public boolean visitIndexAddNodeCommand(IndexCommand.AddNodeCommand command) throws IOException\n+  {\n+    return applier(command).visitIndexAddNodeCommand(command);\n+  }\n+\n+  @Override\n+  public boolean visitIndexAddRelationshipCommand(IndexCommand.AddRelationshipCommand command) throws IOException\n+  {\n+    return applier(command).visitIndexAddRelationshipCommand(command);\n+  }\n+\n+  @Override\n+  public boolean visitIndexRemoveCommand(IndexCommand.RemoveCommand command) throws IOException\n+  {\n+    return applier(command).visitIndexRemoveCommand(command);\n+  }\n+\n+  @Override\n+  public boolean visitIndexDeleteCommand(IndexCommand.DeleteCommand command) throws IOException\n+  {\n+    return applier(command).visitIndexDeleteCommand(command);\n+  }\n+\n+  @Override\n+  public boolean visitIndexCreateCommand(IndexCommand.CreateCommand command) throws IOException\n+  {\n+    indexConfigStore.setIfNecessary(IndexEntityType.byId(command.getEntityType()).entityClass(),\n+        defineCommand.getIndexName(command.getIndexNameId()), command.getConfig());\n+    return applier(command).visitIndexCreateCommand(command);\n+  }\n+\n+  @Override\n+  public boolean visitIndexDefineCommand(IndexDefineCommand command) throws IOException\n+  {\n+    this.defineCommand = command;\n+    forward(command, applierByNodeIndex);\n+    forward(command, applierByRelationshipIndex);\n+    forward(command, applierByProvider);\n+    return false;\n+  }\n+\n+  private void forward(IndexDefineCommand definitions, Map<String, TransactionApplier> appliers) throws IOException\n+  {\n+    for (CommandVisitor applier : appliers.values())\n     {\n-        for ( CommandVisitor applier : appliers.values() )\n-        {\n-            applier.visitIndexDefineCommand( definitions );\n-        }\n+      applier.visitIndexDefineCommand(definitions);\n     }\n+  }\n }\n",
            "diff_size": 211
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/775/ExplicitIndexTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/775/ExplicitIndexTransactionApplier.java\nindex a1611d85e39..256969b358b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/775/ExplicitIndexTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/775/ExplicitIndexTransactionApplier.java\n@@ -40,7 +40,6 @@ import static org.neo4j.graphdb.index.IndexManager.PROVIDER;\n  */\n public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n {\n-\n     // We have these two maps here for \"applier lookup\" performance reasons. Every command that we apply we must\n     // redirect to the correct applier, i.e. the _single_ applier for the provider managing the specific index.\n     // Looking up provider for an index has a certain cost so those are cached in applierByIndex.\n@@ -93,7 +92,8 @@ public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n                 // Could be that the index provider is temporarily unavailable?\n                 return TransactionApplier.EMPTY;\n             }\n-            String providerName = config.get( PROVIDER );\n+\n+String providerName = config.get( PROVIDER );\n             applier = applierByProvider.get( providerName );\n             if ( applier == null )\n             {\n@@ -106,7 +106,8 @@ public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n             // Also cache this applier for this index\n             applierByIndex.put( indexName, applier );\n         }\n-        return applier;\n+\n+return applier;\n     }\n \n     // Some lazy creation of Maps for holding appliers per provider and index\n@@ -119,16 +120,19 @@ public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n                 applierByNodeIndex = new HashMap<>();\n                 lazyCreateApplierByprovider();\n             }\n-            return applierByNodeIndex;\n+\n+return applierByNodeIndex;\n         }\n-        if ( command.getEntityType() == IndexEntityType.Relationship.id() )\n+\n+if ( command.getEntityType() == IndexEntityType.Relationship.id() )\n         {\n             if ( applierByRelationshipIndex.isEmpty() )\n             {\n                 applierByRelationshipIndex = new HashMap<>();\n                 lazyCreateApplierByprovider();\n             }\n-            return applierByRelationshipIndex;\n+\n+return applierByRelationshipIndex;\n         }\n         throw new UnsupportedOperationException( \"Unknown entity type \" + command.getEntityType() );\n     }\n@@ -148,7 +152,6 @@ public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n         // Last transaction notifies on the batch level, to let appliers close before-hand.\n         // Internal appliers are closed on the batch level (ExplicitIndexBatchApplier)\n         notifyExplicitIndexOperationQueue();\n-\n     }\n \n     private void notifyExplicitIndexOperationQueue()\n@@ -187,16 +190,16 @@ public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n     @Override\n     public boolean visitIndexCreateCommand( IndexCommand.CreateCommand command ) throws IOException\n     {\n-        indexConfigStore.setIfNecessary( IndexEntityType.byId( command.getEntityType() ).entityClass(),\n-                defineCommand.getIndexName( command.getIndexNameId() ), command.getConfig() );\n-        return applier( command ).visitIndexCreateCommand( command );\n+        indexConfigStore.setIfNecessary( IndexEntityType.byId( command.getEntityType() ).entityClass(), defineCommand.getIndexName( command.getIndexNameId() ), command.getConfig() );\n+return applier( command ).visitIndexCreateCommand( command );\n     }\n \n     @Override\n     public boolean visitIndexDefineCommand( IndexDefineCommand command ) throws IOException\n     {\n         this.defineCommand = command;\n-        forward( command, applierByNodeIndex );\n+\n+forward( command, applierByNodeIndex );\n         forward( command, applierByRelationshipIndex );\n         forward( command, applierByProvider );\n         return false;\n@@ -209,4 +212,4 @@ public class ExplicitIndexTransactionApplier extends TransactionApplier.Adapter\n             applier.visitIndexDefineCommand( definitions );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}