{
    "project_name": "vostok-hercules",
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "54",
                "column": "49",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            }\n\n            if (stream instanceof DerivedStream){\n                for (String streamName : ((DerivedStream) stream).getStreams()) {\n                    result = NAME_VALIDATOR.validate(streamName);\n                    if (result.isError()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/33/StreamValidators.java\nindex 16559a6587e..8f7a7cee5dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/33/StreamValidators.java\n@@ -51,7 +51,7 @@ public final class StreamValidators {\n                 return ValidationResult.error(\"Description is invalid: \" + result.error());\n             }\n \n-            if (stream instanceof DerivedStream){\n+            if (stream instanceof DerivedStream) {\n                 for (String streamName : ((DerivedStream) stream).getStreams()) {\n                     result = NAME_VALIDATOR.validate(streamName);\n                     if (result.isError()) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/33/StreamValidators.java\nindex 16559a6587e..bb3bfcdc6c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/33/StreamValidators.java\n@@ -8,63 +8,62 @@ import ru.kontur.vostok.hercules.util.validation.ValidationResult;\n import ru.kontur.vostok.hercules.util.validation.Validator;\n \n /**\n- *\n  * @author Petr Demenev\n  */\n public final class StreamValidators {\n \n-    public static final Validator<String> DESCRIPTION_VALIDATOR =\n-            (desc) -> (desc == null || desc.length() < 1_000)\n-                    ? ValidationResult.ok()\n-                    : ValidationResult.error(\"The length of description has exceeded the limit of 1000\");\n+  public static final Validator<String> DESCRIPTION_VALIDATOR =\n+    (desc) -> (desc == null || desc.length() < 1_000)\n+      ? ValidationResult.ok()\n+      : ValidationResult.error(\"The length of description has exceeded the limit of 1000\");\n \n-    public static final Validator<Integer> PARTITION_VALIDATOR =\n-            (partition) -> (partition > 0 && partition <= 48)\n-                    ? ValidationResult.ok()\n-                    : ValidationResult.error(\"Value should be >0 and <=48\");\n+  public static final Validator<Integer> PARTITION_VALIDATOR =\n+    (partition) -> (partition > 0 && partition <= 48)\n+      ? ValidationResult.ok()\n+      : ValidationResult.error(\"Value should be >0 and <=48\");\n \n-    public static final Validator<Long> TTL_VALIDATOR = LongValidators.positive();\n+  public static final Validator<Long> TTL_VALIDATOR = LongValidators.positive();\n \n-    public static final Validator<String> NAME_VALIDATOR = StringValidators.matchesWith(\"[a-z0-9_]{1,48}\");\n+  public static final Validator<String> NAME_VALIDATOR = StringValidators.matchesWith(\"[a-z0-9_]{1,48}\");\n \n-    public static final Validator<Stream> STREAM_VALIDATOR = streamValidator();\n+  public static final Validator<Stream> STREAM_VALIDATOR = streamValidator();\n \n-    private static <T extends Stream> Validator<T> streamValidator() {\n-        return stream -> {\n-            ValidationResult result = NAME_VALIDATOR.validate(stream.getName());\n-            if (result.isError()) {\n-                return ValidationResult.error(\"Name is invalid: \" + result.error());\n-            }\n+  private static <T extends Stream> Validator<T> streamValidator() {\n+    return stream -> {\n+      ValidationResult result = NAME_VALIDATOR.validate(stream.getName());\n+      if (result.isError()) {\n+        return ValidationResult.error(\"Name is invalid: \" + result.error());\n+      }\n \n-            result = PARTITION_VALIDATOR.validate(stream.getPartitions());\n-            if (result.isError()) {\n-                return ValidationResult.error(\"Partition is invalid: \" + result.error());\n-            }\n+      result = PARTITION_VALIDATOR.validate(stream.getPartitions());\n+      if (result.isError()) {\n+        return ValidationResult.error(\"Partition is invalid: \" + result.error());\n+      }\n \n-            result = TTL_VALIDATOR.validate(stream.getTtl());\n-            if (result.isError()) {\n-                return ValidationResult.error(\"Ttl is invalid: \" + result.error());\n-            }\n+      result = TTL_VALIDATOR.validate(stream.getTtl());\n+      if (result.isError()) {\n+        return ValidationResult.error(\"Ttl is invalid: \" + result.error());\n+      }\n \n-            result = DESCRIPTION_VALIDATOR.validate(stream.getDescription());\n-            if (result.isError()) {\n-                return ValidationResult.error(\"Description is invalid: \" + result.error());\n-            }\n+      result = DESCRIPTION_VALIDATOR.validate(stream.getDescription());\n+      if (result.isError()) {\n+        return ValidationResult.error(\"Description is invalid: \" + result.error());\n+      }\n \n-            if (stream instanceof DerivedStream){\n-                for (String streamName : ((DerivedStream) stream).getStreams()) {\n-                    result = NAME_VALIDATOR.validate(streamName);\n-                    if (result.isError()) {\n-                        return ValidationResult.error(\"One of source streams is invalid: \" + result.error());\n-                    }\n-                }\n-            }\n+      if (stream instanceof DerivedStream) {\n+        for (String streamName : ((DerivedStream) stream).getStreams()) {\n+          result = NAME_VALIDATOR.validate(streamName);\n+          if (result.isError()) {\n+            return ValidationResult.error(\"One of source streams is invalid: \" + result.error());\n+          }\n+        }\n+      }\n \n-            return ValidationResult.ok();\n-        };\n-    }\n+      return ValidationResult.ok();\n+    };\n+  }\n \n-    private StreamValidators() {\n-        /* static class */\n-    }\n+  private StreamValidators() {\n+    /* static class */\n+  }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/33/StreamValidators.java\nindex 16559a6587e..15a1f35fa89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/33/StreamValidators.java\n@@ -13,17 +13,13 @@ import ru.kontur.vostok.hercules.util.validation.Validator;\n  */\n public final class StreamValidators {\n \n-    public static final Validator<String> DESCRIPTION_VALIDATOR =\n-            (desc) -> (desc == null || desc.length() < 1_000)\n+    public static final Validator<String> DESCRIPTION_VALIDATOR = (desc) -> (desc == null || desc.length() < 1_000)\n                     ? ValidationResult.ok()\n                     : ValidationResult.error(\"The length of description has exceeded the limit of 1000\");\n-\n-    public static final Validator<Integer> PARTITION_VALIDATOR =\n-            (partition) -> (partition > 0 && partition <= 48)\n+public static final Validator<Integer> PARTITION_VALIDATOR = (partition) -> (partition > 0 && partition <= 48)\n                     ? ValidationResult.ok()\n                     : ValidationResult.error(\"Value should be >0 and <=48\");\n-\n-    public static final Validator<Long> TTL_VALIDATOR = LongValidators.positive();\n+public static final Validator<Long> TTL_VALIDATOR = LongValidators.positive();\n \n     public static final Validator<String> NAME_VALIDATOR = StringValidators.matchesWith(\"[a-z0-9_]{1,48}\");\n \n@@ -51,7 +47,7 @@ public final class StreamValidators {\n                 return ValidationResult.error(\"Description is invalid: \" + result.error());\n             }\n \n-            if (stream instanceof DerivedStream){\n+            if (stream instanceof DerivedStream) {\n                 for (String streamName : ((DerivedStream) stream).getStreams()) {\n                     result = NAME_VALIDATOR.validate(streamName);\n                     if (result.isError()) {\n@@ -67,4 +63,4 @@ public final class StreamValidators {\n     private StreamValidators() {\n         /* static class */\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/33/StreamValidators.java\nindex 16559a6587e..24fac839235 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/33/StreamValidators.java\n@@ -11,24 +11,19 @@ import ru.kontur.vostok.hercules.util.validation.Validator;\n  *\n  * @author Petr Demenev\n  */\n+\n+\n public final class StreamValidators {\n \n-    public static final Validator<String> DESCRIPTION_VALIDATOR =\n-            (desc) -> (desc == null || desc.length() < 1_000)\n-                    ? ValidationResult.ok()\n-                    : ValidationResult.error(\"The length of description has exceeded the limit of 1000\");\n+    public static final Validator<String> DESCRIPTION_VALIDATOR = (desc) -> (desc == null || desc.length() < 1_000) ? ValidationResult.ok() : ValidationResult.error(\"The length of description has exceeded the limit of 1000\");\n \n-    public static final Validator<Integer> PARTITION_VALIDATOR =\n-            (partition) -> (partition > 0 && partition <= 48)\n-                    ? ValidationResult.ok()\n-                    : ValidationResult.error(\"Value should be >0 and <=48\");\n+    public static final Validator<Integer> PARTITION_VALIDATOR = (partition) -> (partition > 0 && partition <= 48) ? ValidationResult.ok() : ValidationResult.error(\"Value should be >0 and <=48\");\n \n     public static final Validator<Long> TTL_VALIDATOR = LongValidators.positive();\n \n     public static final Validator<String> NAME_VALIDATOR = StringValidators.matchesWith(\"[a-z0-9_]{1,48}\");\n \n     public static final Validator<Stream> STREAM_VALIDATOR = streamValidator();\n-\n     private static <T extends Stream> Validator<T> streamValidator() {\n         return stream -> {\n             ValidationResult result = NAME_VALIDATOR.validate(stream.getName());\n@@ -50,8 +45,7 @@ public final class StreamValidators {\n             if (result.isError()) {\n                 return ValidationResult.error(\"Description is invalid: \" + result.error());\n             }\n-\n-            if (stream instanceof DerivedStream){\n+            if (stream instanceof DerivedStream) {\n                 for (String streamName : ((DerivedStream) stream).getStreams()) {\n                     result = NAME_VALIDATOR.validate(streamName);\n                     if (result.isError()) {\n@@ -59,7 +53,6 @@ public final class StreamValidators {\n                     }\n                 }\n             }\n-\n             return ValidationResult.ok();\n         };\n     }\n@@ -67,4 +60,4 @@ public final class StreamValidators {\n     private StreamValidators() {\n         /* static class */\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/33/StreamValidators.java\nindex 16559a6587e..8f7a7cee5dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/33/StreamValidators.java\n@@ -51,7 +51,7 @@ public final class StreamValidators {\n                 return ValidationResult.error(\"Description is invalid: \" + result.error());\n             }\n \n-            if (stream instanceof DerivedStream){\n+            if (stream instanceof DerivedStream) {\n                 for (String streamName : ((DerivedStream) stream).getStreams()) {\n                     result = NAME_VALIDATOR.validate(streamName);\n                     if (result.isError()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/33/StreamValidators.java\nindex 16559a6587e..8f7a7cee5dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/33/StreamValidators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/33/StreamValidators.java\n@@ -51,7 +51,7 @@ public final class StreamValidators {\n                 return ValidationResult.error(\"Description is invalid: \" + result.error());\n             }\n \n-            if (stream instanceof DerivedStream){\n+            if (stream instanceof DerivedStream) {\n                 for (String streamName : ((DerivedStream) stream).getStreams()) {\n                     result = NAME_VALIDATOR.validate(streamName);\n                     if (result.isError()) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}