{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1228",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1228/ExplicitIndexStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1228/ExplicitIndexStore.java\nindex 28e5c841748..27684d654ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1228/ExplicitIndexStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1228/ExplicitIndexStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index;\n \n import java.util.Collections;\n@@ -49,245 +50,243 @@ import static org.neo4j.internal.kernel.api.security.LoginContext.AUTH_DISABLED;\n  */\n public class ExplicitIndexStore\n {\n-    private final IndexConfigStore indexStore;\n-    private final Config config;\n-    private final Function<String,IndexImplementation> indexProviders;\n-    private final Supplier<Kernel> kernel;\n+  private final IndexConfigStore indexStore;\n+  private final Config config;\n+  private final Function<String, IndexImplementation> indexProviders;\n+  private final Supplier<Kernel> kernel;\n \n-    public ExplicitIndexStore( @Nonnull Config config, IndexConfigStore indexStore, Supplier<Kernel> kernel,\n-            Function<String,IndexImplementation> indexProviders )\n-    {\n-        this.config = config;\n-        this.indexStore = indexStore;\n-        this.kernel = kernel;\n-        this.indexProviders = indexProviders;\n-    }\n+  public ExplicitIndexStore(@Nonnull Config config, IndexConfigStore indexStore, Supplier<Kernel> kernel,\n+                            Function<String, IndexImplementation> indexProviders)\n+  {\n+    this.config = config;\n+    this.indexStore = indexStore;\n+    this.kernel = kernel;\n+    this.indexProviders = indexProviders;\n+  }\n \n-    public Map<String, String> getOrCreateNodeIndexConfig( String indexName, Map<String, String> customConfiguration )\n-    {\n-        return getOrCreateIndexConfig( IndexEntityType.Node, indexName, customConfiguration );\n-    }\n+  public Map<String, String> getOrCreateNodeIndexConfig(String indexName, Map<String, String> customConfiguration)\n+  {\n+    return getOrCreateIndexConfig(IndexEntityType.Node, indexName, customConfiguration);\n+  }\n \n-    public Map<String, String> getOrCreateRelationshipIndexConfig( String indexName,\n-            Map<String, String> customConfiguration )\n-    {\n-        return getOrCreateIndexConfig( IndexEntityType.Relationship, indexName, customConfiguration );\n-    }\n+  public Map<String, String> getOrCreateRelationshipIndexConfig(String indexName,\n+                                                                Map<String, String> customConfiguration)\n+  {\n+    return getOrCreateIndexConfig(IndexEntityType.Relationship, indexName, customConfiguration);\n+  }\n \n-    private Map<String, String> findIndexConfig(\n-            Class<? extends PropertyContainer> cls, String indexName,\n-            Map<String, String> suppliedConfig, @Nonnull Config dbConfig )\n+  private Map<String, String> findIndexConfig(\n+      Class<? extends PropertyContainer> cls, String indexName,\n+      Map<String, String> suppliedConfig, @Nonnull Config dbConfig)\n+  {\n+    // Check stored config (has this index been created previously?)\n+    Map<String, String> storedConfig = indexStore.get(cls, indexName);\n+    if (storedConfig != null && suppliedConfig == null)\n     {\n-        // Check stored config (has this index been created previously?)\n-        Map<String, String> storedConfig = indexStore.get( cls, indexName );\n-        if ( storedConfig != null && suppliedConfig == null )\n-        {\n-            // Fill in \"provider\" if not already filled in, backwards compatibility issue\n-            Map<String, String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n-            if ( newConfig != storedConfig )\n-            {\n-                indexStore.set( cls, indexName, newConfig );\n-            }\n-            return newConfig;\n-        }\n-\n-        Map<String, String> configToUse = suppliedConfig;\n-\n-        // Check db config properties for provider\n-        String provider;\n-        IndexImplementation indexProvider;\n-        if ( configToUse == null )\n-        {\n-            provider = getDefaultProvider( indexName, dbConfig );\n-            configToUse = MapUtil.stringMap( PROVIDER, provider );\n-        }\n-        else\n-        {\n-            provider = configToUse.get( PROVIDER );\n-            provider = provider == null ? getDefaultProvider( indexName, dbConfig ) : provider;\n-        }\n-        indexProvider = indexProviders.apply( provider );\n-        configToUse = indexProvider.fillInDefaults( configToUse );\n-        configToUse = injectDefaultProviderIfMissing( indexName, dbConfig, configToUse );\n+      // Fill in \"provider\" if not already filled in, backwards compatibility issue\n+      Map<String, String> newConfig = injectDefaultProviderIfMissing(indexName, dbConfig, storedConfig);\n+      if (newConfig != storedConfig)\n+      {\n+        indexStore.set(cls, indexName, newConfig);\n+      }\n+      return newConfig;\n+    }\n \n-        // Do they match (stored vs. supplied)?\n-        if ( storedConfig != null )\n-        {\n-            assertConfigMatches( indexProvider, indexName, storedConfig, suppliedConfig );\n-            // Fill in \"provider\" if not already filled in, backwards compatibility issue\n-            Map<String, String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n-            if ( newConfig != storedConfig )\n-            {\n-                indexStore.set( cls, indexName, newConfig );\n-            }\n-            configToUse = newConfig;\n-        }\n+    Map<String, String> configToUse = suppliedConfig;\n \n-        return Collections.unmodifiableMap( configToUse );\n+    // Check db config properties for provider\n+    String provider;\n+    IndexImplementation indexProvider;\n+    if (configToUse == null)\n+    {\n+      provider = getDefaultProvider(indexName, dbConfig);\n+      configToUse = MapUtil.stringMap(PROVIDER, provider);\n+    } else\n+    {\n+      provider = configToUse.get(PROVIDER);\n+      provider = provider == null ? getDefaultProvider(indexName, dbConfig) : provider;\n     }\n+    indexProvider = indexProviders.apply(provider);\n+    configToUse = indexProvider.fillInDefaults(configToUse);\n+    configToUse = injectDefaultProviderIfMissing(indexName, dbConfig, configToUse);\n \n-    public static void assertConfigMatches( IndexImplementation indexProvider, String indexName,\n-                                      Map<String, String> storedConfig, Map<String, String> suppliedConfig )\n+    // Do they match (stored vs. supplied)?\n+    if (storedConfig != null)\n     {\n-        if ( suppliedConfig != null && !indexProvider.configMatches( storedConfig, suppliedConfig ) )\n-        {\n-            throw new IllegalArgumentException( \"Supplied index configuration:\\n\" +\n-                    suppliedConfig + \"\\ndoesn't match stored config in a valid way:\\n\" + storedConfig +\n-                    \"\\nfor '\" + indexName + \"'\" );\n-        }\n+      assertConfigMatches(indexProvider, indexName, storedConfig, suppliedConfig);\n+      // Fill in \"provider\" if not already filled in, backwards compatibility issue\n+      Map<String, String> newConfig = injectDefaultProviderIfMissing(indexName, dbConfig, storedConfig);\n+      if (newConfig != storedConfig)\n+      {\n+        indexStore.set(cls, indexName, newConfig);\n+      }\n+      configToUse = newConfig;\n     }\n \n-    @Nonnull\n-    private Map<String, String> injectDefaultProviderIfMissing( @Nullable String indexName, @Nonnull Config dbConfig,\n-            @Nonnull Map<String, String> config )\n+    return Collections.unmodifiableMap(configToUse);\n+  }\n+\n+  public static void assertConfigMatches(IndexImplementation indexProvider, String indexName,\n+                                         Map<String, String> storedConfig, Map<String, String> suppliedConfig)\n+  {\n+    if (suppliedConfig != null && !indexProvider.configMatches(storedConfig, suppliedConfig))\n     {\n-        String provider = config.get( PROVIDER );\n-        if ( provider == null )\n-        {\n-            config = new HashMap<>( config );\n-            config.put( PROVIDER, getDefaultProvider( indexName, dbConfig ) );\n-        }\n-        return config;\n+      throw new IllegalArgumentException(\"Supplied index configuration:\\n\" +\n+          suppliedConfig + \"\\ndoesn't match stored config in a valid way:\\n\" + storedConfig +\n+          \"\\nfor '\" + indexName + \"'\");\n     }\n+  }\n \n-    @Nonnull\n-    private String getDefaultProvider( @Nullable String indexName, @Nonnull Config dbConfig )\n+  @Nonnull\n+  private Map<String, String> injectDefaultProviderIfMissing(@Nullable String indexName, @Nonnull Config dbConfig,\n+                                                             @Nonnull Map<String, String> config)\n+  {\n+    String provider = config.get(PROVIDER);\n+    if (provider == null)\n     {\n-        return dbConfig.getRaw( \"index.\" + indexName )\n-                .orElseGet( () -> dbConfig.getRaw( \"index\" ).orElse( \"lucene\" ) );\n+      config = new HashMap<>(config);\n+      config.put(PROVIDER, getDefaultProvider(indexName, dbConfig));\n     }\n+    return config;\n+  }\n \n-    private Map<String, String> getOrCreateIndexConfig(\n-            IndexEntityType entityType, String indexName, Map<String, String> suppliedConfig )\n-    {\n-        Map<String,String> config = findIndexConfig(\n-                entityType.entityClass(), indexName, suppliedConfig, this.config );\n-        if ( !indexStore.has( entityType.entityClass(), indexName ) )\n-        {   // Ok, we need to create this config\n-            synchronized ( this )\n-            {   // Were we the first ones to get here?\n-                Map<String,String> existing = indexStore.get( entityType.entityClass(), indexName );\n-                if ( existing != null )\n-                {\n-                    // No, someone else made it before us, cool\n-                    assertConfigMatches(\n-                            indexProviders.apply( existing.get( PROVIDER ) ), indexName, existing, config );\n-                    return config;\n-                }\n+  @Nonnull\n+  private String getDefaultProvider(@Nullable String indexName, @Nonnull Config dbConfig)\n+  {\n+    return dbConfig.getRaw(\"index.\" + indexName)\n+        .orElseGet(() -> dbConfig.getRaw(\"index\").orElse(\"lucene\"));\n+  }\n+\n+  private Map<String, String> getOrCreateIndexConfig(\n+      IndexEntityType entityType, String indexName, Map<String, String> suppliedConfig)\n+  {\n+    Map<String, String> config = findIndexConfig(\n+        entityType.entityClass(), indexName, suppliedConfig, this.config);\n+    if (!indexStore.has(entityType.entityClass(), indexName))\n+    {   // Ok, we need to create this config\n+      synchronized (this)\n+      {   // Were we the first ones to get here?\n+        Map<String, String> existing = indexStore.get(entityType.entityClass(), indexName);\n+        if (existing != null)\n+        {\n+          // No, someone else made it before us, cool\n+          assertConfigMatches(\n+              indexProviders.apply(existing.get(PROVIDER)), indexName, existing, config);\n+          return config;\n+        }\n \n-                // We were the first one here, let's create this config\n-                try ( Session session = kernel.get().beginSession( AUTH_DISABLED );\n-                      Transaction transaction = session.beginTransaction( Transaction.Type.implicit );\n-                      Statement statement = ((KernelTransaction)transaction).acquireStatement() )\n-                {\n-                    switch ( entityType )\n-                    {\n-                    case Node:\n-                        transaction.indexWrite().nodeExplicitIndexCreate( indexName, config );\n-                        break;\n+        // We were the first one here, let's create this config\n+        try (Session session = kernel.get().beginSession(AUTH_DISABLED);\n+             Transaction transaction = session.beginTransaction(Transaction.Type.implicit);\n+             Statement statement = ((KernelTransaction) transaction).acquireStatement())\n+        {\n+          switch (entityType)\n+          {\n+            case Node:\n+              transaction.indexWrite().nodeExplicitIndexCreate(indexName, config);\n+              break;\n \n-                    case Relationship:\n-                        transaction.indexWrite().relationshipExplicitIndexCreate( indexName, config );\n-                        break;\n+            case Relationship:\n+              transaction.indexWrite().relationshipExplicitIndexCreate(indexName, config);\n+              break;\n \n-                    default:\n-                        throw new IllegalArgumentException( \"Unknown entity type: \" + entityType );\n-                    }\n+            default:\n+              throw new IllegalArgumentException(\"Unknown entity type: \" + entityType);\n+          }\n \n-                    transaction.success();\n-                }\n-                catch ( Exception ex )\n-                {\n-                    throw new TransactionFailureException(\n-                            \"Index creation failed for \" + indexName + \", \" + config, ex );\n-                }\n-            }\n+          transaction.success();\n+        } catch (Exception ex)\n+        {\n+          throw new TransactionFailureException(\n+              \"Index creation failed for \" + indexName + \", \" + config, ex);\n         }\n-        return config;\n+      }\n     }\n+    return config;\n+  }\n \n-    public String setNodeIndexConfiguration( String indexName, String key, String value )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n-        assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n-        String oldValue = config.put( key, value );\n-        indexStore.set( Node.class, indexName, config );\n-        return oldValue;\n-    }\n+  public String setNodeIndexConfiguration(String indexName, String key, String value)\n+      throws ExplicitIndexNotFoundKernelException\n+  {\n+    assertLegalConfigKey(key);\n+    Map<String, String> config = new HashMap<>(getNodeIndexConfiguration(indexName));\n+    String oldValue = config.put(key, value);\n+    indexStore.set(Node.class, indexName, config);\n+    return oldValue;\n+  }\n \n-    public String setRelationshipIndexConfiguration( String indexName, String key, String value )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n-        assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n-        String oldValue = config.put( key, value );\n-        indexStore.set( Relationship.class, indexName, config );\n-        return oldValue;\n-    }\n+  public String setRelationshipIndexConfiguration(String indexName, String key, String value)\n+      throws ExplicitIndexNotFoundKernelException\n+  {\n+    assertLegalConfigKey(key);\n+    Map<String, String> config = new HashMap<>(getRelationshipIndexConfiguration(indexName));\n+    String oldValue = config.put(key, value);\n+    indexStore.set(Relationship.class, indexName, config);\n+    return oldValue;\n+  }\n \n-    public String removeNodeIndexConfiguration( String indexName, String key )\n-            throws ExplicitIndexNotFoundKernelException\n+  public String removeNodeIndexConfiguration(String indexName, String key)\n+      throws ExplicitIndexNotFoundKernelException\n+  {\n+    assertLegalConfigKey(key);\n+    Map<String, String> config = new HashMap<>(getNodeIndexConfiguration(indexName));\n+    String value = config.remove(key);\n+    if (value != null)\n     {\n-        assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n-        String value = config.remove( key );\n-        if ( value != null )\n-        {\n-            indexStore.set( Node.class, indexName, config );\n-        }\n-        return value;\n+      indexStore.set(Node.class, indexName, config);\n     }\n+    return value;\n+  }\n \n-    public String removeRelationshipIndexConfiguration( String indexName, String key )\n-            throws ExplicitIndexNotFoundKernelException\n+  public String removeRelationshipIndexConfiguration(String indexName, String key)\n+      throws ExplicitIndexNotFoundKernelException\n+  {\n+    assertLegalConfigKey(key);\n+    Map<String, String> config = new HashMap<>(getRelationshipIndexConfiguration(indexName));\n+    String value = config.remove(key);\n+    if (value != null)\n     {\n-        assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n-        String value = config.remove( key );\n-        if ( value != null )\n-        {\n-            indexStore.set( Relationship.class, indexName, config );\n-        }\n-        return value;\n+      indexStore.set(Relationship.class, indexName, config);\n     }\n+    return value;\n+  }\n \n-    public Map<String, String> getNodeIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n+  public Map<String, String> getNodeIndexConfiguration(String indexName) throws ExplicitIndexNotFoundKernelException\n+  {\n+    Map<String, String> config = indexStore.get(Node.class, indexName);\n+    if (config == null)\n     {\n-        Map<String, String> config = indexStore.get( Node.class, indexName );\n-        if ( config == null )\n-        {\n-            throw new ExplicitIndexNotFoundKernelException( \"No node index '\" + indexName + \"' found\" );\n-        }\n-        return config;\n+      throw new ExplicitIndexNotFoundKernelException(\"No node index '\" + indexName + \"' found\");\n     }\n+    return config;\n+  }\n \n-    public Map<String, String> getRelationshipIndexConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException\n+  public Map<String, String> getRelationshipIndexConfiguration(String indexName)\n+      throws ExplicitIndexNotFoundKernelException\n+  {\n+    Map<String, String> config = indexStore.get(Relationship.class, indexName);\n+    if (config == null)\n     {\n-        Map<String, String> config = indexStore.get( Relationship.class, indexName );\n-        if ( config == null )\n-        {\n-            throw new ExplicitIndexNotFoundKernelException( \"No relationship index '\" + indexName + \"' found\" );\n-        }\n-        return config;\n+      throw new ExplicitIndexNotFoundKernelException(\"No relationship index '\" + indexName + \"' found\");\n     }\n+    return config;\n+  }\n \n-    private void assertLegalConfigKey( String key )\n+  private void assertLegalConfigKey(String key)\n+  {\n+    if (key.equals(PROVIDER))\n     {\n-        if ( key.equals( PROVIDER ) )\n-        {\n-            throw new IllegalArgumentException( \"'\" + key + \"' cannot be modified\" );\n-        }\n+      throw new IllegalArgumentException(\"'\" + key + \"' cannot be modified\");\n     }\n+  }\n \n-    public String[] getAllNodeIndexNames()\n-    {\n-        return indexStore.getNames( Node.class );\n-    }\n+  public String[] getAllNodeIndexNames()\n+  {\n+    return indexStore.getNames(Node.class);\n+  }\n \n-    public String[] getAllRelationshipIndexNames()\n-    {\n-        return indexStore.getNames( Relationship.class );\n-    }\n+  public String[] getAllRelationshipIndexNames()\n+  {\n+    return indexStore.getNames(Relationship.class);\n+  }\n }\n",
            "diff_size": 265
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1228/ExplicitIndexStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1228/ExplicitIndexStore.java\nindex 28e5c841748..f3bd770fc46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1228/ExplicitIndexStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1228/ExplicitIndexStore.java\n@@ -54,8 +54,7 @@ public class ExplicitIndexStore\n     private final Function<String,IndexImplementation> indexProviders;\n     private final Supplier<Kernel> kernel;\n \n-    public ExplicitIndexStore( @Nonnull Config config, IndexConfigStore indexStore, Supplier<Kernel> kernel,\n-            Function<String,IndexImplementation> indexProviders )\n+    public ExplicitIndexStore( @Nonnull Config config, IndexConfigStore indexStore, Supplier<Kernel> kernel, Function<String,IndexImplementation> indexProviders )\n     {\n         this.config = config;\n         this.indexStore = indexStore;\n@@ -63,35 +62,33 @@ public class ExplicitIndexStore\n         this.indexProviders = indexProviders;\n     }\n \n-    public Map<String, String> getOrCreateNodeIndexConfig( String indexName, Map<String, String> customConfiguration )\n+    public Map<String,String> getOrCreateNodeIndexConfig( String indexName, Map<String,String> customConfiguration )\n     {\n         return getOrCreateIndexConfig( IndexEntityType.Node, indexName, customConfiguration );\n     }\n \n-    public Map<String, String> getOrCreateRelationshipIndexConfig( String indexName,\n-            Map<String, String> customConfiguration )\n+    public Map<String,String> getOrCreateRelationshipIndexConfig( String indexName, Map<String,String> customConfiguration )\n     {\n         return getOrCreateIndexConfig( IndexEntityType.Relationship, indexName, customConfiguration );\n     }\n \n-    private Map<String, String> findIndexConfig(\n-            Class<? extends PropertyContainer> cls, String indexName,\n-            Map<String, String> suppliedConfig, @Nonnull Config dbConfig )\n+    private Map<String,String> findIndexConfig( Class<? extends PropertyContainer> cls, String indexName, Map<String,String> suppliedConfig, @Nonnull Config dbConfig )\n     {\n         // Check stored config (has this index been created previously?)\n-        Map<String, String> storedConfig = indexStore.get( cls, indexName );\n+        Map<String,String> storedConfig = indexStore.get( cls, indexName );\n         if ( storedConfig != null && suppliedConfig == null )\n         {\n             // Fill in \"provider\" if not already filled in, backwards compatibility issue\n-            Map<String, String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n+            Map<String,String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n             if ( newConfig != storedConfig )\n             {\n                 indexStore.set( cls, indexName, newConfig );\n             }\n-            return newConfig;\n+\n+return newConfig;\n         }\n \n-        Map<String, String> configToUse = suppliedConfig;\n+        Map<String,String> configToUse = suppliedConfig;\n \n         // Check db config properties for provider\n         String provider;\n@@ -106,7 +103,8 @@ public class ExplicitIndexStore\n             provider = configToUse.get( PROVIDER );\n             provider = provider == null ? getDefaultProvider( indexName, dbConfig ) : provider;\n         }\n-        indexProvider = indexProviders.apply( provider );\n+\n+indexProvider = indexProviders.apply( provider );\n         configToUse = indexProvider.fillInDefaults( configToUse );\n         configToUse = injectDefaultProviderIfMissing( indexName, dbConfig, configToUse );\n \n@@ -115,31 +113,29 @@ public class ExplicitIndexStore\n         {\n             assertConfigMatches( indexProvider, indexName, storedConfig, suppliedConfig );\n             // Fill in \"provider\" if not already filled in, backwards compatibility issue\n-            Map<String, String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n+            Map<String,String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n             if ( newConfig != storedConfig )\n             {\n                 indexStore.set( cls, indexName, newConfig );\n             }\n-            configToUse = newConfig;\n+\n+configToUse = newConfig;\n         }\n \n         return Collections.unmodifiableMap( configToUse );\n     }\n \n-    public static void assertConfigMatches( IndexImplementation indexProvider, String indexName,\n-                                      Map<String, String> storedConfig, Map<String, String> suppliedConfig )\n-    {\n+    public static void assertConfigMatches( IndexImplementation indexProvider, String indexName, Map<String,String> storedConfig, Map<String,String> suppliedConfig )\n+{\n         if ( suppliedConfig != null && !indexProvider.configMatches( storedConfig, suppliedConfig ) )\n         {\n-            throw new IllegalArgumentException( \"Supplied index configuration:\\n\" +\n-                    suppliedConfig + \"\\ndoesn't match stored config in a valid way:\\n\" + storedConfig +\n-                    \"\\nfor '\" + indexName + \"'\" );\n-        }\n+            throw new IllegalArgumentException( \"Supplied index configuration:\\n\" + suppliedConfig + \"\\ndoesn't match stored config in a valid way:\\n\" + storedConfig + \"\\nfor '\" + indexName + \"'\" );\n+    }\n     }\n \n     @Nonnull\n-    private Map<String, String> injectDefaultProviderIfMissing( @Nullable String indexName, @Nonnull Config dbConfig,\n-            @Nonnull Map<String, String> config )\n+    private Map<String,String> injectDefaultProviderIfMissing( @Nullable String indexName, @Nonnull Config dbConfig,\n+            @Nonnull Map<String,String> config )\n     {\n         String provider = config.get( PROVIDER );\n         if ( provider == null )\n@@ -147,50 +143,47 @@ public class ExplicitIndexStore\n             config = new HashMap<>( config );\n             config.put( PROVIDER, getDefaultProvider( indexName, dbConfig ) );\n         }\n-        return config;\n+\n+return config;\n     }\n \n     @Nonnull\n     private String getDefaultProvider( @Nullable String indexName, @Nonnull Config dbConfig )\n     {\n-        return dbConfig.getRaw( \"index.\" + indexName )\n-                .orElseGet( () -> dbConfig.getRaw( \"index\" ).orElse( \"lucene\" ) );\n+        return dbConfig.getRaw( \"index.\" + indexName ).orElseGet( () -> dbConfig.getRaw( \"index\" ).orElse( \"lucene\" ) );\n     }\n \n-    private Map<String, String> getOrCreateIndexConfig(\n-            IndexEntityType entityType, String indexName, Map<String, String> suppliedConfig )\n+    private Map<String,String> getOrCreateIndexConfig( IndexEntityType entityType, String indexName, Map<String,String> suppliedConfig )\n     {\n-        Map<String,String> config = findIndexConfig(\n-                entityType.entityClass(), indexName, suppliedConfig, this.config );\n-        if ( !indexStore.has( entityType.entityClass(), indexName ) )\n-        {   // Ok, we need to create this config\n+        Map<String,String> config = findIndexConfig( entityType.entityClass(), indexName, suppliedConfig, this.config );\n+if ( !indexStore.has( entityType.entityClass(), indexName ) )\n+        {\n+    // Ok, we need to create this config\n             synchronized ( this )\n-            {   // Were we the first ones to get here?\n+            {\n+    // Were we the first ones to get here?\n                 Map<String,String> existing = indexStore.get( entityType.entityClass(), indexName );\n                 if ( existing != null )\n                 {\n                     // No, someone else made it before us, cool\n-                    assertConfigMatches(\n-                            indexProviders.apply( existing.get( PROVIDER ) ), indexName, existing, config );\n-                    return config;\n+                    assertConfigMatches( indexProviders.apply( existing.get( PROVIDER ) ), indexName, existing, config );\n+return config;\n                 }\n \n                 // We were the first one here, let's create this config\n                 try ( Session session = kernel.get().beginSession( AUTH_DISABLED );\n-                      Transaction transaction = session.beginTransaction( Transaction.Type.implicit );\n-                      Statement statement = ((KernelTransaction)transaction).acquireStatement() )\n-                {\n+Transaction transaction = session.beginTransaction( Transaction.Type.implicit );\n+                      Statement statement = ((KernelTransaction) transaction).acquireStatement() )\n+{\n                     switch ( entityType )\n                     {\n                     case Node:\n                         transaction.indexWrite().nodeExplicitIndexCreate( indexName, config );\n                         break;\n-\n-                    case Relationship:\n+    case Relationship:\n                         transaction.indexWrite().relationshipExplicitIndexCreate( indexName, config );\n                         break;\n-\n-                    default:\n+    default:\n                         throw new IllegalArgumentException( \"Unknown entity type: \" + entityType );\n                     }\n \n@@ -198,79 +191,77 @@ public class ExplicitIndexStore\n                 }\n                 catch ( Exception ex )\n                 {\n-                    throw new TransactionFailureException(\n-                            \"Index creation failed for \" + indexName + \", \" + config, ex );\n-                }\n+                    throw new TransactionFailureException( \"Index creation failed for \" + indexName + \", \" + config, ex );\n+    }\n             }\n         }\n         return config;\n     }\n \n-    public String setNodeIndexConfiguration( String indexName, String key, String value )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n+    public String setNodeIndexConfiguration( String indexName, String key, String value ) throws ExplicitIndexNotFoundKernelException\n+{\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n         String oldValue = config.put( key, value );\n         indexStore.set( Node.class, indexName, config );\n         return oldValue;\n     }\n \n-    public String setRelationshipIndexConfiguration( String indexName, String key, String value )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n+    public String setRelationshipIndexConfiguration( String indexName, String key, String value ) throws ExplicitIndexNotFoundKernelException\n+{\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n         String oldValue = config.put( key, value );\n         indexStore.set( Relationship.class, indexName, config );\n         return oldValue;\n     }\n \n-    public String removeNodeIndexConfiguration( String indexName, String key )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n+    public String removeNodeIndexConfiguration( String indexName, String key ) throws ExplicitIndexNotFoundKernelException\n+{\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n         String value = config.remove( key );\n         if ( value != null )\n         {\n             indexStore.set( Node.class, indexName, config );\n         }\n-        return value;\n+\n+return value;\n     }\n \n-    public String removeRelationshipIndexConfiguration( String indexName, String key )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n+    public String removeRelationshipIndexConfiguration( String indexName, String key ) throws ExplicitIndexNotFoundKernelException\n+{\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n         String value = config.remove( key );\n         if ( value != null )\n         {\n             indexStore.set( Relationship.class, indexName, config );\n         }\n-        return value;\n+\n+return value;\n     }\n \n-    public Map<String, String> getNodeIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n+    public Map<String,String> getNodeIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n     {\n-        Map<String, String> config = indexStore.get( Node.class, indexName );\n+        Map<String,String> config = indexStore.get( Node.class, indexName );\n         if ( config == null )\n         {\n             throw new ExplicitIndexNotFoundKernelException( \"No node index '\" + indexName + \"' found\" );\n         }\n-        return config;\n+\n+return config;\n     }\n \n-    public Map<String, String> getRelationshipIndexConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException\n-    {\n-        Map<String, String> config = indexStore.get( Relationship.class, indexName );\n+    public Map<String,String> getRelationshipIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n+{\n+        Map<String,String> config = indexStore.get( Relationship.class, indexName );\n         if ( config == null )\n         {\n             throw new ExplicitIndexNotFoundKernelException( \"No relationship index '\" + indexName + \"' found\" );\n         }\n-        return config;\n+\n+return config;\n     }\n \n     private void assertLegalConfigKey( String key )\n@@ -290,4 +281,4 @@ public class ExplicitIndexStore\n     {\n         return indexStore.getNames( Relationship.class );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "column": "34",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "column": "36",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "column": "99",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "165",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "160",
                    "column": "13",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "160",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "172",
                    "column": "17",
                    "severity": "error",
                    "message": "'try' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "172",
                    "column": "239",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "100",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1228/ExplicitIndexStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1228/ExplicitIndexStore.java\nindex 28e5c841748..901c5990f50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1228/ExplicitIndexStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1228/ExplicitIndexStore.java\n@@ -26,7 +26,6 @@ import java.util.function.Function;\n import java.util.function.Supplier;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n-\n import org.neo4j.graphdb.Node;\n import org.neo4j.graphdb.PropertyContainer;\n import org.neo4j.graphdb.Relationship;\n@@ -40,13 +39,14 @@ import org.neo4j.kernel.api.KernelTransaction;\n import org.neo4j.kernel.api.Statement;\n import org.neo4j.kernel.configuration.Config;\n import org.neo4j.kernel.spi.explicitindex.IndexImplementation;\n-\n import static org.neo4j.graphdb.index.IndexManager.PROVIDER;\n+\n import static org.neo4j.internal.kernel.api.security.LoginContext.AUTH_DISABLED;\n \n /**\n  * Uses an {@link IndexConfigStore} and puts logic around providers and configuration comparison.\n  */\n+\n public class ExplicitIndexStore\n {\n     private final IndexConfigStore indexStore;\n@@ -54,8 +54,7 @@ public class ExplicitIndexStore\n     private final Function<String,IndexImplementation> indexProviders;\n     private final Supplier<Kernel> kernel;\n \n-    public ExplicitIndexStore( @Nonnull Config config, IndexConfigStore indexStore, Supplier<Kernel> kernel,\n-            Function<String,IndexImplementation> indexProviders )\n+    public ExplicitIndexStore( @Nonnull Config config, IndexConfigStore indexStore, Supplier<Kernel> kernel, Function<String,IndexImplementation> indexProviders )\n     {\n         this.config = config;\n         this.indexStore = indexStore;\n@@ -63,35 +62,33 @@ public class ExplicitIndexStore\n         this.indexProviders = indexProviders;\n     }\n \n-    public Map<String, String> getOrCreateNodeIndexConfig( String indexName, Map<String, String> customConfiguration )\n+    public Map<String,String> getOrCreateNodeIndexConfig( String indexName, Map<String,String> customConfiguration )\n     {\n         return getOrCreateIndexConfig( IndexEntityType.Node, indexName, customConfiguration );\n     }\n \n-    public Map<String, String> getOrCreateRelationshipIndexConfig( String indexName,\n-            Map<String, String> customConfiguration )\n+    public Map<String,String> getOrCreateRelationshipIndexConfig( String indexName, Map<String,String> customConfiguration )\n     {\n         return getOrCreateIndexConfig( IndexEntityType.Relationship, indexName, customConfiguration );\n     }\n \n-    private Map<String, String> findIndexConfig(\n-            Class<? extends PropertyContainer> cls, String indexName,\n-            Map<String, String> suppliedConfig, @Nonnull Config dbConfig )\n+    private Map<String,String> findIndexConfig( Class<? extends PropertyContainer> cls, String indexName, Map<String,String> suppliedConfig, @Nonnull Config dbConfig )\n     {\n         // Check stored config (has this index been created previously?)\n-        Map<String, String> storedConfig = indexStore.get( cls, indexName );\n-        if ( storedConfig != null && suppliedConfig == null )\n+        Map<String,String> storedConfig = indexStore.get( cls, indexName );\n+        if ( storedConfig != null&& suppliedConfig == null )\n         {\n             // Fill in \"provider\" if not already filled in, backwards compatibility issue\n-            Map<String, String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n+            Map<String,String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n             if ( newConfig != storedConfig )\n             {\n                 indexStore.set( cls, indexName, newConfig );\n             }\n+\n             return newConfig;\n         }\n \n-        Map<String, String> configToUse = suppliedConfig;\n+        Map<String,String> configToUse = suppliedConfig;\n \n         // Check db config properties for provider\n         String provider;\n@@ -106,6 +103,7 @@ public class ExplicitIndexStore\n             provider = configToUse.get( PROVIDER );\n             provider = provider == null ? getDefaultProvider( indexName, dbConfig ) : provider;\n         }\n+\n         indexProvider = indexProviders.apply( provider );\n         configToUse = indexProvider.fillInDefaults( configToUse );\n         configToUse = injectDefaultProviderIfMissing( indexName, dbConfig, configToUse );\n@@ -115,31 +113,28 @@ public class ExplicitIndexStore\n         {\n             assertConfigMatches( indexProvider, indexName, storedConfig, suppliedConfig );\n             // Fill in \"provider\" if not already filled in, backwards compatibility issue\n-            Map<String, String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n+            Map<String,String> newConfig = injectDefaultProviderIfMissing( indexName, dbConfig, storedConfig );\n             if ( newConfig != storedConfig )\n             {\n                 indexStore.set( cls, indexName, newConfig );\n             }\n+\n             configToUse = newConfig;\n         }\n \n         return Collections.unmodifiableMap( configToUse );\n     }\n \n-    public static void assertConfigMatches( IndexImplementation indexProvider, String indexName,\n-                                      Map<String, String> storedConfig, Map<String, String> suppliedConfig )\n+    public static void assertConfigMatches( IndexImplementation indexProvider, String indexName, Map<String,String> storedConfig, Map<String,String> suppliedConfig )\n     {\n-        if ( suppliedConfig != null && !indexProvider.configMatches( storedConfig, suppliedConfig ) )\n+        if ( suppliedConfig != null&& ! indexProvider.configMatches( storedConfig, suppliedConfig ) )\n         {\n-            throw new IllegalArgumentException( \"Supplied index configuration:\\n\" +\n-                    suppliedConfig + \"\\ndoesn't match stored config in a valid way:\\n\" + storedConfig +\n-                    \"\\nfor '\" + indexName + \"'\" );\n+            throw new IllegalArgumentException( \"Supplied index configuration:\\n\" + suppliedConfig+ \"\\ndoesn't match stored config in a valid way:\\n\" + storedConfig+ \"\\nfor '\" + indexName + \"'\" );\n         }\n     }\n \n     @Nonnull\n-    private Map<String, String> injectDefaultProviderIfMissing( @Nullable String indexName, @Nonnull Config dbConfig,\n-            @Nonnull Map<String, String> config )\n+    private Map<String,String> injectDefaultProviderIfMissing( @Nullable String indexName, @Nonnull Config dbConfig, @Nonnull Map<String,String> config )\n     {\n         String provider = config.get( PROVIDER );\n         if ( provider == null )\n@@ -147,49 +142,43 @@ public class ExplicitIndexStore\n             config = new HashMap<>( config );\n             config.put( PROVIDER, getDefaultProvider( indexName, dbConfig ) );\n         }\n+\n         return config;\n     }\n \n     @Nonnull\n     private String getDefaultProvider( @Nullable String indexName, @Nonnull Config dbConfig )\n     {\n-        return dbConfig.getRaw( \"index.\" + indexName )\n-                .orElseGet( () -> dbConfig.getRaw( \"index\" ).orElse( \"lucene\" ) );\n+        return dbConfig.getRaw( \"index.\" + indexName ).orElseGet( () -> dbConfig.getRaw( \"index\" ).orElse( \"lucene\" ) );\n     }\n \n-    private Map<String, String> getOrCreateIndexConfig(\n-            IndexEntityType entityType, String indexName, Map<String, String> suppliedConfig )\n+    private Map<String,String> getOrCreateIndexConfig( IndexEntityType entityType, String indexName, Map<String,String> suppliedConfig )\n     {\n-        Map<String,String> config = findIndexConfig(\n-                entityType.entityClass(), indexName, suppliedConfig, this.config );\n-        if ( !indexStore.has( entityType.entityClass(), indexName ) )\n+        Map<String,String> config = findIndexConfig( entityType.entityClass(), indexName, suppliedConfig, this.config );\n+        if ( ! indexStore.has( entityType.entityClass(), indexName ) )\n         {   // Ok, we need to create this config\n-            synchronized ( this )\n+            synchronized( this)\n             {   // Were we the first ones to get here?\n                 Map<String,String> existing = indexStore.get( entityType.entityClass(), indexName );\n                 if ( existing != null )\n                 {\n                     // No, someone else made it before us, cool\n-                    assertConfigMatches(\n-                            indexProviders.apply( existing.get( PROVIDER ) ), indexName, existing, config );\n+                    assertConfigMatches( indexProviders.apply( existing.get( PROVIDER ) ), indexName, existing, config );\n                     return config;\n                 }\n \n                 // We were the first one here, let's create this config\n-                try ( Session session = kernel.get().beginSession( AUTH_DISABLED );\n-                      Transaction transaction = session.beginTransaction( Transaction.Type.implicit );\n-                      Statement statement = ((KernelTransaction)transaction).acquireStatement() )\n+\n+                try( Session session = kernel.get().beginSession( AUTH_DISABLED ); Transaction transaction = session.beginTransaction( Transaction.Type.implicit ); Statement statement = ((KernelTransaction) transaction).acquireStatement())\n                 {\n                     switch ( entityType )\n                     {\n                     case Node:\n                         transaction.indexWrite().nodeExplicitIndexCreate( indexName, config );\n                         break;\n-\n                     case Relationship:\n                         transaction.indexWrite().relationshipExplicitIndexCreate( indexName, config );\n                         break;\n-\n                     default:\n                         throw new IllegalArgumentException( \"Unknown entity type: \" + entityType );\n                     }\n@@ -198,78 +187,77 @@ public class ExplicitIndexStore\n                 }\n                 catch ( Exception ex )\n                 {\n-                    throw new TransactionFailureException(\n-                            \"Index creation failed for \" + indexName + \", \" + config, ex );\n+                    throw new TransactionFailureException( \"Index creation failed for \" + indexName+ \", \" + config, ex );\n                 }\n             }\n         }\n+\n         return config;\n     }\n \n-    public String setNodeIndexConfiguration( String indexName, String key, String value )\n-            throws ExplicitIndexNotFoundKernelException\n+    public String setNodeIndexConfiguration( String indexName, String key, String value ) throws ExplicitIndexNotFoundKernelException\n     {\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n         String oldValue = config.put( key, value );\n         indexStore.set( Node.class, indexName, config );\n         return oldValue;\n     }\n \n-    public String setRelationshipIndexConfiguration( String indexName, String key, String value )\n-            throws ExplicitIndexNotFoundKernelException\n+    public String setRelationshipIndexConfiguration( String indexName, String key, String value ) throws ExplicitIndexNotFoundKernelException\n     {\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n         String oldValue = config.put( key, value );\n         indexStore.set( Relationship.class, indexName, config );\n         return oldValue;\n     }\n \n-    public String removeNodeIndexConfiguration( String indexName, String key )\n-            throws ExplicitIndexNotFoundKernelException\n+    public String removeNodeIndexConfiguration( String indexName, String key ) throws ExplicitIndexNotFoundKernelException\n     {\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getNodeIndexConfiguration( indexName ) );\n         String value = config.remove( key );\n         if ( value != null )\n         {\n             indexStore.set( Node.class, indexName, config );\n         }\n+\n         return value;\n     }\n \n-    public String removeRelationshipIndexConfiguration( String indexName, String key )\n-            throws ExplicitIndexNotFoundKernelException\n+    public String removeRelationshipIndexConfiguration( String indexName, String key ) throws ExplicitIndexNotFoundKernelException\n     {\n         assertLegalConfigKey( key );\n-        Map<String, String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n+        Map<String,String> config = new HashMap<>( getRelationshipIndexConfiguration( indexName ) );\n         String value = config.remove( key );\n         if ( value != null )\n         {\n             indexStore.set( Relationship.class, indexName, config );\n         }\n+\n         return value;\n     }\n \n-    public Map<String, String> getNodeIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n+    public Map<String,String> getNodeIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n     {\n-        Map<String, String> config = indexStore.get( Node.class, indexName );\n+        Map<String,String> config = indexStore.get( Node.class, indexName );\n         if ( config == null )\n         {\n             throw new ExplicitIndexNotFoundKernelException( \"No node index '\" + indexName + \"' found\" );\n         }\n+\n         return config;\n     }\n \n-    public Map<String, String> getRelationshipIndexConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException\n+    public Map<String,String> getRelationshipIndexConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException\n     {\n-        Map<String, String> config = indexStore.get( Relationship.class, indexName );\n+        Map<String,String> config = indexStore.get( Relationship.class, indexName );\n         if ( config == null )\n         {\n             throw new ExplicitIndexNotFoundKernelException( \"No relationship index '\" + indexName + \"' found\" );\n         }\n+\n         return config;\n     }\n \n@@ -290,4 +278,4 @@ public class ExplicitIndexStore\n     {\n         return indexStore.getNames( Relationship.class );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}