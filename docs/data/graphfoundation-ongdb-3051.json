{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3051",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "130",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "217",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3051/IndexCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3051/IndexCommand.java\nindex f8b58c34934..d9f547f996a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3051/IndexCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3051/IndexCommand.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index;\n \n import java.io.IOException;\n@@ -40,464 +41,457 @@ import static org.neo4j.kernel.impl.util.IoPrimitiveUtils.write3bLengthAndString\n  */\n public abstract class IndexCommand extends Command\n {\n-    public static final byte VALUE_TYPE_NULL = (byte) 0;\n-    public static final byte VALUE_TYPE_SHORT = (byte) 1;\n-    public static final byte VALUE_TYPE_INT = (byte) 2;\n-    public static final byte VALUE_TYPE_LONG = (byte) 3;\n-    public static final byte VALUE_TYPE_FLOAT = (byte) 4;\n-    public static final byte VALUE_TYPE_DOUBLE = (byte) 5;\n-    public static final byte VALUE_TYPE_STRING = (byte) 6;\n+  public static final byte VALUE_TYPE_NULL = (byte) 0;\n+  public static final byte VALUE_TYPE_SHORT = (byte) 1;\n+  public static final byte VALUE_TYPE_INT = (byte) 2;\n+  public static final byte VALUE_TYPE_LONG = (byte) 3;\n+  public static final byte VALUE_TYPE_FLOAT = (byte) 4;\n+  public static final byte VALUE_TYPE_DOUBLE = (byte) 5;\n+  public static final byte VALUE_TYPE_STRING = (byte) 6;\n+\n+  private byte commandType;\n+  protected int indexNameId;\n+  protected byte entityType;\n+  protected long entityId;\n+  protected int keyId;\n+  protected byte valueType;\n+  protected Object value;\n+\n+  protected void init(byte commandType, int indexNameId, byte entityType, long entityId, int keyId, Object value)\n+  {\n+    this.commandType = commandType;\n+    this.indexNameId = indexNameId;\n+    this.entityType = entityType;\n+    this.entityId = entityId;\n+    this.keyId = keyId;\n+    this.value = value;\n+    this.valueType = valueTypeOf(value);\n+  }\n+\n+  public int getIndexNameId()\n+  {\n+    return indexNameId;\n+  }\n+\n+  public byte getEntityType()\n+  {\n+    return entityType;\n+  }\n+\n+  public long getEntityId()\n+  {\n+    return entityId;\n+  }\n+\n+  public int getKeyId()\n+  {\n+    return keyId;\n+  }\n+\n+  public Object getValue()\n+  {\n+    return value;\n+  }\n+\n+  public byte startNodeNeedsLong()\n+  {\n+    return 0;\n+  }\n+\n+  public byte endNodeNeedsLong()\n+  {\n+    return 0;\n+  }\n+\n+  private static byte valueTypeOf(Object value)\n+  {\n+    byte valueType = 0;\n+    if (value == null)\n+    {\n+      valueType = VALUE_TYPE_NULL;\n+    } else if (value instanceof Number)\n+    {\n+      if (value instanceof Float)\n+      {\n+        valueType = VALUE_TYPE_FLOAT;\n+      } else if (value instanceof Double)\n+      {\n+        valueType = VALUE_TYPE_DOUBLE;\n+      } else if (value instanceof Long)\n+      {\n+        valueType = VALUE_TYPE_LONG;\n+      } else if (value instanceof Short)\n+      {\n+        valueType = VALUE_TYPE_SHORT;\n+      } else\n+      {\n+        valueType = VALUE_TYPE_INT;\n+      }\n+    } else\n+    {\n+      valueType = VALUE_TYPE_STRING;\n+    }\n+    return valueType;\n+  }\n+\n+  protected void writeToFile(WritableChannel channel) throws IOException\n+  {\n+    /* c: commandType\n+     * e: entityType\n+     * n: indexNameId\n+     * k: keyId\n+     * i: entityId\n+     * v: value type\n+     * u: value\n+     * x: 0=entityId needs 4b, 1=entityId needs 8b\n+     * y: 0=startNode needs 4b, 1=startNode needs 8b\n+     * z: 0=endNode needs 4b, 1=endNode needs 8b\n+     *\n+     * [cccv,vvex][yznn,nnnn][kkkk,kkkk]\n+     * [iiii,iiii] x 4 or 8\n+     * (either string value)\n+     * [llll,llll][llll,llll][llll,llll][string chars...]\n+     * (numeric value)\n+     * [uuuu,uuuu] x 2-8 (depending on value type)\n+     */\n+    writeIndexCommandHeader(channel);\n+    putIntOrLong(channel, getEntityId());\n+    // Value\n+    Object value = getValue();\n+    switch (getValueType())\n+    {\n+      case IndexCommand.VALUE_TYPE_STRING:\n+        write3bLengthAndString(channel, value.toString());\n+        break;\n+      case IndexCommand.VALUE_TYPE_SHORT:\n+        channel.putShort(((Number) value).shortValue());\n+        break;\n+      case IndexCommand.VALUE_TYPE_INT:\n+        channel.putInt(((Number) value).intValue());\n+        break;\n+      case IndexCommand.VALUE_TYPE_LONG:\n+        channel.putLong(((Number) value).longValue());\n+        break;\n+      case IndexCommand.VALUE_TYPE_FLOAT:\n+        channel.putFloat(((Number) value).floatValue());\n+        break;\n+      case IndexCommand.VALUE_TYPE_DOUBLE:\n+        channel.putDouble(((Number) value).doubleValue());\n+        break;\n+      case IndexCommand.VALUE_TYPE_NULL:\n+        break;\n+      default:\n+        throw new RuntimeException(\"Unknown value type \" + getValueType());\n+    }\n+  }\n+\n+  protected void writeIndexCommandHeader(WritableChannel channel) throws IOException\n+  {\n+    writeIndexCommandHeader(channel, getValueType(), getEntityType(), needsLong(getEntityId()),\n+        startNodeNeedsLong(), endNodeNeedsLong(), getIndexNameId(), getKeyId());\n+  }\n+\n+  protected static void writeIndexCommandHeader(WritableChannel channel, byte valueType, byte entityType,\n+                                                byte entityIdNeedsLong, byte startNodeNeedsLong, byte endNodeNeedsLong, int indexNameId, int keyId)\n+      throws IOException\n+  {\n+    channel.put((byte) ((valueType << 2) | (entityType << 1) | entityIdNeedsLong));\n+    channel.put((byte) ((startNodeNeedsLong << 7) | (endNodeNeedsLong << 6)));\n+    channel.putShort((short) indexNameId);\n+    channel.putShort((short) keyId);\n+  }\n+\n+  protected void putIntOrLong(WritableChannel channel, long id) throws IOException\n+  {\n+    if (needsLong(id) == 1)\n+    {\n+      channel.putLong(id);\n+    } else\n+    {\n+      channel.putInt((int) id);\n+    }\n+  }\n \n-    private byte commandType;\n-    protected int indexNameId;\n-    protected byte entityType;\n-    protected long entityId;\n-    protected int keyId;\n-    protected byte valueType;\n-    protected Object value;\n+  public static class AddNodeCommand extends IndexCommand\n+  {\n+    public void init(int indexNameId, long entityId, int keyId, Object value)\n+    {\n+      super.init(NeoCommandType.INDEX_ADD_COMMAND, indexNameId, IndexEntityType.Node.id(),\n+          entityId, keyId, value);\n+    }\n \n-    protected void init( byte commandType, int indexNameId, byte entityType, long entityId, int keyId, Object value )\n+    @Override\n+    public boolean handle(CommandVisitor visitor) throws IOException\n     {\n-        this.commandType = commandType ;\n-        this.indexNameId = indexNameId;\n-        this.entityType = entityType;\n-        this.entityId = entityId;\n-        this.keyId = keyId;\n-        this.value = value;\n-        this.valueType = valueTypeOf( value );\n+      return visitor.visitIndexAddNodeCommand(this);\n     }\n \n-    public int getIndexNameId()\n+    @Override\n+    public String toString()\n     {\n-        return indexNameId;\n+      return \"AddNode[index:\" + indexNameId + \", id:\" + entityId + \", key:\" + keyId + \", value:\" + value + \"]\";\n     }\n \n-    public byte getEntityType()\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n     {\n-        return entityType;\n+      channel.put(NeoCommandType.INDEX_ADD_COMMAND);\n+      writeToFile(channel);\n     }\n+  }\n \n-    public long getEntityId()\n+  protected static byte needsLong(long value)\n+  {\n+    return value > Integer.MAX_VALUE ? (byte) 1 : (byte) 0;\n+  }\n+\n+  public static class AddRelationshipCommand extends IndexCommand\n+  {\n+    private long startNode;\n+    private long endNode;\n+\n+    public void init(int indexNameId, long entityId, int keyId,\n+                     Object value, long startNode, long endNode)\n     {\n-        return entityId;\n+      super.init(NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND, indexNameId, IndexEntityType.Relationship.id(),\n+          entityId, keyId, value);\n+      this.startNode = startNode;\n+      this.endNode = endNode;\n     }\n \n-    public int getKeyId()\n+    public long getStartNode()\n     {\n-        return keyId;\n+      return startNode;\n     }\n \n-    public Object getValue()\n+    public long getEndNode()\n     {\n-        return value;\n+      return endNode;\n     }\n \n+    @Override\n     public byte startNodeNeedsLong()\n     {\n-        return 0;\n+      return needsLong(startNode);\n     }\n \n+    @Override\n     public byte endNodeNeedsLong()\n     {\n-        return 0;\n-    }\n-\n-    private static byte valueTypeOf( Object value )\n-    {\n-        byte valueType = 0;\n-        if ( value == null )\n-        {\n-            valueType = VALUE_TYPE_NULL;\n-        }\n-        else if ( value instanceof Number )\n-        {\n-            if ( value instanceof Float )\n-            {\n-                valueType = VALUE_TYPE_FLOAT;\n-            }\n-            else if ( value instanceof Double )\n-            {\n-                valueType = VALUE_TYPE_DOUBLE;\n-            }\n-            else if ( value instanceof Long )\n-            {\n-                valueType = VALUE_TYPE_LONG;\n-            }\n-            else if ( value instanceof Short )\n-            {\n-                valueType = VALUE_TYPE_SHORT;\n-            }\n-            else\n-            {\n-                valueType = VALUE_TYPE_INT;\n-            }\n-        }\n-        else\n-        {\n-            valueType = VALUE_TYPE_STRING;\n-        }\n-        return valueType;\n-    }\n-\n-    protected void writeToFile( WritableChannel channel ) throws IOException\n-    {\n-        /* c: commandType\n-         * e: entityType\n-         * n: indexNameId\n-         * k: keyId\n-         * i: entityId\n-         * v: value type\n-         * u: value\n-         * x: 0=entityId needs 4b, 1=entityId needs 8b\n-         * y: 0=startNode needs 4b, 1=startNode needs 8b\n-         * z: 0=endNode needs 4b, 1=endNode needs 8b\n-         *\n-         * [cccv,vvex][yznn,nnnn][kkkk,kkkk]\n-         * [iiii,iiii] x 4 or 8\n-         * (either string value)\n-         * [llll,llll][llll,llll][llll,llll][string chars...]\n-         * (numeric value)\n-         * [uuuu,uuuu] x 2-8 (depending on value type)\n-         */\n-        writeIndexCommandHeader( channel );\n-        putIntOrLong( channel, getEntityId() );\n-        // Value\n-        Object value = getValue();\n-        switch ( getValueType() )\n-        {\n-        case IndexCommand.VALUE_TYPE_STRING:\n-            write3bLengthAndString( channel, value.toString() );\n-            break;\n-        case IndexCommand.VALUE_TYPE_SHORT:\n-            channel.putShort( ((Number) value).shortValue() );\n-            break;\n-        case IndexCommand.VALUE_TYPE_INT:\n-            channel.putInt( ((Number) value).intValue() );\n-            break;\n-        case IndexCommand.VALUE_TYPE_LONG:\n-            channel.putLong( ((Number) value).longValue() );\n-            break;\n-        case IndexCommand.VALUE_TYPE_FLOAT:\n-            channel.putFloat( ((Number) value).floatValue() );\n-            break;\n-        case IndexCommand.VALUE_TYPE_DOUBLE:\n-            channel.putDouble( ((Number) value).doubleValue() );\n-            break;\n-        case IndexCommand.VALUE_TYPE_NULL:\n-            break;\n-        default:\n-            throw new RuntimeException( \"Unknown value type \" + getValueType() );\n-        }\n-    }\n-\n-    protected void writeIndexCommandHeader( WritableChannel channel ) throws IOException\n-    {\n-        writeIndexCommandHeader( channel, getValueType(), getEntityType(), needsLong( getEntityId() ),\n-                startNodeNeedsLong(), endNodeNeedsLong(), getIndexNameId(), getKeyId() );\n-    }\n-\n-    protected static void writeIndexCommandHeader( WritableChannel channel, byte valueType, byte entityType,\n-            byte entityIdNeedsLong, byte startNodeNeedsLong, byte endNodeNeedsLong, int indexNameId, int keyId )\n-                    throws IOException\n-    {\n-        channel.put( (byte) ((valueType << 2) | (entityType << 1) | entityIdNeedsLong) );\n-        channel.put( (byte) ((startNodeNeedsLong << 7) | (endNodeNeedsLong << 6)) );\n-        channel.putShort( (short) indexNameId );\n-        channel.putShort( (short) keyId );\n-    }\n-\n-    protected void putIntOrLong( WritableChannel channel, long id ) throws IOException\n-    {\n-        if ( needsLong( id ) == 1 )\n-        {\n-            channel.putLong( id );\n-        }\n-        else\n-        {\n-            channel.putInt( (int) id );\n-        }\n-    }\n-\n-    public static class AddNodeCommand extends IndexCommand\n-    {\n-        public void init( int indexNameId, long entityId, int keyId, Object value )\n-        {\n-            super.init( NeoCommandType.INDEX_ADD_COMMAND, indexNameId, IndexEntityType.Node.id(),\n-                    entityId, keyId, value );\n-        }\n-\n-        @Override\n-        public boolean handle( CommandVisitor visitor ) throws IOException\n-        {\n-            return visitor.visitIndexAddNodeCommand( this );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"AddNode[index:\" + indexNameId + \", id:\" + entityId + \", key:\" + keyId + \", value:\" + value + \"]\";\n-        }\n-\n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.INDEX_ADD_COMMAND );\n-            writeToFile( channel );\n-        }\n-    }\n-\n-    protected static byte needsLong( long value )\n-    {\n-        return value > Integer.MAX_VALUE ? (byte)1 : (byte)0;\n-    }\n-\n-    public static class AddRelationshipCommand extends IndexCommand\n-    {\n-        private long startNode;\n-        private long endNode;\n-\n-        public void init( int indexNameId, long entityId, int keyId,\n-                Object value, long startNode, long endNode )\n-        {\n-            super.init( NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND, indexNameId, IndexEntityType.Relationship.id(),\n-                    entityId, keyId, value );\n-            this.startNode = startNode;\n-            this.endNode = endNode;\n-        }\n-\n-        public long getStartNode()\n-        {\n-            return startNode;\n-        }\n-\n-        public long getEndNode()\n-        {\n-            return endNode;\n-        }\n-\n-        @Override\n-        public byte startNodeNeedsLong()\n-        {\n-            return needsLong( startNode );\n-        }\n-\n-        @Override\n-        public byte endNodeNeedsLong()\n-        {\n-            return needsLong( endNode );\n-        }\n-\n-        @Override\n-        public boolean equals( Object o )\n-        {\n-            if ( this == o )\n-            {\n-                return true;\n-            }\n-            if ( o == null || getClass() != o.getClass() )\n-            {\n-                return false;\n-            }\n-            if ( !super.equals( o ) )\n-            {\n-                return false;\n-            }\n-            AddRelationshipCommand that = (AddRelationshipCommand) o;\n-            return startNode == that.startNode && endNode == that.endNode;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return Objects.hash( super.hashCode(), startNode, endNode );\n-        }\n-\n-        @Override\n-        public boolean handle( CommandVisitor visitor ) throws IOException\n-        {\n-            return visitor.visitIndexAddRelationshipCommand( this );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"AddRelationship[index:\" + indexNameId + \", id:\" + entityId + \", key:\" + keyId +\n-                    \", value:\" + value + \"(\" + (value != null ? value.getClass().getSimpleName() : \"null\") + \")\" +\n-                    \", startNode:\" + startNode +\n-                    \", endNode:\" + endNode +\n-                    \"]\";\n-        }\n-\n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND );\n-            writeToFile( channel );\n-            putIntOrLong( channel, getStartNode() );\n-            putIntOrLong( channel, getEndNode() );\n-        }\n-    }\n-\n-    public static class RemoveCommand extends IndexCommand\n-    {\n-        public void init( int indexNameId, byte entityType, long entityId, int keyId, Object value )\n-        {\n-            super.init( NeoCommandType.INDEX_REMOVE_COMMAND, indexNameId, entityType, entityId, keyId, value );\n-        }\n-\n-        @Override\n-        public boolean handle( CommandVisitor visitor ) throws IOException\n-        {\n-            return visitor.visitIndexRemoveCommand( this );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return format( \"Remove%s[index:%d, id:%d, key:%d, value:%s]\",\n-                    IndexEntityType.byId( entityType ).nameToLowerCase(), indexNameId, entityId, keyId, value );\n-        }\n-\n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.INDEX_REMOVE_COMMAND );\n-            writeToFile( channel );\n-        }\n-    }\n-\n-    public static class DeleteCommand extends IndexCommand\n-    {\n-        public void init( int indexNameId, byte entityType )\n-        {\n-            super.init( NeoCommandType.INDEX_DELETE_COMMAND, indexNameId, entityType, 0L, (byte)0, null );\n-        }\n-\n-        @Override\n-        public boolean handle( CommandVisitor visitor ) throws IOException\n-        {\n-            return visitor.visitIndexDeleteCommand( this );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"Delete[index:\" + indexNameId + \", type:\" + IndexEntityType.byId( entityType ).nameToLowerCase() + \"]\";\n-        }\n-\n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.INDEX_DELETE_COMMAND );\n-            writeIndexCommandHeader( channel );\n-        }\n-    }\n-\n-    public static class CreateCommand extends IndexCommand\n-    {\n-        private Map<String, String> config;\n-\n-        public void init( int indexNameId, byte entityType, Map<String, String> config )\n-        {\n-            super.init( NeoCommandType.INDEX_CREATE_COMMAND, indexNameId, entityType, 0L, (byte)0, null );\n-            this.config = config;\n-        }\n-\n-        public Map<String, String> getConfig()\n-        {\n-            return config;\n-        }\n-\n-        @Override\n-        public boolean equals( Object o )\n-        {\n-            if ( this == o )\n-            {\n-                return true;\n-            }\n-            if ( o == null || getClass() != o.getClass() )\n-            {\n-                return false;\n-            }\n-            if ( !super.equals( o ) )\n-            {\n-                return false;\n-            }\n-            CreateCommand that = (CreateCommand) o;\n-            return Objects.equals( config, that.config );\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return Objects.hash( super.hashCode(), config );\n-        }\n-\n-        @Override\n-        public boolean handle( CommandVisitor visitor ) throws IOException\n-        {\n-            return visitor.visitIndexCreateCommand( this );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return format( \"Create%sIndex[index:%d, config:%s]\",\n-                    IndexEntityType.byId( entityType ).nameToLowerCase(), indexNameId, config );\n-        }\n-\n-        @Override\n-        public void serialize( WritableChannel channel ) throws IOException\n-        {\n-            channel.put( NeoCommandType.INDEX_CREATE_COMMAND );\n-            writeIndexCommandHeader( channel );\n-            channel.putShort( (short) getConfig().size() );\n-            for ( Map.Entry<String,String> entry : getConfig().entrySet() )\n-            {\n-                write2bLengthAndString( channel, entry.getKey() );\n-                write2bLengthAndString( channel, entry.getValue() );\n-            }\n-        }\n+      return needsLong(endNode);\n     }\n \n     @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        if ( !super.equals( o ) )\n-        {\n-            return false;\n-        }\n-        IndexCommand that = (IndexCommand) o;\n-        return commandType == that.commandType &&\n-               indexNameId == that.indexNameId &&\n-               entityType == that.entityType &&\n-               entityId == that.entityId &&\n-               keyId == that.keyId &&\n-               valueType == that.valueType &&\n-               Objects.equals( value, that.value );\n+    public boolean equals(Object o)\n+    {\n+      if (this == o)\n+      {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass())\n+      {\n+        return false;\n+      }\n+      if (!super.equals(o))\n+      {\n+        return false;\n+      }\n+      AddRelationshipCommand that = (AddRelationshipCommand) o;\n+      return startNode == that.startNode && endNode == that.endNode;\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash( super.hashCode(), commandType, indexNameId, entityType, entityId, keyId, valueType, value );\n+      return Objects.hash(super.hashCode(), startNode, endNode);\n+    }\n+\n+    @Override\n+    public boolean handle(CommandVisitor visitor) throws IOException\n+    {\n+      return visitor.visitIndexAddRelationshipCommand(this);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"AddRelationship[index:\" + indexNameId + \", id:\" + entityId + \", key:\" + keyId +\n+          \", value:\" + value + \"(\" + (value != null ? value.getClass().getSimpleName() : \"null\") + \")\" +\n+          \", startNode:\" + startNode +\n+          \", endNode:\" + endNode +\n+          \"]\";\n+    }\n+\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND);\n+      writeToFile(channel);\n+      putIntOrLong(channel, getStartNode());\n+      putIntOrLong(channel, getEndNode());\n     }\n+  }\n \n-    public byte getCommandType()\n+  public static class RemoveCommand extends IndexCommand\n+  {\n+    public void init(int indexNameId, byte entityType, long entityId, int keyId, Object value)\n     {\n-        return commandType;\n+      super.init(NeoCommandType.INDEX_REMOVE_COMMAND, indexNameId, entityType, entityId, keyId, value);\n     }\n \n-    public byte getValueType()\n+    @Override\n+    public boolean handle(CommandVisitor visitor) throws IOException\n+    {\n+      return visitor.visitIndexRemoveCommand(this);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return format(\"Remove%s[index:%d, id:%d, key:%d, value:%s]\",\n+          IndexEntityType.byId(entityType).nameToLowerCase(), indexNameId, entityId, keyId, value);\n+    }\n+\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.INDEX_REMOVE_COMMAND);\n+      writeToFile(channel);\n+    }\n+  }\n+\n+  public static class DeleteCommand extends IndexCommand\n+  {\n+    public void init(int indexNameId, byte entityType)\n+    {\n+      super.init(NeoCommandType.INDEX_DELETE_COMMAND, indexNameId, entityType, 0L, (byte) 0, null);\n+    }\n+\n+    @Override\n+    public boolean handle(CommandVisitor visitor) throws IOException\n+    {\n+      return visitor.visitIndexDeleteCommand(this);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"Delete[index:\" + indexNameId + \", type:\" + IndexEntityType.byId(entityType).nameToLowerCase() + \"]\";\n+    }\n+\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.INDEX_DELETE_COMMAND);\n+      writeIndexCommandHeader(channel);\n+    }\n+  }\n+\n+  public static class CreateCommand extends IndexCommand\n+  {\n+    private Map<String, String> config;\n+\n+    public void init(int indexNameId, byte entityType, Map<String, String> config)\n+    {\n+      super.init(NeoCommandType.INDEX_CREATE_COMMAND, indexNameId, entityType, 0L, (byte) 0, null);\n+      this.config = config;\n+    }\n+\n+    public Map<String, String> getConfig()\n+    {\n+      return config;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+      if (this == o)\n+      {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass())\n+      {\n+        return false;\n+      }\n+      if (!super.equals(o))\n+      {\n+        return false;\n+      }\n+      CreateCommand that = (CreateCommand) o;\n+      return Objects.equals(config, that.config);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+      return Objects.hash(super.hashCode(), config);\n+    }\n+\n+    @Override\n+    public boolean handle(CommandVisitor visitor) throws IOException\n+    {\n+      return visitor.visitIndexCreateCommand(this);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return format(\"Create%sIndex[index:%d, config:%s]\",\n+          IndexEntityType.byId(entityType).nameToLowerCase(), indexNameId, config);\n+    }\n+\n+    @Override\n+    public void serialize(WritableChannel channel) throws IOException\n+    {\n+      channel.put(NeoCommandType.INDEX_CREATE_COMMAND);\n+      writeIndexCommandHeader(channel);\n+      channel.putShort((short) getConfig().size());\n+      for (Map.Entry<String, String> entry : getConfig().entrySet())\n+      {\n+        write2bLengthAndString(channel, entry.getKey());\n+        write2bLengthAndString(channel, entry.getValue());\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+    {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+    if (!super.equals(o))\n     {\n-        return valueType;\n+      return false;\n     }\n+    IndexCommand that = (IndexCommand) o;\n+    return commandType == that.commandType &&\n+        indexNameId == that.indexNameId &&\n+        entityType == that.entityType &&\n+        entityId == that.entityId &&\n+        keyId == that.keyId &&\n+        valueType == that.valueType &&\n+        Objects.equals(value, that.value);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(super.hashCode(), commandType, indexNameId, entityType, entityId, keyId, valueType, value);\n+  }\n+\n+  public byte getCommandType()\n+  {\n+    return commandType;\n+  }\n+\n+  public byte getValueType()\n+  {\n+    return valueType;\n+  }\n }\n",
            "diff_size": 783
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "21",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "332",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 253).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3051/IndexCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3051/IndexCommand.java\nindex f8b58c34934..71530971af1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3051/IndexCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3051/IndexCommand.java\n@@ -41,12 +41,18 @@ import static org.neo4j.kernel.impl.util.IoPrimitiveUtils.write3bLengthAndString\n public abstract class IndexCommand extends Command\n {\n     public static final byte VALUE_TYPE_NULL = (byte) 0;\n-    public static final byte VALUE_TYPE_SHORT = (byte) 1;\n-    public static final byte VALUE_TYPE_INT = (byte) 2;\n-    public static final byte VALUE_TYPE_LONG = (byte) 3;\n-    public static final byte VALUE_TYPE_FLOAT = (byte) 4;\n-    public static final byte VALUE_TYPE_DOUBLE = (byte) 5;\n-    public static final byte VALUE_TYPE_STRING = (byte) 6;\n+\n+public static final byte VALUE_TYPE_SHORT = (byte) 1;\n+\n+public static final byte VALUE_TYPE_INT = (byte) 2;\n+\n+public static final byte VALUE_TYPE_LONG = (byte) 3;\n+\n+public static final byte VALUE_TYPE_FLOAT = (byte) 4;\n+\n+public static final byte VALUE_TYPE_DOUBLE = (byte) 5;\n+\n+public static final byte VALUE_TYPE_STRING = (byte) 6;\n \n     private byte commandType;\n     protected int indexNameId;\n@@ -58,7 +64,7 @@ public abstract class IndexCommand extends Command\n \n     protected void init( byte commandType, int indexNameId, byte entityType, long entityId, int keyId, Object value )\n     {\n-        this.commandType = commandType ;\n+        this.commandType = commandType;\n         this.indexNameId = indexNameId;\n         this.entityType = entityType;\n         this.entityId = entityId;\n@@ -136,7 +142,8 @@ public abstract class IndexCommand extends Command\n         {\n             valueType = VALUE_TYPE_STRING;\n         }\n-        return valueType;\n+\n+return valueType;\n     }\n \n     protected void writeToFile( WritableChannel channel ) throws IOException\n@@ -192,16 +199,14 @@ public abstract class IndexCommand extends Command\n \n     protected void writeIndexCommandHeader( WritableChannel channel ) throws IOException\n     {\n-        writeIndexCommandHeader( channel, getValueType(), getEntityType(), needsLong( getEntityId() ),\n-                startNodeNeedsLong(), endNodeNeedsLong(), getIndexNameId(), getKeyId() );\n+        writeIndexCommandHeader( channel, getValueType(), getEntityType(), needsLong( getEntityId() ), startNodeNeedsLong(), endNodeNeedsLong(), getIndexNameId(), getKeyId() );\n     }\n \n     protected static void writeIndexCommandHeader( WritableChannel channel, byte valueType, byte entityType,\n-            byte entityIdNeedsLong, byte startNodeNeedsLong, byte endNodeNeedsLong, int indexNameId, int keyId )\n-                    throws IOException\n-    {\n-        channel.put( (byte) ((valueType << 2) | (entityType << 1) | entityIdNeedsLong) );\n-        channel.put( (byte) ((startNodeNeedsLong << 7) | (endNodeNeedsLong << 6)) );\n+            byte entityIdNeedsLong, byte startNodeNeedsLong, byte endNodeNeedsLong, int indexNameId, int keyId ) throws IOException\n+{\n+        channel.put( (byte) ((valueType << 2) | ( entityType << 1) | entityIdNeedsLong ) );\n+        channel.put( (byte) ((startNodeNeedsLong << 7) | ( endNodeNeedsLong << 6 )) );\n         channel.putShort( (short) indexNameId );\n         channel.putShort( (short) keyId );\n     }\n@@ -214,7 +219,7 @@ public abstract class IndexCommand extends Command\n         }\n         else\n         {\n-            channel.putInt( (int) id );\n+            channel.putInt( ( int) id );\n         }\n     }\n \n@@ -248,7 +253,7 @@ public abstract class IndexCommand extends Command\n \n     protected static byte needsLong( long value )\n     {\n-        return value > Integer.MAX_VALUE ? (byte)1 : (byte)0;\n+        return value> Integer.MAX_VALUE ? (byte)1 : (byte)0;\n     }\n \n     public static class AddRelationshipCommand extends IndexCommand\n@@ -261,7 +266,7 @@ public abstract class IndexCommand extends Command\n         {\n             super.init( NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND, indexNameId, IndexEntityType.Relationship.id(),\n                     entityId, keyId, value );\n-            this.startNode = startNode;\n+this.startNode = startNode;\n             this.endNode = endNode;\n         }\n \n@@ -294,15 +299,18 @@ public abstract class IndexCommand extends Command\n             {\n                 return true;\n             }\n-            if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n             {\n                 return false;\n             }\n-            if ( !super.equals( o ) )\n+\n+if ( !super.equals( o ) )\n             {\n                 return false;\n             }\n-            AddRelationshipCommand that = (AddRelationshipCommand) o;\n+\n+AddRelationshipCommand that = (AddRelationshipCommand) o;\n             return startNode == that.startNode && endNode == that.endNode;\n         }\n \n@@ -321,12 +329,8 @@ public abstract class IndexCommand extends Command\n         @Override\n         public String toString()\n         {\n-            return \"AddRelationship[index:\" + indexNameId + \", id:\" + entityId + \", key:\" + keyId +\n-                    \", value:\" + value + \"(\" + (value != null ? value.getClass().getSimpleName() : \"null\") + \")\" +\n-                    \", startNode:\" + startNode +\n-                    \", endNode:\" + endNode +\n-                    \"]\";\n-        }\n+            return \"AddRelationship[index:\" + indexNameId + \", id:\" + entityId + \", key:\" + keyId + \", value:\" + value + \"(\" + (value != null ? value.getClass().getSimpleName() : \"null\") + \")\" + \", startNode:\" + startNode + \", endNode:\" + endNode + \"]\";\n+    }\n \n         @Override\n         public void serialize( WritableChannel channel ) throws IOException\n@@ -395,15 +399,15 @@ public abstract class IndexCommand extends Command\n \n     public static class CreateCommand extends IndexCommand\n     {\n-        private Map<String, String> config;\n+        private Map<String,String> config;\n \n-        public void init( int indexNameId, byte entityType, Map<String, String> config )\n+        public void init( int indexNameId, byte entityType, Map<String,String> config )\n         {\n             super.init( NeoCommandType.INDEX_CREATE_COMMAND, indexNameId, entityType, 0L, (byte)0, null );\n             this.config = config;\n         }\n \n-        public Map<String, String> getConfig()\n+        public Map<String,String> getConfig()\n         {\n             return config;\n         }\n@@ -415,15 +419,18 @@ public abstract class IndexCommand extends Command\n             {\n                 return true;\n             }\n-            if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n             {\n                 return false;\n             }\n-            if ( !super.equals( o ) )\n+\n+if ( !super.equals( o ) )\n             {\n                 return false;\n             }\n-            CreateCommand that = (CreateCommand) o;\n+\n+CreateCommand that = (CreateCommand) o;\n             return Objects.equals( config, that.config );\n         }\n \n@@ -467,17 +474,19 @@ public abstract class IndexCommand extends Command\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        if ( !super.equals( o ) )\n+\n+if ( !super.equals( o ) )\n         {\n             return false;\n         }\n-        IndexCommand that = (IndexCommand) o;\n-        return commandType == that.commandType &&\n-               indexNameId == that.indexNameId &&\n+\n+IndexCommand that = (IndexCommand) o;\n+        return commandType == that.commandType && indexNameId == that.indexNameId &&\n                entityType == that.entityType &&\n                entityId == that.entityId &&\n                keyId == that.keyId &&\n@@ -500,4 +509,4 @@ public abstract class IndexCommand extends Command\n     {\n         return valueType;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}