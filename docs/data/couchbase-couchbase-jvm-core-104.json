{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "198",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        }\n        if (forceSaslPlain) {\n            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays.asList(supportedMechanisms));\n            supportedMechanisms = new String[] { \"PLAIN\" };\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/104/KeyValueAuthHandler.java\nindex 32901d391a9..302a706fc75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/104/KeyValueAuthHandler.java\n@@ -195,7 +195,8 @@ public class KeyValueAuthHandler\n             throw new AuthenticationException(\"Received empty SASL mechanisms list from server: \" + remote);\n         }\n         if (forceSaslPlain) {\n-            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays.asList(supportedMechanisms));\n+            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays\n+                .asList(supportedMechanisms));\n             supportedMechanisms = new String[] { \"PLAIN\" };\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/104/KeyValueAuthHandler.java\nindex 32901d391a9..3db35f86592 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/104/KeyValueAuthHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.endpoint.kv;\n \n import com.couchbase.client.core.logging.CouchbaseLogger;\n@@ -147,7 +148,7 @@ public class KeyValueAuthHandler\n      * Callback handler needed for the {@link SaslClient} which supplies username and password.\n      *\n      * @param callbacks the possible callbacks.\n-     * @throws IOException if something goes wrong during negotiation.\n+     * @throws IOException                  if something goes wrong during negotiation.\n      * @throws UnsupportedCallbackException if something goes wrong during negotiation.\n      */\n     @Override\n@@ -195,14 +196,15 @@ public class KeyValueAuthHandler\n             throw new AuthenticationException(\"Received empty SASL mechanisms list from server: \" + remote);\n         }\n         if (forceSaslPlain) {\n-            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays.asList(supportedMechanisms));\n-            supportedMechanisms = new String[] { \"PLAIN\" };\n+            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\",\n+                Arrays.asList(supportedMechanisms));\n+            supportedMechanisms = new String[] {\"PLAIN\"};\n         }\n \n         saslClient = Sasl.createSaslClient(supportedMechanisms, null, \"couchbase\", remote, null, this);\n         selectedMechanism = saslClient.getMechanismName();\n         int mechanismLength = selectedMechanism.length();\n-        byte[] bytePayload = saslClient.hasInitialResponse() ? saslClient.evaluateChallenge(new byte[]{}) : null;\n+        byte[] bytePayload = saslClient.hasInitialResponse() ? saslClient.evaluateChallenge(new byte[] {}) : null;\n         ByteBuf payload = bytePayload != null ? ctx.alloc().buffer().writeBytes(bytePayload) : Unpooled.EMPTY_BUFFER;\n \n         FullBinaryMemcacheRequest initialRequest = new DefaultFullBinaryMemcacheRequest(\n@@ -311,7 +313,7 @@ public class KeyValueAuthHandler\n \n     @Override\n     public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,\n-        ChannelPromise promise) throws Exception {\n+                        ChannelPromise promise) throws Exception {\n         originalPromise = promise;\n         ChannelPromise downPromise = ctx.newPromise();\n         downPromise.addListener(new GenericFutureListener<Future<Void>>() {\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "265",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "292",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "305",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/104/KeyValueAuthHandler.java\nindex 32901d391a9..2f627c0f3a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/104/KeyValueAuthHandler.java\n@@ -51,8 +51,7 @@ import java.util.Arrays;\n  * @since 1.0\n  */\n public class KeyValueAuthHandler\n-    extends SimpleChannelInboundHandler<FullBinaryMemcacheResponse>\n-    implements CallbackHandler, ChannelOutboundHandler {\n+    extends SimpleChannelInboundHandler<FullBinaryMemcacheResponse> implements CallbackHandler, ChannelOutboundHandler {\n \n     /**\n      * The logger used.\n@@ -206,16 +205,13 @@ public class KeyValueAuthHandler\n         ByteBuf payload = bytePayload != null ? ctx.alloc().buffer().writeBytes(bytePayload) : Unpooled.EMPTY_BUFFER;\n \n         FullBinaryMemcacheRequest initialRequest = new DefaultFullBinaryMemcacheRequest(\n-            selectedMechanism.getBytes(CharsetUtil.UTF_8),\n-            Unpooled.EMPTY_BUFFER,\n-            payload\n-        );\n+            selectedMechanism.getBytes(CharsetUtil.UTF_8), Unpooled.EMPTY_BUFFER,\n+            payload);\n         initialRequest\n             .setOpcode(SASL_AUTH_OPCODE)\n             .setKeyLength((short) mechanismLength)\n             .setTotalBodyLength(mechanismLength + payload.readableBytes());\n-\n-        ChannelFuture future = ctx.writeAndFlush(initialRequest);\n+ChannelFuture future = ctx.writeAndFlush(initialRequest);\n         future.addListener(new GenericFutureListener<Future<Void>>() {\n             @Override\n             public void operationComplete(Future<Void> future) throws Exception {\n@@ -260,16 +256,13 @@ public class KeyValueAuthHandler\n             }\n \n             FullBinaryMemcacheRequest stepRequest = new DefaultFullBinaryMemcacheRequest(\n-                selectedMechanism.getBytes(CharsetUtil.UTF_8),\n-                Unpooled.EMPTY_BUFFER,\n-                content\n-            );\n+                selectedMechanism.getBytes(CharsetUtil.UTF_8), Unpooled.EMPTY_BUFFER,\n+                content);\n             stepRequest\n                 .setOpcode(SASL_STEP_OPCODE)\n                 .setKeyLength((short) selectedMechanism.length())\n                 .setTotalBodyLength(content.readableBytes() + selectedMechanism.length());\n-\n-            ChannelFuture future = ctx.writeAndFlush(stepRequest);\n+ChannelFuture future = ctx.writeAndFlush(stepRequest);\n             future.addListener(new GenericFutureListener<Future<Void>>() {\n                 @Override\n                 public void operationComplete(Future<Void> future) throws Exception {\n@@ -290,17 +283,13 @@ public class KeyValueAuthHandler\n      */\n     private void checkIsAuthed(final FullBinaryMemcacheResponse msg) {\n         switch (msg.getStatus()) {\n-            case SASL_AUTH_SUCCESS:\n-                originalPromise.setSuccess();\n+            case SASL_AUTH_SUCCESS: originalPromise.setSuccess();\n                 ctx.pipeline().remove(this);\n                 ctx.fireChannelActive();\n                 break;\n-            case SASL_AUTH_FAILURE:\n-                originalPromise.setFailure(new AuthenticationException(\"Authentication Failure\"));\n+            case SASL_AUTH_FAILURE: originalPromise.setFailure(new AuthenticationException(\"Authentication Failure\"));\n                 break;\n-            default:\n-                originalPromise.setFailure(new AuthenticationException(\"Unhandled SASL auth status: \"\n-                    + msg.getStatus()));\n+            default: originalPromise.setFailure(new AuthenticationException(\"Unhandled SASL auth status: \" + msg.getStatus()));\n         }\n     }\n \n@@ -312,7 +301,8 @@ public class KeyValueAuthHandler\n     @Override\n     public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,\n         ChannelPromise promise) throws Exception {\n-        originalPromise = promise;\n+\n+    originalPromise = promise;\n         ChannelPromise downPromise = ctx.newPromise();\n         downPromise.addListener(new GenericFutureListener<Future<Void>>() {\n             @Override\n@@ -354,4 +344,4 @@ public class KeyValueAuthHandler\n     public void flush(ChannelHandlerContext ctx) throws Exception {\n         ctx.flush();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "258",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "259",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "281",
                    "column": "15",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 32, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "283",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "284",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "285",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "286",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "287",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 32, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "288",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "289",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "290",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 32, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 32, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/104/KeyValueAuthHandler.java\nindex 32901d391a9..78664ee862b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/104/KeyValueAuthHandler.java\n@@ -33,7 +33,6 @@ import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.util.CharsetUtil;\n import io.netty.util.concurrent.Future;\n import io.netty.util.concurrent.GenericFutureListener;\n-\n import javax.security.auth.callback.Callback;\n import javax.security.auth.callback.CallbackHandler;\n import javax.security.auth.callback.NameCallback;\n@@ -50,13 +49,13 @@ import java.util.Arrays;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n-public class KeyValueAuthHandler\n-    extends SimpleChannelInboundHandler<FullBinaryMemcacheResponse>\n-    implements CallbackHandler, ChannelOutboundHandler {\n+\n+public class KeyValueAuthHandler extends SimpleChannelInboundHandler<FullBinaryMemcacheResponse> implements CallbackHandler, ChannelOutboundHandler {\n \n     /**\n      * The logger used.\n      */\n+\n     private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(KeyValueAuthHandler.class);\n \n     /**\n@@ -125,6 +124,7 @@ public class KeyValueAuthHandler\n      * @param username the name of the user/bucket.\n      * @param password the password associated with the user/bucket.\n      */\n+\n     public KeyValueAuthHandler(String username, String password, boolean forceSaslPlain) {\n         this.username = username;\n         this.password = password == null ? \"\" : password;\n@@ -137,6 +137,7 @@ public class KeyValueAuthHandler\n      * @param ctx the handler context.\n      * @throws Exception if something goes wrong during negotiation.\n      */\n+\n     @Override\n     public void channelActive(final ChannelHandlerContext ctx) throws Exception {\n         this.ctx = ctx;\n@@ -150,6 +151,8 @@ public class KeyValueAuthHandler\n      * @throws IOException if something goes wrong during negotiation.\n      * @throws UnsupportedCallbackException if something goes wrong during negotiation.\n      */\n+\n+\n     @Override\n     public void handle(final Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n         for (Callback callback : callbacks) {\n@@ -158,7 +161,7 @@ public class KeyValueAuthHandler\n             } else if (callback instanceof PasswordCallback) {\n                 ((PasswordCallback) callback).setPassword(password.toCharArray());\n             } else {\n-                throw new AuthenticationException(\"SASLClient requested unsupported callback: \" + callback);\n+                       throw new AuthenticationException(\"SASLClient requested unsupported callback: \" + callback);\n             }\n         }\n     }\n@@ -170,6 +173,8 @@ public class KeyValueAuthHandler\n      * @param msg the incoming message to investigate.\n      * @throws Exception if something goes wrong during negotiation.\n      */\n+\n+\n     @Override\n     protected void channelRead0(ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg) throws Exception {\n         if (msg.getOpcode() == SASL_LIST_MECHS_OPCODE) {\n@@ -177,8 +182,8 @@ public class KeyValueAuthHandler\n         } else if (msg.getOpcode() == SASL_AUTH_OPCODE) {\n             handleAuthResponse(ctx, msg);\n         } else if (msg.getOpcode() == SASL_STEP_OPCODE) {\n-            checkIsAuthed(msg);\n-        }\n+                   checkIsAuthed(msg);\n+               }\n     }\n \n     /**\n@@ -188,33 +193,25 @@ public class KeyValueAuthHandler\n      * @param msg the incoming message to investigate.\n      * @throws Exception if something goes wrong during negotiation.\n      */\n+\n     private void handleListMechsResponse(ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg) throws Exception {\n         String remote = ctx.channel().remoteAddress().toString();\n         String[] supportedMechanisms = msg.content().toString(CharsetUtil.UTF_8).split(\" \");\n         if (supportedMechanisms.length == 0) {\n             throw new AuthenticationException(\"Received empty SASL mechanisms list from server: \" + remote);\n         }\n+\n         if (forceSaslPlain) {\n             LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays.asList(supportedMechanisms));\n             supportedMechanisms = new String[] { \"PLAIN\" };\n         }\n-\n         saslClient = Sasl.createSaslClient(supportedMechanisms, null, \"couchbase\", remote, null, this);\n         selectedMechanism = saslClient.getMechanismName();\n         int mechanismLength = selectedMechanism.length();\n-        byte[] bytePayload = saslClient.hasInitialResponse() ? saslClient.evaluateChallenge(new byte[]{}) : null;\n+        byte[] bytePayload = saslClient.hasInitialResponse() ? saslClient.evaluateChallenge(new byte[] {}) : null;\n         ByteBuf payload = bytePayload != null ? ctx.alloc().buffer().writeBytes(bytePayload) : Unpooled.EMPTY_BUFFER;\n-\n-        FullBinaryMemcacheRequest initialRequest = new DefaultFullBinaryMemcacheRequest(\n-            selectedMechanism.getBytes(CharsetUtil.UTF_8),\n-            Unpooled.EMPTY_BUFFER,\n-            payload\n-        );\n-        initialRequest\n-            .setOpcode(SASL_AUTH_OPCODE)\n-            .setKeyLength((short) mechanismLength)\n-            .setTotalBodyLength(mechanismLength + payload.readableBytes());\n-\n+        FullBinaryMemcacheRequest initialRequest = new DefaultFullBinaryMemcacheRequest(selectedMechanism.getBytes(CharsetUtil.UTF_8), Unpooled.EMPTY_BUFFER, payload);\n+        initialRequest.setOpcode(SASL_AUTH_OPCODE).setKeyLength((short) mechanismLength).setTotalBodyLength(mechanismLength + payload.readableBytes());\n         ChannelFuture future = ctx.writeAndFlush(initialRequest);\n         future.addListener(new GenericFutureListener<Future<Void>>() {\n             @Override\n@@ -233,6 +230,7 @@ public class KeyValueAuthHandler\n      * @param msg the incoming message to investigate.\n      * @throws Exception if something goes wrong during negotiation.\n      */\n+\n     private void handleAuthResponse(ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg) throws Exception {\n         if (saslClient.isComplete()) {\n             checkIsAuthed(msg);\n@@ -242,7 +240,6 @@ public class KeyValueAuthHandler\n         byte[] response = new byte[msg.content().readableBytes()];\n         msg.content().readBytes(response);\n         byte[] evaluatedBytes = saslClient.evaluateChallenge(response);\n-\n         if (evaluatedBytes != null) {\n             ByteBuf content;\n \n@@ -258,17 +255,8 @@ public class KeyValueAuthHandler\n             } else {\n                 content = Unpooled.wrappedBuffer(evaluatedBytes);\n             }\n-\n-            FullBinaryMemcacheRequest stepRequest = new DefaultFullBinaryMemcacheRequest(\n-                selectedMechanism.getBytes(CharsetUtil.UTF_8),\n-                Unpooled.EMPTY_BUFFER,\n-                content\n-            );\n-            stepRequest\n-                .setOpcode(SASL_STEP_OPCODE)\n-                .setKeyLength((short) selectedMechanism.length())\n-                .setTotalBodyLength(content.readableBytes() + selectedMechanism.length());\n-\n+            FullBinaryMemcacheRequest stepRequest = new DefaultFullBinaryMemcacheRequest(selectedMechanism.getBytes(CharsetUtil.UTF_8), Unpooled.EMPTY_BUFFER, content);\n+            stepRequest.setOpcode(SASL_STEP_OPCODE).setKeyLength((short) selectedMechanism.length()).setTotalBodyLength(content.readableBytes() + selectedMechanism.length());\n             ChannelFuture future = ctx.writeAndFlush(stepRequest);\n             future.addListener(new GenericFutureListener<Future<Void>>() {\n                 @Override\n@@ -288,30 +276,32 @@ public class KeyValueAuthHandler\n      *\n      * @param msg the incoming message to investigate.\n      */\n+\n     private void checkIsAuthed(final FullBinaryMemcacheResponse msg) {\n-        switch (msg.getStatus()) {\n-            case SASL_AUTH_SUCCESS:\n-                originalPromise.setSuccess();\n-                ctx.pipeline().remove(this);\n-                ctx.fireChannelActive();\n-                break;\n-            case SASL_AUTH_FAILURE:\n-                originalPromise.setFailure(new AuthenticationException(\"Authentication Failure\"));\n-                break;\n-            default:\n-                originalPromise.setFailure(new AuthenticationException(\"Unhandled SASL auth status: \"\n-                    + msg.getStatus()));\n+        switch(msg.getStatus()) {\n+                                case SASL_AUTH_SUCCESS:\n+                                originalPromise.setSuccess();\n+                                ctx.pipeline().remove(this);\n+                                ctx.fireChannelActive();\n+                                break;\n+                                case SASL_AUTH_FAILURE:\n+                                originalPromise.setFailure(new AuthenticationException(\"Authentication Failure\"));\n+                                break;\n+                                default:\n+                                originalPromise.setFailure(new AuthenticationException(\"Unhandled SASL auth status: \" + msg.getStatus()));\n         }\n     }\n \n+\n     @Override\n-    public void bind(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise) throws Exception {\n+    public void bind(ChannelHandlerContext ctx,\n+        SocketAddress localAddress, ChannelPromise promise) throws Exception {\n         ctx.bind(localAddress, promise);\n     }\n \n+\n     @Override\n-    public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,\n-        ChannelPromise promise) throws Exception {\n+    public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise) throws Exception {\n         originalPromise = promise;\n         ChannelPromise downPromise = ctx.newPromise();\n         downPromise.addListener(new GenericFutureListener<Future<Void>>() {\n@@ -325,33 +315,39 @@ public class KeyValueAuthHandler\n         ctx.connect(remoteAddress, localAddress, downPromise);\n     }\n \n+\n     @Override\n     public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\n         ctx.disconnect(promise);\n     }\n \n+\n     @Override\n     public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\n         ctx.close(promise);\n     }\n \n+\n     @Override\n     public void deregister(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\n         ctx.deregister(promise);\n     }\n \n+\n     @Override\n     public void read(ChannelHandlerContext ctx) throws Exception {\n         ctx.read();\n     }\n \n+\n     @Override\n     public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n         ctx.write(msg, promise);\n     }\n \n+\n     @Override\n     public void flush(ChannelHandlerContext ctx) throws Exception {\n         ctx.flush();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/104/KeyValueAuthHandler.java\nindex 32901d391a9..302a706fc75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/104/KeyValueAuthHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/104/KeyValueAuthHandler.java\n@@ -195,7 +195,8 @@ public class KeyValueAuthHandler\n             throw new AuthenticationException(\"Received empty SASL mechanisms list from server: \" + remote);\n         }\n         if (forceSaslPlain) {\n-            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays.asList(supportedMechanisms));\n+            LOGGER.trace(\"Got SASL Mechs {} but forcing PLAIN due to config setting.\", Arrays\n+                .asList(supportedMechanisms));\n             supportedMechanisms = new String[] { \"PLAIN\" };\n         }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}