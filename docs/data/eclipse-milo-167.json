{
    "project_name": "eclipse-milo",
    "error_id": "167",
    "information": {
        "errors": [
            {
                "line": "42",
                "column": "43",
                "severity": "error",
                "message": "'}' at column 43 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    private final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n\n    private OpcUaDefaultBinaryEncoding() {}\n\n    @Override\n    public QualifiedName getName() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "'}' at column 43 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/167/OpcUaDefaultBinaryEncoding.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/167/OpcUaDefaultBinaryEncoding.java\nindex a3715ebe031..cd667f91a4a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/167/OpcUaDefaultBinaryEncoding.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/167/OpcUaDefaultBinaryEncoding.java\n@@ -39,7 +39,8 @@ public class OpcUaDefaultBinaryEncoding implements DataTypeEncoding {\n \n     private final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n \n-    private OpcUaDefaultBinaryEncoding() {}\n+    private OpcUaDefaultBinaryEncoding() {\n+    }\n \n     @Override\n     public QualifiedName getName() {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "'}' at column 43 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/167/OpcUaDefaultBinaryEncoding.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/167/OpcUaDefaultBinaryEncoding.java\nindex a3715ebe031..009318b3e5d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/167/OpcUaDefaultBinaryEncoding.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/167/OpcUaDefaultBinaryEncoding.java\n@@ -118,4 +118,4 @@ public class OpcUaDefaultBinaryEncoding implements DataTypeEncoding {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/167/OpcUaDefaultBinaryEncoding.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/167/OpcUaDefaultBinaryEncoding.java\nindex a3715ebe031..fe12ab66885 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/167/OpcUaDefaultBinaryEncoding.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/167/OpcUaDefaultBinaryEncoding.java\n@@ -26,20 +26,22 @@ import org.eclipse.milo.opcua.stack.core.types.builtin.QualifiedName;\n \n public class OpcUaDefaultBinaryEncoding implements DataTypeEncoding {\n \n-    public static final QualifiedName ENCODING_NAME =\n-        new QualifiedName(0, \"Default Binary\");\n+    public static final QualifiedName ENCODING_NAME = new QualifiedName(0, \"Default Binary\");\n+\n \n     public static OpcUaDefaultBinaryEncoding getInstance() {\n         return InstanceHolder.INSTANCE;\n     }\n \n     private static class InstanceHolder {\n+\n         private static final OpcUaDefaultBinaryEncoding INSTANCE = new OpcUaDefaultBinaryEncoding();\n     }\n \n     private final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n \n-    private OpcUaDefaultBinaryEncoding() {}\n+    private OpcUaDefaultBinaryEncoding() {\n+    }\n \n     @Override\n     public QualifiedName getName() {\n@@ -52,22 +54,13 @@ public class OpcUaDefaultBinaryEncoding implements DataTypeEncoding {\n     }\n \n     @Override\n-    public Object encode(\n-        SerializationContext context,\n-        Object decodedBody,\n-        NodeId encodingId\n-    ) {\n-\n+    public Object encode(SerializationContext context, Object decodedBody, NodeId encodingId) {\n         try {\n             @SuppressWarnings(\"unchecked\")\n-            OpcUaBinaryDataTypeCodec<Object> codec =\n-                (OpcUaBinaryDataTypeCodec<Object>)\n-                    context.getDataTypeManager().getCodec(encodingId);\n+            OpcUaBinaryDataTypeCodec<Object> codec = (OpcUaBinaryDataTypeCodec<Object>) context.getDataTypeManager().getCodec(encodingId);\n \n             if (codec == null) {\n-                throw new UaSerializationException(\n-                    StatusCodes.Bad_EncodingError,\n-                    \"no codec registered for encodingId=\" + encodingId);\n+                throw new UaSerializationException(StatusCodes.Bad_EncodingError, \"no codec registered for encodingId=\" + encodingId);\n             }\n \n             ByteBuf buffer = allocator.buffer();\n@@ -77,9 +70,9 @@ public class OpcUaDefaultBinaryEncoding implements DataTypeEncoding {\n             codec.encode(context, writer, decodedBody);\n \n             byte[] bs = new byte[buffer.readableBytes()];\n+\n             buffer.readBytes(bs);\n             buffer.release();\n-\n             return ByteString.of(bs);\n         } catch (ClassCastException e) {\n             throw new UaSerializationException(StatusCodes.Bad_EncodingError, e);\n@@ -87,35 +80,26 @@ public class OpcUaDefaultBinaryEncoding implements DataTypeEncoding {\n     }\n \n     @Override\n-    public Object decode(\n-        SerializationContext context,\n-        Object encodedBody,\n-        NodeId encodingId\n-    ) {\n-\n+    public Object decode(SerializationContext context, Object encodedBody, NodeId encodingId) {\n         try {\n             @SuppressWarnings(\"unchecked\")\n-            OpcUaBinaryDataTypeCodec<Object> codec =\n-                (OpcUaBinaryDataTypeCodec<Object>)\n-                    context.getDataTypeManager().getCodec(encodingId);\n+            OpcUaBinaryDataTypeCodec<Object> codec = (OpcUaBinaryDataTypeCodec<Object>) context.getDataTypeManager().getCodec(encodingId);\n \n             if (codec == null) {\n-                throw new UaSerializationException(\n-                    StatusCodes.Bad_DecodingError,\n-                    \"no codec registered for encodingId=\" + encodingId);\n+                throw new UaSerializationException(StatusCodes.Bad_DecodingError, \"no codec registered for encodingId=\" + encodingId);\n             }\n \n             ByteString binaryBody = (ByteString) encodedBody;\n+\n             byte[] bs = binaryBody.bytesOrEmpty();\n \n             ByteBuf buffer = Unpooled.wrappedBuffer(bs);\n \n             OpcUaBinaryStreamDecoder reader = new OpcUaBinaryStreamDecoder(context).setBuffer(buffer);\n-\n             return codec.decode(context, reader);\n         } catch (ClassCastException e) {\n             throw new UaSerializationException(StatusCodes.Bad_DecodingError, e);\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "'}' at column 43 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "'}' at column 43 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}