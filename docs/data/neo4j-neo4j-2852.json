{
    "project_name": "neo4j-neo4j",
    "error_id": "2852",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2852/Dijkstra.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2852/Dijkstra.java\nindex 5ec5ed2e7b6..ed03a575c45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2852/Dijkstra.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2852/Dijkstra.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import org.apache.commons.lang3.mutable.MutableDouble;\n@@ -51,17 +52,17 @@ import static org.neo4j.internal.helpers.collection.Iterators.firstOrNull;\n /**\n  * Find (one or some) simple shortest path(s) between two nodes.\n  * Shortest referring to least cost evaluated by provided {@link CostEvaluator}.\n- *\n+ * <p>\n  * When asking for {@link #findAllPaths(Node, Node)} behaviour will depending on\n  * which {@link PathInterest} is used.\n  * Recommended option is\n- * {@link PathInterestFactory#numberOfShortest(double,int)} - defined number of shortest path in increasing order\n- *\n+ * {@link PathInterestFactory#numberOfShortest(double, int)} - defined number of shortest path in increasing order\n+ * <p>\n  * Also available\n  * {@link PathInterestFactory#allShortest(double)}          - Find all paths that are equal in length to shortest.\n- *                                                            {@link DijkstraBidirectional} does this faster.\n+ * {@link DijkstraBidirectional} does this faster.\n  * {@link PathInterestFactory#all(double)}                  - Find all paths in increasing order. This option has\n- *                                                            performance problem and is not recommended.\n+ * performance problem and is not recommended.\n  */\n public class Dijkstra implements PathFinder<WeightedPath>\n {\n@@ -75,14 +76,15 @@ public class Dijkstra implements PathFinder<WeightedPath>\n \n     /**\n      * Construct new dijkstra algorithm.\n-     * @param expander          {@link PathExpander} to be used to decide which relationships\n-     *                          to expand.\n-     * @param costEvaluator     {@link CostEvaluator} to be used to calculate cost of relationship\n-     * @param epsilon           The tolerance level to be used when comparing floating point numbers.\n-     * @param interest          {@link PathInterest} to be used when deciding if a path is interesting.\n-     *                          Recommend to use {@link PathInterestFactory} to get reliable behaviour.\n+     *\n+     * @param expander      {@link PathExpander} to be used to decide which relationships\n+     *                      to expand.\n+     * @param costEvaluator {@link CostEvaluator} to be used to calculate cost of relationship\n+     * @param epsilon       The tolerance level to be used when comparing floating point numbers.\n+     * @param interest      {@link PathInterest} to be used when deciding if a path is interesting.\n+     *                      Recommend to use {@link PathInterestFactory} to get reliable behaviour.\n      */\n-    public Dijkstra( PathExpander<Double> expander, CostEvaluator<Double> costEvaluator, double epsilon, PathInterest<Double> interest )\n+    public Dijkstra(PathExpander<Double> expander, CostEvaluator<Double> costEvaluator, double epsilon, PathInterest<Double> interest)\n     {\n         this.expander = expander;\n         this.costEvaluator = costEvaluator;\n@@ -92,31 +94,31 @@ public class Dijkstra implements PathFinder<WeightedPath>\n     }\n \n     @Override\n-    public Iterable<WeightedPath> findAllPaths( Node start, final Node end )\n+    public Iterable<WeightedPath> findAllPaths(Node start, final Node end)\n     {\n-        final Traverser traverser = traverser( start, end, interest );\n-        return () -> new WeightedPathIterator( traverser.iterator(), costEvaluator, epsilon, interest );\n+        final Traverser traverser = traverser(start, end, interest);\n+        return () -> new WeightedPathIterator(traverser.iterator(), costEvaluator, epsilon, interest);\n     }\n \n-    private Traverser traverser( Node start, final Node end, PathInterest<Double> interest )\n+    private Traverser traverser(Node start, final Node end, PathInterest<Double> interest)\n     {\n-        MutableDouble shortestSoFar = new MutableDouble( Double.MAX_VALUE );\n-        PathExpander<Double> dijkstraExpander = new DijkstraPathExpander( expander, shortestSoFar, epsilon, interest.stopAfterLowestCost() );\n-        PathEvaluator<Double> dijkstraEvaluator = new DijkstraEvaluator( shortestSoFar, end, costEvaluator );\n-\n-        lastTraverser = new MonoDirectionalTraversalDescription( )\n-                .uniqueness( Uniqueness.NODE_PATH )\n-                .expand( dijkstraExpander, stateFactory )\n-                .order( new DijkstraSelectorFactory( interest, costEvaluator ) )\n-                .evaluator( dijkstraEvaluator ).traverse( start );\n+        MutableDouble shortestSoFar = new MutableDouble(Double.MAX_VALUE);\n+        PathExpander<Double> dijkstraExpander = new DijkstraPathExpander(expander, shortestSoFar, epsilon, interest.stopAfterLowestCost());\n+        PathEvaluator<Double> dijkstraEvaluator = new DijkstraEvaluator(shortestSoFar, end, costEvaluator);\n+\n+        lastTraverser = new MonoDirectionalTraversalDescription()\n+          .uniqueness(Uniqueness.NODE_PATH)\n+          .expand(dijkstraExpander, stateFactory)\n+          .order(new DijkstraSelectorFactory(interest, costEvaluator))\n+          .evaluator(dijkstraEvaluator).traverse(start);\n         return lastTraverser;\n     }\n \n     @Override\n-    public WeightedPath findSinglePath( Node start, Node end )\n+    public WeightedPath findSinglePath(Node start, Node end)\n     {\n-        return firstOrNull( new WeightedPathIterator(\n-                traverser( start, end, single( epsilon ) ).iterator(), costEvaluator, epsilon, interest ) );\n+        return firstOrNull(new WeightedPathIterator(\n+          traverser(start, end, single(epsilon)).iterator(), costEvaluator, epsilon, interest));\n     }\n \n     @Override\n@@ -132,7 +134,7 @@ public class Dijkstra implements PathFinder<WeightedPath>\n         private final double epsilon;\n         protected final boolean stopAfterLowestCost;\n \n-        DijkstraPathExpander( final PathExpander<Double> source, MutableDouble shortestSoFar, double epsilon, boolean stopAfterLowestCost )\n+        DijkstraPathExpander(final PathExpander<Double> source, MutableDouble shortestSoFar, double epsilon, boolean stopAfterLowestCost)\n         {\n             this.source = source;\n             this.shortestSoFar = shortestSoFar;\n@@ -141,19 +143,19 @@ public class Dijkstra implements PathFinder<WeightedPath>\n         }\n \n         @Override\n-        public Iterable<Relationship> expand( Path path, BranchState<Double> state )\n+        public Iterable<Relationship> expand(Path path, BranchState<Double> state)\n         {\n-            if ( MathUtil.compare( state.getState(), shortestSoFar.doubleValue(), epsilon ) > 0 && stopAfterLowestCost )\n+            if (MathUtil.compare(state.getState(), shortestSoFar.doubleValue(), epsilon) > 0 && stopAfterLowestCost)\n             {\n                 return Collections.emptyList();\n             }\n-            return source.expand( path, state );\n+            return source.expand(path, state);\n         }\n \n         @Override\n         public PathExpander<Double> reverse()\n         {\n-            return new DijkstraPathExpander( source.reverse(), shortestSoFar, epsilon, stopAfterLowestCost );\n+            return new DijkstraPathExpander(source.reverse(), shortestSoFar, epsilon, stopAfterLowestCost);\n         }\n     }\n \n@@ -163,24 +165,25 @@ public class Dijkstra implements PathFinder<WeightedPath>\n         private final Node endNode;\n         private final CostEvaluator<Double> costEvaluator;\n \n-        DijkstraEvaluator( MutableDouble shortestSoFar, Node endNode, CostEvaluator<Double> costEvaluator )\n+        DijkstraEvaluator(MutableDouble shortestSoFar, Node endNode, CostEvaluator<Double> costEvaluator)\n         {\n             this.shortestSoFar = shortestSoFar;\n             this.endNode = endNode;\n             this.costEvaluator = costEvaluator;\n         }\n+\n         @Override\n-        public Evaluation evaluate( Path path, BranchState<Double> state )\n+        public Evaluation evaluate(Path path, BranchState<Double> state)\n         {\n             double nextState = state.getState();\n-            if ( path.length() > 0 )\n+            if (path.length() > 0)\n             {\n-                nextState += costEvaluator.getCost( path.lastRelationship(), OUTGOING );\n-                state.setState( nextState );\n+                nextState += costEvaluator.getCost(path.lastRelationship(), OUTGOING);\n+                state.setState(nextState);\n             }\n-            if ( path.endNode().equals( endNode ) )\n+            if (path.endNode().equals(endNode))\n             {\n-                shortestSoFar.setValue( Math.min( shortestSoFar.doubleValue(), nextState ) );\n+                shortestSoFar.setValue(Math.min(shortestSoFar.doubleValue(), nextState));\n                 return Evaluation.INCLUDE_AND_PRUNE;\n             }\n             return Evaluation.EXCLUDE_AND_CONTINUE;\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}