{
    "project_name": "neo4j-neo4j",
    "error_id": "2875",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2875/RelationshipRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2875/RelationshipRecordFormat.java\nindex 9b9271e54b0..bdfc3186a46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2875/RelationshipRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2875/RelationshipRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.standard;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -36,27 +37,27 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n \n     public RelationshipRecordFormat()\n     {\n-        this( false );\n+        this(false);\n     }\n \n-    public RelationshipRecordFormat( boolean pageAligned )\n+    public RelationshipRecordFormat(boolean pageAligned)\n     {\n-        super( fixedRecordSize( RECORD_SIZE ), 0, IN_USE_BIT, StandardFormatSettings.RELATIONSHIP_MAXIMUM_ID_BITS, pageAligned );\n+        super(fixedRecordSize(RECORD_SIZE), 0, IN_USE_BIT, StandardFormatSettings.RELATIONSHIP_MAXIMUM_ID_BITS, pageAligned);\n     }\n \n     @Override\n     public RelationshipRecord newRecord()\n     {\n-        return new RelationshipRecord( -1 );\n+        return new RelationshipRecord(-1);\n     }\n \n     @Override\n-    public void read( RelationshipRecord record, PageCursor cursor, RecordLoad mode, int recordSize, int recordsPerPage )\n+    public void read(RelationshipRecord record, PageCursor cursor, RecordLoad mode, int recordSize, int recordsPerPage)\n     {\n         byte headerByte = cursor.getByte();\n-        boolean inUse = isInUse( headerByte );\n-        record.setInUse( inUse );\n-        if ( mode.shouldLoad( inUse ) )\n+        boolean inUse = isInUse(headerByte);\n+        record.setInUse(inUse);\n+        if (mode.shouldLoad(inUse))\n         {\n             // [    ,   x] in use flag\n             // [    ,xxx ] first node high order bits\n@@ -74,7 +75,7 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n             long typeInt = cursor.getInt();\n             long secondNodeMod = (typeInt & 0x70000000L) << 4;\n-            int type = (int)(typeInt & 0xFFFF);\n+            int type = (int) (typeInt & 0xFFFF);\n \n             long firstPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n             long firstPrevRelMod = (typeInt & 0xE000000L) << 7;\n@@ -93,32 +94,31 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n \n             byte extraByte = cursor.getByte();\n \n-            record.initialize( inUse,\n-                    BaseRecordFormat.longFromIntAndMod( nextProp, nextPropMod ),\n-                    BaseRecordFormat.longFromIntAndMod( firstNode, firstNodeMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondNode, secondNodeMod ),\n-                    type,\n-                    BaseRecordFormat.longFromIntAndMod( firstPrevRel, firstPrevRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( firstNextRel, firstNextRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondPrevRel, secondPrevRelMod ),\n-                    BaseRecordFormat.longFromIntAndMod( secondNextRel, secondNextRelMod ),\n-                    (extraByte & 0x1) != 0,\n-                    (extraByte & 0x2) != 0 );\n-        }\n-        else\n+            record.initialize(inUse,\n+              BaseRecordFormat.longFromIntAndMod(nextProp, nextPropMod),\n+              BaseRecordFormat.longFromIntAndMod(firstNode, firstNodeMod),\n+              BaseRecordFormat.longFromIntAndMod(secondNode, secondNodeMod),\n+              type,\n+              BaseRecordFormat.longFromIntAndMod(firstPrevRel, firstPrevRelMod),\n+              BaseRecordFormat.longFromIntAndMod(firstNextRel, firstNextRelMod),\n+              BaseRecordFormat.longFromIntAndMod(secondPrevRel, secondPrevRelMod),\n+              BaseRecordFormat.longFromIntAndMod(secondNextRel, secondNextRelMod),\n+              (extraByte & 0x1) != 0,\n+              (extraByte & 0x2) != 0);\n+        } else\n         {\n             int nextOffset = cursor.getOffset() + recordSize - HEADER_SIZE;\n-            cursor.setOffset( nextOffset );\n+            cursor.setOffset(nextOffset);\n         }\n     }\n \n     @Override\n-    public void write( RelationshipRecord record, PageCursor cursor, int recordSize, int recordsPerPage )\n+    public void write(RelationshipRecord record, PageCursor cursor, int recordSize, int recordsPerPage)\n     {\n-        if ( record.inUse() )\n+        if (record.inUse())\n         {\n             long firstNode = record.getFirstNode();\n-            short firstNodeMod = (short)((firstNode & 0x700000000L) >> 31);\n+            short firstNodeMod = (short) ((firstNode & 0x700000000L) >> 31);\n \n             long secondNode = record.getSecondNode();\n             long secondNodeMod = (secondNode & 0x700000000L) >> 4;\n@@ -142,7 +142,7 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             // [    ,xxx ] first node high order bits\n             // [xxxx,    ] next prop high order bits\n             short inUseUnsignedByte = (short) ((record.inUse() ? Record.IN_USE :\n-                                                Record.NOT_IN_USE).byteValue() | firstNodeMod | nextPropMod);\n+              Record.NOT_IN_USE).byteValue() | firstNodeMod | nextPropMod);\n \n             // [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000\n             // [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000\n@@ -150,7 +150,7 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             // [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000\n             // [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000\n             // [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type\n-            int typeInt = (int)(record.getType() | secondNodeMod | firstPrevRelMod | firstNextRelMod | secondPrevRelMod | secondNextRelMod);\n+            int typeInt = (int) (record.getType() | secondNodeMod | firstPrevRelMod | firstNextRelMod | secondPrevRelMod | secondNextRelMod);\n \n             // [    ,   x] 1:st in start node chain, 0x1\n             // [    ,  x ] 1:st in end node chain,   0x2\n@@ -158,20 +158,19 @@ public class RelationshipRecordFormat extends BaseOneByteHeaderRecordFormat<Rela\n             long firstInEndNodeChain = record.isFirstInSecondChain() ? 0x2 : 0;\n             byte extraByte = (byte) (firstInEndNodeChain | firstInStartNodeChain);\n \n-            cursor.putByte( (byte)inUseUnsignedByte );\n-            cursor.putInt( (int) firstNode );\n-            cursor.putInt( (int) secondNode );\n-            cursor.putInt( typeInt );\n-            cursor.putInt( (int) firstPrevRel );\n-            cursor.putInt( (int) firstNextRel );\n-            cursor.putInt( (int) secondPrevRel );\n-            cursor.putInt( (int) secondNextRel );\n-            cursor.putInt( (int) nextProp );\n-            cursor.putByte( extraByte );\n-        }\n-        else\n+            cursor.putByte((byte) inUseUnsignedByte);\n+            cursor.putInt((int) firstNode);\n+            cursor.putInt((int) secondNode);\n+            cursor.putInt(typeInt);\n+            cursor.putInt((int) firstPrevRel);\n+            cursor.putInt((int) firstNextRel);\n+            cursor.putInt((int) secondPrevRel);\n+            cursor.putInt((int) secondNextRel);\n+            cursor.putInt((int) nextProp);\n+            cursor.putByte(extraByte);\n+        } else\n         {\n-            markAsUnused( cursor );\n+            markAsUnused(cursor);\n         }\n     }\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}