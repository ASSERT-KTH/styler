{
    "project_name": "neo4j-neo4j",
    "error_id": "847",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/847/Magic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/847/Magic.java\nindex 939c5c69f44..159a8f42021 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/847/Magic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/847/Magic.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.EOFException;\n@@ -37,44 +38,50 @@ import static java.nio.charset.Charset.forName;\n  */\n public class Magic\n {\n-    public static final Magic NONE = new Magic( \"NONE\", null, new byte[0] );\n+    public static final Magic NONE = new Magic(\"NONE\", null, new byte[0]);\n \n     private static final List<Magic> DEFINITIONS = new ArrayList<>();\n     private static int LONGEST;\n \n-    /** First 4 bytes of a ZIP file have this signature. */\n-    public static final Magic ZIP = Magic.define( \"ZIP\", null, 0x50, 0x4b, 0x03, 0x04 );\n-    /** First 2 bytes of a GZIP file have this signature. */\n-    public static final Magic GZIP = Magic.define( \"GZIP\", null, 0x1f, 0x8b );\n+    /**\n+     * First 4 bytes of a ZIP file have this signature.\n+     */\n+    public static final Magic ZIP = Magic.define(\"ZIP\", null, 0x50, 0x4b, 0x03, 0x04);\n+    /**\n+     * First 2 bytes of a GZIP file have this signature.\n+     */\n+    public static final Magic GZIP = Magic.define(\"GZIP\", null, 0x1f, 0x8b);\n \n-    /** A couple of BOM magics */\n-    public static final Magic BOM_UTF_32_BE = define( \"BOM_UTF_32_BE\", forName( \"UTF-32\" ), 0x0, 0x0, 0xFE, 0xFF );\n-    public static final Magic BOM_UTF_32_LE = define( \"BOM_UTF_32_LE\", forName( \"UTF-32\" ), 0xFF, 0xFE, 0x0, 0x0 );\n-    public static final Magic BOM_UTF_16_BE = define( \"BOM_UTF_16_BE\", StandardCharsets.UTF_16BE, 0xFE, 0xFF );\n-    public static final Magic BOM_UTF_16_LE = define( \"BOM_UTF_16_LE\", StandardCharsets.UTF_16LE, 0xFF, 0xFE );\n-    public static final Magic BOM_UTF_8 = define( \"BOM_UTF8\", StandardCharsets.UTF_8, 0xEF, 0xBB, 0xBF );\n+    /**\n+     * A couple of BOM magics\n+     */\n+    public static final Magic BOM_UTF_32_BE = define(\"BOM_UTF_32_BE\", forName(\"UTF-32\"), 0x0, 0x0, 0xFE, 0xFF);\n+    public static final Magic BOM_UTF_32_LE = define(\"BOM_UTF_32_LE\", forName(\"UTF-32\"), 0xFF, 0xFE, 0x0, 0x0);\n+    public static final Magic BOM_UTF_16_BE = define(\"BOM_UTF_16_BE\", StandardCharsets.UTF_16BE, 0xFE, 0xFF);\n+    public static final Magic BOM_UTF_16_LE = define(\"BOM_UTF_16_LE\", StandardCharsets.UTF_16LE, 0xFF, 0xFE);\n+    public static final Magic BOM_UTF_8 = define(\"BOM_UTF8\", StandardCharsets.UTF_8, 0xEF, 0xBB, 0xBF);\n \n     /**\n      * Defines a magic signature which can later be detected in {@link #of(Path)} and {@link #of(byte[])}.\n      *\n-     * @param description description of the magic, typically which file it is.\n-     * @param impliesEncoding if a match for this to-be-defined magic implies that the contents in\n-     * this file has a certain encoding. Typically used for byte-order-mark.\n+     * @param description               description of the magic, typically which file it is.\n+     * @param impliesEncoding           if a match for this to-be-defined magic implies that the contents in\n+     *                                  this file has a certain encoding. Typically used for byte-order-mark.\n      * @param bytesAsIntsForConvenience bytes that makes up the magic signature. Here specified as\n-     * an {@code int[]} for convenience of specifying those.\n+     *                                  an {@code int[]} for convenience of specifying those.\n      * @return the defined {@link Magic} instance.\n      */\n-    public static Magic define( String description, Charset impliesEncoding, int... bytesAsIntsForConvenience )\n+    public static Magic define(String description, Charset impliesEncoding, int... bytesAsIntsForConvenience)\n     {\n         byte[] bytes = new byte[bytesAsIntsForConvenience.length];\n-        for ( int i = 0; i < bytes.length; i++ )\n+        for (int i = 0; i < bytes.length; i++)\n         {\n             bytes[i] = (byte) bytesAsIntsForConvenience[i];\n         }\n \n-        Magic magic = new Magic( description, impliesEncoding, bytes );\n-        DEFINITIONS.add( magic );\n-        LONGEST = Math.max( LONGEST, bytes.length );\n+        Magic magic = new Magic(description, impliesEncoding, bytes);\n+        DEFINITIONS.add(magic);\n+        LONGEST = Math.max(LONGEST, bytes.length);\n         return magic;\n     }\n \n@@ -86,19 +93,18 @@ public class Magic\n      * @return matching {@link Magic}, or {@link #NONE} if no match.\n      * @throws IOException for errors reading from the file.\n      */\n-    public static Magic of( Path file ) throws IOException\n+    public static Magic of(Path file) throws IOException\n     {\n-        try ( InputStream in = Files.newInputStream( file ) )\n+        try (InputStream in = Files.newInputStream(file))\n         {\n             byte[] bytes = new byte[LONGEST];\n-            int read = in.read( bytes );\n-            if ( read > 0 )\n+            int read = in.read(bytes);\n+            if (read > 0)\n             {\n-                bytes = Arrays.copyOf( bytes, read );\n-                return of( bytes );\n+                bytes = Arrays.copyOf(bytes, read);\n+                return of(bytes);\n             }\n-        }\n-        catch ( EOFException e )\n+        } catch (EOFException e)\n         {   // This is OK\n         }\n         return Magic.NONE;\n@@ -110,11 +116,11 @@ public class Magic\n      * @param bytes magic bytes extracted from a file header.\n      * @return matching {@link Magic}, or {@link #NONE} if no match.\n      */\n-    public static Magic of( byte[] bytes )\n+    public static Magic of(byte[] bytes)\n     {\n-        for ( Magic candidate : DEFINITIONS )\n+        for (Magic candidate : DEFINITIONS)\n         {\n-            if ( candidate.matches( bytes ) )\n+            if (candidate.matches(bytes))\n             {\n                 return candidate;\n             }\n@@ -131,7 +137,7 @@ public class Magic\n     private final Charset encoding;\n     private final byte[] bytes;\n \n-    private Magic( String description, Charset encoding, byte[] bytes )\n+    private Magic(String description, Charset encoding, byte[] bytes)\n     {\n         this.description = description;\n         this.encoding = encoding;\n@@ -144,15 +150,15 @@ public class Magic\n      * @param candidateBytes magic bytes to test.\n      * @return {@code true} if the candidate bytes matches this signature, otherwise {@code false}.\n      */\n-    public boolean matches( byte[] candidateBytes )\n+    public boolean matches(byte[] candidateBytes)\n     {\n-        if ( candidateBytes.length < bytes.length )\n+        if (candidateBytes.length < bytes.length)\n         {\n             return false;\n         }\n-        for ( int i = 0; i < bytes.length; i++ )\n+        for (int i = 0; i < bytes.length; i++)\n         {\n-            if ( candidateBytes[i] != bytes[i] )\n+            if (candidateBytes[i] != bytes[i])\n             {\n                 return false;\n             }\n@@ -183,9 +189,9 @@ public class Magic\n      */\n     public Charset encoding()\n     {\n-        if ( encoding == null )\n+        if (encoding == null)\n         {\n-            throw new IllegalStateException( this + \" doesn't imply any specific encoding\" );\n+            throw new IllegalStateException(this + \" doesn't imply any specific encoding\");\n         }\n         return encoding;\n     }\n@@ -193,12 +199,12 @@ public class Magic\n     byte[] bytes()\n     {\n         // Defensive copy\n-        return Arrays.copyOf( bytes, bytes.length );\n+        return Arrays.copyOf(bytes, bytes.length);\n     }\n \n     @Override\n     public String toString()\n     {\n-        return \"Magic[\" + description + \", \" + Arrays.toString( bytes ) + \"]\";\n+        return \"Magic[\" + description + \", \" + Arrays.toString(bytes) + \"]\";\n     }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/847/Magic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/847/Magic.java\nindex 939c5c69f44..0266b0a1a96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/847/Magic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/847/Magic.java\n@@ -201,4 +201,4 @@ public class Magic\n     {\n         return \"Magic[\" + description + \", \" + Arrays.toString( bytes ) + \"]\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}