{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1330",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1330/ExplicitIndexMigrator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1330/ExplicitIndexMigrator.java\nindex 816cc29652a..6a0383a86a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1330/ExplicitIndexMigrator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1330/ExplicitIndexMigrator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storemigration.participant;\n \n import java.io.File;\n@@ -42,123 +43,121 @@ import org.neo4j.upgrade.lucene.LuceneExplicitIndexUpgrader.Monitor;\n  */\n public class ExplicitIndexMigrator extends AbstractStoreMigrationParticipant\n {\n-    private static final String LUCENE_EXPLICIT_INDEX_PROVIDER_NAME = \"lucene\";\n-    private final Map<String,IndexImplementation> indexProviders;\n-    private final FileSystemAbstraction fileSystem;\n-    private File migrationExplicitIndexesRoot;\n-    private File originalExplicitIndexesRoot;\n-    private final Log log;\n-    private boolean explicitIndexMigrated;\n+  private static final String LUCENE_EXPLICIT_INDEX_PROVIDER_NAME = \"lucene\";\n+  private final Map<String, IndexImplementation> indexProviders;\n+  private final FileSystemAbstraction fileSystem;\n+  private File migrationExplicitIndexesRoot;\n+  private File originalExplicitIndexesRoot;\n+  private final Log log;\n+  private boolean explicitIndexMigrated;\n \n-    public ExplicitIndexMigrator( FileSystemAbstraction fileSystem, Map<String,IndexImplementation> indexProviders,\n-            LogProvider logProvider )\n-    {\n-        super( \"Explicit indexes\" );\n-        this.fileSystem = fileSystem;\n-        this.indexProviders = indexProviders;\n-        this.log = logProvider.getLog( getClass() );\n-    }\n+  public ExplicitIndexMigrator(FileSystemAbstraction fileSystem, Map<String, IndexImplementation> indexProviders,\n+                               LogProvider logProvider)\n+  {\n+    super(\"Explicit indexes\");\n+    this.fileSystem = fileSystem;\n+    this.indexProviders = indexProviders;\n+    this.log = logProvider.getLog(getClass());\n+  }\n \n-    @Override\n-    public void migrate( File storeDir, File migrationDir, ProgressReporter progressMonitor,\n-            String versionToMigrateFrom, String versionToMigrateTo ) throws IOException\n+  @Override\n+  public void migrate(File storeDir, File migrationDir, ProgressReporter progressMonitor,\n+                      String versionToMigrateFrom, String versionToMigrateTo) throws IOException\n+  {\n+    IndexImplementation indexImplementation = indexProviders.get(LUCENE_EXPLICIT_INDEX_PROVIDER_NAME);\n+    if (indexImplementation != null)\n     {\n-        IndexImplementation indexImplementation = indexProviders.get( LUCENE_EXPLICIT_INDEX_PROVIDER_NAME );\n-        if ( indexImplementation != null )\n+      RecordFormats from = RecordFormatSelector.selectForVersion(versionToMigrateFrom);\n+      RecordFormats to = RecordFormatSelector.selectForVersion(versionToMigrateTo);\n+      if (!from.hasCompatibleCapabilities(to, CapabilityType.INDEX))\n+      {\n+        originalExplicitIndexesRoot = indexImplementation.getIndexImplementationDirectory(storeDir);\n+        migrationExplicitIndexesRoot = indexImplementation.getIndexImplementationDirectory(migrationDir);\n+        if (isNotEmptyDirectory(originalExplicitIndexesRoot))\n         {\n-            RecordFormats from = RecordFormatSelector.selectForVersion( versionToMigrateFrom );\n-            RecordFormats to = RecordFormatSelector.selectForVersion( versionToMigrateTo );\n-            if ( !from.hasCompatibleCapabilities( to, CapabilityType.INDEX ) )\n-            {\n-                originalExplicitIndexesRoot = indexImplementation.getIndexImplementationDirectory( storeDir );\n-                migrationExplicitIndexesRoot = indexImplementation.getIndexImplementationDirectory( migrationDir );\n-                if ( isNotEmptyDirectory( originalExplicitIndexesRoot ) )\n-                {\n-                    migrateExplicitIndexes( progressMonitor );\n-                    explicitIndexMigrated = true;\n-                }\n-            }\n+          migrateExplicitIndexes(progressMonitor);\n+          explicitIndexMigrated = true;\n         }\n-        else\n-        {\n-            log.debug( \"Lucene index provider not found, nothing to migrate.\" );\n-        }\n-    }\n-\n-    @Override\n-    public void moveMigratedFiles( File migrationDir, File storeDir, String versionToMigrateFrom,\n-            String versionToMigrateTo )\n-            throws IOException\n+      }\n+    } else\n     {\n-        if ( explicitIndexMigrated )\n-        {\n-            fileSystem.deleteRecursively( originalExplicitIndexesRoot );\n-            fileSystem.moveToDirectory( migrationExplicitIndexesRoot, originalExplicitIndexesRoot.getParentFile() );\n-        }\n+      log.debug(\"Lucene index provider not found, nothing to migrate.\");\n     }\n+  }\n \n-    @Override\n-    public void cleanup( File migrationDir ) throws IOException\n+  @Override\n+  public void moveMigratedFiles(File migrationDir, File storeDir, String versionToMigrateFrom,\n+                                String versionToMigrateTo)\n+      throws IOException\n+  {\n+    if (explicitIndexMigrated)\n     {\n-        if ( isIndexMigrationDirectoryExists() )\n-        {\n-            fileSystem.deleteRecursively( migrationExplicitIndexesRoot );\n-        }\n+      fileSystem.deleteRecursively(originalExplicitIndexesRoot);\n+      fileSystem.moveToDirectory(migrationExplicitIndexesRoot, originalExplicitIndexesRoot.getParentFile());\n     }\n+  }\n \n-    private boolean isIndexMigrationDirectoryExists()\n+  @Override\n+  public void cleanup(File migrationDir) throws IOException\n+  {\n+    if (isIndexMigrationDirectoryExists())\n     {\n-        return migrationExplicitIndexesRoot != null && fileSystem.fileExists( migrationExplicitIndexesRoot );\n+      fileSystem.deleteRecursively(migrationExplicitIndexesRoot);\n     }\n+  }\n \n-    private void migrateExplicitIndexes( ProgressReporter progressMonitor ) throws IOException\n-    {\n-        try\n-        {\n-            fileSystem.copyRecursively( originalExplicitIndexesRoot, migrationExplicitIndexesRoot );\n-            Path indexRootPath = migrationExplicitIndexesRoot.toPath();\n-            LuceneExplicitIndexUpgrader indexUpgrader = createLuceneExplicitIndexUpgrader( indexRootPath, progressMonitor );\n-            indexUpgrader.upgradeIndexes();\n-        }\n-        catch ( ExplicitIndexMigrationException lime )\n-        {\n-            log.error( \"Migration of explicit indexes failed. Index: \" + lime.getFailedIndexName() + \" can't be \" +\n-                       \"migrated.\", lime );\n-            throw new IOException( \"Explicit index migration failed.\", lime );\n-        }\n-    }\n+  private boolean isIndexMigrationDirectoryExists()\n+  {\n+    return migrationExplicitIndexesRoot != null && fileSystem.fileExists(migrationExplicitIndexesRoot);\n+  }\n \n-    private boolean isNotEmptyDirectory( File file )\n+  private void migrateExplicitIndexes(ProgressReporter progressMonitor) throws IOException\n+  {\n+    try\n     {\n-        if ( fileSystem.isDirectory( file ) )\n-        {\n-            File[] files = fileSystem.listFiles( file );\n-            return files != null && files.length > 0;\n-        }\n-        return false;\n+      fileSystem.copyRecursively(originalExplicitIndexesRoot, migrationExplicitIndexesRoot);\n+      Path indexRootPath = migrationExplicitIndexesRoot.toPath();\n+      LuceneExplicitIndexUpgrader indexUpgrader = createLuceneExplicitIndexUpgrader(indexRootPath, progressMonitor);\n+      indexUpgrader.upgradeIndexes();\n+    } catch (ExplicitIndexMigrationException lime)\n+    {\n+      log.error(\"Migration of explicit indexes failed. Index: \" + lime.getFailedIndexName() + \" can't be \" +\n+          \"migrated.\", lime);\n+      throw new IOException(\"Explicit index migration failed.\", lime);\n     }\n+  }\n \n-    LuceneExplicitIndexUpgrader createLuceneExplicitIndexUpgrader( Path indexRootPath,\n-            ProgressReporter progressMonitor )\n+  private boolean isNotEmptyDirectory(File file)\n+  {\n+    if (fileSystem.isDirectory(file))\n     {\n-        return new LuceneExplicitIndexUpgrader( indexRootPath, progressMonitor( progressMonitor ) );\n+      File[] files = fileSystem.listFiles(file);\n+      return files != null && files.length > 0;\n     }\n+    return false;\n+  }\n+\n+  LuceneExplicitIndexUpgrader createLuceneExplicitIndexUpgrader(Path indexRootPath,\n+                                                                ProgressReporter progressMonitor)\n+  {\n+    return new LuceneExplicitIndexUpgrader(indexRootPath, progressMonitor(progressMonitor));\n+  }\n \n-    private Monitor progressMonitor( ProgressReporter progressMonitor )\n+  private Monitor progressMonitor(ProgressReporter progressMonitor)\n+  {\n+    return new Monitor()\n     {\n-        return new Monitor()\n-        {\n-            @Override\n-            public void starting( int total )\n-            {\n-                progressMonitor.start( total );\n-            }\n+      @Override\n+      public void starting(int total)\n+      {\n+        progressMonitor.start(total);\n+      }\n \n-            @Override\n-            public void migrated( String name )\n-            {\n-                progressMonitor.progress( 1 );\n-            }\n-        };\n-    }\n+      @Override\n+      public void migrated(String name)\n+      {\n+        progressMonitor.progress(1);\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "134",
                    "column": "49",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1330/ExplicitIndexMigrator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1330/ExplicitIndexMigrator.java\nindex 816cc29652a..dd474ed941c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1330/ExplicitIndexMigrator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1330/ExplicitIndexMigrator.java\n@@ -62,7 +62,7 @@ public class ExplicitIndexMigrator extends AbstractStoreMigrationParticipant\n     @Override\n     public void migrate( File storeDir, File migrationDir, ProgressReporter progressMonitor,\n             String versionToMigrateFrom, String versionToMigrateTo ) throws IOException\n-    {\n+{\n         IndexImplementation indexImplementation = indexProviders.get( LUCENE_EXPLICIT_INDEX_PROVIDER_NAME );\n         if ( indexImplementation != null )\n         {\n@@ -87,9 +87,8 @@ public class ExplicitIndexMigrator extends AbstractStoreMigrationParticipant\n \n     @Override\n     public void moveMigratedFiles( File migrationDir, File storeDir, String versionToMigrateFrom,\n-            String versionToMigrateTo )\n-            throws IOException\n-    {\n+            String versionToMigrateTo ) throws IOException\n+{\n         if ( explicitIndexMigrated )\n         {\n             fileSystem.deleteRecursively( originalExplicitIndexesRoot );\n@@ -122,9 +121,8 @@ public class ExplicitIndexMigrator extends AbstractStoreMigrationParticipant\n         }\n         catch ( ExplicitIndexMigrationException lime )\n         {\n-            log.error( \"Migration of explicit indexes failed. Index: \" + lime.getFailedIndexName() + \" can't be \" +\n-                       \"migrated.\", lime );\n-            throw new IOException( \"Explicit index migration failed.\", lime );\n+            log.error( \"Migration of explicit indexes failed. Index: \" + lime.getFailedIndexName() + \" can't be \" + \"migrated.\", lime );\n+    throw new IOException( \"Explicit index migration failed.\", lime );\n         }\n     }\n \n@@ -133,7 +131,7 @@ public class ExplicitIndexMigrator extends AbstractStoreMigrationParticipant\n         if ( fileSystem.isDirectory( file ) )\n         {\n             File[] files = fileSystem.listFiles( file );\n-            return files != null && files.length > 0;\n+            return files != null && files.length> 0;\n         }\n         return false;\n     }\n@@ -161,4 +159,4 @@ public class ExplicitIndexMigrator extends AbstractStoreMigrationParticipant\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}