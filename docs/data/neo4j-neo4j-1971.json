{
    "project_name": "neo4j-neo4j",
    "error_id": "1971",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1971/FusionIndexBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1971/FusionIndexBase.java\nindex 0efdeaf88fd..ed365923856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1971/FusionIndexBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1971/FusionIndexBase.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.Arrays;\n@@ -39,12 +40,12 @@ import org.neo4j.values.storable.ValueCategory;\n  */\n public abstract class FusionIndexBase<T>\n {\n-    static final Function<Value,ValueCategory> CATEGORY_OF = value -> value.valueGroup().category();\n+    static final Function<Value, ValueCategory> CATEGORY_OF = value -> value.valueGroup().category();\n \n     final SlotSelector slotSelector;\n     final InstanceSelector<T> instanceSelector;\n \n-    FusionIndexBase( SlotSelector slotSelector, InstanceSelector<T> instanceSelector )\n+    FusionIndexBase(SlotSelector slotSelector, InstanceSelector<T> instanceSelector)\n     {\n         this.slotSelector = slotSelector;\n         this.instanceSelector = instanceSelector;\n@@ -52,10 +53,10 @@ public abstract class FusionIndexBase<T>\n \n     /**\n      * See {@link #forAll(ThrowingConsumer, Object[])}\n-     *\n+     * <p>\n      * Method for calling a lambda function on many objects when it is expected that the function might\n      * throw an exception. First exception will be thrown and subsequent will be suppressed.\n-     *\n+     * <p>\n      * For example, in FusionIndexAccessor:\n      * <pre>\n      *    public void drop() throws IOException\n@@ -66,20 +67,20 @@ public abstract class FusionIndexBase<T>\n      *\n      * @param consumer lambda function to call on each object passed\n      * @param subjects {@link Iterable} of objects to call the function on\n-     * @param <E> the type of exception anticipated, inferred from the lambda\n+     * @param <E>      the type of exception anticipated, inferred from the lambda\n      * @throws E if consumption fails with this exception\n      */\n-    public static <T, E extends Exception> void forAll( ThrowingConsumer<T,E> consumer, Iterable<T> subjects ) throws E\n+    public static <T, E extends Exception> void forAll(ThrowingConsumer<T, E> consumer, Iterable<T> subjects) throws E\n     {\n-        Iterables.safeForAll( consumer, subjects );\n+        Iterables.safeForAll(consumer, subjects);\n     }\n \n     /**\n      * See {@link #forAll(ThrowingConsumer, Iterable)}\n-     *\n+     * <p>\n      * Method for calling a lambda function on many objects when it is expected that the function might\n      * throw an exception. First exception will be thrown and subsequent will be suppressed.\n-     *\n+     * <p>\n      * For example, in FusionIndexAccessor:\n      * <pre>\n      *    public void drop() throws IOException\n@@ -90,21 +91,21 @@ public abstract class FusionIndexBase<T>\n      *\n      * @param consumer lambda function to call on each object passed\n      * @param subjects varargs array of objects to call the function on\n-     * @param <E> the type of exception anticipated, inferred from the lambda\n+     * @param <E>      the type of exception anticipated, inferred from the lambda\n      * @throws E if consumption fails with this exception\n      */\n-    public static <T, E extends Exception> void forAll( ThrowingConsumer<T,E> consumer, T[] subjects ) throws E\n+    public static <T, E extends Exception> void forAll(ThrowingConsumer<T, E> consumer, T[] subjects) throws E\n     {\n-        forAll( consumer, Arrays.asList( subjects ) );\n+        forAll(consumer, Arrays.asList(subjects));\n     }\n \n-    public static <T extends ConsistencyCheckable> boolean consistencyCheck( Iterable<T> checkables, ReporterFactory reporterFactory,\n-            PageCursorTracer cursorTracer )\n+    public static <T extends ConsistencyCheckable> boolean consistencyCheck(Iterable<T> checkables, ReporterFactory reporterFactory,\n+                                                                            PageCursorTracer cursorTracer)\n     {\n         boolean result = true;\n-        for ( ConsistencyCheckable part : checkables )\n+        for (ConsistencyCheckable part : checkables)\n         {\n-            result &= part.consistencyCheck( reporterFactory, cursorTracer );\n+            result &= part.consistencyCheck(reporterFactory, cursorTracer);\n         }\n         return result;\n     }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}