{
    "project_name": "Stratio-bdt",
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "690",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param numberOfCookies number of cookies that must be saved\n     */\n    @Then(\"^I have '(.+?)' selenium cookies saved$\")\n    public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n        Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "690",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/88/SeleniumSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/88/SeleniumSpec.java\nindex 9e74157c98c..3fdb0f330d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/88/SeleniumSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/88/SeleniumSpec.java\n@@ -115,8 +115,9 @@ public class SeleniumSpec extends BaseGSpec {\n     @Given(\"^I switch to the iframe on index '(\\\\d+?)'$\")\n     public void seleniumSwitchFrame(Integer index) {\n \n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         WebElement elem = commonspec.getPreviousWebElements().getPreviousWebElements().get(index);\n         commonspec.getDriver().switchTo().frame(elem);\n@@ -131,7 +132,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException exception\n      */\n     @Given(\"^I switch to iframe with '([^:]*?):(.+?)'$\")\n-    public void seleniumIdFrame(String method, String idframe) throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n+    public void seleniumIdFrame(String method, String idframe)\n+        throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n         assertThat(commonspec.locateElement(method, idframe, 1));\n \n         if (method.equals(\"id\") || method.equals(\"name\")) {\n@@ -179,7 +181,9 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @When(\"^I drag '([^:]*?):(.+?)' and drop it to '([^:]*?):(.+?)'$\")\n-    public void seleniumDrag(String smethod, String source, String dmethod, String destination) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void seleniumDrag(String smethod, String source, String dmethod, String destination)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n \n         List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n@@ -190,6 +194,7 @@ public class SeleniumSpec extends BaseGSpec {\n \n     /**\n      * Dragging element with offset\n+     *\n      * @param smethod\n      * @param source\n      * @param xOffset\n@@ -201,7 +206,9 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws IllegalAccessException\n      */\n     @When(\"I move element with '([^:]*?):(.+?)', '(-?\\\\d+)' pixels horizontally and '(\\\\d+?)' pixels vertically$\")\n-    public void seleniumDragOffset(String smethod, String source, int xOffset, int yOffset) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void seleniumDragOffset(String smethod, String source, int xOffset, int yOffset)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n         List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n         builder.dragAndDropBy(sourceElement.get(0), xOffset, yOffset).perform();\n@@ -218,13 +225,15 @@ public class SeleniumSpec extends BaseGSpec {\n     public void seleniumClick(Integer index) throws InterruptedException {\n \n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         }\n     }\n@@ -239,15 +248,19 @@ public class SeleniumSpec extends BaseGSpec {\n     public void seleniumDoubleClick(Integer index) throws InterruptedException {\n         Actions action = new Actions(commonspec.getDriver());\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n \n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n         }\n     }\n \n@@ -258,10 +271,13 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @When(\"^I clear the content on text input at index '(\\\\d+?)'$\")\n     public void seleniumClear(Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).isTextField(commonspec.getTextFieldCondition());\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index))\n+            .isTextField(commonspec.getTextFieldCondition());\n \n         commonspec.getPreviousWebElements().getPreviousWebElements().get(index).clear();\n     }\n@@ -274,11 +290,14 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @When(\"^I delete the text '(.+?)' on the element on index '(\\\\d+?)'( and replace it for '(.+?)')?$\")\n     public void seleniumDelete(String text, Integer index, String foo, String replacement) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         Actions actions = new Actions(commonspec.getDriver());\n-        actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index), (text.length() / 2), 0);\n+        actions\n+            .moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index),\n+                (text.length() / 2), 0);\n         for (int i = 0; i < (text.length() / 2); i++) {\n             actions.sendKeys(Keys.ARROW_LEFT);\n             actions.build().perform();\n@@ -302,18 +321,21 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @When(\"^I type '(.+?)' on the element on index '(\\\\d+?)'$\")\n     public void seleniumType(@Transform(NullableStringConverter.class) String text, Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n         while (text.length() > 0) {\n             Actions actions = new Actions(commonspec.getDriver());\n             if (-1 == text.indexOf(\"\\\\n\")) {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n                 actions.click();\n                 actions.sendKeys(text);\n                 actions.build().perform();\n                 text = \"\";\n             } else {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n                 actions.click();\n                 actions.sendKeys(text.substring(0, text.indexOf(\"\\\\n\")));\n                 actions.build().perform();\n@@ -324,11 +346,13 @@ public class SeleniumSpec extends BaseGSpec {\n \n     /**\n      * Paste text on {@code text}\n+     *\n      * @param jsSelector example: div #id_div a .a_class\n      * @param text\n      */\n     @Given(\"^I type on element '(.+?)' the following text '(.+?)'\")\n-    public void seleniumAppend(@Transform(NullableStringConverter.class) String jsSelector, @Transform(NullableStringConverter.class) String text) {\n+    public void seleniumAppend(@Transform(NullableStringConverter.class) String jsSelector,\n+                               @Transform(NullableStringConverter.class) String text) {\n         WebDriver driver = commonspec.getDriver();\n         JavascriptExecutor js = (JavascriptExecutor) driver;\n         js.executeScript(\"document.querySelector('\" + jsSelector + \"').value = '\" + text + \"'\");\n@@ -336,6 +360,7 @@ public class SeleniumSpec extends BaseGSpec {\n \n     /**\n      * Wait for render a html element\n+     *\n      * @param method\n      * @param element\n      * @param timeout\n@@ -359,7 +384,7 @@ public class SeleniumSpec extends BaseGSpec {\n             fail(\"Unknown search method: \" + method);\n         }\n         driverWait.until(ExpectedConditions.\n-                presenceOfElementLocated(criteriaSel));\n+            presenceOfElementLocated(criteriaSel));\n     }\n \n     /**\n@@ -377,10 +402,12 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      */\n     @When(\"^I send '(.+?)'( on the element on index '(\\\\d+?)')?$\")\n-    public void seleniumKeys(@Transform(ArrayListConverter.class) List<String> strokes, String foo, Integer index) {\n+    public void seleniumKeys(@Transform(ArrayListConverter.class) List<String> strokes, String foo,\n+                             Integer index) {\n         if (index != null) {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n         }\n         assertThat(strokes).isNotEmpty();\n \n@@ -392,15 +419,21 @@ public class SeleniumSpec extends BaseGSpec {\n                 }\n                 Keys[] csa = csl.toArray(new Keys[csl.size()]);\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa).perform();\n+                    new Actions(commonspec.getDriver())\n+                        .sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa)\n+                        .perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(csa);\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+                        .sendKeys(csa);\n                 }\n             } else {\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), Keys.valueOf(stroke)).perform();\n+                    new Actions(commonspec.getDriver())\n+                        .sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                            Keys.valueOf(stroke)).perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(Keys.valueOf(stroke));\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+                        .sendKeys(Keys.valueOf(stroke));\n                 }\n             }\n         }\n@@ -459,15 +492,20 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' has '(.+?)' as text$\")\n     public void assertSeleniumTextOnElementPresent(Integer index, String text) {\n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String elementText = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText().replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String elementText =\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText()\n+                .replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n         if (!elementText.startsWith(\"regex:\")) {\n             //We are verifying that a web element contains a string\n             assertThat(elementText.matches(\"(.*)\" + text + \"(.*)\")).isTrue();\n         } else {\n             //We are verifying that a web element contains a regex\n-            assertThat(elementText.matches(text.substring(text.indexOf(\"regex:\") + 6, text.length()))).isTrue();\n+            assertThat(\n+                elementText.matches(text.substring(text.indexOf(\"regex:\") + 6, text.length())))\n+                .isTrue();\n         }\n     }\n \n@@ -478,7 +516,8 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^this text exists '(.+?)'$\")\n     public void assertSeleniumTextInSource(String text) {\n-        assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\").contains(text);\n+        assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\")\n+            .contains(text);\n     }\n \n     /**\n@@ -494,7 +533,9 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^'(\\\\d+?)' elements? exists? with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExists(Integer expectedCount, String method, String element) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExists(Integer expectedCount, String method, String element)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = commonspec.locateElement(method, element, expectedCount);\n         PreviousWebElements pwel = new PreviousWebElements(wel);\n         commonspec.setPreviousWebElements(pwel);\n@@ -518,8 +559,11 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, '(\\\\d+?)' elements exists with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount,\n-                                                      String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait,\n+                                                      Integer expectedCount,\n+                                                      String method, String element)\n+        throws InterruptedException, ClassNotFoundException, NoSuchFieldException,\n+        SecurityException, IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = null;\n         for (int i = 0; i < timeout; i += wait) {\n             wel = commonspec.locateElement(method, element, -1);\n@@ -544,9 +588,12 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) displayed$\")\n     public void assertSeleniumIsDisplayed(Integer index, Boolean isDisplayed) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed())\n+            .as(\n                 \"Unexpected element display property\").isEqualTo(isDisplayed);\n     }\n \n@@ -558,10 +605,12 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) enabled$\")\n     public void assertSeleniumIsEnabled(Integer index, Boolean isEnabled) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n-                .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n+            .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n     }\n \n     /**\n@@ -572,9 +621,12 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) selected$\")\n     public void assertSeleniumIsSelected(Integer index, Boolean isSelected) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected())\n+            .as(\n                 \"Unexpected element selected property\").isEqualTo(isSelected);\n     }\n \n@@ -587,11 +639,14 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' has '(.+?)' as '(.+?)'$\")\n     public void assertSeleniumHasAttributeValue(Integer index, String attribute, String value) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getAttribute(attribute);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+            .getAttribute(attribute);\n         assertThat(this.commonspec, val).as(\"Attribute not found\").isNotNull();\n-        assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\").matches(value);\n+        assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\")\n+            .matches(value);\n     }\n \n     /**\n@@ -623,8 +678,9 @@ public class SeleniumSpec extends BaseGSpec {\n \n         String webURL = commonspec.getWebHost() + commonspec.getWebPort();\n \n-        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n-                .endsWith(webURL.toLowerCase() + url);\n+        assertThat(commonspec.getDriver().getCurrentUrl())\n+            .as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n+            .endsWith(webURL.toLowerCase() + url);\n     }\n \n     /**\n@@ -641,8 +697,9 @@ public class SeleniumSpec extends BaseGSpec {\n      **/\n     @Then(\"^I save selenium dcos acs auth cookie in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String envVar) throws Exception {\n-        if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+        if (commonspec.getSeleniumCookies() != null &&\n+            commonspec.getSeleniumCookies().size() != 0) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(\"dcos-acs-auth-cookie\")) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -659,8 +716,9 @@ public class SeleniumSpec extends BaseGSpec {\n      **/\n     @Then(\"^I save selenium cookie '(.+?)' in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String cookieName, String envVar) throws Exception {\n-        if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+        if (commonspec.getSeleniumCookies() != null &&\n+            commonspec.getSeleniumCookies().size() != 0) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(cookieName)) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -682,6 +740,7 @@ public class SeleniumSpec extends BaseGSpec {\n         Assertions.assertThat(commonspec.cookieExists(cookieName)).isEqualTo(true);\n \n     }\n+\n     /**\n      * Check if the length of the cookie set match with the number of cookies thas must be saved\n      *\n@@ -700,9 +759,11 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^I save content of element in index '(\\\\d+?)' in environment variable '(.+?)'$\")\n     public void saveContentWebElementInEnvVar(Integer index, String envVar) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String text = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String text =\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n         ThreadProperty.set(envVar, text);\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 126
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "690",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "690",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}