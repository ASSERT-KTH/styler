{
    "project_name": "wso2-attic-commons",
    "error_id": "494",
    "information": {
        "errors": [
            {
                "line": "89",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 133).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            if (otherStreamReceiverListSize > 0) {\n                StreamEvent resetEvent = new SequenceResetEvent(System.currentTimeMillis());\n                for (int i = 0, otherStreamReceiverListSize = otherStreamReceiverList.size(); i < otherStreamReceiverListSize; i++) {\n                    otherStreamReceiverList.get(i).receive(resetEvent);\n                }\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/494/SequenceStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/494/SequenceStreamReceiver.java\nindex 61cde6d44b6..3529dd27803 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/494/SequenceStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/494/SequenceStreamReceiver.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.stream.recevier.sequence;\n \n import org.wso2.siddhi.core.config.SiddhiContext;\n@@ -28,93 +29,94 @@ import java.util.concurrent.ThreadPoolExecutor;\n \n public class SequenceStreamReceiver implements StreamElement, StreamReceiver, Runnable {\n \n-    //  private List<SingleStream> inputStreamList;\n-    private String streamId;\n-    private ThreadPoolExecutor threadPoolExecutor;\n-    private SchedulerQueue<StreamEvent> inputQueue = new SchedulerQueue<StreamEvent>();\n-    private List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList;\n-    private int sequenceSingleStreamReceiverListSize;\n-    private List<SequenceSingleStreamReceiver> otherStreamReceiverList;\n-    private int otherStreamReceiverListSize;\n-    private SiddhiContext context;\n-\n-    public SequenceStreamReceiver(String streamId,\n-                                  List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n-                                  ThreadPoolExecutor threadPoolExecutor, SiddhiContext context) {\n-        this.streamId = streamId;\n-        this.sequenceSingleStreamReceiverList = sequenceSingleStreamReceiverList;\n-        this.threadPoolExecutor = threadPoolExecutor;\n-        this.sequenceSingleStreamReceiverListSize = sequenceSingleStreamReceiverList.size();\n-        this.context = context;\n-    }\n+  //  private List<SingleStream> inputStreamList;\n+  private String streamId;\n+  private ThreadPoolExecutor threadPoolExecutor;\n+  private SchedulerQueue<StreamEvent> inputQueue = new SchedulerQueue<StreamEvent>();\n+  private List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList;\n+  private int sequenceSingleStreamReceiverListSize;\n+  private List<SequenceSingleStreamReceiver> otherStreamReceiverList;\n+  private int otherStreamReceiverListSize;\n+  private SiddhiContext context;\n \n-    @Override\n-    public void receive(StreamEvent streamEvent) throws InterruptedException {\n-        if (context.isSingleThreading()) {\n-            process(streamEvent);\n-        } else {\n-            if (!inputQueue.put(streamEvent)) {\n-                threadPoolExecutor.execute(this);\n-            }\n-        }\n+  public SequenceStreamReceiver(String streamId,\n+                                List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n+                                ThreadPoolExecutor threadPoolExecutor, SiddhiContext context) {\n+    this.streamId = streamId;\n+    this.sequenceSingleStreamReceiverList = sequenceSingleStreamReceiverList;\n+    this.threadPoolExecutor = threadPoolExecutor;\n+    this.sequenceSingleStreamReceiverListSize = sequenceSingleStreamReceiverList.size();\n+    this.context = context;\n+  }\n+\n+  @Override\n+  public void receive(StreamEvent streamEvent) throws InterruptedException {\n+    if (context.isSingleThreading()) {\n+      process(streamEvent);\n+    } else {\n+      if (!inputQueue.put(streamEvent)) {\n+        threadPoolExecutor.execute(this);\n+      }\n     }\n+  }\n \n-    @Override\n-    public void run() {\n-        int eventCounter = 0;\n-        while (true) {\n-\n-            StreamEvent streamEvent = inputQueue.poll();\n-            //System.out.println(\"thread \"+Thread.currentThread().getName()+\" \"+streamEvent);\n-            if (streamEvent == null) {\n-                break;\n-            } else if (context.getEventBatchSize() > 0 && eventCounter > context.getEventBatchSize()) {\n-                threadPoolExecutor.execute(this);\n-                break;\n-            }\n-            eventCounter++;\n-            process(streamEvent);\n+  @Override\n+  public void run() {\n+    int eventCounter = 0;\n+    while (true) {\n+\n+      StreamEvent streamEvent = inputQueue.poll();\n+      //System.out.println(\"thread \"+Thread.currentThread().getName()+\" \"+streamEvent);\n+      if (streamEvent == null) {\n+        break;\n+      } else if (context.getEventBatchSize() > 0 && eventCounter > context.getEventBatchSize()) {\n+        threadPoolExecutor.execute(this);\n+        break;\n+      }\n+      eventCounter++;\n+      process(streamEvent);\n \n-        }\n     }\n+  }\n \n-    private void process(StreamEvent streamEvent) {\n-        try {\n-            //in reverse order to execute the later states first to overcome to dependencies of count states\n-            for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n-                sequenceSingleStreamReceiverList.get(i).moveNextEventsToCurrentEvents();\n-            }\n-            if (otherStreamReceiverListSize > 0) {\n-                StreamEvent resetEvent = new SequenceResetEvent(System.currentTimeMillis());\n-                for (int i = 0, otherStreamReceiverListSize = otherStreamReceiverList.size(); i < otherStreamReceiverListSize; i++) {\n-                    otherStreamReceiverList.get(i).receive(resetEvent);\n-                }\n-            }\n-            for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n-                sequenceSingleStreamReceiverList.get(i).receive(streamEvent);\n-            }\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n+  private void process(StreamEvent streamEvent) {\n+    try {\n+      //in reverse order to execute the later states first to overcome to dependencies of count states\n+      for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n+        sequenceSingleStreamReceiverList.get(i).moveNextEventsToCurrentEvents();\n+      }\n+      if (otherStreamReceiverListSize > 0) {\n+        StreamEvent resetEvent = new SequenceResetEvent(System.currentTimeMillis());\n+        for (int i = 0, otherStreamReceiverListSize = otherStreamReceiverList.size(); i < otherStreamReceiverListSize;\n+             i++) {\n+          otherStreamReceiverList.get(i).receive(resetEvent);\n         }\n+      }\n+      for (int i = sequenceSingleStreamReceiverListSize - 1; i >= 0; i--) {\n+        sequenceSingleStreamReceiverList.get(i).receive(streamEvent);\n+      }\n+    } catch (Throwable t) {\n+      t.printStackTrace();\n     }\n+  }\n \n-    public String getStreamId() {\n-        return streamId;\n-    }\n+  public String getStreamId() {\n+    return streamId;\n+  }\n \n-    @Override\n-    public SchedulerQueue<StreamEvent> getWindow() {\n-        return null;\n-    }\n+  @Override\n+  public SchedulerQueue<StreamEvent> getWindow() {\n+    return null;\n+  }\n \n \n-    public void setOtherStreamReceivers(\n-            List<SequenceSingleStreamReceiver> otherStreamReceiverList) {\n-        this.otherStreamReceiverList = otherStreamReceiverList;\n-        otherStreamReceiverListSize = otherStreamReceiverList.size();\n-    }\n+  public void setOtherStreamReceivers(\n+    List<SequenceSingleStreamReceiver> otherStreamReceiverList) {\n+    this.otherStreamReceiverList = otherStreamReceiverList;\n+    otherStreamReceiverListSize = otherStreamReceiverList.size();\n+  }\n \n-    public List<SequenceSingleStreamReceiver> getSequenceSingleStreamReceiverList() {\n-        return sequenceSingleStreamReceiverList;\n-    }\n+  public List<SequenceSingleStreamReceiver> getSequenceSingleStreamReceiverList() {\n+    return sequenceSingleStreamReceiverList;\n+  }\n }\n",
            "diff_size": 111
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/494/SequenceStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/494/SequenceStreamReceiver.java\nindex 61cde6d44b6..988d133b5aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/494/SequenceStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/494/SequenceStreamReceiver.java\n@@ -38,10 +38,9 @@ public class SequenceStreamReceiver implements StreamElement, StreamReceiver, Ru\n     private int otherStreamReceiverListSize;\n     private SiddhiContext context;\n \n-    public SequenceStreamReceiver(String streamId,\n-                                  List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n+    public SequenceStreamReceiver(String streamId, List<SequenceSingleStreamReceiver> sequenceSingleStreamReceiverList,\n                                   ThreadPoolExecutor threadPoolExecutor, SiddhiContext context) {\n-        this.streamId = streamId;\n+    this.streamId = streamId;\n         this.sequenceSingleStreamReceiverList = sequenceSingleStreamReceiverList;\n         this.threadPoolExecutor = threadPoolExecutor;\n         this.sequenceSingleStreamReceiverListSize = sequenceSingleStreamReceiverList.size();\n@@ -74,8 +73,7 @@ public class SequenceStreamReceiver implements StreamElement, StreamReceiver, Ru\n             }\n             eventCounter++;\n             process(streamEvent);\n-\n-        }\n+    }\n     }\n \n     private void process(StreamEvent streamEvent) {\n@@ -117,4 +115,4 @@ public class SequenceStreamReceiver implements StreamElement, StreamReceiver, Ru\n     public List<SequenceSingleStreamReceiver> getSequenceSingleStreamReceiverList() {\n         return sequenceSingleStreamReceiverList;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}