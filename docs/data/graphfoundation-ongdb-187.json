{
    "project_name": "graphfoundation-ongdb",
    "error_id": "187",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/187/KeyFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/187/KeyFormat.java\nindex a0f6953bcd4..a821c39f8b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/187/KeyFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/187/KeyFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.counts;\n \n import org.neo4j.kernel.impl.api.CountsVisitor;\n@@ -30,120 +31,120 @@ import static org.neo4j.kernel.impl.store.counts.keys.CountsKeyFactory.indexStat\n \n class KeyFormat implements CountsVisitor\n {\n-    private static final byte NODE_COUNT = 1;\n-    private static final byte RELATIONSHIP_COUNT = 2;\n-    private static final byte INDEX = 127;\n-    private static final byte INDEX_STATS = 1;\n-    private static final byte INDEX_SAMPLE = 2;\n-    private final WritableBuffer buffer;\n+  private static final byte NODE_COUNT = 1;\n+  private static final byte RELATIONSHIP_COUNT = 2;\n+  private static final byte INDEX = 127;\n+  private static final byte INDEX_STATS = 1;\n+  private static final byte INDEX_SAMPLE = 2;\n+  private final WritableBuffer buffer;\n \n-    KeyFormat( WritableBuffer key )\n-    {\n-        assert key.size() >= 16;\n-        this.buffer = key;\n-    }\n+  KeyFormat(WritableBuffer key)\n+  {\n+    assert key.size() >= 16;\n+    this.buffer = key;\n+  }\n \n-    /**\n-     * Key format:\n-     * <pre>\n-     *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n-     * [t,0,0,0,0,0,0,0 ; 0,0,0,0,l,l,l,l]\n-     *  t - entry type - \"{@link #NODE_COUNT}\"\n-     *  l - label id\n-     * </pre>\n-     * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#incrementNodeCount(int, long)}.\n-     */\n-    @Override\n-    public void visitNodeCount( int labelId, long count )\n-    {\n-        buffer.putByte( 0, NODE_COUNT )\n-              .putInt( 12, labelId );\n-    }\n+  /**\n+   * Key format:\n+   * <pre>\n+   *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n+   * [t,0,0,0,0,0,0,0 ; 0,0,0,0,l,l,l,l]\n+   *  t - entry type - \"{@link #NODE_COUNT}\"\n+   *  l - label id\n+   * </pre>\n+   * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#incrementNodeCount(int, long)}.\n+   */\n+  @Override\n+  public void visitNodeCount(int labelId, long count)\n+  {\n+    buffer.putByte(0, NODE_COUNT)\n+        .putInt(12, labelId);\n+  }\n \n-    /**\n-     * Key format:\n-     * <pre>\n-     *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n-     * [t,0,0,0,s,s,s,s ; r,r,r,r,e,e,e,e]\n-     *  t - entry type - \"{@link #RELATIONSHIP_COUNT}\"\n-     *  s - start label id\n-     *  r - relationship type id\n-     *  e - end label id\n-     * </pre>\n-     * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#incrementRelationshipCount(int, int, int, long)}\n-     */\n-    @Override\n-    public void visitRelationshipCount( int startLabelId, int typeId, int endLabelId, long count )\n-    {\n-        buffer.putByte( 0, RELATIONSHIP_COUNT )\n-              .putInt( 4, startLabelId )\n-              .putInt( 8, typeId )\n-              .putInt( 12, endLabelId );\n-    }\n+  /**\n+   * Key format:\n+   * <pre>\n+   *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n+   * [t,0,0,0,s,s,s,s ; r,r,r,r,e,e,e,e]\n+   *  t - entry type - \"{@link #RELATIONSHIP_COUNT}\"\n+   *  s - start label id\n+   *  r - relationship type id\n+   *  e - end label id\n+   * </pre>\n+   * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#incrementRelationshipCount(int, int, int, long)}\n+   */\n+  @Override\n+  public void visitRelationshipCount(int startLabelId, int typeId, int endLabelId, long count)\n+  {\n+    buffer.putByte(0, RELATIONSHIP_COUNT)\n+        .putInt(4, startLabelId)\n+        .putInt(8, typeId)\n+        .putInt(12, endLabelId);\n+  }\n \n-    /**\n-     * Key format:\n-     * <pre>\n-     *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n-     * [t,0,0,0,i,i,i,i ; 0,0,0,0,0,0,0,k]\n-     *  t - index entry marker - \"{@link #INDEX}\"\n-     *  k - entry (sub)type - \"{@link #INDEX_STATS}\"\n-     *  i - index id\n-     * </pre>\n-     * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#replaceIndexUpdateAndSize(long, long, long)}.\n-     */\n-    @Override\n-    public void visitIndexStatistics( long indexId, long updates, long size )\n-    {\n-        indexKey( INDEX_STATS, indexId );\n-    }\n+  /**\n+   * Key format:\n+   * <pre>\n+   *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n+   * [t,0,0,0,i,i,i,i ; 0,0,0,0,0,0,0,k]\n+   *  t - index entry marker - \"{@link #INDEX}\"\n+   *  k - entry (sub)type - \"{@link #INDEX_STATS}\"\n+   *  i - index id\n+   * </pre>\n+   * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#replaceIndexUpdateAndSize(long, long, long)}.\n+   */\n+  @Override\n+  public void visitIndexStatistics(long indexId, long updates, long size)\n+  {\n+    indexKey(INDEX_STATS, indexId);\n+  }\n \n-    /**\n-     * Key format:\n-     * <pre>\n-     *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n-     * [t,0,0,0,i,i,i,i ; 0,0,0,0,0,0,0,k]\n-     *  t - index entry marker - \"{@link #INDEX}\"\n-     *  k - entry (sub)type - \"{@link #INDEX_STATS}\"\n-     *  i - index id\n-     * </pre>\n-     * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#replaceIndexSample(long , long, long)}.\n-     */\n-    @Override\n-    public void visitIndexSample( long indexId, long unique, long size )\n-    {\n-        indexKey( INDEX_SAMPLE, indexId );\n-    }\n+  /**\n+   * Key format:\n+   * <pre>\n+   *  0 1 2 3 4 5 6 7   8 9 A B C D E F\n+   * [t,0,0,0,i,i,i,i ; 0,0,0,0,0,0,0,k]\n+   *  t - index entry marker - \"{@link #INDEX}\"\n+   *  k - entry (sub)type - \"{@link #INDEX_STATS}\"\n+   *  i - index id\n+   * </pre>\n+   * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#replaceIndexSample(long, long, long)}.\n+   */\n+  @Override\n+  public void visitIndexSample(long indexId, long unique, long size)\n+  {\n+    indexKey(INDEX_SAMPLE, indexId);\n+  }\n \n-    private void indexKey( byte indexKey, long indexId )\n-    {\n-        buffer.putByte( 0, INDEX )\n-              .putInt( 4, (int) indexId )\n-              .putByte( 15, indexKey );\n-    }\n+  private void indexKey(byte indexKey, long indexId)\n+  {\n+    buffer.putByte(0, INDEX)\n+        .putInt(4, (int) indexId)\n+        .putByte(15, indexKey);\n+  }\n \n-    public static CountsKey readKey( ReadableBuffer key ) throws UnknownKey\n+  public static CountsKey readKey(ReadableBuffer key) throws UnknownKey\n+  {\n+    switch (key.getByte(0))\n     {\n-        switch ( key.getByte( 0 ) )\n+      case KeyFormat.NODE_COUNT:\n+        return CountsKeyFactory.nodeKey(key.getInt(12));\n+      case KeyFormat.RELATIONSHIP_COUNT:\n+        return CountsKeyFactory.relationshipKey(key.getInt(4), key.getInt(8), key.getInt(12));\n+      case KeyFormat.INDEX:\n+        byte indexKeyByte = key.getByte(15);\n+        long indexId = key.getInt(4);\n+        switch (indexKeyByte)\n         {\n-        case KeyFormat.NODE_COUNT:\n-            return CountsKeyFactory.nodeKey( key.getInt( 12 ) );\n-        case KeyFormat.RELATIONSHIP_COUNT:\n-            return CountsKeyFactory.relationshipKey( key.getInt( 4 ), key.getInt( 8 ), key.getInt( 12 ) );\n-        case KeyFormat.INDEX:\n-            byte indexKeyByte = key.getByte( 15 );\n-            long indexId = key.getInt( 4 );\n-            switch ( indexKeyByte )\n-            {\n-            case KeyFormat.INDEX_STATS:\n-                return indexStatisticsKey( indexId );\n-            case KeyFormat.INDEX_SAMPLE:\n-                return CountsKeyFactory.indexSampleKey( indexId );\n-            default:\n-                throw new IllegalStateException( \"Unknown index key: \" + indexKeyByte );\n-            }\n-        default:\n-            throw new UnknownKey( \"Unknown key type: \" + key );\n+          case KeyFormat.INDEX_STATS:\n+            return indexStatisticsKey(indexId);\n+          case KeyFormat.INDEX_SAMPLE:\n+            return CountsKeyFactory.indexSampleKey(indexId);\n+          default:\n+            throw new IllegalStateException(\"Unknown index key: \" + indexKeyByte);\n         }\n+      default:\n+        throw new UnknownKey(\"Unknown key type: \" + key);\n     }\n+  }\n }\n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "118",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/187/KeyFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/187/KeyFormat.java\nindex a0f6953bcd4..8cab2a2ba86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/187/KeyFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/187/KeyFormat.java\n@@ -56,9 +56,8 @@ class KeyFormat implements CountsVisitor\n     @Override\n     public void visitNodeCount( int labelId, long count )\n     {\n-        buffer.putByte( 0, NODE_COUNT )\n-              .putInt( 12, labelId );\n-    }\n+        buffer.putByte( 0, NODE_COUNT ).putInt( 12, labelId );\n+            }\n \n     /**\n      * Key format:\n@@ -75,11 +74,10 @@ class KeyFormat implements CountsVisitor\n     @Override\n     public void visitRelationshipCount( int startLabelId, int typeId, int endLabelId, long count )\n     {\n-        buffer.putByte( 0, RELATIONSHIP_COUNT )\n-              .putInt( 4, startLabelId )\n+        buffer.putByte( 0, RELATIONSHIP_COUNT ).putInt( 4, startLabelId )\n               .putInt( 8, typeId )\n               .putInt( 12, endLabelId );\n-    }\n+            }\n \n     /**\n      * Key format:\n@@ -117,8 +115,7 @@ class KeyFormat implements CountsVisitor\n \n     private void indexKey( byte indexKey, long indexId )\n     {\n-        buffer.putByte( 0, INDEX )\n-              .putInt( 4, (int) indexId )\n+        buffer.putByte( 0, INDEX ).putInt( 4, ( int) indexId )\n               .putByte( 15, indexKey );\n     }\n \n@@ -146,4 +143,4 @@ class KeyFormat implements CountsVisitor\n             throw new UnknownKey( \"Unknown key type: \" + key );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/187/KeyFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/187/KeyFormat.java\nindex a0f6953bcd4..5d8dd1763e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/187/KeyFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/187/KeyFormat.java\n@@ -25,7 +25,6 @@ import org.neo4j.kernel.impl.store.counts.keys.CountsKeyFactory;\n import org.neo4j.kernel.impl.store.kvstore.ReadableBuffer;\n import org.neo4j.kernel.impl.store.kvstore.UnknownKey;\n import org.neo4j.kernel.impl.store.kvstore.WritableBuffer;\n-\n import static org.neo4j.kernel.impl.store.counts.keys.CountsKeyFactory.indexStatisticsKey;\n \n class KeyFormat implements CountsVisitor\n@@ -53,11 +52,11 @@ class KeyFormat implements CountsVisitor\n      * </pre>\n      * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#incrementNodeCount(int, long)}.\n      */\n+\n     @Override\n     public void visitNodeCount( int labelId, long count )\n     {\n-        buffer.putByte( 0, NODE_COUNT )\n-              .putInt( 12, labelId );\n+        buffer.putByte( 0, NODE_COUNT ).putInt( 12, labelId );\n     }\n \n     /**\n@@ -72,13 +71,11 @@ class KeyFormat implements CountsVisitor\n      * </pre>\n      * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#incrementRelationshipCount(int, int, int, long)}\n      */\n+\n     @Override\n     public void visitRelationshipCount( int startLabelId, int typeId, int endLabelId, long count )\n     {\n-        buffer.putByte( 0, RELATIONSHIP_COUNT )\n-              .putInt( 4, startLabelId )\n-              .putInt( 8, typeId )\n-              .putInt( 12, endLabelId );\n+        buffer.putByte( 0, RELATIONSHIP_COUNT ).putInt( 4, startLabelId ).putInt( 8, typeId ).putInt( 12, endLabelId );\n     }\n \n     /**\n@@ -92,6 +89,7 @@ class KeyFormat implements CountsVisitor\n      * </pre>\n      * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#replaceIndexUpdateAndSize(long, long, long)}.\n      */\n+\n     @Override\n     public void visitIndexStatistics( long indexId, long updates, long size )\n     {\n@@ -109,6 +107,7 @@ class KeyFormat implements CountsVisitor\n      * </pre>\n      * For value format, see {@link org.neo4j.kernel.impl.store.counts.CountsUpdater#replaceIndexSample(long , long, long)}.\n      */\n+\n     @Override\n     public void visitIndexSample( long indexId, long unique, long size )\n     {\n@@ -117,9 +116,7 @@ class KeyFormat implements CountsVisitor\n \n     private void indexKey( byte indexKey, long indexId )\n     {\n-        buffer.putByte( 0, INDEX )\n-              .putInt( 4, (int) indexId )\n-              .putByte( 15, indexKey );\n+        buffer.putByte( 0, INDEX ).putInt( 4, (int) indexId ).putByte( 15, indexKey );\n     }\n \n     public static CountsKey readKey( ReadableBuffer key ) throws UnknownKey\n@@ -146,4 +143,4 @@ class KeyFormat implements CountsVisitor\n             throw new UnknownKey( \"Unknown key type: \" + key );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}