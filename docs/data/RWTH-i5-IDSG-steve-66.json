{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "23",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * @since 09.03.2018\n */\npublic class GetConfigurationTask extends CommunicationTask<GetConfigurationParams, GetConfigurationTask.ResponseWrapper> {\n\n    private static final String FORMAT =\n            \"<b>Known keys:</b>\"",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/66/GetConfigurationTask.java\nindex 80b620d7be4..0ff25722b79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/66/GetConfigurationTask.java\n@@ -20,139 +20,140 @@ import java.util.stream.Collectors;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 09.03.2018\n  */\n-public class GetConfigurationTask extends CommunicationTask<GetConfigurationParams, GetConfigurationTask.ResponseWrapper> {\n-\n-    private static final String FORMAT =\n-            \"<b>Known keys:</b>\"\n-                    + \"<br>\"\n-                    + \"%s\"\n-                    + \"<br>\"\n-                    + \"<b>Unknown keys:</b>\"\n-                    + \"<br>\"\n-                    + \"%s\";\n-\n-    private static final Joiner JOINER = Joiner.on(\",\");\n-\n-    public GetConfigurationTask(OcppVersion ocppVersion, GetConfigurationParams params) {\n-        super(ocppVersion, params);\n-    }\n-\n-    @Override\n-    public OcppCallback<ResponseWrapper> defaultCallback() {\n-        return new DefaultOcppCallback<ResponseWrapper>() {\n-            @Override\n-            public void success(String chargeBoxId, ResponseWrapper response) {\n-                String str = String.format(\n-                        FORMAT,\n-                        toStringConfList(response.getConfigurationKey()),\n-                        toStringUnknownList(response.getUnknownKey())\n-                );\n-\n-                addNewResponse(chargeBoxId, str);\n-            }\n-        };\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public <T extends RequestType> T getOcpp12Request() {\n-        throw new RuntimeException(\"Not supported\");\n+public class GetConfigurationTask\n+  extends CommunicationTask<GetConfigurationParams, GetConfigurationTask.ResponseWrapper> {\n+\n+  private static final String FORMAT =\n+    \"<b>Known keys:</b>\"\n+      + \"<br>\"\n+      + \"%s\"\n+      + \"<br>\"\n+      + \"<b>Unknown keys:</b>\"\n+      + \"<br>\"\n+      + \"%s\";\n+\n+  private static final Joiner JOINER = Joiner.on(\",\");\n+\n+  public GetConfigurationTask(OcppVersion ocppVersion, GetConfigurationParams params) {\n+    super(ocppVersion, params);\n+  }\n+\n+  @Override\n+  public OcppCallback<ResponseWrapper> defaultCallback() {\n+    return new DefaultOcppCallback<ResponseWrapper>() {\n+      @Override\n+      public void success(String chargeBoxId, ResponseWrapper response) {\n+        String str = String.format(\n+          FORMAT,\n+          toStringConfList(response.getConfigurationKey()),\n+          toStringUnknownList(response.getUnknownKey())\n+        );\n+\n+        addNewResponse(chargeBoxId, str);\n+      }\n+    };\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public <T extends RequestType> T getOcpp12Request() {\n+    throw new RuntimeException(\"Not supported\");\n+  }\n+\n+  @Override\n+  public ocpp.cp._2012._06.GetConfigurationRequest getOcpp15Request() {\n+    if (params.isSetConfKeyList()) {\n+      return new GetConfigurationRequest().withKey(params.getConfKeyList());\n+    } else {\n+      return new GetConfigurationRequest();\n     }\n-\n-    @Override\n-    public ocpp.cp._2012._06.GetConfigurationRequest getOcpp15Request() {\n-        if (params.isSetConfKeyList()) {\n-            return new GetConfigurationRequest().withKey(params.getConfKeyList());\n-        } else {\n-            return new GetConfigurationRequest();\n-        }\n-    }\n-\n-    @Override\n-    public ocpp.cp._2015._10.GetConfigurationRequest getOcpp16Request() {\n-        if (params.isSetConfKeyList()) {\n-            return new ocpp.cp._2015._10.GetConfigurationRequest().withKey(params.getConfKeyList());\n-        } else {\n-            return new ocpp.cp._2015._10.GetConfigurationRequest();\n-        }\n+  }\n+\n+  @Override\n+  public ocpp.cp._2015._10.GetConfigurationRequest getOcpp16Request() {\n+    if (params.isSetConfKeyList()) {\n+      return new ocpp.cp._2015._10.GetConfigurationRequest().withKey(params.getConfKeyList());\n+    } else {\n+      return new ocpp.cp._2015._10.GetConfigurationRequest();\n     }\n-\n-\n-    @Deprecated\n-    @Override\n-    public <T extends ResponseType> AsyncHandler<T> getOcpp12Handler(String chargeBoxId) {\n-        throw new RuntimeException(\"Not supported\");\n-    }\n-\n-    @Override\n-    public AsyncHandler<ocpp.cp._2012._06.GetConfigurationResponse> getOcpp15Handler(String chargeBoxId) {\n-        return res -> {\n-            try {\n-                GetConfigurationResponse response = res.get();\n-\n-                List<KeyValue> keyValues = response.getConfigurationKey()\n-                                                   .stream()\n-                                                   .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n-                                                   .collect(Collectors.toList());\n-\n-                success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n-            } catch (Exception e) {\n-                failed(chargeBoxId, e);\n-            }\n-        };\n+  }\n+\n+\n+  @Deprecated\n+  @Override\n+  public <T extends ResponseType> AsyncHandler<T> getOcpp12Handler(String chargeBoxId) {\n+    throw new RuntimeException(\"Not supported\");\n+  }\n+\n+  @Override\n+  public AsyncHandler<ocpp.cp._2012._06.GetConfigurationResponse> getOcpp15Handler(String chargeBoxId) {\n+    return res -> {\n+      try {\n+        GetConfigurationResponse response = res.get();\n+\n+        List<KeyValue> keyValues = response.getConfigurationKey()\n+          .stream()\n+          .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n+          .collect(Collectors.toList());\n+\n+        success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n+      } catch (Exception e) {\n+        failed(chargeBoxId, e);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public AsyncHandler<ocpp.cp._2015._10.GetConfigurationResponse> getOcpp16Handler(String chargeBoxId) {\n+    return res -> {\n+      try {\n+        ocpp.cp._2015._10.GetConfigurationResponse response = res.get();\n+        List<KeyValue> keyValues = response.getConfigurationKey()\n+          .stream()\n+          .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n+          .collect(Collectors.toList());\n+\n+        success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n+      } catch (Exception e) {\n+        failed(chargeBoxId, e);\n+      }\n+    };\n+  }\n+\n+  private static String toStringConfList(List<KeyValue> confList) {\n+    StringBuilder sb = new StringBuilder();\n+\n+    for (KeyValue keyValue : confList) {\n+      sb.append(keyValue.getKey())\n+        .append(\": \")\n+        .append(keyValue.getValue());\n+\n+      if (keyValue.isReadonly()) {\n+        sb.append(\" (read-only)\");\n+      }\n+\n+      sb.append(\"<br>\");\n     }\n \n-    @Override\n-    public AsyncHandler<ocpp.cp._2015._10.GetConfigurationResponse> getOcpp16Handler(String chargeBoxId) {\n-        return res -> {\n-            try {\n-                ocpp.cp._2015._10.GetConfigurationResponse response = res.get();\n-                List<KeyValue> keyValues = response.getConfigurationKey()\n-                                                   .stream()\n-                                                   .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n-                                                   .collect(Collectors.toList());\n-\n-                success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n-            } catch (Exception e) {\n-                failed(chargeBoxId, e);\n-            }\n-        };\n-    }\n-\n-    private static String toStringConfList(List<KeyValue> confList) {\n-        StringBuilder sb = new StringBuilder();\n-\n-        for (KeyValue keyValue : confList) {\n-            sb.append(keyValue.getKey())\n-              .append(\": \")\n-              .append(keyValue.getValue());\n-\n-            if (keyValue.isReadonly()) {\n-                sb.append(\" (read-only)\");\n-            }\n-\n-            sb.append(\"<br>\");\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    private static String toStringUnknownList(List<String> unknownList) {\n-        return JOINER.join(unknownList);\n-    }\n-\n-    @Getter\n-    @RequiredArgsConstructor\n-    public static class ResponseWrapper {\n-        private final List<KeyValue> configurationKey;\n-        private final List<String> unknownKey;\n-    }\n-\n-    @Getter\n-    @RequiredArgsConstructor\n-    private static class KeyValue {\n-        private final String key;\n-        private final String value;\n-        private final boolean readonly;\n-    }\n+    return sb.toString();\n+  }\n+\n+  private static String toStringUnknownList(List<String> unknownList) {\n+    return JOINER.join(unknownList);\n+  }\n+\n+  @Getter\n+  @RequiredArgsConstructor\n+  public static class ResponseWrapper {\n+    private final List<KeyValue> configurationKey;\n+    private final List<String> unknownKey;\n+  }\n+\n+  @Getter\n+  @RequiredArgsConstructor\n+  private static class KeyValue {\n+    private final String key;\n+    private final String value;\n+    private final boolean readonly;\n+  }\n }\n",
            "diff_size": 173
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/66/GetConfigurationTask.java\nindex 80b620d7be4..39661c78d65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/66/GetConfigurationTask.java\n@@ -77,8 +77,7 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n         }\n     }\n \n-\n-    @Deprecated\n+@Deprecated\n     @Override\n     public <T extends ResponseType> AsyncHandler<T> getOcpp12Handler(String chargeBoxId) {\n         throw new RuntimeException(\"Not supported\");\n@@ -90,12 +89,10 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n             try {\n                 GetConfigurationResponse response = res.get();\n \n-                List<KeyValue> keyValues = response.getConfigurationKey()\n-                                                   .stream()\n+                List<KeyValue> keyValues = response.getConfigurationKey().stream()\n                                                    .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n                                                    .collect(Collectors.toList());\n-\n-                success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n+success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n             } catch (Exception e) {\n                 failed(chargeBoxId, e);\n             }\n@@ -107,12 +104,10 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n         return res -> {\n             try {\n                 ocpp.cp._2015._10.GetConfigurationResponse response = res.get();\n-                List<KeyValue> keyValues = response.getConfigurationKey()\n-                                                   .stream()\n+                List<KeyValue> keyValues = response.getConfigurationKey().stream()\n                                                    .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n                                                    .collect(Collectors.toList());\n-\n-                success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n+success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n             } catch (Exception e) {\n                 failed(chargeBoxId, e);\n             }\n@@ -126,8 +121,7 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n             sb.append(keyValue.getKey())\n               .append(\": \")\n               .append(keyValue.getValue());\n-\n-            if (keyValue.isReadonly()) {\n+if (keyValue.isReadonly()) {\n                 sb.append(\" (read-only)\");\n             }\n \n@@ -155,4 +149,4 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n         private final String value;\n         private final boolean readonly;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/66/GetConfigurationTask.java\nindex 80b620d7be4..7d063c0c44b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/66/GetConfigurationTask.java\n@@ -11,7 +11,6 @@ import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import ocpp.cp._2012._06.GetConfigurationRequest;\n import ocpp.cp._2012._06.GetConfigurationResponse;\n-\n import javax.xml.ws.AsyncHandler;\n import java.util.List;\n import java.util.stream.Collectors;\n@@ -20,17 +19,14 @@ import java.util.stream.Collectors;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 09.03.2018\n  */\n-public class GetConfigurationTask extends CommunicationTask<GetConfigurationParams, GetConfigurationTask.ResponseWrapper> {\n \n-    private static final String FORMAT =\n-            \"<b>Known keys:</b>\"\n-                    + \"<br>\"\n-                    + \"%s\"\n-                    + \"<br>\"\n-                    + \"<b>Unknown keys:</b>\"\n-                    + \"<br>\"\n-                    + \"%s\";\n \n+public class GetConfigurationTask extends CommunicationTask<GetConfigurationParams, GetConfigurationTask.ResponseWrapper> {\n+    private static final String FORMAT = \"<b>Known keys:</b>\" + \"<br>\"\n+    + \"%s\"\n+    + \"<br>\"\n+    + \"<b>Unknown keys:</b>\"\n+    + \"<br>\" + \"%s\";\n     private static final Joiner JOINER = Joiner.on(\",\");\n \n     public GetConfigurationTask(OcppVersion ocppVersion, GetConfigurationParams params) {\n@@ -40,17 +36,15 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n     @Override\n     public OcppCallback<ResponseWrapper> defaultCallback() {\n         return new DefaultOcppCallback<ResponseWrapper>() {\n-            @Override\n-            public void success(String chargeBoxId, ResponseWrapper response) {\n-                String str = String.format(\n-                        FORMAT,\n-                        toStringConfList(response.getConfigurationKey()),\n-                        toStringUnknownList(response.getUnknownKey())\n-                );\n-\n-                addNewResponse(chargeBoxId, str);\n-            }\n-        };\n+\n+                   @Override\n+                   public void success(String chargeBoxId, ResponseWrapper response) {\n+                       String str = String.format(FORMAT,\n+                                                  toStringConfList(response.getConfigurationKey()),\n+                                                  toStringUnknownList(response.getUnknownKey()));\n+                       addNewResponse(chargeBoxId, str);\n+                   }\n+               };\n     }\n \n     @Deprecated\n@@ -62,7 +56,8 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n     @Override\n     public ocpp.cp._2012._06.GetConfigurationRequest getOcpp15Request() {\n         if (params.isSetConfKeyList()) {\n-            return new GetConfigurationRequest().withKey(params.getConfKeyList());\n+            return new GetConfigurationRequest()\n+.withKey(params.getConfKeyList());\n         } else {\n             return new GetConfigurationRequest();\n         }\n@@ -71,13 +66,13 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n     @Override\n     public ocpp.cp._2015._10.GetConfigurationRequest getOcpp16Request() {\n         if (params.isSetConfKeyList()) {\n-            return new ocpp.cp._2015._10.GetConfigurationRequest().withKey(params.getConfKeyList());\n+            return new ocpp.cp._2015._10.GetConfigurationRequest()\n+.withKey(params.getConfKeyList());\n         } else {\n             return new ocpp.cp._2015._10.GetConfigurationRequest();\n         }\n     }\n \n-\n     @Deprecated\n     @Override\n     public <T extends ResponseType> AsyncHandler<T> getOcpp12Handler(String chargeBoxId) {\n@@ -89,12 +84,10 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n         return res -> {\n             try {\n                 GetConfigurationResponse response = res.get();\n-\n                 List<KeyValue> keyValues = response.getConfigurationKey()\n-                                                   .stream()\n-                                                   .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n-                                                   .collect(Collectors.toList());\n-\n+                    .stream()\n+                    .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n+                    .collect(Collectors.toList());\n                 success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n             } catch (Exception e) {\n                 failed(chargeBoxId, e);\n@@ -108,10 +101,9 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n             try {\n                 ocpp.cp._2015._10.GetConfigurationResponse response = res.get();\n                 List<KeyValue> keyValues = response.getConfigurationKey()\n-                                                   .stream()\n-                                                   .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n-                                                   .collect(Collectors.toList());\n-\n+                    .stream()\n+                    .map(k -> new KeyValue(k.getKey(), k.getValue(), k.isReadonly()))\n+                    .collect(Collectors.toList());\n                 success(chargeBoxId, new ResponseWrapper(keyValues, response.getUnknownKey()));\n             } catch (Exception e) {\n                 failed(chargeBoxId, e);\n@@ -124,8 +116,7 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n \n         for (KeyValue keyValue : confList) {\n             sb.append(keyValue.getKey())\n-              .append(\": \")\n-              .append(keyValue.getValue());\n+.append(\": \").append(keyValue.getValue());\n \n             if (keyValue.isReadonly()) {\n                 sb.append(\" (read-only)\");\n@@ -133,7 +124,6 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n \n             sb.append(\"<br>\");\n         }\n-\n         return sb.toString();\n     }\n \n@@ -155,4 +145,4 @@ public class GetConfigurationTask extends CommunicationTask<GetConfigurationPara\n         private final String value;\n         private final boolean readonly;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "23",
                    "column": "84",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/66/GetConfigurationTask.java\nindex 80b620d7be4..de5add31640 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/66/GetConfigurationTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/66/GetConfigurationTask.java\n@@ -20,7 +20,9 @@ import java.util.stream.Collectors;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 09.03.2018\n  */\n-public class GetConfigurationTask extends CommunicationTask<GetConfigurationParams, GetConfigurationTask.ResponseWrapper> {\n+public class GetConfigurationTask extends CommunicationTask <GetConfigurationParams,GetConfigurationTask .\n+\n+    ResponseWrapper > {\n \n     private static final String FORMAT =\n             \"<b>Known keys:</b>\"\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}