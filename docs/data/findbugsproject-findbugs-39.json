{
    "project_name": "findbugsproject-findbugs",
    "error_id": "39",
    "information": {
        "errors": [
            {
                "line": "52",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     * Creates a new instance of Grouper.\n     *\n\t * @param callback the callback which receives the groups and elements\n     */\n    public Grouper(Callback<ElementType> callback) {\n        this.callback = callback;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "52",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/39/Grouper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/39/Grouper.java\nindex cd6bbef1bfe..27fd16e5a60 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/39/Grouper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/39/Grouper.java\n@@ -36,9 +36,9 @@ import java.util.Iterator;\n  *\n  * @author David Hovemeyer\n  */\n-public class Grouper <ElementType> {\n+public class Grouper<ElementType> {\n \n-    public interface Callback <ElementType2> {\n+    public interface Callback<ElementType2> {\n         public void startGroup(ElementType2 firstMember);\n \n         public void addToGroup(ElementType2 member);\n@@ -49,32 +49,32 @@ public class Grouper <ElementType> {\n     /**\n      * Creates a new instance of Grouper.\n      *\n-\t * @param callback the callback which receives the groups and elements\n+     * @param callback the callback which receives the groups and elements\n      */\n     public Grouper(Callback<ElementType> callback) {\n         this.callback = callback;\n-\t}\n+    }\n \n     /**\n      * Group elements of given collection according to given\n      * compartor's test for equality.  The groups are specified by\n-\t * calls to the Grouper's callback object.\n+     * calls to the Grouper's callback object.\n      *\n      * @param collection the collection\n      * @param comparator the comparator\n-\t */\n+     */\n     public void group(Collection<ElementType> collection, Comparator<ElementType> comparator) {\n         Iterator<ElementType> i = collection.iterator();\n         ElementType last = null;\n-\t\twhile (i.hasNext()) {\n+        while (i.hasNext()) {\n             ElementType current = i.next();\n             if (last != null && comparator.compare(last, current) == 0) {\n                 // Same group as before\n-\t\t\t\tcallback.addToGroup(current);\n+                callback.addToGroup(current);\n             } else {\n                 // Start of a new group\n                 callback.startGroup(current);\n-\t\t\t}\n+            }\n \n             last = current;\n         }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/39/Grouper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/39/Grouper.java\nindex cd6bbef1bfe..d181060364c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/39/Grouper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/39/Grouper.java\n@@ -36,48 +36,52 @@ import java.util.Iterator;\n  *\n  * @author David Hovemeyer\n  */\n-public class Grouper <ElementType> {\n \n-    public interface Callback <ElementType2> {\n+public class Grouper<ElementType> {\n+    public interface Callback<ElementType2> {\n         public void startGroup(ElementType2 firstMember);\n \n+\n         public void addToGroup(ElementType2 member);\n     }\n \n+\n     private Callback<ElementType> callback;\n \n     /**\n      * Creates a new instance of Grouper.\n      *\n-\t * @param callback the callback which receives the groups and elements\n+     * @param callback the callback which receives the groups and elements\n      */\n+\n+\n     public Grouper(Callback<ElementType> callback) {\n         this.callback = callback;\n-\t}\n+    }\n \n     /**\n      * Group elements of given collection according to given\n      * compartor's test for equality.  The groups are specified by\n-\t * calls to the Grouper's callback object.\n+     * calls to the Grouper's callback object.\n      *\n      * @param collection the collection\n      * @param comparator the comparator\n-\t */\n+     */\n+\n+\n     public void group(Collection<ElementType> collection, Comparator<ElementType> comparator) {\n         Iterator<ElementType> i = collection.iterator();\n         ElementType last = null;\n-\t\twhile (i.hasNext()) {\n+        while (i.hasNext()) {\n             ElementType current = i.next();\n             if (last != null && comparator.compare(last, current) == 0) {\n                 // Same group as before\n-\t\t\t\tcallback.addToGroup(current);\n+                callback.addToGroup(current);\n             } else {\n                 // Start of a new group\n                 callback.startGroup(current);\n-\t\t\t}\n-\n+            }\n             last = current;\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "52",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}