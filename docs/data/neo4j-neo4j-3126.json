{
    "project_name": "neo4j-neo4j",
    "error_id": "3126",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "230",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3126/ServiceAnnotationProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3126/ServiceAnnotationProcessor.java\nindex 6d1bd1a529c..eea192aa736 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3126/ServiceAnnotationProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3126/ServiceAnnotationProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.annotations.service;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -63,7 +64,7 @@ import static org.neo4j.annotations.AnnotationConstants.DEFAULT_NEW_LINE;\n  */\n public class ServiceAnnotationProcessor extends AbstractProcessor\n {\n-    private static final boolean enableDebug = Boolean.getBoolean( \"enableAnnotationLogging\" );\n+    private static final boolean enableDebug = Boolean.getBoolean(\"enableAnnotationLogging\");\n     private final MutableMultimap<TypeElement, TypeElement> serviceProviders = Multimaps.mutable.list.empty();\n     private final String newLine;\n     private Types typeUtils;\n@@ -71,18 +72,18 @@ public class ServiceAnnotationProcessor extends AbstractProcessor\n \n     public ServiceAnnotationProcessor()\n     {\n-        this( DEFAULT_NEW_LINE );\n+        this(DEFAULT_NEW_LINE);\n     }\n \n-    public ServiceAnnotationProcessor( String newLine )\n+    public ServiceAnnotationProcessor(String newLine)\n     {\n         this.newLine = newLine;\n     }\n \n     @Override\n-    public synchronized void init( ProcessingEnvironment processingEnv )\n+    public synchronized void init(ProcessingEnvironment processingEnv)\n     {\n-        super.init( processingEnv );\n+        super.init(processingEnv);\n         typeUtils = processingEnv.getTypeUtils();\n         elementUtils = processingEnv.getElementUtils();\n     }\n@@ -90,7 +91,7 @@ public class ServiceAnnotationProcessor extends AbstractProcessor\n     @Override\n     public Set<String> getSupportedAnnotationTypes()\n     {\n-        return newSetWith( ServiceProvider.class.getName() );\n+        return newSetWith(ServiceProvider.class.getName());\n     }\n \n     @Override\n@@ -100,157 +101,154 @@ public class ServiceAnnotationProcessor extends AbstractProcessor\n     }\n \n     @Override\n-    public boolean process( Set<? extends TypeElement> annotations, RoundEnvironment roundEnv )\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)\n     {\n         try\n         {\n-            if ( roundEnv.processingOver() )\n+            if (roundEnv.processingOver())\n             {\n-                if ( !roundEnv.errorRaised() )\n+                if (!roundEnv.errorRaised())\n                 {\n                     generateConfigs();\n                 }\n-            }\n-            else\n+            } else\n             {\n-                scan( roundEnv );\n+                scan(roundEnv);\n             }\n-        }\n-        catch ( Exception e )\n+        } catch (Exception e)\n         {\n-            error( \"Service annotation processor failed\", e );\n+            error(\"Service annotation processor failed\", e);\n         }\n         return false;\n     }\n \n-    private void scan( RoundEnvironment roundEnv )\n+    private void scan(RoundEnvironment roundEnv)\n     {\n-        final Set<TypeElement> elements = roundEnv.getElementsAnnotatedWith( ServiceProvider.class ).stream().map( TypeElement.class::cast ).collect( toSet() );\n-        info( \"Processing service providers: \" + elements.stream().map( Object::toString ).sorted( ).collect( toList() ) );\n-        for ( TypeElement serviceProvider : elements )\n+        final Set<TypeElement> elements = roundEnv.getElementsAnnotatedWith(ServiceProvider.class).stream().map(TypeElement.class::cast).collect(toSet());\n+        info(\"Processing service providers: \" + elements.stream().map(Object::toString).sorted().collect(toList()));\n+        for (TypeElement serviceProvider : elements)\n         {\n-            getImplementedService( serviceProvider ).ifPresent( service ->\n+            getImplementedService(serviceProvider).ifPresent(service ->\n             {\n-                info( format( \"Service %s provided by %s\", service, serviceProvider ) );\n-                serviceProviders.put( service, serviceProvider );\n-            } );\n+                info(format(\"Service %s provided by %s\", service, serviceProvider));\n+                serviceProviders.put(service, serviceProvider);\n+            });\n         }\n     }\n \n-    private Optional<TypeElement> getImplementedService( TypeElement serviceProvider )\n+    private Optional<TypeElement> getImplementedService(TypeElement serviceProvider)\n     {\n-        final Set<TypeMirror> types = getTypeWithSupertypes( serviceProvider.asType() );\n-        final List<TypeMirror> services = types.stream().filter( this::isService ).collect( toList() );\n+        final Set<TypeMirror> types = getTypeWithSupertypes(serviceProvider.asType());\n+        final List<TypeMirror> services = types.stream().filter(this::isService).collect(toList());\n \n-        if ( services.isEmpty() )\n+        if (services.isEmpty())\n         {\n-            error( format( \"Service provider %s neither has ascendants nor itself annotated with @Service)\", serviceProvider ), serviceProvider );\n+            error(format(\"Service provider %s neither has ascendants nor itself annotated with @Service)\", serviceProvider), serviceProvider);\n             return Optional.empty();\n         }\n \n-        if ( services.size() > 1 )\n+        if (services.size() > 1)\n         {\n-            error( format( \"Service provider %s has multiple ascendants annotated with @Service: %s\", serviceProvider, services ), serviceProvider );\n+            error(format(\"Service provider %s has multiple ascendants annotated with @Service: %s\", serviceProvider, services), serviceProvider);\n             return Optional.empty();\n         }\n \n-        return Optional.of( (TypeElement) typeUtils.asElement( services.get( 0 ) ) );\n+        return Optional.of((TypeElement) typeUtils.asElement(services.get(0)));\n     }\n \n-    private boolean isService( TypeMirror type )\n+    private boolean isService(TypeMirror type)\n     {\n-        return typeUtils.asElement( type ).getAnnotation( Service.class ) != null;\n+        return typeUtils.asElement(type).getAnnotation(Service.class) != null;\n     }\n \n-    private Set<TypeMirror> getTypeWithSupertypes( TypeMirror type )\n+    private Set<TypeMirror> getTypeWithSupertypes(TypeMirror type)\n     {\n         final Set<TypeMirror> allTypes = new HashSet<>();\n-        allTypes.add( type );\n-        final List<? extends TypeMirror> directSupertypes = typeUtils.directSupertypes( type );\n-        directSupertypes.forEach( directSupertype -> allTypes.addAll( getTypeWithSupertypes( directSupertype ) ) );\n+        allTypes.add(type);\n+        final List<? extends TypeMirror> directSupertypes = typeUtils.directSupertypes(type);\n+        directSupertypes.forEach(directSupertype -> allTypes.addAll(getTypeWithSupertypes(directSupertype)));\n         return allTypes;\n     }\n \n     private void generateConfigs() throws IOException\n     {\n-        for ( final TypeElement service : serviceProviders.keySet() )\n+        for (final TypeElement service : serviceProviders.keySet())\n         {\n-            final String path = \"META-INF/services/\" + elementUtils.getBinaryName( service );\n-            info( \"Generating service config file: \" + path );\n+            final String path = \"META-INF/services/\" + elementUtils.getBinaryName(service);\n+            info(\"Generating service config file: \" + path);\n \n-            final SortedSet<String> oldProviders = loadIfExists( path );\n+            final SortedSet<String> oldProviders = loadIfExists(path);\n             final SortedSet<String> newProviders = new TreeSet<>();\n \n-            serviceProviders.get( service ).forEach( providerType ->\n+            serviceProviders.get(service).forEach(providerType ->\n             {\n-                final String providerName = elementUtils.getBinaryName( providerType ).toString();\n-                newProviders.add( providerName );\n-            } );\n+                final String providerName = elementUtils.getBinaryName(providerType).toString();\n+                newProviders.add(providerName);\n+            });\n \n-            if ( oldProviders.containsAll( newProviders ) )\n+            if (oldProviders.containsAll(newProviders))\n             {\n-                info( \"No new service providers found\" );\n+                info(\"No new service providers found\");\n                 return;\n             }\n-            newProviders.addAll( oldProviders );\n+            newProviders.addAll(oldProviders);\n \n-            final FileObject file = processingEnv.getFiler().createResource( CLASS_OUTPUT, \"\", path );\n-            try ( BufferedWriter writer = new BufferedWriter( file.openWriter() ) )\n+            final FileObject file = processingEnv.getFiler().createResource(CLASS_OUTPUT, \"\", path);\n+            try (BufferedWriter writer = new BufferedWriter(file.openWriter()))\n             {\n-                info( \"Writing service providers: \" + newProviders );\n-                for ( final String provider : newProviders )\n+                info(\"Writing service providers: \" + newProviders);\n+                for (final String provider : newProviders)\n                 {\n-                    writer.write( provider );\n-                    writer.write( newLine );\n+                    writer.write(provider);\n+                    writer.write(newLine);\n                 }\n             }\n         }\n     }\n \n-    private SortedSet<String> loadIfExists( String path )\n+    private SortedSet<String> loadIfExists(String path)\n     {\n         final SortedSet<String> result = new TreeSet<>();\n         try\n         {\n-            final FileObject file = processingEnv.getFiler().getResource( CLASS_OUTPUT, \"\", path );\n+            final FileObject file = processingEnv.getFiler().getResource(CLASS_OUTPUT, \"\", path);\n             final List<String> lines = new ArrayList<>();\n-            try ( BufferedReader in = new BufferedReader( new InputStreamReader( file.openInputStream(), StandardCharsets.UTF_8 ) ) )\n+            try (BufferedReader in = new BufferedReader(new InputStreamReader(file.openInputStream(), StandardCharsets.UTF_8)))\n             {\n                 String line;\n-                while ( (line = in.readLine()) != null )\n+                while ((line = in.readLine()) != null)\n                 {\n-                    lines.add( line );\n+                    lines.add(line);\n                 }\n             }\n             lines.stream()\n-                    .map( s -> substringBefore( s, \"#\" ) )\n-                    .map( String::trim )\n-                    .filter( StringUtils::isNotEmpty )\n-                    .forEach( result::add );\n-            info( \"Loaded existing providers: \" + result );\n-        }\n-        catch ( IOException ignore )\n+              .map(s -> substringBefore(s, \"#\"))\n+              .map(String::trim)\n+              .filter(StringUtils::isNotEmpty)\n+              .forEach(result::add);\n+            info(\"Loaded existing providers: \" + result);\n+        } catch (IOException ignore)\n         {\n-            info( \"No existing providers loaded\" );\n+            info(\"No existing providers loaded\");\n         }\n         return result;\n     }\n \n-    private void info( String msg )\n+    private void info(String msg)\n     {\n-        if ( enableDebug )\n+        if (enableDebug)\n         {\n-            processingEnv.getMessager().printMessage( NOTE, msg );\n+            processingEnv.getMessager().printMessage(NOTE, msg);\n         }\n     }\n \n-    private void error( String msg, Exception e )\n+    private void error(String msg, Exception e)\n     {\n-        processingEnv.getMessager().printMessage( ERROR, msg + \": \" + getStackTrace( e ) );\n+        processingEnv.getMessager().printMessage(ERROR, msg + \": \" + getStackTrace(e));\n     }\n \n-    private void error( String msg, Element element )\n+    private void error(String msg, Element element)\n     {\n-        processingEnv.getMessager().printMessage( ERROR, msg, element );\n+        processingEnv.getMessager().printMessage(ERROR, msg, element);\n     }\n }\n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}