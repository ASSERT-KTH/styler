{
    "project_name": "neo4j-neo4j",
    "error_id": "2098",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "147",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2098/ParallelExecution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2098/ParallelExecution.java\nindex 98c4c802105..bcb0ad436e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2098/ParallelExecution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2098/ParallelExecution.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checker;\n \n import java.util.ArrayList;\n@@ -39,14 +40,15 @@ import static java.lang.Long.min;\n  */\n class ParallelExecution\n {\n-    static final Consumer<Throwable> NOOP_EXCEPTION_HANDLER = t -> {};\n+    static final Consumer<Throwable> NOOP_EXCEPTION_HANDLER = t -> {\n+    };\n     static final int DEFAULT_IDS_PER_CHUNK = 1_000_000;\n \n     private final int numberOfThreads;\n     private final Consumer<Throwable> exceptionHandler;\n     private int idsPerChunk;\n \n-    ParallelExecution( int numberOfThreads, Consumer<Throwable> exceptionHandler, int idsPerChunk )\n+    ParallelExecution(int numberOfThreads, Consumer<Throwable> exceptionHandler, int idsPerChunk)\n     {\n         this.numberOfThreads = numberOfThreads;\n         this.exceptionHandler = exceptionHandler;\n@@ -57,58 +59,57 @@ class ParallelExecution\n      * Runs the given tasks with a thread pool with a fixed number of threads, which is the number of threads given to this\n      * {@link ParallelExecution} instance at construction time. The number of jobs may exceed this number.\n      *\n-     * @param taskName name that the spawned threads will get.\n+     * @param taskName  name that the spawned threads will get.\n      * @param runnables jobs to run.\n      * @throws Exception on any job exception.\n      */\n-    void run( String taskName, ThrowingRunnable... runnables ) throws Exception\n+    void run(String taskName, ThrowingRunnable... runnables) throws Exception\n     {\n-        run( taskName, numberOfThreads, runnables );\n+        run(taskName, numberOfThreads, runnables);\n     }\n \n     /**\n      * Runs the given tasks with a thread pool with number of threads set to the number of tasks.\n      * I.e. all the given jobs will be run concurrently.\n      *\n-     * @param taskName name that the spawned threads will get.\n+     * @param taskName  name that the spawned threads will get.\n      * @param runnables jobs to run.\n      * @throws Exception on any job exception.\n      */\n-    void runAll( String taskName, ThrowingRunnable... runnables ) throws Exception\n+    void runAll(String taskName, ThrowingRunnable... runnables) throws Exception\n     {\n-        run( taskName, runnables.length, runnables );\n+        run(taskName, runnables.length, runnables);\n     }\n \n-    private void run( String taskName, int numberOfThreads, ThrowingRunnable... runnables ) throws Exception\n+    private void run(String taskName, int numberOfThreads, ThrowingRunnable... runnables) throws Exception\n     {\n-        var pool = Executors.newFixedThreadPool( numberOfThreads, new NamedThreadFactory( getClass().getSimpleName() + \"-\" + taskName ) );\n+        var pool = Executors.newFixedThreadPool(numberOfThreads, new NamedThreadFactory(getClass().getSimpleName() + \"-\" + taskName));\n         try\n         {\n-            List<InternalTask> tasks = Arrays.stream( runnables ).map( InternalTask::new ).collect( Collectors.toList() );\n-            Futures.getAllResults( pool.invokeAll( tasks ) );\n-        }\n-        finally\n+            List<InternalTask> tasks = Arrays.stream(runnables).map(InternalTask::new).collect(Collectors.toList());\n+            Futures.getAllResults(pool.invokeAll(tasks));\n+        } finally\n         {\n             pool.shutdown();\n         }\n     }\n \n-    ThrowingRunnable[] partition( RecordStore<?> store, RangeOperation rangeOperation )\n+    ThrowingRunnable[] partition(RecordStore<?> store, RangeOperation rangeOperation)\n     {\n-        LongRange range = LongRange.range( store.getNumberOfReservedLowIds(), store.getHighId() );\n-        return partition( range, rangeOperation );\n+        LongRange range = LongRange.range(store.getNumberOfReservedLowIds(), store.getHighId());\n+        return partition(range, rangeOperation);\n     }\n \n-    ThrowingRunnable[] partition( LongRange range, RangeOperation rangeOperation )\n+    ThrowingRunnable[] partition(LongRange range, RangeOperation rangeOperation)\n     {\n         List<ThrowingRunnable> partitions = new ArrayList<>();\n-        for ( long id = range.from(); id < range.to(); id += idsPerChunk )\n+        for (long id = range.from(); id < range.to(); id += idsPerChunk)\n         {\n-            long to = min( id + idsPerChunk, range.to() );\n+            long to = min(id + idsPerChunk, range.to());\n             boolean last = to == range.to();\n-            partitions.add( rangeOperation.operation( id, to, last ) );\n+            partitions.add(rangeOperation.operation(id, to, last));\n         }\n-        return partitions.toArray( new ThrowingRunnable[0] );\n+        return partitions.toArray(new ThrowingRunnable[0]);\n     }\n \n     int getNumberOfThreads()\n@@ -131,7 +132,8 @@ class ParallelExecution\n     private class InternalTask implements Callable<Void>\n     {\n         private final ThrowingRunnable runnable;\n-        InternalTask( ThrowingRunnable runnable )\n+\n+        InternalTask(ThrowingRunnable runnable)\n         {\n             this.runnable = runnable;\n         }\n@@ -142,10 +144,9 @@ class ParallelExecution\n             try\n             {\n                 runnable.call();\n-            }\n-            catch ( Throwable t )\n+            } catch (Throwable t)\n             {\n-                exceptionHandler.accept( t );\n+                exceptionHandler.accept(t);\n                 throw t;\n             }\n             return null;\n@@ -154,6 +155,6 @@ class ParallelExecution\n \n     interface RangeOperation\n     {\n-        ThrowingRunnable operation( long from, long to, boolean last );\n+        ThrowingRunnable operation(long from, long to, boolean last);\n     }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2098/ParallelExecution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2098/ParallelExecution.java\nindex 98c4c802105..1ebc1c0770d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2098/ParallelExecution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2098/ParallelExecution.java\n@@ -156,4 +156,4 @@ class ParallelExecution\n     {\n         ThrowingRunnable operation( long from, long to, boolean last );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}