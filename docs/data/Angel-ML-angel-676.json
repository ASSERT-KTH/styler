{
    "project_name": "Angel-ML-angel",
    "error_id": "676",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/676/SampleNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/676/SampleNeighborParam.java\nindex f6d1cba00b2..f238b8ffa6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/676/SampleNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/676/SampleNeighborParam.java\n@@ -76,10 +76,9 @@ public class SampleNeighborParam extends GetParam {\n         PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n+      throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n               .get(partitions.size() - 1).getEndCol());\n-    }\n+  }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n@@ -94,10 +93,11 @@ public class SampleNeighborParam extends GetParam {\n       if (length > 0) {\n         partParams.add(new PartSampleNeighborParam(matrixId,\n             partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n+  }\n+\n+partIndex++;\n     }\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/676/SampleNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/676/SampleNeighborParam.java\nindex f6d1cba00b2..fadc0250b5d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/676/SampleNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/676/SampleNeighborParam.java\n@@ -30,21 +30,21 @@ import java.util.List;\n /**\n  * The parameter of SampleNeighbor\n  */\n+\n public class SampleNeighborParam extends GetParam {\n \n   /**\n    * Node ids\n    */\n+\n   private final long[] nodeIds;\n \n   /**\n    * Sample neighbor number, if count <= 0, means get all neighbors\n    */\n   private final int count;\n-\n   private final List<PartitionGetParam> partParams;\n \n-\n   public SampleNeighborParam(int matrixId, long[] nodeIds, int count) {\n     super(matrixId);\n     this.nodeIds = nodeIds;\n@@ -71,14 +71,9 @@ public class SampleNeighborParam extends GetParam {\n   @Override\n   public List<PartitionGetParam> split() {\n     Arrays.sort(nodeIds);\n-\n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n+    List<PartitionKey> partitions = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n+      throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions.get(partitions.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n@@ -92,12 +87,10 @@ public class SampleNeighborParam extends GetParam {\n       }\n \n       if (length > 0) {\n-        partParams.add(new PartSampleNeighborParam(matrixId,\n-            partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n+        partParams.add(new PartSampleNeighborParam(matrixId, partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n       }\n       partIndex++;\n     }\n-\n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}