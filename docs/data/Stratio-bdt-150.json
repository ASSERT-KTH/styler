{
    "project_name": "Stratio-bdt",
    "error_id": "150",
    "information": {
        "errors": [
            {
                "line": "1574",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @throws Exception exception\n     */\n    public void resultsMustBeCassandra(DataTable expectedResults) throws Exception {\n        if (getCassandraResults() != null) {\n            //Map for query results\n            ColumnDefinitions columns = getCassandraResults().getColumnDefinitions();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/150/CommonG.java\nindex 4634730db16..5e5edde477e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/150/CommonG.java\n@@ -1571,6 +1571,7 @@ public class CommonG {\n      *                        IMPORTANT: All columns must exist\n      * @throws Exception exception\n      */\n+\n     public void resultsMustBeCassandra(DataTable expectedResults) throws Exception {\n         if (getCassandraResults() != null) {\n             //Map for query results\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/150/CommonG.java\nindex 4634730db16..34a763f328d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/150/CommonG.java\n@@ -112,7 +112,8 @@ public class CommonG {\n \n     private String resultsType = \"\";\n \n-    private Set<org.openqa.selenium.Cookie> seleniumCookies = new HashSet<org.openqa.selenium.Cookie>();\n+    private Set<org.openqa.selenium.Cookie> seleniumCookies =\n+        new HashSet<org.openqa.selenium.Cookie>();\n \n     private Map<String, String> headers = new HashMap<>();\n \n@@ -147,7 +148,8 @@ public class CommonG {\n     public static Pattern matchesOrContains(String expectedMessage) {\n         Pattern pattern;\n         if (expectedMessage.startsWith(\"regex:\")) {\n-            String regex = expectedMessage.substring(expectedMessage.indexOf(\"regex:\") + 6, expectedMessage.length());\n+            String regex = expectedMessage\n+                .substring(expectedMessage.indexOf(\"regex:\") + 6, expectedMessage.length());\n             pattern = Pattern.compile(regex);\n         } else {\n             pattern = Pattern.compile(Pattern.quote(expectedMessage));\n@@ -366,7 +368,9 @@ public class CommonG {\n      * @throws ClassNotFoundException   exception\n      */\n     public List<WebElement> locateElement(String method, String element,\n-                                          Integer expectedCount) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+                                          Integer expectedCount)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n \n         List<WebElement> wel = null;\n \n@@ -428,7 +432,7 @@ public class CommonG {\n \n         if (!currentData.equals(\"\")) {\n             currentData = currentData\n-                    .replaceAll(\"[\\\\\\\\|\\\\/|\\\\|\\\\s|:|\\\\*]\", \"_\");\n+                .replaceAll(\"[\\\\\\\\|\\\\/|\\\\|\\\\s|:|\\\\*]\", \"_\");\n         }\n \n         if (!\"\".equals(currentData)) {\n@@ -437,15 +441,16 @@ public class CommonG {\n \n         Timestamp ts = new Timestamp(new java.util.Date().getTime());\n         String outputFile = dir + clazz + \"/\"\n-                + ThreadProperty.get(\"feature\") + \".\" + ThreadProperty.get(\"scenario\") + \"/\" + currentBrowser +\n-                currentData + ts.toString() + suffix;\n+            + ThreadProperty.get(\"feature\") + \".\" + ThreadProperty.get(\"scenario\") + \"/\" +\n+            currentBrowser +\n+            currentData + ts.toString() + suffix;\n \n         outputFile = outputFile.replaceAll(\" \", \"_\");\n \n         if (type.endsWith(\"htmlSource\")) {\n             if (type.equals(\"framehtmlSource\")) {\n                 boolean isFrame = (Boolean) ((JavascriptExecutor) driver)\n-                        .executeScript(\"return window.top != window.self\");\n+                    .executeScript(\"return window.top != window.self\");\n \n                 if (isFrame) {\n                     outputFile = outputFile + \"frame.html\";\n@@ -479,10 +484,10 @@ public class CommonG {\n             File file = null;\n             driver.switchTo().defaultContent();\n             ((Locatable) driver.findElement(By.tagName(\"body\")))\n-                    .getCoordinates().inViewPort();\n+                .getCoordinates().inViewPort();\n \n             if (currentBrowser.startsWith(\"chrome\")\n-                    || currentBrowser.startsWith(\"droidemu\")) {\n+                || currentBrowser.startsWith(\"droidemu\")) {\n                 Actions actions = new Actions(driver);\n                 actions.keyDown(Keys.CONTROL).sendKeys(Keys.HOME).perform();\n                 actions.keyUp(Keys.CONTROL).perform();\n@@ -490,7 +495,7 @@ public class CommonG {\n                 file = chromeFullScreenCapture(driver);\n             } else {\n                 file = ((TakesScreenshot) driver)\n-                        .getScreenshotAs(OutputType.FILE);\n+                    .getScreenshotAs(OutputType.FILE);\n             }\n             try {\n                 FileUtils.copyFile(file, new File(outputFile));\n@@ -521,14 +526,16 @@ public class CommonG {\n             if ((oldTrailingImage.getHeight() == newTrailingImageHeight)) {\n                 newTrailingImage = oldTrailingImage;\n             } else {\n-                newTrailingImage = new BufferedImage(oldTrailingImage.getWidth(), oldTrailingImage.getHeight() - newTrailingImageHeight, BufferedImage.TYPE_INT_RGB);\n+                newTrailingImage = new BufferedImage(oldTrailingImage.getWidth(),\n+                    oldTrailingImage.getHeight() - newTrailingImageHeight,\n+                    BufferedImage.TYPE_INT_RGB);\n             }\n \n             newTrailingImage.createGraphics().drawImage(oldTrailingImage, 0,\n-                    0 - newTrailingImageHeight, null);\n+                0 - newTrailingImageHeight, null);\n \n             File newTrailingImageF = File.createTempFile(\"tmpnewTrailingImage\",\n-                    \".png\");\n+                \".png\");\n             newTrailingImageF.deleteOnExit();\n \n             ImageIO.write(newTrailingImage, \"png\", newTrailingImageF);\n@@ -541,7 +548,7 @@ public class CommonG {\n             }\n \n             BufferedImage img = new BufferedImage(finalWidth, finalHeight,\n-                    BufferedImage.TYPE_INT_RGB);\n+                BufferedImage.TYPE_INT_RGB);\n \n             Integer y = 0;\n             BufferedImage tmpImg = null;\n@@ -570,8 +577,8 @@ public class CommonG {\n \n         Boolean atBottom = false;\n         Integer windowSize = ((Long) ((JavascriptExecutor) driver)\n-                .executeScript(\"return document.documentElement.clientHeight\"))\n-                .intValue();\n+            .executeScript(\"return document.documentElement.clientHeight\"))\n+            .intValue();\n \n         Integer accuScroll = 0;\n         Integer newTrailingImageHeight = 0;\n@@ -581,10 +588,10 @@ public class CommonG {\n \n                 Thread.sleep(DEFAULT_SLEEP_TIME);\n                 capture.add(((TakesScreenshot) driver)\n-                        .getScreenshotAs(OutputType.FILE));\n+                    .getScreenshotAs(OutputType.FILE));\n \n                 ((JavascriptExecutor) driver).executeScript(\"if(window.screen)\"\n-                        + \" {window.scrollBy(0,\" + windowSize + \");};\");\n+                    + \" {window.scrollBy(0,\" + windowSize + \");};\");\n \n                 accuScroll += windowSize;\n                 if (getDocumentHeight(driver) <= accuScroll) {\n@@ -715,7 +722,8 @@ public class CommonG {\n         }\n         String text = writer.toString();\n \n-        String std = text.replace(\"\\r\", \"\").replace(\"\\n\", \"\"); // make sure we have unix style text regardless of the input\n+        String std = text.replace(\"\\r\", \"\")\n+            .replace(\"\\n\", \"\"); // make sure we have unix style text regardless of the input\n \n \n         if (\"json\".equals(type)) {\n@@ -843,7 +851,8 @@ public class CommonG {\n                     modifiedData = \"{\\\"content\\\":\" + modifiedData + \"}\";\n                     array = true;\n                 } else {\n-                    JsonObject object = new JsonObject(JsonValue.readHjson(modifiedData).asObject());\n+                    JsonObject object =\n+                        new JsonObject(JsonValue.readHjson(modifiedData).asObject());\n                     removeNulls(object);\n                     modifiedData = JsonValue.readHjson(object.toString()).toString();\n                 }\n@@ -875,21 +884,29 @@ public class CommonG {\n                             if (!\"[]\".equals(newValue)) {\n                                 jArray = new JSONArray(newValue);\n                             }\n-                            jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, jArray).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, jArray)\n+                                    .json();\n                             break;\n                         } else if (\"object\".equals(typeJsonObject)) {\n                             jObject = new JSONObject();\n                             if (!\"{}\".equals(newValue)) {\n                                 jObject = new JSONObject(newValue);\n                             }\n-                            jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, jObject).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, jObject)\n+                                    .json();\n                             break;\n                         } else if (\"string\".equals(typeJsonObject)) {\n-                            jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, newValue).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, newValue)\n+                                    .json();\n                             break;\n                         } else if (\"number\".equals(typeJsonObject)) {\n                             jNumber = new Double(newValue);\n-                            jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, jNumber).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, jNumber)\n+                                    .json();\n                             break;\n                         } else if (\"long\".equals(typeJsonObject)) {\n                             jLong = new Long(newValue);\n@@ -897,17 +914,23 @@ public class CommonG {\n                             break;\n                         } else if (\"boolean\".equals(typeJsonObject)) {\n                             jBoolean = new Boolean(newValue);\n-                            jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, jBoolean).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, jBoolean)\n+                                    .json();\n                             break;\n                         } else if (\"null\".equals(typeJsonObject)) {\n-                            nullValue = JsonPath.parse(modifiedData).put(newComposeKey, newKey, null).jsonString();\n+                            nullValue =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, null)\n+                                    .jsonString();\n                             break;\n                         } else {\n                             String replaceValue = JsonPath.parse(modifiedData).read(composeKey);\n                             String toBeReplaced = newValue.split(\"->\")[0];\n                             String replacement = newValue.split(\"->\")[1];\n                             newValue = replaceValue.replace(toBeReplaced, replacement);\n-                            jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, newValue).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).put(newComposeKey, newKey, newValue)\n+                                    .json();\n                             break;\n                         }\n //                        jsonAsMap = JsonPath.parse(modifiedData).put(newComposeKey, newKey, newValue).json();\n@@ -923,14 +946,18 @@ public class CommonG {\n                             composeKey = \"$.content\" + composeKey.substring(1, composeKey.length());\n                         }\n                         String appendValue = JsonPath.parse(modifiedData).read(composeKey);\n-                        jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, appendValue + newValue).json();\n+                        jsonAsMap =\n+                            JsonPath.parse(modifiedData).set(composeKey, appendValue + newValue)\n+                                .json();\n                         break;\n                     case \"PREPEND\":\n                         if (array) {\n                             composeKey = \"$.content\" + composeKey.substring(1, composeKey.length());\n                         }\n                         String prependValue = JsonPath.parse(modifiedData).read(composeKey);\n-                        jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, newValue + prependValue).json();\n+                        jsonAsMap =\n+                            JsonPath.parse(modifiedData).set(composeKey, newValue + prependValue)\n+                                .json();\n                         break;\n                     case \"REPLACE\":\n                         if (array) {\n@@ -948,14 +975,17 @@ public class CommonG {\n                             if (!\"{}\".equals(newValue)) {\n                                 jObject = new JSONObject(newValue);\n                             }\n-                            jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, jObject).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).set(composeKey, jObject).json();\n                             break;\n                         } else if (\"string\".equals(typeJsonObject)) {\n-                            jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, newValue).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).set(composeKey, newValue).json();\n                             break;\n                         } else if (\"number\".equals(typeJsonObject)) {\n                             jNumber = new Double(newValue);\n-                            jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, jNumber).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).set(composeKey, jNumber).json();\n                             break;\n                         } else if (\"long\".equals(typeJsonObject)) {\n                             jLong = new Long(newValue);\n@@ -963,17 +993,20 @@ public class CommonG {\n                             break;\n                         } else if (\"boolean\".equals(typeJsonObject)) {\n                             jBoolean = new Boolean(newValue);\n-                            jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, jBoolean).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).set(composeKey, jBoolean).json();\n                             break;\n                         } else if (\"null\".equals(typeJsonObject)) {\n-                            nullValue = JsonPath.parse(modifiedData).set(composeKey, null).jsonString();\n+                            nullValue =\n+                                JsonPath.parse(modifiedData).set(composeKey, null).jsonString();\n                             break;\n                         } else {\n                             String replaceValue = JsonPath.parse(modifiedData).read(composeKey);\n                             String toBeReplaced = newValue.split(\"->\")[0];\n                             String replacement = newValue.split(\"->\")[1];\n                             newValue = replaceValue.replace(toBeReplaced, replacement);\n-                            jsonAsMap = JsonPath.parse(modifiedData).set(composeKey, newValue).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).set(composeKey, newValue).json();\n                             break;\n                         }\n                     case \"ADDTO\":\n@@ -992,14 +1025,17 @@ public class CommonG {\n                             if (!\"{}\".equals(newValue)) {\n                                 jObject = new JSONObject(newValue);\n                             }\n-                            jsonAsMap = JsonPath.parse(modifiedData).add(composeKey, jObject).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).add(composeKey, jObject).json();\n                             break;\n                         } else if (\"string\".equals(typeJsonObject)) {\n-                            jsonAsMap = JsonPath.parse(modifiedData).add(composeKey, newValue).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).add(composeKey, newValue).json();\n                             break;\n                         } else if (\"number\".equals(typeJsonObject)) {\n                             jNumber = new Double(newValue);\n-                            jsonAsMap = JsonPath.parse(modifiedData).add(composeKey, jNumber).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).add(composeKey, jNumber).json();\n                             break;\n                         } else if (\"long\".equals(typeJsonObject)) {\n                             jLong = new Long(newValue);\n@@ -1007,10 +1043,12 @@ public class CommonG {\n                             break;\n                         } else if (\"boolean\".equals(typeJsonObject)) {\n                             jBoolean = new Boolean(newValue);\n-                            jsonAsMap = JsonPath.parse(modifiedData).add(composeKey, jBoolean).json();\n+                            jsonAsMap =\n+                                JsonPath.parse(modifiedData).add(composeKey, jBoolean).json();\n                             break;\n                         } else if (\"null\".equals(typeJsonObject)) {\n-                            nullValue = JsonPath.parse(modifiedData).add(composeKey, null).jsonString();\n+                            nullValue =\n+                                JsonPath.parse(modifiedData).add(composeKey, null).jsonString();\n                             break;\n                         } else {\n                             // TO-DO: understand  newValue.split(\"->\")[0];  and  newValue.split(\"->\")[1];\n@@ -1102,7 +1140,9 @@ public class CommonG {\n      * @throws Exception exception\n      */\n     @Deprecated\n-    public Future<Response> generateRequest(String requestType, boolean secure, String user, String password, String endPoint, String data, String type, String codeBase64) throws Exception {\n+    public Future<Response> generateRequest(String requestType, boolean secure, String user,\n+                                            String password, String endPoint, String data,\n+                                            String type, String codeBase64) throws Exception {\n         return generateRequest(requestType, secure, user, password, endPoint, data, type);\n     }\n \n@@ -1118,7 +1158,9 @@ public class CommonG {\n      * @param type        type of data to be sent (json|string)\n      * @throws Exception exception\n      */\n-    public Future<Response> generateRequest(String requestType, boolean secure, String user, String password, String endPoint, String data, String type) throws Exception {\n+    public Future<Response> generateRequest(String requestType, boolean secure, String user,\n+                                            String password, String endPoint, String data,\n+                                            String type) throws Exception {\n \n         String protocol = this.getRestProtocol();\n         Future<Response> response = null;\n@@ -1143,11 +1185,11 @@ public class CommonG {\n         // Setup user and password for requests\n         if (user != null) {\n             realm = new Realm.RealmBuilder()\n-                    .setPrincipal(user)\n-                    .setPassword(password)\n-                    .setUsePreemptiveAuth(true)\n-                    .setScheme(AuthScheme.BASIC)\n-                    .build();\n+                .setPrincipal(user)\n+                .setPassword(password)\n+                .setUsePreemptiveAuth(true)\n+                .setScheme(AuthScheme.BASIC)\n+                .build();\n         }\n \n         switch (requestType.toUpperCase()) {\n@@ -1158,7 +1200,8 @@ public class CommonG {\n                     request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                 } else if (\"string\".equals(type)) {\n                     this.getLogger().debug(\"Sending request as: {}\", type);\n-                    request = request.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n+                    request = request.setHeader(\"Content-Type\",\n+                        \"application/x-www-form-urlencoded; charset=UTF-8\");\n                 } else if (\"gov\".equals(type)) {\n                     request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                     request = request.setHeader(\"Accept\", \"application/json\");\n@@ -1177,7 +1220,7 @@ public class CommonG {\n                 if (this.getSeleniumCookies().size() > 0) {\n                     for (org.openqa.selenium.Cookie cookie : this.getSeleniumCookies()) {\n                         request.addCookie(new Cookie(cookie.getName(), cookie.getValue(),\n-                                false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n+                            false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n                     }\n                 }\n \n@@ -1198,19 +1241,23 @@ public class CommonG {\n                 if (data == \"\") {\n                     request = this.getClient().prepareDelete(restURL + endPoint);\n                     if (\"gov\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                         request = request.setHeader(\"Accept\", \"application/json\");\n                         request = request.setHeader(\"X-TenantID\", \"NONE\");\n                     }\n                 } else {\n                     request = this.getClient().prepareDelete(restURL + endPoint).setBody(data);\n                     if (\"json\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                     } else if (\"string\".equals(type)) {\n                         this.getLogger().debug(\"Sending request as: {}\", type);\n-                        request = request.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n+                        request = request.setHeader(\"Content-Type\",\n+                            \"application/x-www-form-urlencoded; charset=UTF-8\");\n                     } else if (\"gov\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                         request = request.setHeader(\"Accept\", \"application/json\");\n                         request = request.setHeader(\"X-TenantID\", \"NONE\");\n                     }\n@@ -1218,7 +1265,7 @@ public class CommonG {\n                 if (this.getSeleniumCookies().size() > 0) {\n                     for (org.openqa.selenium.Cookie cookie : this.getSeleniumCookies()) {\n                         request.addCookie(new Cookie(cookie.getName(), cookie.getValue(),\n-                                false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n+                            false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n                     }\n                 }\n \n@@ -1249,12 +1296,15 @@ public class CommonG {\n                 } else {\n                     request = this.getClient().preparePost(restURL + endPoint).setBody(data);\n                     if (\"json\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                     } else if (\"string\".equals(type)) {\n                         this.getLogger().debug(\"Sending request as: {}\", type);\n-                        request = request.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n+                        request = request.setHeader(\"Content-Type\",\n+                            \"application/x-www-form-urlencoded; charset=UTF-8\");\n                     } else if (\"gov\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                         request = request.setHeader(\"Accept\", \"application/json\");\n                         request = request.setHeader(\"X-TenantID\", \"NONE\");\n                     }\n@@ -1266,7 +1316,7 @@ public class CommonG {\n                     if (this.getSeleniumCookies().size() > 0) {\n                         for (org.openqa.selenium.Cookie cookie : this.getSeleniumCookies()) {\n                             request.addCookie(new Cookie(cookie.getName(), cookie.getValue(),\n-                                    false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n+                                false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n                         }\n                     }\n \n@@ -1294,11 +1344,14 @@ public class CommonG {\n                 } else {\n                     request = this.getClient().preparePut(restURL + endPoint).setBody(data);\n                     if (\"json\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                     } else if (\"string\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n+                        request = request.setHeader(\"Content-Type\",\n+                            \"application/x-www-form-urlencoded; charset=UTF-8\");\n                     } else if (\"gov\".equals(type)) {\n-                        request = request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n+                        request =\n+                            request.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n                         request = request.setHeader(\"Accept\", \"application/json\");\n                         request = request.setHeader(\"X-TenantID\", \"NONE\");\n                     }\n@@ -1310,7 +1363,7 @@ public class CommonG {\n                     if (this.getSeleniumCookies().size() > 0) {\n                         for (org.openqa.selenium.Cookie cookie : this.getSeleniumCookies()) {\n                             request.addCookie(new Cookie(cookie.getName(), cookie.getValue(),\n-                                    false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n+                                false, cookie.getDomain(), cookie.getPath(), 99, false, false));\n                         }\n                     }\n \n@@ -1356,7 +1409,9 @@ public class CommonG {\n      * @throws Exception exception\n      */\n     @Deprecated\n-    public Future<Response> generateRequest(String requestType, boolean secure, String endPoint, String data, String type, String codeBase64) throws Exception {\n+    public Future<Response> generateRequest(String requestType, boolean secure, String endPoint,\n+                                            String data, String type, String codeBase64)\n+        throws Exception {\n         return generateRequest(requestType, false, null, null, endPoint, data, type, \"\");\n     }\n \n@@ -1376,7 +1431,10 @@ public class CommonG {\n      * @throws InvocationTargetException exception\n      */\n \n-    public void setPreviousElement(String element, String value) throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException {\n+    public void setPreviousElement(String element, String value)\n+        throws NoSuchFieldException, SecurityException, IllegalArgumentException,\n+        IllegalAccessException, InstantiationException, ClassNotFoundException,\n+        NoSuchMethodException, InvocationTargetException {\n         Reflections reflections = new Reflections(\"com.stratio\");\n         Set classes = reflections.getSubTypesOf(CommonG.class);\n \n@@ -1435,7 +1493,7 @@ public class CommonG {\n \n     public boolean cookieExists(String cookieName) {\n         if (this.getSeleniumCookies() != null && this.getSeleniumCookies().size() != 0) {\n-            for (org.openqa.selenium.Cookie cookie: this.getSeleniumCookies()) {\n+            for (org.openqa.selenium.Cookie cookie : this.getSeleniumCookies()) {\n                 if (cookie.getName().contains(cookieName)) {\n                     return true;\n                 }\n@@ -1481,7 +1539,8 @@ public class CommonG {\n                 resultsCucumber = new HashMap<String, String>();\n \n                 for (int i = 0; i < expectedResults.cells().get(0).size(); i++) {\n-                    resultsCucumber.put(expectedResults.cells().get(0).get(i), expectedResults.cells().get(e).get(i));\n+                    resultsCucumber.put(expectedResults.cells().get(0).get(i),\n+                        expectedResults.cells().get(e).get(i));\n \n                 }\n                 resultsListExpected.add(resultsCucumber);\n@@ -1491,28 +1550,42 @@ public class CommonG {\n             getLogger().debug(\"Obtained Results: \" + getCSVResults().toString());\n \n             //First, we check that the number of rows are equals\n-            assertThat(resultsListExpected.size()).overridingErrorMessage(\"The number of rows of expected result is %s but the csv file contains %s\", resultsListExpected.size(), getCSVResults().size()).isEqualTo(getCSVResults().size());\n+            assertThat(resultsListExpected.size()).overridingErrorMessage(\n+                \"The number of rows of expected result is %s but the csv file contains %s\",\n+                resultsListExpected.size(), getCSVResults().size())\n+                .isEqualTo(getCSVResults().size());\n             //Then we check the CSV content\n             for (int i = 0; i < resultsListExpected.size(); i++) {\n                 Map<String, String> expectedRow = resultsListExpected.get(i);\n                 Map<String, String> obtainedRow = getCSVResults().get(i);\n                 //First we check the number of columns\n-                assertThat(expectedRow.size()).overridingErrorMessage(\"The number columns of row %s has to be %s but was %s\", i, expectedRow.size(), obtainedRow.size()).isEqualTo(obtainedRow.size());\n+                assertThat(expectedRow.size())\n+                    .overridingErrorMessage(\"The number columns of row %s has to be %s but was %s\",\n+                        i, expectedRow.size(), obtainedRow.size()).isEqualTo(obtainedRow.size());\n                 //Check the headers values\n-                assertThat(expectedRow.keySet()).overridingErrorMessage(\"The headers do not match\").isEqualTo(obtainedRow.keySet());\n+                assertThat(expectedRow.keySet()).overridingErrorMessage(\"The headers do not match\")\n+                    .isEqualTo(obtainedRow.keySet());\n                 //Now, we are going to check the values\n                 Set<String> keys = expectedRow.keySet();\n                 for (String key : keys) {\n-                    if (expectedRow.get(key).contains(\"regex\") || expectedRow.get(key).contains(\"not_check\")) {\n+                    if (expectedRow.get(key).contains(\"regex\") ||\n+                        expectedRow.get(key).contains(\"not_check\")) {\n                         if (expectedRow.get(key).contains(\"regex-timestamp\")) {\n                             String[] format = expectedRow.get(key).split(\"_\");\n-                            assertThat(true).overridingErrorMessage(\"The values of key %s and %s line are not a valid timestamp\", expectedRow.get(key), i).isEqualTo(isThisDateValid(obtainedRow.get(key), format[1]));\n+                            assertThat(true).overridingErrorMessage(\n+                                \"The values of key %s and %s line are not a valid timestamp\",\n+                                expectedRow.get(key), i)\n+                                .isEqualTo(isThisDateValid(obtainedRow.get(key), format[1]));\n                         }\n                         if (expectedRow.get(key).contains(\"regex-uuid\")) {\n-                            assertThat(true).overridingErrorMessage(\"The values of key %s and %s line are not an UIDD\", expectedRow.get(key), i).isEqualTo(isUUID(obtainedRow.get(key)));\n+                            assertThat(true).overridingErrorMessage(\n+                                \"The values of key %s and %s line are not an UIDD\",\n+                                expectedRow.get(key), i).isEqualTo(isUUID(obtainedRow.get(key)));\n                         }\n                     } else {\n-                        assertThat(expectedRow.get(key)).overridingErrorMessage(\"The values of key %s and %s line are not equals\", expectedRow.get(key), i).isEqualTo(obtainedRow.get(key));\n+                        assertThat(expectedRow.get(key)).overridingErrorMessage(\n+                            \"The values of key %s and %s line are not equals\", expectedRow.get(key),\n+                            i).isEqualTo(obtainedRow.get(key));\n                     }\n                 }\n             }\n@@ -1523,6 +1596,7 @@ public class CommonG {\n \n     /**\n      * Check if a string is a UUID\n+     *\n      * @param uuid - UUID value\n      * @return true if it is a UUID or false if it is not an UUID\n      */\n@@ -1537,6 +1611,7 @@ public class CommonG {\n \n     /**\n      * Check is a String is a valid timestamp format\n+     *\n      * @param dateToValidate\n      * @param dateFromat\n      * @return true/false\n@@ -1556,6 +1631,7 @@ public class CommonG {\n         }\n         return true;\n     }\n+\n     /**\n      * Checks the different results of a previous query to Cassandra database\n      *\n@@ -1598,7 +1674,8 @@ public class CommonG {\n                 resultsCucumber = new HashMap<String, Object>();\n \n                 for (int i = 0; i < expectedResults.cells().get(0).size(); i++) {\n-                    resultsCucumber.put(expectedResults.cells().get(0).get(i), expectedResults.cells().get(e).get(i));\n+                    resultsCucumber.put(expectedResults.cells().get(0).get(i),\n+                        expectedResults.cells().get(e).get(i));\n \n                 }\n                 resultsListExpected.add(resultsCucumber);\n@@ -1613,7 +1690,8 @@ public class CommonG {\n             for (int e = 0; e < resultsListExpected.size(); e++) {\n                 iterations = 0;\n                 occurrencesObtained = 0;\n-                occurrencesExpected = Integer.parseInt(resultsListExpected.get(e).get(\"occurrences\").toString());\n+                occurrencesExpected =\n+                    Integer.parseInt(resultsListExpected.get(e).get(\"occurrences\").toString());\n \n                 for (int i = 0; i < resultsListObtained.size(); i++) {\n \n@@ -1622,7 +1700,8 @@ public class CommonG {\n                     while (it.hasNext()) {\n                         nextKey = it.next();\n                         if (!nextKey.equals(\"occurrences\")) {\n-                            if (resultsListObtained.get(i).get(nextKey).toString().equals(resultsListExpected.get(e).get(nextKey).toString())) {\n+                            if (resultsListObtained.get(i).get(nextKey).toString()\n+                                .equals(resultsListExpected.get(e).get(nextKey).toString())) {\n                                 iterations++;\n                             }\n \n@@ -1636,8 +1715,10 @@ public class CommonG {\n \n                     iterations = 0;\n                 }\n-                assertThat(occurrencesExpected).overridingErrorMessage(\"In row \" + e + \" have been found \"\n-                        + occurrencesObtained + \" results and \" + occurrencesExpected + \" were expected\").isEqualTo(occurrencesObtained);\n+                assertThat(occurrencesExpected)\n+                    .overridingErrorMessage(\"In row \" + e + \" have been found \"\n+                        + occurrencesObtained + \" results and \" + occurrencesExpected +\n+                        \" were expected\").isEqualTo(occurrencesObtained);\n \n             }\n         } else {\n@@ -1671,7 +1752,8 @@ public class CommonG {\n                 resultsCucumber = new HashMap<String, Object>();\n \n                 for (int i = 0; i < expectedResults.cells().get(0).size(); i++) {\n-                    resultsCucumber.put(expectedResults.cells().get(0).get(i), expectedResults.cells().get(e).get(i));\n+                    resultsCucumber.put(expectedResults.cells().get(0).get(i),\n+                        expectedResults.cells().get(e).get(i));\n \n                 }\n                 resultsListExpected.add(resultsCucumber);\n@@ -1686,7 +1768,8 @@ public class CommonG {\n             for (int e = 0; e < resultsListExpected.size(); e++) {\n                 iterations = 0;\n                 occurrencesObtained = 0;\n-                occurrencesExpected = Integer.parseInt(resultsListExpected.get(e).get(\"occurrences\").toString());\n+                occurrencesExpected =\n+                    Integer.parseInt(resultsListExpected.get(e).get(\"occurrences\").toString());\n \n                 String resultsListObtained = \"[\";\n                 DBCursor cursor = getMongoResults();\n@@ -1704,7 +1787,8 @@ public class CommonG {\n                     while (it.hasNext()) {\n                         nextKey = it.next();\n                         if (!nextKey.equals(\"occurrences\")) {\n-                            if (row.get(nextKey).toString().equals(resultsListExpected.get(e).get(nextKey).toString())) {\n+                            if (row.get(nextKey).toString()\n+                                .equals(resultsListExpected.get(e).get(nextKey).toString())) {\n                                 iterations++;\n                             }\n                         }\n@@ -1723,8 +1807,10 @@ public class CommonG {\n                 resultsListObtained = resultsListObtained + \"]\";\n                 getLogger().debug(\"Results: \" + resultsListObtained);\n \n-                assertThat(occurrencesExpected).overridingErrorMessage(\"In row \" + e + \" have been found \"\n-                        + occurrencesObtained + \" results and \" + occurrencesExpected + \" were expected\").isEqualTo(occurrencesObtained);\n+                assertThat(occurrencesExpected)\n+                    .overridingErrorMessage(\"In row \" + e + \" have been found \"\n+                        + occurrencesObtained + \" results and \" + occurrencesExpected +\n+                        \" were expected\").isEqualTo(occurrencesObtained);\n             }\n \n         } else {\n@@ -1752,19 +1838,23 @@ public class CommonG {\n             List<List<String>> expectedResultList = expectedResults.cells();\n             //Check size\n             assertThat(expectedResultList.size() - 1).overridingErrorMessage(\n-                    \"Expected number of columns to be\" + (expectedResultList.size() - 1)\n-                            + \"but was \" + previousElasticsearchResults.size())\n-                    .isEqualTo(previousElasticsearchResults.size());\n+                \"Expected number of columns to be\" + (expectedResultList.size() - 1)\n+                    + \"but was \" + previousElasticsearchResults.size())\n+                .isEqualTo(previousElasticsearchResults.size());\n             List<String> columnNames = expectedResultList.get(0);\n             for (int i = 0; i < previousElasticsearchResults.size(); i++) {\n                 for (int j = 0; j < columnNames.size(); j++) {\n-                    assertThat(expectedResultList.get(i + 1).get(j)).overridingErrorMessage(\"In row \" + i + \"and \"\n+                    assertThat(expectedResultList.get(i + 1).get(j))\n+                        .overridingErrorMessage(\"In row \" + i + \"and \"\n                             + \"column \" + j\n                             + \"have \"\n                             + \"been \"\n                             + \"found \"\n-                            + expectedResultList.get(i + 1).get(j) + \" results and \" + previousElasticsearchResults.get(i).get(columnNames.get(j)).toString() + \" were \"\n-                            + \"expected\").isEqualTo(previousElasticsearchResults.get(i).get(columnNames.get(j)).toString());\n+                            + expectedResultList.get(i + 1).get(j) + \" results and \" +\n+                            previousElasticsearchResults.get(i).get(columnNames.get(j)).toString() +\n+                            \" were \"\n+                            + \"expected\").isEqualTo(\n+                        previousElasticsearchResults.get(i).get(columnNames.get(j)).toString());\n                 }\n             }\n         } else {\n@@ -1783,7 +1873,7 @@ public class CommonG {\n         String line;\n         Process p;\n         try {\n-            p = Runtime.getRuntime().exec(new String[]{\"/bin/sh\", \"-c\", command});\n+            p = Runtime.getRuntime().exec(new String[] {\"/bin/sh\", \"-c\", command});\n             p.waitFor();\n         } catch (java.io.IOException e) {\n             this.commandExitStatus = 1;\n@@ -1928,7 +2018,8 @@ public class CommonG {\n \n     public String removeJSONPathElement(String jsonString, String expr) {\n \n-        Configuration conf = Configuration.builder().jsonProvider(new GsonJsonProvider()).mappingProvider(new GsonMappingProvider()).build();\n+        Configuration conf = Configuration.builder().jsonProvider(new GsonJsonProvider())\n+            .mappingProvider(new GsonMappingProvider()).build();\n         DocumentContext context = JsonPath.using(conf).parse(jsonString);\n         context.delete(expr);\n         return context.jsonString();\n@@ -1955,27 +2046,33 @@ public class CommonG {\n      * @param condition condition to compare\n      * @param result    expected result\n      */\n-    public void evaluateJSONElementOperation(Object o, String condition, String result) throws Exception {\n+    public void evaluateJSONElementOperation(Object o, String condition, String result)\n+        throws Exception {\n \n         if (o instanceof String) {\n             String value = (String) o;\n             switch (condition) {\n                 case \"equal\":\n-                    assertThat(value).as(\"Evaluate JSONPath does not match with proposed value\").isEqualTo(result);\n+                    assertThat(value).as(\"Evaluate JSONPath does not match with proposed value\")\n+                        .isEqualTo(result);\n                     break;\n                 case \"not equal\":\n-                    assertThat(value).as(\"Evaluate JSONPath match with proposed value\").isNotEqualTo(result);\n+                    assertThat(value).as(\"Evaluate JSONPath match with proposed value\")\n+                        .isNotEqualTo(result);\n                     break;\n                 case \"contains\":\n-                    assertThat(value).as(\"Evaluate JSONPath does not contain proposed value\").contains(result);\n+                    assertThat(value).as(\"Evaluate JSONPath does not contain proposed value\")\n+                        .contains(result);\n                     break;\n                 case \"does not contain\":\n-                    assertThat(value).as(\"Evaluate JSONPath contain proposed value\").doesNotContain(result);\n+                    assertThat(value).as(\"Evaluate JSONPath contain proposed value\")\n+                        .doesNotContain(result);\n                     break;\n                 case \"size\":\n                     JsonValue jsonObject = JsonValue.readHjson(value);\n                     if (jsonObject.isArray()) {\n-                        assertThat(jsonObject.asArray()).as(\"Keys size does not match\").hasSize(Integer.parseInt(result));\n+                        assertThat(jsonObject.asArray()).as(\"Keys size does not match\")\n+                            .hasSize(Integer.parseInt(result));\n                     } else {\n                         Assertions.fail(\"Expected array for size operation check\");\n                     }\n@@ -1991,7 +2088,8 @@ public class CommonG {\n                     assertThat(keys).as(\"Keys does not contain that name\").contains(result);\n                     break;\n                 case \"size\":\n-                    assertThat(keys).as(\"Keys size does not match\").hasSize(Integer.parseInt(result));\n+                    assertThat(keys).as(\"Keys size does not match\")\n+                        .hasSize(Integer.parseInt(result));\n                     break;\n                 default:\n                     Assertions.fail(\"Operation not implemented for JSON keys\");\n@@ -2011,7 +2109,9 @@ public class CommonG {\n \n     public String updateMarathonJson(String json) {\n         if (json.contains(\"uris\")) {\n-            return removeJSONPathElement(removeJSONPathElement(removeJSONPathElement(json, \"$.versionInfo\"), \"$.version\"), \"$.uris.*\");\n+            return removeJSONPathElement(\n+                removeJSONPathElement(removeJSONPathElement(json, \"$.versionInfo\"), \"$.version\"),\n+                \"$.uris.*\");\n         } else {\n             return removeJSONPathElement(removeJSONPathElement(json, \"$.versionInfo\"), \"$.version\");\n         }\n@@ -2036,7 +2136,8 @@ public class CommonG {\n             }\n         }\n         if (this.getCommandExitStatus() != exitStatus) {\n-            if (System.getProperty(\"logLevel\", \"\") != null && System.getProperty(\"logLevel\", \"\").equalsIgnoreCase(\"debug\")) {\n+            if (System.getProperty(\"logLevel\", \"\") != null &&\n+                System.getProperty(\"logLevel\", \"\").equalsIgnoreCase(\"debug\")) {\n                 if (!(\"\".equals(this.getCommandResult()))) {\n                     this.getLogger().debug(\"Command complete stdout:\\n{}\", this.getCommandResult());\n                 }\n@@ -2083,7 +2184,8 @@ public class CommonG {\n      * <p>\n      * File will be placed on path /target/test-classes\n      */\n-    public String asYaml(String jsonStringFile) throws JsonProcessingException, IOException, FileNotFoundException {\n+    public String asYaml(String jsonStringFile)\n+        throws JsonProcessingException, IOException, FileNotFoundException {\n \n         InputStream stream = getClass().getClassLoader().getResourceAsStream(jsonStringFile);\n \n@@ -2113,7 +2215,8 @@ public class CommonG {\n         }\n         String text = writer.toString();\n \n-        String std = text.replace(\"\\r\", \"\").replace(\"\\n\", \"\"); // make sure we have unix style text regardless of the input\n+        String std = text.replace(\"\\r\", \"\")\n+            .replace(\"\\n\", \"\"); // make sure we have unix style text regardless of the input\n \n         // parse JSON\n         JsonNode jsonNodeTree = new ObjectMapper().readTree(std);\n@@ -2135,7 +2238,9 @@ public class CommonG {\n      * @param key:     server private key\n      * @throws Exception exception     *\n      */\n-    public void connectToPostgreSQLDatabase(String database, String host, String port, String user, String password, Boolean secure, String ca, String crt, String key) throws SQLException {\n+    public void connectToPostgreSQLDatabase(String database, String host, String port, String user,\n+                                            String password, Boolean secure, String ca, String crt,\n+                                            String key) throws SQLException {\n \n         if (port.startsWith(\"[\")) {\n             port = port.substring(1, port.length() - 1);\n@@ -2145,7 +2250,9 @@ public class CommonG {\n                 password = \"stratio\";\n             }\n             try {\n-                myConnection = DriverManager.getConnection(\"jdbc:postgresql://\" + host + \":\" + port + \"/\" + database, user, password);\n+                myConnection = DriverManager\n+                    .getConnection(\"jdbc:postgresql://\" + host + \":\" + port + \"/\" + database, user,\n+                        password);\n             } catch (SQLException se) {\n                 // log the exception\n                 this.getLogger().error(se.getMessage());\n@@ -2173,7 +2280,9 @@ public class CommonG {\n \n \n             try {\n-                myConnection = DriverManager.getConnection(\"jdbc:postgresql://\" + host + \":\" + port + \"/\" + database, props);\n+                myConnection = DriverManager\n+                    .getConnection(\"jdbc:postgresql://\" + host + \":\" + port + \"/\" + database,\n+                        props);\n             } catch (SQLException se) {\n                 // log the exception\n                 this.getLogger().error(se.getMessage());\n@@ -2196,7 +2305,7 @@ public class CommonG {\n     /**\n      * Generate deployment json from schema\n      *\n-     * @param schema        schema obtained from deploy-api\n+     * @param schema schema obtained from deploy-api\n      * @return JSONObject   deployment json\n      */\n     public JSONObject parseJSONSchema(JSONObject schema) throws Exception {\n@@ -2224,7 +2333,7 @@ public class CommonG {\n                 if (element.has(\"default\")) {\n                     // Add element with the default value assigned\n                     json.put(key, element.get(\"default\"));\n-                // If it doesn't have default value, we assign a default value depending on the type\n+                    // If it doesn't have default value, we assign a default value depending on the type\n                 } else {\n                     switch (element.getString(\"type\")) {\n                         case \"string\":\n@@ -2233,14 +2342,15 @@ public class CommonG {\n                         case \"boolean\":\n                             json.put(key, false);\n                             break;\n-                        case \"number\": case \"integer\":\n+                        case \"number\":\n+                        case \"integer\":\n                             json.put(key, 0);\n                             break;\n                         default:\n                             Assertions.fail(\"type not expected\");\n                     }\n                 }\n-            // If it CONTAINS properties\n+                // If it CONTAINS properties\n             } else {\n                 // Recursive call, keep evaluating json\n                 json.put(key, parseJSONSchema(element));\n@@ -2254,25 +2364,25 @@ public class CommonG {\n      * Check json matches schema\n      *\n      * @param schema schema obtained from deploy-api\n-     * @param json json to be checked\n+     * @param json   json to be checked\n      * @return boolean whether the json matches the schema or not\n      */\n     public boolean matchJsonToSchema(JSONObject schema, JSONObject json) throws Exception {\n         SchemaLoader.builder()\n-                 .useDefaults(true)\n-                 .schemaJson(schema)\n-                 .build()\n-                 .load()\n-                 .build()\n-                 .validate(json);\n+            .useDefaults(true)\n+            .schemaJson(schema)\n+            .build()\n+            .load()\n+            .build()\n+            .validate(json);\n         return true;\n     }\n \n     /**\n      * Get service status\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n      * @return String   normalized service status\n      * @throws Exception exception     *\n      */\n@@ -2288,7 +2398,8 @@ public class CommonG {\n \n         response = this.generateRequest(\"GET\", true, null, null, endPoint, null, \"json\");\n         this.setResponse(\"GET\", (Response) response.get());\n-        assertThat(this.getResponse().getStatusCode()).as(\"It hasn't been possible to obtain status for service: \" + service).isEqualTo(200);\n+        assertThat(this.getResponse().getStatusCode())\n+            .as(\"It hasn't been possible to obtain status for service: \" + service).isEqualTo(200);\n \n         String json = this.getResponse().getResponse();\n \n@@ -2317,8 +2428,8 @@ public class CommonG {\n     /**\n      * Get service health status\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n      * @return String   normalized service health status\n      * @throws Exception exception     *\n      */\n@@ -2334,7 +2445,9 @@ public class CommonG {\n \n         response = this.generateRequest(\"GET\", true, null, null, endPoint, null, \"json\");\n         this.setResponse(\"GET\", (Response) response.get());\n-        assertThat(this.getResponse().getStatusCode()).as(\"It hasn't been possible to obtain health status for service: \" + service).isEqualTo(200);\n+        assertThat(this.getResponse().getStatusCode())\n+            .as(\"It hasn't been possible to obtain health status for service: \" + service)\n+            .isEqualTo(200);\n \n         String json = this.getResponse().getResponse();\n \n",
            "diff_size": 235
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/150/CommonG.java\nindex 4634730db16..5e5edde477e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/150/CommonG.java\n@@ -1571,6 +1571,7 @@ public class CommonG {\n      *                        IMPORTANT: All columns must exist\n      * @throws Exception exception\n      */\n+\n     public void resultsMustBeCassandra(DataTable expectedResults) throws Exception {\n         if (getCassandraResults() != null) {\n             //Map for query results\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/150/CommonG.java\nindex 4634730db16..5e5edde477e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/150/CommonG.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/150/CommonG.java\n@@ -1571,6 +1571,7 @@ public class CommonG {\n      *                        IMPORTANT: All columns must exist\n      * @throws Exception exception\n      */\n+\n     public void resultsMustBeCassandra(DataTable expectedResults) throws Exception {\n         if (getCassandraResults() != null) {\n             //Map for query results\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}