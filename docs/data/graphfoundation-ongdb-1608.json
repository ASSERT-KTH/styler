{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1608",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1608/UpstreamDatabaseSelectionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1608/UpstreamDatabaseSelectionStrategy.java\nindex 5c55a3a8636..82b30ddfd42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1608/UpstreamDatabaseSelectionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1608/UpstreamDatabaseSelectionStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.upstream;\n \n import java.util.Optional;\n@@ -33,46 +34,46 @@ import org.neo4j.logging.LogProvider;\n \n public abstract class UpstreamDatabaseSelectionStrategy extends Service\n {\n-    protected TopologyService topologyService;\n-    protected Config config;\n-    protected Log log;\n-    protected MemberId myself;\n-    protected String readableName;\n-    protected String dbName;\n+  protected TopologyService topologyService;\n+  protected Config config;\n+  protected Log log;\n+  protected MemberId myself;\n+  protected String readableName;\n+  protected String dbName;\n \n-    public UpstreamDatabaseSelectionStrategy( String key, String... altKeys )\n-    {\n-        super( key, altKeys );\n-    }\n+  public UpstreamDatabaseSelectionStrategy(String key, String... altKeys)\n+  {\n+    super(key, altKeys);\n+  }\n \n-    // Service loader can't inject via the constructor\n-    public void inject( TopologyService topologyService, Config config, LogProvider logProvider, MemberId myself )\n-    {\n-        this.topologyService = topologyService;\n-        this.config = config;\n-        this.log = logProvider.getLog( this.getClass() );\n-        this.myself = myself;\n-        this.dbName = config.get( CausalClusteringSettings.database );\n+  // Service loader can't inject via the constructor\n+  public void inject(TopologyService topologyService, Config config, LogProvider logProvider, MemberId myself)\n+  {\n+    this.topologyService = topologyService;\n+    this.config = config;\n+    this.log = logProvider.getLog(this.getClass());\n+    this.myself = myself;\n+    this.dbName = config.get(CausalClusteringSettings.database);\n \n-        readableName = StreamSupport.stream( getKeys().spliterator(), false ).collect( Collectors.joining( \", \" ) );\n-        log.info( \"Using upstream selection strategy \" + readableName );\n-        init();\n-    }\n+    readableName = StreamSupport.stream(getKeys().spliterator(), false).collect(Collectors.joining(\", \"));\n+    log.info(\"Using upstream selection strategy \" + readableName);\n+    init();\n+  }\n \n-    public void init()\n-    {\n-    }\n+  public void init()\n+  {\n+  }\n \n-    public abstract Optional<MemberId> upstreamDatabase() throws UpstreamDatabaseSelectionException;\n+  public abstract Optional<MemberId> upstreamDatabase() throws UpstreamDatabaseSelectionException;\n \n-    @Override\n-    public String toString()\n-    {\n-        return nicelyCommaSeparatedList( getKeys() );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return nicelyCommaSeparatedList(getKeys());\n+  }\n \n-    private static String nicelyCommaSeparatedList( Iterable<String> keys )\n-    {\n-        return StreamSupport.stream( keys.spliterator(), false ).collect( Collectors.joining( \", \" ) );\n-    }\n+  private static String nicelyCommaSeparatedList(Iterable<String> keys)\n+  {\n+    return StreamSupport.stream(keys.spliterator(), false).collect(Collectors.joining(\", \"));\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1608/UpstreamDatabaseSelectionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1608/UpstreamDatabaseSelectionStrategy.java\nindex 5c55a3a8636..b0c97518a6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1608/UpstreamDatabaseSelectionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1608/UpstreamDatabaseSelectionStrategy.java\n@@ -53,8 +53,7 @@ public abstract class UpstreamDatabaseSelectionStrategy extends Service\n         this.log = logProvider.getLog( this.getClass() );\n         this.myself = myself;\n         this.dbName = config.get( CausalClusteringSettings.database );\n-\n-        readableName = StreamSupport.stream( getKeys().spliterator(), false ).collect( Collectors.joining( \", \" ) );\n+readableName = StreamSupport.stream( getKeys().spliterator(), false ).collect( Collectors.joining( \", \" ) );\n         log.info( \"Using upstream selection strategy \" + readableName );\n         init();\n     }\n@@ -75,4 +74,4 @@ public abstract class UpstreamDatabaseSelectionStrategy extends Service\n     {\n         return StreamSupport.stream( keys.spliterator(), false ).collect( Collectors.joining( \", \" ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}