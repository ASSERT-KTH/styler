{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2368",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2368/SwapperSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2368/SwapperSet.java\nindex 2659c43b0f8..946b8d8a652 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2368/SwapperSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2368/SwapperSet.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl.muninn;\n \n import java.util.Arrays;\n@@ -40,169 +41,169 @@ import static org.neo4j.helpers.Numbers.safeCastIntToShort;\n  */\n final class SwapperSet\n {\n-    // The sentinel is used to reserve swapper id 0 as a special value.\n-    private static final SwapperMapping SENTINEL = new SwapperMapping( 0, null );\n-    // The tombstone is used as a marker to reserve allocation entries that have been freed, but not yet vacuumed.\n-    // An allocation cannot be reused until it has been vacuumed.\n-    private static final SwapperMapping TOMBSTONE = new SwapperMapping( 0, null );\n-    private static final int MAX_SWAPPER_ID = (1 << 21) - 1;\n-    private volatile SwapperMapping[] swapperMappings = new SwapperMapping[] { SENTINEL };\n-    private final PrimitiveIntSet free = Primitive.intSet();\n-    private final Object vacuumLock = new Object();\n-    private int freeCounter; // Used in `free`; Guarded by `this`\n-\n-    /**\n-     * The mapping entry between a {@link PageSwapper} and its swapper id.\n-     */\n-    static final class SwapperMapping\n+  // The sentinel is used to reserve swapper id 0 as a special value.\n+  private static final SwapperMapping SENTINEL = new SwapperMapping(0, null);\n+  // The tombstone is used as a marker to reserve allocation entries that have been freed, but not yet vacuumed.\n+  // An allocation cannot be reused until it has been vacuumed.\n+  private static final SwapperMapping TOMBSTONE = new SwapperMapping(0, null);\n+  private static final int MAX_SWAPPER_ID = (1 << 21) - 1;\n+  private volatile SwapperMapping[] swapperMappings = new SwapperMapping[] {SENTINEL};\n+  private final PrimitiveIntSet free = Primitive.intSet();\n+  private final Object vacuumLock = new Object();\n+  private int freeCounter; // Used in `free`; Guarded by `this`\n+\n+  /**\n+   * The mapping entry between a {@link PageSwapper} and its swapper id.\n+   */\n+  static final class SwapperMapping\n+  {\n+    public final int id;\n+    public final PageSwapper swapper;\n+\n+    private SwapperMapping(int id, PageSwapper swapper)\n     {\n-        public final int id;\n-        public final PageSwapper swapper;\n-\n-        private SwapperMapping( int id, PageSwapper swapper )\n-        {\n-            this.id = id;\n-            this.swapper = swapper;\n-        }\n+      this.id = id;\n+      this.swapper = swapper;\n     }\n-\n-    /**\n-     * Get the {@link SwapperMapping} for the given swapper id.\n-     */\n-    SwapperMapping getAllocation( int id )\n+  }\n+\n+  /**\n+   * Get the {@link SwapperMapping} for the given swapper id.\n+   */\n+  SwapperMapping getAllocation(int id)\n+  {\n+    checkId(id);\n+    SwapperMapping swapperMapping = swapperMappings[id];\n+    if (swapperMapping == null || swapperMapping == TOMBSTONE)\n     {\n-        checkId( id );\n-        SwapperMapping swapperMapping = swapperMappings[id];\n-        if ( swapperMapping == null || swapperMapping == TOMBSTONE )\n-        {\n-            return null;\n-        }\n-        return swapperMapping;\n+      return null;\n     }\n+    return swapperMapping;\n+  }\n \n-    private void checkId( int id )\n+  private void checkId(int id)\n+  {\n+    if (id == 0)\n     {\n-        if ( id == 0 )\n-        {\n-            throw new IllegalArgumentException( \"0 is an invalid swapper id\" );\n-        }\n+      throw new IllegalArgumentException(\"0 is an invalid swapper id\");\n     }\n+  }\n \n-    /**\n-     * Allocate a new swapper id for the given {@link PageSwapper}.\n-     */\n-    synchronized int allocate( PageSwapper swapper )\n-    {\n-        SwapperMapping[] swapperMappings = this.swapperMappings;\n-\n-        // First look for an available freed slot.\n-        synchronized ( free )\n-        {\n-            if ( !free.isEmpty() )\n-            {\n-                int id = free.iterator().next();\n-                free.remove( id );\n-                swapperMappings[id] = new SwapperMapping( id, swapper );\n-                this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n-                return id;\n-            }\n-        }\n+  /**\n+   * Allocate a new swapper id for the given {@link PageSwapper}.\n+   */\n+  synchronized int allocate(PageSwapper swapper)\n+  {\n+    SwapperMapping[] swapperMappings = this.swapperMappings;\n \n-        // No free slot was found above, so we extend the array to make room for a new slot.\n-        int id = swapperMappings.length;\n-        if ( id + 1 > MAX_SWAPPER_ID )\n-        {\n-            throw new IllegalStateException( \"All swapper ids are allocated: \" + MAX_SWAPPER_ID );\n-        }\n-        swapperMappings = Arrays.copyOf( swapperMappings, id + 1 );\n-        swapperMappings[id] = new SwapperMapping( id, swapper );\n+    // First look for an available freed slot.\n+    synchronized (free)\n+    {\n+      if (!free.isEmpty())\n+      {\n+        int id = free.iterator().next();\n+        free.remove(id);\n+        swapperMappings[id] = new SwapperMapping(id, swapper);\n         this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n         return id;\n+      }\n     }\n \n-    /**\n-     * Free the given swapper id, and return {@code true} if it is time for a\n-     * {@link MuninnPageCache#vacuum(SwapperSet)}, otherwise it returns {@code false}.\n-     */\n-    synchronized boolean free( int id )\n+    // No free slot was found above, so we extend the array to make room for a new slot.\n+    int id = swapperMappings.length;\n+    if (id + 1 > MAX_SWAPPER_ID)\n     {\n-        checkId( id );\n-        SwapperMapping[] swapperMappings = this.swapperMappings;\n-        SwapperMapping current = swapperMappings[id];\n-        if ( current == null || current == TOMBSTONE )\n-        {\n-            throw new IllegalStateException(\n-                    \"PageSwapper allocation id \" + id + \" is currently not allocated. Likely a double free bug.\" );\n-        }\n-        swapperMappings[id] = TOMBSTONE;\n-        this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n-        freeCounter++;\n-        if ( freeCounter == 20 )\n-        {\n-            freeCounter = 0;\n-            return true;\n-        }\n-        return false;\n+      throw new IllegalStateException(\"All swapper ids are allocated: \" + MAX_SWAPPER_ID);\n     }\n-\n-    /**\n-     * Collect all freed page swapper ids, and pass them to the given callback, after which the freed ids will be\n-     * eligible for reuse.\n-     * This is done with careful synchronisation such that allocating and freeing of ids is allowed to mostly proceed\n-     * concurrently.\n-     */\n-    void vacuum( Consumer<IntPredicate> evictAllLoadedPagesCallback )\n+    swapperMappings = Arrays.copyOf(swapperMappings, id + 1);\n+    swapperMappings[id] = new SwapperMapping(id, swapper);\n+    this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n+    return id;\n+  }\n+\n+  /**\n+   * Free the given swapper id, and return {@code true} if it is time for a\n+   * {@link MuninnPageCache#vacuum(SwapperSet)}, otherwise it returns {@code false}.\n+   */\n+  synchronized boolean free(int id)\n+  {\n+    checkId(id);\n+    SwapperMapping[] swapperMappings = this.swapperMappings;\n+    SwapperMapping current = swapperMappings[id];\n+    if (current == null || current == TOMBSTONE)\n     {\n-        // We do this complicated locking to avoid blocking allocate() and free() as much as possible, while still only\n-        // allow a single thread to do vacuum at a time, and at the same time have consistent locking around the\n-        // set of free ids.\n-        synchronized ( vacuumLock )\n-        {\n-            // Collect currently free ids.\n-            PrimitiveIntSet freeIds = Primitive.intSet();\n-            SwapperMapping[] swapperMappings = this.swapperMappings;\n-            for ( int id = 0; id < swapperMappings.length; id++ )\n-            {\n-                SwapperMapping swapperMapping = swapperMappings[id];\n-                if ( swapperMapping == TOMBSTONE )\n-                {\n-                    freeIds.add( id );\n-                }\n-            }\n-\n-            // Evict all of them without holding up the lock on the free id set. This allows allocate() and free() to\n-            // proceed concurrently with our eviction. This is safe because we know that the ids we are evicting cannot\n-            // possibly be reused until we remove them from the free id set, which we won't do until after we've evicted\n-            // all of their loaded pages.\n-            evictAllLoadedPagesCallback.accept( freeIds );\n-\n-            // Finally, all of the pages that remained in memory with an unmapped swapper id have been evicted. We can\n-            // now safely allow those ids to be reused. Note, however, that free() might have been called while we were\n-            // doing this, so we can't just free.clear() the set; no, we have to explicitly remove only those specific\n-            // ids whose pages we evicted.\n-            synchronized ( this )\n-            {\n-                PrimitiveIntIterator itr = freeIds.iterator();\n-                while ( itr.hasNext() )\n-                {\n-                    int freeId = itr.next();\n-                    swapperMappings[freeId] = null;\n-                }\n-                this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n-            }\n-            synchronized ( free )\n-            {\n-                free.addAll( freeIds.iterator() );\n-            }\n-        }\n+      throw new IllegalStateException(\n+          \"PageSwapper allocation id \" + id + \" is currently not allocated. Likely a double free bug.\");\n     }\n-\n-    synchronized int countAvailableIds()\n+    swapperMappings[id] = TOMBSTONE;\n+    this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n+    freeCounter++;\n+    if (freeCounter == 20)\n     {\n-        // the max id is one less than the allowed count, but we subtract one for the reserved id 0\n-        int available = MAX_SWAPPER_ID;\n-        available -= swapperMappings.length; // ids that are allocated are not available\n-        available += free.size(); // add back the ids that are free to be reused\n-        return available;\n+      freeCounter = 0;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Collect all freed page swapper ids, and pass them to the given callback, after which the freed ids will be\n+   * eligible for reuse.\n+   * This is done with careful synchronisation such that allocating and freeing of ids is allowed to mostly proceed\n+   * concurrently.\n+   */\n+  void vacuum(Consumer<IntPredicate> evictAllLoadedPagesCallback)\n+  {\n+    // We do this complicated locking to avoid blocking allocate() and free() as much as possible, while still only\n+    // allow a single thread to do vacuum at a time, and at the same time have consistent locking around the\n+    // set of free ids.\n+    synchronized (vacuumLock)\n+    {\n+      // Collect currently free ids.\n+      PrimitiveIntSet freeIds = Primitive.intSet();\n+      SwapperMapping[] swapperMappings = this.swapperMappings;\n+      for (int id = 0; id < swapperMappings.length; id++)\n+      {\n+        SwapperMapping swapperMapping = swapperMappings[id];\n+        if (swapperMapping == TOMBSTONE)\n+        {\n+          freeIds.add(id);\n+        }\n+      }\n+\n+      // Evict all of them without holding up the lock on the free id set. This allows allocate() and free() to\n+      // proceed concurrently with our eviction. This is safe because we know that the ids we are evicting cannot\n+      // possibly be reused until we remove them from the free id set, which we won't do until after we've evicted\n+      // all of their loaded pages.\n+      evictAllLoadedPagesCallback.accept(freeIds);\n+\n+      // Finally, all of the pages that remained in memory with an unmapped swapper id have been evicted. We can\n+      // now safely allow those ids to be reused. Note, however, that free() might have been called while we were\n+      // doing this, so we can't just free.clear() the set; no, we have to explicitly remove only those specific\n+      // ids whose pages we evicted.\n+      synchronized (this)\n+      {\n+        PrimitiveIntIterator itr = freeIds.iterator();\n+        while (itr.hasNext())\n+        {\n+          int freeId = itr.next();\n+          swapperMappings[freeId] = null;\n+        }\n+        this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n+      }\n+      synchronized (free)\n+      {\n+        free.addAll(freeIds.iterator());\n+      }\n     }\n+  }\n+\n+  synchronized int countAvailableIds()\n+  {\n+    // the max id is one less than the allowed count, but we subtract one for the reserved id 0\n+    int available = MAX_SWAPPER_ID;\n+    available -= swapperMappings.length; // ids that are allocated are not available\n+    available += free.size(); // add back the ids that are free to be reused\n+    return available;\n+  }\n }\n",
            "diff_size": 233
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2368/SwapperSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2368/SwapperSet.java\nindex 2659c43b0f8..58a4da6421d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2368/SwapperSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2368/SwapperSet.java\n@@ -45,7 +45,7 @@ final class SwapperSet\n     // The tombstone is used as a marker to reserve allocation entries that have been freed, but not yet vacuumed.\n     // An allocation cannot be reused until it has been vacuumed.\n     private static final SwapperMapping TOMBSTONE = new SwapperMapping( 0, null );\n-    private static final int MAX_SWAPPER_ID = (1 << 21) - 1;\n+    private static final int MAX_SWAPPER_ID = ( 1 << 21) - 1;\n     private volatile SwapperMapping[] swapperMappings = new SwapperMapping[] { SENTINEL };\n     private final PrimitiveIntSet free = Primitive.intSet();\n     private final Object vacuumLock = new Object();\n@@ -57,7 +57,8 @@ final class SwapperSet\n     static final class SwapperMapping\n     {\n         public final int id;\n-        public final PageSwapper swapper;\n+\n+public final PageSwapper swapper;\n \n         private SwapperMapping( int id, PageSwapper swapper )\n         {\n@@ -77,7 +78,8 @@ final class SwapperSet\n         {\n             return null;\n         }\n-        return swapperMapping;\n+\n+return swapperMapping;\n     }\n \n     private void checkId( int id )\n@@ -114,7 +116,8 @@ final class SwapperSet\n         {\n             throw new IllegalStateException( \"All swapper ids are allocated: \" + MAX_SWAPPER_ID );\n         }\n-        swapperMappings = Arrays.copyOf( swapperMappings, id + 1 );\n+\n+swapperMappings = Arrays.copyOf( swapperMappings, id + 1 );\n         swapperMappings[id] = new SwapperMapping( id, swapper );\n         this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n         return id;\n@@ -131,10 +134,10 @@ final class SwapperSet\n         SwapperMapping current = swapperMappings[id];\n         if ( current == null || current == TOMBSTONE )\n         {\n-            throw new IllegalStateException(\n-                    \"PageSwapper allocation id \" + id + \" is currently not allocated. Likely a double free bug.\" );\n+            throw new IllegalStateException( \"PageSwapper allocation id \" + id + \" is currently not allocated. Likely a double free bug.\" );\n         }\n-        swapperMappings[id] = TOMBSTONE;\n+\n+swapperMappings[id] = TOMBSTONE;\n         this.swapperMappings = swapperMappings; // Volatile store synchronizes-with loads in getters.\n         freeCounter++;\n         if ( freeCounter == 20 )\n@@ -205,4 +208,4 @@ final class SwapperSet\n         available += free.size(); // add back the ids that are free to be reused\n         return available;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}