{
    "project_name": "apache-iotdb",
    "error_id": "52",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.qp.strategy.optimizer;\n\nimport org.apache.iotdb.db.exception.metadata.MetadataException;\nimport org.apache.iotdb.db.exception.query.LogicalOptimizeException;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/52/ConcatPathOptimizer.java\nindex 69c6d94b5f6..aa10cc32e9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/52/ConcatPathOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.metadata.MetadataException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/52/ConcatPathOptimizer.java\nindex 69c6d94b5f6..4635b15cc43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/52/ConcatPathOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.metadata.MetadataException;\n@@ -43,7 +44,9 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n-/** concat paths in select and from clause. */\n+/**\n+ * concat paths in select and from clause.\n+ */\n public class ConcatPathOptimizer implements ILogicalOptimizer {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConcatPathOptimizer.class);\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/52/ConcatPathOptimizer.java\nindex 69c6d94b5f6..7224785e005 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/52/ConcatPathOptimizer.java\n@@ -34,28 +34,23 @@ import org.apache.iotdb.db.qp.logical.crud.SelectOperator;\n import org.apache.iotdb.db.qp.utils.WildcardsRemover;\n import org.apache.iotdb.db.query.expression.ResultColumn;\n import org.apache.iotdb.db.service.IoTDB;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n /** concat paths in select and from clause. */\n+\n public class ConcatPathOptimizer implements ILogicalOptimizer {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(ConcatPathOptimizer.class);\n-\n-  private static final String WARNING_NO_SUFFIX_PATHS =\n-      \"failed to concat series paths because the given query operator didn't have suffix paths\";\n-  private static final String WARNING_NO_PREFIX_PATHS =\n-      \"failed to concat series paths because the given query operator didn't have prefix paths\";\n+  private static final String WARNING_NO_SUFFIX_PATHS = \"failed to concat series paths because the given query operator didn't have suffix paths\";\n+  private static final String WARNING_NO_PREFIX_PATHS = \"failed to concat series paths because the given query operator didn't have prefix paths\";\n \n   @Override\n-  public Operator transform(Operator operator, int fetchSize)\n-      throws LogicalOptimizeException, PathNumOverLimitException {\n+  public Operator transform(Operator operator, int fetchSize) throws LogicalOptimizeException, PathNumOverLimitException {\n     QueryOperator queryOperator = (QueryOperator) operator;\n     if (!optimizable(queryOperator)) {\n       return queryOperator;\n@@ -70,19 +65,16 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n     if (queryOperator.isAlignByDevice()) {\n       return false;\n     }\n-\n     SelectOperator select = queryOperator.getSelectOperator();\n     if (select == null || select.getResultColumns().isEmpty()) {\n       LOGGER.warn(WARNING_NO_SUFFIX_PATHS);\n       return false;\n     }\n-\n     FromOperator from = queryOperator.getFromOperator();\n     if (from == null || from.getPrefixPaths().isEmpty()) {\n       LOGGER.warn(WARNING_NO_PREFIX_PATHS);\n       return false;\n     }\n-\n     return true;\n   }\n \n@@ -95,12 +87,10 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n     queryOperator.getSelectOperator().setResultColumns(resultColumns);\n   }\n \n-  private void removeWildcardsInSelectPaths(QueryOperator queryOperator, int fetchSize)\n-      throws LogicalOptimizeException, PathNumOverLimitException {\n+  private void removeWildcardsInSelectPaths(QueryOperator queryOperator, int fetchSize) throws LogicalOptimizeException, PathNumOverLimitException {\n     if (queryOperator.getIndexType() != null) {\n       return;\n     }\n-\n     WildcardsRemover wildcardsRemover = new WildcardsRemover(queryOperator, fetchSize);\n     List<ResultColumn> resultColumns = new ArrayList<>();\n     for (ResultColumn resultColumn : queryOperator.getSelectOperator().getResultColumns()) {\n@@ -113,23 +103,18 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n     queryOperator.getSelectOperator().setResultColumns(resultColumns);\n   }\n \n-  private void concatFilterAndRemoveWildcards(QueryOperator queryOperator)\n-      throws LogicalOptimizeException {\n+  private void concatFilterAndRemoveWildcards(QueryOperator queryOperator) throws LogicalOptimizeException {\n     FilterOperator filter = queryOperator.getFilterOperator();\n     if (filter == null) {\n       return;\n     }\n-\n     Set<PartialPath> filterPaths = new HashSet<>();\n-    queryOperator.setFilterOperator(\n-        concatFilterAndRemoveWildcards(\n-            queryOperator.getFromOperator().getPrefixPaths(), filter, filterPaths));\n+    queryOperator.setFilterOperator(concatFilterAndRemoveWildcards(queryOperator.getFromOperator().getPrefixPaths(), filter, filterPaths));\n     queryOperator.getFilterOperator().setPathSet(filterPaths);\n   }\n \n   private FilterOperator concatFilterAndRemoveWildcards(\n-      List<PartialPath> fromPaths, FilterOperator operator, Set<PartialPath> filterPaths)\n-      throws LogicalOptimizeException {\n+    List<PartialPath> fromPaths, FilterOperator operator, Set<PartialPath> filterPaths) throws LogicalOptimizeException {\n     if (!operator.isLeaf()) {\n       List<FilterOperator> newFilterList = new ArrayList<>();\n       for (FilterOperator child : operator.getChildren()) {\n@@ -141,8 +126,7 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n     FunctionOperator functionOperator = (FunctionOperator) operator;\n     PartialPath filterPath = functionOperator.getSinglePath();\n     // do nothing in the cases of \"where time > 5\" or \"where root.d1.s1 > 5\"\n-    if (SQLConstant.isReservedPath(filterPath)\n-        || filterPath.getFirstNode().startsWith(SQLConstant.ROOT)) {\n+    if (SQLConstant.isReservedPath(filterPath) || filterPath.getFirstNode().startsWith(SQLConstant.ROOT)) {\n       filterPaths.add(filterPath);\n       return operator;\n     }\n@@ -165,8 +149,7 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n     }\n   }\n \n-  private FilterOperator constructBinaryFilterTreeWithAnd(\n-      List<PartialPath> noStarPaths, FilterOperator operator) throws LogicalOptimizeException {\n+  private FilterOperator constructBinaryFilterTreeWithAnd(List<PartialPath> noStarPaths, FilterOperator operator) throws LogicalOptimizeException {\n     FilterOperator filterBinaryTree = new FilterOperator(SQLConstant.KW_AND);\n     FilterOperator currentNode = filterBinaryTree;\n     for (int i = 0; i < noStarPaths.size(); i++) {\n@@ -176,11 +159,10 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n         currentNode = newInnerNode;\n       }\n       try {\n-        currentNode.addChildOperator(\n-            new BasicFunctionOperator(\n-                operator.getTokenIntType(),\n-                noStarPaths.get(i),\n-                ((BasicFunctionOperator) operator).getValue()));\n+        currentNode.addChildOperator(new BasicFunctionOperator(\n+                                         operator.getTokenIntType(),\n+                                         noStarPaths.get(i),\n+                                         ((BasicFunctionOperator) operator).getValue()));\n       } catch (SQLParserException e) {\n         throw new LogicalOptimizeException(e.getMessage());\n       }\n@@ -188,16 +170,13 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n     return filterBinaryTree;\n   }\n \n-  private List<PartialPath> removeWildcardsInConcatPaths(List<PartialPath> originalPaths)\n-      throws LogicalOptimizeException {\n+  private List<PartialPath> removeWildcardsInConcatPaths(List<PartialPath> originalPaths) throws LogicalOptimizeException {\n     HashSet<PartialPath> actualPaths = new HashSet<>();\n     try {\n       for (PartialPath originalPath : originalPaths) {\n-        List<PartialPath> all =\n-            IoTDB.metaManager.getAllTimeseriesPathWithAlias(originalPath, 0, 0).left;\n+        List<PartialPath> all = IoTDB.metaManager.getAllTimeseriesPathWithAlias(originalPath, 0, 0).left;\n         if (all.isEmpty()) {\n-          throw new LogicalOptimizeException(\n-              String.format(\"Unknown time series %s in `where clause`\", originalPath));\n+          throw new LogicalOptimizeException(String.format(\"Unknown time series %s in `where clause`\", originalPath));\n         }\n         actualPaths.addAll(all);\n       }\n@@ -208,7 +187,7 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n   }\n \n   public static <T> void cartesianProduct(\n-      List<List<T>> dimensionValue, List<List<T>> resultList, int layer, List<T> currentList) {\n+    List<List<T>> dimensionValue, List<List<T>> resultList, int layer, List<T> currentList) {\n     if (layer < dimensionValue.size() - 1) {\n       if (dimensionValue.get(layer).isEmpty()) {\n         cartesianProduct(dimensionValue, resultList, layer + 1, currentList);\n@@ -231,4 +210,4 @@ public class ConcatPathOptimizer implements ILogicalOptimizer {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/52/ConcatPathOptimizer.java\nindex 69c6d94b5f6..aa10cc32e9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/52/ConcatPathOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.metadata.MetadataException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/52/ConcatPathOptimizer.java\nindex 69c6d94b5f6..aa10cc32e9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/52/ConcatPathOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/52/ConcatPathOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.metadata.MetadataException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}