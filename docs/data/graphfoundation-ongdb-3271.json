{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3271",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3271/TreeStatePair.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3271/TreeStatePair.java\nindex fc08b2984c2..217d5dabc83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3271/TreeStatePair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3271/TreeStatePair.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.apache.commons.lang3.tuple.Pair;\n@@ -35,118 +36,115 @@ import static org.neo4j.index.internal.gbptree.PageCursorUtil.checkOutOfBounds;\n class TreeStatePair\n {\n \n-    private TreeStatePair()\n-    {\n-    }\n-\n-    /**\n-     * Initialize state pages because new pages are expected to be allocated directly after\n-     * the existing highest allocated page. Otherwise there'd be a hole between meta and root pages\n-     * until they would have been written, which isn't guaranteed to be handled correctly by the page cache.\n-     *\n-     * @param cursor {@link PageCursor} assumed to be opened with write capabilities.\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    static void initializeStatePages( PageCursor cursor ) throws IOException\n+  private TreeStatePair()\n+  {\n+  }\n+\n+  /**\n+   * Initialize state pages because new pages are expected to be allocated directly after\n+   * the existing highest allocated page. Otherwise there'd be a hole between meta and root pages\n+   * until they would have been written, which isn't guaranteed to be handled correctly by the page cache.\n+   *\n+   * @param cursor {@link PageCursor} assumed to be opened with write capabilities.\n+   * @throws IOException on {@link PageCursor} error.\n+   */\n+  static void initializeStatePages(PageCursor cursor) throws IOException\n+  {\n+    PageCursorUtil.goTo(cursor, \"State page A\", IdSpace.STATE_PAGE_A);\n+    PageCursorUtil.goTo(cursor, \"State page B\", IdSpace.STATE_PAGE_B);\n+  }\n+\n+  /**\n+   * Reads the tree state pair, one from each of {@code pageIdA} and {@code pageIdB}, deciding their validity\n+   * and returning them as a {@link Pair}.\n+   * do-shouldRetry is managed inside this method because data is read from two pages.\n+   *\n+   * @param cursor  {@link PageCursor} to use when reading. This cursor will be moved to the two pages\n+   *                one after the other, to read their states.\n+   * @param pageIdA page id containing the first state.\n+   * @param pageIdB page id containing the second state.\n+   * @return {@link Pair} of both tree states.\n+   * @throws IOException on {@link PageCursor} reading error.\n+   */\n+  static Pair<TreeState, TreeState> readStatePages(PageCursor cursor, long pageIdA, long pageIdB) throws IOException\n+  {\n+    TreeState stateA = readStatePage(cursor, pageIdA);\n+    TreeState stateB = readStatePage(cursor, pageIdB);\n+    return Pair.of(stateA, stateB);\n+  }\n+\n+  private static TreeState readStatePage(PageCursor cursor, long pageIdA) throws IOException\n+  {\n+    PageCursorUtil.goTo(cursor, \"state page\", pageIdA);\n+    TreeState state;\n+    do\n     {\n-        PageCursorUtil.goTo( cursor, \"State page A\", IdSpace.STATE_PAGE_A );\n-        PageCursorUtil.goTo( cursor, \"State page B\", IdSpace.STATE_PAGE_B );\n+      state = TreeState.read(cursor);\n     }\n-\n-    /**\n-     * Reads the tree state pair, one from each of {@code pageIdA} and {@code pageIdB}, deciding their validity\n-     * and returning them as a {@link Pair}.\n-     * do-shouldRetry is managed inside this method because data is read from two pages.\n-     *\n-     * @param cursor {@link PageCursor} to use when reading. This cursor will be moved to the two pages\n-     * one after the other, to read their states.\n-     * @param pageIdA page id containing the first state.\n-     * @param pageIdB page id containing the second state.\n-     * @return {@link Pair} of both tree states.\n-     * @throws IOException on {@link PageCursor} reading error.\n-     */\n-    static Pair<TreeState,TreeState> readStatePages( PageCursor cursor, long pageIdA, long pageIdB ) throws IOException\n+    while (cursor.shouldRetry());\n+    checkOutOfBounds(cursor);\n+    return state;\n+  }\n+\n+  /**\n+   * @param states the two states to compare.\n+   * @return newest (w/ regards to {@link TreeState#stableGeneration()}) {@link TreeState#isValid() valid}\n+   * {@link TreeState} of the two.\n+   * @throws IllegalStateException if none were valid.\n+   */\n+  static TreeState selectNewestValidState(Pair<TreeState, TreeState> states)\n+  {\n+    return selectNewestValidStateOptionally(states).orElseThrow(() ->\n+        new TreeInconsistencyException(\"Unexpected combination of state.%n  STATE_A[%s]%n  STATE_B[%s]\",\n+            states.getLeft(), states.getRight()));\n+  }\n+\n+  /**\n+   * @param states the two states to compare.\n+   * @return oldest (w/ regards to {@link TreeState#stableGeneration()}) {@link TreeState#isValid() invalid}\n+   * {@link TreeState} of the two. If both are invalid then the {@link Pair#getLeft() first one} is returned.\n+   */\n+  static TreeState selectOldestOrInvalid(Pair<TreeState, TreeState> states)\n+  {\n+    TreeState newestValidState = selectNewestValidStateOptionally(states).orElse(states.getRight());\n+    return newestValidState == states.getLeft() ? states.getRight() : states.getLeft();\n+  }\n+\n+  private static Optional<TreeState> selectNewestValidStateOptionally(Pair<TreeState, TreeState> states)\n+  {\n+    TreeState stateA = states.getLeft();\n+    TreeState stateB = states.getRight();\n+\n+    if (stateA.isValid() != stateB.isValid())\n     {\n-        TreeState stateA = readStatePage( cursor, pageIdA );\n-        TreeState stateB = readStatePage( cursor, pageIdB );\n-        return Pair.of( stateA, stateB );\n-    }\n-\n-    private static TreeState readStatePage( PageCursor cursor, long pageIdA ) throws IOException\n+      // return only valid\n+      return stateA.isValid() ? Optional.of(stateA) : Optional.of(stateB);\n+    } else if (stateA.isValid() && stateB.isValid())\n     {\n-        PageCursorUtil.goTo( cursor, \"state page\", pageIdA );\n-        TreeState state;\n-        do\n-        {\n-            state = TreeState.read( cursor );\n-        }\n-        while ( cursor.shouldRetry() );\n-        checkOutOfBounds( cursor );\n-        return state;\n+      // return newest\n+\n+      // compare unstable generations of A/B, if equal, compare clean flag (clean is newer than dirty)\n+      // and include sanity check for stable generations such that there cannot be a state S compared\n+      // to other state O where\n+      // S.unstableGeneration > O.unstableGeneration AND S.stableGeneration < O.stableGeneration\n+\n+      if (stateA.stableGeneration() == stateB.stableGeneration() &&\n+          stateA.unstableGeneration() == stateB.unstableGeneration() &&\n+          stateA.isClean() != stateB.isClean())\n+      {\n+        return Optional.of(stateA.isClean() ? stateA : stateB);\n+      } else if (stateA.stableGeneration() >= stateB.stableGeneration() &&\n+          stateA.unstableGeneration() > stateB.unstableGeneration())\n+      {\n+        return Optional.of(stateA);\n+      } else if (stateA.stableGeneration() <= stateB.stableGeneration() &&\n+          stateA.unstableGeneration() < stateB.unstableGeneration())\n+      {\n+        return Optional.of(stateB);\n+      }\n     }\n \n-    /**\n-     * @param states the two states to compare.\n-     * @return newest (w/ regards to {@link TreeState#stableGeneration()}) {@link TreeState#isValid() valid}\n-     * {@link TreeState} of the two.\n-     * @throws IllegalStateException if none were valid.\n-     */\n-    static TreeState selectNewestValidState( Pair<TreeState,TreeState> states )\n-    {\n-        return selectNewestValidStateOptionally( states ).orElseThrow( () ->\n-                new TreeInconsistencyException( \"Unexpected combination of state.%n  STATE_A[%s]%n  STATE_B[%s]\",\n-                        states.getLeft(), states.getRight() ) );\n-    }\n-\n-    /**\n-     * @param states the two states to compare.\n-     * @return oldest (w/ regards to {@link TreeState#stableGeneration()}) {@link TreeState#isValid() invalid}\n-     * {@link TreeState} of the two. If both are invalid then the {@link Pair#getLeft() first one} is returned.\n-     */\n-    static TreeState selectOldestOrInvalid( Pair<TreeState,TreeState> states )\n-    {\n-        TreeState newestValidState = selectNewestValidStateOptionally( states ).orElse( states.getRight() );\n-        return newestValidState == states.getLeft() ? states.getRight() : states.getLeft();\n-    }\n-\n-    private static Optional<TreeState> selectNewestValidStateOptionally( Pair<TreeState,TreeState> states )\n-    {\n-        TreeState stateA = states.getLeft();\n-        TreeState stateB = states.getRight();\n-\n-        if ( stateA.isValid() != stateB.isValid() )\n-        {\n-            // return only valid\n-            return stateA.isValid() ? Optional.of( stateA ) : Optional.of( stateB );\n-        }\n-        else if ( stateA.isValid() && stateB.isValid() )\n-        {\n-            // return newest\n-\n-            // compare unstable generations of A/B, if equal, compare clean flag (clean is newer than dirty)\n-            // and include sanity check for stable generations such that there cannot be a state S compared\n-            // to other state O where\n-            // S.unstableGeneration > O.unstableGeneration AND S.stableGeneration < O.stableGeneration\n-\n-            if ( stateA.stableGeneration() == stateB.stableGeneration() &&\n-                    stateA.unstableGeneration() == stateB.unstableGeneration() &&\n-                    stateA.isClean() != stateB.isClean() )\n-            {\n-                return Optional.of( stateA.isClean() ? stateA : stateB );\n-            }\n-            else if ( stateA.stableGeneration() >= stateB.stableGeneration() &&\n-                    stateA.unstableGeneration() > stateB.unstableGeneration() )\n-            {\n-                return Optional.of( stateA );\n-            }\n-            else if ( stateA.stableGeneration() <= stateB.stableGeneration() &&\n-                    stateA.unstableGeneration() < stateB.unstableGeneration() )\n-            {\n-                return Optional.of( stateB );\n-            }\n-        }\n-\n-        // return null communicating that this combination didn't result in any valid \"newest\" state\n-        return Optional.empty();\n-    }\n+    // return null communicating that this combination didn't result in any valid \"newest\" state\n+    return Optional.empty();\n+  }\n }\n",
            "diff_size": 171
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "column": "73",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "78",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "137",
                    "column": "78",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3271/TreeStatePair.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3271/TreeStatePair.java\nindex fc08b2984c2..edc46ab0319 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3271/TreeStatePair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3271/TreeStatePair.java\n@@ -34,7 +34,6 @@ import static org.neo4j.index.internal.gbptree.PageCursorUtil.checkOutOfBounds;\n  */\n class TreeStatePair\n {\n-\n     private TreeStatePair()\n     {\n     }\n@@ -93,10 +92,9 @@ class TreeStatePair\n      */\n     static TreeState selectNewestValidState( Pair<TreeState,TreeState> states )\n     {\n-        return selectNewestValidStateOptionally( states ).orElseThrow( () ->\n-                new TreeInconsistencyException( \"Unexpected combination of state.%n  STATE_A[%s]%n  STATE_B[%s]\",\n+        return selectNewestValidStateOptionally( states ).orElseThrow( () -> new TreeInconsistencyException( \"Unexpected combination of state.%n  STATE_A[%s]%n  STATE_B[%s]\",\n                         states.getLeft(), states.getRight() ) );\n-    }\n+            }\n \n     /**\n      * @param states the two states to compare.\n@@ -113,8 +111,7 @@ class TreeStatePair\n     {\n         TreeState stateA = states.getLeft();\n         TreeState stateB = states.getRight();\n-\n-        if ( stateA.isValid() != stateB.isValid() )\n+if ( stateA.isValid() != stateB.isValid() )\n         {\n             // return only valid\n             return stateA.isValid() ? Optional.of( stateA ) : Optional.of( stateB );\n@@ -128,20 +125,17 @@ class TreeStatePair\n             // to other state O where\n             // S.unstableGeneration > O.unstableGeneration AND S.stableGeneration < O.stableGeneration\n \n-            if ( stateA.stableGeneration() == stateB.stableGeneration() &&\n-                    stateA.unstableGeneration() == stateB.unstableGeneration() &&\n+            if ( stateA.stableGeneration() == stateB.stableGeneration() &&stateA.unstableGeneration() == stateB.unstableGeneration() &&\n                     stateA.isClean() != stateB.isClean() )\n-            {\n+{\n                 return Optional.of( stateA.isClean() ? stateA : stateB );\n             }\n-            else if ( stateA.stableGeneration() >= stateB.stableGeneration() &&\n-                    stateA.unstableGeneration() > stateB.unstableGeneration() )\n-            {\n+            else if ( stateA.stableGeneration() >= stateB.stableGeneration() &&stateA.unstableGeneration() > stateB.unstableGeneration() )\n+{\n                 return Optional.of( stateA );\n             }\n-            else if ( stateA.stableGeneration() <= stateB.stableGeneration() &&\n-                    stateA.unstableGeneration() < stateB.unstableGeneration() )\n-            {\n+            else if ( stateA.stableGeneration() <= stateB.stableGeneration() &&stateA.unstableGeneration() < stateB.unstableGeneration() )\n+{\n                 return Optional.of( stateB );\n             }\n         }\n@@ -149,4 +143,4 @@ class TreeStatePair\n         // return null communicating that this combination didn't result in any valid \"newest\" state\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}