{
    "project_name": "opencb-opencga",
    "error_id": "200",
    "information": {
        "errors": [
            {
                "line": "255",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    protected void checkSampleIndexTable(StudyMetadata studyMetadata, VariantHadoopDBAdaptor dbAdaptor, String removedFile) throws Exception {\n        FileMetadata fileMetadata = metadataManager.getFileMetadata(studyMetadata.getId(), removedFile);\n        LinkedHashSet<Integer> sampleIds = fileMetadata.getSamples();\n        SampleIndexDBAdaptor sampleIndexDBAdaptor = new SampleIndexDBAdaptor(dbAdaptor.getHBaseManager(),",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/200/VariantTableRemoveTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/200/VariantTableRemoveTest.java\nindex 674b81e518c..b1b1f64cc72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/200/VariantTableRemoveTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/200/VariantTableRemoveTest.java\n@@ -41,225 +41,224 @@ import static org.junit.Assert.*;\n \n /**\n  * @author Matthias Haimel mh719+git@cam.ac.uk\n- *\n  */\n public class VariantTableRemoveTest extends VariantStorageBaseTest implements HadoopVariantStorageTest {\n \n-    @ClassRule\n-    public static ExternalResource externalResource = new HadoopExternalResource();\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        clearDB(DB_NAME);\n-        clearDB(getVariantStorageEngine().getArchiveTableName(STUDY_ID));\n-    }\n-\n-    private VariantFileMetadata loadFile(String resource, StudyMetadata studyMetadata, Map<? extends String, ?> map) throws Exception {\n-        return VariantHbaseTestUtils.loadFile(getVariantStorageEngine(), DB_NAME, outputUri, resource, studyMetadata, map);\n-    }\n-\n-    private void removeFile(String file, StudyMetadata studyMetadata, Map<? extends String, ?> map) throws Exception {\n-        Integer fileId = metadataManager.getFileId(studyMetadata.getId(), file);\n-        System.out.printf(\"Remove File ID %s for %s\", fileId, file);\n-        VariantHbaseTestUtils.removeFile(getVariantStorageEngine(), DB_NAME, fileId, studyMetadata, map);\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void removeFileTestMergeAdvanced() throws Exception {\n-        StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n-        System.out.println(\"studyMetadata = \" + studyMetadata);\n-        String studyName = studyMetadata.getName();\n-\n-        ObjectMap options = new ObjectMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true)\n-                .append(VariantStorageOptions.MERGE_MODE.key(), VariantStorageEngine.MergeMode.ADVANCED);\n-        loadFile(\"s1.genome.vcf\", studyMetadata, options);\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        Map<String, Variant> variants = buildVariantsIdx();\n-        assertFalse(variants.containsKey(\"1:10014:A:G\"));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        loadFile(\"s2.genome.vcf\", studyMetadata, options);\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        variants = buildVariantsIdx();\n-        assertThat(variants.keySet(), hasItem(\"1:10014:A:G\"));\n-        assertEquals(\"0/2\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(\"0/0\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        // delete\n-        removeFile(\"s2.genome.vcf\", studyMetadata, Collections.emptyMap());\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        variants = buildVariantsIdx();\n-        if (variants.containsKey(\"1:10014:A:G\")) {\n-            System.out.println(variants.get(\"1:10014:A:G\").getImpl());\n-        }\n-        assertThat(variants.keySet(), not(hasItem(\"1:10014:A:G\")));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        checkSampleIndexTable(studyMetadata, getVariantStorageEngine().getDBAdaptor(), \"s2.genome.vcf\");\n+  @ClassRule\n+  public static ExternalResource externalResource = new HadoopExternalResource();\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    clearDB(DB_NAME);\n+    clearDB(getVariantStorageEngine().getArchiveTableName(STUDY_ID));\n+  }\n+\n+  private VariantFileMetadata loadFile(String resource, StudyMetadata studyMetadata, Map<? extends String, ?> map) throws Exception {\n+    return VariantHbaseTestUtils.loadFile(getVariantStorageEngine(), DB_NAME, outputUri, resource, studyMetadata, map);\n+  }\n+\n+  private void removeFile(String file, StudyMetadata studyMetadata, Map<? extends String, ?> map) throws Exception {\n+    Integer fileId = metadataManager.getFileId(studyMetadata.getId(), file);\n+    System.out.printf(\"Remove File ID %s for %s\", fileId, file);\n+    VariantHbaseTestUtils.removeFile(getVariantStorageEngine(), DB_NAME, fileId, studyMetadata, map);\n+  }\n+\n+  @Test\n+  @Ignore\n+  public void removeFileTestMergeAdvanced() throws Exception {\n+    StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n+    System.out.println(\"studyMetadata = \" + studyMetadata);\n+    String studyName = studyMetadata.getName();\n+\n+    ObjectMap options = new ObjectMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true)\n+        .append(VariantStorageOptions.MERGE_MODE.key(), VariantStorageEngine.MergeMode.ADVANCED);\n+    loadFile(\"s1.genome.vcf\", studyMetadata, options);\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    Map<String, Variant> variants = buildVariantsIdx();\n+    assertFalse(variants.containsKey(\"1:10014:A:G\"));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    loadFile(\"s2.genome.vcf\", studyMetadata, options);\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    variants = buildVariantsIdx();\n+    assertThat(variants.keySet(), hasItem(\"1:10014:A:G\"));\n+    assertEquals(\"0/2\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(\"0/0\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    // delete\n+    removeFile(\"s2.genome.vcf\", studyMetadata, Collections.emptyMap());\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    variants = buildVariantsIdx();\n+    if (variants.containsKey(\"1:10014:A:G\")) {\n+      System.out.println(variants.get(\"1:10014:A:G\").getImpl());\n     }\n-\n-    @Test\n-    public void removeFileTestMergeBasic() throws Exception {\n-        StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n-        System.out.println(\"studyMetadata = \" + studyMetadata);\n-        String studyName = studyMetadata.getName();\n-\n-        ObjectMap options = new ObjectMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true)\n-                .append(VariantStorageOptions.MERGE_MODE.key(), VariantStorageEngine.MergeMode.BASIC);\n-        loadFile(\"s1.genome.vcf\", studyMetadata, options);\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        Map<String, Variant> variants = buildVariantsIdx();\n-        assertFalse(variants.containsKey(\"1:10014:A:G\"));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        loadFile(\"s2.genome.vcf\", studyMetadata, options);\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        variants = buildVariantsIdx();\n-        assertThat(variants.keySet(), hasItem(\"1:10014:A:G\"));\n+    assertThat(variants.keySet(), not(hasItem(\"1:10014:A:G\")));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    checkSampleIndexTable(studyMetadata, getVariantStorageEngine().getDBAdaptor(), \"s2.genome.vcf\");\n+  }\n+\n+  @Test\n+  public void removeFileTestMergeBasic() throws Exception {\n+    StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n+    System.out.println(\"studyMetadata = \" + studyMetadata);\n+    String studyName = studyMetadata.getName();\n+\n+    ObjectMap options = new ObjectMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true)\n+        .append(VariantStorageOptions.MERGE_MODE.key(), VariantStorageEngine.MergeMode.BASIC);\n+    loadFile(\"s1.genome.vcf\", studyMetadata, options);\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    Map<String, Variant> variants = buildVariantsIdx();\n+    assertFalse(variants.containsKey(\"1:10014:A:G\"));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    loadFile(\"s2.genome.vcf\", studyMetadata, options);\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    variants = buildVariantsIdx();\n+    assertThat(variants.keySet(), hasItem(\"1:10014:A:G\"));\n //        assertEquals(\"0/2\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n \n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n //        assertEquals(\"0/0\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n \n-        // delete\n-        removeFile(\"s2.genome.vcf\", studyMetadata, Collections.emptyMap());\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        variants = buildVariantsIdx();\n-        if (variants.containsKey(\"1:10014:A:G\")) {\n-            System.out.println(variants.get(\"1:10014:A:G\").getImpl());\n-        }\n-        checkSampleIndexTable(studyMetadata, getVariantStorageEngine().getDBAdaptor(), \"s2.genome.vcf\");\n-\n-        // FIXME: This variant should be removed!\n-        // assertThat(variants.keySet(), not(hasItem(\"1:10014:A:G\")));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+    // delete\n+    removeFile(\"s2.genome.vcf\", studyMetadata, Collections.emptyMap());\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    variants = buildVariantsIdx();\n+    if (variants.containsKey(\"1:10014:A:G\")) {\n+      System.out.println(variants.get(\"1:10014:A:G\").getImpl());\n     }\n-\n-    @Test\n-    public void removeFileTestMergeBasicFillGaps() throws Exception {\n-        StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n-        System.out.println(\"studyMetadata = \" + studyMetadata);\n-        String studyName = studyMetadata.getName();\n-\n-        ObjectMap options = new ObjectMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true)\n-                .append(VariantStorageOptions.MERGE_MODE.key(), VariantStorageEngine.MergeMode.BASIC);\n-        loadFile(\"s1.genome.vcf\", studyMetadata, options);\n-        VariantHadoopDBAdaptor dbAdaptor = getVariantStorageEngine().getDBAdaptor();\n-        VariantHbaseTestUtils.printVariants(dbAdaptor, newOutputUri());\n-        Map<String, Variant> variants = buildVariantsIdx();\n-        assertFalse(variants.containsKey(\"1:10014:A:G\"));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        loadFile(\"s2.genome.vcf\", studyMetadata, options);\n-\n-        getVariantStorageEngine().aggregateFamily(studyName, Arrays.asList(\"s1\", \"s2\"), options);\n-\n-        VariantHbaseTestUtils.printVariants(dbAdaptor, newOutputUri());\n-        variants = buildVariantsIdx();\n-        assertThat(variants.keySet(), hasItem(\"1:10014:A:G\"));\n-        assertEquals(\"0/2\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(\"0/0\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n-\n-        // delete\n-        removeFile(\"s2.genome.vcf\", studyMetadata, Collections.emptyMap());\n-        VariantHbaseTestUtils.printVariants(dbAdaptor, newOutputUri());\n-        variants = buildVariantsIdx();\n-        if (variants.containsKey(\"1:10014:A:G\")) {\n-            System.out.println(variants.get(\"1:10014:A:G\").getImpl());\n-        }\n-\n-        checkSampleIndexTable(studyMetadata, dbAdaptor, \"s2.genome.vcf\");\n-\n-        // FIXME: This variant should be removed!\n-        // assertThat(variants.keySet(), not(hasItem(\"1:10014:A:G\")));\n-\n-        assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-        assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+    checkSampleIndexTable(studyMetadata, getVariantStorageEngine().getDBAdaptor(), \"s2.genome.vcf\");\n+\n+    // FIXME: This variant should be removed!\n+    // assertThat(variants.keySet(), not(hasItem(\"1:10014:A:G\")));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+  }\n+\n+  @Test\n+  public void removeFileTestMergeBasicFillGaps() throws Exception {\n+    StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n+    System.out.println(\"studyMetadata = \" + studyMetadata);\n+    String studyName = studyMetadata.getName();\n+\n+    ObjectMap options = new ObjectMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true)\n+        .append(VariantStorageOptions.MERGE_MODE.key(), VariantStorageEngine.MergeMode.BASIC);\n+    loadFile(\"s1.genome.vcf\", studyMetadata, options);\n+    VariantHadoopDBAdaptor dbAdaptor = getVariantStorageEngine().getDBAdaptor();\n+    VariantHbaseTestUtils.printVariants(dbAdaptor, newOutputUri());\n+    Map<String, Variant> variants = buildVariantsIdx();\n+    assertFalse(variants.containsKey(\"1:10014:A:G\"));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    loadFile(\"s2.genome.vcf\", studyMetadata, options);\n+\n+    getVariantStorageEngine().aggregateFamily(studyName, Arrays.asList(\"s1\", \"s2\"), options);\n+\n+    VariantHbaseTestUtils.printVariants(dbAdaptor, newOutputUri());\n+    variants = buildVariantsIdx();\n+    assertThat(variants.keySet(), hasItem(\"1:10014:A:G\"));\n+    assertEquals(\"0/2\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10014:A:G\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(\"0/0\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+\n+    // delete\n+    removeFile(\"s2.genome.vcf\", studyMetadata, Collections.emptyMap());\n+    VariantHbaseTestUtils.printVariants(dbAdaptor, newOutputUri());\n+    variants = buildVariantsIdx();\n+    if (variants.containsKey(\"1:10014:A:G\")) {\n+      System.out.println(variants.get(\"1:10014:A:G\").getImpl());\n     }\n \n-    @Test\n-    public void removeSingleFileTest() throws Exception {\n-        StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n-        System.out.println(\"studyMetadata = \" + studyMetadata);\n-        String studyName = studyMetadata.getName();\n-\n-        Map<String, Object> options = Collections.singletonMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true);\n-        loadFile(\"s1.genome.vcf\", studyMetadata, options);\n-        Map<String, Variant> variants = buildVariantsIdx();\n-\n-        assertFalse(variants.containsKey(\"1:10014:A:G\"));\n-        assertTrue(variants.containsKey(\"1:10013:T:C\"));\n-        assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n-\n-        VariantHadoopDBAdaptor dbAdaptor = getVariantStorageEngine().getDBAdaptor();\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-        // delete\n-        removeFile(\"s1.genome.vcf\", studyMetadata, options);\n-\n-        VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n-\n-        checkSampleIndexTable(studyMetadata, dbAdaptor, \"s1.genome.vcf\");\n-\n-        variants = buildVariantsIdx();\n-        assertEquals(\"Expected none variants\", 0, variants.size());\n-        assertEquals(\"Expected none indexed files\", 0, metadataManager.getIndexedFiles(studyMetadata.getId()).size());\n-    }\n-\n-    private Map<String, Variant> buildVariantsIdx() throws Exception {\n-        VariantHadoopDBAdaptor dbAdaptor = getVariantStorageEngine().getDBAdaptor();\n-        Map<String, Variant> variants = new HashMap<>();\n-        System.out.println(\"Build Variant map\");\n-        for (Variant variant : dbAdaptor) {\n-            if (variant.getStudies().isEmpty()) {\n-                continue;\n-            }\n-            String v = variant.toString();\n-            assertFalse(variants.containsKey(v));\n-            variants.put(v, variant);\n-            VariantAnnotation a = variant.getAnnotation();\n-            variant.setAnnotation(null);\n-            System.out.println(variant.toJson());\n-            variant.setAnnotation(a);\n-        }\n-        System.out.println(\"End. size : \" + variants.size());\n-        return variants;\n+    checkSampleIndexTable(studyMetadata, dbAdaptor, \"s2.genome.vcf\");\n+\n+    // FIXME: This variant should be removed!\n+    // assertThat(variants.keySet(), not(hasItem(\"1:10014:A:G\")));\n+\n+    assertThat(variants.keySet(), hasItem(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+    assertEquals(null, variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s2\", \"GT\"));\n+  }\n+\n+  @Test\n+  public void removeSingleFileTest() throws Exception {\n+    StudyMetadata studyMetadata = VariantStorageBaseTest.newStudyMetadata();\n+    System.out.println(\"studyMetadata = \" + studyMetadata);\n+    String studyName = studyMetadata.getName();\n+\n+    Map<String, Object> options = Collections.singletonMap(HadoopVariantStorageOptions.VARIANT_TABLE_INDEXES_SKIP.key(), true);\n+    loadFile(\"s1.genome.vcf\", studyMetadata, options);\n+    Map<String, Variant> variants = buildVariantsIdx();\n+\n+    assertFalse(variants.containsKey(\"1:10014:A:G\"));\n+    assertTrue(variants.containsKey(\"1:10013:T:C\"));\n+    assertEquals(\"0/1\", variants.get(\"1:10013:T:C\").getStudy(studyName).getSampleData(\"s1\", \"GT\"));\n+\n+    VariantHadoopDBAdaptor dbAdaptor = getVariantStorageEngine().getDBAdaptor();\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+    // delete\n+    removeFile(\"s1.genome.vcf\", studyMetadata, options);\n+\n+    VariantHbaseTestUtils.printVariants(getVariantStorageEngine().getDBAdaptor(), newOutputUri());\n+\n+    checkSampleIndexTable(studyMetadata, dbAdaptor, \"s1.genome.vcf\");\n+\n+    variants = buildVariantsIdx();\n+    assertEquals(\"Expected none variants\", 0, variants.size());\n+    assertEquals(\"Expected none indexed files\", 0, metadataManager.getIndexedFiles(studyMetadata.getId()).size());\n+  }\n+\n+  private Map<String, Variant> buildVariantsIdx() throws Exception {\n+    VariantHadoopDBAdaptor dbAdaptor = getVariantStorageEngine().getDBAdaptor();\n+    Map<String, Variant> variants = new HashMap<>();\n+    System.out.println(\"Build Variant map\");\n+    for (Variant variant : dbAdaptor) {\n+      if (variant.getStudies().isEmpty()) {\n+        continue;\n+      }\n+      String v = variant.toString();\n+      assertFalse(variants.containsKey(v));\n+      variants.put(v, variant);\n+      VariantAnnotation a = variant.getAnnotation();\n+      variant.setAnnotation(null);\n+      System.out.println(variant.toJson());\n+      variant.setAnnotation(a);\n     }\n-\n-    protected void checkSampleIndexTable(StudyMetadata studyMetadata, VariantHadoopDBAdaptor dbAdaptor, String removedFile) throws Exception {\n-        FileMetadata fileMetadata = metadataManager.getFileMetadata(studyMetadata.getId(), removedFile);\n-        LinkedHashSet<Integer> sampleIds = fileMetadata.getSamples();\n-        SampleIndexDBAdaptor sampleIndexDBAdaptor = new SampleIndexDBAdaptor(dbAdaptor.getHBaseManager(),\n-                dbAdaptor.getTableNameGenerator(), dbAdaptor.getMetadataManager());\n-        for (Integer sampleId : sampleIds) {\n-            assertFalse(sampleIndexDBAdaptor.iteratorByGt(studyMetadata.getId(), sampleId).hasNext());\n-        }\n+    System.out.println(\"End. size : \" + variants.size());\n+    return variants;\n+  }\n+\n+  protected void checkSampleIndexTable(StudyMetadata studyMetadata, VariantHadoopDBAdaptor dbAdaptor, String removedFile) throws Exception {\n+    FileMetadata fileMetadata = metadataManager.getFileMetadata(studyMetadata.getId(), removedFile);\n+    LinkedHashSet<Integer> sampleIds = fileMetadata.getSamples();\n+    SampleIndexDBAdaptor sampleIndexDBAdaptor = new SampleIndexDBAdaptor(dbAdaptor.getHBaseManager(),\n+        dbAdaptor.getTableNameGenerator(), dbAdaptor.getMetadataManager());\n+    for (Integer sampleId : sampleIds) {\n+      assertFalse(sampleIndexDBAdaptor.iteratorByGt(studyMetadata.getId(), sampleId).hasNext());\n     }\n+  }\n \n }\n",
            "diff_size": 225
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/200/VariantTableRemoveTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/200/VariantTableRemoveTest.java\nindex 674b81e518c..6afd7b07198 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/200/VariantTableRemoveTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/200/VariantTableRemoveTest.java\n@@ -262,4 +262,4 @@ public class VariantTableRemoveTest extends VariantStorageBaseTest implements Ha\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}