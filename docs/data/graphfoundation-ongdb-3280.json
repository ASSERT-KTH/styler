{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3280",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3280/BackupClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3280/BackupClient.java\nindex fc2f65a8e0b..8213a7428d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3280/BackupClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3280/BackupClient.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup.impl;\n \n import java.util.concurrent.TimeUnit;\n@@ -47,96 +48,99 @@ import static org.neo4j.backup.impl.BackupServer.FRAME_LENGTH;\n public class BackupClient extends Client<TheBackupInterface> implements TheBackupInterface\n {\n \n-    public static final long BIG_READ_TIMEOUT = TimeUnit.MINUTES.toMillis( 20 );\n+  public static final long BIG_READ_TIMEOUT = TimeUnit.MINUTES.toMillis(20);\n+\n+  BackupClient(String destinationHostNameOrIp, int destinationPort, String originHostNameOrIp,\n+               LogProvider logProvider, StoreId storeId, long timeout,\n+               ResponseUnpacker unpacker, ByteCounterMonitor byteCounterMonitor, RequestMonitor requestMonitor,\n+               LogEntryReader<ReadableClosablePositionAwareChannel> reader)\n+  {\n+    super(destinationHostNameOrIp, destinationPort, originHostNameOrIp, logProvider, storeId, FRAME_LENGTH,\n+        timeout, Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT, FRAME_LENGTH, unpacker,\n+        byteCounterMonitor, requestMonitor, reader);\n+  }\n+\n+  @Override\n+  public Response<Void> fullBackup(StoreWriter storeWriter, final boolean forensics)\n+  {\n+    return sendRequest(BackupRequestType.FULL_BACKUP, RequestContext.EMPTY,\n+        buffer -> buffer.writeByte(forensics ? (byte) 1 : (byte) 0),\n+        new Protocol.FileStreamsDeserializer310(storeWriter));\n+  }\n+\n+  @Override\n+  public Response<Void> incrementalBackup(RequestContext context)\n+  {\n+    return sendRequest(BackupRequestType.INCREMENTAL_BACKUP, context, Protocol.EMPTY_SERIALIZER,\n+        Protocol.VOID_DESERIALIZER);\n+  }\n+\n+  @Override\n+  public ProtocolVersion getProtocolVersion()\n+  {\n+    return BACKUP_PROTOCOL_VERSION;\n+  }\n+\n+  @Override\n+  protected boolean shouldCheckStoreId(RequestType type)\n+  {\n+    return type != BackupRequestType.FULL_BACKUP;\n+  }\n+\n+  public enum BackupRequestType implements RequestType\n+  {\n+    FULL_BACKUP((TargetCaller<TheBackupInterface, Void>) (master, context, input, target) ->\n+    {\n+      boolean forensics = input.readable() && booleanOf(input.readByte());\n+      return master.fullBackup(new ToNetworkStoreWriter(target, new Monitors()), forensics);\n+    }, Protocol.VOID_SERIALIZER),\n+    INCREMENTAL_BACKUP((TargetCaller<TheBackupInterface, Void>) (master, context, input, target) ->\n+        master.incrementalBackup(context), Protocol.VOID_SERIALIZER);\n+\n+    private final TargetCaller<?, ?> masterCaller;\n+    private final ObjectSerializer<?> serializer;\n \n-    BackupClient( String destinationHostNameOrIp, int destinationPort, String originHostNameOrIp,\n-            LogProvider logProvider, StoreId storeId, long timeout,\n-            ResponseUnpacker unpacker, ByteCounterMonitor byteCounterMonitor, RequestMonitor requestMonitor,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> reader )\n+    BackupRequestType(TargetCaller<?, ?> masterCaller, ObjectSerializer<?> serializer)\n     {\n-        super( destinationHostNameOrIp, destinationPort, originHostNameOrIp, logProvider, storeId, FRAME_LENGTH,\n-                timeout, Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT, FRAME_LENGTH, unpacker,\n-                byteCounterMonitor, requestMonitor, reader );\n+      this.masterCaller = masterCaller;\n+      this.serializer = serializer;\n     }\n \n-    @Override\n-    public Response<Void> fullBackup( StoreWriter storeWriter, final boolean forensics )\n+    private static boolean booleanOf(byte value)\n     {\n-        return sendRequest( BackupRequestType.FULL_BACKUP, RequestContext.EMPTY,\n-                buffer -> buffer.writeByte( forensics ? (byte) 1 : (byte) 0 ),\n-                new Protocol.FileStreamsDeserializer310( storeWriter ) );\n+      switch (value)\n+      {\n+        case 0:\n+          return false;\n+        case 1:\n+          return true;\n+        default:\n+          throw new IllegalArgumentException(\"Invalid 'boolean' byte value \" + value);\n+      }\n     }\n \n     @Override\n-    public Response<Void> incrementalBackup( RequestContext context )\n+    public TargetCaller<?, ?> getTargetCaller()\n     {\n-        return sendRequest( BackupRequestType.INCREMENTAL_BACKUP, context, Protocol.EMPTY_SERIALIZER,\n-                Protocol.VOID_DESERIALIZER );\n+      return masterCaller;\n     }\n \n     @Override\n-    public ProtocolVersion getProtocolVersion()\n+    public ObjectSerializer<?> getObjectSerializer()\n     {\n-        return BACKUP_PROTOCOL_VERSION;\n+      return serializer;\n     }\n \n     @Override\n-    protected boolean shouldCheckStoreId( RequestType type )\n+    public byte id()\n     {\n-        return type != BackupRequestType.FULL_BACKUP;\n+      return (byte) ordinal();\n     }\n \n-    public enum BackupRequestType implements RequestType\n+    @Override\n+    public boolean responseShouldBeUnpacked()\n     {\n-        FULL_BACKUP( (TargetCaller<TheBackupInterface, Void>) ( master, context, input, target ) ->\n-        {\n-            boolean forensics = input.readable() && booleanOf( input.readByte() );\n-            return master.fullBackup( new ToNetworkStoreWriter( target, new Monitors() ), forensics );\n-        }, Protocol.VOID_SERIALIZER ),\n-        INCREMENTAL_BACKUP( (TargetCaller<TheBackupInterface, Void>) ( master, context, input, target ) ->\n-                master.incrementalBackup( context ), Protocol.VOID_SERIALIZER );\n-\n-        private final TargetCaller<?,?> masterCaller;\n-        private final ObjectSerializer<?> serializer;\n-\n-        BackupRequestType( TargetCaller<?,?> masterCaller, ObjectSerializer<?> serializer )\n-        {\n-            this.masterCaller = masterCaller;\n-            this.serializer = serializer;\n-        }\n-\n-        private static boolean booleanOf( byte value )\n-        {\n-            switch ( value )\n-            {\n-            case 0: return false;\n-            case 1: return true;\n-            default: throw new IllegalArgumentException( \"Invalid 'boolean' byte value \" + value );\n-            }\n-        }\n-\n-        @Override\n-        public TargetCaller<?,?> getTargetCaller()\n-        {\n-            return masterCaller;\n-        }\n-\n-        @Override\n-        public ObjectSerializer<?> getObjectSerializer()\n-        {\n-            return serializer;\n-        }\n-\n-        @Override\n-        public byte id()\n-        {\n-            return (byte) ordinal();\n-        }\n-\n-        @Override\n-        public boolean responseShouldBeUnpacked()\n-        {\n-            return false;\n-        }\n+      return false;\n     }\n+  }\n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3280/BackupClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3280/BackupClient.java\nindex fc2f65a8e0b..ef1e23e6968 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3280/BackupClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3280/BackupClient.java\n@@ -46,25 +46,21 @@ import static org.neo4j.backup.impl.BackupServer.FRAME_LENGTH;\n \n public class BackupClient extends Client<TheBackupInterface> implements TheBackupInterface\n {\n-\n     public static final long BIG_READ_TIMEOUT = TimeUnit.MINUTES.toMillis( 20 );\n \n     BackupClient( String destinationHostNameOrIp, int destinationPort, String originHostNameOrIp,\n             LogProvider logProvider, StoreId storeId, long timeout,\n-            ResponseUnpacker unpacker, ByteCounterMonitor byteCounterMonitor, RequestMonitor requestMonitor,\n-            LogEntryReader<ReadableClosablePositionAwareChannel> reader )\n+            ResponseUnpacker unpacker, ByteCounterMonitor byteCounterMonitor, RequestMonitor requestMonitor, LogEntryReader<ReadableClosablePositionAwareChannel> reader )\n     {\n         super( destinationHostNameOrIp, destinationPort, originHostNameOrIp, logProvider, storeId, FRAME_LENGTH,\n-                timeout, Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT, FRAME_LENGTH, unpacker,\n-                byteCounterMonitor, requestMonitor, reader );\n+                timeout, Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT, FRAME_LENGTH, unpacker, byteCounterMonitor, requestMonitor, reader );\n     }\n \n     @Override\n     public Response<Void> fullBackup( StoreWriter storeWriter, final boolean forensics )\n     {\n         return sendRequest( BackupRequestType.FULL_BACKUP, RequestContext.EMPTY,\n-                buffer -> buffer.writeByte( forensics ? (byte) 1 : (byte) 0 ),\n-                new Protocol.FileStreamsDeserializer310( storeWriter ) );\n+                buffer -> buffer.writeByte( forensics ? (byte) 1 : (byte) 0 ), new Protocol.FileStreamsDeserializer310( storeWriter ) );\n     }\n \n     @Override\n@@ -92,14 +88,12 @@ public class BackupClient extends Client<TheBackupInterface> implements TheBacku\n         {\n             boolean forensics = input.readable() && booleanOf( input.readByte() );\n             return master.fullBackup( new ToNetworkStoreWriter( target, new Monitors() ), forensics );\n-        }, Protocol.VOID_SERIALIZER ),\n-        INCREMENTAL_BACKUP( (TargetCaller<TheBackupInterface, Void>) ( master, context, input, target ) ->\n-                master.incrementalBackup( context ), Protocol.VOID_SERIALIZER );\n-\n-        private final TargetCaller<?,?> masterCaller;\n+        }, Protocol.VOID_SERIALIZER ), INCREMENTAL_BACKUP( (TargetCaller<TheBackupInterface, Void>) ( master, context, input, target ) ->\n+master.incrementalBackup( context ), Protocol.VOID_SERIALIZER );\n+private final TargetCaller<?, ?> masterCaller;\n         private final ObjectSerializer<?> serializer;\n \n-        BackupRequestType( TargetCaller<?,?> masterCaller, ObjectSerializer<?> serializer )\n+        BackupRequestType( TargetCaller<?, ?> masterCaller, ObjectSerializer<?> serializer )\n         {\n             this.masterCaller = masterCaller;\n             this.serializer = serializer;\n@@ -109,14 +103,17 @@ public class BackupClient extends Client<TheBackupInterface> implements TheBacku\n         {\n             switch ( value )\n             {\n-            case 0: return false;\n-            case 1: return true;\n-            default: throw new IllegalArgumentException( \"Invalid 'boolean' byte value \" + value );\n-            }\n+            case 0:\n+    return false;\n+            case 1:\n+    return true;\n+    default:\n+    throw new IllegalArgumentException( \"Invalid 'boolean' byte value \" + value );\n+    }\n         }\n \n         @Override\n-        public TargetCaller<?,?> getTargetCaller()\n+        public TargetCaller<?, ?> getTargetCaller()\n         {\n             return masterCaller;\n         }\n@@ -139,4 +136,4 @@ public class BackupClient extends Client<TheBackupInterface> implements TheBacku\n             return false;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}