{
    "project_name": "neo4j-neo4j",
    "error_id": "1811",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "25",
                    "severity": "error",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1811/RandomEntityDataGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1811/RandomEntityDataGenerator.java\nindex 9067e7b02d2..c9850b645e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1811/RandomEntityDataGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1811/RandomEntityDataGenerator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.input;\n \n import java.util.List;\n@@ -39,114 +40,117 @@ import static org.neo4j.internal.batchimport.input.InputEntity.NO_LABELS;\n  */\n public class RandomEntityDataGenerator extends GeneratingInputIterator<RandomValues>\n {\n-    public RandomEntityDataGenerator( long nodeCount, long count, int batchSize, long seed, long startId, Header header,\n-           Distribution<String> labels, Distribution<String> relationshipTypes, float factorBadNodeData, float factorBadRelationshipData, int maxStringLength )\n+    public RandomEntityDataGenerator(long nodeCount, long count, int batchSize, long seed, long startId, Header header,\n+                                     Distribution<String> labels, Distribution<String> relationshipTypes, float factorBadNodeData,\n+                                     float factorBadRelationshipData, int maxStringLength)\n     {\n-        super( count, batchSize, new RandomsStates( seed ), ( randoms, visitor, id ) -> {\n-            for ( Entry entry : header.entries() )\n+        super(count, batchSize, new RandomsStates(seed), (randoms, visitor, id) -> {\n+            for (Entry entry : header.entries())\n             {\n-                switch ( entry.type() )\n+                switch (entry.type())\n                 {\n-                case ID:\n-                    if ( factorBadNodeData > 0 && id > 0 )\n-                    {\n-                        if ( randoms.nextFloat() <= factorBadNodeData )\n+                    case ID:\n+                        if (factorBadNodeData > 0 && id > 0)\n                         {\n-                            // id between 0 - id\n-                            id = randoms.nextLong( id );\n+                            if (randoms.nextFloat() <= factorBadNodeData)\n+                            {\n+                                // id between 0 - id\n+                                id = randoms.nextLong(id);\n+                            }\n                         }\n-                    }\n-                    visitor.id( idValue( entry, id ), entry.group() );\n-                    if ( entry.name() != null )\n-                    {\n-                        visitor.property( entry.name(), id );\n-                    }\n-                    break;\n-                case PROPERTY:\n-                    visitor.property( entry.name(), randomProperty( entry, randoms, maxStringLength ) );\n-                    break;\n-                case LABEL:\n-                    visitor.labels( randomLabels( randoms, labels ) );\n-                    break;\n-                case START_ID:\n-                case END_ID:\n-                    long nodeId = randoms.nextLong( nodeCount );\n-                    if ( factorBadRelationshipData > 0 && nodeId > 0 )\n-                    {\n-                        if ( randoms.nextFloat() <= factorBadRelationshipData )\n+                        visitor.id(idValue(entry, id), entry.group());\n+                        if (entry.name() != null)\n+                        {\n+                            visitor.property(entry.name(), id);\n+                        }\n+                        break;\n+                    case PROPERTY:\n+                        visitor.property(entry.name(), randomProperty(entry, randoms, maxStringLength));\n+                        break;\n+                    case LABEL:\n+                        visitor.labels(randomLabels(randoms, labels));\n+                        break;\n+                    case START_ID:\n+                    case END_ID:\n+                        long nodeId = randoms.nextLong(nodeCount);\n+                        if (factorBadRelationshipData > 0 && nodeId > 0)\n                         {\n-                            if ( randoms.nextBoolean() )\n+                            if (randoms.nextFloat() <= factorBadRelationshipData)\n                             {\n-                                // simply missing field\n-                                break;\n+                                if (randoms.nextBoolean())\n+                                {\n+                                    // simply missing field\n+                                    break;\n+                                }\n+                                // referencing some very likely non-existent node id\n+                                nodeId = randoms.nextLong();\n                             }\n-                            // referencing some very likely non-existent node id\n-                            nodeId = randoms.nextLong();\n                         }\n-                    }\n-                    if ( entry.type() == Type.START_ID )\n-                    {\n-                        visitor.startId( idValue( entry, nodeId ), entry.group() );\n-                    }\n-                    else\n-                    {\n-                        visitor.endId( idValue( entry, nodeId ), entry.group() );\n-                    }\n-                    break;\n-                case TYPE:\n-                    visitor.type( randomRelationshipType( randoms, relationshipTypes ) );\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException( entry.toString() );\n+                        if (entry.type() == Type.START_ID)\n+                        {\n+                            visitor.startId(idValue(entry, nodeId), entry.group());\n+                        } else\n+                        {\n+                            visitor.endId(idValue(entry, nodeId), entry.group());\n+                        }\n+                        break;\n+                    case TYPE:\n+                        visitor.type(randomRelationshipType(randoms, relationshipTypes));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(entry.toString());\n                 }\n             }\n-        }, startId );\n+        }, startId);\n     }\n \n-    private static Object idValue( Entry entry, long id )\n+    private static Object idValue(Entry entry, long id)\n     {\n-        switch ( entry.extractor().name() )\n+        switch (entry.extractor().name())\n         {\n-        case \"String\": return Long.toString( id );\n-        case \"long\": return id;\n-        default: throw new IllegalArgumentException( entry.name() );\n+            case \"String\":\n+                return Long.toString(id);\n+            case \"long\":\n+                return id;\n+            default:\n+                throw new IllegalArgumentException(entry.name());\n         }\n     }\n \n-    private static String randomRelationshipType( RandomValues random, Distribution<String> relationshipTypes )\n+    private static String randomRelationshipType(RandomValues random, Distribution<String> relationshipTypes)\n     {\n-        return relationshipTypes.random( random );\n+        return relationshipTypes.random(random);\n     }\n \n-    private static Object randomProperty( Entry entry, RandomValues random, int maxLStringength )\n+    private static Object randomProperty(Entry entry, RandomValues random, int maxLStringength)\n     {\n         String type = entry.extractor().name();\n-        switch ( type )\n+        switch (type)\n         {\n-        case \"String\":\n-            return random.nextAlphaNumericTextValue( 5, maxLStringength ).stringValue();\n-        case \"long\":\n-            return random.nextInt( Integer.MAX_VALUE );\n-        case \"int\":\n-            return random.nextInt( 20 );\n-        default:\n-            throw new IllegalArgumentException( \"\" + entry );\n+            case \"String\":\n+                return random.nextAlphaNumericTextValue(5, maxLStringength).stringValue();\n+            case \"long\":\n+                return random.nextInt(Integer.MAX_VALUE);\n+            case \"int\":\n+                return random.nextInt(20);\n+            default:\n+                throw new IllegalArgumentException(\"\" + entry);\n         }\n     }\n \n-    private static String[] randomLabels( RandomValues random, Distribution<String> labels )\n+    private static String[] randomLabels(RandomValues random, Distribution<String> labels)\n     {\n-        if ( labels.length() == 0 )\n+        if (labels.length() == 0)\n         {\n             return NO_LABELS;\n         }\n-        int length = random.nextInt( min( 3, labels.length() ) ) + 1;\n+        int length = random.nextInt(min(3, labels.length())) + 1;\n \n         String[] result = new String[length];\n-        for ( int i = 0; i < result.length; )\n+        for (int i = 0; i < result.length; )\n         {\n-            String candidate = labels.random( random );\n-            if ( !ArrayUtil.contains( result, i, candidate ) )\n+            String candidate = labels.random(random);\n+            if (!ArrayUtil.contains(result, i, candidate))\n             {\n                 result[i++] = candidate;\n             }\n@@ -157,49 +161,49 @@ public class RandomEntityDataGenerator extends GeneratingInputIterator<RandomVal\n     /**\n      * Test utility method for converting an {@link InputEntity} into another representation.\n      *\n-     * @param entity {@link InputEntity} filled with data.\n+     * @param entity          {@link InputEntity} filled with data.\n      * @param deserialization {@link Deserialization}.\n-     * @param header {@link Header} to deserialize from.\n+     * @param header          {@link Header} to deserialize from.\n      * @return data from {@link InputEntity} converted into something else.\n      */\n-    public static <T> T convert( InputEntity entity, Deserialization<T> deserialization, Header header )\n+    public static <T> T convert(InputEntity entity, Deserialization<T> deserialization, Header header)\n     {\n         deserialization.clear();\n-        for ( Header.Entry entry : header.entries() )\n+        for (Header.Entry entry : header.entries())\n         {\n-            switch ( entry.type() )\n+            switch (entry.type())\n             {\n-            case ID:\n-                deserialization.handle( entry, entity.hasLongId ? entity.longId : entity.objectId );\n-                break;\n-            case PROPERTY:\n-                deserialization.handle( entry, property( entity.properties, entry.name() ) );\n-                break;\n-            case LABEL:\n-                deserialization.handle( entry, entity.labels() );\n-                break;\n-            case TYPE:\n-                deserialization.handle( entry, entity.hasIntType ? entity.intType : entity.stringType );\n-                break;\n-            case START_ID:\n-                deserialization.handle( entry, entity.hasLongStartId ? entity.longStartId : entity.objectStartId );\n-                break;\n-            case END_ID:\n-                deserialization.handle( entry, entity.hasLongEndId ? entity.longEndId : entity.objectEndId );\n-                break;\n-            default: // ignore other types\n+                case ID:\n+                    deserialization.handle(entry, entity.hasLongId ? entity.longId : entity.objectId);\n+                    break;\n+                case PROPERTY:\n+                    deserialization.handle(entry, property(entity.properties, entry.name()));\n+                    break;\n+                case LABEL:\n+                    deserialization.handle(entry, entity.labels());\n+                    break;\n+                case TYPE:\n+                    deserialization.handle(entry, entity.hasIntType ? entity.intType : entity.stringType);\n+                    break;\n+                case START_ID:\n+                    deserialization.handle(entry, entity.hasLongStartId ? entity.longStartId : entity.objectStartId);\n+                    break;\n+                case END_ID:\n+                    deserialization.handle(entry, entity.hasLongEndId ? entity.longEndId : entity.objectEndId);\n+                    break;\n+                default: // ignore other types\n             }\n         }\n         return deserialization.materialize();\n     }\n \n-    private static Object property( List<Object> properties, String key )\n+    private static Object property(List<Object> properties, String key)\n     {\n-        for ( int i = 0; i < properties.size(); i += 2 )\n+        for (int i = 0; i < properties.size(); i += 2)\n         {\n-            if ( properties.get( i ).equals( key ) )\n+            if (properties.get(i).equals(key))\n             {\n-                return properties.get( i + 1 );\n+                return properties.get(i + 1);\n             }\n         }\n         return null;\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 269).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1811/RandomEntityDataGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1811/RandomEntityDataGenerator.java\nindex 9067e7b02d2..355e9426110 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1811/RandomEntityDataGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1811/RandomEntityDataGenerator.java\n@@ -39,9 +39,8 @@ import static org.neo4j.internal.batchimport.input.InputEntity.NO_LABELS;\n  */\n public class RandomEntityDataGenerator extends GeneratingInputIterator<RandomValues>\n {\n-    public RandomEntityDataGenerator( long nodeCount, long count, int batchSize, long seed, long startId, Header header,\n-           Distribution<String> labels, Distribution<String> relationshipTypes, float factorBadNodeData, float factorBadRelationshipData, int maxStringLength )\n-    {\n+    public RandomEntityDataGenerator( long nodeCount, long count, int batchSize, long seed, long startId, Header header, Distribution<String> labels, Distribution<String> relationshipTypes, float factorBadNodeData, float factorBadRelationshipData, int maxStringLength )\n+{\n         super( count, batchSize, new RandomsStates( seed ), ( randoms, visitor, id ) -> {\n             for ( Entry entry : header.entries() )\n             {\n@@ -204,4 +203,4 @@ public class RandomEntityDataGenerator extends GeneratingInputIterator<RandomVal\n         }\n         return null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}