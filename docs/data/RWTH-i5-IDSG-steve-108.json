{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "108",
    "information": {
        "errors": [
            {
                "line": "55",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/108/AbstractWebSocketEndpoint.java\nindex 02276333143..9875c597fa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/108/AbstractWebSocketEndpoint.java\n@@ -32,154 +32,158 @@ import java.util.function.Consumer;\n  */\n public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n \n-    @Autowired private ScheduledExecutorService service;\n-    @Autowired private OcppServerRepository ocppServerRepository;\n-    @Autowired private FutureResponseContextStore futureResponseContextStore;\n-    @Autowired private NotificationService notificationService;\n+  @Autowired\n+  private ScheduledExecutorService service;\n+  @Autowired\n+  private OcppServerRepository ocppServerRepository;\n+  @Autowired\n+  private FutureResponseContextStore futureResponseContextStore;\n+  @Autowired\n+  private NotificationService notificationService;\n \n-    public static final String CHARGEBOX_ID_KEY = \"CHARGEBOX_ID_KEY\";\n+  public static final String CHARGEBOX_ID_KEY = \"CHARGEBOX_ID_KEY\";\n \n-    private final SessionContextStoreImpl sessionContextStore = new SessionContextStoreImpl();\n-    private final List<Consumer<String>> connectedCallbackList = new ArrayList<>();\n-    private final List<Consumer<String>> disconnectedCallbackList = new ArrayList<>();\n-    private final Object sessionContextLock = new Object();\n+  private final SessionContextStoreImpl sessionContextStore = new SessionContextStoreImpl();\n+  private final List<Consumer<String>> connectedCallbackList = new ArrayList<>();\n+  private final List<Consumer<String>> disconnectedCallbackList = new ArrayList<>();\n+  private final Object sessionContextLock = new Object();\n \n-    private IncomingPipeline pipeline;\n+  private IncomingPipeline pipeline;\n \n-    public abstract OcppVersion getVersion();\n+  public abstract OcppVersion getVersion();\n \n-    public void init(IncomingPipeline pipeline) {\n-        this.pipeline = pipeline;\n+  public void init(IncomingPipeline pipeline) {\n+    this.pipeline = pipeline;\n \n-        connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n-        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n-    }\n+    connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n+    disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n+  }\n \n-    @Override\n-    public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {\n-        if (message instanceof TextMessage) {\n-            handleTextMessage(session, (TextMessage) message);\n+  @Override\n+  public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {\n+    if (message instanceof TextMessage) {\n+      handleTextMessage(session, (TextMessage) message);\n \n-        } else if (message instanceof PongMessage) {\n-            handlePongMessage(session);\n+    } else if (message instanceof PongMessage) {\n+      handlePongMessage(session);\n \n-        } else if (message instanceof BinaryMessage) {\n-            session.close(CloseStatus.NOT_ACCEPTABLE.withReason(\"Binary messages not supported\"));\n+    } else if (message instanceof BinaryMessage) {\n+      session.close(CloseStatus.NOT_ACCEPTABLE.withReason(\"Binary messages not supported\"));\n \n-        } else {\n-            throw new IllegalStateException(\"Unexpected WebSocket message type: \" + message);\n-        }\n+    } else {\n+      throw new IllegalStateException(\"Unexpected WebSocket message type: \" + message);\n     }\n+  }\n \n-    private void handleTextMessage(WebSocketSession session, TextMessage webSocketMessage) throws Exception {\n-        String incomingString = webSocketMessage.getPayload();\n-        String chargeBoxId = getChargeBoxId(session);\n-\n-        WebSocketLogger.receivedText(chargeBoxId, session, incomingString);\n+  private void handleTextMessage(WebSocketSession session, TextMessage webSocketMessage) throws Exception {\n+    String incomingString = webSocketMessage.getPayload();\n+    String chargeBoxId = getChargeBoxId(session);\n \n-        CommunicationContext context = new CommunicationContext(session, chargeBoxId);\n-        context.setIncomingString(incomingString);\n+    WebSocketLogger.receivedText(chargeBoxId, session, incomingString);\n \n-        pipeline.accept(context);\n-    }\n+    CommunicationContext context = new CommunicationContext(session, chargeBoxId);\n+    context.setIncomingString(incomingString);\n \n-    private void handlePongMessage(WebSocketSession session) {\n-        WebSocketLogger.receivedPong(getChargeBoxId(session), session);\n-        ocppServerRepository.updateChargeboxHeartbeat(getChargeBoxId(session), DateTime.now());\n-    }\n+    pipeline.accept(context);\n+  }\n \n-    @Override\n-    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n-        String chargeBoxId = getChargeBoxId(session);\n+  private void handlePongMessage(WebSocketSession session) {\n+    WebSocketLogger.receivedPong(getChargeBoxId(session), session);\n+    ocppServerRepository.updateChargeboxHeartbeat(getChargeBoxId(session), DateTime.now());\n+  }\n \n-        WebSocketLogger.connected(chargeBoxId, session);\n+  @Override\n+  public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n+    String chargeBoxId = getChargeBoxId(session);\n \n-        // Just to keep the connection alive, such that the servers do not close\n-        // the connection because of a idle timeout, we ping-pong at fixed intervals.\n-        ScheduledFuture pingSchedule = service.scheduleAtFixedRate(\n-                new PingTask(chargeBoxId, session),\n-                WebSocketConfiguration.PING_INTERVAL,\n-                WebSocketConfiguration.PING_INTERVAL,\n-                TimeUnit.MINUTES);\n+    WebSocketLogger.connected(chargeBoxId, session);\n \n-        futureResponseContextStore.addSession(session);\n+    // Just to keep the connection alive, such that the servers do not close\n+    // the connection because of a idle timeout, we ping-pong at fixed intervals.\n+    ScheduledFuture pingSchedule = service.scheduleAtFixedRate(\n+      new PingTask(chargeBoxId, session),\n+      WebSocketConfiguration.PING_INTERVAL,\n+      WebSocketConfiguration.PING_INTERVAL,\n+      TimeUnit.MINUTES);\n \n-        int sizeBeforeAdd;\n+    futureResponseContextStore.addSession(session);\n \n-        synchronized (sessionContextLock) {\n-            sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n-            sessionContextStore.add(chargeBoxId, session, pingSchedule);\n-        }\n+    int sizeBeforeAdd;\n \n-        // Take into account that there might be multiple connections to a charging station.\n-        // Send notification only for the change 0 -> 1.\n-        if (sizeBeforeAdd == 0) {\n-            connectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n-        }\n+    synchronized (sessionContextLock) {\n+      sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n+      sessionContextStore.add(chargeBoxId, session, pingSchedule);\n     }\n \n-    @Override\n-    public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {\n-        String chargeBoxId = getChargeBoxId(session);\n+    // Take into account that there might be multiple connections to a charging station.\n+    // Send notification only for the change 0 -> 1.\n+    if (sizeBeforeAdd == 0) {\n+      connectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n+    }\n+  }\n \n-        WebSocketLogger.closed(chargeBoxId, session, closeStatus);\n+  @Override\n+  public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {\n+    String chargeBoxId = getChargeBoxId(session);\n \n-        futureResponseContextStore.removeSession(session);\n+    WebSocketLogger.closed(chargeBoxId, session, closeStatus);\n \n-        int sizeAfterRemove;\n+    futureResponseContextStore.removeSession(session);\n \n-        synchronized (sessionContextLock) {\n-            sessionContextStore.remove(chargeBoxId, session);\n-            sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n-        }\n+    int sizeAfterRemove;\n \n-        // Take into account that there might be multiple connections to a charging station.\n-        // Send notification only for the change 1 -> 0.\n-        if (sizeAfterRemove == 0) {\n-            disconnectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n-        }\n+    synchronized (sessionContextLock) {\n+      sessionContextStore.remove(chargeBoxId, session);\n+      sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n     }\n \n-    @Override\n-    public void handleTransportError(WebSocketSession session, Throwable throwable) throws Exception {\n-        WebSocketLogger.transportError(getChargeBoxId(session), session, throwable);\n+    // Take into account that there might be multiple connections to a charging station.\n+    // Send notification only for the change 1 -> 0.\n+    if (sizeAfterRemove == 0) {\n+      disconnectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n     }\n+  }\n \n-    @Override\n-    public boolean supportsPartialMessages() {\n-        return false;\n-    }\n+  @Override\n+  public void handleTransportError(WebSocketSession session, Throwable throwable) throws Exception {\n+    WebSocketLogger.transportError(getChargeBoxId(session), session, throwable);\n+  }\n \n-    // -------------------------------------------------------------------------\n-    // Helpers\n-    // -------------------------------------------------------------------------\n+  @Override\n+  public boolean supportsPartialMessages() {\n+    return false;\n+  }\n \n-    protected String getChargeBoxId(WebSocketSession session) {\n-        return (String) session.getAttributes().get(CHARGEBOX_ID_KEY);\n-    }\n+  // -------------------------------------------------------------------------\n+  // Helpers\n+  // -------------------------------------------------------------------------\n \n-    protected void registerConnectedCallback(Consumer<String> consumer) {\n-        connectedCallbackList.add(consumer);\n-    }\n+  protected String getChargeBoxId(WebSocketSession session) {\n+    return (String) session.getAttributes().get(CHARGEBOX_ID_KEY);\n+  }\n \n-    protected void registerDisconnectedCallback(Consumer<String> consumer) {\n-        disconnectedCallbackList.add(consumer);\n-    }\n+  protected void registerConnectedCallback(Consumer<String> consumer) {\n+    connectedCallbackList.add(consumer);\n+  }\n \n-    public List<String> getChargeBoxIdList() {\n-        return sessionContextStore.getChargeBoxIdList();\n-    }\n+  protected void registerDisconnectedCallback(Consumer<String> consumer) {\n+    disconnectedCallbackList.add(consumer);\n+  }\n \n-    public int getNumberOfChargeBoxes() {\n-        return sessionContextStore.getNumberOfChargeBoxes();\n-    }\n+  public List<String> getChargeBoxIdList() {\n+    return sessionContextStore.getChargeBoxIdList();\n+  }\n \n-    public Map<String, Deque<SessionContext>> getACopy() {\n-        return sessionContextStore.getACopy();\n-    }\n+  public int getNumberOfChargeBoxes() {\n+    return sessionContextStore.getNumberOfChargeBoxes();\n+  }\n \n-    public WebSocketSession getSession(String chargeBoxId) {\n-        return sessionContextStore.getSession(chargeBoxId);\n-    }\n+  public Map<String, Deque<SessionContext>> getACopy() {\n+    return sessionContextStore.getACopy();\n+  }\n+\n+  public WebSocketSession getSession(String chargeBoxId) {\n+    return sessionContextStore.getSession(chargeBoxId);\n+  }\n \n }\n",
            "diff_size": 134
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/108/AbstractWebSocketEndpoint.java\nindex 02276333143..ac68b0b0c0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/108/AbstractWebSocketEndpoint.java\n@@ -105,8 +105,7 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         futureResponseContextStore.addSession(session);\n \n         int sizeBeforeAdd;\n-\n-        synchronized (sessionContextLock) {\n+synchronized (sessionContextLock) {\n             sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n             sessionContextStore.add(chargeBoxId, session, pingSchedule);\n         }\n@@ -127,8 +126,7 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         futureResponseContextStore.removeSession(session);\n \n         int sizeAfterRemove;\n-\n-        synchronized (sessionContextLock) {\n+synchronized (sessionContextLock) {\n             sessionContextStore.remove(chargeBoxId, session);\n             sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n         }\n@@ -182,4 +180,4 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         return sessionContextStore.getSession(chargeBoxId);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/108/AbstractWebSocketEndpoint.java\nindex 02276333143..904b087a415 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/108/AbstractWebSocketEndpoint.java\n@@ -16,7 +16,6 @@ import org.springframework.web.socket.TextMessage;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.WebSocketMessage;\n import org.springframework.web.socket.WebSocketSession;\n-\n import java.util.ArrayList;\n import java.util.Deque;\n import java.util.List;\n@@ -30,6 +29,8 @@ import java.util.function.Consumer;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 17.03.2015\n  */\n+\n+\n public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n \n     @Autowired private ScheduledExecutorService service;\n@@ -38,19 +39,16 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     @Autowired private NotificationService notificationService;\n \n     public static final String CHARGEBOX_ID_KEY = \"CHARGEBOX_ID_KEY\";\n-\n     private final SessionContextStoreImpl sessionContextStore = new SessionContextStoreImpl();\n     private final List<Consumer<String>> connectedCallbackList = new ArrayList<>();\n     private final List<Consumer<String>> disconnectedCallbackList = new ArrayList<>();\n     private final Object sessionContextLock = new Object();\n-\n     private IncomingPipeline pipeline;\n \n     public abstract OcppVersion getVersion();\n \n     public void init(IncomingPipeline pipeline) {\n         this.pipeline = pipeline;\n-\n         connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n         disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n     }\n@@ -59,14 +57,11 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {\n         if (message instanceof TextMessage) {\n             handleTextMessage(session, (TextMessage) message);\n-\n         } else if (message instanceof PongMessage) {\n             handlePongMessage(session);\n-\n         } else if (message instanceof BinaryMessage) {\n-            session.close(CloseStatus.NOT_ACCEPTABLE.withReason(\"Binary messages not supported\"));\n-\n-        } else {\n+                   session.close(CloseStatus.NOT_ACCEPTABLE.withReason(\"Binary messages not supported\"));\n+               } else {\n             throw new IllegalStateException(\"Unexpected WebSocket message type: \" + message);\n         }\n     }\n@@ -74,12 +69,10 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     private void handleTextMessage(WebSocketSession session, TextMessage webSocketMessage) throws Exception {\n         String incomingString = webSocketMessage.getPayload();\n         String chargeBoxId = getChargeBoxId(session);\n-\n         WebSocketLogger.receivedText(chargeBoxId, session, incomingString);\n \n         CommunicationContext context = new CommunicationContext(session, chargeBoxId);\n         context.setIncomingString(incomingString);\n-\n         pipeline.accept(context);\n     }\n \n@@ -91,28 +84,26 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     @Override\n     public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n         String chargeBoxId = getChargeBoxId(session);\n-\n         WebSocketLogger.connected(chargeBoxId, session);\n \n         // Just to keep the connection alive, such that the servers do not close\n         // the connection because of a idle timeout, we ping-pong at fixed intervals.\n-        ScheduledFuture pingSchedule = service.scheduleAtFixedRate(\n-                new PingTask(chargeBoxId, session),\n-                WebSocketConfiguration.PING_INTERVAL,\n-                WebSocketConfiguration.PING_INTERVAL,\n-                TimeUnit.MINUTES);\n \n+        ScheduledFuture pingSchedule = service.scheduleAtFixedRate(new PingTask(chargeBoxId, session),\n+                                                                   WebSocketConfiguration.PING_INTERVAL,\n+                                                                   WebSocketConfiguration.PING_INTERVAL,\n+                                                                   TimeUnit.MINUTES);\n         futureResponseContextStore.addSession(session);\n \n         int sizeBeforeAdd;\n-\n         synchronized (sessionContextLock) {\n-            sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n-            sessionContextStore.add(chargeBoxId, session, pingSchedule);\n+                                          sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n+                                          sessionContextStore.add(chargeBoxId, session, pingSchedule);\n         }\n \n         // Take into account that there might be multiple connections to a charging station.\n         // Send notification only for the change 0 -> 1.\n+\n         if (sizeBeforeAdd == 0) {\n             connectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n         }\n@@ -121,20 +112,18 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     @Override\n     public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {\n         String chargeBoxId = getChargeBoxId(session);\n-\n         WebSocketLogger.closed(chargeBoxId, session, closeStatus);\n-\n         futureResponseContextStore.removeSession(session);\n \n         int sizeAfterRemove;\n-\n         synchronized (sessionContextLock) {\n-            sessionContextStore.remove(chargeBoxId, session);\n-            sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n+                                          sessionContextStore.remove(chargeBoxId, session);\n+                                          sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n         }\n \n         // Take into account that there might be multiple connections to a charging station.\n         // Send notification only for the change 1 -> 0.\n+\n         if (sizeAfterRemove == 0) {\n             disconnectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n         }\n@@ -155,7 +144,8 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     // -------------------------------------------------------------------------\n \n     protected String getChargeBoxId(WebSocketSession session) {\n-        return (String) session.getAttributes().get(CHARGEBOX_ID_KEY);\n+        return (String) session.getAttributes()\n+            .get(CHARGEBOX_ID_KEY);\n     }\n \n     protected void registerConnectedCallback(Consumer<String> consumer) {\n@@ -181,5 +171,4 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     public WebSocketSession getSession(String chargeBoxId) {\n         return sessionContextStore.getSession(chargeBoxId);\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "52",
                    "severity": "error",
                    "message": "'->' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "55",
                    "column": "52",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "56",
                    "column": "11",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "56",
                    "column": "12",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/108/AbstractWebSocketEndpoint.java\nindex 02276333143..7c8e645619a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/108/AbstractWebSocketEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/108/AbstractWebSocketEndpoint.java\n@@ -52,10 +52,8 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         this.pipeline = pipeline;\n \n         connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n-        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n-    }\n-\n-    @Override\n+        disconnectedCallbackList.add((chargeBoxId )->notificationService.ocppStationWebSocketDisconnected(chargeBoxId\n+        ));} @Override\n     public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {\n         if (message instanceof TextMessage) {\n             handleTextMessage(session, (TextMessage) message);\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}