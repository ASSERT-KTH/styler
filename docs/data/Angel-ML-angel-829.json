{
    "project_name": "Angel-ML-angel",
    "error_id": "829",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/829/LongKeySparseDoubleRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/829/LongKeySparseDoubleRowUpdateSplit.java\nindex 31460410ed6..d799b159e49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/829/LongKeySparseDoubleRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/829/LongKeySparseDoubleRowUpdateSplit.java\n@@ -40,11 +40,11 @@ public class LongKeySparseDoubleRowUpdateSplit extends RowUpdateSplit {\n    * Create a new RowUpdateSplit.\r\n    *\r\n    * @param rowIndex row index\r\n-   * @param start split start position\r\n-   * @param end split end position\r\n+   * @param start    split start position\r\n+   * @param end      split end position\r\n    */\r\n   public LongKeySparseDoubleRowUpdateSplit(int rowIndex, int start, int end, long[] offsets,\r\n-      double[] values) {\r\n+                                           double[] values) {\r\n     super(rowIndex, RowType.T_DOUBLE_SPARSE_LONGKEY, start, end);\r\n     this.offsets = offsets;\r\n     this.values = values;\r\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/829/LongKeySparseDoubleRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/829/LongKeySparseDoubleRowUpdateSplit.java\nindex 31460410ed6..d38c733b596 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/829/LongKeySparseDoubleRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/829/LongKeySparseDoubleRowUpdateSplit.java\n@@ -16,24 +16,25 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.psagent.matrix.oplog.cache;\r\n-\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntDoubleVector;\r\n-import com.tencent.angel.ml.math2.vector.LongDoubleVector;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n-import io.netty.buffer.ByteBuf;\r\n-\r\n+package com.tencent.angel.psagent.matrix.oplog.cache;\n+\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntDoubleVector;\n+import com.tencent.angel.ml.math2.vector.LongDoubleVector;\n+import com.tencent.angel.ml.matrix.RowType;\n+import io.netty.buffer.ByteBuf;\n+\n public class LongKeySparseDoubleRowUpdateSplit extends RowUpdateSplit {\r\n \r\n   /**\r\n    * indexes\r\n-   */\r\n+   */\n+\n   private final long[] offsets;\r\n \r\n   /**\r\n    * values of row\r\n-   */\r\n+   */\n   private final double[] values;\r\n \r\n   /**\r\n@@ -42,16 +43,16 @@ public class LongKeySparseDoubleRowUpdateSplit extends RowUpdateSplit {\n    * @param rowIndex row index\r\n    * @param start split start position\r\n    * @param end split end position\r\n-   */\r\n-  public LongKeySparseDoubleRowUpdateSplit(int rowIndex, int start, int end, long[] offsets,\r\n-      double[] values) {\r\n-    super(rowIndex, RowType.T_DOUBLE_SPARSE_LONGKEY, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n-\r\n-  public LongKeySparseDoubleRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n+   */\n+\n+  public LongKeySparseDoubleRowUpdateSplit(int rowIndex, int start, int end, long[] offsets, double[] values) {\n+    super(rowIndex, RowType.T_DOUBLE_SPARSE_LONGKEY, start, end);\n+    this.offsets = offsets;\n+    this.values = values;\n+  }\n+\n+  public LongKeySparseDoubleRowUpdateSplit() {\n+    this(-1, -1, -1, null, null);\n   }\r\n \r\n \r\n@@ -59,130 +60,132 @@ public class LongKeySparseDoubleRowUpdateSplit extends RowUpdateSplit {\n    * Get indexes of row values\r\n    *\r\n    * @return int[] indexes of row values\r\n-   */\r\n-  public long[] getOffsets() {\r\n-    return offsets;\r\n+   */\n+\n+  public long[] getOffsets() {\n+    return offsets;\n   }\r\n \r\n   /**\r\n    * Get row values\r\n    *\r\n    * @return double[] row values\r\n-   */\r\n-  public double[] getValues() {\r\n-    return values;\r\n-  }\r\n-\r\n-  @Override\r\n-  public boolean isUseIntKey() {\r\n-    return rowType == RowType.T_DOUBLE_SPARSE;\r\n-  }\r\n-\r\n-  @Override\r\n-  public void setUseIntKey(boolean useIntKey) {\r\n-    if (useIntKey) {\r\n-      setRowType(RowType.T_DOUBLE_SPARSE);\r\n-    } else {\r\n-      setRowType(RowType.T_DOUBLE_SPARSE_LONGKEY);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n+   */\n+\n+  public double[] getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public boolean isUseIntKey() {\n+    return rowType == RowType.T_DOUBLE_SPARSE;\n+  }\n+\n+  @Override\n+  public void setUseIntKey(boolean useIntKey) {\n+    if (useIntKey) {\n+      setRowType(RowType.T_DOUBLE_SPARSE);\n+    } else {\n+      setRowType(RowType.T_DOUBLE_SPARSE_LONGKEY);\n+    }\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf buf) {\n+    super.serialize(buf);\n+\n     long startCol = splitContext.getPartKey().getStartCol();\r\n-    //buf.writeDouble(0.0);\r\n-\r\n-    if (isUseIntKey()) {\r\n-      if (splitContext.isEnableFilter()) {\r\n-        double filterValue = splitContext.getFilterThreshold();\r\n-        int position = buf.writerIndex();\r\n-        buf.writeInt(0);\r\n-        int needUpdateItemNum = 0;\r\n-        for (int i = start; i < end; i++) {\r\n-          if (Math.abs(values[i]) > filterValue) {\r\n-            buf.writeInt((int) (offsets[i] - startCol));\r\n-            buf.writeDouble(values[i]);\r\n-            needUpdateItemNum++;\r\n-          }\r\n-        }\r\n-        buf.setInt(position, needUpdateItemNum);\r\n-      } else {\r\n-        buf.writeInt(end - start);\r\n-        for (int i = start; i < end; i++) {\r\n-          buf.writeInt((int) (offsets[i] - startCol));\r\n-          buf.writeDouble(values[i]);\r\n-        }\r\n-      }\r\n-    } else {\r\n-      if (splitContext.isEnableFilter()) {\r\n-        double filterValue = splitContext.getFilterThreshold();\r\n-        int position = buf.writerIndex();\r\n-        buf.writeInt(0);\r\n-        int needUpdateItemNum = 0;\r\n-        for (int i = start; i < end; i++) {\r\n-          if (Math.abs(values[i]) > filterValue) {\r\n-            buf.writeLong(offsets[i] - startCol);\r\n-            buf.writeDouble(values[i]);\r\n-            needUpdateItemNum++;\r\n-          }\r\n-        }\r\n-        buf.setInt(position, needUpdateItemNum);\r\n-      } else {\r\n-        buf.writeInt(end - start);\r\n-        for (int i = start; i < end; i++) {\r\n-          buf.writeLong(offsets[i] - startCol);\r\n-          buf.writeDouble(values[i]);\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    if (isUseIntKey()) {\r\n-      vector = VFactory.sparseDoubleVector(\r\n-          (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-          size);\r\n-      for (int i = 0; i < size; i++) {\r\n-        ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n-      }\r\n-    } else {\r\n-      vector = VFactory.sparseLongKeyDoubleVector(\r\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\r\n-      for (int i = 0; i < size; i++) {\r\n-        ((LongDoubleVector) vector).set(buf.readLong(), buf.readDouble());\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    double filterValue = splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n-    }\r\n-    return needUpdateItemNum;\r\n-  }\r\n-\r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (isUseIntKey()) {\r\n-      if (splitContext.isEnableFilter()) {\r\n-        return 12 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n-      } else {\r\n-        return 12 + super.bufferLen() + (end - start) * 12;\r\n-      }\r\n-    } else {\r\n-      if (splitContext.isEnableFilter()) {\r\n-        return 12 + super.bufferLen() + getNeedUpdateItemNum() * 16;\r\n-      } else {\r\n-        return 12 + super.bufferLen() + (end - start) * 16;\r\n-      }\r\n-    }\r\n-  }\r\n-}\r\n+    //buf.writeDouble(0.0);\n+    if (isUseIntKey()) {\n+      if (splitContext.isEnableFilter()) {\n+        double filterValue = splitContext.getFilterThreshold();\n+        int position = buf.writerIndex();\n+        buf.writeInt(0);\n+\n+        int needUpdateItemNum = 0;\n+        for (int i = start; i < end; i++) {\n+          if (Math.abs(values[i]) > filterValue) {\n+            buf.writeInt((int) (offsets[i] - startCol));\n+            buf.writeDouble(values[i]);\n+            needUpdateItemNum++;\n+          }\n+        }\n+        buf.setInt(position, needUpdateItemNum);\n+      } else {\n+        buf.writeInt(end - start);\n+        for (int i = start; i < end; i++) {\n+          buf.writeInt((int) (offsets[i] - startCol));\n+          buf.writeDouble(values[i]);\n+        }\n+      }\n+    } else {\n+      if (splitContext.isEnableFilter()) {\n+        double filterValue = splitContext.getFilterThreshold();\n+        int position = buf.writerIndex();\n+        buf.writeInt(0);\n+\n+        int needUpdateItemNum = 0;\n+        for (int i = start; i < end; i++) {\n+          if (Math.abs(values[i]) > filterValue) {\n+            buf.writeLong(offsets[i] - startCol);\n+            buf.writeDouble(values[i]);\n+            needUpdateItemNum++;\n+          }\n+        }\n+        buf.setInt(position, needUpdateItemNum);\n+      } else {\n+        buf.writeInt(end - start);\n+        for (int i = start; i < end; i++) {\n+          buf.writeLong(offsets[i] - startCol);\n+          buf.writeDouble(values[i]);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+\n+    int size = buf.readInt();\n+    if (isUseIntKey()) {\n+      vector = VFactory.sparseDoubleVector((int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()), size);\n+      for (int i = 0; i < size; i++) {\n+        ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\n+      }\n+    } else {\n+      vector = VFactory.sparseLongKeyDoubleVector(splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\n+      for (int i = 0; i < size; i++) {\n+        ((LongDoubleVector) vector).set(buf.readLong(), buf.readDouble());\n+      }\n+    }\n+  }\n+\n+  private int getNeedUpdateItemNum() {\n+    int needUpdateItemNum = 0;\n+    double filterValue = splitContext.getFilterThreshold();\n+    for (int i = start; i < end; i++) {\n+      if (Math.abs(values[i]) > filterValue) {\n+        needUpdateItemNum++;\n+      }\n+    }\n+    return needUpdateItemNum;\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    if (isUseIntKey()) {\n+      if (splitContext.isEnableFilter()) {\n+        return 12 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n+      } else {\n+        return 12 + super.bufferLen() + (end - start) * 12;\n+      }\n+    } else {\n+      if (splitContext.isEnableFilter()) {\n+        return 12 + super.bufferLen() + getNeedUpdateItemNum() * 16;\n+      } else {\n+        return 12 + super.bufferLen() + (end - start) * 16;\n+      }\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 144
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}