{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4398",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4398/Topology.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4398/Topology.java\nindex eb02db39896..71179339302 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4398/Topology.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4398/Topology.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.discovery;\n \n import java.util.Map;\n@@ -30,32 +31,32 @@ import static java.util.stream.Collectors.toSet;\n \n public interface Topology<T extends DiscoveryServerInfo>\n {\n-    Map<MemberId, T> members();\n+  Map<MemberId, T> members();\n \n-    default TopologyDifference difference( Topology<T> other )\n-    {\n-        Set<MemberId> members = members().keySet();\n-        Set<MemberId> otherMembers = other.members().keySet();\n+  default TopologyDifference difference(Topology<T> other)\n+  {\n+    Set<MemberId> members = members().keySet();\n+    Set<MemberId> otherMembers = other.members().keySet();\n \n-        Set<Difference> added = otherMembers.stream().filter( m -> !members.contains( m ) )\n-                .map( memberId -> Difference.asDifference( other, memberId ) ).collect( toSet() );\n+    Set<Difference> added = otherMembers.stream().filter(m -> !members.contains(m))\n+        .map(memberId -> Difference.asDifference(other, memberId)).collect(toSet());\n \n-        Set<Difference> removed = members.stream().filter( m -> !otherMembers.contains( m ) )\n-                .map( memberId -> Difference.asDifference( this, memberId ) ).collect( toSet() );\n+    Set<Difference> removed = members.stream().filter(m -> !otherMembers.contains(m))\n+        .map(memberId -> Difference.asDifference(this, memberId)).collect(toSet());\n \n-        return new TopologyDifference( added, removed );\n-    }\n+    return new TopologyDifference(added, removed);\n+  }\n \n-    default Optional<T> find( MemberId memberId )\n-    {\n-        return Optional.ofNullable( members().get( memberId ) );\n-    }\n+  default Optional<T> find(MemberId memberId)\n+  {\n+    return Optional.ofNullable(members().get(memberId));\n+  }\n \n-    default Map<MemberId, T> filterHostsByDb( Map<MemberId, T> s, String dbName )\n-    {\n-        return s.entrySet().stream().filter(e -> e.getValue().getDatabaseName().equals( dbName ) )\n-                .collect( Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue ) );\n-    }\n+  default Map<MemberId, T> filterHostsByDb(Map<MemberId, T> s, String dbName)\n+  {\n+    return s.entrySet().stream().filter(e -> e.getValue().getDatabaseName().equals(dbName))\n+        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+  }\n \n-    Topology<T> filterTopologyByDb( String dbName );\n+  Topology<T> filterTopologyByDb(String dbName);\n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4398/Topology.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4398/Topology.java\nindex eb02db39896..c86c6a533db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4398/Topology.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4398/Topology.java\n@@ -30,20 +30,15 @@ import static java.util.stream.Collectors.toSet;\n \n public interface Topology<T extends DiscoveryServerInfo>\n {\n-    Map<MemberId, T> members();\n-\n+    Map<MemberId,T> members();\n     default TopologyDifference difference( Topology<T> other )\n     {\n         Set<MemberId> members = members().keySet();\n         Set<MemberId> otherMembers = other.members().keySet();\n \n-        Set<Difference> added = otherMembers.stream().filter( m -> !members.contains( m ) )\n-                .map( memberId -> Difference.asDifference( other, memberId ) ).collect( toSet() );\n-\n-        Set<Difference> removed = members.stream().filter( m -> !otherMembers.contains( m ) )\n-                .map( memberId -> Difference.asDifference( this, memberId ) ).collect( toSet() );\n-\n-        return new TopologyDifference( added, removed );\n+        Set<Difference> added = otherMembers.stream().filter( m -> !members.contains( m ) ).map( memberId -> Difference.asDifference( other, memberId ) ).collect( toSet() );\n+Set<Difference> removed = members.stream().filter( m -> !otherMembers.contains( m ) ).map( memberId -> Difference.asDifference( this, memberId ) ).collect( toSet() );\n+return new TopologyDifference( added, removed );\n     }\n \n     default Optional<T> find( MemberId memberId )\n@@ -51,11 +46,10 @@ public interface Topology<T extends DiscoveryServerInfo>\n         return Optional.ofNullable( members().get( memberId ) );\n     }\n \n-    default Map<MemberId, T> filterHostsByDb( Map<MemberId, T> s, String dbName )\n+    default Map<MemberId,T> filterHostsByDb( Map<MemberId,T> s, String dbName )\n     {\n-        return s.entrySet().stream().filter(e -> e.getValue().getDatabaseName().equals( dbName ) )\n-                .collect( Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue ) );\n+        return s.entrySet().stream().filter( e -> e.getValue().getDatabaseName().equals( dbName ) ).collect( Collectors.toMap( Map.Entry::getKey, Map.Entry::getValue ) );\n     }\n \n     Topology<T> filterTopologyByDb( String dbName );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}