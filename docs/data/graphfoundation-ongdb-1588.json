{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1588",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "256",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1588/EnterpriseSecurityModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1588/EnterpriseSecurityModule.java\nindex 51ccc6d3795..e56660b1f5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1588/EnterpriseSecurityModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1588/EnterpriseSecurityModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.enterprise.auth;\n \n import com.github.benmanes.caffeine.cache.Ticker;\n@@ -65,390 +66,387 @@ import org.neo4j.time.Clocks;\n import static java.lang.String.format;\n import static org.neo4j.kernel.api.proc.Context.SECURITY_CONTEXT;\n \n-@Service.Implementation( SecurityModule.class )\n+@Service.Implementation(SecurityModule.class)\n public class EnterpriseSecurityModule extends SecurityModule\n {\n-    private static final String ROLE_STORE_FILENAME = \"roles\";\n-    private static final String DEFAULT_ADMIN_STORE_FILENAME = SetDefaultAdminCommand.ADMIN_INI;\n-\n-    public EnterpriseSecurityModule()\n+  private static final String ROLE_STORE_FILENAME = \"roles\";\n+  private static final String DEFAULT_ADMIN_STORE_FILENAME = SetDefaultAdminCommand.ADMIN_INI;\n+\n+  public EnterpriseSecurityModule()\n+  {\n+    super(EnterpriseEditionSettings.ENTERPRISE_SECURITY_MODULE_ID);\n+  }\n+\n+  @Override\n+  public void setup(Dependencies dependencies) throws KernelException\n+  {\n+    Config config = dependencies.config();\n+    Procedures procedures = dependencies.procedures();\n+    LogProvider logProvider = dependencies.logService().getUserLogProvider();\n+    JobScheduler jobScheduler = dependencies.scheduler();\n+    FileSystemAbstraction fileSystem = dependencies.fileSystem();\n+    LifeSupport life = dependencies.lifeSupport();\n+\n+    SecurityLog securityLog = SecurityLog.create(\n+        config,\n+        dependencies.logService().getInternalLog(GraphDatabaseFacade.class),\n+        fileSystem,\n+        jobScheduler\n+    );\n+    life.add(securityLog);\n+\n+    EnterpriseAuthAndUserManager authManager = newAuthManager(config, logProvider, securityLog, fileSystem, jobScheduler);\n+    life.add(dependencies.dependencySatisfier().satisfyDependency(authManager));\n+\n+    // Register procedures\n+    procedures.registerComponent(SecurityLog.class, ctx -> securityLog, false);\n+    procedures.registerComponent(EnterpriseAuthManager.class, ctx -> authManager, false);\n+    procedures.registerComponent(EnterpriseSecurityContext.class,\n+        ctx -> asEnterprise(ctx.get(SECURITY_CONTEXT)), true);\n+\n+    if (config.get(SecuritySettings.native_authentication_enabled)\n+        || config.get(SecuritySettings.native_authorization_enabled))\n     {\n-        super( EnterpriseEditionSettings.ENTERPRISE_SECURITY_MODULE_ID );\n-    }\n-\n-    @Override\n-    public void setup( Dependencies dependencies ) throws KernelException\n+      procedures.registerComponent(EnterpriseUserManager.class,\n+          ctx -> authManager.getUserManager(ctx.get(SECURITY_CONTEXT).subject(), ctx.get(SECURITY_CONTEXT).isAdmin()), true);\n+      if (config.get(SecuritySettings.auth_providers).size() > 1)\n+      {\n+        procedures.registerProcedure(UserManagementProcedures.class, true, \"%s only applies to native users.\");\n+      } else\n+      {\n+        procedures.registerProcedure(UserManagementProcedures.class, true);\n+      }\n+    } else\n     {\n-        Config config = dependencies.config();\n-        Procedures procedures = dependencies.procedures();\n-        LogProvider logProvider = dependencies.logService().getUserLogProvider();\n-        JobScheduler jobScheduler = dependencies.scheduler();\n-        FileSystemAbstraction fileSystem = dependencies.fileSystem();\n-        LifeSupport life = dependencies.lifeSupport();\n-\n-        SecurityLog securityLog = SecurityLog.create(\n-                config,\n-                dependencies.logService().getInternalLog( GraphDatabaseFacade.class ),\n-                fileSystem,\n-                jobScheduler\n-            );\n-        life.add( securityLog );\n-\n-        EnterpriseAuthAndUserManager authManager = newAuthManager( config, logProvider, securityLog, fileSystem, jobScheduler );\n-        life.add( dependencies.dependencySatisfier().satisfyDependency( authManager ) );\n-\n-        // Register procedures\n-        procedures.registerComponent( SecurityLog.class, ctx -> securityLog, false );\n-        procedures.registerComponent( EnterpriseAuthManager.class, ctx -> authManager, false );\n-        procedures.registerComponent( EnterpriseSecurityContext.class,\n-                ctx -> asEnterprise( ctx.get( SECURITY_CONTEXT ) ), true );\n-\n-        if ( config.get( SecuritySettings.native_authentication_enabled )\n-             || config.get( SecuritySettings.native_authorization_enabled ) )\n-        {\n-            procedures.registerComponent( EnterpriseUserManager.class,\n-                    ctx -> authManager.getUserManager( ctx.get( SECURITY_CONTEXT ).subject(), ctx.get( SECURITY_CONTEXT ).isAdmin() ), true );\n-            if ( config.get( SecuritySettings.auth_providers ).size() > 1 )\n-            {\n-                procedures.registerProcedure( UserManagementProcedures.class, true, \"%s only applies to native users.\"  );\n-            }\n-            else\n-            {\n-                procedures.registerProcedure( UserManagementProcedures.class, true );\n-            }\n-        }\n-        else\n-        {\n-            procedures.registerComponent( EnterpriseUserManager.class, ctx -> EnterpriseUserManager.NOOP, true );\n-        }\n-\n-        procedures.registerProcedure( SecurityProcedures.class, true );\n+      procedures.registerComponent(EnterpriseUserManager.class, ctx -> EnterpriseUserManager.NOOP, true);\n     }\n \n-    private EnterpriseSecurityContext asEnterprise( SecurityContext securityContext )\n-    {\n-        if ( securityContext instanceof EnterpriseSecurityContext )\n-        {\n-            return (EnterpriseSecurityContext) securityContext;\n-        }\n-        // TODO: better handling of this possible cast failure\n-        throw new RuntimeException( \"Expected EnterpriseSecurityContext, got \" + securityContext.getClass().getName() );\n-    }\n+    procedures.registerProcedure(SecurityProcedures.class, true);\n+  }\n \n-    public EnterpriseAuthAndUserManager newAuthManager( Config config, LogProvider logProvider, SecurityLog securityLog,\n-            FileSystemAbstraction fileSystem, JobScheduler jobScheduler )\n+  private EnterpriseSecurityContext asEnterprise(SecurityContext securityContext)\n+  {\n+    if (securityContext instanceof EnterpriseSecurityContext)\n     {\n-        SecurityConfig securityConfig = new SecurityConfig( config );\n-        securityConfig.validate();\n-\n-        List<Realm> realms = new ArrayList<>( securityConfig.authProviders.size() + 1 );\n-        SecureHasher secureHasher = new SecureHasher();\n-\n-        InternalFlatFileRealm internalRealm = null;\n-        if ( securityConfig.hasNativeProvider )\n-        {\n-            internalRealm = createInternalRealm( config, logProvider, fileSystem, jobScheduler );\n-            realms.add( internalRealm );\n-        }\n-\n-        if ( securityConfig.hasLdapProvider )\n-        {\n-            realms.add( new LdapRealm( config, securityLog, secureHasher ) );\n-        }\n-\n-        if ( !securityConfig.pluginAuthProviders.isEmpty() )\n-        {\n-            realms.addAll( createPluginRealms( config, securityLog, secureHasher, securityConfig ) );\n-        }\n-\n-        // Select the active realms in the order they are configured\n-        List<Realm> orderedActiveRealms = selectOrderedActiveRealms( securityConfig.authProviders, realms );\n+      return (EnterpriseSecurityContext) securityContext;\n+    }\n+    // TODO: better handling of this possible cast failure\n+    throw new RuntimeException(\"Expected EnterpriseSecurityContext, got \" + securityContext.getClass().getName());\n+  }\n \n-        if ( orderedActiveRealms.isEmpty() )\n-        {\n-            throw illegalConfiguration( \"No valid auth provider is active.\" );\n-        }\n+  public EnterpriseAuthAndUserManager newAuthManager(Config config, LogProvider logProvider, SecurityLog securityLog,\n+                                                     FileSystemAbstraction fileSystem, JobScheduler jobScheduler)\n+  {\n+    SecurityConfig securityConfig = new SecurityConfig(config);\n+    securityConfig.validate();\n \n-        return new MultiRealmAuthManager( internalRealm, orderedActiveRealms, createCacheManager( config ),\n-                securityLog, config.get( SecuritySettings.security_log_successful_authentication ),\n-                securityConfig.propertyAuthorization, securityConfig.propertyBlacklist );\n-    }\n+    List<Realm> realms = new ArrayList<>(securityConfig.authProviders.size() + 1);\n+    SecureHasher secureHasher = new SecureHasher();\n \n-    private static List<Realm> selectOrderedActiveRealms( List<String> configuredRealms, List<Realm> availableRealms )\n+    InternalFlatFileRealm internalRealm = null;\n+    if (securityConfig.hasNativeProvider)\n     {\n-        List<Realm> orderedActiveRealms = new ArrayList<>( configuredRealms.size() );\n-        for ( String configuredRealmName : configuredRealms )\n-        {\n-            for ( Realm realm : availableRealms )\n-            {\n-                if ( configuredRealmName.equals( realm.getName() ) )\n-                {\n-                    orderedActiveRealms.add( realm );\n-                    break;\n-                }\n-            }\n-        }\n-        return orderedActiveRealms;\n+      internalRealm = createInternalRealm(config, logProvider, fileSystem, jobScheduler);\n+      realms.add(internalRealm);\n     }\n \n-    public static InternalFlatFileRealm createInternalRealm( Config config, LogProvider logProvider,\n-            FileSystemAbstraction fileSystem, JobScheduler jobScheduler )\n+    if (securityConfig.hasLdapProvider)\n     {\n-        return new InternalFlatFileRealm(\n-                CommunitySecurityModule.getUserRepository( config, logProvider, fileSystem ),\n-                getRoleRepository( config, logProvider, fileSystem ),\n-                new BasicPasswordPolicy(),\n-                createAuthenticationStrategy( config ),\n-                config.get( SecuritySettings.native_authentication_enabled ),\n-                config.get( SecuritySettings.native_authorization_enabled ),\n-                jobScheduler,\n-                CommunitySecurityModule.getInitialUserRepository( config, logProvider, fileSystem ),\n-                getDefaultAdminRepository( config, logProvider, fileSystem )\n-            );\n+      realms.add(new LdapRealm(config, securityLog, secureHasher));\n     }\n \n-    private static AuthenticationStrategy createAuthenticationStrategy( Config config )\n+    if (!securityConfig.pluginAuthProviders.isEmpty())\n     {\n-        return new RateLimitedAuthenticationStrategy( Clocks.systemClock(), config );\n+      realms.addAll(createPluginRealms(config, securityLog, secureHasher, securityConfig));\n     }\n \n-    private static CacheManager createCacheManager( Config config )\n+    // Select the active realms in the order they are configured\n+    List<Realm> orderedActiveRealms = selectOrderedActiveRealms(securityConfig.authProviders, realms);\n+\n+    if (orderedActiveRealms.isEmpty())\n     {\n-        long ttl = config.get( SecuritySettings.auth_cache_ttl ).toMillis();\n-        boolean useTTL = config.get( SecuritySettings.auth_cache_use_ttl );\n-        int maxCapacity = config.get( SecuritySettings.auth_cache_max_capacity );\n-        return new ShiroCaffeineCache.Manager( Ticker.systemTicker(), ttl, maxCapacity, useTTL );\n+      throw illegalConfiguration(\"No valid auth provider is active.\");\n     }\n \n-    private static List<PluginRealm> createPluginRealms(\n-            Config config, SecurityLog securityLog, SecureHasher secureHasher, SecurityConfig securityConfig )\n-    {\n-        List<PluginRealm> availablePluginRealms = new ArrayList<>();\n-        Set<Class> excludedClasses = new HashSet<>();\n+    return new MultiRealmAuthManager(internalRealm, orderedActiveRealms, createCacheManager(config),\n+        securityLog, config.get(SecuritySettings.security_log_successful_authentication),\n+        securityConfig.propertyAuthorization, securityConfig.propertyBlacklist);\n+  }\n \n-        if ( securityConfig.pluginAuthentication && securityConfig.pluginAuthorization )\n+  private static List<Realm> selectOrderedActiveRealms(List<String> configuredRealms, List<Realm> availableRealms)\n+  {\n+    List<Realm> orderedActiveRealms = new ArrayList<>(configuredRealms.size());\n+    for (String configuredRealmName : configuredRealms)\n+    {\n+      for (Realm realm : availableRealms)\n+      {\n+        if (configuredRealmName.equals(realm.getName()))\n         {\n-            for ( AuthPlugin plugin : Service.load( AuthPlugin.class ) )\n-            {\n-                PluginRealm pluginRealm =\n-                        new PluginRealm( plugin, config, securityLog, Clocks.systemClock(), secureHasher );\n-                availablePluginRealms.add( pluginRealm );\n-            }\n+          orderedActiveRealms.add(realm);\n+          break;\n         }\n+      }\n+    }\n+    return orderedActiveRealms;\n+  }\n+\n+  public static InternalFlatFileRealm createInternalRealm(Config config, LogProvider logProvider,\n+                                                          FileSystemAbstraction fileSystem, JobScheduler jobScheduler)\n+  {\n+    return new InternalFlatFileRealm(\n+        CommunitySecurityModule.getUserRepository(config, logProvider, fileSystem),\n+        getRoleRepository(config, logProvider, fileSystem),\n+        new BasicPasswordPolicy(),\n+        createAuthenticationStrategy(config),\n+        config.get(SecuritySettings.native_authentication_enabled),\n+        config.get(SecuritySettings.native_authorization_enabled),\n+        jobScheduler,\n+        CommunitySecurityModule.getInitialUserRepository(config, logProvider, fileSystem),\n+        getDefaultAdminRepository(config, logProvider, fileSystem)\n+    );\n+  }\n+\n+  private static AuthenticationStrategy createAuthenticationStrategy(Config config)\n+  {\n+    return new RateLimitedAuthenticationStrategy(Clocks.systemClock(), config);\n+  }\n+\n+  private static CacheManager createCacheManager(Config config)\n+  {\n+    long ttl = config.get(SecuritySettings.auth_cache_ttl).toMillis();\n+    boolean useTTL = config.get(SecuritySettings.auth_cache_use_ttl);\n+    int maxCapacity = config.get(SecuritySettings.auth_cache_max_capacity);\n+    return new ShiroCaffeineCache.Manager(Ticker.systemTicker(), ttl, maxCapacity, useTTL);\n+  }\n+\n+  private static List<PluginRealm> createPluginRealms(\n+      Config config, SecurityLog securityLog, SecureHasher secureHasher, SecurityConfig securityConfig)\n+  {\n+    List<PluginRealm> availablePluginRealms = new ArrayList<>();\n+    Set<Class> excludedClasses = new HashSet<>();\n+\n+    if (securityConfig.pluginAuthentication && securityConfig.pluginAuthorization)\n+    {\n+      for (AuthPlugin plugin : Service.load(AuthPlugin.class))\n+      {\n+        PluginRealm pluginRealm =\n+            new PluginRealm(plugin, config, securityLog, Clocks.systemClock(), secureHasher);\n+        availablePluginRealms.add(pluginRealm);\n+      }\n+    }\n \n-        if ( securityConfig.pluginAuthentication )\n-        {\n-            for ( AuthenticationPlugin plugin : Service.load( AuthenticationPlugin.class ) )\n-            {\n-                PluginRealm pluginRealm;\n-\n-                if ( securityConfig.pluginAuthorization && plugin instanceof AuthorizationPlugin )\n-                {\n-                    // This plugin implements both interfaces, create a combined plugin\n-                    pluginRealm = new PluginRealm( plugin, (AuthorizationPlugin) plugin, config, securityLog,\n-                            Clocks.systemClock(), secureHasher );\n-\n-                    // We need to make sure we do not add a duplicate when the AuthorizationPlugin service gets loaded\n-                    // so we allow only one instance per combined plugin class\n-                    excludedClasses.add( plugin.getClass() );\n-                }\n-                else\n-                {\n-                    pluginRealm =\n-                            new PluginRealm( plugin, null, config, securityLog, Clocks.systemClock(), secureHasher );\n-                }\n-                availablePluginRealms.add( pluginRealm );\n-            }\n-        }\n+    if (securityConfig.pluginAuthentication)\n+    {\n+      for (AuthenticationPlugin plugin : Service.load(AuthenticationPlugin.class))\n+      {\n+        PluginRealm pluginRealm;\n \n-        if ( securityConfig.pluginAuthorization )\n+        if (securityConfig.pluginAuthorization && plugin instanceof AuthorizationPlugin)\n         {\n-            for ( AuthorizationPlugin plugin : Service.load( AuthorizationPlugin.class ) )\n-            {\n-                if ( !excludedClasses.contains( plugin.getClass() ) )\n-                {\n-                    availablePluginRealms.add(\n-                            new PluginRealm( null, plugin, config, securityLog, Clocks.systemClock(), secureHasher )\n-                        );\n-                }\n-            }\n-        }\n-\n-        for ( String pluginRealmName : securityConfig.pluginAuthProviders )\n+          // This plugin implements both interfaces, create a combined plugin\n+          pluginRealm = new PluginRealm(plugin, (AuthorizationPlugin) plugin, config, securityLog,\n+              Clocks.systemClock(), secureHasher);\n+\n+          // We need to make sure we do not add a duplicate when the AuthorizationPlugin service gets loaded\n+          // so we allow only one instance per combined plugin class\n+          excludedClasses.add(plugin.getClass());\n+        } else\n         {\n-            if ( availablePluginRealms.stream().noneMatch( r -> r.getName().equals( pluginRealmName ) ) )\n-            {\n-                throw illegalConfiguration( format( \"Failed to load auth plugin '%s'.\", pluginRealmName ) );\n-            }\n+          pluginRealm =\n+              new PluginRealm(plugin, null, config, securityLog, Clocks.systemClock(), secureHasher);\n         }\n+        availablePluginRealms.add(pluginRealm);\n+      }\n+    }\n \n-        List<PluginRealm> realms =\n-                availablePluginRealms.stream()\n-                        .filter( realm -> securityConfig.pluginAuthProviders.contains( realm.getName() ) )\n-                        .collect( Collectors.toList() );\n-\n-        boolean missingAuthenticatingRealm =\n-                securityConfig.onlyPluginAuthentication() && realms.stream().noneMatch( PluginRealm::canAuthenticate );\n-        boolean missingAuthorizingRealm =\n-                securityConfig.onlyPluginAuthorization() && realms.stream().noneMatch( PluginRealm::canAuthorize );\n-\n-        if ( missingAuthenticatingRealm || missingAuthorizingRealm )\n+    if (securityConfig.pluginAuthorization)\n+    {\n+      for (AuthorizationPlugin plugin : Service.load(AuthorizationPlugin.class))\n+      {\n+        if (!excludedClasses.contains(plugin.getClass()))\n         {\n-            String missingProvider =\n-                    ( missingAuthenticatingRealm && missingAuthorizingRealm ) ? \"authentication or authorization\" :\n-                    missingAuthenticatingRealm ? \"authentication\" : \"authorization\";\n-\n-            throw illegalConfiguration( format(\n-                    \"No plugin %s provider loaded even though required by configuration.\", missingProvider ) );\n+          availablePluginRealms.add(\n+              new PluginRealm(null, plugin, config, securityLog, Clocks.systemClock(), secureHasher)\n+          );\n         }\n-\n-        return realms;\n+      }\n     }\n \n-    public static RoleRepository getRoleRepository( Config config, LogProvider logProvider,\n-            FileSystemAbstraction fileSystem )\n+    for (String pluginRealmName : securityConfig.pluginAuthProviders)\n     {\n-        return new FileRoleRepository( fileSystem, getRoleRepositoryFile( config ), logProvider );\n+      if (availablePluginRealms.stream().noneMatch(r -> r.getName().equals(pluginRealmName)))\n+      {\n+        throw illegalConfiguration(format(\"Failed to load auth plugin '%s'.\", pluginRealmName));\n+      }\n     }\n \n-    public static UserRepository getDefaultAdminRepository( Config config, LogProvider logProvider,\n-            FileSystemAbstraction fileSystem )\n-    {\n-        return new FileUserRepository( fileSystem, getDefaultAdminRepositoryFile( config ), logProvider );\n-    }\n+    List<PluginRealm> realms =\n+        availablePluginRealms.stream()\n+            .filter(realm -> securityConfig.pluginAuthProviders.contains(realm.getName()))\n+            .collect(Collectors.toList());\n+\n+    boolean missingAuthenticatingRealm =\n+        securityConfig.onlyPluginAuthentication() && realms.stream().noneMatch(PluginRealm::canAuthenticate);\n+    boolean missingAuthorizingRealm =\n+        securityConfig.onlyPluginAuthorization() && realms.stream().noneMatch(PluginRealm::canAuthorize);\n \n-    private static File getRoleRepositoryFile( Config config )\n+    if (missingAuthenticatingRealm || missingAuthorizingRealm)\n     {\n-        return new File( config.get( DatabaseManagementSystemSettings.auth_store_directory ), ROLE_STORE_FILENAME );\n+      String missingProvider =\n+          (missingAuthenticatingRealm && missingAuthorizingRealm) ? \"authentication or authorization\" :\n+              missingAuthenticatingRealm ? \"authentication\" : \"authorization\";\n+\n+      throw illegalConfiguration(format(\n+          \"No plugin %s provider loaded even though required by configuration.\", missingProvider));\n     }\n \n-    private static File getDefaultAdminRepositoryFile( Config config )\n+    return realms;\n+  }\n+\n+  public static RoleRepository getRoleRepository(Config config, LogProvider logProvider,\n+                                                 FileSystemAbstraction fileSystem)\n+  {\n+    return new FileRoleRepository(fileSystem, getRoleRepositoryFile(config), logProvider);\n+  }\n+\n+  public static UserRepository getDefaultAdminRepository(Config config, LogProvider logProvider,\n+                                                         FileSystemAbstraction fileSystem)\n+  {\n+    return new FileUserRepository(fileSystem, getDefaultAdminRepositoryFile(config), logProvider);\n+  }\n+\n+  private static File getRoleRepositoryFile(Config config)\n+  {\n+    return new File(config.get(DatabaseManagementSystemSettings.auth_store_directory), ROLE_STORE_FILENAME);\n+  }\n+\n+  private static File getDefaultAdminRepositoryFile(Config config)\n+  {\n+    return new File(config.get(DatabaseManagementSystemSettings.auth_store_directory),\n+        DEFAULT_ADMIN_STORE_FILENAME);\n+  }\n+\n+  private static IllegalArgumentException illegalConfiguration(String message)\n+  {\n+    return new IllegalArgumentException(\"Illegal configuration: \" + message);\n+  }\n+\n+  static class SecurityConfig\n+  {\n+    final List<String> authProviders;\n+    final boolean hasNativeProvider;\n+    final boolean hasLdapProvider;\n+    final List<String> pluginAuthProviders;\n+    final boolean nativeAuthentication;\n+    final boolean nativeAuthorization;\n+    final boolean ldapAuthentication;\n+    final boolean ldapAuthorization;\n+    final boolean pluginAuthentication;\n+    final boolean pluginAuthorization;\n+    final boolean propertyAuthorization;\n+    private final String propertyAuthMapping;\n+    final Map<String, List<String>> propertyBlacklist = new HashMap<>();\n+\n+    SecurityConfig(Config config)\n     {\n-        return new File( config.get( DatabaseManagementSystemSettings.auth_store_directory ),\n-                DEFAULT_ADMIN_STORE_FILENAME );\n+      authProviders = config.get(SecuritySettings.auth_providers);\n+      hasNativeProvider = authProviders.contains(SecuritySettings.NATIVE_REALM_NAME);\n+      hasLdapProvider = authProviders.contains(SecuritySettings.LDAP_REALM_NAME);\n+      pluginAuthProviders = authProviders.stream()\n+          .filter(r -> r.startsWith(SecuritySettings.PLUGIN_REALM_NAME_PREFIX))\n+          .collect(Collectors.toList());\n+\n+      nativeAuthentication = config.get(SecuritySettings.native_authentication_enabled);\n+      nativeAuthorization = config.get(SecuritySettings.native_authorization_enabled);\n+      ldapAuthentication = config.get(SecuritySettings.ldap_authentication_enabled);\n+      ldapAuthorization = config.get(SecuritySettings.ldap_authorization_enabled);\n+      pluginAuthentication = config.get(SecuritySettings.plugin_authentication_enabled);\n+      pluginAuthorization = config.get(SecuritySettings.plugin_authorization_enabled);\n+      propertyAuthorization = config.get(SecuritySettings.property_level_authorization_enabled);\n+      propertyAuthMapping = config.get(SecuritySettings.property_level_authorization_permissions);\n     }\n \n-    private static IllegalArgumentException illegalConfiguration( String message )\n+    void validate()\n     {\n-        return new IllegalArgumentException( \"Illegal configuration: \" + message );\n+      if (!nativeAuthentication && !ldapAuthentication && !pluginAuthentication)\n+      {\n+        throw illegalConfiguration(\"All authentication providers are disabled.\");\n+      }\n+\n+      if (!nativeAuthorization && !ldapAuthorization && !pluginAuthorization)\n+      {\n+        throw illegalConfiguration(\"All authorization providers are disabled.\");\n+      }\n+\n+      if (hasNativeProvider && !nativeAuthentication && !nativeAuthorization)\n+      {\n+        throw illegalConfiguration(\n+            \"Native auth provider configured, but both authentication and authorization are disabled.\");\n+      }\n+\n+      if (hasLdapProvider && !ldapAuthentication && !ldapAuthorization)\n+      {\n+        throw illegalConfiguration(\n+            \"LDAP auth provider configured, but both authentication and authorization are disabled.\");\n+      }\n+\n+      if (!pluginAuthProviders.isEmpty() && !pluginAuthentication && !pluginAuthorization)\n+      {\n+        throw illegalConfiguration(\n+            \"Plugin auth provider configured, but both authentication and authorization are disabled.\");\n+      }\n+      if (propertyAuthorization && !parsePropertyPermissions())\n+      {\n+        throw illegalConfiguration(\n+            \"Property level authorization is enabled but there is a error in the permissions mapping.\");\n+      }\n     }\n \n-    static class SecurityConfig\n+    private boolean parsePropertyPermissions()\n     {\n-        final List<String> authProviders;\n-        final boolean hasNativeProvider;\n-        final boolean hasLdapProvider;\n-        final List<String> pluginAuthProviders;\n-        final boolean nativeAuthentication;\n-        final boolean nativeAuthorization;\n-        final boolean ldapAuthentication;\n-        final boolean ldapAuthorization;\n-        final boolean pluginAuthentication;\n-        final boolean pluginAuthorization;\n-        final boolean propertyAuthorization;\n-        private final String propertyAuthMapping;\n-        final Map<String,List<String>> propertyBlacklist = new HashMap<>();\n-\n-        SecurityConfig( Config config )\n+      if (propertyAuthMapping != null && !propertyAuthMapping.isEmpty())\n+      {\n+        String rolePattern = \"\\\\s*[a-zA-Z0-9_]+\\\\s*\";\n+        String propertyPattern = \"\\\\s*[a-zA-Z0-9_]+\\\\s*\";\n+        String roleToPerm = rolePattern + \"=\" + propertyPattern + \"(,\" + propertyPattern + \")*\";\n+        String multiLine = roleToPerm + \"(;\" + roleToPerm + \")*\";\n+\n+        boolean valid = propertyAuthMapping.matches(multiLine);\n+        if (!valid)\n         {\n-            authProviders = config.get( SecuritySettings.auth_providers );\n-            hasNativeProvider = authProviders.contains( SecuritySettings.NATIVE_REALM_NAME );\n-            hasLdapProvider = authProviders.contains( SecuritySettings.LDAP_REALM_NAME );\n-            pluginAuthProviders = authProviders.stream()\n-                    .filter( r -> r.startsWith( SecuritySettings.PLUGIN_REALM_NAME_PREFIX ) )\n-                    .collect( Collectors.toList() );\n-\n-            nativeAuthentication = config.get( SecuritySettings.native_authentication_enabled );\n-            nativeAuthorization = config.get( SecuritySettings.native_authorization_enabled );\n-            ldapAuthentication = config.get( SecuritySettings.ldap_authentication_enabled );\n-            ldapAuthorization = config.get( SecuritySettings.ldap_authorization_enabled );\n-            pluginAuthentication = config.get( SecuritySettings.plugin_authentication_enabled );\n-            pluginAuthorization = config.get( SecuritySettings.plugin_authorization_enabled );\n-            propertyAuthorization = config.get( SecuritySettings.property_level_authorization_enabled );\n-            propertyAuthMapping = config.get( SecuritySettings.property_level_authorization_permissions );\n-        }\n-\n-        void validate()\n-        {\n-            if ( !nativeAuthentication && !ldapAuthentication && !pluginAuthentication )\n-            {\n-                throw illegalConfiguration( \"All authentication providers are disabled.\" );\n-            }\n-\n-            if ( !nativeAuthorization && !ldapAuthorization && !pluginAuthorization )\n-            {\n-                throw illegalConfiguration( \"All authorization providers are disabled.\" );\n-            }\n-\n-            if ( hasNativeProvider && !nativeAuthentication && !nativeAuthorization )\n-            {\n-                throw illegalConfiguration(\n-                        \"Native auth provider configured, but both authentication and authorization are disabled.\" );\n-            }\n-\n-            if ( hasLdapProvider && !ldapAuthentication && !ldapAuthorization )\n-            {\n-                throw illegalConfiguration(\n-                        \"LDAP auth provider configured, but both authentication and authorization are disabled.\" );\n-            }\n-\n-            if ( !pluginAuthProviders.isEmpty() && !pluginAuthentication && !pluginAuthorization )\n-            {\n-                throw illegalConfiguration(\n-                        \"Plugin auth provider configured, but both authentication and authorization are disabled.\" );\n-            }\n-            if ( propertyAuthorization && !parsePropertyPermissions() )\n-            {\n-                throw illegalConfiguration(\n-                        \"Property level authorization is enabled but there is a error in the permissions mapping.\" );\n-            }\n+          return false;\n         }\n \n-        private boolean parsePropertyPermissions()\n+        for (String rolesAndPermissions : propertyAuthMapping.split(\";\"))\n         {\n-            if ( propertyAuthMapping != null && !propertyAuthMapping.isEmpty() )\n+          if (!rolesAndPermissions.isEmpty())\n+          {\n+            String[] split = rolesAndPermissions.split(\"=\");\n+            String role = split[0].trim();\n+            String permissions = split[1];\n+            List<String> permissionsList = new ArrayList<>();\n+            for (String perm : permissions.split(\",\"))\n             {\n-                String rolePattern = \"\\\\s*[a-zA-Z0-9_]+\\\\s*\";\n-                String propertyPattern = \"\\\\s*[a-zA-Z0-9_]+\\\\s*\";\n-                String roleToPerm = rolePattern + \"=\" + propertyPattern + \"(,\" + propertyPattern + \")*\";\n-                String multiLine = roleToPerm + \"(;\" + roleToPerm + \")*\";\n-\n-                boolean valid = propertyAuthMapping.matches( multiLine );\n-                if ( !valid )\n-                {\n-                    return false;\n-                }\n-\n-                for ( String rolesAndPermissions : propertyAuthMapping.split( \";\" ) )\n-                {\n-                    if ( !rolesAndPermissions.isEmpty() )\n-                    {\n-                        String[] split = rolesAndPermissions.split( \"=\" );\n-                        String role = split[0].trim();\n-                        String permissions = split[1];\n-                        List<String> permissionsList = new ArrayList<>();\n-                        for ( String perm : permissions.split( \",\" ) )\n-                        {\n-                            if ( !perm.isEmpty() )\n-                            {\n-                                permissionsList.add( perm.trim() );\n-                            }\n-                        }\n-                        propertyBlacklist.put( role, permissionsList );\n-                    }\n-                }\n+              if (!perm.isEmpty())\n+              {\n+                permissionsList.add(perm.trim());\n+              }\n             }\n-            return true;\n+            propertyBlacklist.put(role, permissionsList);\n+          }\n         }\n+      }\n+      return true;\n+    }\n \n-        public boolean onlyPluginAuthentication()\n-        {\n-            return !nativeAuthentication && !ldapAuthentication && pluginAuthentication;\n-        }\n+    public boolean onlyPluginAuthentication()\n+    {\n+      return !nativeAuthentication && !ldapAuthentication && pluginAuthentication;\n+    }\n \n-        public boolean onlyPluginAuthorization()\n-        {\n-            return !nativeAuthorization && !ldapAuthorization && pluginAuthorization;\n-        }\n+    public boolean onlyPluginAuthorization()\n+    {\n+      return !nativeAuthorization && !ldapAuthorization && pluginAuthorization;\n     }\n+  }\n }\n",
            "diff_size": 544
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}