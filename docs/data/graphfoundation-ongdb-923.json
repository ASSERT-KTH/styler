{
    "project_name": "graphfoundation-ongdb",
    "error_id": "923",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "132",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "623",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "650",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "707",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "765",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "781",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "781",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "826",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "836",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "856",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "856",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "893",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "893",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "913",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "913",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "924",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "924",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "935",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "936",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/923/Config.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/923/Config.java\nindex 80beb787eb1..2d387432b08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/923/Config.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/923/Config.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.configuration;\n \n import java.io.File;\n@@ -80,893 +81,888 @@ import static org.neo4j.kernel.configuration.Settings.TRUE;\n  */\n public class Config implements DiagnosticsProvider, Configuration\n {\n-    public static final String DEFAULT_CONFIG_FILE_NAME = \"neo4j.conf\";\n-\n-    private final List<ConfigOptions> configOptions;\n-\n-    private final Map<String,String> params = new CopyOnWriteHashMap<>(); // Read heavy workload\n-    private final Map<String, Collection<BiConsumer<String,String>>> updateListeners = new ConcurrentHashMap<>();\n-    private final ConfigurationMigrator migrator;\n-    private final List<ConfigurationValidator> validators = new ArrayList<>();\n-    private final Map<String,String> overriddenDefaults = new CopyOnWriteHashMap<>();\n-    private final Map<String,BaseSetting<?>> settingsMap; // Only contains fixed settings and not groups\n-\n-    // Messages to this log get replayed into a real logger once logging has been instantiated.\n-    private Log log = new BufferingLog();\n-\n-    /**\n-     * Builder class for a configuration.\n-     * <p>\n-     * The configuration has three layers of values:\n-     * <ol>\n-     *   <li>Defaults settings, which is provided by validators.\n-     *   <li>File settings, parsed from the configuration file if one is provided.\n-     *   <li>Overridden settings, as provided by the user with the {@link Builder#withSettings(Map)} methods.\n-     * </ol>\n-     * They are added in the order specified, and is thus overridden by each layer.\n-     * <p>\n-     * Although the builder allows you to override the {@link LoadableConfig}'s with <code>withConfigClasses</code>,\n-     * this functionality is mainly for testing. If no classes are provided to the builder, they will be located through\n-     * service loading, and this is probably what you want in most of the cases.\n-     * <p>\n-     * Loaded {@link LoadableConfig}'s, whether provided though service loading or explicitly passed, will be scanned\n-     * for validators that provides migration, validation and default values. Migrators can be specified with the\n-     * {@link Migrator} annotation and should reside in a class implementing {@link LoadableConfig}.\n-     */\n-    public static class Builder\n-    {\n-        private Map<String,String> initialSettings = stringMap();\n-        private Map<String,String> overriddenDefaults = stringMap();\n-        private List<ConfigurationValidator> validators = new ArrayList<>();\n-        private File configFile;\n-        private List<LoadableConfig> settingsClasses;\n-        private boolean connectorsDisabled;\n-\n-        /**\n-         * Augment the configuration with the passed setting.\n-         *\n-         * @param setting The setting to set.\n-         * @param value The value of the setting, pre parsed.\n-         */\n-        public Builder withSetting( final Setting<?> setting, final String value )\n-        {\n-            return withSetting( setting.name(), value );\n-        }\n-\n-        /**\n-         * Augment the configuration with the passed setting.\n-         *\n-         * @param setting The setting to set.\n-         * @param value The value of the setting, pre parsed.\n-         */\n-        public Builder withSetting( final String setting, final String value )\n-        {\n-            initialSettings.put( setting, value );\n-            return this;\n-        }\n-\n-        /**\n-         * Augment the configuration with the passed settings.\n-         *\n-         * @param initialSettings settings to augment the configuration with.\n-         */\n-        public Builder withSettings( final Map<String,String> initialSettings )\n-        {\n-            this.initialSettings.putAll( initialSettings );\n-            return this;\n-        }\n-\n-        /**\n-         * Set the classes that contains the {@link Setting} fields. If no classes are provided to the builder, they\n-         * will be located through service loading.\n-         *\n-         * @param loadableConfigs A collection fo class instances providing settings.\n-         */\n-        @Nonnull\n-        public Builder withConfigClasses( final Collection<? extends LoadableConfig> loadableConfigs )\n-        {\n-            if ( settingsClasses == null )\n-            {\n-                settingsClasses = new ArrayList<>();\n-            }\n-            settingsClasses.addAll( loadableConfigs );\n-            return this;\n-        }\n-\n-        /**\n-         * Provide an additional validator. Validators are automatically localed within classes with\n-         * {@link LoadableConfig}, but this allows you to add others.\n-         *\n-         * @param validator an additional validator.\n-         */\n-        @Nonnull\n-        public Builder withValidator( final ConfigurationValidator validator )\n-        {\n-            this.validators.add( validator );\n-            return this;\n-        }\n-\n-        /**\n-         * @see Builder#withValidator(ConfigurationValidator)\n-         */\n-        @Nonnull\n-        public Builder withValidators( final Collection<ConfigurationValidator> validators )\n-        {\n-            this.validators.addAll( validators );\n-            return this;\n-        }\n-\n-        /**\n-         * Extends config with defaults for server, i.e. auth and connector settings.\n-         */\n-        @Nonnull\n-        public Builder withServerDefaults()\n-        {\n-            // Add server defaults\n-            HttpConnector http = new HttpConnector( \"http\", NONE );\n-            HttpConnector https = new HttpConnector( \"https\", TLS );\n-            BoltConnector bolt = new BoltConnector( \"bolt\" );\n-            overriddenDefaults.put( GraphDatabaseSettings.auth_enabled.name(), TRUE );\n-            overriddenDefaults.put( http.enabled.name(), TRUE );\n-            overriddenDefaults.put( https.enabled.name(), TRUE );\n-            overriddenDefaults.put( bolt.enabled.name(), TRUE );\n-\n-            // Add server validator\n-            validators.add( new ServerConfigurationValidator() );\n-\n-            return this;\n-        }\n-\n-        /**\n-         * Provide a file for initial configuration. The settings added with the {@link Builder#withSettings(Map)}\n-         * methods will be applied on top of the settings in the file.\n-         *\n-         * @param configFile A configuration file to parse for initial settings.\n-         */\n-        @Nonnull\n-        public Builder withFile( final @Nullable File configFile )\n-        {\n-            this.configFile = configFile;\n-            return this;\n-        }\n-\n-        /**\n-         * @see Builder#withFile(File)\n-         */\n-        @Nonnull\n-        public Builder withFile( final Path configFile )\n-        {\n-            return withFile( configFile.toFile() );\n-        }\n-\n-        /**\n-         * @param configFile an optional configuration file. If not present, this call changes nothing.\n-         */\n-        @Nonnull\n-        public Builder withFile( Optional<File> configFile )\n-        {\n-            configFile.ifPresent( file -> this.configFile = file );\n-            return this;\n-        }\n-\n-        /**\n-         * Specifies the neo4j home directory to be set for this particular config. This will modify {@link\n-         * GraphDatabaseSettings#neo4j_home} to the same value as provided. If this is not called, the home directory\n-         * will be set to a system specific default home directory.\n-         *\n-         * @param homeDir The home directory this config belongs to.\n-         */\n-        @Nonnull\n-        public Builder withHome( final File homeDir )\n-        {\n-            initialSettings.put( GraphDatabaseSettings.neo4j_home.name(), homeDir.getAbsolutePath() );\n-            return this;\n-        }\n-\n-        /**\n-         * @see Builder#withHome(File)\n-         */\n-        @Nonnull\n-        public Builder withHome( final Path homeDir )\n-        {\n-            return withHome( homeDir.toFile() );\n-        }\n-\n-        /**\n-         * This will force all connectors to be disabled during creation of the config. This can be useful if an\n-         * offline mode is wanted, e.g. in dbms tools or test environments.\n-         */\n-        @Nonnull\n-        public Builder withConnectorsDisabled()\n-        {\n-            connectorsDisabled = true;\n-            return this;\n-        }\n-\n-        /**\n-         * @return The config reflecting the state of the builder.\n-         * @throws InvalidSettingException is thrown if an invalid setting is encountered and {@link\n-         * GraphDatabaseSettings#strict_config_validation} is true.\n-         */\n-        @Nonnull\n-        public Config build() throws InvalidSettingException\n-        {\n-            List<LoadableConfig> loadableConfigs =\n-                    Optional.ofNullable( settingsClasses ).orElseGet( LoadableConfig::allConfigClasses );\n-\n-            // If reading from a file, make sure we always have a neo4j_home\n-            if ( configFile != null && !initialSettings.containsKey( GraphDatabaseSettings.neo4j_home.name() ) )\n-            {\n-                initialSettings.put( GraphDatabaseSettings.neo4j_home.name(), System.getProperty( \"user.dir\" ) );\n-            }\n-\n-            Config config = new Config( configFile, initialSettings, overriddenDefaults, validators, loadableConfigs );\n-\n-            if ( connectorsDisabled )\n-            {\n-                config.augment( config.allConnectorIdentifiers().stream().collect(\n-                        Collectors.toMap( id -> new Connector( id ).enabled.name(), id -> Settings.FALSE ) ) );\n-            }\n-\n-            return config;\n-        }\n-    }\n-\n-    @Nonnull\n-    public static Builder builder()\n-    {\n-        return new Builder();\n-    }\n-\n-    /**\n-     * Convenient method for starting building from a file.\n-     */\n-    @Nonnull\n-    public static Builder fromFile( @Nullable final File configFile )\n-    {\n-        return builder().withFile( configFile );\n-    }\n-\n-    /**\n-     * Convenient method for starting building from a file.\n-     */\n-    @Nonnull\n-    public static Builder fromFile( @Nonnull final Path configFile )\n-    {\n-        return builder().withFile( configFile );\n-    }\n-\n-    /**\n-     * Convenient method for starting building from initial settings.\n-     */\n-    @Nonnull\n-    public static Builder fromSettings( final Map<String,String> initialSettings )\n-    {\n-        return builder().withSettings( initialSettings );\n-    }\n-\n-    /**\n-     * @return a configuration with default values.\n-     */\n-    @Nonnull\n-    public static Config defaults()\n-    {\n-        return builder().build();\n-    }\n-\n-    /**\n-     * @param initialSettings a map with settings to be present in the config.\n-     * @return a configuration with default values augmented with the provided <code>initialSettings</code>.\n-     */\n-    @Nonnull\n-    public static Config defaults( @Nonnull final Map<String,String> initialSettings )\n-    {\n-        return builder().withSettings( initialSettings ).build();\n-    }\n-\n-    /**\n-     * Constructs a <code>Config</code> with default values and sets the supplied <code>setting</code> to the <code>value</code>.\n-     * @param setting The initial setting to use.\n-     * @param value The initial value to give the setting.\n-     */\n-    @Nonnull\n-    public static Config defaults( @Nonnull final Setting<?> setting, final String value )\n-    {\n-        return builder().withSetting( setting, value ).build();\n-    }\n-\n-    private Config( File configFile,\n-            Map<String,String> initialSettings,\n-            Map<String,String> overriddenDefaults,\n-            Collection<ConfigurationValidator> additionalValidators,\n-            List<LoadableConfig> settingsClasses )\n-    {\n-        configOptions = settingsClasses.stream()\n-                .map( LoadableConfig::getConfigOptions )\n-                .flatMap( List::stream )\n-                .collect( Collectors.toList() );\n-\n-        settingsMap = new HashMap<>();\n-        configOptions.stream()\n-                .map( ConfigOptions::settingGroup )\n-                .filter( BaseSetting.class::isInstance )\n-                .map( BaseSetting.class::cast )\n-                .forEach( setting -> settingsMap.put( setting.name(), setting ) );\n-\n-        validators.addAll( additionalValidators );\n-        migrator = new AnnotationBasedConfigurationMigrator( settingsClasses );\n-        this.overriddenDefaults.putAll( overriddenDefaults );\n-\n-        boolean fromFile = configFile != null;\n-        if ( fromFile )\n-        {\n-            loadFromFile( configFile, log ).forEach( initialSettings::putIfAbsent );\n-        }\n-\n-        overriddenDefaults.forEach( initialSettings::putIfAbsent );\n-\n-        migrateAndValidateAndUpdateSettings( initialSettings, fromFile );\n-\n-        // Only warn for deprecations if red from a file\n-        if ( fromFile )\n-        {\n-            warnAboutDeprecations( params );\n-        }\n-    }\n-\n-    /**\n-     * Retrieves a configuration value. If no value is configured, a default value will be returned instead. Note that\n-     * {@code null} is a valid value.\n-     *\n-     * @param setting The configuration property.\n-     * @param <T> the underlying type of the setting.\n-     * @return the value of the given setting, {@code null} can be returned.\n-     */\n-    @Override\n-    public <T> T get( Setting<T> setting )\n-    {\n-        return setting.apply( params::get );\n-    }\n-\n-    /**\n-     * Test whether a setting is configured or not. Can be used to check if default value will be returned or not.\n+  public static final String DEFAULT_CONFIG_FILE_NAME = \"neo4j.conf\";\n+\n+  private final List<ConfigOptions> configOptions;\n+\n+  private final Map<String, String> params = new CopyOnWriteHashMap<>(); // Read heavy workload\n+  private final Map<String, Collection<BiConsumer<String, String>>> updateListeners = new ConcurrentHashMap<>();\n+  private final ConfigurationMigrator migrator;\n+  private final List<ConfigurationValidator> validators = new ArrayList<>();\n+  private final Map<String, String> overriddenDefaults = new CopyOnWriteHashMap<>();\n+  private final Map<String, BaseSetting<?>> settingsMap; // Only contains fixed settings and not groups\n+\n+  // Messages to this log get replayed into a real logger once logging has been instantiated.\n+  private Log log = new BufferingLog();\n+\n+  /**\n+   * Builder class for a configuration.\n+   * <p>\n+   * The configuration has three layers of values:\n+   * <ol>\n+   *   <li>Defaults settings, which is provided by validators.\n+   *   <li>File settings, parsed from the configuration file if one is provided.\n+   *   <li>Overridden settings, as provided by the user with the {@link Builder#withSettings(Map)} methods.\n+   * </ol>\n+   * They are added in the order specified, and is thus overridden by each layer.\n+   * <p>\n+   * Although the builder allows you to override the {@link LoadableConfig}'s with <code>withConfigClasses</code>,\n+   * this functionality is mainly for testing. If no classes are provided to the builder, they will be located through\n+   * service loading, and this is probably what you want in most of the cases.\n+   * <p>\n+   * Loaded {@link LoadableConfig}'s, whether provided though service loading or explicitly passed, will be scanned\n+   * for validators that provides migration, validation and default values. Migrators can be specified with the\n+   * {@link Migrator} annotation and should reside in a class implementing {@link LoadableConfig}.\n+   */\n+  public static class Builder\n+  {\n+    private Map<String, String> initialSettings = stringMap();\n+    private Map<String, String> overriddenDefaults = stringMap();\n+    private List<ConfigurationValidator> validators = new ArrayList<>();\n+    private File configFile;\n+    private List<LoadableConfig> settingsClasses;\n+    private boolean connectorsDisabled;\n+\n+    /**\n+     * Augment the configuration with the passed setting.\n      *\n-     * @param setting The setting to check.\n-     * @return {@code true} if the setting is configures, {@code false} otherwise implying that the default value will\n-     * be returned if applicable.\n+     * @param setting The setting to set.\n+     * @param value   The value of the setting, pre parsed.\n      */\n-    public boolean isConfigured( Setting<?> setting )\n+    public Builder withSetting(final Setting<?> setting, final String value)\n     {\n-        return params.containsKey( setting.name() );\n+      return withSetting(setting.name(), value);\n     }\n \n     /**\n-     * Returns the currently configured identifiers for grouped settings.\n-     *\n-     * Identifiers for groups exists to allow multiple configured settings of the same setting type.\n-     * E.g. giving that prefix of a group is {@code dbms.ssl.policy} and the following settings are configured:\n-     * <ul>\n-     * <li> {@code dbms.ssl.policy.default.base_directory}\n-     * <li> {@code dbms.ssl.policy.other.base_directory}\n-     * </ul>\n-     * a call to this will method return {@code [\"default\", \"other\"]}.\n-     * <p>\n-     * The key difference to these identifiers are that they are only known at runtime after a valid configuration is\n-     * parsed and validated.\n+     * Augment the configuration with the passed setting.\n      *\n-     * @param groupClass A class that represents a setting group. Must be annotated with {@link Group}\n-     * @return A set of configured identifiers for the given group.\n-     * @throws IllegalArgumentException if the provided class is not annotated with {@link Group}.\n+     * @param setting The setting to set.\n+     * @param value   The value of the setting, pre parsed.\n      */\n-    public Set<String> identifiersFromGroup( Class<?> groupClass )\n+    public Builder withSetting(final String setting, final String value)\n     {\n-        if ( !groupClass.isAnnotationPresent( Group.class ) )\n-        {\n-            throw new IllegalArgumentException( \"Class must be annotated with @Group\" );\n-        }\n-\n-        String prefix = groupClass.getAnnotation( Group.class ).value();\n-        Pattern pattern = Pattern.compile( Pattern.quote( prefix ) + \"\\\\.([^.]+)\\\\.(.+)\" );\n-\n-        Set<String> identifiers = new TreeSet<>();\n-        for ( String setting : params.keySet() )\n-        {\n-            Matcher matcher = pattern.matcher( setting );\n-            if ( matcher.matches() )\n-            {\n-                identifiers.add( matcher.group( 1 ) );\n-            }\n-        }\n-        return identifiers;\n+      initialSettings.put(setting, value);\n+      return this;\n     }\n \n     /**\n-     * Augment the existing config with new settings, overriding any conflicting settings, but keeping all old\n-     * non-overlapping ones.\n+     * Augment the configuration with the passed settings.\n      *\n-     * @param settings to add and override.\n-     * @throws InvalidSettingException when and invalid setting is found and {@link\n-     * GraphDatabaseSettings#strict_config_validation} is true.\n-     */\n-    public void augment( Map<String,String> settings ) throws InvalidSettingException\n-    {\n-        migrateAndValidateAndUpdateSettings( settings, false );\n-    }\n-\n-    /**\n-     * @see Config#augment(Map)\n-     */\n-    public void augment( String setting, String value ) throws InvalidSettingException\n-    {\n-        augment( singletonMap( setting, value ) );\n-    }\n-\n-    /**\n-     * @see Config#augment(Map)\n+     * @param initialSettings settings to augment the configuration with.\n      */\n-    public void augment( Setting<?> setting, String value )\n+    public Builder withSettings(final Map<String, String> initialSettings)\n     {\n-        augment( setting.name(), value );\n+      this.initialSettings.putAll(initialSettings);\n+      return this;\n     }\n \n     /**\n-     * Augment the existing config with new settings, overriding any conflicting settings, but keeping all old\n-     * non-overlapping ones.\n+     * Set the classes that contains the {@link Setting} fields. If no classes are provided to the builder, they\n+     * will be located through service loading.\n      *\n-     * @param config config to add and override with.\n-     * @throws InvalidSettingException when and invalid setting is found and {@link\n-     * GraphDatabaseSettings#strict_config_validation} is true.\n+     * @param loadableConfigs A collection fo class instances providing settings.\n      */\n-    public void augment( Config config ) throws InvalidSettingException\n-    {\n-        augment( config.params );\n-    }\n-\n-    /**\n-     * Augment the existing config with new settings, ignoring any conflicting settings.\n-     *\n-     * @param setting settings to add and override\n-     * @throws InvalidSettingException when and invalid setting is found and {@link\n-     * GraphDatabaseSettings#strict_config_validation} is true.\n-     */\n-    public void augmentDefaults( Setting<?> setting, String value ) throws InvalidSettingException\n-    {\n-        overriddenDefaults.put( setting.name(), value );\n-        params.putIfAbsent( setting.name(), value );\n-    }\n-\n-    /**\n-     * Specify a log where errors and warnings will be reported. Log messages that happens prior to setting a logger\n-     * will be buffered and replayed onto the first logger that is set.\n-     *\n-     * @param log to use.\n-     */\n-    public void setLogger( Log log )\n-    {\n-        if ( this.log instanceof BufferingLog )\n-        {\n-            ((BufferingLog) this.log).replayInto( log );\n-        }\n-        this.log = log;\n-    }\n-\n-    /**\n-     * @param key to lookup in the config\n-     * @return the value or none if it doesn't exist in the config\n-     */\n-    public Optional<String> getRaw( @Nonnull String key )\n-    {\n-        return Optional.ofNullable( params.get( key ) );\n-    }\n-\n-    /**\n-     * @return a copy of the raw configuration map\n-     */\n-    public Map<String,String> getRaw()\n-    {\n-        return new HashMap<>( params );\n-    }\n-\n-    /**\n-     * @return a configured setting\n-     */\n-    public Optional<Object> getValue( @Nonnull String key )\n-    {\n-        return configOptions.stream()\n-                .map( it -> it.asConfigValues( params ) )\n-                .flatMap( List::stream )\n-                .filter( it -> it.name().equals( key ) )\n-                .map( ConfigValue::value )\n-                .findFirst()\n-                .orElseGet( Optional::empty );\n-    }\n-\n-    /**\n-     * Updates a provided setting to a given value. This method is intended to be used for changing settings during\n-     * runtime. If you want to change settings at startup, use {@link Config#augment}.\n-     *\n-     * @implNote No migration or config validation is done. If you need this you have to refactor this method.\n-     *\n-     * @param setting The setting to set to the specified value.\n-     * @param update The new value to set, passing {@code null} or the empty string should reset the value back to default value.\n-     * @param origin The source of the change, e.g. {@code dbms.setConfigValue()}.\n-     * @throws IllegalArgumentException if the provided setting is unknown or not dynamic.\n-     * @throws InvalidSettingException if the value is not formatted correctly.\n-     */\n-    public void updateDynamicSetting( String setting, String update, String origin )\n-            throws IllegalArgumentException, InvalidSettingException\n-    {\n-        verifyValidDynamicSetting( setting );\n-\n-        synchronized ( params )\n-        {\n-            boolean oldValueIsDefault = false;\n-            boolean newValueIsDefault = false;\n-            String oldValue;\n-            String newValue;\n-            if ( update == null || update.isEmpty() )\n-            {\n-                // Empty means we want to delete the configured value and fallback to the default value\n-                String overriddenDefault = overriddenDefaults.get( setting );\n-                boolean hasDefault = overriddenDefault != null;\n-                oldValue = hasDefault ? params.put( setting, overriddenDefault ) : params.remove( setting );\n-                newValue = getDefaultValueOf( setting );\n-                newValueIsDefault = true;\n-            }\n-            else\n-            {\n-                // Change setting, make sure it's valid\n-                Map<String,String> newEntry = stringMap( setting, update );\n-                List<SettingValidator> settingValidators = configOptions.stream()\n-                                                                        .map( ConfigOptions::settingGroup )\n-                                                                        .collect( Collectors.toList() );\n-                for ( SettingValidator validator : settingValidators )\n-                {\n-                    validator.validate( newEntry, ignore -> {} ); // Throws if invalid\n-                }\n-\n-                String previousValue = params.put( setting, update );\n-                if ( previousValue != null )\n-                {\n-                    oldValue = previousValue;\n-                }\n-                else\n-                {\n-                    oldValue = getDefaultValueOf( setting );\n-                    oldValueIsDefault = true;\n-                }\n-                newValue = update;\n-            }\n-\n-            String oldValueForLog = obsfucateIfSecret( setting, oldValue );\n-            String newValueForLog = obsfucateIfSecret( setting, newValue );\n-            log.info( \"Setting changed: '%s' changed from '%s' to '%s' via '%s'\",\n-                    setting, oldValueIsDefault ? \"default (\" + oldValueForLog + \")\" : oldValueForLog,\n-                    newValueIsDefault ? \"default (\" + newValueForLog + \")\" : newValueForLog, origin );\n-            updateListeners.getOrDefault( setting, emptyList() ).forEach( l -> l.accept( oldValue, newValue ) );\n-        }\n-    }\n-\n-    private void verifyValidDynamicSetting( String setting )\n-    {\n-        Optional<ConfigValue> option = findConfigValue( setting );\n-\n-        if ( !option.isPresent() )\n-        {\n-            throw new IllegalArgumentException( \"Unknown setting: \" + setting );\n-        }\n-\n-        ConfigValue configValue = option.get();\n-        if ( !configValue.dynamic() )\n-        {\n-            throw new IllegalArgumentException( \"Setting is not dynamic and can not be changed at runtime\" );\n-        }\n-    }\n-\n-    private String getDefaultValueOf( String setting )\n-    {\n-        if ( overriddenDefaults.containsKey( setting ) )\n-        {\n-            return overriddenDefaults.get( setting );\n-        }\n-        if ( settingsMap.containsKey( setting ) )\n-        {\n-            return settingsMap.get( setting ).getDefaultValue();\n-        }\n-        return \"<no default>\";\n-    }\n-\n-    private Optional<ConfigValue> findConfigValue( String setting )\n-    {\n-        return configOptions.stream().map( it -> it.asConfigValues( params ) ).flatMap( List::stream )\n-                .filter( it -> it.name().equals( setting ) ).findFirst();\n-    }\n-\n-    /**\n-     * Register a listener for dynamic updates to the given setting.\n-     * <p>\n-     * The listener will get called whenever the {@link #updateDynamicSetting(String, String, String)} method is used\n-     * to change the given setting, and the listener will be supplied the parsed values of the old and the new\n-     * configuration value.\n-     *\n-     * @param setting The {@link Setting} to listen for changes to.\n-     * @param listener The listener callback that will be notified of any configuration changes to the given setting.\n-     * @param <V> The value type of the setting.\n-     */\n-    public <V> void registerDynamicUpdateListener( Setting<V> setting, BiConsumer<V,V> listener )\n-    {\n-        String settingName = setting.name();\n-        verifyValidDynamicSetting( settingName );\n-        BiConsumer<String,String> projectedListener = ( oldValStr, newValStr ) ->\n-        {\n-            try\n-            {\n-                V oldVal = setting.apply( s -> oldValStr );\n-                V newVal = setting.apply( s -> newValStr );\n-                listener.accept( oldVal, newVal );\n-            }\n-            catch ( Exception e )\n-            {\n-                log.error( \"Failure when notifying listeners after dynamic setting change; \" +\n-                           \"new setting might not have taken effect: \" + e.getMessage(), e );\n-            }\n-        };\n-        updateListeners.computeIfAbsent( settingName, k -> new ConcurrentLinkedQueue<>() ).add( projectedListener );\n-    }\n-\n-    /**\n-     * @return all effective config values\n-     */\n-    public Map<String,ConfigValue> getConfigValues()\n-    {\n-        return configOptions.stream()\n-                .map( it -> it.asConfigValues( params ) )\n-                .flatMap( List::stream )\n-                .collect( Collectors.toMap( ConfigValue::name, it -> it, ( val1, val2 ) ->\n-                {\n-                    throw new RuntimeException( \"Duplicate setting: \" + val1.name() + \": \" + val1 + \" and \" + val2 );\n-                } ) );\n-    }\n-\n-    @Override\n-    public String getDiagnosticsIdentifier()\n-    {\n-        return getClass().getName();\n-    }\n-\n-    @Override\n-    public void acceptDiagnosticsVisitor( Object visitor )\n-    {\n-        // nothing visits configuration\n-    }\n-\n-    @Override\n-    public void dump( DiagnosticsPhase phase, Logger logger )\n-    {\n-        if ( phase.isInitialization() || phase.isExplicitlyRequested() )\n-        {\n-            logger.log( \"Neo4j Kernel properties:\" );\n-            for ( Map.Entry<String,String> param : params.entrySet() )\n-            {\n-                logger.log( \"%s=%s\", param.getKey(), obsfucateIfSecret( param ) );\n-            }\n-        }\n-    }\n-\n-    private String obsfucateIfSecret( Map.Entry<String,String> param )\n-    {\n-        return obsfucateIfSecret( param.getKey(), param.getValue() );\n-    }\n-\n-    private String obsfucateIfSecret( String key, String value )\n+    @Nonnull\n+    public Builder withConfigClasses(final Collection<? extends LoadableConfig> loadableConfigs)\n     {\n-        if ( settingsMap.containsKey( key ) && settingsMap.get( key ).secret() )\n-        {\n-            return Secret.OBSFUCATED;\n-        }\n-        else\n-        {\n-            return value;\n-        }\n+      if (settingsClasses == null)\n+      {\n+        settingsClasses = new ArrayList<>();\n+      }\n+      settingsClasses.addAll(loadableConfigs);\n+      return this;\n     }\n \n     /**\n-     * Migrates and validates all string values in the provided <code>settings</code> map.\n+     * Provide an additional validator. Validators are automatically localed within classes with\n+     * {@link LoadableConfig}, but this allows you to add others.\n      *\n-     * This will update the configuration with the provided values regardless whether errors are encountered or not.\n-     *\n-     * @param settings the settings to migrate and validate.\n-     * @param warnOnUnknownSettings if true method log messages to {@link Config#log}.\n-     * @throws InvalidSettingException when and invalid setting is found and {@link\n-     * GraphDatabaseSettings#strict_config_validation} is true.\n+     * @param validator an additional validator.\n      */\n-    private void migrateAndValidateAndUpdateSettings( Map<String,String> settings, boolean warnOnUnknownSettings )\n-            throws InvalidSettingException\n-    {\n-        Map<String,String> migratedSettings = migrateSettings( settings );\n-        params.putAll( migratedSettings );\n-\n-        List<SettingValidator> settingValidators = configOptions.stream()\n-                .map( ConfigOptions::settingGroup )\n-                .collect( Collectors.toList() );\n-\n-        // Validate settings\n-        Map<String,String> additionalSettings =\n-                new IndividualSettingsValidator( settingValidators, warnOnUnknownSettings ).validate( this, log );\n-        params.putAll( additionalSettings );\n-\n-        // Validate configuration\n-        for ( ConfigurationValidator validator : validators )\n-        {\n-            validator.validate( this, log );\n-        }\n-    }\n-\n-    private Map<String,String> migrateSettings( Map<String,String> settings )\n-    {\n-        return migrator.apply( settings, log );\n-    }\n-\n-    private void warnAboutDeprecations( Map<String,String> userSettings )\n-    {\n-        configOptions.stream()\n-                .flatMap( it -> it.asConfigValues( userSettings ).stream() )\n-                .filter( config -> userSettings.containsKey( config.name() ) && config.deprecated() )\n-                .forEach( c ->\n-                {\n-                    if ( c.replacement().isPresent() )\n-                    {\n-                        log.warn( \"%s is deprecated. Replaced by %s\", c.name(), c.replacement().get() );\n-                    }\n-                    else\n-                    {\n-                        log.warn( \"%s is deprecated.\", c.name() );\n-                    }\n-                } );\n-    }\n-\n     @Nonnull\n-    private static Map<String,String> loadFromFile( @Nonnull File file, @Nonnull Log log )\n+    public Builder withValidator(final ConfigurationValidator validator)\n     {\n-        if ( !file.exists() )\n-        {\n-            log.warn( \"Config file [%s] does not exist.\", file );\n-            return new HashMap<>();\n-        }\n-        try\n-        {\n-            return MapUtil.load( file );\n-        }\n-        catch ( IOException e )\n-        {\n-            log.error( \"Unable to load config file [%s]: %s\", file, e.getMessage() );\n-            return new HashMap<>();\n-        }\n+      this.validators.add(validator);\n+      return this;\n     }\n \n     /**\n-     * @return a list of all connector names like 'http' in 'dbms.connector.http.enabled = true'\n+     * @see Builder#withValidator(ConfigurationValidator)\n      */\n     @Nonnull\n-    public Set<String> allConnectorIdentifiers()\n+    public Builder withValidators(final Collection<ConfigurationValidator> validators)\n     {\n-        return allConnectorIdentifiers( params );\n+      this.validators.addAll(validators);\n+      return this;\n     }\n \n     /**\n-     * @return a list of all connector names like 'http' in 'dbms.connector.http.enabled = true'\n+     * Extends config with defaults for server, i.e. auth and connector settings.\n      */\n     @Nonnull\n-    public Set<String> allConnectorIdentifiers( @Nonnull Map<String,String> params )\n+    public Builder withServerDefaults()\n     {\n-        return identifiersFromGroup( Connector.class );\n-    }\n+      // Add server defaults\n+      HttpConnector http = new HttpConnector(\"http\", NONE);\n+      HttpConnector https = new HttpConnector(\"https\", TLS);\n+      BoltConnector bolt = new BoltConnector(\"bolt\");\n+      overriddenDefaults.put(GraphDatabaseSettings.auth_enabled.name(), TRUE);\n+      overriddenDefaults.put(http.enabled.name(), TRUE);\n+      overriddenDefaults.put(https.enabled.name(), TRUE);\n+      overriddenDefaults.put(bolt.enabled.name(), TRUE);\n \n-    /**\n-     * @return list of all configured bolt connectors\n-     */\n-    @Nonnull\n-    public List<BoltConnector> boltConnectors()\n-    {\n-        return boltConnectors( params ).collect( Collectors.toList() );\n+      // Add server validator\n+      validators.add(new ServerConfigurationValidator());\n+\n+      return this;\n     }\n \n     /**\n-     * @return stream of all configured bolt connectors\n+     * Provide a file for initial configuration. The settings added with the {@link Builder#withSettings(Map)}\n+     * methods will be applied on top of the settings in the file.\n+     *\n+     * @param configFile A configuration file to parse for initial settings.\n      */\n     @Nonnull\n-    private Stream<BoltConnector> boltConnectors( @Nonnull Map<String,String> params )\n+    public Builder withFile(final @Nullable File configFile)\n     {\n-        return allConnectorIdentifiers( params ).stream().map( BoltConnector::new ).filter(\n-                c -> c.group.groupKey.equalsIgnoreCase( \"bolt\" ) || BOLT == c.type.apply( params::get ) );\n+      this.configFile = configFile;\n+      return this;\n     }\n \n     /**\n-     * @return list of all configured bolt connectors which are enabled\n+     * @see Builder#withFile(File)\n      */\n     @Nonnull\n-    public List<BoltConnector> enabledBoltConnectors()\n+    public Builder withFile(final Path configFile)\n     {\n-        return enabledBoltConnectors( params );\n+      return withFile(configFile.toFile());\n     }\n \n     /**\n-     * @return list of all configured bolt connectors which are enabled\n+     * @param configFile an optional configuration file. If not present, this call changes nothing.\n      */\n     @Nonnull\n-    public List<BoltConnector> enabledBoltConnectors( @Nonnull Map<String,String> params )\n+    public Builder withFile(Optional<File> configFile)\n     {\n-        return boltConnectors( params )\n-                .filter( c -> c.enabled.apply( params::get ) )\n-                .collect( Collectors.toList() );\n+      configFile.ifPresent(file -> this.configFile = file);\n+      return this;\n     }\n \n     /**\n-     * @return list of all configured http connectors\n+     * Specifies the neo4j home directory to be set for this particular config. This will modify {@link\n+     * GraphDatabaseSettings#neo4j_home} to the same value as provided. If this is not called, the home directory\n+     * will be set to a system specific default home directory.\n+     *\n+     * @param homeDir The home directory this config belongs to.\n      */\n     @Nonnull\n-    public List<HttpConnector> httpConnectors()\n+    public Builder withHome(final File homeDir)\n     {\n-        return httpConnectors( params ).collect( Collectors.toList() );\n+      initialSettings.put(GraphDatabaseSettings.neo4j_home.name(), homeDir.getAbsolutePath());\n+      return this;\n     }\n \n     /**\n-     * @return stream of all configured http connectors\n+     * @see Builder#withHome(File)\n      */\n     @Nonnull\n-    private Stream<HttpConnector> httpConnectors( @Nonnull Map<String,String> params )\n-    {\n-        return allConnectorIdentifiers( params ).stream()\n-                .map( Connector::new )\n-                .filter( c -> c.group.groupKey.equalsIgnoreCase( \"http\" ) ||\n-                        c.group.groupKey.equalsIgnoreCase( \"https\" ) ||\n-                        HTTP == c.type.apply( params::get ) )\n-                .map( c ->\n-                {\n-                    final String name = c.group.groupKey;\n-                    final Encryption defaultEncryption;\n-                    switch ( name )\n-                    {\n-                    case \"https\":\n-                        defaultEncryption = TLS;\n-                        break;\n-                    case \"http\":\n-                    default:\n-                        defaultEncryption = NONE;\n-                        break;\n-                    }\n-\n-                    return new HttpConnector( name,\n-                            HttpConnectorValidator.encryptionSetting( name, defaultEncryption ).apply( params::get ) );\n-                } );\n+    public Builder withHome(final Path homeDir)\n+    {\n+      return withHome(homeDir.toFile());\n     }\n \n     /**\n-     * @return list of all configured http connectors which are enabled\n+     * This will force all connectors to be disabled during creation of the config. This can be useful if an\n+     * offline mode is wanted, e.g. in dbms tools or test environments.\n      */\n     @Nonnull\n-    public List<HttpConnector> enabledHttpConnectors()\n+    public Builder withConnectorsDisabled()\n     {\n-        return enabledHttpConnectors( params );\n+      connectorsDisabled = true;\n+      return this;\n     }\n \n     /**\n-     * @return list of all configured http connectors which are enabled\n+     * @return The config reflecting the state of the builder.\n+     * @throws InvalidSettingException is thrown if an invalid setting is encountered and {@link\n+     *                                 GraphDatabaseSettings#strict_config_validation} is true.\n      */\n     @Nonnull\n-    private List<HttpConnector> enabledHttpConnectors( @Nonnull Map<String,String> params )\n-    {\n-        return httpConnectors( params )\n-                .filter( c -> c.enabled.apply( params::get ) )\n-                .collect( Collectors.toList() );\n-    }\n+    public Config build() throws InvalidSettingException\n+    {\n+      List<LoadableConfig> loadableConfigs =\n+          Optional.ofNullable(settingsClasses).orElseGet(LoadableConfig::allConfigClasses);\n+\n+      // If reading from a file, make sure we always have a neo4j_home\n+      if (configFile != null && !initialSettings.containsKey(GraphDatabaseSettings.neo4j_home.name()))\n+      {\n+        initialSettings.put(GraphDatabaseSettings.neo4j_home.name(), System.getProperty(\"user.dir\"));\n+      }\n+\n+      Config config = new Config(configFile, initialSettings, overriddenDefaults, validators, loadableConfigs);\n+\n+      if (connectorsDisabled)\n+      {\n+        config.augment(config.allConnectorIdentifiers().stream().collect(\n+            Collectors.toMap(id -> new Connector(id).enabled.name(), id -> Settings.FALSE)));\n+      }\n+\n+      return config;\n+    }\n+  }\n+\n+  @Nonnull\n+  public static Builder builder()\n+  {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Convenient method for starting building from a file.\n+   */\n+  @Nonnull\n+  public static Builder fromFile(@Nullable final File configFile)\n+  {\n+    return builder().withFile(configFile);\n+  }\n+\n+  /**\n+   * Convenient method for starting building from a file.\n+   */\n+  @Nonnull\n+  public static Builder fromFile(@Nonnull final Path configFile)\n+  {\n+    return builder().withFile(configFile);\n+  }\n+\n+  /**\n+   * Convenient method for starting building from initial settings.\n+   */\n+  @Nonnull\n+  public static Builder fromSettings(final Map<String, String> initialSettings)\n+  {\n+    return builder().withSettings(initialSettings);\n+  }\n+\n+  /**\n+   * @return a configuration with default values.\n+   */\n+  @Nonnull\n+  public static Config defaults()\n+  {\n+    return builder().build();\n+  }\n+\n+  /**\n+   * @param initialSettings a map with settings to be present in the config.\n+   * @return a configuration with default values augmented with the provided <code>initialSettings</code>.\n+   */\n+  @Nonnull\n+  public static Config defaults(@Nonnull final Map<String, String> initialSettings)\n+  {\n+    return builder().withSettings(initialSettings).build();\n+  }\n+\n+  /**\n+   * Constructs a <code>Config</code> with default values and sets the supplied <code>setting</code> to the <code>value</code>.\n+   *\n+   * @param setting The initial setting to use.\n+   * @param value   The initial value to give the setting.\n+   */\n+  @Nonnull\n+  public static Config defaults(@Nonnull final Setting<?> setting, final String value)\n+  {\n+    return builder().withSetting(setting, value).build();\n+  }\n+\n+  private Config(File configFile,\n+                 Map<String, String> initialSettings,\n+                 Map<String, String> overriddenDefaults,\n+                 Collection<ConfigurationValidator> additionalValidators,\n+                 List<LoadableConfig> settingsClasses)\n+  {\n+    configOptions = settingsClasses.stream()\n+        .map(LoadableConfig::getConfigOptions)\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+\n+    settingsMap = new HashMap<>();\n+    configOptions.stream()\n+        .map(ConfigOptions::settingGroup)\n+        .filter(BaseSetting.class::isInstance)\n+        .map(BaseSetting.class::cast)\n+        .forEach(setting -> settingsMap.put(setting.name(), setting));\n+\n+    validators.addAll(additionalValidators);\n+    migrator = new AnnotationBasedConfigurationMigrator(settingsClasses);\n+    this.overriddenDefaults.putAll(overriddenDefaults);\n+\n+    boolean fromFile = configFile != null;\n+    if (fromFile)\n+    {\n+      loadFromFile(configFile, log).forEach(initialSettings::putIfAbsent);\n+    }\n+\n+    overriddenDefaults.forEach(initialSettings::putIfAbsent);\n+\n+    migrateAndValidateAndUpdateSettings(initialSettings, fromFile);\n+\n+    // Only warn for deprecations if red from a file\n+    if (fromFile)\n+    {\n+      warnAboutDeprecations(params);\n+    }\n+  }\n+\n+  /**\n+   * Retrieves a configuration value. If no value is configured, a default value will be returned instead. Note that\n+   * {@code null} is a valid value.\n+   *\n+   * @param setting The configuration property.\n+   * @param <T>     the underlying type of the setting.\n+   * @return the value of the given setting, {@code null} can be returned.\n+   */\n+  @Override\n+  public <T> T get(Setting<T> setting)\n+  {\n+    return setting.apply(params::get);\n+  }\n+\n+  /**\n+   * Test whether a setting is configured or not. Can be used to check if default value will be returned or not.\n+   *\n+   * @param setting The setting to check.\n+   * @return {@code true} if the setting is configures, {@code false} otherwise implying that the default value will\n+   * be returned if applicable.\n+   */\n+  public boolean isConfigured(Setting<?> setting)\n+  {\n+    return params.containsKey(setting.name());\n+  }\n+\n+  /**\n+   * Returns the currently configured identifiers for grouped settings.\n+   * <p>\n+   * Identifiers for groups exists to allow multiple configured settings of the same setting type.\n+   * E.g. giving that prefix of a group is {@code dbms.ssl.policy} and the following settings are configured:\n+   * <ul>\n+   * <li> {@code dbms.ssl.policy.default.base_directory}\n+   * <li> {@code dbms.ssl.policy.other.base_directory}\n+   * </ul>\n+   * a call to this will method return {@code [\"default\", \"other\"]}.\n+   * <p>\n+   * The key difference to these identifiers are that they are only known at runtime after a valid configuration is\n+   * parsed and validated.\n+   *\n+   * @param groupClass A class that represents a setting group. Must be annotated with {@link Group}\n+   * @return A set of configured identifiers for the given group.\n+   * @throws IllegalArgumentException if the provided class is not annotated with {@link Group}.\n+   */\n+  public Set<String> identifiersFromGroup(Class<?> groupClass)\n+  {\n+    if (!groupClass.isAnnotationPresent(Group.class))\n+    {\n+      throw new IllegalArgumentException(\"Class must be annotated with @Group\");\n+    }\n+\n+    String prefix = groupClass.getAnnotation(Group.class).value();\n+    Pattern pattern = Pattern.compile(Pattern.quote(prefix) + \"\\\\.([^.]+)\\\\.(.+)\");\n+\n+    Set<String> identifiers = new TreeSet<>();\n+    for (String setting : params.keySet())\n+    {\n+      Matcher matcher = pattern.matcher(setting);\n+      if (matcher.matches())\n+      {\n+        identifiers.add(matcher.group(1));\n+      }\n+    }\n+    return identifiers;\n+  }\n+\n+  /**\n+   * Augment the existing config with new settings, overriding any conflicting settings, but keeping all old\n+   * non-overlapping ones.\n+   *\n+   * @param settings to add and override.\n+   * @throws InvalidSettingException when and invalid setting is found and {@link\n+   *                                 GraphDatabaseSettings#strict_config_validation} is true.\n+   */\n+  public void augment(Map<String, String> settings) throws InvalidSettingException\n+  {\n+    migrateAndValidateAndUpdateSettings(settings, false);\n+  }\n+\n+  /**\n+   * @see Config#augment(Map)\n+   */\n+  public void augment(String setting, String value) throws InvalidSettingException\n+  {\n+    augment(singletonMap(setting, value));\n+  }\n+\n+  /**\n+   * @see Config#augment(Map)\n+   */\n+  public void augment(Setting<?> setting, String value)\n+  {\n+    augment(setting.name(), value);\n+  }\n+\n+  /**\n+   * Augment the existing config with new settings, overriding any conflicting settings, but keeping all old\n+   * non-overlapping ones.\n+   *\n+   * @param config config to add and override with.\n+   * @throws InvalidSettingException when and invalid setting is found and {@link\n+   *                                 GraphDatabaseSettings#strict_config_validation} is true.\n+   */\n+  public void augment(Config config) throws InvalidSettingException\n+  {\n+    augment(config.params);\n+  }\n+\n+  /**\n+   * Augment the existing config with new settings, ignoring any conflicting settings.\n+   *\n+   * @param setting settings to add and override\n+   * @throws InvalidSettingException when and invalid setting is found and {@link\n+   *                                 GraphDatabaseSettings#strict_config_validation} is true.\n+   */\n+  public void augmentDefaults(Setting<?> setting, String value) throws InvalidSettingException\n+  {\n+    overriddenDefaults.put(setting.name(), value);\n+    params.putIfAbsent(setting.name(), value);\n+  }\n+\n+  /**\n+   * Specify a log where errors and warnings will be reported. Log messages that happens prior to setting a logger\n+   * will be buffered and replayed onto the first logger that is set.\n+   *\n+   * @param log to use.\n+   */\n+  public void setLogger(Log log)\n+  {\n+    if (this.log instanceof BufferingLog)\n+    {\n+      ((BufferingLog) this.log).replayInto(log);\n+    }\n+    this.log = log;\n+  }\n+\n+  /**\n+   * @param key to lookup in the config\n+   * @return the value or none if it doesn't exist in the config\n+   */\n+  public Optional<String> getRaw(@Nonnull String key)\n+  {\n+    return Optional.ofNullable(params.get(key));\n+  }\n+\n+  /**\n+   * @return a copy of the raw configuration map\n+   */\n+  public Map<String, String> getRaw()\n+  {\n+    return new HashMap<>(params);\n+  }\n+\n+  /**\n+   * @return a configured setting\n+   */\n+  public Optional<Object> getValue(@Nonnull String key)\n+  {\n+    return configOptions.stream()\n+        .map(it -> it.asConfigValues(params))\n+        .flatMap(List::stream)\n+        .filter(it -> it.name().equals(key))\n+        .map(ConfigValue::value)\n+        .findFirst()\n+        .orElseGet(Optional::empty);\n+  }\n+\n+  /**\n+   * Updates a provided setting to a given value. This method is intended to be used for changing settings during\n+   * runtime. If you want to change settings at startup, use {@link Config#augment}.\n+   *\n+   * @param setting The setting to set to the specified value.\n+   * @param update  The new value to set, passing {@code null} or the empty string should reset the value back to default value.\n+   * @param origin  The source of the change, e.g. {@code dbms.setConfigValue()}.\n+   * @throws IllegalArgumentException if the provided setting is unknown or not dynamic.\n+   * @throws InvalidSettingException  if the value is not formatted correctly.\n+   * @implNote No migration or config validation is done. If you need this you have to refactor this method.\n+   */\n+  public void updateDynamicSetting(String setting, String update, String origin)\n+      throws IllegalArgumentException, InvalidSettingException\n+  {\n+    verifyValidDynamicSetting(setting);\n+\n+    synchronized (params)\n+    {\n+      boolean oldValueIsDefault = false;\n+      boolean newValueIsDefault = false;\n+      String oldValue;\n+      String newValue;\n+      if (update == null || update.isEmpty())\n+      {\n+        // Empty means we want to delete the configured value and fallback to the default value\n+        String overriddenDefault = overriddenDefaults.get(setting);\n+        boolean hasDefault = overriddenDefault != null;\n+        oldValue = hasDefault ? params.put(setting, overriddenDefault) : params.remove(setting);\n+        newValue = getDefaultValueOf(setting);\n+        newValueIsDefault = true;\n+      } else\n+      {\n+        // Change setting, make sure it's valid\n+        Map<String, String> newEntry = stringMap(setting, update);\n+        List<SettingValidator> settingValidators = configOptions.stream()\n+            .map(ConfigOptions::settingGroup)\n+            .collect(Collectors.toList());\n+        for (SettingValidator validator : settingValidators)\n+        {\n+          validator.validate(newEntry, ignore -> {\n+          }); // Throws if invalid\n+        }\n \n-    @Override\n-    public String toString()\n-    {\n-        return params.entrySet().stream()\n-                .sorted( Comparator.comparing( Map.Entry::getKey ) )\n-                .map( entry -> entry.getKey() + \"=\" + obsfucateIfSecret( entry ) )\n-                .collect( Collectors.joining( \", \") );\n-    }\n+        String previousValue = params.put(setting, update);\n+        if (previousValue != null)\n+        {\n+          oldValue = previousValue;\n+        } else\n+        {\n+          oldValue = getDefaultValueOf(setting);\n+          oldValueIsDefault = true;\n+        }\n+        newValue = update;\n+      }\n+\n+      String oldValueForLog = obsfucateIfSecret(setting, oldValue);\n+      String newValueForLog = obsfucateIfSecret(setting, newValue);\n+      log.info(\"Setting changed: '%s' changed from '%s' to '%s' via '%s'\",\n+          setting, oldValueIsDefault ? \"default (\" + oldValueForLog + \")\" : oldValueForLog,\n+          newValueIsDefault ? \"default (\" + newValueForLog + \")\" : newValueForLog, origin);\n+      updateListeners.getOrDefault(setting, emptyList()).forEach(l -> l.accept(oldValue, newValue));\n+    }\n+  }\n+\n+  private void verifyValidDynamicSetting(String setting)\n+  {\n+    Optional<ConfigValue> option = findConfigValue(setting);\n+\n+    if (!option.isPresent())\n+    {\n+      throw new IllegalArgumentException(\"Unknown setting: \" + setting);\n+    }\n+\n+    ConfigValue configValue = option.get();\n+    if (!configValue.dynamic())\n+    {\n+      throw new IllegalArgumentException(\"Setting is not dynamic and can not be changed at runtime\");\n+    }\n+  }\n+\n+  private String getDefaultValueOf(String setting)\n+  {\n+    if (overriddenDefaults.containsKey(setting))\n+    {\n+      return overriddenDefaults.get(setting);\n+    }\n+    if (settingsMap.containsKey(setting))\n+    {\n+      return settingsMap.get(setting).getDefaultValue();\n+    }\n+    return \"<no default>\";\n+  }\n+\n+  private Optional<ConfigValue> findConfigValue(String setting)\n+  {\n+    return configOptions.stream().map(it -> it.asConfigValues(params)).flatMap(List::stream)\n+        .filter(it -> it.name().equals(setting)).findFirst();\n+  }\n+\n+  /**\n+   * Register a listener for dynamic updates to the given setting.\n+   * <p>\n+   * The listener will get called whenever the {@link #updateDynamicSetting(String, String, String)} method is used\n+   * to change the given setting, and the listener will be supplied the parsed values of the old and the new\n+   * configuration value.\n+   *\n+   * @param setting  The {@link Setting} to listen for changes to.\n+   * @param listener The listener callback that will be notified of any configuration changes to the given setting.\n+   * @param <V>      The value type of the setting.\n+   */\n+  public <V> void registerDynamicUpdateListener(Setting<V> setting, BiConsumer<V, V> listener)\n+  {\n+    String settingName = setting.name();\n+    verifyValidDynamicSetting(settingName);\n+    BiConsumer<String, String> projectedListener = (oldValStr, newValStr) ->\n+    {\n+      try\n+      {\n+        V oldVal = setting.apply(s -> oldValStr);\n+        V newVal = setting.apply(s -> newValStr);\n+        listener.accept(oldVal, newVal);\n+      } catch (Exception e)\n+      {\n+        log.error(\"Failure when notifying listeners after dynamic setting change; \" +\n+            \"new setting might not have taken effect: \" + e.getMessage(), e);\n+      }\n+    };\n+    updateListeners.computeIfAbsent(settingName, k -> new ConcurrentLinkedQueue<>()).add(projectedListener);\n+  }\n+\n+  /**\n+   * @return all effective config values\n+   */\n+  public Map<String, ConfigValue> getConfigValues()\n+  {\n+    return configOptions.stream()\n+        .map(it -> it.asConfigValues(params))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toMap(ConfigValue::name, it -> it, (val1, val2) ->\n+        {\n+          throw new RuntimeException(\"Duplicate setting: \" + val1.name() + \": \" + val1 + \" and \" + val2);\n+        }));\n+  }\n+\n+  @Override\n+  public String getDiagnosticsIdentifier()\n+  {\n+    return getClass().getName();\n+  }\n+\n+  @Override\n+  public void acceptDiagnosticsVisitor(Object visitor)\n+  {\n+    // nothing visits configuration\n+  }\n+\n+  @Override\n+  public void dump(DiagnosticsPhase phase, Logger logger)\n+  {\n+    if (phase.isInitialization() || phase.isExplicitlyRequested())\n+    {\n+      logger.log(\"Neo4j Kernel properties:\");\n+      for (Map.Entry<String, String> param : params.entrySet())\n+      {\n+        logger.log(\"%s=%s\", param.getKey(), obsfucateIfSecret(param));\n+      }\n+    }\n+  }\n+\n+  private String obsfucateIfSecret(Map.Entry<String, String> param)\n+  {\n+    return obsfucateIfSecret(param.getKey(), param.getValue());\n+  }\n+\n+  private String obsfucateIfSecret(String key, String value)\n+  {\n+    if (settingsMap.containsKey(key) && settingsMap.get(key).secret())\n+    {\n+      return Secret.OBSFUCATED;\n+    } else\n+    {\n+      return value;\n+    }\n+  }\n+\n+  /**\n+   * Migrates and validates all string values in the provided <code>settings</code> map.\n+   * <p>\n+   * This will update the configuration with the provided values regardless whether errors are encountered or not.\n+   *\n+   * @param settings              the settings to migrate and validate.\n+   * @param warnOnUnknownSettings if true method log messages to {@link Config#log}.\n+   * @throws InvalidSettingException when and invalid setting is found and {@link\n+   *                                 GraphDatabaseSettings#strict_config_validation} is true.\n+   */\n+  private void migrateAndValidateAndUpdateSettings(Map<String, String> settings, boolean warnOnUnknownSettings)\n+      throws InvalidSettingException\n+  {\n+    Map<String, String> migratedSettings = migrateSettings(settings);\n+    params.putAll(migratedSettings);\n+\n+    List<SettingValidator> settingValidators = configOptions.stream()\n+        .map(ConfigOptions::settingGroup)\n+        .collect(Collectors.toList());\n+\n+    // Validate settings\n+    Map<String, String> additionalSettings =\n+        new IndividualSettingsValidator(settingValidators, warnOnUnknownSettings).validate(this, log);\n+    params.putAll(additionalSettings);\n+\n+    // Validate configuration\n+    for (ConfigurationValidator validator : validators)\n+    {\n+      validator.validate(this, log);\n+    }\n+  }\n+\n+  private Map<String, String> migrateSettings(Map<String, String> settings)\n+  {\n+    return migrator.apply(settings, log);\n+  }\n+\n+  private void warnAboutDeprecations(Map<String, String> userSettings)\n+  {\n+    configOptions.stream()\n+        .flatMap(it -> it.asConfigValues(userSettings).stream())\n+        .filter(config -> userSettings.containsKey(config.name()) && config.deprecated())\n+        .forEach(c ->\n+        {\n+          if (c.replacement().isPresent())\n+          {\n+            log.warn(\"%s is deprecated. Replaced by %s\", c.name(), c.replacement().get());\n+          } else\n+          {\n+            log.warn(\"%s is deprecated.\", c.name());\n+          }\n+        });\n+  }\n+\n+  @Nonnull\n+  private static Map<String, String> loadFromFile(@Nonnull File file, @Nonnull Log log)\n+  {\n+    if (!file.exists())\n+    {\n+      log.warn(\"Config file [%s] does not exist.\", file);\n+      return new HashMap<>();\n+    }\n+    try\n+    {\n+      return MapUtil.load(file);\n+    } catch (IOException e)\n+    {\n+      log.error(\"Unable to load config file [%s]: %s\", file, e.getMessage());\n+      return new HashMap<>();\n+    }\n+  }\n+\n+  /**\n+   * @return a list of all connector names like 'http' in 'dbms.connector.http.enabled = true'\n+   */\n+  @Nonnull\n+  public Set<String> allConnectorIdentifiers()\n+  {\n+    return allConnectorIdentifiers(params);\n+  }\n+\n+  /**\n+   * @return a list of all connector names like 'http' in 'dbms.connector.http.enabled = true'\n+   */\n+  @Nonnull\n+  public Set<String> allConnectorIdentifiers(@Nonnull Map<String, String> params)\n+  {\n+    return identifiersFromGroup(Connector.class);\n+  }\n+\n+  /**\n+   * @return list of all configured bolt connectors\n+   */\n+  @Nonnull\n+  public List<BoltConnector> boltConnectors()\n+  {\n+    return boltConnectors(params).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @return stream of all configured bolt connectors\n+   */\n+  @Nonnull\n+  private Stream<BoltConnector> boltConnectors(@Nonnull Map<String, String> params)\n+  {\n+    return allConnectorIdentifiers(params).stream().map(BoltConnector::new).filter(\n+        c -> c.group.groupKey.equalsIgnoreCase(\"bolt\") || BOLT == c.type.apply(params::get));\n+  }\n+\n+  /**\n+   * @return list of all configured bolt connectors which are enabled\n+   */\n+  @Nonnull\n+  public List<BoltConnector> enabledBoltConnectors()\n+  {\n+    return enabledBoltConnectors(params);\n+  }\n+\n+  /**\n+   * @return list of all configured bolt connectors which are enabled\n+   */\n+  @Nonnull\n+  public List<BoltConnector> enabledBoltConnectors(@Nonnull Map<String, String> params)\n+  {\n+    return boltConnectors(params)\n+        .filter(c -> c.enabled.apply(params::get))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @return list of all configured http connectors\n+   */\n+  @Nonnull\n+  public List<HttpConnector> httpConnectors()\n+  {\n+    return httpConnectors(params).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @return stream of all configured http connectors\n+   */\n+  @Nonnull\n+  private Stream<HttpConnector> httpConnectors(@Nonnull Map<String, String> params)\n+  {\n+    return allConnectorIdentifiers(params).stream()\n+        .map(Connector::new)\n+        .filter(c -> c.group.groupKey.equalsIgnoreCase(\"http\") ||\n+            c.group.groupKey.equalsIgnoreCase(\"https\") ||\n+            HTTP == c.type.apply(params::get))\n+        .map(c ->\n+        {\n+          final String name = c.group.groupKey;\n+          final Encryption defaultEncryption;\n+          switch (name)\n+          {\n+            case \"https\":\n+              defaultEncryption = TLS;\n+              break;\n+            case \"http\":\n+            default:\n+              defaultEncryption = NONE;\n+              break;\n+          }\n+\n+          return new HttpConnector(name,\n+              HttpConnectorValidator.encryptionSetting(name, defaultEncryption).apply(params::get));\n+        });\n+  }\n+\n+  /**\n+   * @return list of all configured http connectors which are enabled\n+   */\n+  @Nonnull\n+  public List<HttpConnector> enabledHttpConnectors()\n+  {\n+    return enabledHttpConnectors(params);\n+  }\n+\n+  /**\n+   * @return list of all configured http connectors which are enabled\n+   */\n+  @Nonnull\n+  private List<HttpConnector> enabledHttpConnectors(@Nonnull Map<String, String> params)\n+  {\n+    return httpConnectors(params)\n+        .filter(c -> c.enabled.apply(params::get))\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return params.entrySet().stream()\n+        .sorted(Comparator.comparing(Map.Entry::getKey))\n+        .map(entry -> entry.getKey() + \"=\" + obsfucateIfSecret(entry))\n+        .collect(Collectors.joining(\", \"));\n+  }\n }\n",
            "diff_size": 1489
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "302",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "372",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "376",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "556",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "682",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "693",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "775",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "841",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "877",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "877",
                    "column": "138",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "919",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/923/Config.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/923/Config.java\nindex 80beb787eb1..5f24c615940 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/923/Config.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/923/Config.java\n@@ -81,8 +81,7 @@ import static org.neo4j.kernel.configuration.Settings.TRUE;\n public class Config implements DiagnosticsProvider, Configuration\n {\n     public static final String DEFAULT_CONFIG_FILE_NAME = \"neo4j.conf\";\n-\n-    private final List<ConfigOptions> configOptions;\n+private final List<ConfigOptions> configOptions;\n \n     private final Map<String,String> params = new CopyOnWriteHashMap<>(); // Read heavy workload\n     private final Map<String, Collection<BiConsumer<String,String>>> updateListeners = new ConcurrentHashMap<>();\n@@ -213,8 +212,7 @@ public class Config implements DiagnosticsProvider, Configuration\n \n             // Add server validator\n             validators.add( new ServerConfigurationValidator() );\n-\n-            return this;\n+return this;\n         }\n \n         /**\n@@ -291,21 +289,17 @@ public class Config implements DiagnosticsProvider, Configuration\n         @Nonnull\n         public Config build() throws InvalidSettingException\n         {\n-            List<LoadableConfig> loadableConfigs =\n-                    Optional.ofNullable( settingsClasses ).orElseGet( LoadableConfig::allConfigClasses );\n-\n-            // If reading from a file, make sure we always have a neo4j_home\n+            List<LoadableConfig> loadableConfigs = Optional.ofNullable( settingsClasses ).orElseGet( LoadableConfig::allConfigClasses );\n+    // If reading from a file, make sure we always have a neo4j_home\n             if ( configFile != null && !initialSettings.containsKey( GraphDatabaseSettings.neo4j_home.name() ) )\n             {\n                 initialSettings.put( GraphDatabaseSettings.neo4j_home.name(), System.getProperty( \"user.dir\" ) );\n             }\n \n             Config config = new Config( configFile, initialSettings, overriddenDefaults, validators, loadableConfigs );\n-\n-            if ( connectorsDisabled )\n+if ( connectorsDisabled )\n             {\n-                config.augment( config.allConnectorIdentifiers().stream().collect(\n-                        Collectors.toMap( id -> new Connector( id ).enabled.name(), id -> Settings.FALSE ) ) );\n+                config.augment( config.allConnectorIdentifiers().stream().collect( Collectors.toMap( id -> new Connector( id ).enabled.name(), id -> Settings.FALSE ) ) );\n             }\n \n             return config;\n@@ -375,25 +369,12 @@ public class Config implements DiagnosticsProvider, Configuration\n         return builder().withSetting( setting, value ).build();\n     }\n \n-    private Config( File configFile,\n-            Map<String,String> initialSettings,\n-            Map<String,String> overriddenDefaults,\n-            Collection<ConfigurationValidator> additionalValidators,\n-            List<LoadableConfig> settingsClasses )\n+    private Config( File configFile, Map<String,String> initialSettings, Map<String,String> overriddenDefaults, Collection<ConfigurationValidator> additionalValidators, List<LoadableConfig> settingsClasses )\n     {\n-        configOptions = settingsClasses.stream()\n-                .map( LoadableConfig::getConfigOptions )\n-                .flatMap( List::stream )\n-                .collect( Collectors.toList() );\n-\n-        settingsMap = new HashMap<>();\n-        configOptions.stream()\n-                .map( ConfigOptions::settingGroup )\n-                .filter( BaseSetting.class::isInstance )\n-                .map( BaseSetting.class::cast )\n-                .forEach( setting -> settingsMap.put( setting.name(), setting ) );\n-\n-        validators.addAll( additionalValidators );\n+        configOptions = settingsClasses.stream().map( LoadableConfig::getConfigOptions ).flatMap( List::stream ).collect( Collectors.toList() );\n+settingsMap = new HashMap<>();\n+        configOptions.stream().map( ConfigOptions::settingGroup ).filter( BaseSetting.class::isInstance ).map( BaseSetting.class::cast ).forEach( setting -> settingsMap.put( setting.name(), setting ) );\n+validators.addAll( additionalValidators );\n         migrator = new AnnotationBasedConfigurationMigrator( settingsClasses );\n         this.overriddenDefaults.putAll( overriddenDefaults );\n \n@@ -572,13 +553,7 @@ public class Config implements DiagnosticsProvider, Configuration\n      */\n     public Optional<Object> getValue( @Nonnull String key )\n     {\n-        return configOptions.stream()\n-                .map( it -> it.asConfigValues( params ) )\n-                .flatMap( List::stream )\n-                .filter( it -> it.name().equals( key ) )\n-                .map( ConfigValue::value )\n-                .findFirst()\n-                .orElseGet( Optional::empty );\n+        return configOptions.stream().map( it -> it.asConfigValues( params ) ).flatMap( List::stream ).filter( it -> it.name().equals( key ) ).map( ConfigValue::value ).findFirst().orElseGet( Optional::empty );\n     }\n \n     /**\n@@ -593,9 +568,8 @@ public class Config implements DiagnosticsProvider, Configuration\n      * @throws IllegalArgumentException if the provided setting is unknown or not dynamic.\n      * @throws InvalidSettingException if the value is not formatted correctly.\n      */\n-    public void updateDynamicSetting( String setting, String update, String origin )\n-            throws IllegalArgumentException, InvalidSettingException\n-    {\n+    public void updateDynamicSetting( String setting, String update, String origin ) throws IllegalArgumentException, InvalidSettingException\n+{\n         verifyValidDynamicSetting( setting );\n \n         synchronized ( params )\n@@ -617,10 +591,8 @@ public class Config implements DiagnosticsProvider, Configuration\n             {\n                 // Change setting, make sure it's valid\n                 Map<String,String> newEntry = stringMap( setting, update );\n-                List<SettingValidator> settingValidators = configOptions.stream()\n-                                                                        .map( ConfigOptions::settingGroup )\n-                                                                        .collect( Collectors.toList() );\n-                for ( SettingValidator validator : settingValidators )\n+                List<SettingValidator> settingValidators = configOptions.stream().map( ConfigOptions::settingGroup ).collect( Collectors.toList() );\n+for ( SettingValidator validator : settingValidators )\n                 {\n                     validator.validate( newEntry, ignore -> {} ); // Throws if invalid\n                 }\n@@ -635,7 +607,8 @@ public class Config implements DiagnosticsProvider, Configuration\n                     oldValue = getDefaultValueOf( setting );\n                     oldValueIsDefault = true;\n                 }\n-                newValue = update;\n+\n+newValue = update;\n             }\n \n             String oldValueForLog = obsfucateIfSecret( setting, oldValue );\n@@ -643,15 +616,14 @@ public class Config implements DiagnosticsProvider, Configuration\n             log.info( \"Setting changed: '%s' changed from '%s' to '%s' via '%s'\",\n                     setting, oldValueIsDefault ? \"default (\" + oldValueForLog + \")\" : oldValueForLog,\n                     newValueIsDefault ? \"default (\" + newValueForLog + \")\" : newValueForLog, origin );\n-            updateListeners.getOrDefault( setting, emptyList() ).forEach( l -> l.accept( oldValue, newValue ) );\n+updateListeners.getOrDefault( setting, emptyList() ).forEach( l -> l.accept( oldValue, newValue ) );\n         }\n     }\n \n     private void verifyValidDynamicSetting( String setting )\n     {\n         Optional<ConfigValue> option = findConfigValue( setting );\n-\n-        if ( !option.isPresent() )\n+if ( !option.isPresent() )\n         {\n             throw new IllegalArgumentException( \"Unknown setting: \" + setting );\n         }\n@@ -669,7 +641,8 @@ public class Config implements DiagnosticsProvider, Configuration\n         {\n             return overriddenDefaults.get( setting );\n         }\n-        if ( settingsMap.containsKey( setting ) )\n+\n+if ( settingsMap.containsKey( setting ) )\n         {\n             return settingsMap.get( setting ).getDefaultValue();\n         }\n@@ -678,8 +651,7 @@ public class Config implements DiagnosticsProvider, Configuration\n \n     private Optional<ConfigValue> findConfigValue( String setting )\n     {\n-        return configOptions.stream().map( it -> it.asConfigValues( params ) ).flatMap( List::stream )\n-                .filter( it -> it.name().equals( setting ) ).findFirst();\n+        return configOptions.stream().map( it -> it.asConfigValues( params ) ).flatMap( List::stream ).filter( it -> it.name().equals( setting ) ).findFirst();\n     }\n \n     /**\n@@ -707,9 +679,8 @@ public class Config implements DiagnosticsProvider, Configuration\n             }\n             catch ( Exception e )\n             {\n-                log.error( \"Failure when notifying listeners after dynamic setting change; \" +\n-                           \"new setting might not have taken effect: \" + e.getMessage(), e );\n-            }\n+                log.error( \"Failure when notifying listeners after dynamic setting change; \" + \"new setting might not have taken effect: \" + e.getMessage(), e );\n+    }\n         };\n         updateListeners.computeIfAbsent( settingName, k -> new ConcurrentLinkedQueue<>() ).add( projectedListener );\n     }\n@@ -719,10 +690,7 @@ public class Config implements DiagnosticsProvider, Configuration\n      */\n     public Map<String,ConfigValue> getConfigValues()\n     {\n-        return configOptions.stream()\n-                .map( it -> it.asConfigValues( params ) )\n-                .flatMap( List::stream )\n-                .collect( Collectors.toMap( ConfigValue::name, it -> it, ( val1, val2 ) ->\n+        return configOptions.stream().map( it -> it.asConfigValues( params ) ).flatMap( List::stream ).collect( Collectors.toMap( ConfigValue::name, it -> it, ( val1, val2 ) ->\n                 {\n                     throw new RuntimeException( \"Duplicate setting: \" + val1.name() + \": \" + val1 + \" and \" + val2 );\n                 } ) );\n@@ -780,20 +748,15 @@ public class Config implements DiagnosticsProvider, Configuration\n      * @throws InvalidSettingException when and invalid setting is found and {@link\n      * GraphDatabaseSettings#strict_config_validation} is true.\n      */\n-    private void migrateAndValidateAndUpdateSettings( Map<String,String> settings, boolean warnOnUnknownSettings )\n-            throws InvalidSettingException\n-    {\n+    private void migrateAndValidateAndUpdateSettings( Map<String,String> settings, boolean warnOnUnknownSettings ) throws InvalidSettingException\n+{\n         Map<String,String> migratedSettings = migrateSettings( settings );\n         params.putAll( migratedSettings );\n \n-        List<SettingValidator> settingValidators = configOptions.stream()\n-                .map( ConfigOptions::settingGroup )\n-                .collect( Collectors.toList() );\n-\n-        // Validate settings\n-        Map<String,String> additionalSettings =\n-                new IndividualSettingsValidator( settingValidators, warnOnUnknownSettings ).validate( this, log );\n-        params.putAll( additionalSettings );\n+        List<SettingValidator> settingValidators = configOptions.stream().map( ConfigOptions::settingGroup ).collect( Collectors.toList() );\n+    // Validate settings\n+        Map<String,String> additionalSettings = new IndividualSettingsValidator( settingValidators, warnOnUnknownSettings ).validate( this, log );\n+params.putAll( additionalSettings );\n \n         // Validate configuration\n         for ( ConfigurationValidator validator : validators )\n@@ -809,10 +772,7 @@ public class Config implements DiagnosticsProvider, Configuration\n \n     private void warnAboutDeprecations( Map<String,String> userSettings )\n     {\n-        configOptions.stream()\n-                .flatMap( it -> it.asConfigValues( userSettings ).stream() )\n-                .filter( config -> userSettings.containsKey( config.name() ) && config.deprecated() )\n-                .forEach( c ->\n+        configOptions.stream().flatMap( it -> it.asConfigValues( userSettings ).stream() ).filter( config -> userSettings.containsKey( config.name() ) && config.deprecated() ).forEach( c ->\n                 {\n                     if ( c.replacement().isPresent() )\n                     {\n@@ -833,7 +793,8 @@ public class Config implements DiagnosticsProvider, Configuration\n             log.warn( \"Config file [%s] does not exist.\", file );\n             return new HashMap<>();\n         }\n-        try\n+\n+try\n         {\n             return MapUtil.load( file );\n         }\n@@ -877,8 +838,7 @@ public class Config implements DiagnosticsProvider, Configuration\n     @Nonnull\n     private Stream<BoltConnector> boltConnectors( @Nonnull Map<String,String> params )\n     {\n-        return allConnectorIdentifiers( params ).stream().map( BoltConnector::new ).filter(\n-                c -> c.group.groupKey.equalsIgnoreCase( \"bolt\" ) || BOLT == c.type.apply( params::get ) );\n+        return allConnectorIdentifiers( params ).stream().map( BoltConnector::new ).filter( c -> c.group.groupKey.equalsIgnoreCase( \"bolt\" ) || BOLT == c.type.apply( params::get ) );\n     }\n \n     /**\n@@ -896,9 +856,7 @@ public class Config implements DiagnosticsProvider, Configuration\n     @Nonnull\n     public List<BoltConnector> enabledBoltConnectors( @Nonnull Map<String,String> params )\n     {\n-        return boltConnectors( params )\n-                .filter( c -> c.enabled.apply( params::get ) )\n-                .collect( Collectors.toList() );\n+        return boltConnectors( params ).filter( c -> c.enabled.apply( params::get ) ).collect( Collectors.toList() );\n     }\n \n     /**\n@@ -916,12 +874,8 @@ public class Config implements DiagnosticsProvider, Configuration\n     @Nonnull\n     private Stream<HttpConnector> httpConnectors( @Nonnull Map<String,String> params )\n     {\n-        return allConnectorIdentifiers( params ).stream()\n-                .map( Connector::new )\n-                .filter( c -> c.group.groupKey.equalsIgnoreCase( \"http\" ) ||\n-                        c.group.groupKey.equalsIgnoreCase( \"https\" ) ||\n-                        HTTP == c.type.apply( params::get ) )\n-                .map( c ->\n+        return allConnectorIdentifiers( params ).stream().map( Connector::new ).filter( c -> c.group.groupKey.equalsIgnoreCase( \"http\" ) ||c.group.groupKey.equalsIgnoreCase( \"https\" ) ||\n+                        HTTP == c.type.apply( params::get ) ).map( c ->\n                 {\n                     final String name = c.group.groupKey;\n                     final Encryption defaultEncryption;\n@@ -931,7 +885,7 @@ public class Config implements DiagnosticsProvider, Configuration\n                         defaultEncryption = TLS;\n                         break;\n                     case \"http\":\n-                    default:\n+    default:\n                         defaultEncryption = NONE;\n                         break;\n                     }\n@@ -956,17 +910,12 @@ public class Config implements DiagnosticsProvider, Configuration\n     @Nonnull\n     private List<HttpConnector> enabledHttpConnectors( @Nonnull Map<String,String> params )\n     {\n-        return httpConnectors( params )\n-                .filter( c -> c.enabled.apply( params::get ) )\n-                .collect( Collectors.toList() );\n+        return httpConnectors( params ).filter( c -> c.enabled.apply( params::get ) ).collect( Collectors.toList() );\n     }\n \n     @Override\n     public String toString()\n     {\n-        return params.entrySet().stream()\n-                .sorted( Comparator.comparing( Map.Entry::getKey ) )\n-                .map( entry -> entry.getKey() + \"=\" + obsfucateIfSecret( entry ) )\n-                .collect( Collectors.joining( \", \") );\n+        return params.entrySet().stream().sorted( Comparator.comparing( Map.Entry::getKey ) ).map( entry -> entry.getKey() + \"=\" + obsfucateIfSecret( entry ) ).collect( Collectors.joining( \", \") );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}