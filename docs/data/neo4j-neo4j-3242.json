{
    "project_name": "neo4j-neo4j",
    "error_id": "3242",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "199",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3242/StatementDeserializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3242/StatementDeserializer.java\nindex 523d9b7fd0b..5b38cf6213c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3242/StatementDeserializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3242/StatementDeserializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher.format.input.json;\n \n import com.fasterxml.jackson.core.JsonFactory;\n@@ -46,7 +47,7 @@ import static org.neo4j.internal.helpers.collection.MapUtil.map;\n \n class StatementDeserializer\n {\n-    private static final Map<String,Object> NO_PARAMETERS = unmodifiableMap( map() );\n+    private static final Map<String, Object> NO_PARAMETERS = unmodifiableMap(map());\n \n     private final JsonParser parser;\n     private State state;\n@@ -58,94 +59,90 @@ class StatementDeserializer\n         FINISHED\n     }\n \n-    StatementDeserializer( JsonFactory jsonFactory, InputStream input )\n+    StatementDeserializer(JsonFactory jsonFactory, InputStream input)\n     {\n         try\n         {\n-            this.parser = jsonFactory.createParser( input );\n+            this.parser = jsonFactory.createParser(input);\n             this.state = State.BEFORE_OUTER_ARRAY;\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new IllegalStateException( \"Failed to create a JSON parser\", e );\n+            throw new IllegalStateException(\"Failed to create a JSON parser\", e);\n         }\n     }\n \n     InputStatement read()\n     {\n \n-        switch ( state )\n+        switch (state)\n         {\n-        case BEFORE_OUTER_ARRAY:\n-            if ( !beginsWithCorrectTokens() )\n-            {\n-                return null;\n-            }\n-            state = State.IN_BODY;\n-        case IN_BODY:\n-            String statement = null;\n-            Map<String,Object> parameters = null;\n-            List<Object> resultsDataContents = null;\n-            boolean includeStats = false;\n-            JsonToken tok;\n-\n-            try\n-            {\n-\n-                while ( (tok = parser.nextToken()) != null && tok != END_OBJECT )\n+            case BEFORE_OUTER_ARRAY:\n+                if (!beginsWithCorrectTokens())\n+                {\n+                    return null;\n+                }\n+                state = State.IN_BODY;\n+            case IN_BODY:\n+                String statement = null;\n+                Map<String, Object> parameters = null;\n+                List<Object> resultsDataContents = null;\n+                boolean includeStats = false;\n+                JsonToken tok;\n+\n+                try\n                 {\n-                    if ( tok == END_ARRAY )\n+\n+                    while ((tok = parser.nextToken()) != null && tok != END_OBJECT)\n                     {\n-                        // No more statements\n-                        state = State.FINISHED;\n-                        return null;\n+                        if (tok == END_ARRAY)\n+                        {\n+                            // No more statements\n+                            state = State.FINISHED;\n+                            return null;\n+                        }\n+\n+                        parser.nextValue();\n+                        String currentName = parser.getCurrentName();\n+                        switch (currentName)\n+                        {\n+                            case \"statement\":\n+                                statement = parser.readValueAs(String.class);\n+                                break;\n+                            case \"parameters\":\n+                                parameters = readMap();\n+                                break;\n+                            case \"resultDataContents\":\n+                                resultsDataContents = readArray();\n+                                break;\n+                            case \"includeStats\":\n+                                includeStats = parser.getBooleanValue();\n+                                break;\n+                            default:\n+                                discardValue();\n+                        }\n                     }\n \n-                    parser.nextValue();\n-                    String currentName = parser.getCurrentName();\n-                    switch ( currentName )\n+                    if (statement == null)\n                     {\n-                    case \"statement\":\n-                        statement = parser.readValueAs( String.class );\n-                        break;\n-                    case \"parameters\":\n-                        parameters = readMap();\n-                        break;\n-                    case \"resultDataContents\":\n-                        resultsDataContents = readArray();\n-                        break;\n-                    case \"includeStats\":\n-                        includeStats = parser.getBooleanValue();\n-                        break;\n-                    default:\n-                        discardValue();\n+                        throw new InputFormatException(\"No statement provided.\");\n                     }\n-                }\n-\n-                if ( statement == null )\n+                    return new InputStatement(statement, parameters == null ? NO_PARAMETERS : parameters, includeStats,\n+                      ResultDataContent.fromNames(resultsDataContents));\n+                } catch (JsonParseException e)\n                 {\n-                    throw new InputFormatException( \"No statement provided.\" );\n+                    throw new InputFormatException(\"Could not parse the incoming JSON\", e);\n+                } catch (JsonMappingException e)\n+                {\n+                    throw new InputFormatException(\"Could not map the incoming JSON\", e);\n+                } catch (IOException e)\n+                {\n+                    throw new ConnectionException(\"An error encountered while reading the inbound entity\", e);\n                 }\n-                return new InputStatement( statement, parameters == null ? NO_PARAMETERS : parameters, includeStats,\n-                        ResultDataContent.fromNames( resultsDataContents ) );\n-            }\n-            catch ( JsonParseException e )\n-            {\n-                throw new InputFormatException( \"Could not parse the incoming JSON\", e );\n-            }\n-            catch ( JsonMappingException e )\n-            {\n-                throw new InputFormatException( \"Could not map the incoming JSON\", e );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new ConnectionException( \"An error encountered while reading the inbound entity\", e );\n-            }\n-        case FINISHED:\n-            return null;\n+            case FINISHED:\n+                return null;\n \n-        default:\n-            break;\n+            default:\n+                break;\n         }\n         return null;\n     }\n@@ -153,57 +150,55 @@ class StatementDeserializer\n     private void discardValue() throws IOException\n     {\n         // This could be done without building up an object\n-        parser.readValueAs( Object.class );\n+        parser.readValueAs(Object.class);\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private Map<String,Object> readMap() throws IOException\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> readMap() throws IOException\n     {\n-        return parser.readValueAs( Map.class );\n+        return parser.readValueAs(Map.class);\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n+    @SuppressWarnings(\"unchecked\")\n     private List<Object> readArray() throws IOException\n     {\n-        return parser.readValueAs( List.class );\n+        return parser.readValueAs(List.class);\n     }\n \n     private boolean beginsWithCorrectTokens()\n     {\n-        List<JsonToken> expectedTokens = asList( START_OBJECT, FIELD_NAME, START_ARRAY );\n+        List<JsonToken> expectedTokens = asList(START_OBJECT, FIELD_NAME, START_ARRAY);\n         String expectedField = \"statements\";\n \n         List<JsonToken> foundTokens = new ArrayList<>();\n \n         try\n         {\n-            for ( int i = 0; i < expectedTokens.size(); i++ )\n+            for (int i = 0; i < expectedTokens.size(); i++)\n             {\n                 JsonToken token = parser.nextToken();\n-                if ( i == 0 && token == null )\n+                if (i == 0 && token == null)\n                 {\n                     return false;\n                 }\n-                if ( token == FIELD_NAME && !expectedField.equals( parser.getText() ) )\n+                if (token == FIELD_NAME && !expectedField.equals(parser.getText()))\n                 {\n                     throw new InputFormatException(\n-                            String.format( \"Unable to deserialize request. \" + \"Expected first field to be '%s', but was '%s'.\", expectedField,\n-                                    parser.getText() ) );\n+                      String.format(\"Unable to deserialize request. \" + \"Expected first field to be '%s', but was '%s'.\", expectedField,\n+                        parser.getText()));\n                 }\n-                foundTokens.add( token );\n+                foundTokens.add(token);\n             }\n-            if ( !expectedTokens.equals( foundTokens ) )\n+            if (!expectedTokens.equals(foundTokens))\n             {\n-                throw new InputFormatException( String.format( \"Unable to deserialize request. \" + \"Expected %s, found %s.\", expectedTokens, foundTokens ) );\n+                throw new InputFormatException(String.format(\"Unable to deserialize request. \" + \"Expected %s, found %s.\", expectedTokens, foundTokens));\n             }\n-        }\n-        catch ( JsonParseException e )\n+        } catch (JsonParseException e)\n         {\n-            throw new InputFormatException( \"Could not parse the incoming JSON\", e );\n-        }\n-        catch ( IOException e )\n+            throw new InputFormatException(\"Could not parse the incoming JSON\", e);\n+        } catch (IOException e)\n         {\n-            throw new ConnectionException( \"An error encountered while reading the inbound entity\", e );\n+            throw new ConnectionException(\"An error encountered while reading the inbound entity\", e);\n         }\n         return true;\n     }\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}