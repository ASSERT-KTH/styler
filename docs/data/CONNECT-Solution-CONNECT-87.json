{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.callback.cxf.wss;\n\nimport gov.hhs.fha.nhinc.callback.SamlConstants;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/87/SecurityConfigInInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/87/SecurityConfigInInterceptor.java\nindex 719d04922db..5a3d9d9f5ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/87/SecurityConfigInInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/87/SecurityConfigInInterceptor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.callback.cxf.wss;\n \n import gov.hhs.fha.nhinc.callback.SamlConstants;\n@@ -41,34 +42,33 @@ import org.apache.ws.security.WSSConfig;\n  * This interceptor will override how CXF normally handles the Signature element of the Security header by registering a\n  * CONNECT security processor. That processor will inline all digest and signature values in the Signature element if\n  * they are attached as a reference as otherwise CXF will erroneously consider them as invalid.\n- *\n  */\n public class SecurityConfigInInterceptor extends AbstractPhaseInterceptor<Message> {\n \n-    /**\n-     * Constructor.\n-     */\n-    public SecurityConfigInInterceptor() {\n-        super(Phase.PRE_PROTOCOL);\n+  /**\n+   * Constructor.\n+   */\n+  public SecurityConfigInInterceptor() {\n+    super(Phase.PRE_PROTOCOL);\n \n-        // this needs to run before the following interceptors that process security headers\n-        getBefore().add(WSS4JInInterceptor.class.getName());\n-    }\n+    // this needs to run before the following interceptors that process security headers\n+    getBefore().add(WSS4JInInterceptor.class.getName());\n+  }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see org.apache.cxf.interceptor.Interceptor#handleMessage(org.apache.cxf.message.Message)\n-     */\n-    @Override\n-    public void handleMessage(Message msg) throws Fault {\n-        WSSConfig config = (WSSConfig) msg.getContextualProperty(WSSConfig.class.getName());\n-        if (config == null) {\n-            config = WSSConfig.getNewInstance();\n-        }\n-        config.setProcessor(new QName(SamlConstants.XML_SIGNATURE_NS, SamlConstants.SIGNATURE_TAG),\n-                new CONNECTSignatureProcessor());\n-        msg.setContextualProperty(WSSConfig.class.getName(), config);\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see org.apache.cxf.interceptor.Interceptor#handleMessage(org.apache.cxf.message.Message)\n+   */\n+  @Override\n+  public void handleMessage(Message msg) throws Fault {\n+    WSSConfig config = (WSSConfig) msg.getContextualProperty(WSSConfig.class.getName());\n+    if (config == null) {\n+      config = WSSConfig.getNewInstance();\n     }\n+    config.setProcessor(new QName(SamlConstants.XML_SIGNATURE_NS, SamlConstants.SIGNATURE_TAG),\n+        new CONNECTSignatureProcessor());\n+    msg.setContextualProperty(WSSConfig.class.getName(), config);\n+  }\n \n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/87/SecurityConfigInInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/87/SecurityConfigInInterceptor.java\nindex 719d04922db..016ed92476d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/87/SecurityConfigInInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/87/SecurityConfigInInterceptor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.callback.cxf.wss;\n \n import gov.hhs.fha.nhinc.callback.SamlConstants;\n@@ -66,9 +67,8 @@ public class SecurityConfigInInterceptor extends AbstractPhaseInterceptor<Messag\n         if (config == null) {\n             config = WSSConfig.getNewInstance();\n         }\n-        config.setProcessor(new QName(SamlConstants.XML_SIGNATURE_NS, SamlConstants.SIGNATURE_TAG),\n-                new CONNECTSignatureProcessor());\n-        msg.setContextualProperty(WSSConfig.class.getName(), config);\n+        config.setProcessor(new QName(SamlConstants.XML_SIGNATURE_NS, SamlConstants.SIGNATURE_TAG), new CONNECTSignatureProcessor());\n+msg.setContextualProperty(WSSConfig.class.getName(), config);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/87/SecurityConfigInInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/87/SecurityConfigInInterceptor.java\nindex 719d04922db..cf4f8f19fcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/87/SecurityConfigInInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/87/SecurityConfigInInterceptor.java\n@@ -27,9 +27,7 @@\n package gov.hhs.fha.nhinc.callback.cxf.wss;\n \n import gov.hhs.fha.nhinc.callback.SamlConstants;\n-\n import javax.xml.namespace.QName;\n-\n import org.apache.cxf.interceptor.Fault;\n import org.apache.cxf.message.Message;\n import org.apache.cxf.phase.AbstractPhaseInterceptor;\n@@ -43,32 +41,39 @@ import org.apache.ws.security.WSSConfig;\n  * they are attached as a reference as otherwise CXF will erroneously consider them as invalid.\n  *\n  */\n-public class SecurityConfigInInterceptor extends AbstractPhaseInterceptor<Message> {\n+\n+\n+public class SecurityConfigInInterceptor extends\n+    AbstractPhaseInterceptor<Message> {\n \n     /**\n      * Constructor.\n      */\n+\n+\n     public SecurityConfigInInterceptor() {\n-        super(Phase.PRE_PROTOCOL);\n+                                         super(Phase.PRE_PROTOCOL);\n \n         // this needs to run before the following interceptors that process security headers\n-        getBefore().add(WSS4JInInterceptor.class.getName());\n-    }\n+                                         getBefore().add(WSS4JInInterceptor.class.getName());\n+                                      }\n \n     /*\n      * (non-Javadoc)\n      *\n      * @see org.apache.cxf.interceptor.Interceptor#handleMessage(org.apache.cxf.message.Message)\n      */\n+\n+\n     @Override\n     public void handleMessage(Message msg) throws Fault {\n-        WSSConfig config = (WSSConfig) msg.getContextualProperty(WSSConfig.class.getName());\n+        WSSConfig config = (WSSConfig)\n+                               msg.getContextualProperty(WSSConfig.class.getName());\n         if (config == null) {\n             config = WSSConfig.getNewInstance();\n         }\n-        config.setProcessor(new QName(SamlConstants.XML_SIGNATURE_NS, SamlConstants.SIGNATURE_TAG),\n-                new CONNECTSignatureProcessor());\n+        config.setProcessor(new QName(SamlConstants.XML_SIGNATURE_NS, SamlConstants.SIGNATURE_TAG), new CONNECTSignatureProcessor());\n         msg.setContextualProperty(WSSConfig.class.getName(), config);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}