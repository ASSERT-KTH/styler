{
    "project_name": "graphfoundation-ongdb",
    "error_id": "238",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/238/OnDemandDetailsExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/238/OnDemandDetailsExecutionMonitor.java\nindex c2329ce114d..f57e00903a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/238/OnDemandDetailsExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/238/OnDemandDetailsExecutionMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.io.BufferedReader;\n@@ -70,225 +71,224 @@ import static org.neo4j.helpers.Format.duration;\n  */\n public class OnDemandDetailsExecutionMonitor implements ExecutionMonitor\n {\n-    interface Monitor\n-    {\n-        void detailsPrinted();\n-    }\n+  interface Monitor\n+  {\n+    void detailsPrinted();\n+  }\n \n-    private final List<StageDetails> details = new ArrayList<>();\n-    private final PrintStream out;\n-    private final InputStream in;\n-    private final Map<String,Pair<String,Runnable>> actions = new HashMap<>();\n-    private final VmPauseTimeAccumulator vmPauseTimeAccumulator = new VmPauseTimeAccumulator();\n-    private final VmPauseMonitor vmPauseMonitor;\n-    private final Monitor monitor;\n+  private final List<StageDetails> details = new ArrayList<>();\n+  private final PrintStream out;\n+  private final InputStream in;\n+  private final Map<String, Pair<String, Runnable>> actions = new HashMap<>();\n+  private final VmPauseTimeAccumulator vmPauseTimeAccumulator = new VmPauseTimeAccumulator();\n+  private final VmPauseMonitor vmPauseMonitor;\n+  private final Monitor monitor;\n \n-    private StageDetails current;\n-    private boolean printDetailsOnDone;\n+  private StageDetails current;\n+  private boolean printDetailsOnDone;\n \n-    public OnDemandDetailsExecutionMonitor( PrintStream out, InputStream in, Monitor monitor, JobScheduler jobScheduler )\n-    {\n-        this.out = out;\n-        this.in = in;\n-        this.monitor = monitor;\n-        this.actions.put( \"i\", Pair.of( \"Print more detailed information\", this::printDetails ) );\n-        this.actions.put( \"c\", Pair.of( \"Print more detailed information about current stage\", this::printDetailsForCurrentStage ) );\n-        this.vmPauseMonitor = new VmPauseMonitor( Duration.ofMillis( 100 ), Duration.ofMillis( 100 ),\n-                NullLog.getInstance(), jobScheduler, vmPauseTimeAccumulator );\n-    }\n+  public OnDemandDetailsExecutionMonitor(PrintStream out, InputStream in, Monitor monitor, JobScheduler jobScheduler)\n+  {\n+    this.out = out;\n+    this.in = in;\n+    this.monitor = monitor;\n+    this.actions.put(\"i\", Pair.of(\"Print more detailed information\", this::printDetails));\n+    this.actions.put(\"c\", Pair.of(\"Print more detailed information about current stage\", this::printDetailsForCurrentStage));\n+    this.vmPauseMonitor = new VmPauseMonitor(Duration.ofMillis(100), Duration.ofMillis(100),\n+        NullLog.getInstance(), jobScheduler, vmPauseTimeAccumulator);\n+  }\n \n-    @Override\n-    public void initialize( DependencyResolver dependencyResolver )\n-    {\n-        out.println( \"InteractiveReporterInteractions command list (end with ENTER):\" );\n-        actions.forEach( ( key, action ) -> out.println( \"  \" + key + \": \" + action.first() ) );\n-        out.println();\n-        vmPauseMonitor.start();\n-    }\n+  @Override\n+  public void initialize(DependencyResolver dependencyResolver)\n+  {\n+    out.println(\"InteractiveReporterInteractions command list (end with ENTER):\");\n+    actions.forEach((key, action) -> out.println(\"  \" + key + \": \" + action.first()));\n+    out.println();\n+    vmPauseMonitor.start();\n+  }\n \n-    @Override\n-    public void start( StageExecution execution )\n-    {\n-        details.add( current = new StageDetails( execution, vmPauseTimeAccumulator ) );\n-    }\n+  @Override\n+  public void start(StageExecution execution)\n+  {\n+    details.add(current = new StageDetails(execution, vmPauseTimeAccumulator));\n+  }\n \n-    @Override\n-    public void end( StageExecution execution, long totalTimeMillis )\n-    {\n-        current.collect();\n-    }\n+  @Override\n+  public void end(StageExecution execution, long totalTimeMillis)\n+  {\n+    current.collect();\n+  }\n \n-    @Override\n-    public void done( boolean successful, long totalTimeMillis, String additionalInformation )\n+  @Override\n+  public void done(boolean successful, long totalTimeMillis, String additionalInformation)\n+  {\n+    if (printDetailsOnDone)\n     {\n-        if ( printDetailsOnDone )\n-        {\n-            printDetails();\n-        }\n-        vmPauseMonitor.stop();\n+      printDetails();\n     }\n+    vmPauseMonitor.stop();\n+  }\n \n-    @Override\n-    public long nextCheckTime()\n+  @Override\n+  public long nextCheckTime()\n+  {\n+    return currentTimeMillis() + 500;\n+  }\n+\n+  @Override\n+  public void check(StageExecution execution)\n+  {\n+    current.collect();\n+    reactToUserInput();\n+  }\n+\n+  private void printDetails()\n+  {\n+    printDetailsHeadline();\n+    long totalTime = 0;\n+    for (StageDetails stageDetails : details)\n     {\n-        return currentTimeMillis() + 500;\n+      stageDetails.print(out);\n+      totalTime += stageDetails.totalTimeMillis;\n     }\n \n-    @Override\n-    public void check( StageExecution execution )\n+    printIndented(out, \"Environment information:\");\n+    printIndented(out, \"  Free physical memory: \" + bytes(OsBeanUtil.getFreePhysicalMemory()));\n+    printIndented(out, \"  Max VM memory: \" + bytes(Runtime.getRuntime().maxMemory()));\n+    printIndented(out, \"  Free VM memory: \" + bytes(Runtime.getRuntime().freeMemory()));\n+    printIndented(out, \"  VM stop-the-world time: \" + duration(vmPauseTimeAccumulator.getPauseTime()));\n+    printIndented(out, \"  Duration: \" + duration(totalTime));\n+    out.println();\n+  }\n+\n+  private void printDetailsHeadline()\n+  {\n+    out.println();\n+    out.println();\n+    printIndented(out, \"******** DETAILS \" + date() + \" ********\");\n+    out.println();\n+\n+    // Make sure that if user is interested in details then also print the entire details set when import is done\n+    printDetailsOnDone = true;\n+    monitor.detailsPrinted();\n+  }\n+\n+  private void printDetailsForCurrentStage()\n+  {\n+    printDetailsHeadline();\n+    if (!details.isEmpty())\n     {\n-        current.collect();\n-        reactToUserInput();\n+      details.get(details.size() - 1).print(out);\n     }\n+  }\n \n-    private void printDetails()\n+  private static void printIndented(PrintStream out, String string)\n+  {\n+    out.println(\"\\t\" + string);\n+  }\n+\n+  private void reactToUserInput()\n+  {\n+    try\n     {\n-        printDetailsHeadline();\n-        long totalTime = 0;\n-        for ( StageDetails stageDetails : details )\n+      if (in.available() > 0)\n+      {\n+        // don't close this read, since we really don't want to close the underlying System.in\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n+        String line = reader.readLine();\n+        Pair<String, Runnable> action = actions.get(line);\n+        if (action != null)\n         {\n-            stageDetails.print( out );\n-            totalTime += stageDetails.totalTimeMillis;\n+          action.other().run();\n         }\n-\n-        printIndented( out, \"Environment information:\" );\n-        printIndented( out, \"  Free physical memory: \" + bytes( OsBeanUtil.getFreePhysicalMemory() ) );\n-        printIndented( out, \"  Max VM memory: \" + bytes( Runtime.getRuntime().maxMemory() ) );\n-        printIndented( out, \"  Free VM memory: \" + bytes( Runtime.getRuntime().freeMemory() ) );\n-        printIndented( out, \"  VM stop-the-world time: \" + duration( vmPauseTimeAccumulator.getPauseTime() ) );\n-        printIndented( out, \"  Duration: \" + duration( totalTime ) );\n-        out.println();\n+      }\n+    } catch (IOException e)\n+    {\n+      e.printStackTrace(out);\n     }\n+  }\n \n-    private void printDetailsHeadline()\n-    {\n-        out.println();\n-        out.println();\n-        printIndented( out, \"******** DETAILS \" + date() + \" ********\" );\n-        out.println();\n+  private static class StageDetails\n+  {\n+    private final StageExecution execution;\n+    private final long startTime;\n+    private final VmPauseTimeAccumulator vmPauseTimeAccumulator;\n+    private final long baseVmPauseTime;\n \n-        // Make sure that if user is interested in details then also print the entire details set when import is done\n-        printDetailsOnDone = true;\n-        monitor.detailsPrinted();\n-    }\n+    private long memoryUsage;\n+    private long ioThroughput;\n+    private long totalTimeMillis;\n+    private long stageVmPauseTime;\n+    private long doneBatches;\n \n-    private void printDetailsForCurrentStage()\n+    StageDetails(StageExecution execution, VmPauseTimeAccumulator vmPauseTimeAccumulator)\n     {\n-        printDetailsHeadline();\n-        if ( !details.isEmpty() )\n-        {\n-            details.get( details.size() - 1 ).print( out );\n-        }\n+      this.execution = execution;\n+      this.vmPauseTimeAccumulator = vmPauseTimeAccumulator;\n+      this.baseVmPauseTime = vmPauseTimeAccumulator.getPauseTime();\n+      this.startTime = currentTimeMillis();\n     }\n \n-    private static void printIndented( PrintStream out, String string )\n+    void print(PrintStream out)\n     {\n-        out.println( \"\\t\" + string );\n+      printIndented(out, execution.name());\n+      StringBuilder builder = new StringBuilder();\n+      SpectrumExecutionMonitor.printSpectrum(builder, execution, SpectrumExecutionMonitor.DEFAULT_WIDTH, DetailLevel.NO);\n+      printIndented(out, builder.toString());\n+      printValue(out, memoryUsage, \"Memory usage\", Format::bytes);\n+      printValue(out, ioThroughput, \"I/O throughput\", value -> bytes(value) + \"/s\");\n+      printValue(out, stageVmPauseTime, \"VM stop-the-world time\", Format::duration);\n+      printValue(out, totalTimeMillis, \"Duration\", Format::duration);\n+      printValue(out, doneBatches, \"Done batches\", String::valueOf);\n+\n+      out.println();\n     }\n \n-    private void reactToUserInput()\n+    private static void printValue(PrintStream out, long value, String description, LongFunction<String> toStringConverter)\n     {\n-        try\n-        {\n-            if ( in.available() > 0 )\n-            {\n-                // don't close this read, since we really don't want to close the underlying System.in\n-                BufferedReader reader = new BufferedReader( new InputStreamReader( System.in ) );\n-                String line = reader.readLine();\n-                Pair<String,Runnable> action = actions.get( line );\n-                if ( action != null )\n-                {\n-                    action.other().run();\n-                }\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            e.printStackTrace( out );\n-        }\n+      if (value > 0)\n+      {\n+        printIndented(out, description + \": \" + toStringConverter.apply(value));\n+      }\n     }\n \n-    private static class StageDetails\n+    void collect()\n     {\n-        private final StageExecution execution;\n-        private final long startTime;\n-        private final VmPauseTimeAccumulator vmPauseTimeAccumulator;\n-        private final long baseVmPauseTime;\n-\n-        private long memoryUsage;\n-        private long ioThroughput;\n-        private long totalTimeMillis;\n-        private long stageVmPauseTime;\n-        private long doneBatches;\n-\n-        StageDetails( StageExecution execution, VmPauseTimeAccumulator vmPauseTimeAccumulator )\n+      totalTimeMillis = currentTimeMillis() - startTime;\n+      stageVmPauseTime = vmPauseTimeAccumulator.getPauseTime() - baseVmPauseTime;\n+      long lastDoneBatches = doneBatches;\n+      for (Step<?> step : execution.steps())\n+      {\n+        StepStats stats = step.stats();\n+        Stat memoryUsageStat = stats.stat(Keys.memory_usage);\n+        if (memoryUsageStat != null)\n         {\n-            this.execution = execution;\n-            this.vmPauseTimeAccumulator = vmPauseTimeAccumulator;\n-            this.baseVmPauseTime = vmPauseTimeAccumulator.getPauseTime();\n-            this.startTime = currentTimeMillis();\n+          memoryUsage = max(memoryUsage, memoryUsageStat.asLong());\n         }\n-\n-        void print( PrintStream out )\n+        Stat ioStat = stats.stat(Keys.io_throughput);\n+        if (ioStat != null)\n         {\n-            printIndented( out, execution.name() );\n-            StringBuilder builder = new StringBuilder();\n-            SpectrumExecutionMonitor.printSpectrum( builder, execution, SpectrumExecutionMonitor.DEFAULT_WIDTH, DetailLevel.NO );\n-            printIndented( out, builder.toString() );\n-            printValue( out, memoryUsage, \"Memory usage\", Format::bytes );\n-            printValue( out, ioThroughput, \"I/O throughput\", value -> bytes( value ) + \"/s\" );\n-            printValue( out, stageVmPauseTime, \"VM stop-the-world time\", Format::duration );\n-            printValue( out, totalTimeMillis, \"Duration\", Format::duration );\n-            printValue( out, doneBatches, \"Done batches\", String::valueOf );\n-\n-            out.println();\n+          ioThroughput = ioStat.asLong();\n         }\n+        lastDoneBatches = stats.stat(Keys.done_batches).asLong();\n+      }\n+      doneBatches = lastDoneBatches;\n+    }\n+  }\n \n-        private static void printValue( PrintStream out, long value, String description, LongFunction<String> toStringConverter )\n-        {\n-            if ( value > 0 )\n-            {\n-                printIndented( out, description + \": \" + toStringConverter.apply( value ) );\n-            }\n-        }\n+  private static class VmPauseTimeAccumulator implements Consumer<VmPauseInfo>\n+  {\n+    private final AtomicLong totalPauseTime = new AtomicLong();\n \n-        void collect()\n-        {\n-            totalTimeMillis = currentTimeMillis() - startTime;\n-            stageVmPauseTime = vmPauseTimeAccumulator.getPauseTime() - baseVmPauseTime;\n-            long lastDoneBatches = doneBatches;\n-            for ( Step<?> step : execution.steps() )\n-            {\n-                StepStats stats = step.stats();\n-                Stat memoryUsageStat = stats.stat( Keys.memory_usage );\n-                if ( memoryUsageStat != null )\n-                {\n-                    memoryUsage = max( memoryUsage, memoryUsageStat.asLong() );\n-                }\n-                Stat ioStat = stats.stat( Keys.io_throughput );\n-                if ( ioStat != null )\n-                {\n-                    ioThroughput = ioStat.asLong();\n-                }\n-                lastDoneBatches = stats.stat( Keys.done_batches ).asLong();\n-            }\n-            doneBatches = lastDoneBatches;\n-        }\n+    @Override\n+    public void accept(VmPauseInfo pauseInfo)\n+    {\n+      totalPauseTime.addAndGet(pauseInfo.getPauseTime());\n     }\n \n-    private static class VmPauseTimeAccumulator implements Consumer<VmPauseInfo>\n+    long getPauseTime()\n     {\n-        private final AtomicLong totalPauseTime = new AtomicLong();\n-\n-        @Override\n-        public void accept( VmPauseInfo pauseInfo )\n-        {\n-            totalPauseTime.addAndGet( pauseInfo.getPauseTime() );\n-        }\n-\n-        long getPauseTime()\n-        {\n-            return totalPauseTime.get();\n-        }\n+      return totalPauseTime.get();\n     }\n+  }\n }\n",
            "diff_size": 253
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/238/OnDemandDetailsExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/238/OnDemandDetailsExecutionMonitor.java\nindex c2329ce114d..bb43bb13265 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/238/OnDemandDetailsExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/238/OnDemandDetailsExecutionMonitor.java\n@@ -93,8 +93,7 @@ public class OnDemandDetailsExecutionMonitor implements ExecutionMonitor\n         this.monitor = monitor;\n         this.actions.put( \"i\", Pair.of( \"Print more detailed information\", this::printDetails ) );\n         this.actions.put( \"c\", Pair.of( \"Print more detailed information about current stage\", this::printDetailsForCurrentStage ) );\n-        this.vmPauseMonitor = new VmPauseMonitor( Duration.ofMillis( 100 ), Duration.ofMillis( 100 ),\n-                NullLog.getInstance(), jobScheduler, vmPauseTimeAccumulator );\n+        this.vmPauseMonitor = new VmPauseMonitor( Duration.ofMillis( 100 ), Duration.ofMillis( 100 ), NullLog.getInstance(), jobScheduler, vmPauseTimeAccumulator );\n     }\n \n     @Override\n@@ -240,8 +239,7 @@ public class OnDemandDetailsExecutionMonitor implements ExecutionMonitor\n             printValue( out, stageVmPauseTime, \"VM stop-the-world time\", Format::duration );\n             printValue( out, totalTimeMillis, \"Duration\", Format::duration );\n             printValue( out, doneBatches, \"Done batches\", String::valueOf );\n-\n-            out.println();\n+out.println();\n         }\n \n         private static void printValue( PrintStream out, long value, String description, LongFunction<String> toStringConverter )\n@@ -265,14 +263,17 @@ public class OnDemandDetailsExecutionMonitor implements ExecutionMonitor\n                 {\n                     memoryUsage = max( memoryUsage, memoryUsageStat.asLong() );\n                 }\n-                Stat ioStat = stats.stat( Keys.io_throughput );\n+\n+Stat ioStat = stats.stat( Keys.io_throughput );\n                 if ( ioStat != null )\n                 {\n                     ioThroughput = ioStat.asLong();\n                 }\n-                lastDoneBatches = stats.stat( Keys.done_batches ).asLong();\n+\n+lastDoneBatches = stats.stat( Keys.done_batches ).asLong();\n             }\n-            doneBatches = lastDoneBatches;\n+\n+doneBatches = lastDoneBatches;\n         }\n     }\n \n@@ -291,4 +292,4 @@ public class OnDemandDetailsExecutionMonitor implements ExecutionMonitor\n             return totalPauseTime.get();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}