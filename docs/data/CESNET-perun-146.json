{
    "project_name": "CESNET-perun",
    "error_id": "146",
    "information": {
        "errors": [
            {
                "line": "111",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t// Get service users for user\n\t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/146/AuthzResolverImpl.java\nindex 589aff2ff0a..3c6d5d7b883 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/146/AuthzResolverImpl.java\n@@ -109,7 +109,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n \t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+\t\t\t\t\t\t\t\t\"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n \t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/146/AuthzResolverImpl.java\nindex 589aff2ff0a..a5c4a9a6fc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/146/AuthzResolverImpl.java\n@@ -22,645 +22,647 @@ import java.util.regex.Pattern;\n \n public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n-\n-\t//http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate static JdbcPerunTemplate jdbc;\n-\n-\tprivate final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n-\n-\tprivate final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" +\n-\t\t\"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" +\n-\t\t\"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" +\n-\t\t\"authz.service_id as pb_service_id, authz.service_principal_id as pb_user_id, authz.security_team_id as pb_security_team_id, \" +\n-\t\t\"authz.sponsored_user_id as pb_sponsored_user_id\";\n-\n-\n-\tprivate static final RowMapper<Role> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs, i) -> Role.valueOf(rs.getString(\"name\").toUpperCase());\n-\n-\tprivate static final RowMapper<Pair<Role, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs, i) -> {\n-\t\ttry {\n-\t\t\tMap<String, Set<Integer>> perunBeans = null;\n-\t\t\tRole role = Role.valueOf(rs.getString(\"role_name\").toUpperCase());\n-\n-\t\t\t// Iterate through all returned columns and try to extract PerunBean name from the labels\n-\t\t\tfor (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n-\t\t\t\tMatcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n-\t\t\t\tif (matcher.find()) {\n-\t\t\t\t\tString perunBeanName = matcher.group(1);\n-\t\t\t\t\tint id = rs.getInt(j);\n-\t\t\t\t\tif (!rs.wasNull()) {\n-\t\t\t\t\t\t// We have to make first letters o words uppercase\n-\t\t\t\t\t\tString className = convertUnderScoreCaseToCamelCase(perunBeanName);\n-\n-\t\t\t\t\t\tif (perunBeans == null) {\n-\t\t\t\t\t\t\tperunBeans = new HashMap<>();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tperunBeans.computeIfAbsent(className, k -> new HashSet<>());\n-\t\t\t\t\t\tperunBeans.get(className).add(id);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn new Pair<>(role, perunBeans);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new InternalErrorRuntimeException(e);\n-\t\t}\n-\t};\n-\n-\tprivate static String convertUnderScoreCaseToCamelCase(String name) {\n-\t\tboolean nextIsCapital = true;\n-\t\tStringBuilder nameBuilder = new StringBuilder();\n-\t\tfor (char c : name.toCharArray()) {\n-\t\t\tif (c == '_') {\n-\t\t\t\tnextIsCapital = true;\n-\t\t\t} else {\n-\t\t\t\tif (nextIsCapital) {\n-\t\t\t\t\tc = Character.toUpperCase(c);\n-\t\t\t\t\tnextIsCapital = false;\n-\t\t\t\t}\n-\t\t\t\tnameBuilder.append(c);\n-\t\t\t}\n-\t\t}\n-\t\treturn nameBuilder.toString();\n-\t}\n-\n-\tpublic AuthzResolverImpl(DataSource perunPool) {\n-\t\tjdbc = new JdbcPerunTemplate(perunPool);\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(User user) throws InternalErrorException {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (user != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n-\t\t\t\t\t\t+ \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n-\t\t\t\t\t\t+ \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n-\n-\t\t\t\tfor (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t\t// Get service users for user\n-\t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n-\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n-\t\t\t\t}\n-\n-\t\t\t\t// Get members for user\n-\t\t\t\tList<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n-\t\t\t\t\t\tUtils.ID_MAPPER ,user.getId());\n-\t\t\t\tfor (Integer memberId : authzMember) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(Group group) throws InternalErrorException {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (group != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n-\t\t\t\tAUTHZROLE_MAPPER, group.getId());\n-\n-\t\t\t\tfor (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\tpublic void initialize() throws InternalErrorException {\n-\n-\t\tif(BeansUtils.isPerunReadOnly()) log.debug(\"Loading authzresolver manager init in readOnly version.\");\n-\n-\t\t// Check if all roles defined in class Role exists in the DB\n-\t\tfor (Role role: Role.values()) {\n-\t\t\ttry {\n-\t\t\t\tif (0 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.getRoleName())) {\n-\t\t\t\t\t//Skip creating not existing roles for read only Perun\n-\t\t\t\t\tif(BeansUtils.isPerunReadOnly()) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"One of default roles not exists in DB - \" + role);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tint newId = Utils.getNewId(jdbc, \"roles_id_seq\");\n-\t\t\t\t\t\tjdbc.update(\"insert into roles (id, name) values (?,?)\", newId, role.getRoleName());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic static Map<Role, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) throws InternalErrorException {\n-\t\tString actType = actionType.getActionType().toLowerCase() + \"%\";\n-\t\ttry {\n-\t\t\tList<Pair<Role, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" +\n-\t\t\t\t\t\t\t\"join roles on attributes_authz.role_id=roles.id \" +\n-\t\t\t\t\t\t\t\"join action_types on attributes_authz.action_type_id=action_types.id \" +\n-\t\t\t\t\t\t\t\"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n-\t\t\t\t\t(rs, arg1) -> new Pair<>(Role.valueOf(rs.getString(\"name\").toUpperCase()), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n-\t\t\t\t\tattrDef.getId(), actType);\n-\n-\t\t\tMap<Role, Set<ActionType>> result = new HashMap<>();\n-\t\t\tfor (Pair<Role, ActionType> pair : pairs) {\n-\t\t\t\tif (result.containsKey(pair.getLeft())) {\n-\t\t\t\t\tresult.get(pair.getLeft()).add(pair.getRight());\n-\t\t\t\t} else {\n-\t\t\t\t\tSet<ActionType> rights = new HashSet<>();\n-\t\t\t\t\trights.add(pair.getRight());\n-\t\t\t\t\tresult.put(pair.getLeft(), rights);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new HashMap<>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserAuthz(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where user_id=?\", user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForGroup(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where group_id=?\", group.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForResource(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where service_id=?\", service.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, user, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, group, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\t// Add GROUPADMIN role + groupId and voId\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tuser.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tauthorizedGroup.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tuser.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tauthorizedGroup.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.getRoleName(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.getRoleName(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.getRoleName());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\trole.getRoleName(), vo.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in vo \" + vo, e, user, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\trole.getRoleName(), vo.getId(), group.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in vo \" + vo, e, group, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo) {\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tuser.getId(), role.getRoleName(), vo.getId()) > 0;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isGroupInRoleForVo(PerunSession session, Group group, Role role, Vo vo) {\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tgroup.getId(), role.getRoleName(), vo.getId()) > 0;\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, Role role) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.getRoleName(), group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, Role role) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.getRoleName(), user.getId() );\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, User user, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\trole.getRoleName(), resource.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in resource \" + resource, e, user, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, Group group, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n-\t\t\t\trole.getRoleName(), resource.getId(), group.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in resource \" + resource, e, group, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, Role role, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, Role role, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n+    final static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n+\n+    //http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+    private static JdbcPerunTemplate jdbc;\n+\n+    private final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n+\n+    private final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" +\n+            \"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" +\n+            \"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" +\n+            \"authz.service_id as pb_service_id, authz.service_principal_id as pb_user_id, authz.security_team_id as pb_security_team_id, \" +\n+            \"authz.sponsored_user_id as pb_sponsored_user_id\";\n+\n+\n+    private static final RowMapper<Role> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs, i) -> Role.valueOf(rs.getString(\"name\").toUpperCase());\n+\n+    private static final RowMapper<Pair<Role, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs, i) -> {\n+        try {\n+            Map<String, Set<Integer>> perunBeans = null;\n+            Role role = Role.valueOf(rs.getString(\"role_name\").toUpperCase());\n+\n+            // Iterate through all returned columns and try to extract PerunBean name from the labels\n+            for (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n+                Matcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n+                if (matcher.find()) {\n+                    String perunBeanName = matcher.group(1);\n+                    int id = rs.getInt(j);\n+                    if (!rs.wasNull()) {\n+                        // We have to make first letters o words uppercase\n+                        String className = convertUnderScoreCaseToCamelCase(perunBeanName);\n+\n+                        if (perunBeans == null) {\n+                            perunBeans = new HashMap<>();\n+                        }\n+                        perunBeans.computeIfAbsent(className, k -> new HashSet<>());\n+                        perunBeans.get(className).add(id);\n+                    }\n+                }\n+            }\n+\n+            return new Pair<>(role, perunBeans);\n+\n+        } catch (Exception e) {\n+            throw new InternalErrorRuntimeException(e);\n+        }\n+    };\n+\n+    private static String convertUnderScoreCaseToCamelCase(String name) {\n+        boolean nextIsCapital = true;\n+        StringBuilder nameBuilder = new StringBuilder();\n+        for (char c : name.toCharArray()) {\n+            if (c == '_') {\n+                nextIsCapital = true;\n+            } else {\n+                if (nextIsCapital) {\n+                    c = Character.toUpperCase(c);\n+                    nextIsCapital = false;\n+                }\n+                nameBuilder.append(c);\n+            }\n+        }\n+        return nameBuilder.toString();\n+    }\n+\n+    public AuthzResolverImpl(DataSource perunPool) {\n+        jdbc = new JdbcPerunTemplate(perunPool);\n+    }\n+\n+    @Override\n+    public AuthzRoles getRoles(User user) throws InternalErrorException {\n+        AuthzRoles authzRoles = new AuthzRoles();\n+\n+        if (user != null) {\n+            try {\n+                // Get roles from Authz table\n+                List<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n+                        + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n+                        + \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n+                        + \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n+\n+                for (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+                    authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+                }\n+\n+                // Get service users for user\n+                List<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n+                        \"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n+                        \"and specific_user_users.type=?\", Utils.ID_MAPPER, user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+                for (Integer serviceUserId : authzServiceUsers) {\n+                    authzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n+                }\n+\n+                // Get members for user\n+                List<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n+                        Utils.ID_MAPPER, user.getId());\n+                for (Integer memberId : authzMember) {\n+                    authzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n+                }\n+\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+\n+        return authzRoles;\n+    }\n+\n+    @Override\n+    public AuthzRoles getRoles(Group group) throws InternalErrorException {\n+        AuthzRoles authzRoles = new AuthzRoles();\n+\n+        if (group != null) {\n+            try {\n+                // Get roles from Authz table\n+                List<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n+                                + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n+                        AUTHZROLE_MAPPER, group.getId());\n+\n+                for (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+                    authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+                }\n+\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+\n+        return authzRoles;\n+    }\n+\n+    public void initialize() throws InternalErrorException {\n+\n+        if (BeansUtils.isPerunReadOnly()) {\n+            log.debug(\"Loading authzresolver manager init in readOnly version.\");\n+        }\n+\n+        // Check if all roles defined in class Role exists in the DB\n+        for (Role role : Role.values()) {\n+            try {\n+                if (0 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.getRoleName())) {\n+                    //Skip creating not existing roles for read only Perun\n+                    if (BeansUtils.isPerunReadOnly()) {\n+                        throw new InternalErrorException(\"One of default roles not exists in DB - \" + role);\n+                    } else {\n+                        int newId = Utils.getNewId(jdbc, \"roles_id_seq\");\n+                        jdbc.update(\"insert into roles (id, name) values (?,?)\", newId, role.getRoleName());\n+                    }\n+                }\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+    }\n+\n+    public static Map<Role, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) throws InternalErrorException {\n+        String actType = actionType.getActionType().toLowerCase() + \"%\";\n+        try {\n+            List<Pair<Role, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" +\n+                            \"join roles on attributes_authz.role_id=roles.id \" +\n+                            \"join action_types on attributes_authz.action_type_id=action_types.id \" +\n+                            \"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n+                    (rs, arg1) -> new Pair<>(Role.valueOf(rs.getString(\"name\").toUpperCase()), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n+                    attrDef.getId(), actType);\n+\n+            Map<Role, Set<ActionType>> result = new HashMap<>();\n+            for (Pair<Role, ActionType> pair : pairs) {\n+                if (result.containsKey(pair.getLeft())) {\n+                    result.get(pair.getLeft()).add(pair.getRight());\n+                } else {\n+                    Set<ActionType> rights = new HashSet<>();\n+                    rights.add(pair.getRight());\n+                    result.put(pair.getLeft(), rights);\n+                }\n+            }\n+            return result;\n+\n+        } catch (EmptyResultDataAccessException e) {\n+            return new HashMap<>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllUserAuthz(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where user_id=?\", user.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForGroup(PerunSession sess, Group group) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where group_id=?\", group.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForResource(PerunSession sess, Resource resource) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForService(PerunSession sess, Service service) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where service_id=?\", service.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, user, sponsoredUser);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, group, sponsoredUser);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            // Add GROUPADMIN role + groupId and voId\n+            jdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n+                    user.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n+                    authorizedGroup.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n+                    user.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n+                    authorizedGroup.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n+                    Role.SECURITYADMIN.getRoleName(), securityTeam.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(),\n+                    Role.SECURITYADMIN.getRoleName(), securityTeam.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.getRoleName());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removePerunAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n+        if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+            throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n+                    role.getRoleName(), vo.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in vo \" + vo, e, user, vo, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n+        if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+            throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n+                    role.getRoleName(), vo.getId(), group.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in vo \" + vo, e, group, vo, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the vo \" + vo);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the vo \" + vo);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo) {\n+        return jdbc.queryForObject(\n+                \"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n+                        \"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class,\n+                user.getId(), role.getRoleName(), vo.getId()) > 0;\n+    }\n+\n+    @Override\n+    public boolean isGroupInRoleForVo(PerunSession session, Group group, Role role, Vo vo) {\n+        return jdbc.queryForObject(\n+                \"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n+                        \"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class,\n+                group.getId(), role.getRoleName(), vo.getId()) > 0;\n+    }\n+\n+    @Override\n+    public List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, Role role) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\",\n+                    new SingleColumnRowMapper<>(Integer.class), role.getRoleName(), group.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, Role role) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\",\n+                    new SingleColumnRowMapper<>(Integer.class), role.getRoleName(), user.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addResourceRole(PerunSession sess, User user, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n+        if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+            throw new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n+                    role.getRoleName(), resource.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in resource \" + resource, e, user, resource, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addResourceRole(PerunSession sess, Group group, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n+        if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+            throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on resource.\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n+                    role.getRoleName(), resource.getId(), group.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in resource \" + resource, e, group, resource, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void removeResourceRole(PerunSession sess, Role role, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.getRoleName())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeResourceRole(PerunSession sess, Role role, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.getRoleName())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n \n }\n",
            "diff_size": 642
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/146/AuthzResolverImpl.java\nindex 589aff2ff0a..b3f436ec0fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/146/AuthzResolverImpl.java\n@@ -14,653 +14,615 @@ import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcPerunTemplate;\n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.jdbc.core.SingleColumnRowMapper;\n-\n import javax.sql.DataSource;\n import java.util.*;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+\n public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n-\n-\t//http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate static JdbcPerunTemplate jdbc;\n-\n-\tprivate final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n-\n-\tprivate final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" +\n-\t\t\"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" +\n-\t\t\"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" +\n-\t\t\"authz.service_id as pb_service_id, authz.service_principal_id as pb_user_id, authz.security_team_id as pb_security_team_id, \" +\n-\t\t\"authz.sponsored_user_id as pb_sponsored_user_id\";\n-\n-\n-\tprivate static final RowMapper<Role> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs, i) -> Role.valueOf(rs.getString(\"name\").toUpperCase());\n-\n-\tprivate static final RowMapper<Pair<Role, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs, i) -> {\n-\t\ttry {\n-\t\t\tMap<String, Set<Integer>> perunBeans = null;\n-\t\t\tRole role = Role.valueOf(rs.getString(\"role_name\").toUpperCase());\n-\n-\t\t\t// Iterate through all returned columns and try to extract PerunBean name from the labels\n-\t\t\tfor (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n-\t\t\t\tMatcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n-\t\t\t\tif (matcher.find()) {\n-\t\t\t\t\tString perunBeanName = matcher.group(1);\n-\t\t\t\t\tint id = rs.getInt(j);\n-\t\t\t\t\tif (!rs.wasNull()) {\n-\t\t\t\t\t\t// We have to make first letters o words uppercase\n-\t\t\t\t\t\tString className = convertUnderScoreCaseToCamelCase(perunBeanName);\n-\n-\t\t\t\t\t\tif (perunBeans == null) {\n-\t\t\t\t\t\t\tperunBeans = new HashMap<>();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tperunBeans.computeIfAbsent(className, k -> new HashSet<>());\n-\t\t\t\t\t\tperunBeans.get(className).add(id);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn new Pair<>(role, perunBeans);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new InternalErrorRuntimeException(e);\n-\t\t}\n-\t};\n-\n-\tprivate static String convertUnderScoreCaseToCamelCase(String name) {\n-\t\tboolean nextIsCapital = true;\n-\t\tStringBuilder nameBuilder = new StringBuilder();\n-\t\tfor (char c : name.toCharArray()) {\n-\t\t\tif (c == '_') {\n-\t\t\t\tnextIsCapital = true;\n-\t\t\t} else {\n-\t\t\t\tif (nextIsCapital) {\n-\t\t\t\t\tc = Character.toUpperCase(c);\n-\t\t\t\t\tnextIsCapital = false;\n-\t\t\t\t}\n-\t\t\t\tnameBuilder.append(c);\n-\t\t\t}\n-\t\t}\n-\t\treturn nameBuilder.toString();\n-\t}\n-\n-\tpublic AuthzResolverImpl(DataSource perunPool) {\n-\t\tjdbc = new JdbcPerunTemplate(perunPool);\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(User user) throws InternalErrorException {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (user != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n-\t\t\t\t\t\t+ \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n-\t\t\t\t\t\t+ \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n-\n-\t\t\t\tfor (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t\t// Get service users for user\n-\t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n-\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n-\t\t\t\t}\n-\n-\t\t\t\t// Get members for user\n-\t\t\t\tList<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n-\t\t\t\t\t\tUtils.ID_MAPPER ,user.getId());\n-\t\t\t\tfor (Integer memberId : authzMember) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(Group group) throws InternalErrorException {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (group != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n-\t\t\t\tAUTHZROLE_MAPPER, group.getId());\n-\n-\t\t\t\tfor (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\tpublic void initialize() throws InternalErrorException {\n-\n-\t\tif(BeansUtils.isPerunReadOnly()) log.debug(\"Loading authzresolver manager init in readOnly version.\");\n-\n-\t\t// Check if all roles defined in class Role exists in the DB\n-\t\tfor (Role role: Role.values()) {\n-\t\t\ttry {\n-\t\t\t\tif (0 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.getRoleName())) {\n-\t\t\t\t\t//Skip creating not existing roles for read only Perun\n-\t\t\t\t\tif(BeansUtils.isPerunReadOnly()) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"One of default roles not exists in DB - \" + role);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tint newId = Utils.getNewId(jdbc, \"roles_id_seq\");\n-\t\t\t\t\t\tjdbc.update(\"insert into roles (id, name) values (?,?)\", newId, role.getRoleName());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic static Map<Role, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) throws InternalErrorException {\n-\t\tString actType = actionType.getActionType().toLowerCase() + \"%\";\n-\t\ttry {\n-\t\t\tList<Pair<Role, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" +\n-\t\t\t\t\t\t\t\"join roles on attributes_authz.role_id=roles.id \" +\n-\t\t\t\t\t\t\t\"join action_types on attributes_authz.action_type_id=action_types.id \" +\n-\t\t\t\t\t\t\t\"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n-\t\t\t\t\t(rs, arg1) -> new Pair<>(Role.valueOf(rs.getString(\"name\").toUpperCase()), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n-\t\t\t\t\tattrDef.getId(), actType);\n-\n-\t\t\tMap<Role, Set<ActionType>> result = new HashMap<>();\n-\t\t\tfor (Pair<Role, ActionType> pair : pairs) {\n-\t\t\t\tif (result.containsKey(pair.getLeft())) {\n-\t\t\t\t\tresult.get(pair.getLeft()).add(pair.getRight());\n-\t\t\t\t} else {\n-\t\t\t\t\tSet<ActionType> rights = new HashSet<>();\n-\t\t\t\t\trights.add(pair.getRight());\n-\t\t\t\t\tresult.put(pair.getLeft(), rights);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new HashMap<>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserAuthz(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where user_id=?\", user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForGroup(PerunSession sess, Group group) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where group_id=?\", group.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForResource(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where service_id=?\", service.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, user, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, group, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\t// Add GROUPADMIN role + groupId and voId\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tuser.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tauthorizedGroup.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tuser.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tauthorizedGroup.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.getRoleName(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.getRoleName(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.getRoleName());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\trole.getRoleName(), vo.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in vo \" + vo, e, user, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\trole.getRoleName(), vo.getId(), group.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in vo \" + vo, e, group, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo) {\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tuser.getId(), role.getRoleName(), vo.getId()) > 0;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isGroupInRoleForVo(PerunSession session, Group group, Role role, Vo vo) {\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tgroup.getId(), role.getRoleName(), vo.getId()) > 0;\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, Role role) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.getRoleName(), group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, Role role) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.getRoleName(), user.getId() );\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, User user, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\trole.getRoleName(), resource.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in resource \" + resource, e, user, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, Group group, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n-\t\t\t\trole.getRoleName(), resource.getId(), group.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in resource \" + resource, e, group, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, Role role, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, Role role, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.getRoleName())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-}\n+ final static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n+\n+ //http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+ private static JdbcPerunTemplate jdbc;\n+ private final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n+ private final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" + \"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" + \"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" + \"authz.service_id as pb_service_id, authz.service_principal_id as pb_user_id, authz.security_team_id as pb_security_team_id, \" + \"authz.sponsored_user_id as pb_sponsored_user_id\";\n+ private static final RowMapper<Role> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs,i)->Role.valueOf(rs.getString(\"name\").toUpperCase());\n+ private static final RowMapper<Pair<Role, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs,i)-> {\n+                                                                                           try {\n+                                                                                            Map<String, Set<Integer>> perunBeans = null;\n+                                                                                            Role role = Role.valueOf(rs.getString(\"role_name\").toUpperCase());\n+\n+   // Iterate through all returned columns and try to extract PerunBean name from the labels\n+                                                                                            for (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n+                                                                                             Matcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n+                                                                                             if (matcher.find()) {\n+                                                                                              String perunBeanName = matcher.group(1);\n+                                                                                              int id = rs.getInt(j);\n+                                                                                              if (!rs.wasNull()) {\n+      // We have to make first letters o words uppercase\n+                                                                                               String className = convertUnderScoreCaseToCamelCase(perunBeanName);\n+                                                                                               if (perunBeans == null) {\n+                                                                                                perunBeans = new HashMap<>();\n+                                                                                               }\n+                                                                                               perunBeans.computeIfAbsent(className, k-> new HashSet<>());\n+                                                                                               perunBeans.get(className).add(id);\n+                                                                                              }\n+                                                                                             }\n+                                                                                            }\n+\n+                                                                                            return new Pair<>(role, perunBeans);\n+                                                                                           } catch (Exception e) {\n+                                                                                            throw new InternalErrorRuntimeException(e);\n+                                                                                           }\n+                                                                                          };\n+ private static String convertUnderScoreCaseToCamelCase(String name) {\n+\n+  boolean nextIsCapital = true;\n+  StringBuilder nameBuilder = new StringBuilder();\n+  for (char c : name.toCharArray()) {\n+   if (c == '_') {\n+    nextIsCapital = true;\n+   } else {\n+    if (nextIsCapital) {\n+     c = Character.toUpperCase(c);\n+     nextIsCapital = false;\n+    }\n+    nameBuilder.append(c);\n+   }\n+  }\n+\n+  return nameBuilder.toString();\n+ }\n+\n+\n+ public AuthzResolverImpl(DataSource perunPool) {\n+  jdbc = new JdbcPerunTemplate(perunPool);\n+ }\n+\n+ @Override\n+ public AuthzRoles getRoles(User user) throws InternalErrorException {\n+  AuthzRoles authzRoles = new AuthzRoles();\n+  if (user != null) {\n+   try {\n+    // Get roles from Authz table\n+    List<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \" + \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \" + \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n+    for (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+     authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+    }\n+\n+    // Get service users for user\n+    List<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" + \"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" + \"and specific_user_users.type=?\", Utils.ID_MAPPER, user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+    for (Integer serviceUserId : authzServiceUsers) {\n+     authzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n+    }\n+\n+    // Get members for user\n+    List<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\", Utils.ID_MAPPER, user.getId());\n+    for (Integer memberId : authzMember) {\n+     authzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n+    }\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+\n+  return authzRoles;\n+ }\n+\n+ @Override\n+ public AuthzRoles getRoles(Group group) throws InternalErrorException {\n+  AuthzRoles authzRoles = new AuthzRoles();\n+  if (group != null) {\n+   try {\n+    // Get roles from Authz table\n+    List<Pair<Role, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\", AUTHZROLE_MAPPER, group.getId());\n+    for (Pair<Role, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+     authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+    }\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+\n+  return authzRoles;\n+ }\n+\n+ public void initialize() throws InternalErrorException {\n+  if (BeansUtils.isPerunReadOnly()) log.debug(\"Loading authzresolver manager init in readOnly version.\");\n+\n+  // Check if all roles defined in class Role exists in the DB\n+  for (Role role : Role.values()) {\n+   try {\n+    if (0 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.getRoleName())) {\n+     //Skip creating not existing roles for read only Perun\n+     if (BeansUtils.isPerunReadOnly()) {\n+      throw new InternalErrorException(\"One of default roles not exists in DB - \" + role);\n+     } else {\n+      int newId = Utils.getNewId(jdbc, \"roles_id_seq\");\n+      jdbc.update(\"insert into roles (id, name) values (?,?)\", newId, role.getRoleName());\n+     }\n+    }\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+ }\n+\n+ public static Map<Role, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) throws InternalErrorException {\n+  String actType = actionType.getActionType().toLowerCase() + \"%\";\n+  try {\n+   List<Pair<Role, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" + \"join roles on attributes_authz.role_id=roles.id \" + \"join action_types on attributes_authz.action_type_id=action_types.id \" + \"where attributes_authz.attr_id=? and action_types.action_type like ?\", (rs,arg1)-> new Pair<>(Role.valueOf(rs.getString(\"name\").toUpperCase()),\n+ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())), attrDef.getId(), actType);\n+   Map<Role, Set<ActionType>> result = new HashMap<>();\n+   for (Pair<Role, ActionType> pair : pairs) {\n+    if (result.containsKey(pair.getLeft())) {\n+     result.get(pair.getLeft()).add(pair.getRight());\n+    } else {\n+     Set<ActionType> rights = new HashSet<>();\n+     rights.add(pair.getRight());\n+     result.put(pair.getLeft(), rights);\n+    }\n+   }\n+\n+   return result;\n+  } catch (EmptyResultDataAccessException e) {\n+   return new HashMap<>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllUserAuthz(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where user_id=?\", user.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForGroup(PerunSession sess, Group group) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where group_id=?\", group.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForResource(PerunSession sess, Resource resource) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForService(PerunSession sess, Service service) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where service_id=?\", service.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.getRoleName(), facility.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Facility facility, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Facility facility, Group group) throws InternalErrorException, GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.RESOURCEADMIN.getRoleName(), resource.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser,\n+e,\n+user,\n+sponsoredUser);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.getRoleName(), sponsoredUser.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser,\n+e,\n+group,\n+sponsoredUser);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws InternalErrorException, GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   // Add GROUPADMIN role + groupId and voId\n+   jdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\", user.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\", authorizedGroup.getId(), Role.GROUPADMIN.getRoleName(), group.getId(), group.getVoId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\", user.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), group.getId(), Role.GROUPADMIN.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SECURITYADMIN.getRoleName(), securityTeam.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SECURITYADMIN.getRoleName(), securityTeam.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.getRoleName());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removePerunAdmin(PerunSession sess, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n+  if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+   throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(), role.getRoleName(), vo.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in vo \" + vo, e, user, vo, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n+  if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+   throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\", role.getRoleName(), vo.getId(), group.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in vo \" + vo, e, group, vo, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeVoRole(PerunSession sess, Role role, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the vo \" + vo);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeVoRole(PerunSession sess, Role role, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the vo \" + vo);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo) {\n+  return jdbc.queryForObject(\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" + \"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class, user.getId(), role.getRoleName(), vo.getId()) > 0;\n+ }\n+\n+ @Override\n+ public boolean isGroupInRoleForVo(PerunSession session, Group group, Role role, Vo vo) {\n+  return jdbc.queryForObject(\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" + \"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class, group.getId(), role.getRoleName(), vo.getId()) > 0;\n+ }\n+\n+ @Override\n+ public List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, Role role) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\", new SingleColumnRowMapper<>(Integer.class), role.getRoleName(), group.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, Role role) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\", new SingleColumnRowMapper<>(Integer.class), role.getRoleName(), user.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addResourceRole(PerunSession sess, User user, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n+  if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+   throw new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, resource_id) values (?, (select id from roles where name=?), ?)\", user.getId(), role.getRoleName(), resource.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in resource \" + resource, e, user, resource, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addResourceRole(PerunSession sess, Group group, Role role, Resource resource) throws InternalErrorException, AlreadyAdminException {\n+  if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+   throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on resource.\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\", role.getRoleName(), resource.getId(), group.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in resource \" + resource, e, group, resource, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeResourceRole(PerunSession sess, Role role, Resource resource, User user) throws InternalErrorException, UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.getRoleName())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeResourceRole(PerunSession sess, Role role, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.getRoleName())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 644
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/146/AuthzResolverImpl.java\nindex 589aff2ff0a..34f1135b4fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/146/AuthzResolverImpl.java\n@@ -108,8 +108,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +  \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n \t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/146/AuthzResolverImpl.java\nindex 589aff2ff0a..3c6d5d7b883 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/146/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/146/AuthzResolverImpl.java\n@@ -109,7 +109,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n \t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+\t\t\t\t\t\t\t\t\"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n \t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}