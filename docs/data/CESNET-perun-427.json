{
    "project_name": "CESNET-perun",
    "error_id": "427",
    "information": {
        "errors": [
            {
                "line": "402",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\n\tprivate boolean shouldHaveValueBox() {\n\t\treturn (def.getType().equals(\"java.lang.String\") ||\n\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n\t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/427/EntitylessAttributeEditKeyTabItem.java\nindex 58759baf96a..a7d68a6bf36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/427/EntitylessAttributeEditKeyTabItem.java\n@@ -400,7 +400,7 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \n \tprivate boolean shouldHaveValueBox() {\n \t\treturn (def.getType().equals(\"java.lang.String\") ||\n-\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n+\t\t\tdef.getType().equals(\"java.lang.Integer\") ||\n \t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n \t}\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/427/EntitylessAttributeEditKeyTabItem.java\nindex 58759baf96a..9434ddbff1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/427/EntitylessAttributeEditKeyTabItem.java\n@@ -47,360 +47,374 @@ import java.util.Objects;\n  */\n public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUrl {\n \n-\t/**\n-\t * Perun web session\n-\t */\n-\tprivate PerunWebSession session = PerunWebSession.getInstance();\n+    /**\n+     * Perun web session\n+     */\n+    private PerunWebSession session = PerunWebSession.getInstance();\n+\n+    /**\n+     * Content widget - should be simple panel\n+     */\n+    private SimplePanel contentWidget = new SimplePanel();\n+\n+    /**\n+     * Title widget\n+     */\n+    private Label titleWidget = new Label(\"Loading vo attributes\");\n \n-\t/**\n-\t * Content widget - should be simple panel\n-\t */\n-\tprivate SimplePanel contentWidget = new SimplePanel();\n+    //map of attributes and keys\n+    private HashMap<Attribute, String> map;\n \n-\t/**\n-\t * Title widget\n-\t */\n-\tprivate Label titleWidget = new Label(\"Loading vo attributes\");\n-\n-\t//map of attributes and keys\n-\tprivate HashMap<Attribute, String> map;\n-\n-\tprivate AttributeDefinition def;\n-\n-\tpublic final static String URL = \"edit_keys\";\n-\n-\tpublic EntitylessAttributeEditKeyTabItem(AttributeDefinition aD) {\n-\t\tthis.def = aD;\n-\t}\n-\n-\t@Override\n-\tpublic String getUrl() {\n-\t\treturn URL;\n-\t}\n-\n-\t@Override\n-\tpublic String getUrlWithParameters() {\n-\t\treturn MainMenu.PERUN_ADMIN + UrlMapper.TAB_NAME_SEPARATOR + getUrl();\n-\t}\n-\n-\t@Override\n-\tpublic Widget draw() {\n-\t\ttitleWidget.setText(Utils.getStrippedStringWithEllipsis(def.getName()) + \": settings\");\n-\n-\t\t// MAIN PANEL\n-\t\tVerticalPanel firstTabPanel = new VerticalPanel();\n-\t\tfirstTabPanel.setSize(\"100%\", \"100%\");\n-\n-\t\t// HORIZONTAL MENU\n-\t\tTabMenu menu = new TabMenu();\n-\t\t// refresh\n-\t\tmenu.addWidget(UiElements.getRefreshButton(this));\n-\n-\t\t// Get Attributes\n-\t\tfinal GetEntitylessAttributes jsonCallback = new GetEntitylessAttributes(def);\n-\n-\t\t// get the table\n-\t\tCellTable<Attribute> table = jsonCallback.getTable();\n-\n-\t\tthis.map = jsonCallback.getMap();\n-\n-\t\tif (!isAuthorized()) jsonCallback.setCheckable(false);\n-\n-\t\tfinal CustomButton setButton = TabMenu.getPredefinedButton(ButtonType.SAVE, ButtonTranslation.INSTANCE.saveChangesInAttributes());\n-\t\tmenu.addWidget(setButton);\n-\t\tif (!isAuthorized()) setButton.setEnabled(false);\n-\n-\t\t// refresh table\n-\t\tfinal JsonCallbackEvents events = JsonCallbackEvents.refreshTableEvents(jsonCallback);\n-\n-\t\t// set button event with button disable\n-\t\tfinal JsonCallbackEvents setButtonEvent = JsonCallbackEvents.disableButtonEvents(setButton, events);\n-\n-\t\tsetButton.addClickHandler(event -> {\n-\n-\t\t\tArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n-\n-\t\t\tif (UiElements.cantSaveEmptyListDialogBox(list)) {\n-\t\t\t\tMap<String, String> ids = new HashMap<>();\n-\t\t\t\tSetEntitylessAttribute request = new SetEntitylessAttribute(setButtonEvent);\n-\t\t\t\tfor (Attribute a : list) {\n-\t\t\t\t\tids.put(\"key\", map.get(a));\n-\t\t\t\t\trequest.setAttribute(ids, a);\n-\t\t\t\t}\n-\t\t\t\tdraw();\n-\t\t\t}\n-\t\t});\n-\n-\t\t// remove attr button\n-\t\tfinal CustomButton removeButton = TabMenu.getPredefinedButton(ButtonType.REMOVE, ButtonTranslation.INSTANCE.removeAttributes());\n-\t\tmenu.addWidget(removeButton);\n-\t\tif (!isAuthorized()) removeButton.setEnabled(false);\n-\n-\n-\t\t// remove button event\n-\t\tremoveButton.addClickHandler(event -> {\n-\t\t\tArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n-\t\t\tif (UiElements.cantSaveEmptyListDialogBox(list)) {\n-\t\t\t\tfor (Attribute a : list) {\n-\t\t\t\t\tremoveAttribute(map.get(a));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tfinal TextBox keyBox = new TextBox();\n-\t\tkeyBox.getElement().setPropertyString(\"placeholder\", \"enter key for new attribute\");\n-\n-\t\tfinal TextBox valueBox = new TextBox();\n-\t\tvalueBox.getElement().setPropertyString(\"placeholder\", \"enter value for new attribute\");\n-\n-\t\tfinal TextBox mapKeyBox = new TextBox();\n-\t\tmapKeyBox.getElement().setPropertyString(\"placeholder\", \"enter key for a map\");\n-\n-\t\tfinal TextBox mapValueBox = new TextBox();\n-\t\tmapValueBox.getElement().setPropertyString(\"placeholder\", \"enter value for a map\");\n-\n-\t\t//add attr button\n-\t\tCustomButton addButton = TabMenu.getPredefinedButton(ButtonType.ADD, true,\n-\t\t\tButtonTranslation.INSTANCE.setNewAttributes(), event -> {\n-\t\t\t\tmap = jsonCallback.getMap();\n-\t\t\t\tif (map.containsValue(keyBox.getText())) {\n-\t\t\t\t\tUiElements.generateAlert(\"\", \"Key \\\"\" + keyBox.getText() + \"\\\" already exists\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (keyBox.getText().equals(\"\")) {\n-\t\t\t\t\tUiElements.generateAlert(\"\", \"Enter key into key box\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (shouldHaveValueBox() && !valueBox.getText().equals(\"\")) {\n-\t\t\t\t\taddAttribute(keyBox.getText(), valueBox.getText(), null);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (shouldHaveValueBox() && valueBox.getText().equals(\"\")) {\n-\t\t\t\t\tUiElements.generateAlert(\"\", \"Enter value into value box\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (def.getType().equals(\"java.util.LinkedHashMap\")) {\n-\t\t\t\t\taddAttribute(keyBox.getText(), mapValueBox.getText(), mapKeyBox.getText());\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\taddAttribute(keyBox.getText(), null, null);\n-\t\t\t});\n-\t\tmenu.addWidget(addButton);\n-\t\tif (!isAuthorized()) addButton.setEnabled(false);\n-\n-\t\tmenu.addWidget(new Label(\"New key:\"));\n-\t\tmenu.addWidget(keyBox);\n-\n-\t\tif (shouldHaveValueBox()) {\n-\t\t\tmenu.addWidget(new Label(\"Value for new key:\"));\n-\t\t\tmenu.addWidget(valueBox);\n-\t\t}\n-\n-\t\tif (def.getType().equals(\"java.util.LinkedHashMap\")) {\n-\t\t\tmenu.addWidget(new Label(\"First entry for new key:\"));\n-\t\t\tmenu.addWidget(mapKeyBox);\n-\t\t\tmenu.addWidget(new Label(\"=\"));\n-\t\t\tmenu.addWidget(mapValueBox);\n-\t\t}\n-\n-\t\t// add a class to the table and wrap it into scroll panel\n-\t\ttable.addStyleName(\"perun-table\");\n-\t\tScrollPanel sp = new ScrollPanel(table);\n-\t\tsp.addStyleName(\"perun-tableScrollPanel\");\n-\t\tif (isAuthorized()) JsonUtils.addTableManagedButton(jsonCallback, table, removeButton);\n-\n-\t\t// add menu and the table to the main panel\n-\t\tfirstTabPanel.add(menu);\n-\t\tfirstTabPanel.setCellHeight(menu, \"30px\");\n-\t\tfirstTabPanel.add(sp);\n-\n-\t\tsession.getUiElements().resizePerunTable(sp, 350, this);\n-\n-\t\tthis.contentWidget.setWidget(firstTabPanel);\n-\n-\t\treturn getWidget();\n-\t}\n-\n-\t@Override\n-\tpublic Widget getWidget() {\n-\t\treturn this.contentWidget;\n-\t}\n-\n-\t@Override\n-\tpublic Widget getTitle() {\n-\t\treturn this.titleWidget;\n-\t}\n-\n-\t@Override\n-\tpublic ImageResource getIcon() {\n-\t\treturn SmallIcons.INSTANCE.attributesDisplayIcon();\n-\t}\n-\n-\t@Override\n-\tpublic boolean multipleInstancesEnabled() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void open() {\n-\t\tsession.getUiElements().getMenu().openMenu(MainMenu.PERUN_ADMIN);\n-\t\tsession.getUiElements().getBreadcrumbs().setLocation(0, \"Entityless attributes setting\", getUrlWithParameters());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isAuthorized() {\n-\t\treturn session.isPerunAdmin();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isPrepared() {\n-\t\treturn def != null;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isRefreshParentOnClose() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void onClose() {\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object o) {\n-\t\tif (this == o) return true;\n-\t\tif (o == null || getClass() != o.getClass()) return false;\n-\t\tEntitylessAttributeEditKeyTabItem that = (EntitylessAttributeEditKeyTabItem) o;\n-\t\treturn Objects.equals(def, that.def);\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\treturn Objects.hash(def);\n-\t}\n-\n-\tprivate void addAttribute(String key, String value, String mapKey) {\n-\t\tif (def.getType().equals(\"java.lang.Integer\")) {\n-\t\t\ttry {\n-\t\t\t\tInteger.valueOf(value);\n-\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\tUiElements.generateAlert(\"\", \"Enter NUMBER into value box\");\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\t\tString JSON_URL = \"attributesManager/setAttribute\";\n-\n-\t\tJsonCallbackEvents newEvents = new JsonCallbackEvents() {\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tsession.getUiElements().setLogErrorText(\"Creating entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" and value: \" + value + \" failed\");\n-\t\t\t}\n-\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\tsession.getUiElements().setLogSuccessText(\"Creating entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" and value: \" + value + \" succeeded\");\n-\t\t\t\tdraw();\n-\t\t\t}\n-\n-\t\t\tpublic void onLoadingStart() {\n-\n-\t\t\t}\n-\n-\t\t};\n-\n-\t\tJsonPostClient jpc = new JsonPostClient(newEvents);\n-\t\tjpc.sendData(JSON_URL, prepareJSONObject(key, value, mapKey));\n-\t}\n-\n-\tprivate void removeAttribute(String key) {\n-\t\tString JSON_URL = \"attributesManager/removeAttribute\";\n-\n-\t\tJsonCallbackEvents newEvents = new JsonCallbackEvents() {\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tsession.getUiElements().setLogErrorText(\"Removing entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" failed\");\n-\t\t\t}\n-\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\tsession.getUiElements().setLogSuccessText(\"Removing entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" succeeded\");\n-\t\t\t\tdraw();\n-\t\t\t}\n-\n-\t\t\tpublic void onLoadingStart() {\n-\n-\t\t\t}\n-\t\t};\n-\n-\t\tJSONObject jo = new JSONObject();\n-\t\tjo.put(\"key\", new JSONString(key));\n-\t\tjo.put(\"attribute\", new JSONNumber(def.getId()));\n-\n-\t\tJsonPostClient jpc = new JsonPostClient(newEvents);\n-\t\tjpc.sendData(JSON_URL, jo);\n-\t}\n-\n-\t/**\n-\t * Prepares a JSON object\n-\t *\n-\t * @return JSONObject the whole query\n-\t */\n-\tprivate JSONObject prepareJSONObject(String key, String value, String mapKey) {\n-\n-\t\t// create new Attribute jsonObject\n-\t\tJSONObject newAttr = new JSONObject();\n-\t\tnewAttr.put(\"id\", new JSONNumber(def.getId()));\n-\t\tnewAttr.put(\"type\", new JSONString(def.getType()));\n-\t\tnewAttr.put(\"description\", new JSONString(def.getDescription()));\n-\t\tnewAttr.put(\"namespace\", new JSONString(def.getNamespace()));\n-\t\tnewAttr.put(\"friendlyName\", new JSONString(def.getFriendlyName()));\n-\t\tnewAttr.put(\"displayName\", new JSONString(def.getDisplayName()));\n-\t\tnewAttr.put(\"unique\", new JSONString(\"false\"));\n-\n-\t\tswitch (def.getType()) {\n-\t\t\tcase \"java.lang.String\":\n-\t\t\t\tnewAttr.put(\"value\", new JSONString(value));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.util.LinkedHashMap\":\n-\t\t\t\tJSONObject jo = new JSONObject();\n-\t\t\t\tjo.put(mapKey, new JSONString(value));\n-\t\t\t\tnewAttr.put(\"value\", jo);\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.util.ArrayList\":\n-\t\t\t\tJSONArray al = new JSONArray();\n-\t\t\t\tal.set(0, new JSONString(\"value\"));\n-\t\t\t\tnewAttr.put(\"value\", al);\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.lang.Integer\":\n-\t\t\t\tnewAttr.put(\"value\", new JSONNumber(Double.parseDouble(value)));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.lang.Boolean\":\n-\t\t\t\tnewAttr.put(\"value\", JSONBoolean.getInstance(Boolean.parseBoolean(\"True\")));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.lang.LargeString\":\n-\t\t\t\tnewAttr.put(\"value\", new JSONString(value));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.util.LargeArrayList\":\n-\t\t\t\tJSONArray lal = new JSONArray();\n-\t\t\t\tlal.set(0, new JSONString(\"value\"));\n-\t\t\t\tnewAttr.put(\"value\", lal);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\t// create whole JSON query\n-\t\tJSONObject jsonQuery = new JSONObject();\n-\n-\t\tjsonQuery.put(\"key\", new JSONString(key));\n-\n-\t\tjsonQuery.put(\"attribute\", newAttr);\n-\n-\t\treturn jsonQuery;\n-\t}\n-\n-\tprivate boolean shouldHaveValueBox() {\n-\t\treturn (def.getType().equals(\"java.lang.String\") ||\n-\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n-\t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n-\t}\n+    private AttributeDefinition def;\n+\n+    public final static String URL = \"edit_keys\";\n+\n+    public EntitylessAttributeEditKeyTabItem(AttributeDefinition aD) {\n+        this.def = aD;\n+    }\n+\n+    @Override\n+    public String getUrl() {\n+        return URL;\n+    }\n+\n+    @Override\n+    public String getUrlWithParameters() {\n+        return MainMenu.PERUN_ADMIN + UrlMapper.TAB_NAME_SEPARATOR + getUrl();\n+    }\n+\n+    @Override\n+    public Widget draw() {\n+        titleWidget.setText(Utils.getStrippedStringWithEllipsis(def.getName()) + \": settings\");\n+\n+        // MAIN PANEL\n+        VerticalPanel firstTabPanel = new VerticalPanel();\n+        firstTabPanel.setSize(\"100%\", \"100%\");\n+\n+        // HORIZONTAL MENU\n+        TabMenu menu = new TabMenu();\n+        // refresh\n+        menu.addWidget(UiElements.getRefreshButton(this));\n+\n+        // Get Attributes\n+        final GetEntitylessAttributes jsonCallback = new GetEntitylessAttributes(def);\n+\n+        // get the table\n+        CellTable<Attribute> table = jsonCallback.getTable();\n+\n+        this.map = jsonCallback.getMap();\n+\n+        if (!isAuthorized()) {\n+            jsonCallback.setCheckable(false);\n+        }\n+\n+        final CustomButton setButton = TabMenu.getPredefinedButton(ButtonType.SAVE, ButtonTranslation.INSTANCE.saveChangesInAttributes());\n+        menu.addWidget(setButton);\n+        if (!isAuthorized()) {\n+            setButton.setEnabled(false);\n+        }\n+\n+        // refresh table\n+        final JsonCallbackEvents events = JsonCallbackEvents.refreshTableEvents(jsonCallback);\n+\n+        // set button event with button disable\n+        final JsonCallbackEvents setButtonEvent = JsonCallbackEvents.disableButtonEvents(setButton, events);\n+\n+        setButton.addClickHandler(event -> {\n+\n+            ArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n+\n+            if (UiElements.cantSaveEmptyListDialogBox(list)) {\n+                Map<String, String> ids = new HashMap<>();\n+                SetEntitylessAttribute request = new SetEntitylessAttribute(setButtonEvent);\n+                for (Attribute a : list) {\n+                    ids.put(\"key\", map.get(a));\n+                    request.setAttribute(ids, a);\n+                }\n+                draw();\n+            }\n+        });\n+\n+        // remove attr button\n+        final CustomButton removeButton = TabMenu.getPredefinedButton(ButtonType.REMOVE, ButtonTranslation.INSTANCE.removeAttributes());\n+        menu.addWidget(removeButton);\n+        if (!isAuthorized()) {\n+            removeButton.setEnabled(false);\n+        }\n+\n+\n+        // remove button event\n+        removeButton.addClickHandler(event -> {\n+            ArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n+            if (UiElements.cantSaveEmptyListDialogBox(list)) {\n+                for (Attribute a : list) {\n+                    removeAttribute(map.get(a));\n+                }\n+            }\n+        });\n+\n+        final TextBox keyBox = new TextBox();\n+        keyBox.getElement().setPropertyString(\"placeholder\", \"enter key for new attribute\");\n+\n+        final TextBox valueBox = new TextBox();\n+        valueBox.getElement().setPropertyString(\"placeholder\", \"enter value for new attribute\");\n+\n+        final TextBox mapKeyBox = new TextBox();\n+        mapKeyBox.getElement().setPropertyString(\"placeholder\", \"enter key for a map\");\n+\n+        final TextBox mapValueBox = new TextBox();\n+        mapValueBox.getElement().setPropertyString(\"placeholder\", \"enter value for a map\");\n+\n+        //add attr button\n+        CustomButton addButton = TabMenu.getPredefinedButton(ButtonType.ADD, true,\n+                ButtonTranslation.INSTANCE.setNewAttributes(), event -> {\n+                    map = jsonCallback.getMap();\n+                    if (map.containsValue(keyBox.getText())) {\n+                        UiElements.generateAlert(\"\", \"Key \\\"\" + keyBox.getText() + \"\\\" already exists\");\n+                        return;\n+                    }\n+                    if (keyBox.getText().equals(\"\")) {\n+                        UiElements.generateAlert(\"\", \"Enter key into key box\");\n+                        return;\n+                    }\n+                    if (shouldHaveValueBox() && !valueBox.getText().equals(\"\")) {\n+                        addAttribute(keyBox.getText(), valueBox.getText(), null);\n+                        return;\n+                    }\n+                    if (shouldHaveValueBox() && valueBox.getText().equals(\"\")) {\n+                        UiElements.generateAlert(\"\", \"Enter value into value box\");\n+                        return;\n+                    }\n+                    if (def.getType().equals(\"java.util.LinkedHashMap\")) {\n+                        addAttribute(keyBox.getText(), mapValueBox.getText(), mapKeyBox.getText());\n+                        return;\n+                    }\n+                    addAttribute(keyBox.getText(), null, null);\n+                });\n+        menu.addWidget(addButton);\n+        if (!isAuthorized()) {\n+            addButton.setEnabled(false);\n+        }\n+\n+        menu.addWidget(new Label(\"New key:\"));\n+        menu.addWidget(keyBox);\n+\n+        if (shouldHaveValueBox()) {\n+            menu.addWidget(new Label(\"Value for new key:\"));\n+            menu.addWidget(valueBox);\n+        }\n+\n+        if (def.getType().equals(\"java.util.LinkedHashMap\")) {\n+            menu.addWidget(new Label(\"First entry for new key:\"));\n+            menu.addWidget(mapKeyBox);\n+            menu.addWidget(new Label(\"=\"));\n+            menu.addWidget(mapValueBox);\n+        }\n+\n+        // add a class to the table and wrap it into scroll panel\n+        table.addStyleName(\"perun-table\");\n+        ScrollPanel sp = new ScrollPanel(table);\n+        sp.addStyleName(\"perun-tableScrollPanel\");\n+        if (isAuthorized()) {\n+            JsonUtils.addTableManagedButton(jsonCallback, table, removeButton);\n+        }\n+\n+        // add menu and the table to the main panel\n+        firstTabPanel.add(menu);\n+        firstTabPanel.setCellHeight(menu, \"30px\");\n+        firstTabPanel.add(sp);\n+\n+        session.getUiElements().resizePerunTable(sp, 350, this);\n+\n+        this.contentWidget.setWidget(firstTabPanel);\n+\n+        return getWidget();\n+    }\n+\n+    @Override\n+    public Widget getWidget() {\n+        return this.contentWidget;\n+    }\n+\n+    @Override\n+    public Widget getTitle() {\n+        return this.titleWidget;\n+    }\n+\n+    @Override\n+    public ImageResource getIcon() {\n+        return SmallIcons.INSTANCE.attributesDisplayIcon();\n+    }\n+\n+    @Override\n+    public boolean multipleInstancesEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void open() {\n+        session.getUiElements().getMenu().openMenu(MainMenu.PERUN_ADMIN);\n+        session.getUiElements().getBreadcrumbs().setLocation(0, \"Entityless attributes setting\", getUrlWithParameters());\n+    }\n+\n+    @Override\n+    public boolean isAuthorized() {\n+        return session.isPerunAdmin();\n+    }\n+\n+    @Override\n+    public boolean isPrepared() {\n+        return def != null;\n+    }\n+\n+    @Override\n+    public boolean isRefreshParentOnClose() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void onClose() {\n+\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        EntitylessAttributeEditKeyTabItem that = (EntitylessAttributeEditKeyTabItem) o;\n+        return Objects.equals(def, that.def);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(def);\n+    }\n+\n+    private void addAttribute(String key, String value, String mapKey) {\n+        if (def.getType().equals(\"java.lang.Integer\")) {\n+            try {\n+                Integer.valueOf(value);\n+            } catch (NumberFormatException e) {\n+                UiElements.generateAlert(\"\", \"Enter NUMBER into value box\");\n+                return;\n+            }\n+        }\n+        String JSON_URL = \"attributesManager/setAttribute\";\n+\n+        JsonCallbackEvents newEvents = new JsonCallbackEvents() {\n+            public void onError(PerunError error) {\n+                session.getUiElements().setLogErrorText(\"Creating entityless attribute \" + def.getDisplayName() +\n+                        \" with key: \" + key + \" and value: \" + value + \" failed\");\n+            }\n+\n+            public void onFinished(JavaScriptObject jso) {\n+                session.getUiElements().setLogSuccessText(\"Creating entityless attribute \" + def.getDisplayName() +\n+                        \" with key: \" + key + \" and value: \" + value + \" succeeded\");\n+                draw();\n+            }\n+\n+            public void onLoadingStart() {\n+\n+            }\n+\n+        };\n+\n+        JsonPostClient jpc = new JsonPostClient(newEvents);\n+        jpc.sendData(JSON_URL, prepareJSONObject(key, value, mapKey));\n+    }\n+\n+    private void removeAttribute(String key) {\n+        String JSON_URL = \"attributesManager/removeAttribute\";\n+\n+        JsonCallbackEvents newEvents = new JsonCallbackEvents() {\n+            public void onError(PerunError error) {\n+                session.getUiElements().setLogErrorText(\"Removing entityless attribute \" + def.getDisplayName() +\n+                        \" with key: \" + key + \" failed\");\n+            }\n+\n+            public void onFinished(JavaScriptObject jso) {\n+                session.getUiElements().setLogSuccessText(\"Removing entityless attribute \" + def.getDisplayName() +\n+                        \" with key: \" + key + \" succeeded\");\n+                draw();\n+            }\n+\n+            public void onLoadingStart() {\n+\n+            }\n+        };\n+\n+        JSONObject jo = new JSONObject();\n+        jo.put(\"key\", new JSONString(key));\n+        jo.put(\"attribute\", new JSONNumber(def.getId()));\n+\n+        JsonPostClient jpc = new JsonPostClient(newEvents);\n+        jpc.sendData(JSON_URL, jo);\n+    }\n+\n+    /**\n+     * Prepares a JSON object\n+     *\n+     * @return JSONObject the whole query\n+     */\n+    private JSONObject prepareJSONObject(String key, String value, String mapKey) {\n+\n+        // create new Attribute jsonObject\n+        JSONObject newAttr = new JSONObject();\n+        newAttr.put(\"id\", new JSONNumber(def.getId()));\n+        newAttr.put(\"type\", new JSONString(def.getType()));\n+        newAttr.put(\"description\", new JSONString(def.getDescription()));\n+        newAttr.put(\"namespace\", new JSONString(def.getNamespace()));\n+        newAttr.put(\"friendlyName\", new JSONString(def.getFriendlyName()));\n+        newAttr.put(\"displayName\", new JSONString(def.getDisplayName()));\n+        newAttr.put(\"unique\", new JSONString(\"false\"));\n+\n+        switch (def.getType()) {\n+            case \"java.lang.String\":\n+                newAttr.put(\"value\", new JSONString(value));\n+                break;\n+            case \"java.util.LinkedHashMap\":\n+                JSONObject jo = new JSONObject();\n+                jo.put(mapKey, new JSONString(value));\n+                newAttr.put(\"value\", jo);\n+                break;\n+            case \"java.util.ArrayList\":\n+                JSONArray al = new JSONArray();\n+                al.set(0, new JSONString(\"value\"));\n+                newAttr.put(\"value\", al);\n+                break;\n+            case \"java.lang.Integer\":\n+                newAttr.put(\"value\", new JSONNumber(Double.parseDouble(value)));\n+                break;\n+            case \"java.lang.Boolean\":\n+                newAttr.put(\"value\", JSONBoolean.getInstance(Boolean.parseBoolean(\"True\")));\n+                break;\n+            case \"java.lang.LargeString\":\n+                newAttr.put(\"value\", new JSONString(value));\n+                break;\n+            case \"java.util.LargeArrayList\":\n+                JSONArray lal = new JSONArray();\n+                lal.set(0, new JSONString(\"value\"));\n+                newAttr.put(\"value\", lal);\n+                break;\n+        }\n+\n+        // create whole JSON query\n+        JSONObject jsonQuery = new JSONObject();\n+\n+        jsonQuery.put(\"key\", new JSONString(key));\n+\n+        jsonQuery.put(\"attribute\", newAttr);\n+\n+        return jsonQuery;\n+    }\n+\n+    private boolean shouldHaveValueBox() {\n+        return (def.getType().equals(\"java.lang.String\") ||\n+                def.getType().equals(\"java.lang.Integer\") ||\n+                def.getType().equals(\"java.lang.LargeString\"));\n+    }\n }\n",
            "diff_size": 370
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "401",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/naturalize/427/EntitylessAttributeEditKeyTabItem.java\nindex 58759baf96a..940ab201c80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/naturalize/427/EntitylessAttributeEditKeyTabItem.java\n@@ -160,8 +160,7 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \t\tmapValueBox.getElement().setPropertyString(\"placeholder\", \"enter value for a map\");\n \n \t\t//add attr button\n-\t\tCustomButton addButton = TabMenu.getPredefinedButton(ButtonType.ADD, true,\n-\t\t\tButtonTranslation.INSTANCE.setNewAttributes(), event -> {\n+\t\tCustomButton addButton = TabMenu.getPredefinedButton(ButtonType.ADD, true, ButtonTranslation.INSTANCE.setNewAttributes(), event -> {\n \t\t\t\tmap = jsonCallback.getMap();\n \t\t\t\tif (map.containsValue(keyBox.getText())) {\n \t\t\t\t\tUiElements.generateAlert(\"\", \"Key \\\"\" + keyBox.getText() + \"\\\" already exists\");\n@@ -185,7 +184,7 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \t\t\t\t}\n \t\t\t\taddAttribute(keyBox.getText(), null, null);\n \t\t\t});\n-\t\tmenu.addWidget(addButton);\n+menu.addWidget(addButton);\n \t\tif (!isAuthorized()) addButton.setEnabled(false);\n \n \t\tmenu.addWidget(new Label(\"New key:\"));\n@@ -295,12 +294,12 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \t\t\tpublic void onError(PerunError error) {\n \t\t\t\tsession.getUiElements().setLogErrorText(\"Creating entityless attribute \" + def.getDisplayName() +\n \t\t\t\t\t\" with key: \" + key + \" and value: \" + value + \" failed\");\n-\t\t\t}\n+\t}\n \n \t\t\tpublic void onFinished(JavaScriptObject jso) {\n \t\t\t\tsession.getUiElements().setLogSuccessText(\"Creating entityless attribute \" + def.getDisplayName() +\n \t\t\t\t\t\" with key: \" + key + \" and value: \" + value + \" succeeded\");\n-\t\t\t\tdraw();\n+draw();\n \t\t\t}\n \n \t\t\tpublic void onLoadingStart() {\n@@ -320,12 +319,12 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \t\t\tpublic void onError(PerunError error) {\n \t\t\t\tsession.getUiElements().setLogErrorText(\"Removing entityless attribute \" + def.getDisplayName() +\n \t\t\t\t\t\" with key: \" + key + \" failed\");\n-\t\t\t}\n+\t}\n \n \t\t\tpublic void onFinished(JavaScriptObject jso) {\n \t\t\t\tsession.getUiElements().setLogSuccessText(\"Removing entityless attribute \" + def.getDisplayName() +\n \t\t\t\t\t\" with key: \" + key + \" succeeded\");\n-\t\t\t\tdraw();\n+draw();\n \t\t\t}\n \n \t\t\tpublic void onLoadingStart() {\n@@ -399,8 +398,7 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \t}\n \n \tprivate boolean shouldHaveValueBox() {\n-\t\treturn (def.getType().equals(\"java.lang.String\") ||\n-\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n+\t\treturn (def.getType().equals(\"java.lang.String\") || def.getType().equals(\"java.lang.Integer\") ||\n \t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/427/EntitylessAttributeEditKeyTabItem.java\nindex 58759baf96a..1af69f0110f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/427/EntitylessAttributeEditKeyTabItem.java\n@@ -34,7 +34,6 @@ import cz.metacentrum.perun.webgui.tabs.TabItemWithUrl;\n import cz.metacentrum.perun.webgui.tabs.UrlMapper;\n import cz.metacentrum.perun.webgui.widgets.CustomButton;\n import cz.metacentrum.perun.webgui.widgets.TabMenu;\n-\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n@@ -45,362 +44,352 @@ import java.util.Objects;\n  *\n  * @author Dano Fecko <dano9500@gmail.com>\n  */\n+\n+\n public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUrl {\n \n-\t/**\n-\t * Perun web session\n-\t */\n-\tprivate PerunWebSession session = PerunWebSession.getInstance();\n+ /**\n+  * Perun web session\n+  */\n+\n+\n+ private PerunWebSession session = PerunWebSession.getInstance();\n+\n+ /**\n+  * Content widget - should be simple panel\n+  */\n+ private SimplePanel contentWidget = new SimplePanel();\n+\n+ /**\n+  * Title widget\n+  */\n+ private Label titleWidget = new Label(\"Loading vo attributes\");\n+\n+ //map of attributes and keys\n+ private HashMap<Attribute, String> map;\n+ private AttributeDefinition def;\n+\n+ public final static String URL = \"edit_keys\";\n+\n+\n+ public EntitylessAttributeEditKeyTabItem(AttributeDefinition aD) {\n+  this.def = aD;\n+ }\n+\n+ @Override\n+ public String getUrl() {\n+  return URL;\n+ }\n+\n+ @Override\n+ public String getUrlWithParameters() {\n+  return MainMenu.PERUN_ADMIN + UrlMapper.TAB_NAME_SEPARATOR + getUrl();\n+ }\n+\n+ @Override\n+ public Widget draw() {\n+  titleWidget.setText(Utils.getStrippedStringWithEllipsis(def.getName()) + \": settings\");\n+\n+  // MAIN PANEL\n+  VerticalPanel firstTabPanel = new VerticalPanel();\n+  firstTabPanel.setSize(\"100%\", \"100%\");\n+\n+  // HORIZONTAL MENU\n+  TabMenu menu = new TabMenu();\n+  // refresh\n+  menu.addWidget(UiElements.getRefreshButton(this));\n \n-\t/**\n-\t * Content widget - should be simple panel\n-\t */\n-\tprivate SimplePanel contentWidget = new SimplePanel();\n+  // Get Attributes\n \n-\t/**\n-\t * Title widget\n-\t */\n-\tprivate Label titleWidget = new Label(\"Loading vo attributes\");\n \n-\t//map of attributes and keys\n-\tprivate HashMap<Attribute, String> map;\n+  final GetEntitylessAttributes jsonCallback = new GetEntitylessAttributes(def);\n \n-\tprivate AttributeDefinition def;\n+  // get the table\n+  CellTable<Attribute> table = jsonCallback.getTable();\n+  this.map = jsonCallback.getMap();\n+  if (!isAuthorized()) jsonCallback.setCheckable(false);\n \n-\tpublic final static String URL = \"edit_keys\";\n \n-\tpublic EntitylessAttributeEditKeyTabItem(AttributeDefinition aD) {\n-\t\tthis.def = aD;\n-\t}\n-\n-\t@Override\n-\tpublic String getUrl() {\n-\t\treturn URL;\n-\t}\n-\n-\t@Override\n-\tpublic String getUrlWithParameters() {\n-\t\treturn MainMenu.PERUN_ADMIN + UrlMapper.TAB_NAME_SEPARATOR + getUrl();\n-\t}\n-\n-\t@Override\n-\tpublic Widget draw() {\n-\t\ttitleWidget.setText(Utils.getStrippedStringWithEllipsis(def.getName()) + \": settings\");\n-\n-\t\t// MAIN PANEL\n-\t\tVerticalPanel firstTabPanel = new VerticalPanel();\n-\t\tfirstTabPanel.setSize(\"100%\", \"100%\");\n-\n-\t\t// HORIZONTAL MENU\n-\t\tTabMenu menu = new TabMenu();\n-\t\t// refresh\n-\t\tmenu.addWidget(UiElements.getRefreshButton(this));\n-\n-\t\t// Get Attributes\n-\t\tfinal GetEntitylessAttributes jsonCallback = new GetEntitylessAttributes(def);\n-\n-\t\t// get the table\n-\t\tCellTable<Attribute> table = jsonCallback.getTable();\n-\n-\t\tthis.map = jsonCallback.getMap();\n-\n-\t\tif (!isAuthorized()) jsonCallback.setCheckable(false);\n-\n-\t\tfinal CustomButton setButton = TabMenu.getPredefinedButton(ButtonType.SAVE, ButtonTranslation.INSTANCE.saveChangesInAttributes());\n-\t\tmenu.addWidget(setButton);\n-\t\tif (!isAuthorized()) setButton.setEnabled(false);\n-\n-\t\t// refresh table\n-\t\tfinal JsonCallbackEvents events = JsonCallbackEvents.refreshTableEvents(jsonCallback);\n-\n-\t\t// set button event with button disable\n-\t\tfinal JsonCallbackEvents setButtonEvent = JsonCallbackEvents.disableButtonEvents(setButton, events);\n-\n-\t\tsetButton.addClickHandler(event -> {\n-\n-\t\t\tArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n-\n-\t\t\tif (UiElements.cantSaveEmptyListDialogBox(list)) {\n-\t\t\t\tMap<String, String> ids = new HashMap<>();\n-\t\t\t\tSetEntitylessAttribute request = new SetEntitylessAttribute(setButtonEvent);\n-\t\t\t\tfor (Attribute a : list) {\n-\t\t\t\t\tids.put(\"key\", map.get(a));\n-\t\t\t\t\trequest.setAttribute(ids, a);\n-\t\t\t\t}\n-\t\t\t\tdraw();\n-\t\t\t}\n-\t\t});\n-\n-\t\t// remove attr button\n-\t\tfinal CustomButton removeButton = TabMenu.getPredefinedButton(ButtonType.REMOVE, ButtonTranslation.INSTANCE.removeAttributes());\n-\t\tmenu.addWidget(removeButton);\n-\t\tif (!isAuthorized()) removeButton.setEnabled(false);\n-\n-\n-\t\t// remove button event\n-\t\tremoveButton.addClickHandler(event -> {\n-\t\t\tArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n-\t\t\tif (UiElements.cantSaveEmptyListDialogBox(list)) {\n-\t\t\t\tfor (Attribute a : list) {\n-\t\t\t\t\tremoveAttribute(map.get(a));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tfinal TextBox keyBox = new TextBox();\n-\t\tkeyBox.getElement().setPropertyString(\"placeholder\", \"enter key for new attribute\");\n-\n-\t\tfinal TextBox valueBox = new TextBox();\n-\t\tvalueBox.getElement().setPropertyString(\"placeholder\", \"enter value for new attribute\");\n-\n-\t\tfinal TextBox mapKeyBox = new TextBox();\n-\t\tmapKeyBox.getElement().setPropertyString(\"placeholder\", \"enter key for a map\");\n-\n-\t\tfinal TextBox mapValueBox = new TextBox();\n-\t\tmapValueBox.getElement().setPropertyString(\"placeholder\", \"enter value for a map\");\n-\n-\t\t//add attr button\n-\t\tCustomButton addButton = TabMenu.getPredefinedButton(ButtonType.ADD, true,\n-\t\t\tButtonTranslation.INSTANCE.setNewAttributes(), event -> {\n-\t\t\t\tmap = jsonCallback.getMap();\n-\t\t\t\tif (map.containsValue(keyBox.getText())) {\n-\t\t\t\t\tUiElements.generateAlert(\"\", \"Key \\\"\" + keyBox.getText() + \"\\\" already exists\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (keyBox.getText().equals(\"\")) {\n-\t\t\t\t\tUiElements.generateAlert(\"\", \"Enter key into key box\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (shouldHaveValueBox() && !valueBox.getText().equals(\"\")) {\n-\t\t\t\t\taddAttribute(keyBox.getText(), valueBox.getText(), null);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (shouldHaveValueBox() && valueBox.getText().equals(\"\")) {\n-\t\t\t\t\tUiElements.generateAlert(\"\", \"Enter value into value box\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tif (def.getType().equals(\"java.util.LinkedHashMap\")) {\n-\t\t\t\t\taddAttribute(keyBox.getText(), mapValueBox.getText(), mapKeyBox.getText());\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\taddAttribute(keyBox.getText(), null, null);\n-\t\t\t});\n-\t\tmenu.addWidget(addButton);\n-\t\tif (!isAuthorized()) addButton.setEnabled(false);\n-\n-\t\tmenu.addWidget(new Label(\"New key:\"));\n-\t\tmenu.addWidget(keyBox);\n-\n-\t\tif (shouldHaveValueBox()) {\n-\t\t\tmenu.addWidget(new Label(\"Value for new key:\"));\n-\t\t\tmenu.addWidget(valueBox);\n-\t\t}\n-\n-\t\tif (def.getType().equals(\"java.util.LinkedHashMap\")) {\n-\t\t\tmenu.addWidget(new Label(\"First entry for new key:\"));\n-\t\t\tmenu.addWidget(mapKeyBox);\n-\t\t\tmenu.addWidget(new Label(\"=\"));\n-\t\t\tmenu.addWidget(mapValueBox);\n-\t\t}\n-\n-\t\t// add a class to the table and wrap it into scroll panel\n-\t\ttable.addStyleName(\"perun-table\");\n-\t\tScrollPanel sp = new ScrollPanel(table);\n-\t\tsp.addStyleName(\"perun-tableScrollPanel\");\n-\t\tif (isAuthorized()) JsonUtils.addTableManagedButton(jsonCallback, table, removeButton);\n-\n-\t\t// add menu and the table to the main panel\n-\t\tfirstTabPanel.add(menu);\n-\t\tfirstTabPanel.setCellHeight(menu, \"30px\");\n-\t\tfirstTabPanel.add(sp);\n-\n-\t\tsession.getUiElements().resizePerunTable(sp, 350, this);\n-\n-\t\tthis.contentWidget.setWidget(firstTabPanel);\n-\n-\t\treturn getWidget();\n-\t}\n-\n-\t@Override\n-\tpublic Widget getWidget() {\n-\t\treturn this.contentWidget;\n-\t}\n-\n-\t@Override\n-\tpublic Widget getTitle() {\n-\t\treturn this.titleWidget;\n-\t}\n-\n-\t@Override\n-\tpublic ImageResource getIcon() {\n-\t\treturn SmallIcons.INSTANCE.attributesDisplayIcon();\n-\t}\n-\n-\t@Override\n-\tpublic boolean multipleInstancesEnabled() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void open() {\n-\t\tsession.getUiElements().getMenu().openMenu(MainMenu.PERUN_ADMIN);\n-\t\tsession.getUiElements().getBreadcrumbs().setLocation(0, \"Entityless attributes setting\", getUrlWithParameters());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isAuthorized() {\n-\t\treturn session.isPerunAdmin();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isPrepared() {\n-\t\treturn def != null;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isRefreshParentOnClose() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void onClose() {\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object o) {\n-\t\tif (this == o) return true;\n-\t\tif (o == null || getClass() != o.getClass()) return false;\n-\t\tEntitylessAttributeEditKeyTabItem that = (EntitylessAttributeEditKeyTabItem) o;\n-\t\treturn Objects.equals(def, that.def);\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\treturn Objects.hash(def);\n-\t}\n-\n-\tprivate void addAttribute(String key, String value, String mapKey) {\n-\t\tif (def.getType().equals(\"java.lang.Integer\")) {\n-\t\t\ttry {\n-\t\t\t\tInteger.valueOf(value);\n-\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\tUiElements.generateAlert(\"\", \"Enter NUMBER into value box\");\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\t\tString JSON_URL = \"attributesManager/setAttribute\";\n-\n-\t\tJsonCallbackEvents newEvents = new JsonCallbackEvents() {\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tsession.getUiElements().setLogErrorText(\"Creating entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" and value: \" + value + \" failed\");\n-\t\t\t}\n-\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\tsession.getUiElements().setLogSuccessText(\"Creating entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" and value: \" + value + \" succeeded\");\n-\t\t\t\tdraw();\n-\t\t\t}\n-\n-\t\t\tpublic void onLoadingStart() {\n-\n-\t\t\t}\n-\n-\t\t};\n-\n-\t\tJsonPostClient jpc = new JsonPostClient(newEvents);\n-\t\tjpc.sendData(JSON_URL, prepareJSONObject(key, value, mapKey));\n-\t}\n-\n-\tprivate void removeAttribute(String key) {\n-\t\tString JSON_URL = \"attributesManager/removeAttribute\";\n-\n-\t\tJsonCallbackEvents newEvents = new JsonCallbackEvents() {\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tsession.getUiElements().setLogErrorText(\"Removing entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" failed\");\n-\t\t\t}\n-\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\tsession.getUiElements().setLogSuccessText(\"Removing entityless attribute \" + def.getDisplayName() +\n-\t\t\t\t\t\" with key: \" + key + \" succeeded\");\n-\t\t\t\tdraw();\n-\t\t\t}\n-\n-\t\t\tpublic void onLoadingStart() {\n-\n-\t\t\t}\n-\t\t};\n-\n-\t\tJSONObject jo = new JSONObject();\n-\t\tjo.put(\"key\", new JSONString(key));\n-\t\tjo.put(\"attribute\", new JSONNumber(def.getId()));\n-\n-\t\tJsonPostClient jpc = new JsonPostClient(newEvents);\n-\t\tjpc.sendData(JSON_URL, jo);\n-\t}\n-\n-\t/**\n-\t * Prepares a JSON object\n-\t *\n-\t * @return JSONObject the whole query\n-\t */\n-\tprivate JSONObject prepareJSONObject(String key, String value, String mapKey) {\n-\n-\t\t// create new Attribute jsonObject\n-\t\tJSONObject newAttr = new JSONObject();\n-\t\tnewAttr.put(\"id\", new JSONNumber(def.getId()));\n-\t\tnewAttr.put(\"type\", new JSONString(def.getType()));\n-\t\tnewAttr.put(\"description\", new JSONString(def.getDescription()));\n-\t\tnewAttr.put(\"namespace\", new JSONString(def.getNamespace()));\n-\t\tnewAttr.put(\"friendlyName\", new JSONString(def.getFriendlyName()));\n-\t\tnewAttr.put(\"displayName\", new JSONString(def.getDisplayName()));\n-\t\tnewAttr.put(\"unique\", new JSONString(\"false\"));\n-\n-\t\tswitch (def.getType()) {\n-\t\t\tcase \"java.lang.String\":\n-\t\t\t\tnewAttr.put(\"value\", new JSONString(value));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.util.LinkedHashMap\":\n-\t\t\t\tJSONObject jo = new JSONObject();\n-\t\t\t\tjo.put(mapKey, new JSONString(value));\n-\t\t\t\tnewAttr.put(\"value\", jo);\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.util.ArrayList\":\n-\t\t\t\tJSONArray al = new JSONArray();\n-\t\t\t\tal.set(0, new JSONString(\"value\"));\n-\t\t\t\tnewAttr.put(\"value\", al);\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.lang.Integer\":\n-\t\t\t\tnewAttr.put(\"value\", new JSONNumber(Double.parseDouble(value)));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.lang.Boolean\":\n-\t\t\t\tnewAttr.put(\"value\", JSONBoolean.getInstance(Boolean.parseBoolean(\"True\")));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.lang.LargeString\":\n-\t\t\t\tnewAttr.put(\"value\", new JSONString(value));\n-\t\t\t\tbreak;\n-\t\t\tcase \"java.util.LargeArrayList\":\n-\t\t\t\tJSONArray lal = new JSONArray();\n-\t\t\t\tlal.set(0, new JSONString(\"value\"));\n-\t\t\t\tnewAttr.put(\"value\", lal);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\t// create whole JSON query\n-\t\tJSONObject jsonQuery = new JSONObject();\n-\n-\t\tjsonQuery.put(\"key\", new JSONString(key));\n-\n-\t\tjsonQuery.put(\"attribute\", newAttr);\n-\n-\t\treturn jsonQuery;\n-\t}\n-\n-\tprivate boolean shouldHaveValueBox() {\n-\t\treturn (def.getType().equals(\"java.lang.String\") ||\n-\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n-\t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n-\t}\n-}\n+  final CustomButton setButton = TabMenu.getPredefinedButton(ButtonType.SAVE, ButtonTranslation.INSTANCE.saveChangesInAttributes());\n+  menu.addWidget(setButton);\n+  if (!isAuthorized()) setButton.setEnabled(false);\n+\n+  // refresh table\n+\n+\n+  final JsonCallbackEvents events = JsonCallbackEvents.refreshTableEvents(jsonCallback);\n+\n+  // set button event with button disable\n+  final JsonCallbackEvents setButtonEvent = JsonCallbackEvents.disableButtonEvents(setButton, events);\n+  setButton.addClickHandler(event-> {\n+                             ArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n+                             if (UiElements.cantSaveEmptyListDialogBox(list)) {\n+                              Map<String, String> ids = new HashMap<>();\n+                              SetEntitylessAttribute request = new SetEntitylessAttribute(setButtonEvent);\n+                              for (Attribute a : list) {\n+                               ids.put(\"key\", map.get(a));\n+                               request.setAttribute(ids, a);\n+                              }\n+                              draw();\n+                             }\n+                            });\n+\n+  // remove attr button\n+\n+\n+  final CustomButton removeButton = TabMenu.getPredefinedButton(ButtonType.REMOVE, ButtonTranslation.INSTANCE.removeAttributes());\n+  menu.addWidget(removeButton);\n+  if (!isAuthorized()) removeButton.setEnabled(false);\n+\n+\n+  // remove button event\n+  removeButton.addClickHandler(event-> {\n+                                ArrayList<Attribute> list = jsonCallback.getTableSelectedList();\n+                                if (UiElements.cantSaveEmptyListDialogBox(list)) {\n+\n+                                 for (Attribute a : list) {\n+                                  removeAttribute(map.get(a));\n+                                 }\n+                                }\n+                               });\n+\n+\n+  final TextBox keyBox = new TextBox();\n+  keyBox.getElement().setPropertyString(\"placeholder\", \"enter key for new attribute\");\n+\n+\n+  final TextBox valueBox = new TextBox();\n+  valueBox.getElement().setPropertyString(\"placeholder\", \"enter value for new attribute\");\n+\n+\n+  final TextBox mapKeyBox = new TextBox();\n+  mapKeyBox.getElement().setPropertyString(\"placeholder\", \"enter key for a map\");\n+\n+\n+  final TextBox mapValueBox = new TextBox();\n+  mapValueBox.getElement().setPropertyString(\"placeholder\", \"enter value for a map\");\n+\n+  //add attr button\n+  CustomButton addButton = TabMenu.getPredefinedButton(ButtonType.ADD, true, ButtonTranslation.INSTANCE.setNewAttributes(), event-> {\n+                                                                                                                             map = jsonCallback.getMap();\n+                                                                                                                             if (map.containsValue(keyBox.getText())) {\n+                                                                                                                              UiElements.generateAlert(\"\", \"Key \\\"\" + keyBox.getText() + \"\\\" already exists\");\n+                                                                                                                              return;\n+                                                                                                                             }\n+                                                                                                                             if (keyBox.getText().equals(\"\")) {\n+                                                                                                                              UiElements.generateAlert(\"\", \"Enter key into key box\");\n+                                                                                                                              return;\n+                                                                                                                             }\n+                                                                                                                             if (shouldHaveValueBox() && !valueBox.getText().equals(\"\")) {\n+                                                                                                                              addAttribute(keyBox.getText(), valueBox.getText(), null);\n+                                                                                                                              return;\n+                                                                                                                             }\n+                                                                                                                             if (shouldHaveValueBox() && valueBox.getText().equals(\"\")) {\n+                                                                                                                              UiElements.generateAlert(\"\", \"Enter value into value box\");\n+                                                                                                                              return;\n+                                                                                                                             }\n+                                                                                                                             if (def.getType().equals(\"java.util.LinkedHashMap\")) {\n+                                                                                                                              addAttribute(keyBox.getText(), mapValueBox.getText(), mapKeyBox.getText());\n+                                                                                                                              return;\n+                                                                                                                             }\n+                                                                                                                             addAttribute(keyBox.getText(), null, null);\n+                                                                                                                            });\n+  menu.addWidget(addButton);\n+  if (!isAuthorized()) addButton.setEnabled(false);\n+  menu.addWidget(new Label(\"New key:\"));\n+  menu.addWidget(keyBox);\n+  if (shouldHaveValueBox()) {\n+   menu.addWidget(new Label(\"Value for new key:\"));\n+   menu.addWidget(valueBox);\n+  }\n+  if (def.getType().equals(\"java.util.LinkedHashMap\")) {\n+   menu.addWidget(new Label(\"First entry for new key:\"));\n+   menu.addWidget(mapKeyBox);\n+   menu.addWidget(new Label(\"=\"));\n+   menu.addWidget(mapValueBox);\n+  }\n+\n+  // add a class to the table and wrap it into scroll panel\n+  table.addStyleName(\"perun-table\");\n+  ScrollPanel sp = new ScrollPanel(table);\n+  sp.addStyleName(\"perun-tableScrollPanel\");\n+  if (isAuthorized()) JsonUtils.addTableManagedButton(jsonCallback, table, removeButton);\n+\n+  // add menu and the table to the main panel\n+  firstTabPanel.add(menu);\n+  firstTabPanel.setCellHeight(menu, \"30px\");\n+  firstTabPanel.add(sp);\n+  session.getUiElements().resizePerunTable(sp, 350, this);\n+  this.contentWidget.setWidget(firstTabPanel);\n+  return getWidget();\n+ }\n+\n+ @Override\n+ public Widget getWidget() {\n+  return this.contentWidget;\n+ }\n+\n+ @Override\n+ public Widget getTitle() {\n+  return this.titleWidget;\n+ }\n+\n+ @Override\n+ public ImageResource getIcon() {\n+  return SmallIcons.INSTANCE.attributesDisplayIcon();\n+ }\n+\n+ @Override\n+ public boolean multipleInstancesEnabled() {\n+  return false;\n+ }\n+\n+ @Override\n+ public void open() {\n+  session.getUiElements().getMenu().openMenu(MainMenu.PERUN_ADMIN);\n+  session.getUiElements().getBreadcrumbs().setLocation(0, \"Entityless attributes setting\", getUrlWithParameters());\n+ }\n+\n+ @Override\n+ public boolean isAuthorized() {\n+  return session.isPerunAdmin();\n+ }\n+\n+ @Override\n+ public boolean isPrepared() {\n+  return def != null;\n+ }\n+\n+ @Override\n+ public boolean isRefreshParentOnClose() {\n+  return false;\n+ }\n+\n+ @Override\n+ public void onClose() { }\n+\n+ @Override\n+ public boolean equals(Object o) {\n+  if (this == o)\n+   return true;\n+  if (o == null || getClass() != o.getClass())\n+   return false;\n+  EntitylessAttributeEditKeyTabItem that = (EntitylessAttributeEditKeyTabItem) o;\n+  return Objects.equals(def, that.def);\n+ }\n+\n+ @Override\n+ public int hashCode() {\n+  return Objects.hash(def);\n+ }\n+\n+\n+ private void addAttribute(String key, String value, String mapKey) {\n+  if (def.getType().equals(\"java.lang.Integer\")) {\n+   try {\n+    Integer.valueOf(value);\n+   } catch (NumberFormatException e) {\n+    UiElements.generateAlert(\"\", \"Enter NUMBER into value box\");\n+    return;\n+   }\n+  }\n+  String JSON_URL = \"attributesManager/setAttribute\";\n+  JsonCallbackEvents newEvents = new JsonCallbackEvents() {\n+                      public void onError(PerunError error) {\n+                       session.getUiElements().setLogErrorText(\"Creating entityless attribute \" + def.getDisplayName() + \" with key: \" + key + \" and value: \" + value + \" failed\");\n+                      }\n+\n+                      public void onFinished(JavaScriptObject jso) {\n+                       session.getUiElements().setLogSuccessText(\"Creating entityless attribute \" + def.getDisplayName() + \" with key: \" + key + \" and value: \" + value + \" succeeded\");\n+                       draw();\n+                      }\n+\n+                      public void onLoadingStart() { }\n+                      };\n+  JsonPostClient jpc = new JsonPostClient(newEvents);\n+  jpc.sendData(JSON_URL, prepareJSONObject(key, value, mapKey));\n+ }\n+\n+\n+ private void removeAttribute(String key) {\n+  String JSON_URL = \"attributesManager/removeAttribute\";\n+  JsonCallbackEvents newEvents = new JsonCallbackEvents() {\n+                      public void onError(PerunError error) {\n+                       session.getUiElements().setLogErrorText(\"Removing entityless attribute \" + def.getDisplayName() + \" with key: \" + key + \" failed\");\n+                      }\n+\n+                      public void onFinished(JavaScriptObject jso) {\n+                       session.getUiElements().setLogSuccessText(\"Removing entityless attribute \" + def.getDisplayName() + \" with key: \" + key + \" succeeded\");\n+                       draw();\n+                      }\n+\n+                      public void onLoadingStart() { }\n+                      };\n+  JSONObject jo = new JSONObject();\n+  jo.put(\"key\", new JSONString(key));\n+  jo.put(\"attribute\", new JSONNumber(def.getId()));\n+  JsonPostClient jpc = new JsonPostClient(newEvents);\n+  jpc.sendData(JSON_URL, jo);\n+ }\n+\n+ /**\n+  * Prepares a JSON object\n+  *\n+  * @return JSONObject the whole query\n+  */\n+\n+\n+ private JSONObject prepareJSONObject(String key, String value, String mapKey) {\n+\n+  // create new Attribute jsonObject\n+  JSONObject newAttr = new JSONObject();\n+  newAttr.put(\"id\", new JSONNumber(def.getId()));\n+  newAttr.put(\"type\", new JSONString(def.getType()));\n+  newAttr.put(\"description\", new JSONString(def.getDescription()));\n+  newAttr.put(\"namespace\", new JSONString(def.getNamespace()));\n+  newAttr.put(\"friendlyName\", new JSONString(def.getFriendlyName()));\n+  newAttr.put(\"displayName\", new JSONString(def.getDisplayName()));\n+  newAttr.put(\"unique\", new JSONString(\"false\"));\n+  switch (def.getType()) {\n+   case \"java.lang.String\":\n+    newAttr.put(\"value\", new JSONString(value));\n+    break;\n+   case \"java.util.LinkedHashMap\":\n+    JSONObject jo = new JSONObject();\n+    jo.put(mapKey, new JSONString(value));\n+    newAttr.put(\"value\", jo);\n+    break;\n+   case \"java.util.ArrayList\":\n+    JSONArray al = new JSONArray();\n+    al.set(0, new JSONString(\"value\"));\n+    newAttr.put(\"value\", al);\n+    break;\n+   case \"java.lang.Integer\":\n+    newAttr.put(\"value\", new JSONNumber(Double.parseDouble(value)));\n+    break;\n+   case \"java.lang.Boolean\":\n+    newAttr.put(\"value\", JSONBoolean.getInstance(Boolean.parseBoolean(\"True\")));\n+    break;\n+   case \"java.lang.LargeString\":\n+    newAttr.put(\"value\", new JSONString(value));\n+    break;\n+   case \"java.util.LargeArrayList\":\n+    JSONArray lal = new JSONArray();\n+    lal.set(0, new JSONString(\"value\"));\n+    newAttr.put(\"value\", lal);\n+    break;\n+  }\n+\n+  // create whole JSON query\n+  JSONObject jsonQuery = new JSONObject();\n+  jsonQuery.put(\"key\", new JSONString(key));\n+  jsonQuery.put(\"attribute\", newAttr);\n+  return jsonQuery;\n+ }\n+\n+\n+ private boolean shouldHaveValueBox() {\n+  return (def.getType().equals(\"java.lang.String\") || def.getType().equals(\"java.lang.Integer\") || def.getType().equals(\"java.lang.LargeString\"));\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 403
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/427/EntitylessAttributeEditKeyTabItem.java\nindex 58759baf96a..1ecc7d25af5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/427/EntitylessAttributeEditKeyTabItem.java\n@@ -399,8 +399,8 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \t}\n \n \tprivate boolean shouldHaveValueBox() {\n-\t\treturn (def.getType().equals(\"java.lang.String\") ||\n-\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n+\t\treturn (def.getType().equals(\"java.lang.String\") || def\n+\t\t\t.getType().equals(\"java.lang.Integer\") ||\n \t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n \t}\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/427/EntitylessAttributeEditKeyTabItem.java\nindex 58759baf96a..a7d68a6bf36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/427/EntitylessAttributeEditKeyTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/427/EntitylessAttributeEditKeyTabItem.java\n@@ -400,7 +400,7 @@ public class EntitylessAttributeEditKeyTabItem implements TabItem, TabItemWithUr\n \n \tprivate boolean shouldHaveValueBox() {\n \t\treturn (def.getType().equals(\"java.lang.String\") ||\n-\t\t\t    def.getType().equals(\"java.lang.Integer\") ||\n+\t\t\tdef.getType().equals(\"java.lang.Integer\") ||\n \t\t\t    def.getType().equals(\"java.lang.LargeString\"));\n \t}\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}