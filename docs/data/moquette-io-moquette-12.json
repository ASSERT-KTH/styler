{
    "project_name": "moquette-io-moquette",
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "55",
                "column": "9",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        MqttMessage msg = (MqttMessage) message;\n        if (msg.fixedHeader() == null) {\n        \tthrow new IOException(\"Unknown packet\");\n        }\n        String clientID = NettyUtils.clientID(ctx.channel());\n        MqttMessageType messageType = msg.fixedHeader().messageType();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler/12/MQTTMessageLogger.java\nindex 85519d0872f..bc57d4881af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler/12/MQTTMessageLogger.java\n@@ -52,7 +52,7 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         }\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+        throw new IOException(\"Unknown packet\");\n         }\n         String clientID = NettyUtils.clientID(ctx.channel());\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/12/MQTTMessageLogger.java\nindex 85519d0872f..0cc483c90c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/12/MQTTMessageLogger.java\n@@ -32,79 +32,78 @@ import static io.moquette.spi.impl.Utils.messageId;\n import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n \n /**\n- *\n  * @author andrea\n  */\n @Sharable\n public class MQTTMessageLogger extends ChannelDuplexHandler {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(\"messageLogger\");\n+  private static final Logger LOG = LoggerFactory.getLogger(\"messageLogger\");\n \n-    @Override\n-    public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n-        logMQTTMessage(ctx, message, \"C->B\");\n-        ctx.fireChannelRead(message);\n-    }\n+  @Override\n+  public void channelRead(ChannelHandlerContext ctx, Object message) throws Exception {\n+    logMQTTMessage(ctx, message, \"C->B\");\n+    ctx.fireChannelRead(message);\n+  }\n \n-    private void logMQTTMessage(ChannelHandlerContext ctx, Object message, String direction) throws Exception {\n-        if (!(message instanceof MqttMessage)) {\n-            return;\n-        }\n-        MqttMessage msg = (MqttMessage) message;\n-        if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n-        }\n-        String clientID = NettyUtils.clientID(ctx.channel());\n-        MqttMessageType messageType = msg.fixedHeader().messageType();\n-        switch (messageType) {\n-            case CONNECT:\n-            case CONNACK:\n-            case PINGREQ:\n-            case PINGRESP:\n-            case DISCONNECT:\n-                LOG.info(\"{} {} <{}>\", direction, messageType, clientID);\n-                break;\n-            case SUBSCRIBE:\n-                MqttSubscribeMessage subscribe = (MqttSubscribeMessage) msg;\n-                LOG.info(\"{} SUBSCRIBE <{}> to topics {}\", direction, clientID,\n-                    subscribe.payload().topicSubscriptions());\n-                break;\n-            case UNSUBSCRIBE:\n-                MqttUnsubscribeMessage unsubscribe = (MqttUnsubscribeMessage) msg;\n-                LOG.info(\"{} UNSUBSCRIBE <{}> to topics <{}>\", direction, clientID, unsubscribe.payload().topics());\n-                break;\n-            case PUBLISH:\n-                MqttPublishMessage publish = (MqttPublishMessage) msg;\n-                LOG.info(\"{} PUBLISH <{}> to topics <{}>\", direction, clientID, publish.variableHeader().topicName());\n-                break;\n-            case PUBREC:\n-            case PUBCOMP:\n-            case PUBREL:\n-            case PUBACK:\n-            case UNSUBACK:\n-                LOG.info(\"{} {} <{}> packetID <{}>\", direction, messageType, clientID, messageId(msg));\n-                break;\n-            case SUBACK:\n-                MqttSubAckMessage suback = (MqttSubAckMessage) msg;\n-                final List<Integer> grantedQoSLevels = suback.payload().grantedQoSLevels();\n-                LOG.info(\"{} SUBACK <{}> packetID <{}>, grantedQoses {}\", direction, clientID, messageId(msg),\n-                    grantedQoSLevels);\n-                break;\n-        }\n+  private void logMQTTMessage(ChannelHandlerContext ctx, Object message, String direction) throws Exception {\n+    if (!(message instanceof MqttMessage)) {\n+      return;\n     }\n-\n-    @Override\n-    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n-        String clientID = NettyUtils.clientID(ctx.channel());\n-        if (clientID != null && !clientID.isEmpty()) {\n-            LOG.info(\"Channel closed <{}>\", clientID);\n-        }\n-        ctx.fireChannelInactive();\n+    MqttMessage msg = (MqttMessage) message;\n+    if (msg.fixedHeader() == null) {\n+      throw new IOException(\"Unknown packet\");\n     }\n+    String clientID = NettyUtils.clientID(ctx.channel());\n+    MqttMessageType messageType = msg.fixedHeader().messageType();\n+    switch (messageType) {\n+      case CONNECT:\n+      case CONNACK:\n+      case PINGREQ:\n+      case PINGRESP:\n+      case DISCONNECT:\n+        LOG.info(\"{} {} <{}>\", direction, messageType, clientID);\n+        break;\n+      case SUBSCRIBE:\n+        MqttSubscribeMessage subscribe = (MqttSubscribeMessage) msg;\n+        LOG.info(\"{} SUBSCRIBE <{}> to topics {}\", direction, clientID,\n+            subscribe.payload().topicSubscriptions());\n+        break;\n+      case UNSUBSCRIBE:\n+        MqttUnsubscribeMessage unsubscribe = (MqttUnsubscribeMessage) msg;\n+        LOG.info(\"{} UNSUBSCRIBE <{}> to topics <{}>\", direction, clientID, unsubscribe.payload().topics());\n+        break;\n+      case PUBLISH:\n+        MqttPublishMessage publish = (MqttPublishMessage) msg;\n+        LOG.info(\"{} PUBLISH <{}> to topics <{}>\", direction, clientID, publish.variableHeader().topicName());\n+        break;\n+      case PUBREC:\n+      case PUBCOMP:\n+      case PUBREL:\n+      case PUBACK:\n+      case UNSUBACK:\n+        LOG.info(\"{} {} <{}> packetID <{}>\", direction, messageType, clientID, messageId(msg));\n+        break;\n+      case SUBACK:\n+        MqttSubAckMessage suback = (MqttSubAckMessage) msg;\n+        final List<Integer> grantedQoSLevels = suback.payload().grantedQoSLevels();\n+        LOG.info(\"{} SUBACK <{}> packetID <{}>, grantedQoses {}\", direction, clientID, messageId(msg),\n+            grantedQoSLevels);\n+        break;\n+    }\n+  }\n \n-    @Override\n-    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n-        logMQTTMessage(ctx, msg, \"C<-B\");\n-        ctx.write(msg, promise).addListener(CLOSE_ON_FAILURE);\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    String clientID = NettyUtils.clientID(ctx.channel());\n+    if (clientID != null && !clientID.isEmpty()) {\n+      LOG.info(\"Channel closed <{}>\", clientID);\n     }\n+    ctx.fireChannelInactive();\n+  }\n+\n+  @Override\n+  public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+    logMQTTMessage(ctx, msg, \"C<-B\");\n+    ctx.write(msg, promise).addListener(CLOSE_ON_FAILURE);\n+  }\n }\n",
            "diff_size": 111
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/12/MQTTMessageLogger.java\nindex 85519d0872f..f8786d8e8c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/12/MQTTMessageLogger.java\n@@ -52,8 +52,8 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         }\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n-        }\n+    throw new IOException(\"Unknown packet\");\n+    }\n         String clientID = NettyUtils.clientID(ctx.channel());\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         switch (messageType) {\n@@ -107,4 +107,4 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         logMQTTMessage(ctx, msg, \"C<-B\");\n         ctx.write(msg, promise).addListener(CLOSE_ON_FAILURE);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/12/MQTTMessageLogger.java\nindex 85519d0872f..c7a8c9d7391 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/12/MQTTMessageLogger.java\n@@ -24,7 +24,6 @@ import io.netty.channel.ChannelPromise;\n import io.netty.handler.codec.mqtt.*;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.IOException;\n import java.util.List;\n \n@@ -35,6 +34,7 @@ import static io.netty.channel.ChannelFutureListener.CLOSE_ON_FAILURE;\n  *\n  * @author andrea\n  */\n+\n @Sharable\n public class MQTTMessageLogger extends ChannelDuplexHandler {\n \n@@ -50,10 +50,12 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         if (!(message instanceof MqttMessage)) {\n             return;\n         }\n+\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+            throw new IOException(\"Unknown packet\");\n         }\n+\n         String clientID = NettyUtils.clientID(ctx.channel());\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n         switch (messageType) {\n@@ -66,8 +68,7 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n                 break;\n             case SUBSCRIBE:\n                 MqttSubscribeMessage subscribe = (MqttSubscribeMessage) msg;\n-                LOG.info(\"{} SUBSCRIBE <{}> to topics {}\", direction, clientID,\n-                    subscribe.payload().topicSubscriptions());\n+                LOG.info(\"{} SUBSCRIBE <{}> to topics {}\", direction, clientID, subscribe.payload().topicSubscriptions());\n                 break;\n             case UNSUBSCRIBE:\n                 MqttUnsubscribeMessage unsubscribe = (MqttUnsubscribeMessage) msg;\n@@ -87,8 +88,7 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n             case SUBACK:\n                 MqttSubAckMessage suback = (MqttSubAckMessage) msg;\n                 final List<Integer> grantedQoSLevels = suback.payload().grantedQoSLevels();\n-                LOG.info(\"{} SUBACK <{}> packetID <{}>, grantedQoses {}\", direction, clientID, messageId(msg),\n-                    grantedQoSLevels);\n+                LOG.info(\"{} SUBACK <{}> packetID <{}>, grantedQoses {}\", direction, clientID, messageId(msg), grantedQoSLevels);\n                 break;\n         }\n     }\n@@ -107,4 +107,4 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         logMQTTMessage(ctx, msg, \"C<-B\");\n         ctx.write(msg, promise).addListener(CLOSE_ON_FAILURE);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_random/12/MQTTMessageLogger.java\nindex 85519d0872f..bc57d4881af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_random/12/MQTTMessageLogger.java\n@@ -52,7 +52,7 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         }\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+        throw new IOException(\"Unknown packet\");\n         }\n         String clientID = NettyUtils.clientID(ctx.channel());\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/12/MQTTMessageLogger.java\nindex 85519d0872f..b4031fc0219 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/12/MQTTMessageLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/12/MQTTMessageLogger.java\n@@ -52,7 +52,7 @@ public class MQTTMessageLogger extends ChannelDuplexHandler {\n         }\n         MqttMessage msg = (MqttMessage) message;\n         if (msg.fixedHeader() == null) {\n-        \tthrow new IOException(\"Unknown packet\");\n+            throw new IOException(\"Unknown packet\");\n         }\n         String clientID = NettyUtils.clientID(ctx.channel());\n         MqttMessageType messageType = msg.fixedHeader().messageType();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}