{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3245",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3245/HttpConnectionInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3245/HttpConnectionInfo.java\nindex d902fb5716c..030e4660698 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3245/HttpConnectionInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3245/HttpConnectionInfo.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query.clientconnection;\n \n import java.net.InetSocketAddress;\n@@ -26,50 +27,50 @@ import java.net.InetSocketAddress;\n  */\n public class HttpConnectionInfo extends ClientConnectionInfo\n {\n-    private final String protocol;\n-    private final InetSocketAddress clientAddress;\n-    private final InetSocketAddress serverAddress;\n-    private final String requestPath;\n+  private final String protocol;\n+  private final InetSocketAddress clientAddress;\n+  private final InetSocketAddress serverAddress;\n+  private final String requestPath;\n \n-    public HttpConnectionInfo(\n-            String protocol,\n-            @SuppressWarnings( \"unused\" ) String userAgent, // useful for achieving parity with BoltConnectionInfo\n-            InetSocketAddress clientAddress,\n-            InetSocketAddress serverAddress,\n-            String requestPath )\n-    {\n-        this.protocol = protocol;\n-        this.clientAddress = clientAddress;\n-        this.serverAddress = serverAddress;\n-        this.requestPath = requestPath;\n-    }\n+  public HttpConnectionInfo(\n+      String protocol,\n+      @SuppressWarnings(\"unused\") String userAgent, // useful for achieving parity with BoltConnectionInfo\n+      InetSocketAddress clientAddress,\n+      InetSocketAddress serverAddress,\n+      String requestPath)\n+  {\n+    this.protocol = protocol;\n+    this.clientAddress = clientAddress;\n+    this.serverAddress = serverAddress;\n+    this.requestPath = requestPath;\n+  }\n \n-    @Override\n-    public String asConnectionDetails()\n-    {\n-        return String.join( \"\\t\", \"server-session\", protocol, clientAddress.getHostString(), requestPath );\n-    }\n+  @Override\n+  public String asConnectionDetails()\n+  {\n+    return String.join(\"\\t\", \"server-session\", protocol, clientAddress.getHostString(), requestPath);\n+  }\n \n-    @Override\n-    public String protocol()\n-    {\n-        return protocol;\n-    }\n+  @Override\n+  public String protocol()\n+  {\n+    return protocol;\n+  }\n \n-    @Override\n-    public String clientAddress()\n-    {\n-        return String.format( \"%s:%s\", clientAddress.getHostString(), clientAddress.getPort() );\n-    }\n+  @Override\n+  public String clientAddress()\n+  {\n+    return String.format(\"%s:%s\", clientAddress.getHostString(), clientAddress.getPort());\n+  }\n \n-    @Override\n-    public String requestURI()\n-    {\n-        return serverAddress == null ? requestPath : String.format(\n-                \"%s://%s:%d%s\",\n-                protocol,\n-                serverAddress.getHostString(),\n-                serverAddress.getPort(),\n-                requestPath );\n-    }\n+  @Override\n+  public String requestURI()\n+  {\n+    return serverAddress == null ? requestPath : String.format(\n+        \"%s://%s:%d%s\",\n+        protocol,\n+        serverAddress.getHostString(),\n+        serverAddress.getPort(),\n+        requestPath);\n+  }\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3245/HttpConnectionInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3245/HttpConnectionInfo.java\nindex d902fb5716c..7149352eca0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3245/HttpConnectionInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3245/HttpConnectionInfo.java\n@@ -31,8 +31,7 @@ public class HttpConnectionInfo extends ClientConnectionInfo\n     private final InetSocketAddress serverAddress;\n     private final String requestPath;\n \n-    public HttpConnectionInfo(\n-            String protocol,\n+    public HttpConnectionInfo( String protocol,\n             @SuppressWarnings( \"unused\" ) String userAgent, // useful for achieving parity with BoltConnectionInfo\n             InetSocketAddress clientAddress,\n             InetSocketAddress serverAddress,\n@@ -65,11 +64,7 @@ public class HttpConnectionInfo extends ClientConnectionInfo\n     @Override\n     public String requestURI()\n     {\n-        return serverAddress == null ? requestPath : String.format(\n-                \"%s://%s:%d%s\",\n-                protocol,\n-                serverAddress.getHostString(),\n-                serverAddress.getPort(),\n-                requestPath );\n+        return serverAddress == null ? requestPath : String.format( \"%s://%s:%d%s\", protocol,\n+                serverAddress.getHostString(), serverAddress.getPort(), requestPath );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}