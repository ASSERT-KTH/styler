{
    "project_name": "Stratio-bdt",
    "error_id": "148",
    "information": {
        "errors": [
            {
                "line": "698",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param numberOfCookies number of cookies that must be saved\n     */\n    @Then(\"^I have '(\\\\d+)' selenium cookies saved$\")\n    public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n        Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "698",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/148/SeleniumSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/148/SeleniumSpec.java\nindex 7c04006ecdf..3e5a18cc3dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/148/SeleniumSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/148/SeleniumSpec.java\n@@ -122,8 +122,9 @@ public class SeleniumSpec extends BaseGSpec {\n     @Given(\"^I switch to the iframe on index '(\\\\d+)'$\")\n     public void seleniumSwitchFrame(Integer index) {\n \n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         WebElement elem = commonspec.getPreviousWebElements().getPreviousWebElements().get(index);\n         commonspec.getDriver().switchTo().frame(elem);\n@@ -138,7 +139,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException exception\n      */\n     @Given(\"^I switch to iframe with '([^:]*?):(.+?)'$\")\n-    public void seleniumIdFrame(String method, String idframe) throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n+    public void seleniumIdFrame(String method, String idframe)\n+        throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n         assertThat(commonspec.locateElement(method, idframe, 1));\n \n         if (method.equals(\"id\") || method.equals(\"name\")) {\n@@ -186,7 +188,9 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @When(\"^I drag '([^:]*?):(.+?)' and drop it to '([^:]*?):(.+?)'$\")\n-    public void seleniumDrag(String smethod, String source, String dmethod, String destination) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void seleniumDrag(String smethod, String source, String dmethod, String destination)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n \n         List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n@@ -197,6 +201,7 @@ public class SeleniumSpec extends BaseGSpec {\n \n     /**\n      * Dragging element with offset\n+     *\n      * @param element\n      * @param xOffset\n      * @param yOffset\n@@ -207,13 +212,16 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws IllegalAccessException\n      */\n     @When(\"I move element with {string}, '{int}' pixels horizontally and '{int}' pixels vertically\")\n-    public void seleniumDragOffset(String element, Integer xOffset, Integer yOffset) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void seleniumDragOffset(String element, Integer xOffset, Integer yOffset)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         String[] elementArray = element.split(\":\");\n         if (elementArray.length != 2) {\n             fail(\"Element argument doesn't match regex: ([^:]*?):(.+?) [\" + element + \"]\");\n         }\n         Actions builder = new Actions(commonspec.getDriver());\n-        List<WebElement> sourceElement = commonspec.locateElement(elementArray[0], elementArray[1], 1);\n+        List<WebElement> sourceElement =\n+            commonspec.locateElement(elementArray[0], elementArray[1], 1);\n         builder.dragAndDropBy(sourceElement.get(0), xOffset, yOffset).perform();\n     }\n \n@@ -227,13 +235,15 @@ public class SeleniumSpec extends BaseGSpec {\n     public void seleniumClick(Integer index) throws InterruptedException {\n \n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         }\n     }\n@@ -248,15 +258,19 @@ public class SeleniumSpec extends BaseGSpec {\n     public void seleniumDoubleClick(Integer index) throws InterruptedException {\n         Actions action = new Actions(commonspec.getDriver());\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n \n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n         }\n     }\n \n@@ -267,10 +281,13 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @When(\"^I clear the content on text input at index '(\\\\d+)'$\")\n     public void seleniumClear(Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).isTextField(commonspec.getTextFieldCondition());\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index))\n+            .isTextField(commonspec.getTextFieldCondition());\n \n         commonspec.getPreviousWebElements().getPreviousWebElements().get(index).clear();\n     }\n@@ -283,11 +300,14 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @When(\"^I delete the text '(.+?)' on the element on index '(\\\\d+)'( and replace it for '(.+?)')?$\")\n     public void seleniumDelete(String text, Integer index, String replacement) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         Actions actions = new Actions(commonspec.getDriver());\n-        actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index), (text.length() / 2), 0);\n+        actions\n+            .moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index),\n+                (text.length() / 2), 0);\n         for (int i = 0; i < (text.length() / 2); i++) {\n             actions.sendKeys(Keys.ARROW_LEFT);\n             actions.build().perform();\n@@ -311,18 +331,21 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @When(\"I type '{nullablestring}' on the element on index '{int}'\")\n     public void seleniumType(String text, Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n         while (text.length() > 0) {\n             Actions actions = new Actions(commonspec.getDriver());\n             if (-1 == text.indexOf(\"\\\\n\")) {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n                 actions.click();\n                 actions.sendKeys(text);\n                 actions.build().perform();\n                 text = \"\";\n             } else {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n                 actions.click();\n                 actions.sendKeys(text.substring(0, text.indexOf(\"\\\\n\")));\n                 actions.build().perform();\n@@ -333,6 +356,7 @@ public class SeleniumSpec extends BaseGSpec {\n \n     /**\n      * Paste text on {@code text}\n+     *\n      * @param jsSelector example: div #id_div a .a_class\n      * @param text\n      */\n@@ -345,6 +369,7 @@ public class SeleniumSpec extends BaseGSpec {\n \n     /**\n      * Wait for render a html element\n+     *\n      * @param method\n      * @param element\n      * @param sTimeout\n@@ -369,7 +394,7 @@ public class SeleniumSpec extends BaseGSpec {\n             fail(\"Unknown search method: \" + method);\n         }\n         driverWait.until(ExpectedConditions.\n-                presenceOfElementLocated(criteriaSel));\n+            presenceOfElementLocated(criteriaSel));\n     }\n \n     /**\n@@ -390,8 +415,9 @@ public class SeleniumSpec extends BaseGSpec {\n         Strokes strokes = new Strokes(sStrokes);\n         Integer index = sIndex != null ? Integer.valueOf(sIndex) : null;\n         if (index != null) {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n         }\n         assertThat(strokes.getStrokesList()).isNotEmpty();\n \n@@ -403,15 +429,21 @@ public class SeleniumSpec extends BaseGSpec {\n                 }\n                 Keys[] csa = csl.toArray(new Keys[csl.size()]);\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa).perform();\n+                    new Actions(commonspec.getDriver())\n+                        .sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa)\n+                        .perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(csa);\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+                        .sendKeys(csa);\n                 }\n             } else {\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), Keys.valueOf(stroke)).perform();\n+                    new Actions(commonspec.getDriver())\n+                        .sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                            Keys.valueOf(stroke)).perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(Keys.valueOf(stroke));\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+                        .sendKeys(Keys.valueOf(stroke));\n                 }\n             }\n         }\n@@ -469,15 +501,20 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+)' has '(.+?)' as text$\")\n     public void assertSeleniumTextOnElementPresent(Integer index, String text) {\n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String elementText = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText().replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String elementText =\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText()\n+                .replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n         if (!elementText.startsWith(\"regex:\")) {\n             //We are verifying that a web element contains a string\n             assertThat(elementText.matches(\"(.*)\" + text + \"(.*)\")).isTrue();\n         } else {\n             //We are verifying that a web element contains a regex\n-            assertThat(elementText.matches(text.substring(text.indexOf(\"regex:\") + 6, text.length()))).isTrue();\n+            assertThat(\n+                elementText.matches(text.substring(text.indexOf(\"regex:\") + 6, text.length())))\n+                .isTrue();\n         }\n     }\n \n@@ -488,7 +525,8 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^this text exists '(.+?)'$\")\n     public void assertSeleniumTextInSource(String text) {\n-        assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\").contains(text);\n+        assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\")\n+            .contains(text);\n     }\n \n     /**\n@@ -504,7 +542,9 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^'(\\\\d+)' elements? exists? with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExists(Integer expectedCount, String method, String element) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExists(Integer expectedCount, String method, String element)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = commonspec.locateElement(method, element, expectedCount);\n         PreviousWebElements pwel = new PreviousWebElements(wel);\n         commonspec.setPreviousWebElements(pwel);\n@@ -528,8 +568,11 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, '(\\\\d+)' elements exists with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount,\n-                                                      String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait,\n+                                                      Integer expectedCount,\n+                                                      String method, String element)\n+        throws InterruptedException, ClassNotFoundException, NoSuchFieldException,\n+        SecurityException, IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = null;\n         for (int i = 0; i < timeout; i += wait) {\n             wel = commonspec.locateElement(method, element, -1);\n@@ -554,9 +597,12 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"the element on index '{int}' {isornot} displayed\")\n     public void assertSeleniumIsDisplayed(Integer index, Boolean isDisplayed) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed())\n+            .as(\n                 \"Unexpected element display property\").isEqualTo(isDisplayed);\n     }\n \n@@ -568,10 +614,12 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"the element on index '{int}' {isornot} enabled\")\n     public void assertSeleniumIsEnabled(Integer index, Boolean isEnabled) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n-                .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n+            .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n     }\n \n     /**\n@@ -582,9 +630,12 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"the element on index '{int}' {isornot} selected\")\n     public void assertSeleniumIsSelected(Integer index, Boolean isSelected) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected())\n+            .as(\n                 \"Unexpected element selected property\").isEqualTo(isSelected);\n     }\n \n@@ -597,11 +648,14 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+)' has '(.+?)' as '(.+?)'$\")\n     public void assertSeleniumHasAttributeValue(Integer index, String attribute, String value) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getAttribute(attribute);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+            .getAttribute(attribute);\n         assertThat(this.commonspec, val).as(\"Attribute not found\").isNotNull();\n-        assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\").matches(value);\n+        assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\")\n+            .matches(value);\n     }\n \n     /**\n@@ -632,8 +686,9 @@ public class SeleniumSpec extends BaseGSpec {\n \n         String webURL = commonspec.getWebHost() + commonspec.getWebPort();\n \n-        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n-                .endsWith(webURL.toLowerCase() + url);\n+        assertThat(commonspec.getDriver().getCurrentUrl())\n+            .as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n+            .endsWith(webURL.toLowerCase() + url);\n     }\n \n     /**\n@@ -650,8 +705,9 @@ public class SeleniumSpec extends BaseGSpec {\n      **/\n     @Then(\"^I save selenium dcos acs auth cookie in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String envVar) throws Exception {\n-        if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+        if (commonspec.getSeleniumCookies() != null &&\n+            commonspec.getSeleniumCookies().size() != 0) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(\"dcos-acs-auth-cookie\")) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -668,8 +724,9 @@ public class SeleniumSpec extends BaseGSpec {\n      **/\n     @Then(\"^I save selenium cookie '(.+?)' in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String cookieName, String envVar) throws Exception {\n-        if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+        if (commonspec.getSeleniumCookies() != null &&\n+            commonspec.getSeleniumCookies().size() != 0) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(cookieName)) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -690,6 +747,7 @@ public class SeleniumSpec extends BaseGSpec {\n     public void checkIfCookieExists(String cookieName) {\n         Assertions.assertThat(commonspec.cookieExists(cookieName)).isEqualTo(true);\n     }\n+\n     /**\n      * Check if the length of the cookie set match with the number of cookies thas must be saved\n      *\n@@ -708,9 +766,11 @@ public class SeleniumSpec extends BaseGSpec {\n      */\n     @Then(\"^I save content of element in index '(\\\\d+)' in environment variable '(.+?)'$\")\n     public void saveContentWebElementInEnvVar(Integer index, String envVar) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String text = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String text =\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n         ThreadProperty.set(envVar, text);\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "389",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "390",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "391",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "392",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "393",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "394",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "395",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "396",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/148/SeleniumSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/codebuff/148/SeleniumSpec.java\nindex 7c04006ecdf..cdbbb394ec7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/148/SeleniumSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/codebuff/148/SeleniumSpec.java\n@@ -26,9 +26,7 @@ import cucumber.api.java.en.Then;\n import cucumber.api.java.en.When;\n import org.assertj.core.api.Assertions;\n import org.openqa.selenium.*;\n-\n import java.util.*;\n-\n import org.openqa.selenium.interactions.Actions;\n import org.openqa.selenium.remote.RemoteWebDriver;\n import org.openqa.selenium.support.ui.ExpectedConditions;\n@@ -36,11 +34,14 @@ import org.openqa.selenium.support.ui.Select;\n import org.openqa.selenium.support.ui.WebDriverWait;\n \n import static com.stratio.qa.assertions.Assertions.assertThat;\n+\n import static org.testng.Assert.fail;\n \n /**\n  * Generic Selenium Specs.\n  */\n+\n+\n public class SeleniumSpec extends BaseGSpec {\n \n     private Scenario scenario;\n@@ -50,11 +51,13 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n+\n     public SeleniumSpec(CommonG spec) {\n         this.commonspec = spec;\n-\n     }\n \n+\n     @Before\n     public void before(Scenario scenario) {\n         this.scenario = scenario;\n@@ -66,6 +69,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param path path of running app\n      * @throws Exception exception\n      */\n+\n+\n     @Given(\"^I( securely)? browse to '(.+?)'$\")\n     public void seleniumBrowse(String isSecured, String path) throws Exception {\n         assertThat(path).isNotEmpty();\n@@ -73,17 +78,16 @@ public class SeleniumSpec extends BaseGSpec {\n         if (commonspec.getWebHost() == null) {\n             throw new Exception(\"Web host has not been set\");\n         }\n-\n         if (commonspec.getWebPort() == null) {\n             throw new Exception(\"Web port has not been set\");\n         }\n+\n         String protocol = \"http://\";\n         if (isSecured != null) {\n             protocol = \"https://\";\n         }\n \n         String webURL = protocol + commonspec.getWebHost() + commonspec.getWebPort();\n-\n         commonspec.getDriver().get(webURL + path);\n         commonspec.setParentWindow(commonspec.getDriver().getWindowHandle());\n     }\n@@ -94,6 +98,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param host host where app is running\n      * @param port port where app is running\n      */\n+\n+\n     @Given(\"^My app is running in '([^:]+?)(:.+?)?'$\")\n     public void setupApp(String host, String port) {\n         assertThat(host).isNotEmpty();\n@@ -101,7 +107,6 @@ public class SeleniumSpec extends BaseGSpec {\n         if (port == null) {\n             port = \":80\";\n         }\n-\n         commonspec.setWebHost(host);\n         commonspec.setWebPort(port);\n         commonspec.setRestHost(host);\n@@ -111,6 +116,8 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Maximizes current browser window. Mind the current resolution could break a test.\n      */\n+\n+\n     @Given(\"^I maximize the browser$\")\n     public void seleniumMaximize() {\n         commonspec.getDriver().manage().window().maximize();\n@@ -119,12 +126,11 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Switches to a frame/ iframe.\n      */\n-    @Given(\"^I switch to the iframe on index '(\\\\d+)'$\")\n-    public void seleniumSwitchFrame(Integer index) {\n \n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n \n+    @Given(\"^I switch to the iframe on index '(\\\\d+)'$\")\n+    public void seleniumSwitchFrame(Integer index) {\n+        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         WebElement elem = commonspec.getPreviousWebElements().getPreviousWebElements().get(index);\n         commonspec.getDriver().switchTo().frame(elem);\n     }\n@@ -137,6 +143,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws NoSuchFieldException   exception\n      * @throws ClassNotFoundException exception\n      */\n+\n+\n     @Given(\"^I switch to iframe with '([^:]*?):(.+?)'$\")\n     public void seleniumIdFrame(String method, String idframe) throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n         assertThat(commonspec.locateElement(method, idframe, 1));\n@@ -151,6 +159,8 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Switches to a parent frame/ iframe.\n      */\n+\n+\n     @Given(\"^I switch to a parent frame$\")\n     public void seleniumSwitchAParentFrame() {\n         commonspec.getDriver().switchTo().parentFrame();\n@@ -159,6 +169,8 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Switches to the frames main container.\n      */\n+\n+\n     @Given(\"^I switch to the main frame container$\")\n     public void seleniumSwitchParentFrame() {\n         commonspec.getDriver().switchTo().frame(commonspec.getParentWindow());\n@@ -167,10 +179,11 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Get all opened windows and store it.\n      */\n+\n+\n     @Given(\"^a new window is opened$\")\n     public void seleniumGetwindows() {\n         Set<String> wel = commonspec.getDriver().getWindowHandles();\n-\n         Assertions.assertThat(wel).as(\"Element count doesnt match\").hasSize(2);\n     }\n \n@@ -185,13 +198,13 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws NoSuchFieldException\n      * @throws ClassNotFoundException\n      */\n+\n+\n     @When(\"^I drag '([^:]*?):(.+?)' and drop it to '([^:]*?):(.+?)'$\")\n     public void seleniumDrag(String smethod, String source, String dmethod, String destination) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n-\n         List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n         List<WebElement> destinationElement = commonspec.locateElement(dmethod, destination, 1);\n-\n         builder.dragAndDrop(sourceElement.get(0), destinationElement.get(0)).perform();\n     }\n \n@@ -206,12 +219,15 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws IllegalArgumentException\n      * @throws IllegalAccessException\n      */\n+\n+\n     @When(\"I move element with {string}, '{int}' pixels horizontally and '{int}' pixels vertically\")\n     public void seleniumDragOffset(String element, Integer xOffset, Integer yOffset) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         String[] elementArray = element.split(\":\");\n         if (elementArray.length != 2) {\n             fail(\"Element argument doesn't match regex: ([^:]*?):(.+?) [\" + element + \"]\");\n         }\n+\n         Actions builder = new Actions(commonspec.getDriver());\n         List<WebElement> sourceElement = commonspec.locateElement(elementArray[0], elementArray[1], 1);\n         builder.dragAndDropBy(sourceElement.get(0), xOffset, yOffset).perform();\n@@ -223,17 +239,18 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      * @throws InterruptedException\n      */\n+\n+\n     @When(\"^I click on the element on index '(\\\\d+)'$\")\n     public void seleniumClick(Integer index) throws InterruptedException {\n-\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         }\n     }\n@@ -244,18 +261,19 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      * @throws InterruptedException\n      */\n+\n+\n     @When(\"^I double click on the element on index '(\\\\d+)'$\")\n     public void seleniumDoubleClick(Integer index) throws InterruptedException {\n         Actions action = new Actions(commonspec.getDriver());\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n-\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n         }\n     }\n@@ -265,13 +283,13 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I clear the content on text input at index '(\\\\d+)'$\")\n     public void seleniumClear(Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).isTextField(commonspec.getTextFieldCondition());\n-\n         commonspec.getPreviousWebElements().getPreviousWebElements().get(index).clear();\n     }\n \n@@ -281,13 +299,15 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I delete the text '(.+?)' on the element on index '(\\\\d+)'( and replace it for '(.+?)')?$\")\n     public void seleniumDelete(String text, Integer index, String replacement) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         Actions actions = new Actions(commonspec.getDriver());\n         actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index), (text.length() / 2), 0);\n+\n         for (int i = 0; i < (text.length() / 2); i++) {\n             actions.sendKeys(Keys.ARROW_LEFT);\n             actions.build().perform();\n@@ -309,10 +329,12 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param text\n      * @param index\n      */\n+\n+\n     @When(\"I type '{nullablestring}' on the element on index '{int}'\")\n     public void seleniumType(String text, Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         while (text.length() > 0) {\n             Actions actions = new Actions(commonspec.getDriver());\n             if (-1 == text.indexOf(\"\\\\n\")) {\n@@ -336,6 +358,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param jsSelector example: div #id_div a .a_class\n      * @param text\n      */\n+\n+\n     @Given(\"I type on element '{nullablestring}' the following text '{nullablestring}'\")\n     public void seleniumAppend(String jsSelector, String text) {\n         WebDriver driver = commonspec.getDriver();\n@@ -349,6 +373,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param element\n      * @param sTimeout\n      */\n+\n+\n     @When(\"^I wait for element '([^:]*?):(.+?)' to be available for '(\\\\d+?)' seconds$\")\n     public void seleniumWait(String method, String element, String sTimeout) {\n         Integer timeout = sTimeout != null ? Integer.parseInt(sTimeout) : null;\n@@ -360,16 +386,15 @@ public class SeleniumSpec extends BaseGSpec {\n         } else if (\"name\".equals(method)) {\n             criteriaSel = By.name(element);\n         } else if (\"class\".equals(method)) {\n-            criteriaSel = By.className(element);\n-        } else if (\"xpath\".equals(method)) {\n-            criteriaSel = By.xpath(element);\n-        } else if (\"css\".equals(method)) {\n-            criteriaSel = By.cssSelector(element);\n-        } else {\n-            fail(\"Unknown search method: \" + method);\n-        }\n-        driverWait.until(ExpectedConditions.\n-                presenceOfElementLocated(criteriaSel));\n+                   criteriaSel = By.className(element);\n+               } else if (\"xpath\".equals(method)) {\n+                   criteriaSel = By.xpath(element);\n+               } else if (\"css\".equals(method)) {\n+                          criteriaSel = By.cssSelector(element);\n+                      } else {\n+                          fail(\"Unknown search method: \" + method);\n+                      }\n+        driverWait.until(ExpectedConditions.presenceOfElementLocated(criteriaSel));\n     }\n \n     /**\n@@ -385,13 +410,15 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param sStrokes\n      * @param sIndex\n      */\n+\n+\n     @When(\"^I send '(.+?)'( on the element on index '(\\\\d+)')?$\")\n     public void seleniumKeys(String sStrokes, String sIndex) {\n         Strokes strokes = new Strokes(sStrokes);\n         Integer index = sIndex != null ? Integer.valueOf(sIndex) : null;\n         if (index != null) {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         }\n         assertThat(strokes.getStrokesList()).isNotEmpty();\n \n@@ -401,9 +428,11 @@ public class SeleniumSpec extends BaseGSpec {\n                 for (String strokeInChord : stroke.split(\"\\\\+\")) {\n                     csl.add(Keys.valueOf(strokeInChord.trim()));\n                 }\n+\n                 Keys[] csa = csl.toArray(new Keys[csl.size()]);\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa).perform();\n+                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                                                                 csa).perform();\n                 } else {\n                     commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(csa);\n                 }\n@@ -423,11 +452,12 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param option\n      * @param index\n      */\n+\n+\n     @When(\"^I select '(.+?)' on the element on index '(\\\\d+)'$\")\n     public void elementSelect(String option, Integer index) {\n         Select sel = null;\n         sel = new Select(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n-\n         sel.selectByVisibleText(option);\n     }\n \n@@ -436,6 +466,8 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I de-select every item on the element on index '(\\\\d+)'$\")\n     public void elementDeSelect(Integer index) {\n         Select sel = null;\n@@ -449,11 +481,12 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Change current window to another opened window.\n      */\n+\n+\n     @When(\"^I change active window$\")\n     public void seleniumChangeWindow() {\n         String originalWindowHandle = commonspec.getDriver().getWindowHandle();\n         Set<String> windowHandles = commonspec.getDriver().getWindowHandles();\n-\n         for (String window : windowHandles) {\n             if (!window.equals(originalWindowHandle)) {\n                 commonspec.getDriver().switchTo().window(window);\n@@ -467,10 +500,11 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      * @param text\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+)' has '(.+?)' as text$\")\n     public void assertSeleniumTextOnElementPresent(Integer index, String text) {\n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         String elementText = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText().replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n         if (!elementText.startsWith(\"regex:\")) {\n             //We are verifying that a web element contains a string\n@@ -486,6 +520,8 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param text\n      */\n+\n+\n     @Then(\"^this text exists '(.+?)'$\")\n     public void assertSeleniumTextInSource(String text) {\n         assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\").contains(text);\n@@ -503,6 +539,8 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws NoSuchFieldException\n      * @throws ClassNotFoundException\n      */\n+\n+\n     @Then(\"^'(\\\\d+)' elements? exists? with '([^:]*?):(.+?)'$\")\n     public void assertSeleniumNElementExists(Integer expectedCount, String method, String element) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = commonspec.locateElement(method, element, expectedCount);\n@@ -527,12 +565,14 @@ public class SeleniumSpec extends BaseGSpec {\n      * @throws NoSuchFieldException\n      * @throws ClassNotFoundException\n      */\n+\n+\n     @Then(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, '(\\\\d+)' elements exists with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount,\n-                                                      String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount, String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = null;\n         for (int i = 0; i < timeout; i += wait) {\n             wel = commonspec.locateElement(method, element, -1);\n+\n             if (wel.size() == expectedCount) {\n                 break;\n             } else {\n@@ -543,7 +583,6 @@ public class SeleniumSpec extends BaseGSpec {\n         PreviousWebElements pwel = new PreviousWebElements(wel);\n         assertThat(this.commonspec, pwel).as(\"Element count doesnt match\").hasSize(expectedCount);\n         commonspec.setPreviousWebElements(pwel);\n-\n     }\n \n     /**\n@@ -552,12 +591,13 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      * @param isDisplayed\n      */\n+\n+\n     @Then(\"the element on index '{int}' {isornot} displayed\")\n     public void assertSeleniumIsDisplayed(Integer index, Boolean isDisplayed) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\n-                \"Unexpected element display property\").isEqualTo(isDisplayed);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\"Unexpected element display property\").isEqualTo(isDisplayed);\n     }\n \n     /**\n@@ -566,12 +606,13 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      * @param isEnabled\n      */\n+\n+\n     @Then(\"the element on index '{int}' {isornot} enabled\")\n     public void assertSeleniumIsEnabled(Integer index, Boolean isEnabled) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n-                .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled()).as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n     }\n \n     /**\n@@ -580,12 +621,13 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index\n      * @param isSelected\n      */\n+\n+\n     @Then(\"the element on index '{int}' {isornot} selected\")\n     public void assertSeleniumIsSelected(Integer index, Boolean isSelected) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\n-                \"Unexpected element selected property\").isEqualTo(isSelected);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\"Unexpected element selected property\").isEqualTo(isSelected);\n     }\n \n     /**\n@@ -595,10 +637,12 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param attribute\n      * @param value\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+)' has '(.+?)' as '(.+?)'$\")\n     public void assertSeleniumHasAttributeValue(Integer index, String attribute, String value) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getAttribute(attribute);\n         assertThat(this.commonspec, val).as(\"Attribute not found\").isNotNull();\n         assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\").matches(value);\n@@ -609,6 +653,8 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^I take a snapshot$\")\n     public void seleniumSnapshot() throws Exception {\n         commonspec.captureEvidence(commonspec.getDriver(), \"screenCapture\", scenario);\n@@ -620,25 +666,26 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param url\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^we are in page '(.+?)'$\")\n     public void checkURL(String url) throws Exception {\n         if (commonspec.getWebHost() == null) {\n             throw new Exception(\"Web host has not been set\");\n         }\n-\n         if (commonspec.getWebPort() == null) {\n             throw new Exception(\"Web port has not been set\");\n         }\n \n         String webURL = commonspec.getWebHost() + commonspec.getWebPort();\n-\n-        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n-                .endsWith(webURL.toLowerCase() + url);\n+        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url).endsWith(webURL.toLowerCase() + url);\n     }\n \n     /**\n      * Save cookie in context for future references\n      **/\n+\n+\n     @Then(\"^I save selenium cookies in context$\")\n     public void saveSeleniumCookies() throws Exception {\n         commonspec.setSeleniumCookies(commonspec.getDriver().manage().getCookies());\n@@ -648,10 +695,12 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Get dcos-auth-cookie\n      **/\n+\n+\n     @Then(\"^I save selenium dcos acs auth cookie in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String envVar) throws Exception {\n         if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(\"dcos-acs-auth-cookie\")) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -666,10 +715,12 @@ public class SeleniumSpec extends BaseGSpec {\n     /**\n      * Get dcos-auth-cookie\n      **/\n+\n+\n     @Then(\"^I save selenium cookie '(.+?)' in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String cookieName, String envVar) throws Exception {\n         if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(cookieName)) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -686,6 +737,8 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param cookieName string with the name of the cookie\n      */\n+\n+\n     @Then(\"^The cookie '(.+?)' exists in the saved cookies$\")\n     public void checkIfCookieExists(String cookieName) {\n         Assertions.assertThat(commonspec.cookieExists(cookieName)).isEqualTo(true);\n@@ -695,6 +748,8 @@ public class SeleniumSpec extends BaseGSpec {\n      *\n      * @param numberOfCookies number of cookies that must be saved\n      */\n+\n+\n     @Then(\"^I have '(\\\\d+)' selenium cookies saved$\")\n     public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n         Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n@@ -706,10 +761,12 @@ public class SeleniumSpec extends BaseGSpec {\n      * @param index  position of the element in the array of webElements found\n      * @param envVar name of the thread environment variable where to store the text\n      */\n+\n+\n     @Then(\"^I save content of element in index '(\\\\d+)' in environment variable '(.+?)'$\")\n     public void saveContentWebElementInEnvVar(Integer index, String envVar) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         String text = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n         ThreadProperty.set(envVar, text);\n     }\n",
            "diff_size": 161
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "698",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "698",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}