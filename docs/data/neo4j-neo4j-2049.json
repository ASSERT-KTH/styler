{
    "project_name": "neo4j-neo4j",
    "error_id": "2049",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2049/CsvInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2049/CsvInputIterator.java\nindex f0dcc7b4391..a3a98f5d07c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2049/CsvInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2049/CsvInputIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.input.csv;\n \n import java.io.Closeable;\n@@ -54,57 +55,56 @@ class CsvInputIterator implements SourceTraceability, Closeable\n     private final Decorator decorator;\n     private final Supplier<CsvInputChunk> realInputChunkSupplier;\n \n-    CsvInputIterator( CharReadable stream, Decorator decorator, Header header, Configuration config, IdType idType, Collector badCollector,\n-            Extractors extractors, int groupId )\n+    CsvInputIterator(CharReadable stream, Decorator decorator, Header header, Configuration config, IdType idType, Collector badCollector,\n+                     Extractors extractors, int groupId)\n     {\n         this.stream = stream;\n         this.decorator = decorator;\n         this.groupId = groupId;\n-        if ( config.multilineFields() )\n+        if (config.multilineFields())\n         {\n             // If we're expecting multi-line fields then there's no way to arbitrarily chunk the underlying data source\n             // and find record delimiters with certainty. This is why we opt for a chunker that does parsing inside\n             // the call that normally just hands out an arbitrary amount of characters to parse outside and in parallel.\n             // This chunker is single-threaded, as it was previously too and keeps the functionality of multi-line fields.\n-            this.chunker = new EagerParserChunker( stream, idType, header, badCollector, extractors, 1_000, config, decorator );\n+            this.chunker = new EagerParserChunker(stream, idType, header, badCollector, extractors, 1_000, config, decorator);\n             this.realInputChunkSupplier = EagerCsvInputChunk::new;\n-        }\n-        else\n+        } else\n         {\n-            this.chunker = new ClosestNewLineChunker( stream, config.bufferSize() );\n-            this.realInputChunkSupplier = () -> new LazyCsvInputChunk( idType, config.delimiter(), badCollector,\n-                    CsvGroupInputIterator.extractors( config ), chunker.newChunk(), config, decorator, header );\n+            this.chunker = new ClosestNewLineChunker(stream, config.bufferSize());\n+            this.realInputChunkSupplier = () -> new LazyCsvInputChunk(idType, config.delimiter(), badCollector,\n+              CsvGroupInputIterator.extractors(config), chunker.newChunk(), config, decorator, header);\n         }\n     }\n \n-    CsvInputIterator( CharReadable stream, Decorator decorator, Header.Factory headerFactory, IdType idType, Configuration config, Groups groups,\n-            Collector badCollector, Extractors extractors, int groupId, Monitor monitor ) throws IOException\n+    CsvInputIterator(CharReadable stream, Decorator decorator, Header.Factory headerFactory, IdType idType, Configuration config, Groups groups,\n+                     Collector badCollector, Extractors extractors, int groupId, Monitor monitor) throws IOException\n     {\n-        this( stream, decorator, extractHeader( stream, headerFactory, idType, config, groups, monitor ),\n-                config, idType, badCollector, extractors, groupId );\n+        this(stream, decorator, extractHeader(stream, headerFactory, idType, config, groups, monitor),\n+          config, idType, badCollector, extractors, groupId);\n     }\n \n-    static Header extractHeader( CharReadable stream, Header.Factory headerFactory, IdType idType,\n-            Configuration config, Groups groups, Monitor monitor ) throws IOException\n+    static Header extractHeader(CharReadable stream, Header.Factory headerFactory, IdType idType,\n+                                Configuration config, Groups groups, Monitor monitor) throws IOException\n     {\n-        if ( !headerFactory.isDefined() )\n+        if (!headerFactory.isDefined())\n         {\n-            char[] firstLineBuffer = Readables.extractFirstLineFrom( stream );\n+            char[] firstLineBuffer = Readables.extractFirstLineFrom(stream);\n             // make the chunk slightly bigger than the header to not have the seeker think that it's reading\n             // a value bigger than its max buffer size\n-            ChunkImpl firstChunk = new ChunkImpl( copyOf( firstLineBuffer, firstLineBuffer.length + 1 ) );\n-            firstChunk.initialize( firstLineBuffer.length, stream.sourceDescription() );\n-            CharSeeker firstSeeker = seeker( firstChunk, config );\n-            return headerFactory.create( firstSeeker, config, idType, groups, monitor );\n+            ChunkImpl firstChunk = new ChunkImpl(copyOf(firstLineBuffer, firstLineBuffer.length + 1));\n+            firstChunk.initialize(firstLineBuffer.length, stream.sourceDescription());\n+            CharSeeker firstSeeker = seeker(firstChunk, config);\n+            return headerFactory.create(firstSeeker, config, idType, groups, monitor);\n         }\n \n-        return headerFactory.create( null, null, null, null, monitor );\n+        return headerFactory.create(null, null, null, null, monitor);\n     }\n \n-    public boolean next( CsvInputChunkProxy proxy ) throws IOException\n+    public boolean next(CsvInputChunkProxy proxy) throws IOException\n     {\n-        proxy.ensureInstantiated( realInputChunkSupplier, groupId );\n-        return proxy.fillFrom( chunker );\n+        proxy.ensureInstantiated(realInputChunkSupplier, groupId);\n+        return proxy.fillFrom(chunker);\n     }\n \n     @Override\n@@ -132,8 +132,8 @@ class CsvInputIterator implements SourceTraceability, Closeable\n         return stream.compressionRatio();\n     }\n \n-    static CharSeeker seeker( Chunk chunk, Configuration config )\n+    static CharSeeker seeker(Chunk chunk, Configuration config)\n     {\n-        return new BufferedCharSeeker( Source.singleChunk( chunk ), config );\n+        return new BufferedCharSeeker(Source.singleChunk(chunk), config);\n     }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2049/CsvInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2049/CsvInputIterator.java\nindex f0dcc7b4391..75407c2dc3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2049/CsvInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2049/CsvInputIterator.java\n@@ -136,4 +136,4 @@ class CsvInputIterator implements SourceTraceability, Closeable\n     {\n         return new BufferedCharSeeker( Source.singleChunk( chunk ), config );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}