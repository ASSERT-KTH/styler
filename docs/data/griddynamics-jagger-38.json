{
    "project_name": "griddynamics-jagger",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "86",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 282).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public Service distribute(final ExecutorService executor, final String sessionId, final String taskId, final Multimap<NodeType, NodeId> availableNodes, final Coordinator coordinator, final CompositeTask task, final DistributionListener listener, final NodeContext nodeContext) {\n        log.debug(\"Composite task {} with id {} distribute configuration started\", task, taskId);\n\n        Function<CompositableTask, Service> convertToRunnable = new Function<CompositableTask, Service>() {",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/38/CompositeTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/38/CompositeTaskDistributor.java\nindex 1df93e9bcda..6f56d4fea30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/38/CompositeTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/38/CompositeTaskDistributor.java\n@@ -83,7 +83,9 @@ public class CompositeTaskDistributor implements TaskDistributor<CompositeTask>\n     }\n \n     @Override\n-    public Service distribute(final ExecutorService executor, final String sessionId, final String taskId, final Multimap<NodeType, NodeId> availableNodes, final Coordinator coordinator, final CompositeTask task, final DistributionListener listener, final NodeContext nodeContext) {\n+    public Service distribute(final ExecutorService executor, final String sessionId, final String taskId,\n+                              final Multimap<NodeType, NodeId> availableNodes, final Coordinator coordinator, final CompositeTask task,\n+                              final DistributionListener listener, final NodeContext nodeContext) {\n         log.debug(\"Composite task {} with id {} distribute configuration started\", task, taskId);\n \n         Function<CompositableTask, Service> convertToRunnable = new Function<CompositableTask, Service>() {\n@@ -111,18 +113,18 @@ public class CompositeTaskDistributor implements TaskDistributor<CompositeTask>\n                 try {\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n                     TestGroupListener compositeTestGroupListener = TestGroupListener.Composer.compose(ProviderUtil\n-                                                                                                              .provideElements(\n-                                                                                                                      task.getListeners(),\n-                                                                                                                      sessionId,\n-                                                                                                                      taskId,\n-                                                                                                                      nodeContext,\n-                                                                                                                      JaggerPlace.TEST_GROUP_LISTENER\n-                                                                                                              ));\n+                            .provideElements(\n+                                    task.getListeners(),\n+                                    sessionId,\n+                                    taskId,\n+                                    nodeContext,\n+                                    JaggerPlace.TEST_GROUP_LISTENER\n+                            ));\n                     TestGroupInfo testGroupInfo = new TestGroupInfo(task, sessionId);\n                     compositeTestGroupListener.onStart(testGroupInfo);\n-        \n+\n                     long startTime = System.currentTimeMillis();\n-        \n+\n                     List<Future<State>> futures = Lists.newLinkedList();\n                     for (Service service : Iterables.concat(leading, attendant)) {\n                         ListenableFuture<State> future = service.start();\n@@ -140,7 +142,7 @@ public class CompositeTaskDistributor implements TaskDistributor<CompositeTask>\n                     }\n                     testGroupInfo.setDuration(System.currentTimeMillis() - startTime);\n                     compositeTestGroupListener.onStop(testGroupInfo);\n-        \n+\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.SUCCEEDED);\n                 } catch (Exception e) {\n                     log.error(\"Composite task failure: \", e);\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 282).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 0, expected level should be one of the following: 20, 24, 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 0, expected level should be one of the following: 20, 24, 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/38/CompositeTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/38/CompositeTaskDistributor.java\nindex 1df93e9bcda..6ecb8d81ef8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/38/CompositeTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/38/CompositeTaskDistributor.java\n@@ -110,18 +110,16 @@ public class CompositeTaskDistributor implements TaskDistributor<CompositeTask>\n             protected void run() throws Exception {\n                 try {\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n-                    TestGroupListener compositeTestGroupListener = TestGroupListener.Composer.compose(ProviderUtil\n-                                                                                                              .provideElements(\n+                    TestGroupListener compositeTestGroupListener = TestGroupListener.Composer.compose(ProviderUtil.provideElements(\n                                                                                                                       task.getListeners(),\n                                                                                                                       sessionId,\n                                                                                                                       taskId,\n                                                                                                                       nodeContext,\n-                                                                                                                      JaggerPlace.TEST_GROUP_LISTENER\n-                                                                                                              ));\n-                    TestGroupInfo testGroupInfo = new TestGroupInfo(task, sessionId);\n+                                                                                                                      JaggerPlace.TEST_GROUP_LISTENER));\n+\n+TestGroupInfo testGroupInfo = new TestGroupInfo(task, sessionId);\n                     compositeTestGroupListener.onStart(testGroupInfo);\n-        \n-                    long startTime = System.currentTimeMillis();\n+long startTime = System.currentTimeMillis();\n         \n                     List<Future<State>> futures = Lists.newLinkedList();\n                     for (Service service : Iterables.concat(leading, attendant)) {\n@@ -227,4 +225,4 @@ public class CompositeTaskDistributor implements TaskDistributor<CompositeTask>\n \n         return new ListenableService<CompositeTask>(serviceToExecute, executor, sessionId, taskId, task, listener, Collections.EMPTY_MAP);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 282).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 48, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 52, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 52, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 52, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 52, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 52, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 52, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 48, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/38/CompositeTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/codebuff/38/CompositeTaskDistributor.java\nindex 1df93e9bcda..b66a8f9e260 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/38/CompositeTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/codebuff/38/CompositeTaskDistributor.java\n@@ -35,14 +35,12 @@ import com.griddynamics.jagger.util.TimeoutsConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Required;\n-\n import com.google.common.base.Function;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Multimap;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.Service;\n-\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n@@ -57,10 +55,12 @@ import java.util.concurrent.TimeoutException;\n  *\n  * @author Mairbek Khadikov\n  */\n+\n+\n public class CompositeTaskDistributor implements TaskDistributor<CompositeTask> {\n+\n     private static Logger log = LoggerFactory.getLogger(CompositeTaskDistributor.class);\n     private TimeoutsConfiguration timeoutsConfiguration;\n-\n     private DistributorRegistry distributorRegistry;\n     private TaskIdProvider taskIdProvider;\n     private TaskExecutionStatusProvider taskExecutionStatusProvider;\n@@ -87,144 +87,138 @@ public class CompositeTaskDistributor implements TaskDistributor<CompositeTask>\n         log.debug(\"Composite task {} with id {} distribute configuration started\", task, taskId);\n \n         Function<CompositableTask, Service> convertToRunnable = new Function<CompositableTask, Service>() {\n-            @Override\n-            @SuppressWarnings(\"unchecked\")\n-            public Service apply(CompositableTask task) {\n-                TaskDistributor taskDistributor = distributorRegistry.getTaskDistributor(task.getClass());\n-                task.setParentTaskId(taskId);\n-                task.setNumber(taskIdProvider.getTaskId());\n-                String childTaskId = taskIdProvider.stringify(task.getNumber());\n-                taskExecutionStatusProvider.setStatus(childTaskId, TaskData.ExecutionStatus.QUEUED);\n-                return taskDistributor.distribute(executor, sessionId, childTaskId, availableNodes, coordinator, task, listener, nodeContext);\n-            }\n+                                                @Override\n+                                                @SuppressWarnings(\"unchecked\")\n+                                                public Service apply(CompositableTask task) {\n+                                                    TaskDistributor taskDistributor = distributorRegistry.getTaskDistributor(task.getClass());\n+                                                    task.setParentTaskId(taskId);\n+                                                    task.setNumber(taskIdProvider.getTaskId());\n+\n+                                                    String childTaskId = taskIdProvider.stringify(task.getNumber());\n+                                                    taskExecutionStatusProvider.setStatus(childTaskId, TaskData.ExecutionStatus.QUEUED);\n+                                                    return taskDistributor.distribute(executor, sessionId, childTaskId, availableNodes, coordinator, task, listener, nodeContext);\n+                                                }\n         };\n-\n         final List<Service> leading = Lists.newLinkedList(Lists.transform(task.getLeading(), convertToRunnable));\n         final List<Service> attendant = Lists.newLinkedList(Lists.transform(task.getAttendant(), convertToRunnable));\n \n         Service serviceToExecute = new AbstractDistributionService(executor) {\n \n-            final List<Future<State>> leadingTerminateFutures = Lists.newLinkedList();\n-\n-            @Override\n-            protected void run() throws Exception {\n-                try {\n-                    taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n-                    TestGroupListener compositeTestGroupListener = TestGroupListener.Composer.compose(ProviderUtil\n-                                                                                                              .provideElements(\n-                                                                                                                      task.getListeners(),\n-                                                                                                                      sessionId,\n-                                                                                                                      taskId,\n-                                                                                                                      nodeContext,\n-                                                                                                                      JaggerPlace.TEST_GROUP_LISTENER\n-                                                                                                              ));\n-                    TestGroupInfo testGroupInfo = new TestGroupInfo(task, sessionId);\n-                    compositeTestGroupListener.onStart(testGroupInfo);\n-        \n-                    long startTime = System.currentTimeMillis();\n-        \n-                    List<Future<State>> futures = Lists.newLinkedList();\n-                    for (Service service : Iterables.concat(leading, attendant)) {\n-                        ListenableFuture<State> future = service.start();\n-                        futures.add(future);\n-                    }\n-                    for (Future<State> future : futures) {\n-                        State state = Futures.get(future, timeoutsConfiguration.getWorkloadStartTimeout());\n-                        log.debug(\"Service started with state {}\", state);\n+                    final List<Future<State>> leadingTerminateFutures = Lists.newLinkedList();\n+\n+                    @Override\n+                    protected void run() throws Exception {\n+                        try {\n+                            taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n+\n+                            TestGroupListener compositeTestGroupListener = TestGroupListener.Composer.compose(ProviderUtil.provideElements(task.getListeners(), sessionId, taskId, nodeContext, JaggerPlace.TEST_GROUP_LISTENER));\n+\n+                            TestGroupInfo testGroupInfo = new TestGroupInfo(task, sessionId);\n+                            compositeTestGroupListener.onStart(testGroupInfo);\n+\n+                            long startTime = System.currentTimeMillis();\n+\n+                            List<Future<State>> futures = Lists.newLinkedList();\n+                            for (Service service : Iterables.concat(leading, attendant)) {\n+                                ListenableFuture<State> future = service.start();\n+                                futures.add(future);\n+                            }\n+\n+                            for (Future<State> future : futures) {\n+                                State state = Futures.get(future, timeoutsConfiguration.getWorkloadStartTimeout());\n+                                log.debug(\"Service started with state {}\", state);\n+                            }\n+                            while (isRunning()) {\n+                                if (activeLeadingTasks() == 0) {\n+                                    break;\n+                                }\n+                                TimeUtils.sleepMillis(500);\n+                            }\n+                            testGroupInfo.setDuration(System.currentTimeMillis() - startTime);\n+                            compositeTestGroupListener.onStop(testGroupInfo);\n+                            taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.SUCCEEDED);\n+                        } catch (Exception e) {\n+                            log.error(\"Composite task failure: \", e);\n+                            taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.FAILED);\n+                            throw e;\n+                        }\n                     }\n-                    while (isRunning()) {\n-                        if (activeLeadingTasks() == 0) {\n-                            break;\n+\n+                    private int activeLeadingTasks() {\n+                        int result = 0;\n+\n+                        Iterator<Service> it = leading.iterator();\n+                        while (it.hasNext()) {\n+                            Service service = it.next();\n+                            if (service.state() == State.TERMINATED\n+                                    || service.state() == State.FAILED) {\n+                                log.debug(\"State {}\", service.state());\n+                                leadingTerminateFutures.addAll(requestTermination(Collections.singleton(service), true));\n+                                it.remove();\n+                            } else {\n+                                result++;\n+                            }\n                         }\n-                        TimeUtils.sleepMillis(500);\n+                        return result;\n                     }\n-                    testGroupInfo.setDuration(System.currentTimeMillis() - startTime);\n-                    compositeTestGroupListener.onStop(testGroupInfo);\n-        \n-                    taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.SUCCEEDED);\n-                } catch (Exception e) {\n-                    log.error(\"Composite task failure: \", e);\n-                    taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.FAILED);\n-                    throw e;\n-                }\n-            }\n-\n-            private int activeLeadingTasks() {\n-                int result = 0;\n-\n-                Iterator<Service> it = leading.iterator();\n-                while (it.hasNext()) {\n-                    Service service = it.next();\n-                    if (service.state() == State.TERMINATED || service.state() == State.FAILED) {\n-                        log.debug(\"State {}\", service.state());\n-                        leadingTerminateFutures.addAll(requestTermination(Collections.singleton(service), true));\n-                        it.remove();\n-                    } else {\n-                        result++;\n+\n+                    @Override\n+                    protected void shutDown() throws Exception {\n+                        stopAll();\n+                        super.shutDown();\n                     }\n-                }\n-\n-                return result;\n-            }\n-\n-            @Override\n-            protected void shutDown() throws Exception {\n-                stopAll();\n-                super.shutDown();\n-            }\n-\n-            private void awaitLeading(List<Future<State>> leadingFutures) {\n-                for (Future<State> future : leadingFutures) {\n-                    Futures.get(future, timeoutsConfiguration.getWorkloadStopTimeout());\n-                }\n-            }\n-\n-            private List<Future<State>> requestTermination(Iterable<Service> services, boolean leading) {\n-                List<Future<State>> leadingFutures = Lists.newLinkedList();\n-                for (Service service : services) {\n-                    if (service.state() == State.FAILED) {\n-                        if (leading) {\n-                            throw new IllegalStateException(\"Failed to run child distributor: \" + service);\n-                        } else {\n-                            log.warn(\"Attendant service {} failed\", service);\n-                            continue;\n+\n+                    private void awaitLeading(List<Future<State>> leadingFutures) {\n+                        for (Future<State> future : leadingFutures) {\n+                            Futures.get(future, timeoutsConfiguration.getWorkloadStopTimeout());\n                         }\n                     }\n \n-                    leadingFutures.add(service.stop());\n-                }\n-                return leadingFutures;\n-            }\n-\n-            private void stopAll() {\n-                List<Future<State>> leadingFutures = requestTermination(leading, true);\n-                List<Future<State>> attendantFutures = requestTermination(attendant, false);\n-                leadingFutures.addAll(leadingTerminateFutures);\n-\n-                awaitLeading(leadingFutures);\n-                awaitAttendant(attendantFutures);\n-            }\n-\n-            private void awaitAttendant(List<Future<State>> attendantFutures) {\n-                for (Future<State> future : attendantFutures) {\n-                    try {\n-                        future.get(timeoutsConfiguration.getWorkloadStopTimeout().getValue(), TimeUnit.MILLISECONDS);\n-                    } catch (TimeoutException e) {\n-                        log.warn(\"Attendant task timeout \" + timeoutsConfiguration.getWorkloadStopTimeout().toString(), e);\n-                    } catch (InterruptedException e) {\n-                        log.warn(\"Interrupted\", e);\n-                    } catch (ExecutionException e) {\n-                        log.warn(\"Attendant task failed\", e);\n+                    private List<Future<State>> requestTermination(Iterable<Service> services, boolean leading) {\n+                        List<Future<State>> leadingFutures = Lists.newLinkedList();\n+                        for (Service service : services) {\n+                            if (service.state() == State.FAILED) {\n+                                if (leading) {\n+                                    throw new IllegalStateException(\"Failed to run child distributor: \" + service);\n+                                } else {\n+                                    log.warn(\"Attendant service {} failed\", service);\n+                                    continue;\n+                                }\n+                            }\n+                            leadingFutures.add(service.stop());\n+                        }\n+                        return leadingFutures;\n                     }\n-                }\n-            }\n \n-            @Override\n-            public String toString() {\n-                return CompositeTaskDistributor.class.getName() + \" distributor\";\n-            }\n-        };\n+                    private void stopAll() {\n+                        List<Future<State>> leadingFutures = requestTermination(leading, true);\n+\n+                        List<Future<State>> attendantFutures = requestTermination(attendant, false);\n+                        leadingFutures.addAll(leadingTerminateFutures);\n+                        awaitLeading(leadingFutures);\n+                        awaitAttendant(attendantFutures);\n+                    }\n \n+                    private void awaitAttendant(List<Future<State>> attendantFutures) {\n+                        for (Future<State> future : attendantFutures) {\n+                            try {\n+                                future.get(timeoutsConfiguration.getWorkloadStopTimeout().getValue(), TimeUnit.MILLISECONDS);\n+                            } catch (TimeoutException e) {\n+                                log.warn(\"Attendant task timeout \" + timeoutsConfiguration.getWorkloadStopTimeout().toString(), e);\n+                            } catch (InterruptedException e) {\n+                                log.warn(\"Interrupted\", e);\n+                            } catch (ExecutionException e) {\n+                                log.warn(\"Attendant task failed\", e);\n+                            }\n+                        }\n+                    }\n+\n+                    @Override\n+                    public String toString() {\n+                        return CompositeTaskDistributor.class.getName() +\n+                        \" distributor\";\n+                    }\n+                };\n         return new ListenableService<CompositeTask>(serviceToExecute, executor, sessionId, taskId, task, listener, Collections.EMPTY_MAP);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 176
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}