{
    "project_name": "wso2-attic-commons",
    "error_id": "179",
    "information": {
        "errors": [
            {
                "line": "133",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "//  public Map<String, Object> detailsExt = new HashMap<String, Object>();\n\n    private static final String UPDATE_SCHEDULED = \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n    private static final int UPDATE_SCHEDULED_SLOTS = 10;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/179/JdbcDelegate.java\nindex b3e79364f2e..20c704ba4f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/179/JdbcDelegate.java\n@@ -129,10 +129,10 @@ public class JdbcDelegate implements DatabaseDelegate {\n //  public Integer retryCount;\n //  public Boolean inMem;\n //  public Map<String, Object> detailsExt = new HashMap<String, Object>();\n+private static final String\n+    UPDATE_SCHEDULED = \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n \n-    private static final String UPDATE_SCHEDULED = \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n-\n-    private static final int UPDATE_SCHEDULED_SLOTS = 10;\n+     private static final int UPDATE_SCHEDULED_SLOTS = 10;\n \n     private DataSource _ds;\n \n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/179/JdbcDelegate.java\nindex b3e79364f2e..da0e8573432 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/179/JdbcDelegate.java\n@@ -55,69 +55,69 @@ import org.apache.ode.utils.StreamUtils;\n  */\n public class JdbcDelegate implements DatabaseDelegate {\n \n-    private static final Log __log = LogFactory.getLog(JdbcDelegate.class);\n-\n-    private static final String DELETE_JOB = \"delete from ODE_JOB where jobid = ? and nodeid = ?\";\n-\n-    private static final String UPDATE_REASSIGN = \"update ODE_JOB set nodeid = ?, scheduled = 0 where nodeid = ?\";\n-\n-    private static final String UPDATE_JOB = \"update ODE_JOB set ts = ?, retryCount = ? where jobid = ?\";\n-\n-    private static final String UPGRADE_JOB_DEFAULT = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n-            + \"and mod(ts,?) = ? and ts < ?\";\n-\n-    private static final String UPGRADE_JOB_DB2 = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n-            + \"and mod(ts,CAST(? AS BIGINT)) = ? and ts < ?\";\n-\n-    private static final String UPGRADE_JOB_SQLSERVER = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n-            + \"and (ts % ?) = ? and ts < ?\";\n-\n-    private static final String UPGRADE_JOB_SYBASE = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n-            + \"and convert(int, ts) % ? = ? and ts < ?\";\n-\n-    private static final String UPGRADE_JOB_SYBASE12 = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n-            + \"and -1 <> ? and -1 <> ? and ts < ?\";\n-\n-    private static final String SAVE_JOB = \"insert into ODE_JOB \"\n-            + \" (jobid, nodeid, ts, scheduled, transacted, \"\n-            + \"instanceId,\"\n-            + \"mexId,\"\n-            + \"processId,\"\n-            + \"type,\"\n-            + \"channel,\"\n-            + \"correlatorId,\"\n-            + \"correlationKeySet,\"\n-            + \"retryCount,\"\n-            + \"inMem,\"\n-            + \"detailsExt\"\n-            + \") values(?, ?, ?, ?, ?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?,\"\n-            + \"?\"\n-            + \")\";\n-\n-    private static final String GET_NODEIDS = \"select distinct nodeid from ODE_JOB\";\n-\n-    private static final String SCHEDULE_IMMEDIATE = \"select jobid, ts, transacted, scheduled, \"\n-        + \"instanceId,\"\n-        + \"mexId,\"\n-        + \"processId,\"\n-        + \"type,\"\n-        + \"channel,\"\n-        + \"correlatorId,\"\n-        + \"correlationKeySet,\"\n-        + \"retryCount,\"\n-        + \"inMem,\"\n-        + \"detailsExt\"\n-        + \" from ODE_JOB \"\n-            + \"where nodeid = ? and ts < ? order by ts\";\n+  private static final Log __log = LogFactory.getLog(JdbcDelegate.class);\n+\n+  private static final String DELETE_JOB = \"delete from ODE_JOB where jobid = ? and nodeid = ?\";\n+\n+  private static final String UPDATE_REASSIGN = \"update ODE_JOB set nodeid = ?, scheduled = 0 where nodeid = ?\";\n+\n+  private static final String UPDATE_JOB = \"update ODE_JOB set ts = ?, retryCount = ? where jobid = ?\";\n+\n+  private static final String UPGRADE_JOB_DEFAULT = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n+    + \"and mod(ts,?) = ? and ts < ?\";\n+\n+  private static final String UPGRADE_JOB_DB2 = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n+    + \"and mod(ts,CAST(? AS BIGINT)) = ? and ts < ?\";\n+\n+  private static final String UPGRADE_JOB_SQLSERVER = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n+    + \"and (ts % ?) = ? and ts < ?\";\n+\n+  private static final String UPGRADE_JOB_SYBASE = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n+    + \"and convert(int, ts) % ? = ? and ts < ?\";\n+\n+  private static final String UPGRADE_JOB_SYBASE12 = \"update ODE_JOB set nodeid = ? where nodeid is null \"\n+    + \"and -1 <> ? and -1 <> ? and ts < ?\";\n+\n+  private static final String SAVE_JOB = \"insert into ODE_JOB \"\n+    + \" (jobid, nodeid, ts, scheduled, transacted, \"\n+    + \"instanceId,\"\n+    + \"mexId,\"\n+    + \"processId,\"\n+    + \"type,\"\n+    + \"channel,\"\n+    + \"correlatorId,\"\n+    + \"correlationKeySet,\"\n+    + \"retryCount,\"\n+    + \"inMem,\"\n+    + \"detailsExt\"\n+    + \") values(?, ?, ?, ?, ?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?,\"\n+    + \"?\"\n+    + \")\";\n+\n+  private static final String GET_NODEIDS = \"select distinct nodeid from ODE_JOB\";\n+\n+  private static final String SCHEDULE_IMMEDIATE = \"select jobid, ts, transacted, scheduled, \"\n+    + \"instanceId,\"\n+    + \"mexId,\"\n+    + \"processId,\"\n+    + \"type,\"\n+    + \"channel,\"\n+    + \"correlatorId,\"\n+    + \"correlationKeySet,\"\n+    + \"retryCount,\"\n+    + \"inMem,\"\n+    + \"detailsExt\"\n+    + \" from ODE_JOB \"\n+    + \"where nodeid = ? and ts < ? order by ts\";\n \n //  public Long instanceId;\n //  public String mexId;\n@@ -130,395 +130,422 @@ public class JdbcDelegate implements DatabaseDelegate {\n //  public Boolean inMem;\n //  public Map<String, Object> detailsExt = new HashMap<String, Object>();\n \n-    private static final String UPDATE_SCHEDULED = \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n+  private static final String UPDATE_SCHEDULED =\n+    \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n \n-    private static final int UPDATE_SCHEDULED_SLOTS = 10;\n+  private static final int UPDATE_SCHEDULED_SLOTS = 10;\n \n-    private DataSource _ds;\n+  private DataSource _ds;\n \n-    private Dialect _dialect;\n+  private Dialect _dialect;\n \n-    public JdbcDelegate(DataSource ds) {\n-        _ds = ds;\n-        _dialect = guessDialect();\n-    }\n-\n-    public boolean deleteJob(String jobid, String nodeId) throws DatabaseException {\n-        if (__log.isDebugEnabled())\n-            __log.debug(\"deleteJob \" + jobid + \" on node \" + nodeId);\n+  public JdbcDelegate(DataSource ds) {\n+    _ds = ds;\n+    _dialect = guessDialect();\n+  }\n \n-        Connection con = null;\n-        PreparedStatement ps = null;\n-        try {\n-            con = getConnection();\n-            ps = con.prepareStatement(DELETE_JOB);\n-            ps.setString(1, jobid);\n-            ps.setString(2, nodeId);\n-            return ps.executeUpdate() == 1;\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n-        }\n+  public boolean deleteJob(String jobid, String nodeId) throws DatabaseException {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"deleteJob \" + jobid + \" on node \" + nodeId);\n     }\n \n-    public List<String> getNodeIds() throws DatabaseException {\n-        Connection con = null;\n-        PreparedStatement ps = null;\n-        try {\n-            con = getConnection();\n-            ps = con.prepareStatement(GET_NODEIDS, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n-            ResultSet rs = ps.executeQuery();\n-            ArrayList<String> nodes = new ArrayList<String>();\n-            while (rs.next()) {\n-                String nodeId = rs.getString(1);\n-                if (nodeId != null)\n-                    nodes.add(rs.getString(1));\n-            }\n-            if (__log.isDebugEnabled())\n-                __log.debug(\"getNodeIds: \" + nodes);\n-            return nodes;\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n-        }\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      con = getConnection();\n+      ps = con.prepareStatement(DELETE_JOB);\n+      ps.setString(1, jobid);\n+      ps.setString(2, nodeId);\n+      return ps.executeUpdate() == 1;\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n-\n-    public boolean insertJob(Job job, String nodeId, boolean loaded) throws DatabaseException {\n-        if (__log.isDebugEnabled())\n-            __log.debug(\"insertJob \" + job.jobId + \" on node \" + nodeId + \" loaded=\" + loaded);\n-\n-        Connection con = null;\n-        PreparedStatement ps = null;\n-        try {\n-            int i = 1;\n-            con = getConnection();\n-            ps = con.prepareStatement(SAVE_JOB);\n-            ps.setString(i++, job.jobId);\n-            ps.setString(i++, nodeId);\n-            ps.setLong(i++, job.schedDate);\n-            ps.setInt(i++, asInteger(loaded));\n-            ps.setInt(i++, asInteger(job.transacted));\n-\n-            JobDetails details = job.detail;\n-            ps.setObject(i++, details.instanceId, Types.BIGINT);\n-            ps.setObject(i++, details.mexId, Types.VARCHAR);\n-            ps.setObject(i++, details.processId, Types.VARCHAR);\n-            ps.setObject(i++, details.type, Types.VARCHAR);\n-            ps.setObject(i++, details.channel, Types.VARCHAR);\n-            ps.setObject(i++, details.correlatorId, Types.VARCHAR);\n-            ps.setObject(i++, details.correlationKeySet, Types.VARCHAR);\n-            ps.setObject(i++, details.retryCount, Types.INTEGER);\n-            ps.setObject(i++, details.inMem, Types.INTEGER);\n-\n-            if (details.detailsExt == null || details.detailsExt.size() == 0) {\n-                ps.setObject(i++, null, Types.BLOB);\n-            } else {\n-                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-                try {\n-                    StreamUtils.write(bos, (Serializable) details.detailsExt);\n-                } catch (Exception ex) {\n-                    __log.error(\"Error serializing job detail: \" + job.detail);\n-                    throw new DatabaseException(ex);\n-                }\n-                ps.setBytes(i++, bos.toByteArray());\n-            }\n-\n-            return ps.executeUpdate() == 1;\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n+  }\n+\n+  public List<String> getNodeIds() throws DatabaseException {\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      con = getConnection();\n+      ps = con.prepareStatement(GET_NODEIDS, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n+      ResultSet rs = ps.executeQuery();\n+      ArrayList<String> nodes = new ArrayList<String>();\n+      while (rs.next()) {\n+        String nodeId = rs.getString(1);\n+        if (nodeId != null) {\n+          nodes.add(rs.getString(1));\n         }\n+      }\n+      if (__log.isDebugEnabled()) {\n+        __log.debug(\"getNodeIds: \" + nodes);\n+      }\n+      return nodes;\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n+  }\n \n-    public boolean updateJob(Job job) throws DatabaseException {\n-        if (__log.isDebugEnabled())\n-            __log.debug(\"updateJob \" + job.jobId + \" retryCount=\" + job.detail.getRetryCount());\n+  public boolean insertJob(Job job, String nodeId, boolean loaded) throws DatabaseException {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"insertJob \" + job.jobId + \" on node \" + nodeId + \" loaded=\" + loaded);\n+    }\n \n-        Connection con = null;\n-        PreparedStatement ps = null;\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      int i = 1;\n+      con = getConnection();\n+      ps = con.prepareStatement(SAVE_JOB);\n+      ps.setString(i++, job.jobId);\n+      ps.setString(i++, nodeId);\n+      ps.setLong(i++, job.schedDate);\n+      ps.setInt(i++, asInteger(loaded));\n+      ps.setInt(i++, asInteger(job.transacted));\n+\n+      JobDetails details = job.detail;\n+      ps.setObject(i++, details.instanceId, Types.BIGINT);\n+      ps.setObject(i++, details.mexId, Types.VARCHAR);\n+      ps.setObject(i++, details.processId, Types.VARCHAR);\n+      ps.setObject(i++, details.type, Types.VARCHAR);\n+      ps.setObject(i++, details.channel, Types.VARCHAR);\n+      ps.setObject(i++, details.correlatorId, Types.VARCHAR);\n+      ps.setObject(i++, details.correlationKeySet, Types.VARCHAR);\n+      ps.setObject(i++, details.retryCount, Types.INTEGER);\n+      ps.setObject(i++, details.inMem, Types.INTEGER);\n+\n+      if (details.detailsExt == null || details.detailsExt.size() == 0) {\n+        ps.setObject(i++, null, Types.BLOB);\n+      } else {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         try {\n-            con = getConnection();\n-            ps = con.prepareStatement(UPDATE_JOB);\n-            ps.setLong(1, job.schedDate);\n-            ps.setInt(2, job.detail.getRetryCount());\n-            ps.setString(3, job.jobId);\n-            return ps.executeUpdate() == 1;\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n+          StreamUtils.write(bos, (Serializable) details.detailsExt);\n+        } catch (Exception ex) {\n+          __log.error(\"Error serializing job detail: \" + job.detail);\n+          throw new DatabaseException(ex);\n         }\n+        ps.setBytes(i++, bos.toByteArray());\n+      }\n+\n+      return ps.executeUpdate() == 1;\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n+  }\n \n-    private Long asLong(Object o) {\n-        if (o == null) return null;\n-        else if (o instanceof BigDecimal) return ((BigDecimal) o).longValue();\n-        else if (o instanceof Long) return (Long) o;\n-        else if (o instanceof Integer) return ((Integer) o).longValue();\n-        else throw new IllegalStateException(\"Can't convert to long \" + o.getClass());\n+  public boolean updateJob(Job job) throws DatabaseException {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"updateJob \" + job.jobId + \" retryCount=\" + job.detail.getRetryCount());\n     }\n \n-    private Integer asInteger(Object o) {\n-        if (o == null) return null;\n-        else if (o instanceof BigDecimal) return ((BigDecimal) o).intValue();\n-        else if (o instanceof Integer) return (Integer) o;\n-        else throw new IllegalStateException(\"Can't convert to integer \" + o.getClass());\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      con = getConnection();\n+      ps = con.prepareStatement(UPDATE_JOB);\n+      ps.setLong(1, job.schedDate);\n+      ps.setInt(2, job.detail.getRetryCount());\n+      ps.setString(3, job.jobId);\n+      return ps.executeUpdate() == 1;\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public List<Job> dequeueImmediate(String nodeId, long maxtime, int maxjobs) throws DatabaseException {\n-        ArrayList<Job> ret = new ArrayList<Job>(maxjobs);\n-        Connection con = null;\n-        PreparedStatement ps = null;\n-        try {\n-            con = getConnection();\n-            ps = con.prepareStatement(SCHEDULE_IMMEDIATE);\n-            ps.setString(1, nodeId);\n-            ps.setLong(2, maxtime);\n-            ps.setMaxRows(maxjobs);\n-\n-            ResultSet rs = ps.executeQuery();\n-            while (rs.next()) {\n-                Scheduler.JobDetails details = new Scheduler.JobDetails();\n-                details.instanceId = asLong(rs.getObject(\"instanceId\"));\n-                details.mexId = (String) rs.getObject(\"mexId\");\n-                details.processId = (String) rs.getObject(\"processId\");\n-                details.type = (String) rs.getObject(\"type\");\n-                details.channel = (String) rs.getObject(\"channel\");\n-                details.correlatorId = (String) rs.getObject(\"correlatorId\");\n-                details.correlationKeySet = (String) rs.getObject(\"correlationKeySet\");\n-                details.retryCount = asInteger(rs.getObject(\"retryCount\"));\n-                details.inMem = asBoolean(rs.getInt(\"inMem\"));\n-                if (rs.getObject(\"detailsExt\") != null) {\n-                    try {\n-                        ObjectInputStream is = new ObjectInputStream(rs.getBinaryStream(\"detailsExt\"));\n-                        details.detailsExt = (Map<String, Object>) is.readObject();\n-                        is.close();\n-                    } catch (Exception e) {\n-                        throw new DatabaseException(\"Error deserializing job detailsExt\", e);\n-                    }\n-                }\n-\n-                {\n-                    //For compatibility reasons, we check whether there are entries inside\n-                    //jobDetailsExt blob, which correspond to extracted entries. If so, we\n-                    //use them.\n-\n-                    Map<String, Object> detailsExt = details.getDetailsExt();\n-                    if (detailsExt.get(\"type\") != null) {\n-                        details.type = (String) detailsExt.get(\"type\");\n-                    }\n-                    if (detailsExt.get(\"iid\") != null) {\n-                        details.instanceId = (Long) detailsExt.get(\"iid\");\n-                    }\n-                    if (detailsExt.get(\"pid\") != null && detailsExt.get(\"pid\") instanceof String) {\n-                        details.processId = (String) detailsExt.get(\"pid\");\n-                    }\n-                    if (detailsExt.get(\"inmem\") != null) {\n-                        details.inMem = (Boolean) detailsExt.get(\"inmem\");\n-                    }\n-                    if (detailsExt.get(\"ckey\") != null) {\n-                        details.correlationKeySet = (String) detailsExt.get(\"ckey\");\n-                    }\n-                    if (detailsExt.get(\"channel\") != null) {\n-                        details.channel = (String) detailsExt.get(\"channel\");\n-                    }\n-                    if (detailsExt.get(\"mexid\") != null) {\n-                        details.mexId = (String) detailsExt.get(\"mexid\");\n-                    }\n-                    if (detailsExt.get(\"correlatorId\") != null) {\n-                        details.correlatorId = (String) detailsExt.get(\"correlatorId\");\n-                    }\n-                    if (detailsExt.get(\"retryCount\") != null) {\n-                        details.retryCount = Integer.parseInt((String) detailsExt.get(\"retryCount\"));\n-                    }\n-                }\n-\n-                Job job = new Job(rs.getLong(\"ts\"), rs.getString(\"jobid\"), asBoolean(rs.getInt(\"transacted\")), details);\n-                ret.add(job);\n-            }\n-            rs.close();\n-            ps.close();\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n-        }\n-        return ret;\n+  }\n+\n+  private Long asLong(Object o) {\n+    if (o == null) {\n+      return null;\n+    } else if (o instanceof BigDecimal) {\n+      return ((BigDecimal) o).longValue();\n+    } else if (o instanceof Long) {\n+      return (Long) o;\n+    } else if (o instanceof Integer) {\n+      return ((Integer) o).longValue();\n+    } else {\n+      throw new IllegalStateException(\"Can't convert to long \" + o.getClass());\n     }\n-\n-    public int updateReassign(String oldnode, String newnode) throws DatabaseException {\n-        if (__log.isDebugEnabled())\n-            __log.debug(\"updateReassign from \" + oldnode + \" ---> \" + newnode);\n-        Connection con = null;\n-        PreparedStatement ps = null;\n-        try {\n-            con = getConnection();\n-            ps = con.prepareStatement(UPDATE_REASSIGN);\n-            ps.setString(1, newnode);\n-            ps.setString(2, oldnode);\n-            return ps.executeUpdate();\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n-        }\n+  }\n+\n+  private Integer asInteger(Object o) {\n+    if (o == null) {\n+      return null;\n+    } else if (o instanceof BigDecimal) {\n+      return ((BigDecimal) o).intValue();\n+    } else if (o instanceof Integer) {\n+      return (Integer) o;\n+    } else {\n+      throw new IllegalStateException(\"Can't convert to integer \" + o.getClass());\n     }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Job> dequeueImmediate(String nodeId, long maxtime, int maxjobs) throws DatabaseException {\n+    ArrayList<Job> ret = new ArrayList<Job>(maxjobs);\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      con = getConnection();\n+      ps = con.prepareStatement(SCHEDULE_IMMEDIATE);\n+      ps.setString(1, nodeId);\n+      ps.setLong(2, maxtime);\n+      ps.setMaxRows(maxjobs);\n+\n+      ResultSet rs = ps.executeQuery();\n+      while (rs.next()) {\n+        Scheduler.JobDetails details = new Scheduler.JobDetails();\n+        details.instanceId = asLong(rs.getObject(\"instanceId\"));\n+        details.mexId = (String) rs.getObject(\"mexId\");\n+        details.processId = (String) rs.getObject(\"processId\");\n+        details.type = (String) rs.getObject(\"type\");\n+        details.channel = (String) rs.getObject(\"channel\");\n+        details.correlatorId = (String) rs.getObject(\"correlatorId\");\n+        details.correlationKeySet = (String) rs.getObject(\"correlationKeySet\");\n+        details.retryCount = asInteger(rs.getObject(\"retryCount\"));\n+        details.inMem = asBoolean(rs.getInt(\"inMem\"));\n+        if (rs.getObject(\"detailsExt\") != null) {\n+          try {\n+            ObjectInputStream is = new ObjectInputStream(rs.getBinaryStream(\"detailsExt\"));\n+            details.detailsExt = (Map<String, Object>) is.readObject();\n+            is.close();\n+          } catch (Exception e) {\n+            throw new DatabaseException(\"Error deserializing job detailsExt\", e);\n+          }\n+        }\n \n-    public int updateAssignToNode(String node, int i, int numNodes, long maxtime) throws DatabaseException {\n-        if (__log.isDebugEnabled())\n-            __log.debug(\"updateAsssignToNode node=\" + node + \" \" + i + \"/\" + numNodes + \" maxtime=\" + maxtime);\n-        Connection con = null;\n-        PreparedStatement ps = null;\n-        try {\n-            con = getConnection();\n-            if (_dialect == Dialect.SQLSERVER) {\n-                ps = con.prepareStatement(UPGRADE_JOB_SQLSERVER);\n-            } else if (_dialect == Dialect.DB2) {\n-                ps = con.prepareStatement(UPGRADE_JOB_DB2);\n-            } else if (_dialect == Dialect.SYBASE) {\n-                ps = con.prepareStatement(UPGRADE_JOB_SYBASE);\n-            } else if (_dialect == Dialect.SYBASE12) {\n-                ps = con.prepareStatement(UPGRADE_JOB_SYBASE12);\n-            } else {\n-                ps = con.prepareStatement(UPGRADE_JOB_DEFAULT);\n-            }\n-            ps.setString(1, node);\n-            ps.setInt(2, numNodes);\n-            ps.setInt(3, i);\n-            ps.setLong(4, maxtime);\n-            return ps.executeUpdate();\n-        } catch (SQLException se) {\n-            throw new DatabaseException(se);\n-        } finally {\n-            close(ps);\n-            close(con);\n+        {\n+          //For compatibility reasons, we check whether there are entries inside\n+          //jobDetailsExt blob, which correspond to extracted entries. If so, we\n+          //use them.\n+\n+          Map<String, Object> detailsExt = details.getDetailsExt();\n+          if (detailsExt.get(\"type\") != null) {\n+            details.type = (String) detailsExt.get(\"type\");\n+          }\n+          if (detailsExt.get(\"iid\") != null) {\n+            details.instanceId = (Long) detailsExt.get(\"iid\");\n+          }\n+          if (detailsExt.get(\"pid\") != null && detailsExt.get(\"pid\") instanceof String) {\n+            details.processId = (String) detailsExt.get(\"pid\");\n+          }\n+          if (detailsExt.get(\"inmem\") != null) {\n+            details.inMem = (Boolean) detailsExt.get(\"inmem\");\n+          }\n+          if (detailsExt.get(\"ckey\") != null) {\n+            details.correlationKeySet = (String) detailsExt.get(\"ckey\");\n+          }\n+          if (detailsExt.get(\"channel\") != null) {\n+            details.channel = (String) detailsExt.get(\"channel\");\n+          }\n+          if (detailsExt.get(\"mexid\") != null) {\n+            details.mexId = (String) detailsExt.get(\"mexid\");\n+          }\n+          if (detailsExt.get(\"correlatorId\") != null) {\n+            details.correlatorId = (String) detailsExt.get(\"correlatorId\");\n+          }\n+          if (detailsExt.get(\"retryCount\") != null) {\n+            details.retryCount = Integer.parseInt((String) detailsExt.get(\"retryCount\"));\n+          }\n         }\n-    }\n \n-    private Connection getConnection() throws SQLException {\n-        Connection c = _ds.getConnection();\n-        DbIsolation.setIsolationLevel(c);\n-        return c;\n+        Job job = new Job(rs.getLong(\"ts\"), rs.getString(\"jobid\"), asBoolean(rs.getInt(\"transacted\")), details);\n+        ret.add(job);\n+      }\n+      rs.close();\n+      ps.close();\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n+    return ret;\n+  }\n \n-    private int asInteger(boolean value) {\n-        return (value ? 1 : 0);\n+  public int updateReassign(String oldnode, String newnode) throws DatabaseException {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"updateReassign from \" + oldnode + \" ---> \" + newnode);\n     }\n-\n-    private boolean asBoolean(int value) {\n-        return (value != 0);\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      con = getConnection();\n+      ps = con.prepareStatement(UPDATE_REASSIGN);\n+      ps.setString(1, newnode);\n+      ps.setString(2, oldnode);\n+      return ps.executeUpdate();\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n+  }\n \n-    private void close(PreparedStatement ps) {\n-        if (ps != null) {\n-            try {\n-                ps.close();\n-            } catch (Exception e) {\n-                __log.warn(\"Exception while closing prepared statement\", e);\n-            }\n-        }\n+  public int updateAssignToNode(String node, int i, int numNodes, long maxtime) throws DatabaseException {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"updateAsssignToNode node=\" + node + \" \" + i + \"/\" + numNodes + \" maxtime=\" + maxtime);\n     }\n-\n-    private void close(Connection con) {\n-        if (con != null) {\n-            try {\n-                con.close();\n-            } catch (Exception e) {\n-                __log.warn(\"Exception while closing connection\", e);\n-            }\n-        }\n+    Connection con = null;\n+    PreparedStatement ps = null;\n+    try {\n+      con = getConnection();\n+      if (_dialect == Dialect.SQLSERVER) {\n+        ps = con.prepareStatement(UPGRADE_JOB_SQLSERVER);\n+      } else if (_dialect == Dialect.DB2) {\n+        ps = con.prepareStatement(UPGRADE_JOB_DB2);\n+      } else if (_dialect == Dialect.SYBASE) {\n+        ps = con.prepareStatement(UPGRADE_JOB_SYBASE);\n+      } else if (_dialect == Dialect.SYBASE12) {\n+        ps = con.prepareStatement(UPGRADE_JOB_SYBASE12);\n+      } else {\n+        ps = con.prepareStatement(UPGRADE_JOB_DEFAULT);\n+      }\n+      ps.setString(1, node);\n+      ps.setInt(2, numNodes);\n+      ps.setInt(3, i);\n+      ps.setLong(4, maxtime);\n+      return ps.executeUpdate();\n+    } catch (SQLException se) {\n+      throw new DatabaseException(se);\n+    } finally {\n+      close(ps);\n+      close(con);\n     }\n-\n-    private Dialect guessDialect() {\n-        Dialect d = Dialect.UNKNOWN;\n-        Connection con = null;\n-        try {\n-            con = getConnection();\n-            DatabaseMetaData metaData = con.getMetaData();\n-            if (metaData != null) {\n-                String dbProductName = metaData.getDatabaseProductName();\n-                int dbMajorVer = metaData.getDatabaseMajorVersion();\n-                __log.info(\"Using database \" + dbProductName + \" major version \" + dbMajorVer);\n-                if (dbProductName.indexOf(\"DB2\") >= 0) {\n-                    d = Dialect.DB2;\n-                } else if (dbProductName.indexOf(\"Derby\") >= 0) {\n-                    d = Dialect.DERBY;\n-                } else if (dbProductName.indexOf(\"Firebird\") >= 0) {\n-                    d = Dialect.FIREBIRD;\n-                } else if (dbProductName.indexOf(\"HSQL\") >= 0) {\n-                    d = Dialect.HSQL;\n-                } else if (dbProductName.indexOf(\"H2\") >= 0) {\n-                    d = Dialect.H2;\n-                } else if (dbProductName.indexOf(\"Microsoft SQL\") >= 0) {\n-                    d = Dialect.SQLSERVER;\n-                } else if (dbProductName.indexOf(\"MySQL\") >= 0) {\n-                    d = Dialect.MYSQL;\n-                } else if (dbProductName.indexOf(\"Sybase\") >= 0 || dbProductName.indexOf(\"Adaptive\") >= 0) {\n-                    d = Dialect.SYBASE;\n-                    if( dbMajorVer == 12 ) {\n-                        d = Dialect.SYBASE12;\n-                    }\n-                }\n-            }\n-        } catch (SQLException e) {\n-            __log.warn(\"Unable to determine database dialect\", e);\n-        } finally {\n-            close(con);\n+  }\n+\n+  private Connection getConnection() throws SQLException {\n+    Connection c = _ds.getConnection();\n+    DbIsolation.setIsolationLevel(c);\n+    return c;\n+  }\n+\n+  private int asInteger(boolean value) {\n+    return (value ? 1 : 0);\n+  }\n+\n+  private boolean asBoolean(int value) {\n+    return (value != 0);\n+  }\n+\n+  private void close(PreparedStatement ps) {\n+    if (ps != null) {\n+      try {\n+        ps.close();\n+      } catch (Exception e) {\n+        __log.warn(\"Exception while closing prepared statement\", e);\n+      }\n+    }\n+  }\n+\n+  private void close(Connection con) {\n+    if (con != null) {\n+      try {\n+        con.close();\n+      } catch (Exception e) {\n+        __log.warn(\"Exception while closing connection\", e);\n+      }\n+    }\n+  }\n+\n+  private Dialect guessDialect() {\n+    Dialect d = Dialect.UNKNOWN;\n+    Connection con = null;\n+    try {\n+      con = getConnection();\n+      DatabaseMetaData metaData = con.getMetaData();\n+      if (metaData != null) {\n+        String dbProductName = metaData.getDatabaseProductName();\n+        int dbMajorVer = metaData.getDatabaseMajorVersion();\n+        __log.info(\"Using database \" + dbProductName + \" major version \" + dbMajorVer);\n+        if (dbProductName.indexOf(\"DB2\") >= 0) {\n+          d = Dialect.DB2;\n+        } else if (dbProductName.indexOf(\"Derby\") >= 0) {\n+          d = Dialect.DERBY;\n+        } else if (dbProductName.indexOf(\"Firebird\") >= 0) {\n+          d = Dialect.FIREBIRD;\n+        } else if (dbProductName.indexOf(\"HSQL\") >= 0) {\n+          d = Dialect.HSQL;\n+        } else if (dbProductName.indexOf(\"H2\") >= 0) {\n+          d = Dialect.H2;\n+        } else if (dbProductName.indexOf(\"Microsoft SQL\") >= 0) {\n+          d = Dialect.SQLSERVER;\n+        } else if (dbProductName.indexOf(\"MySQL\") >= 0) {\n+          d = Dialect.MYSQL;\n+        } else if (dbProductName.indexOf(\"Sybase\") >= 0 || dbProductName.indexOf(\"Adaptive\") >= 0) {\n+          d = Dialect.SYBASE;\n+          if (dbMajorVer == 12) {\n+            d = Dialect.SYBASE12;\n+          }\n         }\n-        __log.info(\"Using database dialect: \" + d);\n-        return d;\n+      }\n+    } catch (SQLException e) {\n+      __log.warn(\"Unable to determine database dialect\", e);\n+    } finally {\n+      close(con);\n     }\n-\n-    public void acquireTransactionLocks() {\n-        Statement s = null;\n-        Connection c = null;\n-        try {\n-            c = getConnection();\n-            s = c.createStatement();\n-            s.execute(\"update ODE_JOB set jobid = '' where 1 = 0\");\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"\", e);\n-        } finally {\n-            try {\n-                if (s != null) s.close();\n-                if (c != null) c.close();\n-            } catch (Exception e) {\n-                throw new RuntimeException(\"\", e);\n-            }\n+    __log.info(\"Using database dialect: \" + d);\n+    return d;\n+  }\n+\n+  public void acquireTransactionLocks() {\n+    Statement s = null;\n+    Connection c = null;\n+    try {\n+      c = getConnection();\n+      s = c.createStatement();\n+      s.execute(\"update ODE_JOB set jobid = '' where 1 = 0\");\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"\", e);\n+    } finally {\n+      try {\n+        if (s != null) {\n+          s.close();\n+        }\n+        if (c != null) {\n+          c.close();\n         }\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"\", e);\n+      }\n     }\n-\n-    public void deleteAllJobs() {\n-        Statement s = null;\n-        Connection c = null;\n-        try {\n-            c = getConnection();\n-            s = c.createStatement();\n-            s.execute(\"delete from ODE_JOB\");\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"\", e);\n-        } finally {\n-            try {\n-                if (s != null) s.close();\n-                if (c != null) c.close();\n-            } catch (Exception e) {\n-                throw new RuntimeException(\"\", e);\n-            }\n+  }\n+\n+  public void deleteAllJobs() {\n+    Statement s = null;\n+    Connection c = null;\n+    try {\n+      c = getConnection();\n+      s = c.createStatement();\n+      s.execute(\"delete from ODE_JOB\");\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"\", e);\n+    } finally {\n+      try {\n+        if (s != null) {\n+          s.close();\n         }\n+        if (c != null) {\n+          c.close();\n+        }\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"\", e);\n+      }\n     }\n+  }\n \n-    enum Dialect {\n-        DB2, DERBY, FIREBIRD, HSQL, MYSQL, ORACLE, SQLSERVER, SYBASE, SYBASE12, H2, UNKNOWN\n-    }\n+  enum Dialect {\n+    DB2, DERBY, FIREBIRD, HSQL, MYSQL, ORACLE, SQLSERVER, SYBASE, SYBASE12, H2, UNKNOWN\n+  }\n \n }\n",
            "diff_size": 593
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/179/JdbcDelegate.java\nindex b3e79364f2e..fbec9cf2fe2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/179/JdbcDelegate.java\n@@ -521,4 +521,4 @@ public class JdbcDelegate implements DatabaseDelegate {\n         DB2, DERBY, FIREBIRD, HSQL, MYSQL, ORACLE, SQLSERVER, SYBASE, SYBASE12, H2, UNKNOWN\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/179/JdbcDelegate.java\nindex b3e79364f2e..20c704ba4f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/179/JdbcDelegate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/179/JdbcDelegate.java\n@@ -129,10 +129,10 @@ public class JdbcDelegate implements DatabaseDelegate {\n //  public Integer retryCount;\n //  public Boolean inMem;\n //  public Map<String, Object> detailsExt = new HashMap<String, Object>();\n+private static final String\n+    UPDATE_SCHEDULED = \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n \n-    private static final String UPDATE_SCHEDULED = \"update ODE_JOB set scheduled = 1 where jobid in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n-\n-    private static final int UPDATE_SCHEDULED_SLOTS = 10;\n+     private static final int UPDATE_SCHEDULED_SLOTS = 10;\n \n     private DataSource _ds;\n \n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}