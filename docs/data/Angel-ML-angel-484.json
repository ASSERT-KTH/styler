{
    "project_name": "Angel-ML-angel",
    "error_id": "484",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 112).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * Filter elements that absolute value less than a specific value if need.\n   * @param x a int value\n   * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n   */\n  public abstract TIntVector filter(int x);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/484/TIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/484/TIntVector.java\nindex 80fb423a908..6751bf0583e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/484/TIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/484/TIntVector.java\n@@ -31,6 +31,7 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Get element value\n+   *\n    * @param index element index\n    * @return element value\n    */\n@@ -38,6 +39,7 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Set element value\n+   *\n    * @param index element index\n    * @param value element value\n    * @return this\n@@ -46,18 +48,21 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Get all indexes of vector\n+   *\n    * @return all indexes of vector\n    */\n   public abstract int[] getIndices();\n \n   /**\n    * Get all element values\n+   *\n    * @return all element values\n    */\n   public abstract int[] getValues();\n \n   /**\n    * Plus a element with a update value\n+   *\n    * @param index element index\n    * @param delta update value\n    * @return this\n@@ -66,6 +71,7 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n+   *\n    * @param x a int value\n    * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n    */\n@@ -73,6 +79,7 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Times all elements by a int factor\n+   *\n    * @param x factor\n    * @return a new vector\n    */\n@@ -80,6 +87,7 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Times all elements by a int factor\n+   *\n    * @param x factor\n    * @return this\n    */\n@@ -87,16 +95,18 @@ public abstract class TIntVector extends TVector {\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n+   *\n    * @param other update vector\n-   * @param x factor\n+   * @param x     factor\n    * @return a new result vector\n    */\n   public abstract TVector plus(TAbstractVector other, int x);\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n+   *\n    * @param other update vector\n-   * @param x factor\n+   * @param x     factor\n    * @return this\n    */\n   public abstract TIntVector plusBy(TAbstractVector other, int x);\n@@ -105,22 +115,34 @@ public abstract class TIntVector extends TVector {\n \n \n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (int) delta);}\n+  public TVector plusBy(int index, double delta) {\n+    return plusBy(index, (int) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((int)x); }\n+  public TVector filter(double x) {\n+    return filter((int) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return times((int)x); }\n+  public TVector times(double x) {\n+    return times((int) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((int) x); }\n+  public TVector timesBy(double x) {\n+    return timesBy((int) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (int) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+    return plus(other, (int) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (int) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+    return plusBy(other, (int) x);\n+  }\n \n   public abstract long sum();\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/484/TIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/484/TIntVector.java\nindex 80fb423a908..e1f6a5825ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/484/TIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/484/TIntVector.java\n@@ -103,24 +103,35 @@ public abstract class TIntVector extends TVector {\n \n   public abstract TIntVector clone();\n \n+@Override\n+  public TVector plusBy(int index, double delta) {\n+  return plusBy(index, (int) delta);\n+  }\n \n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (int) delta);}\n-\n-  @Override\n-  public TVector filter(double x) { return  filter((int)x); }\n+  public TVector filter(double x) {\n+  return filter((int) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return times((int)x); }\n+  public TVector times(double x) {\n+  return times((int) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((int) x); }\n+  public TVector timesBy(double x) {\n+  return timesBy((int) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (int) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+  return plus(other, (int) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (int) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+  return plusBy(other, (int) x);\n+  }\n \n   public abstract long sum();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/484/TIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/484/TIntVector.java\nindex 80fb423a908..53b330b5c80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/484/TIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/484/TIntVector.java\n@@ -21,6 +21,7 @@ import com.tencent.angel.ml.math.TAbstractVector;\n import com.tencent.angel.ml.math.TVector;\n \n public abstract class TIntVector extends TVector {\n+\n   public TIntVector() {\n     super();\n   }\n@@ -34,6 +35,7 @@ public abstract class TIntVector extends TVector {\n    * @param index element index\n    * @return element value\n    */\n+\n   public abstract int get(int index);\n \n   /**\n@@ -42,18 +44,21 @@ public abstract class TIntVector extends TVector {\n    * @param value element value\n    * @return this\n    */\n+\n   public abstract TIntVector set(int index, int value);\n \n   /**\n    * Get all indexes of vector\n    * @return all indexes of vector\n    */\n+\n   public abstract int[] getIndices();\n \n   /**\n    * Get all element values\n    * @return all element values\n    */\n+\n   public abstract int[] getValues();\n \n   /**\n@@ -62,6 +67,7 @@ public abstract class TIntVector extends TVector {\n    * @param delta update value\n    * @return this\n    */\n+\n   public abstract TIntVector plusBy(int index, int delta);\n \n   /**\n@@ -69,6 +75,7 @@ public abstract class TIntVector extends TVector {\n    * @param x a int value\n    * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n    */\n+\n   public abstract TIntVector filter(int x);\n \n   /**\n@@ -76,6 +83,7 @@ public abstract class TIntVector extends TVector {\n    * @param x factor\n    * @return a new vector\n    */\n+\n   public abstract TIntVector times(int x);\n \n   /**\n@@ -83,6 +91,7 @@ public abstract class TIntVector extends TVector {\n    * @param x factor\n    * @return this\n    */\n+\n   public abstract TIntVector timesBy(int x);\n \n   /**\n@@ -91,6 +100,7 @@ public abstract class TIntVector extends TVector {\n    * @param x factor\n    * @return a new result vector\n    */\n+\n   public abstract TVector plus(TAbstractVector other, int x);\n \n   /**\n@@ -99,28 +109,41 @@ public abstract class TIntVector extends TVector {\n    * @param x factor\n    * @return this\n    */\n+\n   public abstract TIntVector plusBy(TAbstractVector other, int x);\n \n   public abstract TIntVector clone();\n \n-\n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (int) delta);}\n+  public TVector plusBy(int index, double delta) {\n+    return plusBy(index, (int) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((int)x); }\n+  public TVector filter(double x) {\n+    return filter((int) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return times((int)x); }\n+  public TVector times(double x) {\n+    return times((int) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((int) x); }\n+  public TVector timesBy(double x) {\n+    return timesBy((int) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (int) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+    return plus(other, (int) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (int) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+    return plusBy(other, (int) x);\n+  }\n \n   public abstract long sum();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}