{
    "project_name": "ppati000-visualDFA",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     *            performed\n     */\n    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n        if (factory == null) {\n            throw new IllegalArgumentException(\"factory must not be null\");\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/3/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/3/DFAPrecalculator.java\nindex 99d9a31a868..34d6233c3f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/3/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/3/DFAPrecalculator.java\n@@ -8,66 +8,61 @@ import dfa.framework.SimpleBlockGraph;\n import dfa.framework.Worklist;\r\n \r\n /**\r\n- * \r\n  * @author Anika Nietzer Unit, used by the {@code DFAExecution} to precalculate\r\n- *         all analysis steps in a different thread.\r\n- *\r\n+ * all analysis steps in a different thread.\r\n  */\r\n public class DFAPrecalculator implements Runnable {\r\n \r\n-    private DFAExecution<? extends LatticeElement> dfaExecution;\r\n-    private DFAFactory<? extends LatticeElement> factory;\r\n-    private Worklist worklist;\r\n-    private SimpleBlockGraph simpleBlockGraph;\r\n+  private DFAExecution<? extends LatticeElement> dfaExecution;\r\n+  private DFAFactory<? extends LatticeElement> factory;\r\n+  private Worklist worklist;\r\n+  private SimpleBlockGraph simpleBlockGraph;\r\n \r\n-    /**\r\n-     * Creates a new {@code DFAPrecalculator} to calculate all steps at the\r\n-     * beginning of the analysis.\r\n-     * \r\n-     * @param factory\r\n-     *            {@code DFAFactory} that will be used\r\n-     * @param worklist\r\n-     *            {@code Worklist} that will be used for the analysis\r\n-     * @param simpleBlockGraph\r\n-     *            {@code SimpleBlockGraph} on that the analysis will be\r\n-     *            performed\r\n-     */\r\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\r\n-        if (factory == null) {\r\n-            throw new IllegalArgumentException(\"factory must not be null\");\r\n-        }\r\n-        if (worklist == null) {\r\n-            throw new IllegalArgumentException(\"worklist must not be null\");\r\n-        }\r\n-        if (simpleBlockGraph == null) {\r\n-            throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\r\n-        }\r\n-        this.factory = factory;\r\n-        this.worklist = worklist;\r\n-        this.simpleBlockGraph = simpleBlockGraph;\r\n+  /**\r\n+   * Creates a new {@code DFAPrecalculator} to calculate all steps at the\r\n+   * beginning of the analysis.\r\n+   *\r\n+   * @param factory          {@code DFAFactory} that will be used\r\n+   * @param worklist         {@code Worklist} that will be used for the analysis\r\n+   * @param simpleBlockGraph {@code SimpleBlockGraph} on that the analysis will be\r\n+   *                         performed\r\n+   */\r\n+  public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\r\n+    if (factory == null) {\r\n+      throw new IllegalArgumentException(\"factory must not be null\");\r\n     }\r\n-\r\n-    @Override\r\n-    /**\r\n-     * Used during creation of a new thread, that performs the steps of the\r\n-     * analysis.\r\n-     */\r\n-    public void run() {\r\n-        // TODO (@Anika) make use of precalcController\r\n-        DFAPrecalcController precalcController = new DFAPrecalcController();\r\n-        this.dfaExecution = new DFAExecution(factory, worklist, simpleBlockGraph, precalcController);\r\n+    if (worklist == null) {\r\n+      throw new IllegalArgumentException(\"worklist must not be null\");\r\n+    }\r\n+    if (simpleBlockGraph == null) {\r\n+      throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\r\n     }\r\n+    this.factory = factory;\r\n+    this.worklist = worklist;\r\n+    this.simpleBlockGraph = simpleBlockGraph;\r\n+  }\r\n+\r\n+  @Override\r\n+  /**\r\n+   * Used during creation of a new thread, that performs the steps of the\r\n+   * analysis.\r\n+   */\r\n+  public void run() {\r\n+    // TODO (@Anika) make use of precalcController\r\n+    DFAPrecalcController precalcController = new DFAPrecalcController();\r\n+    this.dfaExecution = new DFAExecution(factory, worklist, simpleBlockGraph, precalcController);\r\n+  }\r\n \r\n-    /**\r\n-     * Returns the dfaExecution.\r\n-     * \r\n-     * @return created instance of {@code DFAExecution}\r\n-     */\r\n-    public DFAExecution<? extends LatticeElement> getDFAExecution() {\r\n-        if (this.dfaExecution == null) {\r\n-            throw new IllegalStateException(\"dfaExecution must no be null\");\r\n-        }\r\n-        return this.dfaExecution;\r\n+  /**\r\n+   * Returns the dfaExecution.\r\n+   *\r\n+   * @return created instance of {@code DFAExecution}\r\n+   */\r\n+  public DFAExecution<? extends LatticeElement> getDFAExecution() {\r\n+    if (this.dfaExecution == null) {\r\n+      throw new IllegalStateException(\"dfaExecution must no be null\");\r\n     }\r\n+    return this.dfaExecution;\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/3/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/3/DFAPrecalculator.java\nindex 99d9a31a868..e868a2132e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/3/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/3/DFAPrecalculator.java\n@@ -35,14 +35,17 @@ public class DFAPrecalculator implements Runnable {\n     public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\r\n         if (factory == null) {\r\n             throw new IllegalArgumentException(\"factory must not be null\");\r\n-        }\r\n-        if (worklist == null) {\r\n+        }\n+\n+if (worklist == null) {\r\n             throw new IllegalArgumentException(\"worklist must not be null\");\r\n-        }\r\n-        if (simpleBlockGraph == null) {\r\n+        }\n+\n+if (simpleBlockGraph == null) {\r\n             throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\r\n-        }\r\n-        this.factory = factory;\r\n+        }\n+\n+this.factory = factory;\r\n         this.worklist = worklist;\r\n         this.simpleBlockGraph = simpleBlockGraph;\r\n     }\r\n@@ -66,8 +69,9 @@ public class DFAPrecalculator implements Runnable {\n     public DFAExecution<? extends LatticeElement> getDFAExecution() {\r\n         if (this.dfaExecution == null) {\r\n             throw new IllegalStateException(\"dfaExecution must no be null\");\r\n-        }\r\n-        return this.dfaExecution;\r\n+        }\n+\n+return this.dfaExecution;\r\n     }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/3/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/3/DFAPrecalculator.java\nindex 99d9a31a868..48a0d160161 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/3/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/3/DFAPrecalculator.java\n@@ -1,10 +1,10 @@\n-package controller;\r\n-\r\n-import dfa.framework.DFAExecution;\r\n-import dfa.framework.DFAFactory;\r\n-import dfa.framework.DFAPrecalcController;\r\n-import dfa.framework.LatticeElement;\r\n-import dfa.framework.SimpleBlockGraph;\r\n+package controller;\n+\n+import dfa.framework.DFAExecution;\n+import dfa.framework.DFAFactory;\n+import dfa.framework.DFAPrecalcController;\n+import dfa.framework.LatticeElement;\n+import dfa.framework.SimpleBlockGraph;\n import dfa.framework.Worklist;\r\n \r\n /**\r\n@@ -12,12 +12,17 @@ import dfa.framework.Worklist;\n  * @author Anika Nietzer Unit, used by the {@code DFAExecution} to precalculate\r\n  *         all analysis steps in a different thread.\r\n  *\r\n- */\r\n-public class DFAPrecalculator implements Runnable {\r\n-\r\n-    private DFAExecution<? extends LatticeElement> dfaExecution;\r\n-    private DFAFactory<? extends LatticeElement> factory;\r\n-    private Worklist worklist;\r\n+ */\n+\n+\n+public class DFAPrecalculator implements Runnable {\n+\n+    private DFAExecution<? extends LatticeElement> dfaExecution;\n+\n+    private DFAFactory<? extends LatticeElement> factory;\n+\n+    private Worklist worklist;\n+\n     private SimpleBlockGraph simpleBlockGraph;\r\n \r\n     /**\r\n@@ -31,43 +36,51 @@ public class DFAPrecalculator implements Runnable {\n      * @param simpleBlockGraph\r\n      *            {@code SimpleBlockGraph} on that the analysis will be\r\n      *            performed\r\n-     */\r\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\r\n-        if (factory == null) {\r\n-            throw new IllegalArgumentException(\"factory must not be null\");\r\n-        }\r\n-        if (worklist == null) {\r\n-            throw new IllegalArgumentException(\"worklist must not be null\");\r\n-        }\r\n-        if (simpleBlockGraph == null) {\r\n-            throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\r\n-        }\r\n-        this.factory = factory;\r\n-        this.worklist = worklist;\r\n-        this.simpleBlockGraph = simpleBlockGraph;\r\n-    }\r\n-\r\n+     */\n+\n+\n+    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"factory must not be null\");\n+        }\n+\n+        if (worklist == null) {\n+            throw new IllegalArgumentException(\"worklist must not be null\");\n+        }\n+\n+        if (simpleBlockGraph == null) {\n+            throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n+        }\n+\n+        this.factory = factory;\n+        this.worklist = worklist;\n+        this.simpleBlockGraph = simpleBlockGraph;\n+    }\n+\n     @Override\r\n     /**\r\n      * Used during creation of a new thread, that performs the steps of the\r\n      * analysis.\r\n-     */\r\n+     */\n     public void run() {\r\n-        // TODO (@Anika) make use of precalcController\r\n-        DFAPrecalcController precalcController = new DFAPrecalcController();\r\n-        this.dfaExecution = new DFAExecution(factory, worklist, simpleBlockGraph, precalcController);\r\n+        // TODO (@Anika) make use of precalcController\n+        DFAPrecalcController precalcController = new DFAPrecalcController();\n+        this.dfaExecution = new DFAExecution(factory, worklist, simpleBlockGraph, precalcController);\n     }\r\n \r\n     /**\r\n      * Returns the dfaExecution.\r\n      * \r\n      * @return created instance of {@code DFAExecution}\r\n-     */\r\n-    public DFAExecution<? extends LatticeElement> getDFAExecution() {\r\n-        if (this.dfaExecution == null) {\r\n-            throw new IllegalStateException(\"dfaExecution must no be null\");\r\n-        }\r\n-        return this.dfaExecution;\r\n-    }\r\n-\r\n-}\r\n+     */\n+\n+\n+    public DFAExecution<? extends LatticeElement> getDFAExecution() {\n+        if (this.dfaExecution == null) {\n+            throw new IllegalStateException(\"dfaExecution must no be null\");\n+        }\n+\n+        return this.dfaExecution;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}