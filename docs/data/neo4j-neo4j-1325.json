{
    "project_name": "neo4j-neo4j",
    "error_id": "1325",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1325/StoreChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1325/StoreChannel.java\nindex 045139213e7..2e24ffa144b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1325/StoreChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1325/StoreChannel.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.fs;\n \n import java.io.Flushable;\n@@ -33,8 +34,9 @@ public interface StoreChannel extends Flushable, SeekableByteChannel, GatheringB\n {\n     /**\n      * Attempts to acquire an exclusive lock on this channel's file.\n+     *\n      * @return A lock object representing the newly-acquired lock, or null if the lock could not be acquired.\n-     * @throws IOException If an I/O error occurs.\n+     * @throws IOException                              If an I/O error occurs.\n      * @throws java.nio.channels.ClosedChannelException if the channel is closed.\n      */\n     FileLock tryLock() throws IOException;\n@@ -43,46 +45,48 @@ public interface StoreChannel extends Flushable, SeekableByteChannel, GatheringB\n      * Same as #write(), except this method will write the full contents of the buffer in chunks if the OS fails to\n      * write it all at once.\n      */\n-    void writeAll( ByteBuffer src, long position ) throws IOException;\n+    void writeAll(ByteBuffer src, long position) throws IOException;\n \n     /**\n      * Same as #write(), except this method will write the full contents of the buffer in chunks if the OS fails to\n      * write it all at once.\n      */\n-    void writeAll( ByteBuffer src ) throws IOException;\n+    void writeAll(ByteBuffer src) throws IOException;\n \n     /**\n      * @see java.nio.channels.FileChannel#read(java.nio.ByteBuffer, long)\n      */\n-    int read( ByteBuffer dst, long position ) throws IOException;\n+    int read(ByteBuffer dst, long position) throws IOException;\n \n     /**\n      * Try to Read a sequence of bytes from channel into the given buffer, till the buffer will be full.\n      * In case if end of channel will be reached during reading {@link IllegalStateException} will be thrown.\n      *\n      * @param dst destination buffer.\n-     * @throws IOException if an I/O exception occurs.\n+     * @throws IOException           if an I/O exception occurs.\n      * @throws IllegalStateException if end of stream reached during reading.\n      * @see ReadableByteChannel#read(ByteBuffer)\n      */\n-    void readAll( ByteBuffer dst ) throws IOException;\n+    void readAll(ByteBuffer dst) throws IOException;\n \n-    void force( boolean metaData ) throws IOException;\n+    void force(boolean metaData) throws IOException;\n \n     @Override\n-    StoreChannel position( long newPosition ) throws IOException;\n+    StoreChannel position(long newPosition) throws IOException;\n \n     @Override\n-    StoreChannel truncate( long size ) throws IOException;\n+    StoreChannel truncate(long size) throws IOException;\n \n     /**\n      * Get the OS file descriptor for this channel.\n+     *\n      * @return the file descriptor.\n      */\n     int getFileDescriptor();\n \n     /**\n      * Returns {@code true} if {@link #getPositionLock} returns a valid position lock object.\n+     *\n      * @return {@code true} if this channel has a valid position lock.\n      */\n     boolean hasPositionLock();\n@@ -92,6 +96,7 @@ public interface StoreChannel extends Flushable, SeekableByteChannel, GatheringB\n      * This method only returns something meaningful if {@link #hasPositionLock()} returns {@code true}.\n      * The position lock object works by synchronizing on the object.\n      * The file position is guaranteed to not be concurrently modified by other threads in the critical section.\n+     *\n      * @return The position lock object, if any.\n      */\n     Object getPositionLock();\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}