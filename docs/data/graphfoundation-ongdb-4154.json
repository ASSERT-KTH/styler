{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4154",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4154/StringSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4154/StringSchemaKey.java\nindex fcf26878792..c7031bb0ba0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4154/StringSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4154/StringSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -34,184 +35,183 @@ import static java.lang.String.format;\n  */\n class StringSchemaKey extends NativeSchemaKey<StringSchemaKey>\n {\n-    static final int ENTITY_ID_SIZE = Long.BYTES;\n-\n-    private boolean ignoreLength;\n-\n-    // UTF-8 bytes, grows on demand. Actual length is dictated by bytesLength field.\n-    byte[] bytes;\n-    int bytesLength;\n-    // Set to true when the internal byte[] have been handed out to an UTF8Value, so that the next call to setBytesLength\n-    // will be forced to allocate a new array. The byte[] isn't cleared with null since this key still logically contains those bytes.\n-    private boolean bytesDereferenced;\n-\n-    int size()\n-    {\n-        return ENTITY_ID_SIZE + bytesLength;\n-    }\n-\n-    @Override\n-    protected Value assertCorrectType( Value value )\n-    {\n-        if ( !Values.isTextValue( value ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support strings, tried to create key from \" + value );\n-        }\n-        return value;\n-    }\n-\n-    @Override\n-    void initialize( long entityId )\n-    {\n-        super.initialize( entityId );\n-        ignoreLength = false;\n-    }\n-\n-    @Override\n-    public Value asValue()\n-    {\n-        if ( bytes == null )\n-        {\n-            return Values.NO_VALUE;\n-        }\n-\n-        // Dereference our bytes so that we won't overwrite it on next read\n-        bytesDereferenced = true;\n-        return Values.utf8Value( bytes, 0, bytesLength );\n-    }\n-\n-    @Override\n-    void initValueAsLowest()\n-    {\n-        bytes = null;\n-    }\n-\n-    @Override\n-    void initValueAsHighest()\n-    {\n-        bytes = null;\n-    }\n-\n-    void initAsPrefixLow( String prefix )\n-    {\n-        writeString( prefix );\n-        initialize( Long.MIN_VALUE );\n-        // Don't set ignoreLength = true here since the \"low\" a.k.a. left side of the range should care about length.\n-        // This will make the prefix lower than those that matches the prefix (their length is >= that of the prefix)\n-    }\n-\n-    void initAsPrefixHigh( String prefix )\n-    {\n-        writeString( prefix );\n-        initialize( Long.MAX_VALUE );\n-        ignoreLength = true;\n-    }\n-\n-    private boolean isHighest()\n-    {\n-        return getCompareId() && getEntityId() == Long.MAX_VALUE && bytes == null;\n-    }\n-\n-    /**\n-     * Compares the value of this key to that of another key.\n-     * This method is expected to be called in scenarios where inconsistent reads may happen (and later retried).\n-     *\n-     * @param other the {@link StringSchemaKey} to compare to.\n-     * @return comparison against the {@code other} {@link StringSchemaKey}.\n-     */\n-    @Override\n-    int compareValueTo( StringSchemaKey other )\n-    {\n-        if ( bytes != other.bytes )\n-        {\n-            if ( bytes == null )\n-            {\n-                return isHighest() ? 1 : -1;\n-            }\n-            if ( other.bytes == null )\n-            {\n-                return other.isHighest() ? -1 : 1;\n-            }\n-        }\n-        else\n-        {\n-            return 0;\n-        }\n-\n-        return unsignedByteArrayCompare( bytes, bytesLength, other.bytes, other.bytesLength, ignoreLength | other.ignoreLength );\n-    }\n-\n-    private static int unsignedByteArrayCompare( byte[] a, int aLength, byte[] b, int bLength, boolean ignoreLength )\n-    {\n-        assert a != null && b != null : \"Null arrays not supported.\";\n-\n-        if ( a == b && aLength == bLength )\n-        {\n-            return 0;\n-        }\n-\n-        int length = Math.min( aLength, bLength );\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            int compare = Short.compare( (short) (a[i] & 0xFF), (short) (b[i] & 0xFF) );\n-            if ( compare != 0 )\n-            {\n-                return compare;\n-            }\n-        }\n-\n-        return ignoreLength ? 0 : Integer.compare( aLength, bLength );\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return format( \"value=%s,entityId=%d,bytes=%s\",\n-                asValue(),\n-                getEntityId(),\n-                bytes == null ? \"null\" : Arrays.toString( Arrays.copyOf( bytes, bytesLength ) ) );\n-    }\n-\n-    @Override\n-    public void writeString( String value )\n-    {\n-        bytes = UTF8.encode( value );\n-        bytesLength = bytes.length;\n-        bytesDereferenced = false;\n-    }\n-\n-    @Override\n-    public void writeString( char value )\n-    {\n-        writeString( String.valueOf( value ) );\n-    }\n-\n-    void copyFrom( StringSchemaKey key )\n-    {\n-        setBytesLength( key.bytesLength );\n-        System.arraycopy( key.bytes, 0, bytes, 0, key.bytesLength );\n-        setEntityId( key.getEntityId() );\n-        setCompareId( key.getCompareId() );\n-    }\n-\n-    /**\n-     * Ensures that the internal byte[] is long enough, or longer than the given {@code length}.\n-     * Also sets the internal {@code bytesLength} field to the given {@code length} so that interactions with the byte[]\n-     * from this point on will use that for length, instead of the length of the byte[].\n-     *\n-     * @param length minimum length that the internal byte[] needs to be.\n-     */\n-    void setBytesLength( int length )\n-    {\n-        if ( bytesDereferenced || bytes == null || bytes.length < length )\n-        {\n-            bytesDereferenced = false;\n-\n-            // allocate a bit more than required so that there's a higher chance that this byte[] instance\n-            // can be used for more keys than just this one\n-            bytes = new byte[length + length / 2];\n-        }\n-        bytesLength = length;\n-    }\n+  static final int ENTITY_ID_SIZE = Long.BYTES;\n+\n+  private boolean ignoreLength;\n+\n+  // UTF-8 bytes, grows on demand. Actual length is dictated by bytesLength field.\n+  byte[] bytes;\n+  int bytesLength;\n+  // Set to true when the internal byte[] have been handed out to an UTF8Value, so that the next call to setBytesLength\n+  // will be forced to allocate a new array. The byte[] isn't cleared with null since this key still logically contains those bytes.\n+  private boolean bytesDereferenced;\n+\n+  int size()\n+  {\n+    return ENTITY_ID_SIZE + bytesLength;\n+  }\n+\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!Values.isTextValue(value))\n+    {\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support strings, tried to create key from \" + value);\n+    }\n+    return value;\n+  }\n+\n+  @Override\n+  void initialize(long entityId)\n+  {\n+    super.initialize(entityId);\n+    ignoreLength = false;\n+  }\n+\n+  @Override\n+  public Value asValue()\n+  {\n+    if (bytes == null)\n+    {\n+      return Values.NO_VALUE;\n+    }\n+\n+    // Dereference our bytes so that we won't overwrite it on next read\n+    bytesDereferenced = true;\n+    return Values.utf8Value(bytes, 0, bytesLength);\n+  }\n+\n+  @Override\n+  void initValueAsLowest()\n+  {\n+    bytes = null;\n+  }\n+\n+  @Override\n+  void initValueAsHighest()\n+  {\n+    bytes = null;\n+  }\n+\n+  void initAsPrefixLow(String prefix)\n+  {\n+    writeString(prefix);\n+    initialize(Long.MIN_VALUE);\n+    // Don't set ignoreLength = true here since the \"low\" a.k.a. left side of the range should care about length.\n+    // This will make the prefix lower than those that matches the prefix (their length is >= that of the prefix)\n+  }\n+\n+  void initAsPrefixHigh(String prefix)\n+  {\n+    writeString(prefix);\n+    initialize(Long.MAX_VALUE);\n+    ignoreLength = true;\n+  }\n+\n+  private boolean isHighest()\n+  {\n+    return getCompareId() && getEntityId() == Long.MAX_VALUE && bytes == null;\n+  }\n+\n+  /**\n+   * Compares the value of this key to that of another key.\n+   * This method is expected to be called in scenarios where inconsistent reads may happen (and later retried).\n+   *\n+   * @param other the {@link StringSchemaKey} to compare to.\n+   * @return comparison against the {@code other} {@link StringSchemaKey}.\n+   */\n+  @Override\n+  int compareValueTo(StringSchemaKey other)\n+  {\n+    if (bytes != other.bytes)\n+    {\n+      if (bytes == null)\n+      {\n+        return isHighest() ? 1 : -1;\n+      }\n+      if (other.bytes == null)\n+      {\n+        return other.isHighest() ? -1 : 1;\n+      }\n+    } else\n+    {\n+      return 0;\n+    }\n+\n+    return unsignedByteArrayCompare(bytes, bytesLength, other.bytes, other.bytesLength, ignoreLength | other.ignoreLength);\n+  }\n+\n+  private static int unsignedByteArrayCompare(byte[] a, int aLength, byte[] b, int bLength, boolean ignoreLength)\n+  {\n+    assert a != null && b != null : \"Null arrays not supported.\";\n+\n+    if (a == b && aLength == bLength)\n+    {\n+      return 0;\n+    }\n+\n+    int length = Math.min(aLength, bLength);\n+    for (int i = 0; i < length; i++)\n+    {\n+      int compare = Short.compare((short) (a[i] & 0xFF), (short) (b[i] & 0xFF));\n+      if (compare != 0)\n+      {\n+        return compare;\n+      }\n+    }\n+\n+    return ignoreLength ? 0 : Integer.compare(aLength, bLength);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"value=%s,entityId=%d,bytes=%s\",\n+        asValue(),\n+        getEntityId(),\n+        bytes == null ? \"null\" : Arrays.toString(Arrays.copyOf(bytes, bytesLength)));\n+  }\n+\n+  @Override\n+  public void writeString(String value)\n+  {\n+    bytes = UTF8.encode(value);\n+    bytesLength = bytes.length;\n+    bytesDereferenced = false;\n+  }\n+\n+  @Override\n+  public void writeString(char value)\n+  {\n+    writeString(String.valueOf(value));\n+  }\n+\n+  void copyFrom(StringSchemaKey key)\n+  {\n+    setBytesLength(key.bytesLength);\n+    System.arraycopy(key.bytes, 0, bytes, 0, key.bytesLength);\n+    setEntityId(key.getEntityId());\n+    setCompareId(key.getCompareId());\n+  }\n+\n+  /**\n+   * Ensures that the internal byte[] is long enough, or longer than the given {@code length}.\n+   * Also sets the internal {@code bytesLength} field to the given {@code length} so that interactions with the byte[]\n+   * from this point on will use that for length, instead of the length of the byte[].\n+   *\n+   * @param length minimum length that the internal byte[] needs to be.\n+   */\n+  void setBytesLength(int length)\n+  {\n+    if (bytesDereferenced || bytes == null || bytes.length < length)\n+    {\n+      bytesDereferenced = false;\n+\n+      // allocate a bit more than required so that there's a higher chance that this byte[] instance\n+      // can be used for more keys than just this one\n+      bytes = new byte[length + length / 2];\n+    }\n+    bytesLength = length;\n+  }\n }\n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4154/StringSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4154/StringSchemaKey.java\nindex fcf26878792..c687cc8905f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4154/StringSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4154/StringSchemaKey.java\n@@ -55,10 +55,10 @@ class StringSchemaKey extends NativeSchemaKey<StringSchemaKey>\n     {\n         if ( !Values.isTextValue( value ) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support strings, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support strings, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n \n     @Override\n@@ -129,7 +129,8 @@ class StringSchemaKey extends NativeSchemaKey<StringSchemaKey>\n             {\n                 return isHighest() ? 1 : -1;\n             }\n-            if ( other.bytes == null )\n+\n+if ( other.bytes == null )\n             {\n                 return other.isHighest() ? -1 : 1;\n             }\n@@ -169,8 +170,7 @@ class StringSchemaKey extends NativeSchemaKey<StringSchemaKey>\n     {\n         return format( \"value=%s,entityId=%d,bytes=%s\",\n                 asValue(),\n-                getEntityId(),\n-                bytes == null ? \"null\" : Arrays.toString( Arrays.copyOf( bytes, bytesLength ) ) );\n+                getEntityId(), bytes == null ? \"null\" : Arrays.toString( Arrays.copyOf( bytes, bytesLength ) ) );\n     }\n \n     @Override\n@@ -212,6 +212,7 @@ class StringSchemaKey extends NativeSchemaKey<StringSchemaKey>\n             // can be used for more keys than just this one\n             bytes = new byte[length + length / 2];\n         }\n-        bytesLength = length;\n+\n+bytesLength = length;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}