{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1409",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1409/ReadAheadChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1409/ReadAheadChannel.java\nindex 610b92b0e36..4c6712f8ed0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1409/ReadAheadChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1409/ReadAheadChannel.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.IOException;\n@@ -34,182 +35,183 @@ import static org.neo4j.io.ByteUnit.kibiBytes;\n /**\n  * A buffering implementation of {@link ReadableClosableChannel}. This class also allows subclasses to read content\n  * spanning more than one file, by properly implementing {@link #next(StoreChannel)}.\n+ *\n  * @param <T> The type of StoreChannel wrapped\n  */\n public class ReadAheadChannel<T extends StoreChannel> implements ReadableClosableChannel, PositionableChannel\n {\n-    public static final int DEFAULT_READ_AHEAD_SIZE = toIntExact( kibiBytes( 4 ) );\n-\n-    protected T channel;\n-    private final ByteBuffer aheadBuffer;\n-    private final int readAheadSize;\n-\n-    public ReadAheadChannel( T channel )\n-    {\n-        this( channel, DEFAULT_READ_AHEAD_SIZE );\n-    }\n-\n-    public ReadAheadChannel( T channel, int readAheadSize )\n-    {\n-        this.aheadBuffer = ByteBuffer.allocate( readAheadSize );\n-        this.aheadBuffer.position( aheadBuffer.capacity() );\n-        this.channel = channel;\n-        this.readAheadSize = readAheadSize;\n-    }\n-\n-    /**\n-     * This is the position within the buffered stream (and not the\n-     * underlying channel, which will generally be further ahead).\n-     *\n-     * @return The position within the buffered stream.\n-     * @throws IOException on I/O error.\n-     */\n-    public long position() throws IOException\n-    {\n-        return channel.position() - aheadBuffer.remaining();\n+  public static final int DEFAULT_READ_AHEAD_SIZE = toIntExact(kibiBytes(4));\n+\n+  protected T channel;\n+  private final ByteBuffer aheadBuffer;\n+  private final int readAheadSize;\n+\n+  public ReadAheadChannel(T channel)\n+  {\n+    this(channel, DEFAULT_READ_AHEAD_SIZE);\n+  }\n+\n+  public ReadAheadChannel(T channel, int readAheadSize)\n+  {\n+    this.aheadBuffer = ByteBuffer.allocate(readAheadSize);\n+    this.aheadBuffer.position(aheadBuffer.capacity());\n+    this.channel = channel;\n+    this.readAheadSize = readAheadSize;\n+  }\n+\n+  /**\n+   * This is the position within the buffered stream (and not the\n+   * underlying channel, which will generally be further ahead).\n+   *\n+   * @return The position within the buffered stream.\n+   * @throws IOException on I/O error.\n+   */\n+  public long position() throws IOException\n+  {\n+    return channel.position() - aheadBuffer.remaining();\n+  }\n+\n+  @Override\n+  public byte get() throws IOException\n+  {\n+    ensureDataExists(1);\n+    return aheadBuffer.get();\n+  }\n+\n+  @Override\n+  public short getShort() throws IOException\n+  {\n+    ensureDataExists(2);\n+    return aheadBuffer.getShort();\n+  }\n+\n+  @Override\n+  public int getInt() throws IOException\n+  {\n+    ensureDataExists(4);\n+    return aheadBuffer.getInt();\n+  }\n+\n+  @Override\n+  public long getLong() throws IOException\n+  {\n+    ensureDataExists(8);\n+    return aheadBuffer.getLong();\n+  }\n+\n+  @Override\n+  public float getFloat() throws IOException\n+  {\n+    ensureDataExists(4);\n+    return aheadBuffer.getFloat();\n+  }\n+\n+  @Override\n+  public double getDouble() throws IOException\n+  {\n+    ensureDataExists(8);\n+    return aheadBuffer.getDouble();\n+  }\n+\n+  @Override\n+  public void get(byte[] bytes, int length) throws IOException\n+  {\n+    assert length <= bytes.length;\n+\n+    int bytesGotten = 0;\n+    while (bytesGotten < length)\n+    {   // get max 1024 bytes at the time, so that ensureDataExists functions as it should\n+      int chunkSize = min(readAheadSize >> 2, length - bytesGotten);\n+      ensureDataExists(chunkSize);\n+      aheadBuffer.get(bytes, bytesGotten, chunkSize);\n+      bytesGotten += chunkSize;\n     }\n-\n-    @Override\n-    public byte get() throws IOException\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    channel.close();\n+  }\n+\n+  private void ensureDataExists(int requestedNumberOfBytes) throws IOException\n+  {\n+    int remaining = aheadBuffer.remaining();\n+    if (remaining >= requestedNumberOfBytes)\n     {\n-        ensureDataExists( 1 );\n-        return aheadBuffer.get();\n+      return;\n     }\n \n-    @Override\n-    public short getShort() throws IOException\n-    {\n-        ensureDataExists( 2 );\n-        return aheadBuffer.getShort();\n-    }\n-\n-    @Override\n-    public int getInt() throws IOException\n-    {\n-        ensureDataExists( 4 );\n-        return aheadBuffer.getInt();\n-    }\n-\n-    @Override\n-    public long getLong() throws IOException\n-    {\n-        ensureDataExists( 8 );\n-        return aheadBuffer.getLong();\n-    }\n-\n-    @Override\n-    public float getFloat() throws IOException\n-    {\n-        ensureDataExists( 4 );\n-        return aheadBuffer.getFloat();\n-    }\n-\n-    @Override\n-    public double getDouble() throws IOException\n-    {\n-        ensureDataExists( 8 );\n-        return aheadBuffer.getDouble();\n-    }\n-\n-    @Override\n-    public void get( byte[] bytes, int length ) throws IOException\n-    {\n-        assert length <= bytes.length;\n-\n-        int bytesGotten = 0;\n-        while ( bytesGotten < length )\n-        {   // get max 1024 bytes at the time, so that ensureDataExists functions as it should\n-            int chunkSize = min( readAheadSize >> 2, length - bytesGotten );\n-            ensureDataExists( chunkSize );\n-            aheadBuffer.get( bytes, bytesGotten, chunkSize );\n-            bytesGotten += chunkSize;\n+    // We ran out, try to read some more\n+    // start by copying the remaining bytes to the beginning\n+    compactToBeginningOfBuffer(remaining);\n+\n+    while (aheadBuffer.position() < aheadBuffer.capacity())\n+    {   // read from the current channel to try and fill the buffer\n+      int read = channel.read(aheadBuffer);\n+      if (read == -1)\n+      {\n+        // current channel ran out...\n+        if (aheadBuffer.position() >= requestedNumberOfBytes)\n+        {   // ...although we have satisfied the request\n+          break;\n         }\n-    }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        channel.close();\n-    }\n-\n-    private void ensureDataExists( int requestedNumberOfBytes ) throws IOException\n-    {\n-        int remaining = aheadBuffer.remaining();\n-        if ( remaining >= requestedNumberOfBytes )\n+        // ... we need to read even further, into the next version\n+        T nextChannel = next(channel);\n+        assert nextChannel != null;\n+        if (nextChannel == channel)\n         {\n-            return;\n-        }\n-\n-        // We ran out, try to read some more\n-        // start by copying the remaining bytes to the beginning\n-        compactToBeginningOfBuffer( remaining );\n-\n-        while ( aheadBuffer.position() < aheadBuffer.capacity() )\n-        {   // read from the current channel to try and fill the buffer\n-            int read = channel.read( aheadBuffer );\n-            if ( read == -1 )\n-            {\n-                // current channel ran out...\n-                if ( aheadBuffer.position() >= requestedNumberOfBytes )\n-                {   // ...although we have satisfied the request\n-                    break;\n-                }\n-\n-                // ... we need to read even further, into the next version\n-                T nextChannel = next( channel );\n-                assert nextChannel != null;\n-                if ( nextChannel == channel )\n-                {\n-                    // no more channels so we cannot satisfy the requested number of bytes\n-                    aheadBuffer.flip();\n-                    throw ReadPastEndException.INSTANCE;\n-                }\n-                channel = nextChannel;\n-            }\n+          // no more channels so we cannot satisfy the requested number of bytes\n+          aheadBuffer.flip();\n+          throw ReadPastEndException.INSTANCE;\n         }\n-        // prepare for reading\n-        aheadBuffer.flip();\n+        channel = nextChannel;\n+      }\n     }\n-\n-    /**\n-     * Hook for allowing subclasses to read content spanning a sequence of files. This method is called when the current\n-     * file channel is exhausted and a new channel is required for reading. The default implementation returns the\n-     * argument, which is the condition for indicating no more content, resulting in a {@link ReadPastEndException} being\n-     * thrown.\n-     * @param channel The channel that has just been exhausted.\n-     * @throws IOException on I/O error.\n-     */\n-    protected T next( T channel ) throws IOException\n+    // prepare for reading\n+    aheadBuffer.flip();\n+  }\n+\n+  /**\n+   * Hook for allowing subclasses to read content spanning a sequence of files. This method is called when the current\n+   * file channel is exhausted and a new channel is required for reading. The default implementation returns the\n+   * argument, which is the condition for indicating no more content, resulting in a {@link ReadPastEndException} being\n+   * thrown.\n+   *\n+   * @param channel The channel that has just been exhausted.\n+   * @throws IOException on I/O error.\n+   */\n+  protected T next(T channel) throws IOException\n+  {\n+    return channel;\n+  }\n+\n+  /*\n+   * Moves bytes between aheadBuffer.position() and aheadBuffer.capacity() to the beginning of aheadBuffer. At the\n+   * end of this call the aheadBuffer is positioned in end of that moved content.\n+   * This is to be used in preparation of reading more content in from the channel without having exhausted all\n+   * previous bytes.\n+   */\n+  private void compactToBeginningOfBuffer(int remaining)\n+  {\n+    arraycopy(aheadBuffer.array(), aheadBuffer.position(), aheadBuffer.array(), 0, remaining);\n+    aheadBuffer.clear();\n+    aheadBuffer.position(remaining);\n+  }\n+\n+  @Override\n+  public void setCurrentPosition(long byteOffset) throws IOException\n+  {\n+    long positionRelativeToAheadBuffer = byteOffset - (channel.position() - aheadBuffer.limit());\n+    if (positionRelativeToAheadBuffer >= aheadBuffer.limit() || positionRelativeToAheadBuffer < 0)\n     {\n-        return channel;\n-    }\n-\n-    /*\n-     * Moves bytes between aheadBuffer.position() and aheadBuffer.capacity() to the beginning of aheadBuffer. At the\n-     * end of this call the aheadBuffer is positioned in end of that moved content.\n-     * This is to be used in preparation of reading more content in from the channel without having exhausted all\n-     * previous bytes.\n-     */\n-    private void compactToBeginningOfBuffer( int remaining )\n+      // Beyond what we currently have buffered\n+      aheadBuffer.position(aheadBuffer.limit());\n+      channel.position(byteOffset);\n+    } else\n     {\n-        arraycopy( aheadBuffer.array(), aheadBuffer.position(), aheadBuffer.array(), 0, remaining );\n-        aheadBuffer.clear();\n-        aheadBuffer.position( remaining );\n-    }\n-\n-    @Override\n-    public void setCurrentPosition( long byteOffset ) throws IOException\n-    {\n-        long positionRelativeToAheadBuffer = byteOffset - (channel.position() - aheadBuffer.limit());\n-        if ( positionRelativeToAheadBuffer >= aheadBuffer.limit() || positionRelativeToAheadBuffer < 0 )\n-        {\n-            // Beyond what we currently have buffered\n-            aheadBuffer.position( aheadBuffer.limit() );\n-            channel.position( byteOffset );\n-        }\n-        else\n-        {\n-            aheadBuffer.position( toIntExact( positionRelativeToAheadBuffer ) );\n-        }\n+      aheadBuffer.position(toIntExact(positionRelativeToAheadBuffer));\n     }\n+  }\n }\n",
            "diff_size": 256
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1409/ReadAheadChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1409/ReadAheadChannel.java\nindex 610b92b0e36..2a285abff79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1409/ReadAheadChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1409/ReadAheadChannel.java\n@@ -118,7 +118,8 @@ public class ReadAheadChannel<T extends StoreChannel> implements ReadableClosabl\n \n         int bytesGotten = 0;\n         while ( bytesGotten < length )\n-        {   // get max 1024 bytes at the time, so that ensureDataExists functions as it should\n+        {\n+    // get max 1024 bytes at the time, so that ensureDataExists functions as it should\n             int chunkSize = min( readAheadSize >> 2, length - bytesGotten );\n             ensureDataExists( chunkSize );\n             aheadBuffer.get( bytes, bytesGotten, chunkSize );\n@@ -145,13 +146,15 @@ public class ReadAheadChannel<T extends StoreChannel> implements ReadableClosabl\n         compactToBeginningOfBuffer( remaining );\n \n         while ( aheadBuffer.position() < aheadBuffer.capacity() )\n-        {   // read from the current channel to try and fill the buffer\n+        {\n+    // read from the current channel to try and fill the buffer\n             int read = channel.read( aheadBuffer );\n             if ( read == -1 )\n             {\n                 // current channel ran out...\n                 if ( aheadBuffer.position() >= requestedNumberOfBytes )\n-                {   // ...although we have satisfied the request\n+                {\n+    // ...although we have satisfied the request\n                     break;\n                 }\n \n@@ -164,7 +167,8 @@ public class ReadAheadChannel<T extends StoreChannel> implements ReadableClosabl\n                     aheadBuffer.flip();\n                     throw ReadPastEndException.INSTANCE;\n                 }\n-                channel = nextChannel;\n+\n+channel = nextChannel;\n             }\n         }\n         // prepare for reading\n@@ -200,7 +204,7 @@ public class ReadAheadChannel<T extends StoreChannel> implements ReadableClosabl\n     @Override\n     public void setCurrentPosition( long byteOffset ) throws IOException\n     {\n-        long positionRelativeToAheadBuffer = byteOffset - (channel.position() - aheadBuffer.limit());\n+        long positionRelativeToAheadBuffer = byteOffset - (channel.position() - aheadBuffer.limit() );\n         if ( positionRelativeToAheadBuffer >= aheadBuffer.limit() || positionRelativeToAheadBuffer < 0 )\n         {\n             // Beyond what we currently have buffered\n@@ -212,4 +216,4 @@ public class ReadAheadChannel<T extends StoreChannel> implements ReadableClosabl\n             aheadBuffer.position( toIntExact( positionRelativeToAheadBuffer ) );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}