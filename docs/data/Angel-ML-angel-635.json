{
    "project_name": "Angel-ML-angel",
    "error_id": "635",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/635/ServerLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/635/ServerLongIntRow.java\nindex 8fe6b12ab2b..0afece1c459 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/635/ServerLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/635/ServerLongIntRow.java\n@@ -46,7 +46,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param innerRow   the inner row\n    */\n   public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-    IntVector innerRow) {\n+                          IntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n@@ -181,7 +181,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  @Override\n+  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -192,7 +193,7 @@ public class ServerLongIntRow extends ServerIntRow {\n \n         default: {\n           throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -229,7 +230,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public int size() {\n+  @Override\n+  public int size() {\n     if (useIntKey) {\n       return ((IntIntVector) row).size();\n     } else {\n@@ -260,7 +262,7 @@ public class ServerLongIntRow extends ServerIntRow {\n           }\n         } else {\n           ObjectIterator<Long2IntMap.Entry> iter =\n-            ((LongIntVector) row).getStorage().entryIterator();\n+              ((LongIntVector) row).getStorage().entryIterator();\n           Long2IntMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -273,7 +275,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void serializeRow(ByteBuf buf) {\n+  @Override\n+  protected void serializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         int[] values = getValues();\n@@ -300,7 +303,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void deserializeRow(ByteBuf buf) {\n+  @Override\n+  protected void deserializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       IntIntVector intIntRow = (IntIntVector) row;\n       if (useDenseSerialize()) {\n@@ -320,7 +324,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected int getRowSpace() {\n+  @Override\n+  protected int getRowSpace() {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         return size * 4;\n@@ -332,15 +337,16 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public ServerRow clone() {\n+  @Override\n+  public ServerRow clone() {\n     startRead();\n     try {\n       if (useIntKey) {\n         return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((IntIntVector) row).clone());\n+            ((IntIntVector) row).clone());\n       } else {\n         return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((LongIntVector) row).clone());\n+            ((LongIntVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -381,7 +387,7 @@ public class ServerLongIntRow extends ServerIntRow {\n \n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-    throws IOException {\n+      throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -405,11 +411,13 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void setSplit(Vector row) {\n+  @Override\n+  public void setSplit(Vector row) {\n     super.setSplit(row);\n   }\n \n-  @Override public void elemUpdate(IntElemUpdateFunc func) {\n+  @Override\n+  public void elemUpdate(IntElemUpdateFunc func) {\n     if (isDense()) {\n       int[] values = getValues();\n       for (int i = 0; i < values.length; i++) {\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "342",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/635/ServerLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/635/ServerLongIntRow.java\nindex 8fe6b12ab2b..d565dbadb6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/635/ServerLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/635/ServerLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.*;\n@@ -45,9 +44,8 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow   the inner row\n    */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-    IntVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n+  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntVector innerRow) {\n+  super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n   /**\n@@ -181,7 +179,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  @Override\n+public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -189,10 +188,8 @@ public class ServerLongIntRow extends ServerIntRow {\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseSparse(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -229,7 +226,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public int size() {\n+  @Override\n+public int size() {\n     if (useIntKey) {\n       return ((IntIntVector) row).size();\n     } else {\n@@ -259,8 +257,7 @@ public class ServerLongIntRow extends ServerIntRow {\n             mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n           }\n         } else {\n-          ObjectIterator<Long2IntMap.Entry> iter =\n-            ((LongIntVector) row).getStorage().entryIterator();\n+          ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n           Long2IntMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -273,7 +270,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void serializeRow(ByteBuf buf) {\n+  @Override\n+protected void serializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         int[] values = getValues();\n@@ -300,7 +298,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void deserializeRow(ByteBuf buf) {\n+  @Override\n+protected void deserializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       IntIntVector intIntRow = (IntIntVector) row;\n       if (useDenseSerialize()) {\n@@ -320,7 +319,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected int getRowSpace() {\n+  @Override\n+protected int getRowSpace() {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         return size * 4;\n@@ -332,15 +332,14 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public ServerRow clone() {\n+  @Override\n+public ServerRow clone() {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((IntIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row).clone());\n       } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((LongIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongIntVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -380,9 +379,8 @@ public class ServerLongIntRow extends ServerIntRow {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-    throws IOException {\n-    if (func != null) {\n+  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeInt(initAndGet(in.readInt(), func));\n@@ -405,11 +403,13 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void setSplit(Vector row) {\n+  @Override\n+public void setSplit(Vector row) {\n     super.setSplit(row);\n   }\n \n-  @Override public void elemUpdate(IntElemUpdateFunc func) {\n+  @Override\n+public void elemUpdate(IntElemUpdateFunc func) {\n     if (isDense()) {\n       int[] values = getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -434,4 +434,4 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "353",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/635/ServerLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/635/ServerLongIntRow.java\nindex 8fe6b12ab2b..3398f866910 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/635/ServerLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/635/ServerLongIntRow.java\n@@ -28,12 +28,12 @@ import io.netty.buffer.ByteBuf;\n import it.unimi.dsi.fastutil.ints.Int2IntMap;\n import it.unimi.dsi.fastutil.longs.Long2IntMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.io.IOException;\n \n /**\n  * The row with \"long\" index type and \"int\" value type in PS\n  */\n+\n public class ServerLongIntRow extends ServerIntRow {\n   /**\n    * Create a new ServerIntIntRow\n@@ -45,8 +45,8 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow   the inner row\n    */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-    IntVector innerRow) {\n+\n+  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n@@ -59,6 +59,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -68,6 +69,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    *\n    * @param rowType\n    */\n+\n   public ServerLongIntRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -83,6 +85,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public int get(long index) {\n     if (useIntKey) {\n       return ((IntIntVector) row).get((int) (index - startCol));\n@@ -97,6 +100,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(long index, int value) {\n     if (useIntKey) {\n       ((IntIntVector) row).set((int) (index - startCol), value);\n@@ -111,6 +115,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public int[] get(long[] indices) {\n     int[] values = new int[indices.length];\n     if (useIntKey) {\n@@ -122,7 +127,6 @@ public class ServerLongIntRow extends ServerIntRow {\n         values[i] = ((LongIntVector) row).get(indices[i] - startCol);\n       }\n     }\n-\n     return values;\n   }\n \n@@ -132,6 +136,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @param values  elements values\n    */\n+\n   public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     if (useIntKey) {\n@@ -151,6 +156,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(long index, int value) {\n     set(index, get(index) + value);\n   }\n@@ -161,6 +167,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @param values  elements plus values\n    */\n+\n   public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -173,6 +180,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    *\n    * @return all element values\n    */\n+\n   private int[] getValues() {\n     if (useIntKey) {\n       return ((IntIntVector) row).getStorage().getValues();\n@@ -181,7 +189,9 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  @Override\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -189,13 +199,10 @@ public class ServerLongIntRow extends ServerIntRow {\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseSparse(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -229,7 +236,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public int size() {\n+  @Override\n+  public int size() {\n     if (useIntKey) {\n       return ((IntIntVector) row).size();\n     } else {\n@@ -242,6 +250,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    *\n    * @param mergedRow the dest row\n    */\n+\n   public void mergeTo(LongIntVector mergedRow) {\n     startRead();\n     try {\n@@ -259,8 +268,7 @@ public class ServerLongIntRow extends ServerIntRow {\n             mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n           }\n         } else {\n-          ObjectIterator<Long2IntMap.Entry> iter =\n-            ((LongIntVector) row).getStorage().entryIterator();\n+          ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n           Long2IntMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -273,7 +281,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void serializeRow(ByteBuf buf) {\n+  @Override\n+  protected void serializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         int[] values = getValues();\n@@ -300,7 +309,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void deserializeRow(ByteBuf buf) {\n+  @Override\n+  protected void deserializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       IntIntVector intIntRow = (IntIntVector) row;\n       if (useDenseSerialize()) {\n@@ -320,7 +330,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected int getRowSpace() {\n+  @Override\n+  protected int getRowSpace() {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         return size * 4;\n@@ -332,15 +343,14 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public ServerRow clone() {\n+  @Override\n+  public ServerRow clone() {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((IntIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row).clone());\n       } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((LongIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongIntVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -353,6 +363,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(long index) {\n     if (useIntKey) {\n       if (row.isSparse()) {\n@@ -380,8 +391,8 @@ public class ServerLongIntRow extends ServerIntRow {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-    throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -405,11 +416,13 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void setSplit(Vector row) {\n+  @Override\n+  public void setSplit(Vector row) {\n     super.setSplit(row);\n   }\n \n-  @Override public void elemUpdate(IntElemUpdateFunc func) {\n+  @Override\n+  public void elemUpdate(IntElemUpdateFunc func) {\n     if (isDense()) {\n       int[] values = getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -434,4 +447,4 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}