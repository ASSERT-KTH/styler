{
    "project_name": "neo4j-neo4j",
    "error_id": "1385",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "161",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1385/DynamicRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1385/DynamicRecord.java\nindex 0aa514e6786..724e0d6a2e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1385/DynamicRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1385/DynamicRecord.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import java.util.Arrays;\n@@ -29,7 +30,7 @@ import static org.neo4j.memory.HeapEstimator.shallowSizeOfInstance;\n \n public class DynamicRecord extends AbstractBaseRecord\n {\n-    public static final long SHALLOW_SIZE = shallowSizeOfInstance( DynamicRecord.class );\n+    public static final long SHALLOW_SIZE = shallowSizeOfInstance(DynamicRecord.class);\n     public static final byte[] NO_DATA = new byte[0];\n     private static final int MAX_BYTES_IN_TO_STRING = 8;\n     private static final int MAX_CHARS_IN_TO_STRING = 16;\n@@ -39,23 +40,23 @@ public class DynamicRecord extends AbstractBaseRecord\n     private int type;\n     private boolean startRecord;\n \n-    public DynamicRecord( DynamicRecord other )\n+    public DynamicRecord(DynamicRecord other)\n     {\n-        super( other );\n-        this.data = Arrays.copyOf( other.data, other.data.length );\n+        super(other);\n+        this.data = Arrays.copyOf(other.data, other.data.length);\n         this.nextBlock = other.nextBlock;\n         this.type = other.type;\n         this.startRecord = other.startRecord;\n     }\n \n-    public DynamicRecord( long id )\n+    public DynamicRecord(long id)\n     {\n-        super( id );\n+        super(id);\n     }\n \n-    public DynamicRecord initialize( boolean inUse, boolean isStartRecord, long nextBlock, int type )\n+    public DynamicRecord initialize(boolean inUse, boolean isStartRecord, long nextBlock, int type)\n     {\n-        super.initialize( inUse );\n+        super.initialize(inUse);\n         this.startRecord = isStartRecord;\n         this.nextBlock = nextBlock;\n         this.type = type;\n@@ -66,10 +67,10 @@ public class DynamicRecord extends AbstractBaseRecord\n     @Override\n     public void clear()\n     {\n-        initialize( false, true, Record.NO_NEXT_BLOCK.intValue(), -1 );\n+        initialize(false, true, Record.NO_NEXT_BLOCK.intValue(), -1);\n     }\n \n-    public void setStartRecord( boolean startRecord )\n+    public void setStartRecord(boolean startRecord)\n     {\n         this.startRecord = startRecord;\n     }\n@@ -84,7 +85,7 @@ public class DynamicRecord extends AbstractBaseRecord\n      */\n     public PropertyType getType()\n     {\n-        return PropertyType.getPropertyTypeOrNull( this.type << 24 );\n+        return PropertyType.getPropertyTypeOrNull(this.type << 24);\n     }\n \n     /**\n@@ -96,18 +97,18 @@ public class DynamicRecord extends AbstractBaseRecord\n         return type;\n     }\n \n-    public void setType( int type )\n+    public void setType(int type)\n     {\n         this.type = type;\n     }\n \n-    public void setInUse( boolean inUse, int type )\n+    public void setInUse(boolean inUse, int type)\n     {\n         this.type = type;\n-        this.setInUse( inUse );\n+        this.setInUse(inUse);\n     }\n \n-    public void setData( byte[] data )\n+    public void setData(byte[] data)\n     {\n         this.data = data;\n     }\n@@ -127,7 +128,7 @@ public class DynamicRecord extends AbstractBaseRecord\n         return nextBlock;\n     }\n \n-    public void setNextBlock( long nextBlock )\n+    public void setNextBlock(long nextBlock)\n     {\n         this.nextBlock = nextBlock;\n     }\n@@ -136,84 +137,81 @@ public class DynamicRecord extends AbstractBaseRecord\n     public String toString()\n     {\n         StringBuilder buf = new StringBuilder();\n-        buf.append( \"DynamicRecord[\" )\n-                .append( getId() )\n-                .append( \",used=\" ).append( inUse() ).append( ',' )\n-                .append( '(' ).append( data.length ).append( \"),type=\" );\n+        buf.append(\"DynamicRecord[\")\n+          .append(getId())\n+          .append(\",used=\").append(inUse()).append(',')\n+          .append('(').append(data.length).append(\"),type=\");\n         PropertyType type = getType();\n-        if ( type == null )\n+        if (type == null)\n         {\n-            buf.append( this.type );\n-        }\n-        else\n+            buf.append(this.type);\n+        } else\n         {\n-            buf.append( type.name() );\n+            buf.append(type.name());\n         }\n-        buf.append( \",data=\" );\n-        if ( type == PropertyType.STRING && data.length <= MAX_CHARS_IN_TO_STRING )\n+        buf.append(\",data=\");\n+        if (type == PropertyType.STRING && data.length <= MAX_CHARS_IN_TO_STRING)\n         {\n-            buf.append( '\"' );\n-            buf.append( PropertyStore.decodeString( data ) );\n-            buf.append( \"\\\",\" );\n-        }\n-        else\n+            buf.append('\"');\n+            buf.append(PropertyStore.decodeString(data));\n+            buf.append(\"\\\",\");\n+        } else\n         {\n-            buf.append( \"byte[\" );\n-            if ( data.length <= MAX_BYTES_IN_TO_STRING )\n+            buf.append(\"byte[\");\n+            if (data.length <= MAX_BYTES_IN_TO_STRING)\n             {\n-                for ( int i = 0; i < data.length; i++ )\n+                for (int i = 0; i < data.length; i++)\n                 {\n-                    if ( i != 0 )\n+                    if (i != 0)\n                     {\n-                        buf.append( ',' );\n+                        buf.append(',');\n                     }\n-                    buf.append( data[i] );\n+                    buf.append(data[i]);\n                 }\n-            }\n-            else\n+            } else\n             {\n-                buf.append( \"size=\" ).append( data.length );\n+                buf.append(\"size=\").append(data.length);\n             }\n-            buf.append( \"],\" );\n+            buf.append(\"],\");\n         }\n-        buf.append( \"start=\" ).append( startRecord );\n-        buf.append( \",next=\" ).append( nextBlock ).append( ']' );\n+        buf.append(\"start=\").append(startRecord);\n+        buf.append(\",next=\").append(nextBlock).append(']');\n         return buf.toString();\n     }\n \n     @Override\n     public DynamicRecord copy()\n     {\n-        return new DynamicRecord( this );\n+        return new DynamicRecord(this);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        int result = Objects.hash( super.hashCode(), nextBlock, type, startRecord );\n-        result = 31 * result + Arrays.hashCode( data );\n+        int result = Objects.hash(super.hashCode(), nextBlock, type, startRecord);\n+        result = 31 * result + Arrays.hashCode(data);\n         return result;\n     }\n \n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n-        if ( !super.equals( o ) )\n+        if (!super.equals(o))\n         {\n             return false;\n         }\n         DynamicRecord that = (DynamicRecord) o;\n         return nextBlock == that.nextBlock &&\n-                type == that.type &&\n-                startRecord == that.startRecord &&\n-                Arrays.equals( data, that.data );\n+          type == that.type &&\n+          startRecord == that.startRecord &&\n+          Arrays.equals(data, that.data);\n     }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}