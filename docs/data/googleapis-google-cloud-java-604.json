{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "604",
    "information": {
        "errors": [
            {
                "line": "240",
                "column": "7",
                "severity": "warning",
                "message": "WhitespaceAround: 'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public boolean accept(Throwable prevThrowable) {\n    if(!(prevThrowable instanceof Exception)) {\n      return false;\n    }\n    Exception ex = (Exception) prevThrowable;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/604/ExceptionHandler.java\nindex 81703b56128..98da69eeb3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/604/ExceptionHandler.java\n@@ -237,7 +237,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n   @Override\n   public boolean accept(Throwable prevThrowable) {\n-    if(!(prevThrowable instanceof Exception)) {\n+    if (!(prevThrowable instanceof Exception)) {\n       return false;\n     }\n     Exception ex = (Exception) prevThrowable;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/604/ExceptionHandler.java\nindex 81703b56128..bf16d499116 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/604/ExceptionHandler.java\n@@ -58,19 +58,19 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n      *\n      * @param exception the exception that is being evaluated\n      * @return {@link RetryResult} to indicate if the exception should be ignored (\n-     *         {@link RetryResult#RETRY}), propagated ({@link RetryResult#NO_RETRY}), or evaluation\n-     *         should proceed ({@link RetryResult#CONTINUE_EVALUATION}).\n+     * {@link RetryResult#RETRY}), propagated ({@link RetryResult#NO_RETRY}), or evaluation\n+     * should proceed ({@link RetryResult#CONTINUE_EVALUATION}).\n      */\n     RetryResult beforeEval(Exception exception);\n \n     /**\n      * This method is called after the evaluation and could alter its result.\n      *\n-     * @param exception the exception that is being evaluated\n+     * @param exception   the exception that is being evaluated\n      * @param retryResult the result of the evaluation so far\n      * @return {@link RetryResult} to indicate if the exception should be ignored (\n-     *         {@link RetryResult#RETRY}), propagated ({@link RetryResult#NO_RETRY}), or evaluation\n-     *         should proceed ({@link RetryResult#CONTINUE_EVALUATION}).\n+     * {@link RetryResult#RETRY}), propagated ({@link RetryResult#NO_RETRY}), or evaluation\n+     * should proceed ({@link RetryResult#CONTINUE_EVALUATION}).\n      */\n     RetryResult afterEval(Exception exception, RetryResult retryResult);\n   }\n@@ -86,8 +86,8 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n     private final ImmutableSet.Builder<Class<? extends Exception>> nonRetriableExceptions =\n         ImmutableSet.builder();\n \n-    private Builder() {}\n-\n+    private Builder() {\n+    }\n \n \n     /**\n@@ -200,7 +200,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n   }\n \n   private static RetryInfo findMostSpecificRetryInfo(Set<RetryInfo> retryInfo,\n-      Class<? extends Exception> exception) {\n+                                                     Class<? extends Exception> exception) {\n     for (RetryInfo current : retryInfo) {\n       if (current.exception.isAssignableFrom(exception)) {\n         RetryInfo match = findMostSpecificRetryInfo(current.children, exception);\n@@ -237,7 +237,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n   @Override\n   public boolean accept(Throwable prevThrowable) {\n-    if(!(prevThrowable instanceof Exception)) {\n+    if (!(prevThrowable instanceof Exception)) {\n       return false;\n     }\n     Exception ex = (Exception) prevThrowable;\n@@ -262,7 +262,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n   @Override\n   public TimedAttemptSettings createNextAttempt(Throwable prevThrowable,\n-      TimedAttemptSettings prevSettings) {\n+                                                TimedAttemptSettings prevSettings) {\n     // Return null to indicate that this implementaiton does not provide any specific attempt\n     // settings, so by default the TimedRetryAlgorithm options can be used instead.\n     return null;\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/604/ExceptionHandler.java\nindex 81703b56128..809164802d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/604/ExceptionHandler.java\n@@ -88,9 +88,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n     private Builder() {}\n \n-\n-\n-    /**\n+/**\n      * Adds the exception handler interceptors. Call order will be maintained.\n      *\n      * @param interceptors the interceptors for this exception handler\n@@ -237,7 +235,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n   @Override\n   public boolean accept(Throwable prevThrowable) {\n-    if(!(prevThrowable instanceof Exception)) {\n+    if (!(prevThrowable instanceof Exception)) {\n       return false;\n     }\n     Exception ex = (Exception) prevThrowable;\n@@ -263,7 +261,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n   @Override\n   public TimedAttemptSettings createNextAttempt(Throwable prevThrowable,\n       TimedAttemptSettings prevSettings) {\n-    // Return null to indicate that this implementaiton does not provide any specific attempt\n+  // Return null to indicate that this implementaiton does not provide any specific attempt\n     // settings, so by default the TimedRetryAlgorithm options can be used instead.\n     return null;\n   }\n@@ -300,4 +298,4 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n   public static Builder newBuilder() {\n     return new Builder();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "warning",
                    "message": "'\"Callable method exceptions must be derived from Exception\"' has incorrect indentation level 8, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "237",
                    "severity": "warning",
                    "message": "'\"Declared exception '\"' has incorrect indentation level 8, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "254",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "265",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/604/ExceptionHandler.java\nindex 81703b56128..62ffdbac6f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/604/ExceptionHandler.java\n@@ -25,7 +25,6 @@ import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n-\n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.Objects;\n@@ -35,13 +34,12 @@ import java.util.concurrent.Callable;\n /**\n  * Exception retry algorithm implementation used by {@link RetryHelper}.\n  */\n-public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializable {\n \n-  private static final long serialVersionUID = -2460707015779532919L;\n \n-  private static final ExceptionHandler DEFAULT_INSTANCE =\n-      newBuilder().retryOn(Exception.class).abortOn(RuntimeException.class).build();\n+public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializable {\n \n+  private static final long serialVersionUID = -2460707015779532919L;\n+  private static final ExceptionHandler DEFAULT_INSTANCE = newBuilder().retryOn(Exception.class).abortOn(RuntimeException.class).build();\n   private final ImmutableList<Interceptor> interceptors;\n   private final ImmutableSet<Class<? extends Exception>> retriableExceptions;\n   private final ImmutableSet<Class<? extends Exception>> nonRetriableExceptions;\n@@ -50,6 +48,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n   public interface Interceptor extends Serializable {\n \n     enum RetryResult {\n+\n       NO_RETRY, RETRY, CONTINUE_EVALUATION;\n     }\n \n@@ -61,6 +60,8 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n      *         {@link RetryResult#RETRY}), propagated ({@link RetryResult#NO_RETRY}), or evaluation\n      *         should proceed ({@link RetryResult#CONTINUE_EVALUATION}).\n      */\n+\n+\n     RetryResult beforeEval(Exception exception);\n \n     /**\n@@ -72,19 +73,19 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n      *         {@link RetryResult#RETRY}), propagated ({@link RetryResult#NO_RETRY}), or evaluation\n      *         should proceed ({@link RetryResult#CONTINUE_EVALUATION}).\n      */\n+\n     RetryResult afterEval(Exception exception, RetryResult retryResult);\n   }\n \n   /**\n    * ExceptionHandler builder.\n    */\n+\n   public static class Builder {\n \n     private final ImmutableList.Builder<Interceptor> interceptors = ImmutableList.builder();\n-    private final ImmutableSet.Builder<Class<? extends Exception>> retriableExceptions =\n-        ImmutableSet.builder();\n-    private final ImmutableSet.Builder<Class<? extends Exception>> nonRetriableExceptions =\n-        ImmutableSet.builder();\n+    private final ImmutableSet.Builder<Class<? extends Exception>> retriableExceptions = ImmutableSet.builder();\n+    private final ImmutableSet.Builder<Class<? extends Exception>> nonRetriableExceptions = ImmutableSet.builder();\n \n     private Builder() {}\n \n@@ -96,6 +97,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n      * @param interceptors the interceptors for this exception handler\n      * @return the Builder for chaining\n      */\n+\n     public Builder addInterceptors(Interceptor... interceptors) {\n       for (Interceptor interceptor : interceptors) {\n         this.interceptors.add(interceptor);\n@@ -109,6 +111,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n      * @param exceptions retry should continue when such exceptions are thrown\n      * @return the Builder for chaining\n      */\n+\n     @SafeVarargs\n     public final Builder retryOn(Class<? extends Exception>... exceptions) {\n       for (Class<? extends Exception> exception : exceptions) {\n@@ -123,6 +126,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n      * @param exceptions retry should abort when such exceptions are thrown\n      * @return the Builder for chaining\n      */\n+\n     @SafeVarargs\n     public final Builder abortOn(Class<? extends Exception>... exceptions) {\n       for (Class<? extends Exception> exception : exceptions) {\n@@ -134,6 +138,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n     /**\n      * Returns a new ExceptionHandler instance.\n      */\n+\n     public ExceptionHandler build() {\n       return new ExceptionHandler(this);\n     }\n@@ -174,9 +179,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n     interceptors = builder.interceptors.build();\n     retriableExceptions = builder.retriableExceptions.build();\n     nonRetriableExceptions = builder.nonRetriableExceptions.build();\n-    Preconditions.checkArgument(\n-        Sets.intersection(retriableExceptions, nonRetriableExceptions).isEmpty(),\n-        \"Same exception was found in both retryable and non-retryable sets\");\n+    Preconditions.checkArgument(Sets.intersection(retriableExceptions, nonRetriableExceptions).isEmpty(), \"Same exception was found in both retryable and non-retryable sets\");\n     for (Class<? extends Exception> exception : retriableExceptions) {\n       addRetryInfo(new RetryInfo(exception, Interceptor.RetryResult.RETRY), retryInfo);\n     }\n@@ -199,8 +202,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n     dest.add(retryInfo);\n   }\n \n-  private static RetryInfo findMostSpecificRetryInfo(Set<RetryInfo> retryInfo,\n-      Class<? extends Exception> exception) {\n+  private static RetryInfo findMostSpecificRetryInfo(Set<RetryInfo> retryInfo, Class<? extends Exception> exception) {\n     for (RetryInfo current : retryInfo) {\n       if (current.exception.isAssignableFrom(exception)) {\n         RetryInfo match = findMostSpecificRetryInfo(current.children, exception);\n@@ -211,6 +213,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n   }\n \n   // called for Class<? extends Callable>, therefore a \"call\" method must be found.\n+\n   private static Method getCallableMethod(Class<?> clazz) {\n     try {\n       return clazz.getDeclaredMethod(\"call\");\n@@ -227,17 +230,17 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n     Method callMethod = getCallableMethod(callable.getClass());\n     for (Class<?> exceptionOrError : callMethod.getExceptionTypes()) {\n       Preconditions.checkArgument(Exception.class.isAssignableFrom(exceptionOrError),\n-          \"Callable method exceptions must be derived from Exception\");\n+        \"Callable method exceptions must be derived from Exception\");\n       @SuppressWarnings(\"unchecked\")\n       Class<? extends Exception> exception = (Class<? extends Exception>) exceptionOrError;\n       Preconditions.checkArgument(findMostSpecificRetryInfo(retryInfo, exception) != null,\n-          \"Declared exception '\" + exception + \"' is not covered by exception handler\");\n+        \"Declared exception '\" + exception + \"' is not covered by exception handler\");\n     }\n   }\n \n   @Override\n   public boolean accept(Throwable prevThrowable) {\n-    if(!(prevThrowable instanceof Exception)) {\n+    if (!(prevThrowable instanceof Exception)) {\n       return false;\n     }\n     Exception ex = (Exception) prevThrowable;\n@@ -248,11 +251,9 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n       }\n     }\n     RetryInfo retryInfo = findMostSpecificRetryInfo(this.retryInfo, ex.getClass());\n-    Interceptor.RetryResult retryResult =\n-        retryInfo == null ? Interceptor.RetryResult.NO_RETRY : retryInfo.retry;\n+    Interceptor.RetryResult retryResult = retryInfo == null ? Interceptor.RetryResult.NO_RETRY : retryInfo.retry;\n     for (Interceptor interceptor : interceptors) {\n-      Interceptor.RetryResult interceptorRetry =\n-          checkNotNull(interceptor.afterEval(ex, retryResult));\n+      Interceptor.RetryResult interceptorRetry = checkNotNull(interceptor.afterEval(ex, retryResult));\n       if (interceptorRetry != Interceptor.RetryResult.CONTINUE_EVALUATION) {\n         retryResult = interceptorRetry;\n       }\n@@ -261,8 +262,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n   }\n \n   @Override\n-  public TimedAttemptSettings createNextAttempt(Throwable prevThrowable,\n-      TimedAttemptSettings prevSettings) {\n+  public TimedAttemptSettings createNextAttempt(Throwable prevThrowable, TimedAttemptSettings prevSettings) {\n     // Return null to indicate that this implementaiton does not provide any specific attempt\n     // settings, so by default the TimedRetryAlgorithm options can be used instead.\n     return null;\n@@ -283,21 +283,21 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n     }\n     ExceptionHandler other = (ExceptionHandler) obj;\n     return Objects.equals(interceptors, other.interceptors)\n-        && Objects.equals(retriableExceptions, other.retriableExceptions)\n-        && Objects.equals(nonRetriableExceptions, other.nonRetriableExceptions)\n-        && Objects.equals(retryInfo, other.retryInfo);\n+      && Objects.equals(retriableExceptions, other.retriableExceptions)\n+      && Objects.equals(nonRetriableExceptions, other.nonRetriableExceptions)\n+      && Objects.equals(retryInfo, other.retryInfo);\n   }\n \n \n   /**\n    * Returns an instance which retry any checked exception and abort on any runtime exception.\n    */\n+\n   public static ExceptionHandler getDefaultInstance() {\n     return DEFAULT_INSTANCE;\n   }\n \n-\n   public static Builder newBuilder() {\n     return new Builder();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/604/ExceptionHandler.java\nindex 81703b56128..98da69eeb3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/604/ExceptionHandler.java\n@@ -237,7 +237,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n   @Override\n   public boolean accept(Throwable prevThrowable) {\n-    if(!(prevThrowable instanceof Exception)) {\n+    if (!(prevThrowable instanceof Exception)) {\n       return false;\n     }\n     Exception ex = (Exception) prevThrowable;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/604/ExceptionHandler.java\nindex 81703b56128..98da69eeb3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/604/ExceptionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/604/ExceptionHandler.java\n@@ -237,7 +237,7 @@ public final class ExceptionHandler implements ExceptionRetryAlgorithm, Serializ\n \n   @Override\n   public boolean accept(Throwable prevThrowable) {\n-    if(!(prevThrowable instanceof Exception)) {\n+    if (!(prevThrowable instanceof Exception)) {\n       return false;\n     }\n     Exception ex = (Exception) prevThrowable;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}