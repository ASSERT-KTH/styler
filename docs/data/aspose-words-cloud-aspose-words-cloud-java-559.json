{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "559",
    "information": {
        "errors": [
            {
                "line": "141",
                "column": "34",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    FontInfo fontInfo = (FontInfo)o;\n    return\n        Objects.equals(this.filePath, fontInfo.filePath) &&\n        Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/559/FontInfo.java\nindex 41e31579a4a..5426f43a2c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/559/FontInfo.java\n@@ -138,7 +138,7 @@ public class FontInfo {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FontInfo fontInfo = (FontInfo)o;\n+    FontInfo fontInfo = (FontInfo) o;\n     return\n         Objects.equals(this.filePath, fontInfo.filePath) &&\n         Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/559/FontInfo.java\nindex 41e31579a4a..9780569934c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/559/FontInfo.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -58,6 +61,7 @@ public class FontInfo {\n \n     @SerializedName(\"Version\")\n     private String version = null;\n+\n     public FontInfo filePath(String filePath) {\n         this.filePath = filePath;\n         return this;\n@@ -65,8 +69,9 @@ public class FontInfo {\n \n     /**\n      * Gets or sets path to the font file if any.\n-    * @return filePath\n-    **/\n+     *\n+     * @return filePath\n+     **/\n     @ApiModelProperty(value = \"Gets or sets path to the font file if any.\")\n     public String getFilePath() {\n         return filePath;\n@@ -83,8 +88,9 @@ public class FontInfo {\n \n     /**\n      * Gets or sets family name of the font.\n-    * @return fontFamilyName\n-    **/\n+     *\n+     * @return fontFamilyName\n+     **/\n     @ApiModelProperty(value = \"Gets or sets family name of the font.\")\n     public String getFontFamilyName() {\n         return fontFamilyName;\n@@ -101,8 +107,9 @@ public class FontInfo {\n \n     /**\n      * Gets or sets full name of the font.\n-    * @return fullFontName\n-    **/\n+     *\n+     * @return fullFontName\n+     **/\n     @ApiModelProperty(value = \"Gets or sets full name of the font.\")\n     public String getFullFontName() {\n         return fullFontName;\n@@ -119,8 +126,9 @@ public class FontInfo {\n \n     /**\n      * Gets or sets version string of the font.\n-    * @return version\n-    **/\n+     *\n+     * @return version\n+     **/\n     @ApiModelProperty(value = \"Gets or sets version string of the font.\")\n     public String getVersion() {\n         return version;\n@@ -138,39 +146,39 @@ public class FontInfo {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FontInfo fontInfo = (FontInfo)o;\n-    return\n-        Objects.equals(this.filePath, fontInfo.filePath) &&\n-        Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n-        Objects.equals(this.fullFontName, fontInfo.fullFontName) &&\n-        Objects.equals(this.version, fontInfo.version);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(filePath, fontFamilyName, fullFontName, version);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class FontInfo {\\n\");\n-    sb.append(\"    filePath: \").append(toIndentedString(filePath)).append(\"\\n\");\n-    sb.append(\"    fontFamilyName: \").append(toIndentedString(fontFamilyName)).append(\"\\n\");\n-    sb.append(\"    fullFontName: \").append(toIndentedString(fullFontName)).append(\"\\n\");\n-    sb.append(\"    version: \").append(toIndentedString(version)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        FontInfo fontInfo = (FontInfo) o;\n+        return\n+            Objects.equals(this.filePath, fontInfo.filePath) &&\n+                Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n+                Objects.equals(this.fullFontName, fontInfo.fullFontName) &&\n+                Objects.equals(this.version, fontInfo.version);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(filePath, fontFamilyName, fullFontName, version);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class FontInfo {\\n\");\n+        sb.append(\"    filePath: \").append(toIndentedString(filePath)).append(\"\\n\");\n+        sb.append(\"    fontFamilyName: \").append(toIndentedString(fontFamilyName)).append(\"\\n\");\n+        sb.append(\"    fullFontName: \").append(toIndentedString(fullFontName)).append(\"\\n\");\n+        sb.append(\"    version: \").append(toIndentedString(version)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "143",
                    "column": "30",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/559/FontInfo.java\nindex 41e31579a4a..3430347896b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/559/FontInfo.java\n@@ -58,7 +58,8 @@ public class FontInfo {\n \n     @SerializedName(\"Version\")\n     private String version = null;\n-    public FontInfo filePath(String filePath) {\n+\n+public FontInfo filePath(String filePath) {\n         this.filePath = filePath;\n         return this;\n     }\n@@ -134,13 +135,13 @@ public class FontInfo {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FontInfo fontInfo = (FontInfo)o;\n-    return\n-        Objects.equals(this.filePath, fontInfo.filePath) &&\n+\n+FontInfo fontInfo = (FontInfo)o;\n+    return Objects.equals(this.filePath, fontInfo.filePath) &&\n         Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n         Objects.equals(this.fullFontName, fontInfo.fullFontName) &&\n         Objects.equals(this.version, fontInfo.version);\n@@ -173,4 +174,4 @@ public class FontInfo {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/559/FontInfo.java\nindex 41e31579a4a..a8753e63929 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/559/FontInfo.java\n@@ -45,112 +45,127 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Font info.\n  */\n+\n+\n @ApiModel(description = \"Font info.\")\n+\n public class FontInfo {\n-    @SerializedName(\"FilePath\")\n-    private String filePath = null;\n+  @SerializedName(\"FilePath\")\n+  private String filePath = null;\n \n-    @SerializedName(\"FontFamilyName\")\n-    private String fontFamilyName = null;\n+  @SerializedName(\"FontFamilyName\")\n+  private String fontFamilyName = null;\n \n-    @SerializedName(\"FullFontName\")\n-    private String fullFontName = null;\n+  @SerializedName(\"FullFontName\")\n+  private String fullFontName = null;\n \n-    @SerializedName(\"Version\")\n-    private String version = null;\n-    public FontInfo filePath(String filePath) {\n-        this.filePath = filePath;\n-        return this;\n-    }\n+  @SerializedName(\"Version\")\n+  private String version = null;\n+\n+  public FontInfo filePath(String filePath) {\n+    this.filePath = filePath;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets path to the font file if any.\n     * @return filePath\n     **/\n-    @ApiModelProperty(value = \"Gets or sets path to the font file if any.\")\n-    public String getFilePath() {\n-        return filePath;\n-    }\n \n-    public void setFilePath(String filePath) {\n-        this.filePath = filePath;\n-    }\n \n-    public FontInfo fontFamilyName(String fontFamilyName) {\n-        this.fontFamilyName = fontFamilyName;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets path to the font file if any.\")\n+  public String getFilePath() {\n+    return filePath;\n+  }\n+\n+  public void setFilePath(String filePath) {\n+    this.filePath = filePath;\n+  }\n+\n+  public FontInfo fontFamilyName(String fontFamilyName) {\n+    this.fontFamilyName = fontFamilyName;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets family name of the font.\n     * @return fontFamilyName\n     **/\n-    @ApiModelProperty(value = \"Gets or sets family name of the font.\")\n-    public String getFontFamilyName() {\n-        return fontFamilyName;\n-    }\n \n-    public void setFontFamilyName(String fontFamilyName) {\n-        this.fontFamilyName = fontFamilyName;\n-    }\n \n-    public FontInfo fullFontName(String fullFontName) {\n-        this.fullFontName = fullFontName;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets family name of the font.\")\n+  public String getFontFamilyName() {\n+    return fontFamilyName;\n+  }\n+\n+  public void setFontFamilyName(String fontFamilyName) {\n+    this.fontFamilyName = fontFamilyName;\n+  }\n+\n+  public FontInfo fullFontName(String fullFontName) {\n+    this.fullFontName = fullFontName;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets full name of the font.\n     * @return fullFontName\n     **/\n-    @ApiModelProperty(value = \"Gets or sets full name of the font.\")\n-    public String getFullFontName() {\n-        return fullFontName;\n-    }\n \n-    public void setFullFontName(String fullFontName) {\n-        this.fullFontName = fullFontName;\n-    }\n \n-    public FontInfo version(String version) {\n-        this.version = version;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets full name of the font.\")\n+  public String getFullFontName() {\n+    return fullFontName;\n+  }\n+\n+  public void setFullFontName(String fullFontName) {\n+    this.fullFontName = fullFontName;\n+  }\n+\n+  public FontInfo version(String version) {\n+    this.version = version;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets version string of the font.\n     * @return version\n     **/\n-    @ApiModelProperty(value = \"Gets or sets version string of the font.\")\n-    public String getVersion() {\n-        return version;\n-    }\n \n-    public void setVersion(String version) {\n-        this.version = version;\n+\n+  @ApiModelProperty(value = \"Gets or sets version string of the font.\")\n+  public String getVersion() {\n+    return version;\n+  }\n+\n+  public void setVersion(String version) {\n+    this.version = version;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    FontInfo fontInfo = (FontInfo)o;\n-    return\n-        Objects.equals(this.filePath, fontInfo.filePath) &&\n-        Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n-        Objects.equals(this.fullFontName, fontInfo.fullFontName) &&\n-        Objects.equals(this.version, fontInfo.version);\n+    FontInfo fontInfo = (FontInfo) o;\n+    return Objects.equals(this.filePath, fontInfo.filePath) &&\n+    Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n+    Objects.equals(this.fullFontName, fontInfo.fullFontName) &&\n+    Objects.equals(this.version, fontInfo.version);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(filePath, fontFamilyName, fullFontName, version);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -167,10 +182,12 @@ public class FontInfo {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/559/FontInfo.java\nindex 41e31579a4a..5426f43a2c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/559/FontInfo.java\n@@ -138,7 +138,7 @@ public class FontInfo {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FontInfo fontInfo = (FontInfo)o;\n+    FontInfo fontInfo = (FontInfo) o;\n     return\n         Objects.equals(this.filePath, fontInfo.filePath) &&\n         Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/559/FontInfo.java\nindex 41e31579a4a..5426f43a2c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/559/FontInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/559/FontInfo.java\n@@ -138,7 +138,7 @@ public class FontInfo {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FontInfo fontInfo = (FontInfo)o;\n+    FontInfo fontInfo = (FontInfo) o;\n     return\n         Objects.equals(this.filePath, fontInfo.filePath) &&\n         Objects.equals(this.fontFamilyName, fontInfo.fontFamilyName) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}