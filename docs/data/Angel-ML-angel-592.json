{
    "project_name": "Angel-ML-angel",
    "error_id": "592",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Override\n  protected double doProcessRow(ServerSparseDoubleLongKeyRow row1, ServerSparseDoubleLongKeyRow row2) {\n    long entireSize = row1.getEndCol() - row2.getStartCol();\n\n    Long2DoubleOpenHashMap data1 = row1.getIndex2ValueMap();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/592/Dot.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/592/Dot.java\nindex 8aee745d710..7eb67b0eb2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/592/Dot.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/592/Dot.java\n@@ -57,7 +57,8 @@ public final class Dot extends BinaryAggrFunc {\n   }\n \n   @Override\n-  protected double doProcessRow(ServerSparseDoubleLongKeyRow row1, ServerSparseDoubleLongKeyRow row2) {\n+  protected double doProcessRow(ServerSparseDoubleLongKeyRow row1,\n+                                ServerSparseDoubleLongKeyRow row2) {\n     long entireSize = row1.getEndCol() - row2.getStartCol();\n \n     Long2DoubleOpenHashMap data1 = row1.getIndex2ValueMap();\n@@ -66,7 +67,7 @@ public final class Dot extends BinaryAggrFunc {\n     keys.addAll(data2.keySet());\n \n     double sum = 0.0;\n-    for (long key: keys) {\n+    for (long key : keys) {\n       sum += data1.get(key) * data2.get(key);\n     }\n     sum += (entireSize - keys.size()) * data1.defaultReturnValue() * data2.defaultReturnValue();\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/592/Dot.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/592/Dot.java\nindex 8aee745d710..2f31c61f402 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/592/Dot.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/592/Dot.java\n@@ -74,8 +74,7 @@ public final class Dot extends BinaryAggrFunc {\n     return sum;\n   }\n \n-\n-  @Override\n+@Override\n   public GetResult merge(List<PartitionGetResult> partResults) {\n     double sum = 0.0;\n     for (PartitionGetResult partResult : partResults) {\n@@ -87,4 +86,4 @@ public final class Dot extends BinaryAggrFunc {\n     return new ScalarAggrResult(sum);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/592/Dot.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/592/Dot.java\nindex 8aee745d710..0c11778a578 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/592/Dot.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/592/Dot.java\n@@ -26,7 +26,6 @@ import com.tencent.angel.ps.impl.matrix.ServerDenseDoubleRow;\n import com.tencent.angel.ps.impl.matrix.ServerSparseDoubleLongKeyRow;\n import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n import it.unimi.dsi.fastutil.longs.LongSet;\n-\n import java.nio.DoubleBuffer;\n import java.util.List;\n \n@@ -34,6 +33,7 @@ import java.util.List;\n  * `Dot` will return dot product result of `rowId1` and `rowId2`.\n  * That is math.dot(matrix[rowId1], matrix[rowId2]).\n  */\n+\n public final class Dot extends BinaryAggrFunc {\n \n   public Dot(int matrixId, int rowId1, int rowId2) {\n@@ -59,22 +59,18 @@ public final class Dot extends BinaryAggrFunc {\n   @Override\n   protected double doProcessRow(ServerSparseDoubleLongKeyRow row1, ServerSparseDoubleLongKeyRow row2) {\n     long entireSize = row1.getEndCol() - row2.getStartCol();\n-\n     Long2DoubleOpenHashMap data1 = row1.getIndex2ValueMap();\n     Long2DoubleOpenHashMap data2 = row2.getIndex2ValueMap();\n     LongSet keys = data1.keySet();\n     keys.addAll(data2.keySet());\n-\n     double sum = 0.0;\n-    for (long key: keys) {\n+    for (long key : keys) {\n       sum += data1.get(key) * data2.get(key);\n     }\n     sum += (entireSize - keys.size()) * data1.defaultReturnValue() * data2.defaultReturnValue();\n-\n     return sum;\n   }\n \n-\n   @Override\n   public GetResult merge(List<PartitionGetResult> partResults) {\n     double sum = 0.0;\n@@ -83,8 +79,7 @@ public final class Dot extends BinaryAggrFunc {\n         sum += ((ScalarPartitionAggrResult) partResult).result;\n       }\n     }\n-\n     return new ScalarAggrResult(sum);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}