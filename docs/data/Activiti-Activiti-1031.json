{
    "project_name": "Activiti-Activiti",
    "error_id": "1031",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.impl.context.Context;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/1031/InclusiveGatewayActivityBehavior.java\nindex f95031aac6c..123231c5c18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/1031/InclusiveGatewayActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.delegate.DelegateExecution;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/1031/InclusiveGatewayActivityBehavior.java\nindex f95031aac6c..64822a3cfa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/1031/InclusiveGatewayActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.delegate.DelegateExecution;\n@@ -27,75 +28,71 @@ import java.util.Iterator;\n \n /**\n  * Implementation of the Inclusive Gateway/OR gateway/inclusive data-based gateway as defined in the BPMN specification.\n- *\n+ */\n+public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior implements InactiveActivityBehavior {\n \n+    private static final long serialVersionUID = 1L;\n \n+    private static Logger logger = LoggerFactory.getLogger(InclusiveGatewayActivityBehavior.class.getName());\n \n- */\n-public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior implements InactiveActivityBehavior {\n+    @Override\n+    public void execute(DelegateExecution execution) {\n+        // The join in the inclusive gateway works as follows:\n+        // When an execution enters it, it is inactivated.\n+        // All the inactivated executions stay in the inclusive gateway\n+        // until ALL executions that CAN reach the inclusive gateway have reached it.\n+        //\n+        // This check is repeated on execution changes until the inactivated\n+        // executions leave the gateway.\n \n-  private static final long serialVersionUID = 1L;\n-\n-  private static Logger logger = LoggerFactory.getLogger(InclusiveGatewayActivityBehavior.class.getName());\n-\n-  @Override\n-  public void execute(DelegateExecution execution) {\n-    // The join in the inclusive gateway works as follows:\n-    // When an execution enters it, it is inactivated.\n-    // All the inactivated executions stay in the inclusive gateway\n-    // until ALL executions that CAN reach the inclusive gateway have reached it.\n-    //\n-    // This check is repeated on execution changes until the inactivated\n-    // executions leave the gateway.\n-\n-    execution.inactivate();\n-    executeInclusiveGatewayLogic((ExecutionEntity) execution);\n-  }\n-\n-  @Override\n-  public void executeInactive(ExecutionEntity executionEntity) {\n-    executeInclusiveGatewayLogic(executionEntity);\n-  }\n-\n-  protected void executeInclusiveGatewayLogic(ExecutionEntity execution) {\n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n-\n-    lockFirstParentScope(execution);\n-\n-    Collection<ExecutionEntity> allExecutions = executionEntityManager.findChildExecutionsByProcessInstanceId(execution.getProcessInstanceId());\n-    Iterator<ExecutionEntity> executionIterator = allExecutions.iterator();\n-    boolean oneExecutionCanReachGateway = false;\n-    while (!oneExecutionCanReachGateway && executionIterator.hasNext()) {\n-      ExecutionEntity executionEntity = executionIterator.next();\n-      if (!executionEntity.getActivityId().equals(execution.getCurrentActivityId())) {\n-        boolean canReachGateway = ExecutionGraphUtil.isReachable(execution.getProcessDefinitionId(), executionEntity.getActivityId(), execution.getCurrentActivityId());\n-        if (canReachGateway) {\n-          oneExecutionCanReachGateway = true;\n-        }\n-      } else if (executionEntity.getActivityId().equals(execution.getCurrentActivityId()) && executionEntity.isActive()) {\n-        // Special case: the execution has reached the inc gw, but the operation hasn't been executed yet for that execution\n-        oneExecutionCanReachGateway = true;\n-      }\n+        execution.inactivate();\n+        executeInclusiveGatewayLogic((ExecutionEntity) execution);\n     }\n \n-    // If no execution can reach the gateway, the gateway activates and executes fork behavior\n-    if (!oneExecutionCanReachGateway) {\n-\n-      logger.debug(\"Inclusive gateway cannot be reached by any execution and is activated\");\n+    @Override\n+    public void executeInactive(ExecutionEntity executionEntity) {\n+        executeInclusiveGatewayLogic(executionEntity);\n+    }\n \n-      // Kill all executions here (except the incoming)\n-      Collection<ExecutionEntity> executionsInGateway = executionEntityManager\n-          .findInactiveExecutionsByActivityIdAndProcessInstanceId(execution.getCurrentActivityId(), execution.getProcessInstanceId());\n-      for (ExecutionEntity executionEntityInGateway : executionsInGateway) {\n-        if (!executionEntityInGateway.getId().equals(execution.getId())) {\n-          commandContext.getHistoryManager().recordActivityEnd(executionEntityInGateway, null);\n-          executionEntityManager.deleteExecutionAndRelatedData(executionEntityInGateway, null);\n+    protected void executeInclusiveGatewayLogic(ExecutionEntity execution) {\n+        CommandContext commandContext = Context.getCommandContext();\n+        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+\n+        lockFirstParentScope(execution);\n+\n+        Collection<ExecutionEntity> allExecutions = executionEntityManager.findChildExecutionsByProcessInstanceId(execution.getProcessInstanceId());\n+        Iterator<ExecutionEntity> executionIterator = allExecutions.iterator();\n+        boolean oneExecutionCanReachGateway = false;\n+        while (!oneExecutionCanReachGateway && executionIterator.hasNext()) {\n+            ExecutionEntity executionEntity = executionIterator.next();\n+            if (!executionEntity.getActivityId().equals(execution.getCurrentActivityId())) {\n+                boolean canReachGateway = ExecutionGraphUtil.isReachable(execution.getProcessDefinitionId(), executionEntity.getActivityId(), execution.getCurrentActivityId());\n+                if (canReachGateway) {\n+                    oneExecutionCanReachGateway = true;\n+                }\n+            } else if (executionEntity.getActivityId().equals(execution.getCurrentActivityId()) && executionEntity.isActive()) {\n+                // Special case: the execution has reached the inc gw, but the operation hasn't been executed yet for that execution\n+                oneExecutionCanReachGateway = true;\n+            }\n         }\n-      }\n \n-      // Leave\n-      commandContext.getAgenda().planTakeOutgoingSequenceFlowsOperation(execution, true);\n+        // If no execution can reach the gateway, the gateway activates and executes fork behavior\n+        if (!oneExecutionCanReachGateway) {\n+\n+            logger.debug(\"Inclusive gateway cannot be reached by any execution and is activated\");\n+\n+            // Kill all executions here (except the incoming)\n+            Collection<ExecutionEntity> executionsInGateway = executionEntityManager\n+                    .findInactiveExecutionsByActivityIdAndProcessInstanceId(execution.getCurrentActivityId(), execution.getProcessInstanceId());\n+            for (ExecutionEntity executionEntityInGateway : executionsInGateway) {\n+                if (!executionEntityInGateway.getId().equals(execution.getId())) {\n+                    commandContext.getHistoryManager().recordActivityEnd(executionEntityInGateway, null);\n+                    executionEntityManager.deleteExecutionAndRelatedData(executionEntityInGateway, null);\n+                }\n+            }\n+\n+            // Leave\n+            commandContext.getAgenda().planTakeOutgoingSequenceFlowsOperation(execution, true);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/1031/InclusiveGatewayActivityBehavior.java\nindex f95031aac6c..bd98b6591ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/1031/InclusiveGatewayActivityBehavior.java\n@@ -21,7 +21,6 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;\n import org.activiti.engine.impl.util.ExecutionGraphUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.Collection;\n import java.util.Iterator;\n \n@@ -32,6 +31,8 @@ import java.util.Iterator;\n \n \n  */\n+\n+\n public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior implements InactiveActivityBehavior {\n \n   private static final long serialVersionUID = 1L;\n@@ -47,7 +48,6 @@ public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior im\n     //\n     // This check is repeated on execution changes until the inactivated\n     // executions leave the gateway.\n-\n     execution.inactivate();\n     executeInclusiveGatewayLogic((ExecutionEntity) execution);\n   }\n@@ -60,7 +60,6 @@ public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior im\n   protected void executeInclusiveGatewayLogic(ExecutionEntity execution) {\n     CommandContext commandContext = Context.getCommandContext();\n     ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n-\n     lockFirstParentScope(execution);\n \n     Collection<ExecutionEntity> allExecutions = executionEntityManager.findChildExecutionsByProcessInstanceId(execution.getProcessInstanceId());\n@@ -81,12 +80,12 @@ public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior im\n \n     // If no execution can reach the gateway, the gateway activates and executes fork behavior\n     if (!oneExecutionCanReachGateway) {\n-\n       logger.debug(\"Inclusive gateway cannot be reached by any execution and is activated\");\n \n       // Kill all executions here (except the incoming)\n-      Collection<ExecutionEntity> executionsInGateway = executionEntityManager\n-          .findInactiveExecutionsByActivityIdAndProcessInstanceId(execution.getCurrentActivityId(), execution.getProcessInstanceId());\n+\n+      Collection<ExecutionEntity> executionsInGateway = executionEntityManager.findInactiveExecutionsByActivityIdAndProcessInstanceId(execution.getCurrentActivityId(),\n+                                                                                                                                      execution.getProcessInstanceId());\n       for (ExecutionEntity executionEntityInGateway : executionsInGateway) {\n         if (!executionEntityInGateway.getId().equals(execution.getId())) {\n           commandContext.getHistoryManager().recordActivityEnd(executionEntityInGateway, null);\n@@ -98,4 +97,4 @@ public class InclusiveGatewayActivityBehavior extends GatewayActivityBehavior im\n       commandContext.getAgenda().planTakeOutgoingSequenceFlowsOperation(execution, true);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/1031/InclusiveGatewayActivityBehavior.java\nindex f95031aac6c..123231c5c18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/1031/InclusiveGatewayActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.delegate.DelegateExecution;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/1031/InclusiveGatewayActivityBehavior.java\nindex f95031aac6c..123231c5c18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/1031/InclusiveGatewayActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/1031/InclusiveGatewayActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.delegate.DelegateExecution;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}