{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4389",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4389/WaitingOnLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4389/WaitingOnLock.java\nindex 9cd48c1307f..fea31587091 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4389/WaitingOnLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4389/WaitingOnLock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.query;\n \n import java.util.ArrayList;\n@@ -30,70 +31,70 @@ import org.neo4j.storageengine.api.lock.ResourceType;\n \n class WaitingOnLock extends ExecutingQueryStatus\n {\n-    private final String mode;\n-    private final ResourceType resourceType;\n-    private final long[] resourceIds;\n-    private final long startTimeNanos;\n+  private final String mode;\n+  private final ResourceType resourceType;\n+  private final long[] resourceIds;\n+  private final long startTimeNanos;\n \n-    WaitingOnLock( String mode, ResourceType resourceType, long[] resourceIds, long startTimeNanos )\n-    {\n-        this.mode = mode;\n-        this.resourceType = resourceType;\n-        this.resourceIds = resourceIds;\n-        this.startTimeNanos = startTimeNanos;\n-    }\n+  WaitingOnLock(String mode, ResourceType resourceType, long[] resourceIds, long startTimeNanos)\n+  {\n+    this.mode = mode;\n+    this.resourceType = resourceType;\n+    this.resourceIds = resourceIds;\n+    this.startTimeNanos = startTimeNanos;\n+  }\n \n-    @Override\n-    long waitTimeNanos( long currentTimeNanos )\n-    {\n-        return currentTimeNanos - startTimeNanos;\n-    }\n+  @Override\n+  long waitTimeNanos(long currentTimeNanos)\n+  {\n+    return currentTimeNanos - startTimeNanos;\n+  }\n \n-    @Override\n-    Map<String,Object> toMap( long currentTimeNanos )\n-    {\n-        Map<String,Object> map = new HashMap<>();\n-        map.put( \"lockMode\", mode );\n-        map.put( \"waitTimeMillis\", TimeUnit.NANOSECONDS.toMillis( waitTimeNanos( currentTimeNanos ) ) );\n-        map.put( \"resourceType\", resourceType.toString() );\n-        map.put( \"resourceIds\", resourceIds );\n-        return map;\n-    }\n+  @Override\n+  Map<String, Object> toMap(long currentTimeNanos)\n+  {\n+    Map<String, Object> map = new HashMap<>();\n+    map.put(\"lockMode\", mode);\n+    map.put(\"waitTimeMillis\", TimeUnit.NANOSECONDS.toMillis(waitTimeNanos(currentTimeNanos)));\n+    map.put(\"resourceType\", resourceType.toString());\n+    map.put(\"resourceIds\", resourceIds);\n+    return map;\n+  }\n \n-    @Override\n-    String name()\n-    {\n-        return WAITING_STATE;\n-    }\n+  @Override\n+  String name()\n+  {\n+    return WAITING_STATE;\n+  }\n \n-    @Override\n-    boolean isWaitingOnLocks()\n-    {\n-        return true;\n-    }\n+  @Override\n+  boolean isWaitingOnLocks()\n+  {\n+    return true;\n+  }\n \n-    @Override\n-    List<ActiveLock> waitingOnLocks()\n+  @Override\n+  List<ActiveLock> waitingOnLocks()\n+  {\n+    List<ActiveLock> locks = new ArrayList<>();\n+    switch (mode)\n     {\n-        List<ActiveLock> locks = new ArrayList<>();\n-        switch ( mode )\n-        {\n-        case ActiveLock.EXCLUSIVE_MODE:\n+      case ActiveLock.EXCLUSIVE_MODE:\n \n-            for ( long resourceId : resourceIds )\n-            {\n-                locks.add( ActiveLock.exclusiveLock( resourceType, resourceId ) );\n-            }\n-            break;\n-        case ActiveLock.SHARED_MODE:\n-            for ( long resourceId : resourceIds )\n-            {\n-                locks.add( ActiveLock.sharedLock( resourceType, resourceId ) );\n-            }\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Unsupported type of lock mode: \" + mode );\n+        for (long resourceId : resourceIds)\n+        {\n+          locks.add(ActiveLock.exclusiveLock(resourceType, resourceId));\n+        }\n+        break;\n+      case ActiveLock.SHARED_MODE:\n+        for (long resourceId : resourceIds)\n+        {\n+          locks.add(ActiveLock.sharedLock(resourceType, resourceId));\n         }\n-        return locks;\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Unsupported type of lock mode: \" + mode);\n     }\n+    return locks;\n+  }\n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4389/WaitingOnLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4389/WaitingOnLock.java\nindex 9cd48c1307f..2ecdc27e376 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4389/WaitingOnLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4389/WaitingOnLock.java\n@@ -79,8 +79,7 @@ class WaitingOnLock extends ExecutingQueryStatus\n         switch ( mode )\n         {\n         case ActiveLock.EXCLUSIVE_MODE:\n-\n-            for ( long resourceId : resourceIds )\n+    for ( long resourceId : resourceIds )\n             {\n                 locks.add( ActiveLock.exclusiveLock( resourceType, resourceId ) );\n             }\n@@ -94,6 +93,7 @@ class WaitingOnLock extends ExecutingQueryStatus\n         default:\n             throw new IllegalArgumentException( \"Unsupported type of lock mode: \" + mode );\n         }\n-        return locks;\n+\n+return locks;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "78",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4389/WaitingOnLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4389/WaitingOnLock.java\nindex 9cd48c1307f..e24cd0f850f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4389/WaitingOnLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4389/WaitingOnLock.java\n@@ -24,7 +24,6 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n-\n import org.neo4j.kernel.impl.locking.ActiveLock;\n import org.neo4j.storageengine.api.lock.ResourceType;\n \n@@ -49,8 +48,7 @@ class WaitingOnLock extends ExecutingQueryStatus\n         return currentTimeNanos - startTimeNanos;\n     }\n \n-    @Override\n-    Map<String,Object> toMap( long currentTimeNanos )\n+    @Override Map<String,Object> toMap( long currentTimeNanos )\n     {\n         Map<String,Object> map = new HashMap<>();\n         map.put( \"lockMode\", mode );\n@@ -60,8 +58,7 @@ class WaitingOnLock extends ExecutingQueryStatus\n         return map;\n     }\n \n-    @Override\n-    String name()\n+    @Override String name()\n     {\n         return WAITING_STATE;\n     }\n@@ -72,28 +69,29 @@ class WaitingOnLock extends ExecutingQueryStatus\n         return true;\n     }\n \n-    @Override\n-    List<ActiveLock> waitingOnLocks()\n+    @Override List<ActiveLock> waitingOnLocks()\n     {\n         List<ActiveLock> locks = new ArrayList<>();\n         switch ( mode )\n         {\n         case ActiveLock.EXCLUSIVE_MODE:\n-\n-            for ( long resourceId : resourceIds )\n+            for( long resourceId : resourceIds)\n             {\n                 locks.add( ActiveLock.exclusiveLock( resourceType, resourceId ) );\n             }\n+\n             break;\n         case ActiveLock.SHARED_MODE:\n-            for ( long resourceId : resourceIds )\n+            for( long resourceId : resourceIds)\n             {\n                 locks.add( ActiveLock.sharedLock( resourceType, resourceId ) );\n             }\n+\n             break;\n         default:\n             throw new IllegalArgumentException( \"Unsupported type of lock mode: \" + mode );\n         }\n+\n         return locks;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}