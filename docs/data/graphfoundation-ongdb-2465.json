{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2465",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2465/AsOneStartBranch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2465/AsOneStartBranch.java\nindex 0b8147c7b3b..1ae51a46b2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2465/AsOneStartBranch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2465/AsOneStartBranch.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.ArrayList;\n@@ -48,174 +49,173 @@ import org.neo4j.graphdb.traversal.UniquenessFactory;\n  */\n class AsOneStartBranch implements TraversalBranch\n {\n-    private Iterator<TraversalBranch> branches;\n-    private int expanded;\n-    private final TraversalContext context;\n-    private final InitialBranchState initialState;\n-    private final UniquenessFactory uniqueness;\n-\n-    AsOneStartBranch( TraversalContext context, Iterable<Node> nodes, InitialBranchState initialState, UniquenessFactory uniqueness )\n-    {\n-        this.context = context;\n-        this.initialState = initialState;\n-        this.uniqueness = uniqueness;\n-        this.branches = toBranches( nodes );\n-    }\n-\n-    private Iterator<TraversalBranch> toBranches( Iterable<Node> nodes )\n-    {\n-        if ( uniqueness.eagerStartBranches() )\n-        {\n-            List<TraversalBranch> result = new ArrayList<>();\n-            for ( Node node : nodes )\n-            {\n-                result.add( new StartNodeTraversalBranch( context, this, node, initialState ) );\n-            }\n-            return result.iterator();\n-        }\n-        else\n-        {\n-            return new TraversalBranchIterator( nodes.iterator() );\n-        }\n-    }\n-\n-    @Override\n-    public TraversalBranch parent()\n-    {\n-        return null;\n-    }\n-\n-    @Override\n-    public int length()\n-    {\n-        return -1;\n-    }\n-\n-    @Override\n-    public Node endNode()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public Relationship lastRelationship()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public TraversalBranch next( PathExpander expander, TraversalContext metadata )\n-    {\n-        if ( branches.hasNext() )\n-        {\n-            expanded++;\n-            return branches.next().next( expander, metadata );\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public int expanded()\n-    {\n-        return expanded;\n-    }\n+  private Iterator<TraversalBranch> branches;\n+  private int expanded;\n+  private final TraversalContext context;\n+  private final InitialBranchState initialState;\n+  private final UniquenessFactory uniqueness;\n+\n+  AsOneStartBranch(TraversalContext context, Iterable<Node> nodes, InitialBranchState initialState, UniquenessFactory uniqueness)\n+  {\n+    this.context = context;\n+    this.initialState = initialState;\n+    this.uniqueness = uniqueness;\n+    this.branches = toBranches(nodes);\n+  }\n+\n+  private Iterator<TraversalBranch> toBranches(Iterable<Node> nodes)\n+  {\n+    if (uniqueness.eagerStartBranches())\n+    {\n+      List<TraversalBranch> result = new ArrayList<>();\n+      for (Node node : nodes)\n+      {\n+        result.add(new StartNodeTraversalBranch(context, this, node, initialState));\n+      }\n+      return result.iterator();\n+    } else\n+    {\n+      return new TraversalBranchIterator(nodes.iterator());\n+    }\n+  }\n+\n+  @Override\n+  public TraversalBranch parent()\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return -1;\n+  }\n+\n+  @Override\n+  public Node endNode()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public Relationship lastRelationship()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TraversalBranch next(PathExpander expander, TraversalContext metadata)\n+  {\n+    if (branches.hasNext())\n+    {\n+      expanded++;\n+      return branches.next().next(expander, metadata);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public int expanded()\n+  {\n+    return expanded;\n+  }\n+\n+  @Override\n+  public boolean continues()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean includes()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public void evaluation(Evaluation eval)\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public void initialize(PathExpander expander, TraversalContext metadata)\n+  {\n+  }\n+\n+  @Override\n+  public Node startNode()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> relationships()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public boolean continues()\n-    {\n-        return true;\n-    }\n+  @Override\n+  public Iterable<Relationship> reverseRelationships()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public boolean includes()\n-    {\n-        return false;\n-    }\n+  @Override\n+  public Iterable<Node> nodes()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public void evaluation( Evaluation eval )\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  @Override\n+  public Iterable<Node> reverseNodes()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public void initialize( PathExpander expander, TraversalContext metadata )\n-    {\n-    }\n-\n-    @Override\n-    public Node startNode()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  @Override\n+  public Iterator<PropertyContainer> iterator()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public Iterable<Relationship> relationships()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  @Override\n+  public void prune()\n+  {\n+    branches = Collections.<TraversalBranch>emptyList().iterator();\n+  }\n \n-    @Override\n-    public Iterable<Relationship> reverseRelationships()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  @Override\n+  public Object state()\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public Iterable<Node> nodes()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n+  private class TraversalBranchIterator implements Iterator<TraversalBranch>\n+  {\n+    private final Iterator<Node> nodeIterator;\n \n-    @Override\n-    public Iterable<Node> reverseNodes()\n+    TraversalBranchIterator(Iterator<Node> nodeIterator)\n     {\n-        throw new UnsupportedOperationException();\n+      this.nodeIterator = nodeIterator;\n     }\n \n     @Override\n-    public Iterator<PropertyContainer> iterator()\n+    public boolean hasNext()\n     {\n-        throw new UnsupportedOperationException();\n+      return nodeIterator.hasNext();\n     }\n \n     @Override\n-    public void prune()\n+    public TraversalBranch next()\n     {\n-        branches = Collections.<TraversalBranch>emptyList().iterator();\n+      return new StartNodeTraversalBranch(context, AsOneStartBranch.this, nodeIterator.next(), initialState);\n     }\n \n     @Override\n-    public Object state()\n-    {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    private class TraversalBranchIterator implements Iterator<TraversalBranch>\n+    public void remove()\n     {\n-        private final Iterator<Node> nodeIterator;\n-\n-        TraversalBranchIterator( Iterator<Node> nodeIterator )\n-        {\n-            this.nodeIterator = nodeIterator;\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-        {\n-            return nodeIterator.hasNext();\n-        }\n-\n-        @Override\n-        public TraversalBranch next()\n-        {\n-            return new StartNodeTraversalBranch( context, AsOneStartBranch.this, nodeIterator.next(), initialState );\n-        }\n-\n-        @Override\n-        public void remove()\n-        {\n-            nodeIterator.remove();\n-        }\n+      nodeIterator.remove();\n     }\n+  }\n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "186",
                    "column": "48",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2465/AsOneStartBranch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2465/AsOneStartBranch.java\nindex 0b8147c7b3b..158bb37d848 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2465/AsOneStartBranch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2465/AsOneStartBranch.java\n@@ -71,7 +71,8 @@ class AsOneStartBranch implements TraversalBranch\n             {\n                 result.add( new StartNodeTraversalBranch( context, this, node, initialState ) );\n             }\n-            return result.iterator();\n+\n+return result.iterator();\n         }\n         else\n         {\n@@ -182,7 +183,7 @@ class AsOneStartBranch implements TraversalBranch\n     @Override\n     public void prune()\n     {\n-        branches = Collections.<TraversalBranch>emptyList().iterator();\n+        branches = Collections.<TraversalBranch> emptyList().iterator();\n     }\n \n     @Override\n@@ -218,4 +219,4 @@ class AsOneStartBranch implements TraversalBranch\n             nodeIterator.remove();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}