{
    "project_name": "DaGeRe-peass",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 350).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   }\n\n   private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n      ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n\n      KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 371).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/64/TraceGeneratorStarter.java\nindex d10f581f903..83d1b6791a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/64/TraceGeneratorStarter.java\n@@ -74,7 +74,7 @@ public class TraceGeneratorStarter implements Callable<Void> {\n       return null;\n    }\n \n-   private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n+\t\t\tprivate KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n       ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n \n       KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/64/TraceGeneratorStarter.java\nindex d10f581f903..baee6fc60f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/64/TraceGeneratorStarter.java\n@@ -38,78 +38,80 @@ import picocli.CommandLine.Option;\n @Command(description = \"Generates traces without any additional information\", name = \"generateTraces\")\n public class TraceGeneratorStarter implements Callable<Void> {\n \n-   private static final Logger LOG = LogManager.getLogger(TraceGeneratorStarter.class);\n+  private static final Logger LOG = LogManager.getLogger(TraceGeneratorStarter.class);\n \n-   @Mixin\n-   protected ExecutionConfigMixin executionMixin;\n+  @Mixin\n+  protected ExecutionConfigMixin executionMixin;\n \n-   @Option(names = { \"-folder\", \"--folder\" }, description = \"Folder of the project that should be analyzed\", required = true)\n-   protected File projectFolder;\n+  @Option(names = {\"-folder\", \"--folder\"}, description = \"Folder of the project that should be analyzed\", required = true)\n+  protected File projectFolder;\n \n-   @Option(names = { \"-dependencyfile\", \"--dependencyfile\" }, description = \"Path to the dependencyfile\")\n-   protected File dependencyFile;\n+  @Option(names = {\"-dependencyfile\", \"--dependencyfile\"}, description = \"Path to the dependencyfile\")\n+  protected File dependencyFile;\n \n-   public static void main(final String[] args) {\n-      final CommandLine commandLine = new CommandLine(new TraceGeneratorStarter());\n-      commandLine.execute(args);\n-   }\n+  public static void main(final String[] args) {\n+    final CommandLine commandLine = new CommandLine(new TraceGeneratorStarter());\n+    commandLine.execute(args);\n+  }\n \n-   @Override\n-   public Void call() throws Exception {\n-      Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n-      String newestVersion = dependencies.getNewestVersion();\n+  @Override\n+  public Void call() throws Exception {\n+    Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+    String newestVersion = dependencies.getNewestVersion();\n \n-      Version version = dependencies.getVersions().get(newestVersion);\n-      TestSet tests = version.getTests();\n+    Version version = dependencies.getVersions().get(newestVersion);\n+    TestSet tests = version.getTests();\n \n-      GitUtils.reset(projectFolder);\n-      PeassFolders folders = new PeassFolders(projectFolder);\n-      \n-      KiekerResultManager resultsManager = runTests(newestVersion, tests, folders);\n+    GitUtils.reset(projectFolder);\n+    PeassFolders folders = new PeassFolders(projectFolder);\n \n-      for (TestCase testcase : tests.getTests()) {\n-         writeTestcase(newestVersion, folders, resultsManager, testcase);\n-      }\n+    KiekerResultManager resultsManager = runTests(newestVersion, tests, folders);\n \n-      return null;\n-   }\n+    for (TestCase testcase : tests.getTests()) {\n+      writeTestcase(newestVersion, folders, resultsManager, testcase);\n+    }\n \n-   private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n-      ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n+    return null;\n+  }\n \n-      KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n-      resultsManager.executeKoPeMeKiekerRun(tests, newestVersion);\n-      return resultsManager;\n-   }\n+  private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders)\n+      throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException,\n+      NoSuchMethodException, SecurityException {\n+    ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n \n-   private void writeTestcase(final String newestVersion, final PeassFolders folders, final KiekerResultManager resultsManager, final TestCase testcase)\n-         throws FileNotFoundException, IOException, XmlPullParserException, ViewNotFoundException {\n-      final File moduleResultFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n-      final File kiekerResultFolder = KiekerFolderUtil.getClazzMethodFolder(testcase, moduleResultFolder)[0];\n+    KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n+    resultsManager.executeKoPeMeKiekerRun(tests, newestVersion);\n+    return resultsManager;\n+  }\n \n-      final long size = FileUtils.sizeOfDirectory(kiekerResultFolder);\n-      final long sizeInMB = size / (1024 * 1024);\n+  private void writeTestcase(final String newestVersion, final PeassFolders folders, final KiekerResultManager resultsManager, final TestCase testcase)\n+      throws FileNotFoundException, IOException, XmlPullParserException, ViewNotFoundException {\n+    final File moduleResultFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n+    final File kiekerResultFolder = KiekerFolderUtil.getClazzMethodFolder(testcase, moduleResultFolder)[0];\n \n-      if (sizeInMB < CalledMethodLoader.TRACE_MAX_SIZE_IN_MB) {\n-         LOG.debug(\"Writing \" + testcase);\n-         final ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), resultsManager.getExecutor().getModules());\n-         final List<TraceElement> shortTrace = new CalledMethodLoader(kiekerResultFolder, mapping).getShortTrace(\"\");\n+    final long size = FileUtils.sizeOfDirectory(kiekerResultFolder);\n+    final long sizeInMB = size / (1024 * 1024);\n \n-         writeTrace(newestVersion, testcase, shortTrace);\n-      } else {\n-         LOG.info(\"Not writing \" + testcase + \" since size is \" + sizeInMB + \" mb\");\n-      }\n-   }\n+    if (sizeInMB < CalledMethodLoader.TRACE_MAX_SIZE_IN_MB) {\n+      LOG.debug(\"Writing \" + testcase);\n+      final ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), resultsManager.getExecutor().getModules());\n+      final List<TraceElement> shortTrace = new CalledMethodLoader(kiekerResultFolder, mapping).getShortTrace(\"\");\n \n-   private void writeTrace(final String newestVersion, final TestCase testcase, final List<TraceElement> shortTrace) throws IOException {\n-      ResultsFolders results = new ResultsFolders(new File(\"results\"), projectFolder.getName());\n+      writeTrace(newestVersion, testcase, shortTrace);\n+    } else {\n+      LOG.info(\"Not writing \" + testcase + \" since size is \" + sizeInMB + \" mb\");\n+    }\n+  }\n \n-      String shortVersion = TraceWriter.getShortVersion(newestVersion);\n-      File methodDir = results.getViewMethodDir(newestVersion, testcase);\n+  private void writeTrace(final String newestVersion, final TestCase testcase, final List<TraceElement> shortTrace) throws IOException {\n+    ResultsFolders results = new ResultsFolders(new File(\"results\"), projectFolder.getName());\n \n-      final File methodExpandedTrace = new File(methodDir, shortVersion + OneTraceGenerator.METHOD_EXPANDED);\n-      Files.write(methodExpandedTrace.toPath(), shortTrace\n-            .stream()\n-            .map(value -> value.toString()).collect(Collectors.toList()));\n-   }\n+    String shortVersion = TraceWriter.getShortVersion(newestVersion);\n+    File methodDir = results.getViewMethodDir(newestVersion, testcase);\n+\n+    final File methodExpandedTrace = new File(methodDir, shortVersion + OneTraceGenerator.METHOD_EXPANDED);\n+    Files.write(methodExpandedTrace.toPath(), shortTrace\n+        .stream()\n+        .map(value -> value.toString()).collect(Collectors.toList()));\n+  }\n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 350).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/64/TraceGeneratorStarter.java\nindex d10f581f903..10d3099b398 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/64/TraceGeneratorStarter.java\n@@ -38,7 +38,7 @@ import picocli.CommandLine.Option;\n @Command(description = \"Generates traces without any additional information\", name = \"generateTraces\")\n public class TraceGeneratorStarter implements Callable<Void> {\n \n-   private static final Logger LOG = LogManager.getLogger(TraceGeneratorStarter.class);\n+\tprivate static final Logger LOG = LogManager.getLogger(TraceGeneratorStarter.class);\n \n    @Mixin\n    protected ExecutionConfigMixin executionMixin;\n@@ -50,13 +50,13 @@ public class TraceGeneratorStarter implements Callable<Void> {\n    protected File dependencyFile;\n \n    public static void main(final String[] args) {\n-      final CommandLine commandLine = new CommandLine(new TraceGeneratorStarter());\n+\tfinal CommandLine commandLine = new CommandLine(new TraceGeneratorStarter());\n       commandLine.execute(args);\n-   }\n+\t}\n \n    @Override\n    public Void call() throws Exception {\n-      Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+\tDependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n       String newestVersion = dependencies.getNewestVersion();\n \n       Version version = dependencies.getVersions().get(newestVersion);\n@@ -64,52 +64,48 @@ public class TraceGeneratorStarter implements Callable<Void> {\n \n       GitUtils.reset(projectFolder);\n       PeassFolders folders = new PeassFolders(projectFolder);\n-      \n-      KiekerResultManager resultsManager = runTests(newestVersion, tests, folders);\n-\n-      for (TestCase testcase : tests.getTests()) {\n-         writeTestcase(newestVersion, folders, resultsManager, testcase);\n-      }\n+KiekerResultManager resultsManager = runTests(newestVersion, tests, folders);\n+for (TestCase testcase : tests.getTests()) {\n+\twriteTestcase(newestVersion, folders, resultsManager, testcase);\n+\t}\n \n       return null;\n-   }\n+\t}\n \n    private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n-      ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n+\tExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n \n       KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n       resultsManager.executeKoPeMeKiekerRun(tests, newestVersion);\n       return resultsManager;\n-   }\n+\t}\n \n-   private void writeTestcase(final String newestVersion, final PeassFolders folders, final KiekerResultManager resultsManager, final TestCase testcase)\n-         throws FileNotFoundException, IOException, XmlPullParserException, ViewNotFoundException {\n-      final File moduleResultFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n+   private void writeTestcase(final String newestVersion, final PeassFolders folders, final KiekerResultManager resultsManager, final TestCase testcase) throws FileNotFoundException, IOException, XmlPullParserException, ViewNotFoundException {\n+\tfinal File moduleResultFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n       final File kiekerResultFolder = KiekerFolderUtil.getClazzMethodFolder(testcase, moduleResultFolder)[0];\n \n       final long size = FileUtils.sizeOfDirectory(kiekerResultFolder);\n       final long sizeInMB = size / (1024 * 1024);\n \n       if (sizeInMB < CalledMethodLoader.TRACE_MAX_SIZE_IN_MB) {\n-         LOG.debug(\"Writing \" + testcase);\n+\tLOG.debug(\"Writing \" + testcase);\n          final ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), resultsManager.getExecutor().getModules());\n          final List<TraceElement> shortTrace = new CalledMethodLoader(kiekerResultFolder, mapping).getShortTrace(\"\");\n \n          writeTrace(newestVersion, testcase, shortTrace);\n-      } else {\n-         LOG.info(\"Not writing \" + testcase + \" since size is \" + sizeInMB + \" mb\");\n-      }\n-   }\n+\t} else {\n+\tLOG.info(\"Not writing \" + testcase + \" since size is \" + sizeInMB + \" mb\");\n+\t}\n+\t}\n \n    private void writeTrace(final String newestVersion, final TestCase testcase, final List<TraceElement> shortTrace) throws IOException {\n-      ResultsFolders results = new ResultsFolders(new File(\"results\"), projectFolder.getName());\n+\tResultsFolders results = new ResultsFolders(new File(\"results\"), projectFolder.getName());\n \n       String shortVersion = TraceWriter.getShortVersion(newestVersion);\n       File methodDir = results.getViewMethodDir(newestVersion, testcase);\n \n       final File methodExpandedTrace = new File(methodDir, shortVersion + OneTraceGenerator.METHOD_EXPANDED);\n-      Files.write(methodExpandedTrace.toPath(), shortTrace\n-            .stream()\n+      Files.write(methodExpandedTrace.toPath(), shortTrace.stream()\n             .map(value -> value.toString()).collect(Collectors.toList()));\n-   }\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "column": "16",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "44",
                    "column": "16",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 348).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/64/TraceGeneratorStarter.java\nindex d10f581f903..7e9c4619709 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/64/TraceGeneratorStarter.java\n@@ -8,12 +8,10 @@ import java.nio.file.Files;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import de.dagere.peass.config.ExecutionConfig;\n import de.dagere.peass.dependency.KiekerResultManager;\n import de.dagere.peass.dependency.PeassFolders;\n@@ -35,81 +33,66 @@ import picocli.CommandLine.Command;\n import picocli.CommandLine.Mixin;\n import picocli.CommandLine.Option;\n \n-@Command(description = \"Generates traces without any additional information\", name = \"generateTraces\")\n-public class TraceGeneratorStarter implements Callable<Void> {\n-\n-   private static final Logger LOG = LogManager.getLogger(TraceGeneratorStarter.class);\n-\n-   @Mixin\n-   protected ExecutionConfigMixin executionMixin;\n-\n-   @Option(names = { \"-folder\", \"--folder\" }, description = \"Folder of the project that should be analyzed\", required = true)\n-   protected File projectFolder;\n-\n-   @Option(names = { \"-dependencyfile\", \"--dependencyfile\" }, description = \"Path to the dependencyfile\")\n-   protected File dependencyFile;\n-\n-   public static void main(final String[] args) {\n-      final CommandLine commandLine = new CommandLine(new TraceGeneratorStarter());\n-      commandLine.execute(args);\n-   }\n-\n-   @Override\n-   public Void call() throws Exception {\n-      Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n-      String newestVersion = dependencies.getNewestVersion();\n-\n-      Version version = dependencies.getVersions().get(newestVersion);\n-      TestSet tests = version.getTests();\n-\n-      GitUtils.reset(projectFolder);\n-      PeassFolders folders = new PeassFolders(projectFolder);\n-      \n-      KiekerResultManager resultsManager = runTests(newestVersion, tests, folders);\n-\n-      for (TestCase testcase : tests.getTests()) {\n-         writeTestcase(newestVersion, folders, resultsManager, testcase);\n-      }\n-\n-      return null;\n-   }\n-\n-   private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n-      ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n-\n-      KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n-      resultsManager.executeKoPeMeKiekerRun(tests, newestVersion);\n-      return resultsManager;\n-   }\n-\n-   private void writeTestcase(final String newestVersion, final PeassFolders folders, final KiekerResultManager resultsManager, final TestCase testcase)\n-         throws FileNotFoundException, IOException, XmlPullParserException, ViewNotFoundException {\n-      final File moduleResultFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n-      final File kiekerResultFolder = KiekerFolderUtil.getClazzMethodFolder(testcase, moduleResultFolder)[0];\n-\n-      final long size = FileUtils.sizeOfDirectory(kiekerResultFolder);\n-      final long sizeInMB = size / (1024 * 1024);\n-\n-      if (sizeInMB < CalledMethodLoader.TRACE_MAX_SIZE_IN_MB) {\n-         LOG.debug(\"Writing \" + testcase);\n-         final ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), resultsManager.getExecutor().getModules());\n-         final List<TraceElement> shortTrace = new CalledMethodLoader(kiekerResultFolder, mapping).getShortTrace(\"\");\n-\n-         writeTrace(newestVersion, testcase, shortTrace);\n-      } else {\n-         LOG.info(\"Not writing \" + testcase + \" since size is \" + sizeInMB + \" mb\");\n-      }\n-   }\n-\n-   private void writeTrace(final String newestVersion, final TestCase testcase, final List<TraceElement> shortTrace) throws IOException {\n-      ResultsFolders results = new ResultsFolders(new File(\"results\"), projectFolder.getName());\n-\n-      String shortVersion = TraceWriter.getShortVersion(newestVersion);\n-      File methodDir = results.getViewMethodDir(newestVersion, testcase);\n \n-      final File methodExpandedTrace = new File(methodDir, shortVersion + OneTraceGenerator.METHOD_EXPANDED);\n-      Files.write(methodExpandedTrace.toPath(), shortTrace\n-            .stream()\n-            .map(value -> value.toString()).collect(Collectors.toList()));\n-   }\n-}\n+@Command(description = \"Generates traces without any additional information\", name = \"generateTraces\") public class TraceGeneratorStarter implements Callable<Void> {\n+ private static final Logger LOG = LogManager.getLogger(TraceGeneratorStarter.class);\n+\n+ @Mixin protected ExecutionConfigMixin executionMixin;\n+\n+ @Option(names ={\"-folder\", \"--folder\"}, description = \"Folder of the project that should be analyzed\", required = true) protected File projectFolder;\n+\n+ @Option(names ={\"-dependencyfile\", \"--dependencyfile\"}, description = \"Path to the dependencyfile\") protected File dependencyFile;\n+\n+ public static void main(final String[] args) {\n+  final CommandLine commandLine = new CommandLine(new TraceGeneratorStarter());\n+  commandLine.execute(args);\n+ }\n+\n+ @Override\n+ public Void call() throws Exception {\n+  Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+  String newestVersion = dependencies.getNewestVersion();\n+  Version version = dependencies.getVersions().get(newestVersion);\n+  TestSet tests = version.getTests();\n+  GitUtils.reset(projectFolder);\n+\n+  PeassFolders folders = new PeassFolders(projectFolder);\n+  KiekerResultManager resultsManager = runTests(newestVersion, tests, folders);\n+  for (TestCase testcase : tests.getTests()) {\n+   writeTestcase(newestVersion, folders, resultsManager, testcase);\n+  }\n+  return null;\n+ }\n+\n+ private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n+  ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n+  KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n+  resultsManager.executeKoPeMeKiekerRun(tests, newestVersion);\n+  return resultsManager;\n+ }\n+\n+ private void writeTestcase(final String newestVersion, final PeassFolders folders, final KiekerResultManager resultsManager, final TestCase testcase) throws FileNotFoundException, IOException, XmlPullParserException, ViewNotFoundException {\n+  final File moduleResultFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n+  final File kiekerResultFolder = KiekerFolderUtil.getClazzMethodFolder(testcase, moduleResultFolder)[0];\n+  final long size = FileUtils.sizeOfDirectory(kiekerResultFolder);\n+  final long sizeInMB = size / (1024 * 1024);\n+  if (sizeInMB < CalledMethodLoader.TRACE_MAX_SIZE_IN_MB) {\n+   LOG.debug(\"Writing \" + testcase);\n+\n+   final ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), resultsManager.getExecutor().getModules());\n+   final List<TraceElement> shortTrace = new CalledMethodLoader(kiekerResultFolder, mapping).getShortTrace(\"\");\n+   writeTrace(newestVersion, testcase, shortTrace);\n+  } else {\n+   LOG.info(\"Not writing \" + testcase + \" since size is \" + sizeInMB + \" mb\");\n+  }\n+ }\n+\n+ private void writeTrace(final String newestVersion, final TestCase testcase, final List<TraceElement> shortTrace) throws IOException {\n+  ResultsFolders results = new ResultsFolders(new File(\"results\"), projectFolder.getName());\n+  String shortVersion = TraceWriter.getShortVersion(newestVersion);\n+  File methodDir = results.getViewMethodDir(newestVersion, testcase);\n+  final File methodExpandedTrace = new File(methodDir, shortVersion + OneTraceGenerator.METHOD_EXPANDED);\n+  Files.write(methodExpandedTrace.toPath(), shortTrace.stream().map(value -> value.toString()).collect(Collectors.toList()));\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 135
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "75",
                    "column": "4",
                    "severity": "error",
                    "message": "'}' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 363).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/64/TraceGeneratorStarter.java\nindex d10f581f903..d3d83756595 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/64/TraceGeneratorStarter.java\n@@ -72,10 +72,10 @@ public class TraceGeneratorStarter implements Callable<Void> {\n       }\n \n       return null;\n-   }\n+   }private\n \n-   private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n-      ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n+\t\t\tKiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n+       ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n \n       KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n       resultsManager.executeKoPeMeKiekerRun(tests, newestVersion);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 371).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/64/TraceGeneratorStarter.java\nindex d10f581f903..83d1b6791a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/64/TraceGeneratorStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/64/TraceGeneratorStarter.java\n@@ -74,7 +74,7 @@ public class TraceGeneratorStarter implements Callable<Void> {\n       return null;\n    }\n \n-   private KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n+\t\t\tprivate KiekerResultManager runTests(final String newestVersion, final TestSet tests, final PeassFolders folders) throws IOException, XmlPullParserException, InterruptedException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n       ExecutionConfig executionConfig = new ExecutionConfig(executionMixin);\n \n       KiekerResultManager resultsManager = new KiekerResultManager(folders, executionConfig, new EnvironmentVariables());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}