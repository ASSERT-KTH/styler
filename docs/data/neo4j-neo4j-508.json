{
    "project_name": "neo4j-neo4j",
    "error_id": "508",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "161",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/508/NodeLabelsCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/508/NodeLabelsCache.java\nindex a3bdb90f27c..a41feae7c8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/508/NodeLabelsCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/508/NodeLabelsCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.cache;\n \n import java.util.concurrent.atomic.AtomicLong;\n@@ -38,13 +39,13 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n         private final long[] labelScratch;\n         private final Bits labelBits;\n         private final long[] fieldScratch = new long[1];\n-        private final Bits fieldBits = Bits.bitsFromLongs( fieldScratch );\n+        private final Bits fieldBits = Bits.bitsFromLongs(fieldScratch);\n         private long[] target = new long[20];\n \n-        public Client( int worstCaseLongsNeeded )\n+        public Client(int worstCaseLongsNeeded)\n         {\n             this.labelScratch = new long[worstCaseLongsNeeded];\n-            this.labelBits = Bits.bitsFromLongs( labelScratch );\n+            this.labelBits = Bits.bitsFromLongs(labelScratch);\n         }\n     }\n \n@@ -55,18 +56,18 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n     private final int worstCaseLongsNeeded;\n     private final Client putClient;\n \n-    public NodeLabelsCache( NumberArrayFactory cacheFactory, long highNodeId, int highLabelId, MemoryTracker memoryTracker )\n+    public NodeLabelsCache(NumberArrayFactory cacheFactory, long highNodeId, int highLabelId, MemoryTracker memoryTracker)\n     {\n-        this( cacheFactory, highNodeId, highLabelId, 2_000_000, memoryTracker );\n+        this(cacheFactory, highNodeId, highLabelId, 2_000_000, memoryTracker);\n     }\n \n-    public NodeLabelsCache( NumberArrayFactory cacheFactory, long highNodeId, int highLabelId, int spillOverChunkSize, MemoryTracker memoryTracker )\n+    public NodeLabelsCache(NumberArrayFactory cacheFactory, long highNodeId, int highLabelId, int spillOverChunkSize, MemoryTracker memoryTracker)\n     {\n-        this.cache = cacheFactory.newLongArray( highNodeId, 0, memoryTracker );\n-        this.spillOver = cacheFactory.newDynamicLongArray( spillOverChunkSize, 0, memoryTracker ); // expect way less of these\n-        this.bitsPerLabel = max( Integer.SIZE - numberOfLeadingZeros( highLabelId ), 1 );\n+        this.cache = cacheFactory.newLongArray(highNodeId, 0, memoryTracker);\n+        this.spillOver = cacheFactory.newDynamicLongArray(spillOverChunkSize, 0, memoryTracker); // expect way less of these\n+        this.bitsPerLabel = max(Integer.SIZE - numberOfLeadingZeros(highLabelId), 1);\n         this.worstCaseLongsNeeded = ((bitsPerLabel * (highLabelId + 1 /*length slot*/)) - 1) / Long.SIZE + 1;\n-        this.putClient = new Client( worstCaseLongsNeeded );\n+        this.putClient = new Client(worstCaseLongsNeeded);\n     }\n \n     /**\n@@ -76,55 +77,54 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n      */\n     public Client newClient()\n     {\n-        return new Client( worstCaseLongsNeeded );\n+        return new Client(worstCaseLongsNeeded);\n     }\n \n-    public void put( long nodeId, long[] labelIds )\n+    public void put(long nodeId, long[] labelIds)\n     {\n-        put( putClient, nodeId, labelIds );\n+        put(putClient, nodeId, labelIds);\n     }\n \n     /**\n      * Keeps label ids for the given node id. Labels ids are int[] really, but by accident they arrive\n      * from the store disguised as long[]. When looping over them there can be assumed that they are ints.\n-     *\n+     * <p>\n      * The format is that the longs in this cache are divided up into bit slots of size whatever bitsPerLabel is.\n      * The first slot will contain number of labels for this node. If those labels fit in the long, after the\n      * length slot, they will be stored there. Otherwise the rest of the bits will point to the index into\n      * the spillOver array.\n-     *\n+     * <p>\n      * This method may only be called by a single thread, putting from multiple threads may cause undeterministic\n      * behaviour.\n      */\n-    public void put( Client putClient, long nodeId, long[] labelIds )\n+    public void put(Client putClient, long nodeId, long[] labelIds)\n     {\n-        putClient.labelBits.clear( true );\n-        putClient.labelBits.put( labelIds.length, bitsPerLabel );\n-        for ( long labelId : labelIds )\n+        putClient.labelBits.clear(true);\n+        putClient.labelBits.put(labelIds.length, bitsPerLabel);\n+        for (long labelId : labelIds)\n         {\n-            putClient.labelBits.put( (int) labelId, bitsPerLabel );\n+            putClient.labelBits.put((int) labelId, bitsPerLabel);\n         }\n \n         int longsInUse = putClient.labelBits.longsInUse();\n         assert longsInUse > 0 : \"Uhm\";\n-        if ( longsInUse == 1 )\n+        if (longsInUse == 1)\n         {   // We only require one long, so put it right in there\n-            cache.set( nodeId, putClient.labelScratch[0] );\n-        }\n-        else\n+            cache.set(nodeId, putClient.labelScratch[0]);\n+        } else\n         {   // Now it gets tricky, we have to spill over into another array\n             // So create the reference\n-            putClient.fieldBits.clear( true );\n-            putClient.fieldBits.put( labelIds.length, bitsPerLabel );\n-            long spillOverIndex = this.spillOverIndex.getAndAdd( longsInUse );\n-            putClient.fieldBits.put( spillOverIndex, Long.SIZE - bitsPerLabel );\n-            cache.set( nodeId, putClient.fieldBits.getLongs()[0] );\n+            putClient.fieldBits.clear(true);\n+            putClient.fieldBits.put(labelIds.length, bitsPerLabel);\n+            long spillOverIndex = this.spillOverIndex.getAndAdd(longsInUse);\n+            putClient.fieldBits.put(spillOverIndex, Long.SIZE - bitsPerLabel);\n+            cache.set(nodeId, putClient.fieldBits.getLongs()[0]);\n \n             // And set the longs in the spill over array. For simplicity we put the encoded bits as they\n             // are right into the spill over array, where the first slot will have the length \"again\".\n-            for ( int i = 0; i < longsInUse; i++ )\n+            for (int i = 0; i < longsInUse; i++)\n             {\n-                spillOver.set( spillOverIndex++, putClient.labelScratch[i] );\n+                spillOver.set(spillOverIndex++, putClient.labelScratch[i]);\n             }\n         }\n     }\n@@ -132,69 +132,68 @@ public class NodeLabelsCache implements MemoryStatsVisitor.Visitable, AutoClosea\n     /**\n      * Write labels for a node into {@code target}. If target isn't big enough it will grow.\n      * The target, intact or grown, will be returned.\n-     *\n+     * <p>\n      * Multiple threads may call this method simultaneously, given that they do so with each their own {@link Client}\n      * instance.\n      */\n-    public long[] get( Client client, long nodeId )\n+    public long[] get(Client client, long nodeId)\n     {\n         // make this field available to our Bits instance, hackish? meh\n-        client.fieldBits.clear( false );\n-        client.fieldScratch[0] = cache.get( nodeId );\n-        if ( client.fieldScratch[0] == 0 )\n+        client.fieldBits.clear(false);\n+        client.fieldScratch[0] = cache.get(nodeId);\n+        if (client.fieldScratch[0] == 0)\n         {   // Nothing here\n             client.target[0] = -1; // mark the end\n             return client.target;\n         }\n \n-        int length = client.fieldBits.getInt( bitsPerLabel );\n+        int length = client.fieldBits.getInt(bitsPerLabel);\n         int longsInUse = ((bitsPerLabel * (length + 1)) - 1) / Long.SIZE + 1;\n-        client.target = ensureCapacity( client.target, length );\n-        if ( longsInUse == 1 )\n+        client.target = ensureCapacity(client.target, length);\n+        if (longsInUse == 1)\n         {\n-            decode( client.fieldBits, length, client.target );\n-        }\n-        else\n+            decode(client.fieldBits, length, client.target);\n+        } else\n         {\n             // Read data from spill over cache into the label bits array for decoding\n-            long spillOverIndex = client.fieldBits.getLong( Long.SIZE - bitsPerLabel );\n-            client.labelBits.clear( false );\n-            for ( int i = 0; i < longsInUse; i++ )\n+            long spillOverIndex = client.fieldBits.getLong(Long.SIZE - bitsPerLabel);\n+            client.labelBits.clear(false);\n+            for (int i = 0; i < longsInUse; i++)\n             {\n-                client.labelScratch[i] = spillOver.get( spillOverIndex + i );\n+                client.labelScratch[i] = spillOver.get(spillOverIndex + i);\n             }\n-            client.labelBits.getInt( bitsPerLabel ); // first one ignored, since it's just the length\n-            decode( client.labelBits, length, client.target );\n+            client.labelBits.getInt(bitsPerLabel); // first one ignored, since it's just the length\n+            decode(client.labelBits, length, client.target);\n         }\n \n         return client.target;\n     }\n \n     @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n+    public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n     {\n-        cache.acceptMemoryStatsVisitor( visitor );\n-        spillOver.acceptMemoryStatsVisitor( visitor );\n+        cache.acceptMemoryStatsVisitor(visitor);\n+        spillOver.acceptMemoryStatsVisitor(visitor);\n     }\n \n-    private void decode( Bits bits, int length, long[] target )\n+    private void decode(Bits bits, int length, long[] target)\n     {\n-        for ( int i = 0; i < length; i++ )\n+        for (int i = 0; i < length; i++)\n         {\n-            target[i] = bits.getInt( bitsPerLabel );\n+            target[i] = bits.getInt(bitsPerLabel);\n         }\n \n-        if ( target.length > length )\n+        if (target.length > length)\n         {   // we have to mark the end here, since the target array is larger\n             target[length] = -1;\n         }\n     }\n \n-    private static long[] ensureCapacity( long[] target, int capacity )\n+    private static long[] ensureCapacity(long[] target, int capacity)\n     {\n         return capacity > target.length\n-                ? new long[capacity]\n-                : target;\n+          ? new long[capacity]\n+          : target;\n     }\n \n     @Override\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}