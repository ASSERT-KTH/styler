{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2695",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2695/BackupStrategyCoordinator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2695/BackupStrategyCoordinator.java\nindex 2d11f581872..e48f119de1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2695/BackupStrategyCoordinator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2695/BackupStrategyCoordinator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup.impl;\n \n import java.io.File;\n@@ -43,106 +44,105 @@ import static java.lang.String.format;\n  */\n class BackupStrategyCoordinator\n {\n-    private static final int STATUS_CC_ERROR = 2;\n-    private static final int STATUS_CC_INCONSISTENT = 3;\n+  private static final int STATUS_CC_ERROR = 2;\n+  private static final int STATUS_CC_INCONSISTENT = 3;\n+\n+  private ConsistencyCheckService consistencyCheckService;\n+  private final OutsideWorld outsideWorld;\n+  private final LogProvider logProvider;\n+  private final ProgressMonitorFactory progressMonitorFactory;\n+  private final List<BackupStrategyWrapper> strategies;\n \n-    private ConsistencyCheckService consistencyCheckService;\n-    private final OutsideWorld outsideWorld;\n-    private final LogProvider logProvider;\n-    private final ProgressMonitorFactory progressMonitorFactory;\n-    private final List<BackupStrategyWrapper> strategies;\n+  BackupStrategyCoordinator(ConsistencyCheckService consistencyCheckService, OutsideWorld outsideWorld, LogProvider logProvider,\n+                            ProgressMonitorFactory progressMonitorFactory, List<BackupStrategyWrapper> strategies)\n+  {\n+    this.consistencyCheckService = consistencyCheckService;\n+    this.outsideWorld = outsideWorld;\n+    this.logProvider = logProvider;\n+    this.progressMonitorFactory = progressMonitorFactory;\n+    this.strategies = strategies;\n+  }\n \n-    BackupStrategyCoordinator( ConsistencyCheckService consistencyCheckService, OutsideWorld outsideWorld, LogProvider logProvider,\n-            ProgressMonitorFactory progressMonitorFactory, List<BackupStrategyWrapper> strategies )\n+  /**\n+   * Iterate over all the provided strategies trying to perform a successful backup.\n+   * Will also do consistency checks if specified in {@link OnlineBackupContext}\n+   *\n+   * @param onlineBackupContext filesystem, command arguments and configuration\n+   * @throws CommandFailed when backup failed or there were issues with consistency checks\n+   */\n+  public void performBackup(OnlineBackupContext onlineBackupContext) throws CommandFailed\n+  {\n+    // Convenience\n+    OnlineBackupRequiredArguments requiredArgs = onlineBackupContext.getRequiredArguments();\n+    Path destination = onlineBackupContext.getResolvedLocationFromName();\n+    ConsistencyFlags consistencyFlags = onlineBackupContext.getConsistencyFlags();\n+\n+    Fallible<BackupStrategyOutcome> throwableWithState = null;\n+    List<Throwable> causesOfFailure = new ArrayList<>();\n+    for (BackupStrategyWrapper backupStrategy : strategies)\n     {\n-        this.consistencyCheckService = consistencyCheckService;\n-        this.outsideWorld = outsideWorld;\n-        this.logProvider = logProvider;\n-        this.progressMonitorFactory = progressMonitorFactory;\n-        this.strategies = strategies;\n+      throwableWithState = backupStrategy.doBackup(onlineBackupContext);\n+      if (throwableWithState.getState() == BackupStrategyOutcome.SUCCESS)\n+      {\n+        break;\n+      }\n+      if (throwableWithState.getState() == BackupStrategyOutcome.CORRECT_STRATEGY_FAILED)\n+      {\n+        throw commandFailedWithCause(throwableWithState).get();\n+      }\n+      throwableWithState.getCause().ifPresent(causesOfFailure::add);\n     }\n-\n-    /**\n-     * Iterate over all the provided strategies trying to perform a successful backup.\n-     * Will also do consistency checks if specified in {@link OnlineBackupContext}\n-     *\n-     * @param onlineBackupContext filesystem, command arguments and configuration\n-     * @throws CommandFailed when backup failed or there were issues with consistency checks\n-     */\n-    public void performBackup( OnlineBackupContext onlineBackupContext ) throws CommandFailed\n+    if (throwableWithState == null || !BackupStrategyOutcome.SUCCESS.equals(throwableWithState.getState()))\n     {\n-        // Convenience\n-        OnlineBackupRequiredArguments requiredArgs = onlineBackupContext.getRequiredArguments();\n-        Path destination = onlineBackupContext.getResolvedLocationFromName();\n-        ConsistencyFlags consistencyFlags = onlineBackupContext.getConsistencyFlags();\n-\n-        Fallible<BackupStrategyOutcome> throwableWithState = null;\n-        List<Throwable> causesOfFailure = new ArrayList<>();\n-        for ( BackupStrategyWrapper backupStrategy : strategies )\n-        {\n-            throwableWithState = backupStrategy.doBackup( onlineBackupContext );\n-            if ( throwableWithState.getState() == BackupStrategyOutcome.SUCCESS )\n-            {\n-                break;\n-            }\n-            if ( throwableWithState.getState() == BackupStrategyOutcome.CORRECT_STRATEGY_FAILED )\n-            {\n-                throw commandFailedWithCause( throwableWithState ).get();\n-            }\n-            throwableWithState.getCause().ifPresent( causesOfFailure::add );\n-        }\n-        if ( throwableWithState == null || !BackupStrategyOutcome.SUCCESS.equals( throwableWithState.getState() ) )\n-        {\n-            CommandFailed commandFailed = new CommandFailed( \"Failed to run a backup using the available strategies.\" );\n-            causesOfFailure.forEach( commandFailed::addSuppressed );\n-            throw commandFailed;\n-        }\n-        if ( requiredArgs.isDoConsistencyCheck() )\n-        {\n-            performConsistencyCheck( onlineBackupContext.getConfig(), requiredArgs, consistencyFlags, destination );\n-        }\n+      CommandFailed commandFailed = new CommandFailed(\"Failed to run a backup using the available strategies.\");\n+      causesOfFailure.forEach(commandFailed::addSuppressed);\n+      throw commandFailed;\n+    }\n+    if (requiredArgs.isDoConsistencyCheck())\n+    {\n+      performConsistencyCheck(onlineBackupContext.getConfig(), requiredArgs, consistencyFlags, destination);\n     }\n+  }\n \n-    private static Supplier<CommandFailed> commandFailedWithCause( Fallible<BackupStrategyOutcome> cause )\n+  private static Supplier<CommandFailed> commandFailedWithCause(Fallible<BackupStrategyOutcome> cause)\n+  {\n+    if (cause.getCause().isPresent())\n     {\n-        if ( cause.getCause().isPresent() )\n-        {\n-            return () -> new CommandFailed( \"Execution of backup failed\", cause.getCause().get() );\n-        }\n-        return () -> new CommandFailed( \"Execution of backup failed\" );\n+      return () -> new CommandFailed(\"Execution of backup failed\", cause.getCause().get());\n     }\n+    return () -> new CommandFailed(\"Execution of backup failed\");\n+  }\n \n-    private void performConsistencyCheck(\n-            Config config, OnlineBackupRequiredArguments requiredArgs, ConsistencyFlags consistencyFlags,\n-            Path destination ) throws CommandFailed\n+  private void performConsistencyCheck(\n+      Config config, OnlineBackupRequiredArguments requiredArgs, ConsistencyFlags consistencyFlags,\n+      Path destination) throws CommandFailed\n+  {\n+    try\n     {\n-        try\n-        {\n-            File storeDir = destination.toFile();\n-            boolean verbose = false;\n-            File reportDir = requiredArgs.getReportDir().toFile();\n-            ConsistencyCheckService.Result ccResult = consistencyCheckService.runFullConsistencyCheck(\n-                    storeDir,\n-                    config,\n-                    progressMonitorFactory,\n-                    logProvider,\n-                    outsideWorld.fileSystem(),\n-                    verbose,\n-                    reportDir,\n-                    consistencyFlags );\n+      File storeDir = destination.toFile();\n+      boolean verbose = false;\n+      File reportDir = requiredArgs.getReportDir().toFile();\n+      ConsistencyCheckService.Result ccResult = consistencyCheckService.runFullConsistencyCheck(\n+          storeDir,\n+          config,\n+          progressMonitorFactory,\n+          logProvider,\n+          outsideWorld.fileSystem(),\n+          verbose,\n+          reportDir,\n+          consistencyFlags);\n \n-            if ( !ccResult.isSuccessful() )\n-            {\n-                throw new CommandFailed( format( \"Inconsistencies found. See '%s' for details.\", ccResult.reportFile() ), STATUS_CC_INCONSISTENT );\n-            }\n-        }\n-        catch ( Throwable e )\n-        {\n-            if ( e instanceof CommandFailed )\n-            {\n-                throw (CommandFailed) e;\n-            }\n-            throw new CommandFailed( \"Failed to do consistency check on backup: \" + e.getMessage(), e, STATUS_CC_ERROR );\n-        }\n+      if (!ccResult.isSuccessful())\n+      {\n+        throw new CommandFailed(format(\"Inconsistencies found. See '%s' for details.\", ccResult.reportFile()), STATUS_CC_INCONSISTENT);\n+      }\n+    } catch (Throwable e)\n+    {\n+      if (e instanceof CommandFailed)\n+      {\n+        throw (CommandFailed) e;\n+      }\n+      throw new CommandFailed(\"Failed to do consistency check on backup: \" + e.getMessage(), e, STATUS_CC_ERROR);\n     }\n+  }\n }\n",
            "diff_size": 128
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2695/BackupStrategyCoordinator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2695/BackupStrategyCoordinator.java\nindex 2d11f581872..379a25bb3be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2695/BackupStrategyCoordinator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2695/BackupStrategyCoordinator.java\n@@ -85,19 +85,22 @@ class BackupStrategyCoordinator\n             {\n                 break;\n             }\n-            if ( throwableWithState.getState() == BackupStrategyOutcome.CORRECT_STRATEGY_FAILED )\n+\n+if ( throwableWithState.getState() == BackupStrategyOutcome.CORRECT_STRATEGY_FAILED )\n             {\n                 throw commandFailedWithCause( throwableWithState ).get();\n             }\n             throwableWithState.getCause().ifPresent( causesOfFailure::add );\n         }\n-        if ( throwableWithState == null || !BackupStrategyOutcome.SUCCESS.equals( throwableWithState.getState() ) )\n+\n+if ( throwableWithState == null || !BackupStrategyOutcome.SUCCESS.equals( throwableWithState.getState() ) )\n         {\n             CommandFailed commandFailed = new CommandFailed( \"Failed to run a backup using the available strategies.\" );\n             causesOfFailure.forEach( commandFailed::addSuppressed );\n             throw commandFailed;\n         }\n-        if ( requiredArgs.isDoConsistencyCheck() )\n+\n+if ( requiredArgs.isDoConsistencyCheck() )\n         {\n             performConsistencyCheck( onlineBackupContext.getConfig(), requiredArgs, consistencyFlags, destination );\n         }\n@@ -112,26 +115,17 @@ class BackupStrategyCoordinator\n         return () -> new CommandFailed( \"Execution of backup failed\" );\n     }\n \n-    private void performConsistencyCheck(\n-            Config config, OnlineBackupRequiredArguments requiredArgs, ConsistencyFlags consistencyFlags,\n+    private void performConsistencyCheck( Config config, OnlineBackupRequiredArguments requiredArgs, ConsistencyFlags consistencyFlags,\n             Path destination ) throws CommandFailed\n-    {\n+{\n         try\n         {\n             File storeDir = destination.toFile();\n             boolean verbose = false;\n             File reportDir = requiredArgs.getReportDir().toFile();\n-            ConsistencyCheckService.Result ccResult = consistencyCheckService.runFullConsistencyCheck(\n-                    storeDir,\n-                    config,\n-                    progressMonitorFactory,\n-                    logProvider,\n-                    outsideWorld.fileSystem(),\n-                    verbose,\n-                    reportDir,\n-                    consistencyFlags );\n-\n-            if ( !ccResult.isSuccessful() )\n+            ConsistencyCheckService.Result ccResult = consistencyCheckService.runFullConsistencyCheck( storeDir, config, progressMonitorFactory, logProvider,\n+                    outsideWorld.fileSystem(), verbose, reportDir, consistencyFlags );\n+if ( !ccResult.isSuccessful() )\n             {\n                 throw new CommandFailed( format( \"Inconsistencies found. See '%s' for details.\", ccResult.reportFile() ), STATUS_CC_INCONSISTENT );\n             }\n@@ -145,4 +139,4 @@ class BackupStrategyCoordinator\n             throw new CommandFailed( \"Failed to do consistency check on backup: \" + e.getMessage(), e, STATUS_CC_ERROR );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}