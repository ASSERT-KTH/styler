{
    "project_name": "neo4j-neo4j",
    "error_id": "404",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/404/IndexingServiceFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/404/IndexingServiceFactory.java\nindex 28f84a990a1..cce3e0b24d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/404/IndexingServiceFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/404/IndexingServiceFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import org.neo4j.common.TokenNameLookup;\n@@ -40,32 +41,32 @@ public final class IndexingServiceFactory\n     {\n     }\n \n-    public static IndexingService createIndexingService( Config config,\n-                                          JobScheduler scheduler,\n-                                          IndexProviderMap providerMap,\n-                                          IndexStoreView storeView,\n-                                          TokenNameLookup tokenNameLookup,\n-                                          Iterable<IndexDescriptor> indexRules,\n-                                          LogProvider internalLogProvider,\n-                                          LogProvider userLogProvider,\n-                                          IndexingService.Monitor monitor,\n-                                          SchemaState schemaState,\n-                                          IndexStatisticsStore indexStatisticsStore,\n-                                          PageCacheTracer pageCacheTracer,\n-                                          MemoryTracker memoryTracker,\n-                                          String databaseName,\n-                                          boolean readOnly )\n+    public static IndexingService createIndexingService(Config config,\n+                                                        JobScheduler scheduler,\n+                                                        IndexProviderMap providerMap,\n+                                                        IndexStoreView storeView,\n+                                                        TokenNameLookup tokenNameLookup,\n+                                                        Iterable<IndexDescriptor> indexRules,\n+                                                        LogProvider internalLogProvider,\n+                                                        LogProvider userLogProvider,\n+                                                        IndexingService.Monitor monitor,\n+                                                        SchemaState schemaState,\n+                                                        IndexStatisticsStore indexStatisticsStore,\n+                                                        PageCacheTracer pageCacheTracer,\n+                                                        MemoryTracker memoryTracker,\n+                                                        String databaseName,\n+                                                        boolean readOnly)\n     {\n-        IndexSamplingConfig samplingConfig = new IndexSamplingConfig( config );\n+        IndexSamplingConfig samplingConfig = new IndexSamplingConfig(config);\n         IndexMapReference indexMapRef = new IndexMapReference();\n-        IndexSamplingControllerFactory factory = new IndexSamplingControllerFactory( samplingConfig, indexStatisticsStore, scheduler,\n-                tokenNameLookup, internalLogProvider, pageCacheTracer, config, databaseName );\n-        IndexSamplingController indexSamplingController = factory.create( indexMapRef );\n+        IndexSamplingControllerFactory factory = new IndexSamplingControllerFactory(samplingConfig, indexStatisticsStore, scheduler,\n+          tokenNameLookup, internalLogProvider, pageCacheTracer, config, databaseName);\n+        IndexSamplingController indexSamplingController = factory.create(indexMapRef);\n         IndexProxyCreator proxySetup =\n-                new IndexProxyCreator( samplingConfig, indexStatisticsStore, providerMap, tokenNameLookup, internalLogProvider );\n+          new IndexProxyCreator(samplingConfig, indexStatisticsStore, providerMap, tokenNameLookup, internalLogProvider);\n \n-        return new IndexingService( proxySetup, providerMap, indexMapRef, storeView, indexRules,\n-                indexSamplingController, tokenNameLookup, scheduler, schemaState,\n-                internalLogProvider, userLogProvider, monitor, indexStatisticsStore, pageCacheTracer, memoryTracker, databaseName, readOnly, config );\n+        return new IndexingService(proxySetup, providerMap, indexMapRef, storeView, indexRules,\n+          indexSamplingController, tokenNameLookup, scheduler, schemaState,\n+          internalLogProvider, userLogProvider, monitor, indexStatisticsStore, pageCacheTracer, memoryTracker, databaseName, readOnly, config);\n     }\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}