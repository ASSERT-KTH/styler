{
    "project_name": "neo4j-neo4j",
    "error_id": "2568",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "148",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "161",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "175",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2568/DbStructureArgumentFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2568/DbStructureArgumentFormatter.java\nindex 8298e621393..503763839ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2568/DbStructureArgumentFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2568/DbStructureArgumentFormatter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.io.IOException;\n@@ -47,14 +48,14 @@ public enum DbStructureArgumentFormatter implements ArgumentFormatter\n     INSTANCE;\n \n     private static final List<String> IMPORTS = Arrays.asList(\n-            ConstraintDescriptorFactory.class.getCanonicalName(),\n-            UniquenessConstraintDescriptor.class.getCanonicalName(),\n-            RelExistenceConstraintDescriptor.class.getCanonicalName(),\n-            NodeExistenceConstraintDescriptor.class.getCanonicalName(),\n-            NodeKeyConstraintDescriptor.class.getCanonicalName(),\n-            SchemaDescriptor.class.getCanonicalName(),\n-            IndexDescriptor.class.getCanonicalName(),\n-            IndexPrototype.class.getCanonicalName()\n+      ConstraintDescriptorFactory.class.getCanonicalName(),\n+      UniquenessConstraintDescriptor.class.getCanonicalName(),\n+      RelExistenceConstraintDescriptor.class.getCanonicalName(),\n+      NodeExistenceConstraintDescriptor.class.getCanonicalName(),\n+      NodeKeyConstraintDescriptor.class.getCanonicalName(),\n+      SchemaDescriptor.class.getCanonicalName(),\n+      IndexDescriptor.class.getCanonicalName(),\n+      IndexPrototype.class.getCanonicalName()\n     );\n \n     @Override\n@@ -64,137 +65,120 @@ public enum DbStructureArgumentFormatter implements ArgumentFormatter\n     }\n \n     @Override\n-    public void formatArgument( Appendable builder, Object arg ) throws IOException\n+    public void formatArgument(Appendable builder, Object arg) throws IOException\n     {\n-        if ( arg == null )\n+        if (arg == null)\n         {\n-            builder.append( \"null\" );\n-        }\n-        else if ( arg instanceof String )\n+            builder.append(\"null\");\n+        } else if (arg instanceof String)\n         {\n-            builder.append( '\"' );\n-            Strings.escape( builder, arg.toString() );\n-            builder.append( '\"' );\n-        }\n-        else if ( arg instanceof Long )\n+            builder.append('\"');\n+            Strings.escape(builder, arg.toString());\n+            builder.append('\"');\n+        } else if (arg instanceof Long)\n         {\n-            builder.append( arg.toString() );\n-            builder.append( 'L' );\n-        }\n-        else if ( arg instanceof Integer )\n+            builder.append(arg.toString());\n+            builder.append('L');\n+        } else if (arg instanceof Integer)\n         {\n-            builder.append( arg.toString() );\n-        }\n-        else if ( arg instanceof Double )\n+            builder.append(arg.toString());\n+        } else if (arg instanceof Double)\n         {\n             double d = (Double) arg;\n-            if ( Double.isNaN( d ) )\n+            if (Double.isNaN(d))\n             {\n-                builder.append( \"Double.NaN\" );\n-            }\n-            else if ( Double.isInfinite( d ) )\n+                builder.append(\"Double.NaN\");\n+            } else if (Double.isInfinite(d))\n             {\n-                builder.append( d < 0 ? \"Double.NEGATIVE_INFINITY\" : \"Double.POSITIVE_INFINITY\" );\n-            }\n-            else\n+                builder.append(d < 0 ? \"Double.NEGATIVE_INFINITY\" : \"Double.POSITIVE_INFINITY\");\n+            } else\n             {\n-                builder.append( arg.toString() );\n-                builder.append( 'd' );\n+                builder.append(arg.toString());\n+                builder.append('d');\n             }\n-        }\n-        else if ( arg instanceof IndexDescriptor )\n+        } else if (arg instanceof IndexDescriptor)\n         {\n             IndexDescriptor descriptor = (IndexDescriptor) arg;\n             String className = IndexPrototype.class.getSimpleName();\n             SchemaDescriptor schema = descriptor.schema();\n             String methodName = !descriptor.isUnique() ? \"forSchema\" : \"uniqueForSchema\";\n-            builder.append( String.format( \"%s.%s( \", className, methodName));\n-            formatArgument( builder, schema );\n-            builder.append( \" ).withName( \\\"\" ).append( descriptor.getName() ).append( \"\\\" )\" );\n-            builder.append( \".materialise( \" ).append( String.valueOf( descriptor.getId() ) ).append( \" )\" );\n-        }\n-        else if ( arg instanceof SchemaDescriptor )\n+            builder.append(String.format(\"%s.%s( \", className, methodName));\n+            formatArgument(builder, schema);\n+            builder.append(\" ).withName( \\\"\").append(descriptor.getName()).append(\"\\\" )\");\n+            builder.append(\".materialise( \").append(String.valueOf(descriptor.getId())).append(\" )\");\n+        } else if (arg instanceof SchemaDescriptor)\n         {\n             SchemaDescriptor schema = (SchemaDescriptor) arg;\n-            if ( schema.isLabelSchemaDescriptor() )\n+            if (schema.isLabelSchemaDescriptor())\n             {\n                 LabelSchemaDescriptor descriptor = schema.asLabelSchemaDescriptor();\n                 String className = SchemaDescriptor.class.getSimpleName();\n                 int labelId = descriptor.getLabelId();\n-                builder.append( format( \"%s.forLabel( %d, %s )\",\n-                        className, labelId, asString( descriptor.getPropertyIds() ) ) );\n-            }\n-            else if ( schema.isRelationshipTypeSchemaDescriptor() )\n+                builder.append(format(\"%s.forLabel( %d, %s )\",\n+                  className, labelId, asString(descriptor.getPropertyIds())));\n+            } else if (schema.isRelationshipTypeSchemaDescriptor())\n             {\n                 RelationTypeSchemaDescriptor descriptor = schema.asRelationshipTypeSchemaDescriptor();\n                 String className = SchemaDescriptor.class.getSimpleName();\n                 int labelId = descriptor.getRelTypeId();\n-                builder.append( format( \"%s.forRelType( %d, %s )\",\n-                        className, labelId, asString( descriptor.getPropertyIds() ) ) );\n-            }\n-            else if ( schema.isFulltextSchemaDescriptor() )\n+                builder.append(format(\"%s.forRelType( %d, %s )\",\n+                  className, labelId, asString(descriptor.getPropertyIds())));\n+            } else if (schema.isFulltextSchemaDescriptor())\n             {\n                 FulltextSchemaDescriptor descriptor = schema.asFulltextSchemaDescriptor();\n                 String className = SchemaDescriptor.class.getSimpleName();\n                 int[] entityIds = descriptor.getEntityTokenIds();\n-                builder.append( format( \"%s.fulltext( EntityType.%s, IndexConfig.empty(), new int[] {%s}, new int[] {%s} )\",\n-                        className, descriptor.entityType().name(), asString( entityIds ), asString( descriptor.getPropertyIds() ) ) );\n-            }\n-            else\n+                builder.append(format(\"%s.fulltext( EntityType.%s, IndexConfig.empty(), new int[] {%s}, new int[] {%s} )\",\n+                  className, descriptor.entityType().name(), asString(entityIds), asString(descriptor.getPropertyIds())));\n+            } else\n             {\n                 throw new IllegalArgumentException(\n-                        format( \"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg ) );\n+                  format(\"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg));\n             }\n-        }\n-        else if ( arg instanceof ConstraintDescriptor )\n+        } else if (arg instanceof ConstraintDescriptor)\n         {\n             ConstraintDescriptor constraint = (ConstraintDescriptor) arg;\n             EntityType entityType = constraint.schema().entityType();\n-            if ( constraint.enforcesUniqueness() && !constraint.enforcesPropertyExistence() && entityType == EntityType.NODE )\n+            if (constraint.enforcesUniqueness() && !constraint.enforcesPropertyExistence() && entityType == EntityType.NODE)\n             {\n                 String className = ConstraintDescriptorFactory.class.getSimpleName();\n                 int labelId = constraint.schema().getLabelId();\n-                builder.append( format( \"%s.uniqueForLabel( %d, %s )\",\n-                        className, labelId, asString( constraint.schema().getPropertyIds() ) ) );\n-            }\n-            else if ( !constraint.enforcesUniqueness() && constraint.enforcesPropertyExistence() && entityType == EntityType.NODE )\n+                builder.append(format(\"%s.uniqueForLabel( %d, %s )\",\n+                  className, labelId, asString(constraint.schema().getPropertyIds())));\n+            } else if (!constraint.enforcesUniqueness() && constraint.enforcesPropertyExistence() && entityType == EntityType.NODE)\n             {\n                 String className = ConstraintDescriptorFactory.class.getSimpleName();\n                 int labelId = constraint.schema().getLabelId();\n-                builder.append( format( \"%s.existsForLabel( %d, %s )\",\n-                        className, labelId, asString( constraint.schema().getPropertyIds() ) ) );\n-            }\n-            else if ( !constraint.enforcesUniqueness() && constraint.enforcesPropertyExistence() && entityType == EntityType.RELATIONSHIP )\n+                builder.append(format(\"%s.existsForLabel( %d, %s )\",\n+                  className, labelId, asString(constraint.schema().getPropertyIds())));\n+            } else if (!constraint.enforcesUniqueness() && constraint.enforcesPropertyExistence() && entityType == EntityType.RELATIONSHIP)\n             {\n                 SchemaDescriptor descriptor = constraint.schema();\n                 String className = ConstraintDescriptorFactory.class.getSimpleName();\n                 int relTypeId = descriptor.getRelTypeId();\n-                builder.append( format( \"%s.existsForReltype( %d, %s )\",\n-                        className, relTypeId, asString( descriptor.getPropertyIds() ) ) );\n-            }\n-            else if ( constraint.enforcesUniqueness() && constraint.enforcesPropertyExistence() && entityType == EntityType.NODE )\n+                builder.append(format(\"%s.existsForReltype( %d, %s )\",\n+                  className, relTypeId, asString(descriptor.getPropertyIds())));\n+            } else if (constraint.enforcesUniqueness() && constraint.enforcesPropertyExistence() && entityType == EntityType.NODE)\n             {\n                 String className = ConstraintDescriptorFactory.class.getSimpleName();\n                 int labelId = constraint.schema().getLabelId();\n-                builder.append( format( \"%s.nodeKeyForLabel( %d, %s )\",\n-                        className, labelId, asString( constraint.schema().getPropertyIds() ) ) );\n-            }\n-            else\n+                builder.append(format(\"%s.nodeKeyForLabel( %d, %s )\",\n+                  className, labelId, asString(constraint.schema().getPropertyIds())));\n+            } else\n             {\n                 throw new IllegalArgumentException(\n-                        format( \"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg ) );\n+                  format(\"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg));\n             }\n-        }\n-        else\n+        } else\n         {\n             throw new IllegalArgumentException(\n-                    format( \"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg ) );\n+              format(\"Can't handle argument of type: %s with value: %s\", arg.getClass(), arg));\n         }\n     }\n \n-    private static String asString( int[] propertyIds )\n+    private static String asString(int[] propertyIds)\n     {\n-        List<String> strings = Arrays.stream( propertyIds ).mapToObj( i -> \"\" + i ).collect( Collectors.toList() );\n-        return String.join( \", \", strings );\n+        List<String> strings = Arrays.stream(propertyIds).mapToObj(i -> \"\" + i).collect(Collectors.toList());\n+        return String.join(\", \", strings);\n     }\n }\n",
            "diff_size": 83
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}