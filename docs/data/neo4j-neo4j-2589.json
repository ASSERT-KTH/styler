{
    "project_name": "neo4j-neo4j",
    "error_id": "2589",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2589/ImportMemoryCalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2589/ImportMemoryCalculator.java\nindex 6fed9f2d29f..46b330b6f21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2589/ImportMemoryCalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2589/ImportMemoryCalculator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import org.neo4j.internal.batchimport.cache.GatheringMemoryStatsVisitor;\n@@ -32,58 +33,58 @@ import static org.neo4j.kernel.impl.store.NoStoreHeader.NO_STORE_HEADER;\n  * {@link Input.Estimates}. The reason why we're trying so hard to calculate\n  * these things is that for large imports... getting the balance between heap and off-heap memory just right\n  * will allow the importer to use available memory and can mean difference between a failed and successful import.\n- *\n+ * <p>\n  * The calculated numbers are a bit on the defensive side, generally adding 10% to the numbers.\n  */\n public class ImportMemoryCalculator\n {\n-    public static long estimatedStoreSize( Input.Estimates estimates, RecordFormats recordFormats )\n+    public static long estimatedStoreSize(Input.Estimates estimates, RecordFormats recordFormats)\n     {\n-        long nodeSize = estimates.numberOfNodes() * recordFormats.node().getRecordSize( NO_STORE_HEADER );\n-        long relationshipSize = estimates.numberOfRelationships() * recordFormats.relationship().getRecordSize( NO_STORE_HEADER );\n+        long nodeSize = estimates.numberOfNodes() * recordFormats.node().getRecordSize(NO_STORE_HEADER);\n+        long relationshipSize = estimates.numberOfRelationships() * recordFormats.relationship().getRecordSize(NO_STORE_HEADER);\n         long propertySize = estimates.sizeOfNodeProperties() + estimates.sizeOfRelationshipProperties();\n-        long tempIdPropertySize = estimates.numberOfNodes() * recordFormats.property().getRecordSize( NO_STORE_HEADER );\n+        long tempIdPropertySize = estimates.numberOfNodes() * recordFormats.property().getRecordSize(NO_STORE_HEADER);\n \n-        return defensivelyPadMemoryEstimate( nodeSize + relationshipSize + propertySize + tempIdPropertySize );\n+        return defensivelyPadMemoryEstimate(nodeSize + relationshipSize + propertySize + tempIdPropertySize);\n     }\n \n-    public static long estimatedCacheSize( MemoryStatsVisitor.Visitable baseMemory, MemoryStatsVisitor.Visitable... memoryUsers )\n+    public static long estimatedCacheSize(MemoryStatsVisitor.Visitable baseMemory, MemoryStatsVisitor.Visitable... memoryUsers)\n     {\n-        long neoStoreSize = GatheringMemoryStatsVisitor.totalMemoryUsageOf( baseMemory );\n-        long importCacheSize = GatheringMemoryStatsVisitor.highestMemoryUsageOf( memoryUsers );\n-        return neoStoreSize + defensivelyPadMemoryEstimate( importCacheSize );\n+        long neoStoreSize = GatheringMemoryStatsVisitor.totalMemoryUsageOf(baseMemory);\n+        long importCacheSize = GatheringMemoryStatsVisitor.highestMemoryUsageOf(memoryUsers);\n+        return neoStoreSize + defensivelyPadMemoryEstimate(importCacheSize);\n     }\n \n     /**\n      * Calculates optimal and minimal heap size for an import. A minimal heap for an import has enough room for some amount\n      * of working memory and the part of the page cache meta data living in the heap.\n-     *\n+     * <p>\n      * At the time of writing this the heap size is really only a function of store size, where parts of the page cache\n      * meta data lives in the heap. For reference page cache meta data of a store of ~18TiB takes up ~10GiB of heap,\n      * so pageCacheHeapUsage ~= storeSize / 2000. On top of that there must be some good old working memory of ~1-2 GiB\n      * for handling objects created and operating during the import.\n      *\n-     * @param estimates input estimates.\n+     * @param estimates     input estimates.\n      * @param recordFormats {@link RecordFormats}, containing record sizes.\n      * @return an optimal minimal heap size to use for this import.\n      */\n-    public static long optimalMinimalHeapSize( Input.Estimates estimates, RecordFormats recordFormats )\n+    public static long optimalMinimalHeapSize(Input.Estimates estimates, RecordFormats recordFormats)\n     {\n-        long estimatedStoreSize = estimatedStoreSize( estimates, recordFormats );\n+        long estimatedStoreSize = estimatedStoreSize(estimates, recordFormats);\n \n         return // working memory\n-               gibiBytes( 1 ) +\n-               // page cache meta data, see outline of this number above\n-               estimatedStoreSize / 2_000;\n+          gibiBytes(1) +\n+            // page cache meta data, see outline of this number above\n+            estimatedStoreSize / 2_000;\n     }\n \n-    public static long defensivelyPadMemoryEstimate( long bytes )\n+    public static long defensivelyPadMemoryEstimate(long bytes)\n     {\n         return (long) (bytes * 1.1);\n     }\n \n-    public static long defensivelyPadMemoryEstimate( MemoryStatsVisitor.Visitable... memoryUsers )\n+    public static long defensivelyPadMemoryEstimate(MemoryStatsVisitor.Visitable... memoryUsers)\n     {\n-        return defensivelyPadMemoryEstimate( GatheringMemoryStatsVisitor.totalMemoryUsageOf( memoryUsers ) );\n+        return defensivelyPadMemoryEstimate(GatheringMemoryStatsVisitor.totalMemoryUsageOf(memoryUsers));\n     }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2589/ImportMemoryCalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2589/ImportMemoryCalculator.java\nindex 6fed9f2d29f..bf49e3b7c38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2589/ImportMemoryCalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2589/ImportMemoryCalculator.java\n@@ -86,4 +86,4 @@ public class ImportMemoryCalculator\n     {\n         return defensivelyPadMemoryEstimate( GatheringMemoryStatsVisitor.totalMemoryUsageOf( memoryUsers ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}