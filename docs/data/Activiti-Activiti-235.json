{
    "project_name": "Activiti-Activiti",
    "error_id": "235",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/235/ServiceTaskDelegateExpressionActivityBehavior.java\nindex 857bbf8857f..e915b8b0895 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/235/ServiceTaskDelegateExpressionActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/235/ServiceTaskDelegateExpressionActivityBehavior.java\nindex 857bbf8857f..6478fcd214d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/235/ServiceTaskDelegateExpressionActivityBehavior.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -36,86 +37,85 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * {@link ActivityBehavior} used when 'delegateExpression' is used for a serviceTask.\n- * \n  */\n public class ServiceTaskDelegateExpressionActivityBehavior extends TaskActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n-  \n-  protected String serviceTaskId;\n-  protected Expression expression;\n-  protected Expression skipExpression;\n-  private final List<FieldDeclaration> fieldDeclarations;\n-\n-  public ServiceTaskDelegateExpressionActivityBehavior(String serviceTaskId, Expression expression, Expression skipExpression, List<FieldDeclaration> fieldDeclarations) {\n-    this.serviceTaskId = serviceTaskId;\n-    this.expression = expression;\n-    this.skipExpression = skipExpression;\n-    this.fieldDeclarations = fieldDeclarations;\n-  }\n-\n-  @Override\n-  public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n-    Object delegate = DelegateExpressionUtil.resolveDelegateExpression(expression, execution, fieldDeclarations);\n-    if (delegate instanceof TriggerableActivityBehavior) {\n-      ((TriggerableActivityBehavior) delegate).trigger(execution, signalName, signalData);\n-    }\n-  }\n+    private static final long serialVersionUID = 1L;\n \n-  public void execute(DelegateExecution execution) {\n+    protected String serviceTaskId;\n+    protected Expression expression;\n+    protected Expression skipExpression;\n+    private final List<FieldDeclaration> fieldDeclarations;\n \n-    try {\n-      boolean isSkipExpressionEnabled = SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression);\n-      if (!isSkipExpressionEnabled || (isSkipExpressionEnabled && !SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression))) {\n+    public ServiceTaskDelegateExpressionActivityBehavior(String serviceTaskId, Expression expression, Expression skipExpression, List<FieldDeclaration> fieldDeclarations) {\n+        this.serviceTaskId = serviceTaskId;\n+        this.expression = expression;\n+        this.skipExpression = skipExpression;\n+        this.fieldDeclarations = fieldDeclarations;\n+    }\n \n-        if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n-          ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(serviceTaskId, execution.getProcessDefinitionId());\n-          if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION)) {\n-            String overrideExpression = taskElementProperties.get(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION).asText();\n-            if (StringUtils.isNotEmpty(overrideExpression) && !overrideExpression.equals(expression.getExpressionText())) {\n-              expression = Context.getProcessEngineConfiguration().getExpressionManager().createExpression(overrideExpression);\n-            }\n-          }\n-        }\n-        \n+    @Override\n+    public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n         Object delegate = DelegateExpressionUtil.resolveDelegateExpression(expression, execution, fieldDeclarations);\n-        if (delegate instanceof ActivityBehavior) {\n+        if (delegate instanceof TriggerableActivityBehavior) {\n+            ((TriggerableActivityBehavior) delegate).trigger(execution, signalName, signalData);\n+        }\n+    }\n \n-          if (delegate instanceof AbstractBpmnActivityBehavior) {\n-            ((AbstractBpmnActivityBehavior) delegate).setMultiInstanceActivityBehavior(getMultiInstanceActivityBehavior());\n-          }\n+    public void execute(DelegateExecution execution) {\n \n-          Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new ActivityBehaviorInvocation((ActivityBehavior) delegate, execution));\n+        try {\n+            boolean isSkipExpressionEnabled = SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression);\n+            if (!isSkipExpressionEnabled || (isSkipExpressionEnabled && !SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression))) {\n \n-        } else if (delegate instanceof JavaDelegate) {\n-          Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new JavaDelegateInvocation((JavaDelegate) delegate, execution));\n-          leave(execution);\n+                if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n+                    ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(serviceTaskId, execution.getProcessDefinitionId());\n+                    if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION)) {\n+                        String overrideExpression = taskElementProperties.get(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION).asText();\n+                        if (StringUtils.isNotEmpty(overrideExpression) && !overrideExpression.equals(expression.getExpressionText())) {\n+                            expression = Context.getProcessEngineConfiguration().getExpressionManager().createExpression(overrideExpression);\n+                        }\n+                    }\n+                }\n \n-        } else {\n-          throw new ActivitiIllegalArgumentException(\"Delegate expression \" + expression + \" did neither resolve to an implementation of \" + ActivityBehavior.class + \" nor \" + JavaDelegate.class);\n-        }\n-      } else {\n-        leave(execution);\n-      }\n-    } catch (Exception exc) {\n-\n-      Throwable cause = exc;\n-      BpmnError error = null;\n-      while (cause != null) {\n-        if (cause instanceof BpmnError) {\n-          error = (BpmnError) cause;\n-          break;\n-        }\n-        cause = cause.getCause();\n-      }\n+                Object delegate = DelegateExpressionUtil.resolveDelegateExpression(expression, execution, fieldDeclarations);\n+                if (delegate instanceof ActivityBehavior) {\n \n-      if (error != null) {\n-        ErrorPropagation.propagateError(error, execution);\n-      } else {\n-        throw new ActivitiException(exc.getMessage(), exc);\n-      }\n+                    if (delegate instanceof AbstractBpmnActivityBehavior) {\n+                        ((AbstractBpmnActivityBehavior) delegate).setMultiInstanceActivityBehavior(getMultiInstanceActivityBehavior());\n+                    }\n \n+                    Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new ActivityBehaviorInvocation((ActivityBehavior) delegate, execution));\n+\n+                } else if (delegate instanceof JavaDelegate) {\n+                    Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new JavaDelegateInvocation((JavaDelegate) delegate, execution));\n+                    leave(execution);\n+\n+                } else {\n+                    throw new ActivitiIllegalArgumentException(\"Delegate expression \" + expression + \" did neither resolve to an implementation of \" + ActivityBehavior.class + \" nor \" + JavaDelegate.class);\n+                }\n+            } else {\n+                leave(execution);\n+            }\n+        } catch (Exception exc) {\n+\n+            Throwable cause = exc;\n+            BpmnError error = null;\n+            while (cause != null) {\n+                if (cause instanceof BpmnError) {\n+                    error = (BpmnError) cause;\n+                    break;\n+                }\n+                cause = cause.getCause();\n+            }\n+\n+            if (error != null) {\n+                ErrorPropagation.propagateError(error, execution);\n+            } else {\n+                throw new ActivitiException(exc.getMessage(), exc);\n+            }\n+\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/235/ServiceTaskDelegateExpressionActivityBehavior.java\nindex 857bbf8857f..d64c922aea7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/235/ServiceTaskDelegateExpressionActivityBehavior.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n-\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.DynamicBpmnConstants;\n@@ -31,23 +30,26 @@ import org.activiti.engine.impl.delegate.ActivityBehaviorInvocation;\n import org.activiti.engine.impl.delegate.TriggerableActivityBehavior;\n import org.activiti.engine.impl.delegate.invocation.JavaDelegateInvocation;\n import org.apache.commons.lang3.StringUtils;\n-\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * {@link ActivityBehavior} used when 'delegateExpression' is used for a serviceTask.\n  * \n  */\n+\n+\n public class ServiceTaskDelegateExpressionActivityBehavior extends TaskActivityBehavior {\n \n   private static final long serialVersionUID = 1L;\n-  \n   protected String serviceTaskId;\n   protected Expression expression;\n   protected Expression skipExpression;\n+\n   private final List<FieldDeclaration> fieldDeclarations;\n \n-  public ServiceTaskDelegateExpressionActivityBehavior(String serviceTaskId, Expression expression, Expression skipExpression, List<FieldDeclaration> fieldDeclarations) {\n+  public ServiceTaskDelegateExpressionActivityBehavior(String serviceTaskId,\n+                                                       Expression expression,\n+                                                       Expression skipExpression, List<FieldDeclaration> fieldDeclarations) {\n     this.serviceTaskId = serviceTaskId;\n     this.expression = expression;\n     this.skipExpression = skipExpression;\n@@ -63,13 +65,12 @@ public class ServiceTaskDelegateExpressionActivityBehavior extends TaskActivityB\n   }\n \n   public void execute(DelegateExecution execution) {\n-\n     try {\n       boolean isSkipExpressionEnabled = SkipExpressionUtil.isSkipExpressionEnabled(execution, skipExpression);\n       if (!isSkipExpressionEnabled || (isSkipExpressionEnabled && !SkipExpressionUtil.shouldSkipFlowElement(execution, skipExpression))) {\n-\n         if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n-          ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(serviceTaskId, execution.getProcessDefinitionId());\n+          ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(serviceTaskId,\n+                                                                                      execution.getProcessDefinitionId());\n           if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION)) {\n             String overrideExpression = taskElementProperties.get(DynamicBpmnConstants.SERVICE_TASK_DELEGATE_EXPRESSION).asText();\n             if (StringUtils.isNotEmpty(overrideExpression) && !overrideExpression.equals(expression.getExpressionText())) {\n@@ -77,20 +78,16 @@ public class ServiceTaskDelegateExpressionActivityBehavior extends TaskActivityB\n             }\n           }\n         }\n-        \n+\n         Object delegate = DelegateExpressionUtil.resolveDelegateExpression(expression, execution, fieldDeclarations);\n         if (delegate instanceof ActivityBehavior) {\n-\n           if (delegate instanceof AbstractBpmnActivityBehavior) {\n             ((AbstractBpmnActivityBehavior) delegate).setMultiInstanceActivityBehavior(getMultiInstanceActivityBehavior());\n           }\n-\n           Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new ActivityBehaviorInvocation((ActivityBehavior) delegate, execution));\n-\n         } else if (delegate instanceof JavaDelegate) {\n           Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(new JavaDelegateInvocation((JavaDelegate) delegate, execution));\n           leave(execution);\n-\n         } else {\n           throw new ActivitiIllegalArgumentException(\"Delegate expression \" + expression + \" did neither resolve to an implementation of \" + ActivityBehavior.class + \" nor \" + JavaDelegate.class);\n         }\n@@ -98,7 +95,6 @@ public class ServiceTaskDelegateExpressionActivityBehavior extends TaskActivityB\n         leave(execution);\n       }\n     } catch (Exception exc) {\n-\n       Throwable cause = exc;\n       BpmnError error = null;\n       while (cause != null) {\n@@ -108,14 +104,11 @@ public class ServiceTaskDelegateExpressionActivityBehavior extends TaskActivityB\n         }\n         cause = cause.getCause();\n       }\n-\n       if (error != null) {\n         ErrorPropagation.propagateError(error, execution);\n       } else {\n         throw new ActivitiException(exc.getMessage(), exc);\n       }\n-\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/235/ServiceTaskDelegateExpressionActivityBehavior.java\nindex 857bbf8857f..e915b8b0895 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/235/ServiceTaskDelegateExpressionActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/235/ServiceTaskDelegateExpressionActivityBehavior.java\nindex 857bbf8857f..e915b8b0895 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/235/ServiceTaskDelegateExpressionActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/235/ServiceTaskDelegateExpressionActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}