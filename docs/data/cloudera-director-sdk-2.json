{
    "project_name": "cloudera-director-sdk",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/2/ApiResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/2/ApiResponse.java\nindex a5fc4ad1345..2c3d2bf50f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/2/ApiResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/2/ApiResponse.java\n@@ -26,38 +26,38 @@ import java.util.Map;\n  * @param <T> The type of data that is deserialized from response body\n  */\n public class ApiResponse<T> {\n-    final private int statusCode;\n-    final private Map<String, List<String>> headers;\n-    final private T data;\n-\n-    /**\n-     * @param statusCode The status code of HTTP response\n-     * @param headers The headers of HTTP response\n-     */\n-    public ApiResponse(int statusCode, Map<String, List<String>> headers) {\n-        this(statusCode, headers, null);\n-    }\n-\n-    /**\n-     * @param statusCode The status code of HTTP response\n-     * @param headers The headers of HTTP response\n-     * @param data The object deserialized from response bod\n-     */\n-    public ApiResponse(int statusCode, Map<String, List<String>> headers, T data) {\n-        this.statusCode = statusCode;\n-        this.headers = headers;\n-        this.data = data;\n-    }\n-\n-    public int getStatusCode() {\n-        return statusCode;\n-    }\n-\n-    public Map<String, List<String>> getHeaders() {\n-        return headers;\n-    }\n-\n-    public T getData() {\n-        return data;\n-    }\n+  final private int statusCode;\n+  final private Map<String, List<String>> headers;\n+  final private T data;\n+\n+  /**\n+   * @param statusCode The status code of HTTP response\n+   * @param headers    The headers of HTTP response\n+   */\n+  public ApiResponse(int statusCode, Map<String, List<String>> headers) {\n+    this(statusCode, headers, null);\n+  }\n+\n+  /**\n+   * @param statusCode The status code of HTTP response\n+   * @param headers    The headers of HTTP response\n+   * @param data       The object deserialized from response bod\n+   */\n+  public ApiResponse(int statusCode, Map<String, List<String>> headers, T data) {\n+    this.statusCode = statusCode;\n+    this.headers = headers;\n+    this.data = data;\n+  }\n+\n+  public int getStatusCode() {\n+    return statusCode;\n+  }\n+\n+  public Map<String, List<String>> getHeaders() {\n+    return headers;\n+  }\n+\n+  public T getData() {\n+    return data;\n+  }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/2/ApiResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/2/ApiResponse.java\nindex a5fc4ad1345..2dc12ab6bfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/2/ApiResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/2/ApiResponse.java\n@@ -1,19 +1,4 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n \n package com.cloudera.director.client.common;\n \n@@ -26,7 +11,7 @@ import java.util.Map;\n  * @param <T> The type of data that is deserialized from response body\n  */\n public class ApiResponse<T> {\n-    final private int statusCode;\n+  final private int statusCode;\n     final private Map<String, List<String>> headers;\n     final private T data;\n \n@@ -35,8 +20,8 @@ public class ApiResponse<T> {\n      * @param headers The headers of HTTP response\n      */\n     public ApiResponse(int statusCode, Map<String, List<String>> headers) {\n-        this(statusCode, headers, null);\n-    }\n+  this(statusCode, headers, null);\n+  }\n \n     /**\n      * @param statusCode The status code of HTTP response\n@@ -44,20 +29,20 @@ public class ApiResponse<T> {\n      * @param data The object deserialized from response bod\n      */\n     public ApiResponse(int statusCode, Map<String, List<String>> headers, T data) {\n-        this.statusCode = statusCode;\n+  this.statusCode = statusCode;\n         this.headers = headers;\n         this.data = data;\n-    }\n+  }\n \n     public int getStatusCode() {\n-        return statusCode;\n-    }\n+  return statusCode;\n+  }\n \n     public Map<String, List<String>> getHeaders() {\n-        return headers;\n-    }\n+  return headers;\n+  }\n \n     public T getData() {\n-        return data;\n-    }\n-}\n+  return data;\n+  }\n+  }\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "48",
                    "column": "104",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "48",
                    "column": "105",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/2/ApiResponse.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/2/ApiResponse.java\nindex a5fc4ad1345..4fb1931fd2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/2/ApiResponse.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/2/ApiResponse.java\n@@ -25,39 +25,49 @@ import java.util.Map;\n  *\n  * @param <T> The type of data that is deserialized from response body\n  */\n-public class ApiResponse<T> {\n-    final private int statusCode;\n-    final private Map<String, List<String>> headers;\n-    final private T data;\n+\n+\n+public class ApiResponse <T> {\n+\n+  final\n+  private int statusCode;\n+\n+  final\n+  private Map<String, List<String>> headers;\n+\n+  final\n+  private T data;\n \n     /**\n      * @param statusCode The status code of HTTP response\n      * @param headers The headers of HTTP response\n      */\n-    public ApiResponse(int statusCode, Map<String, List<String>> headers) {\n-        this(statusCode, headers, null);\n-    }\n+\n+\n+  public ApiResponse(int statusCode, Map<String, List<String>> headers) {\n+                                                                        this(statusCode, headers, null);}\n \n     /**\n      * @param statusCode The status code of HTTP response\n      * @param headers The headers of HTTP response\n      * @param data The object deserialized from response bod\n      */\n-    public ApiResponse(int statusCode, Map<String, List<String>> headers, T data) {\n-        this.statusCode = statusCode;\n-        this.headers = headers;\n-        this.data = data;\n-    }\n-\n-    public int getStatusCode() {\n-        return statusCode;\n-    }\n-\n-    public Map<String, List<String>> getHeaders() {\n-        return headers;\n-    }\n-\n-    public T getData() {\n-        return data;\n-    }\n-}\n+\n+  public ApiResponse(int statusCode, Map<String, List<String>> headers, T data) {\n+                                                                                this.statusCode = statusCode;\n+                                                                                this.headers = headers;\n+                                                                                this.data = data;\n+                             }\n+\n+  public int getStatusCode() {\n+    return statusCode;\n+  }\n+\n+  public Map<String, List<String>> getHeaders() {\n+    return headers;\n+  }\n+\n+  public T getData() {\n+    return data;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}