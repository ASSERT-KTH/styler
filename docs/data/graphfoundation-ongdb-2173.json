{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2173",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "114",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2173/RelationshipType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2173/RelationshipType.java\nindex 1a23e5c83ec..0f13abf949a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2173/RelationshipType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2173/RelationshipType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import org.neo4j.graphdb.traversal.TraversalDescription;\n@@ -30,7 +31,7 @@ import org.neo4j.graphdb.traversal.TraversalDescription;\n  * Relationship types are declared by the client and can be handled either\n  * dynamically or statically in a Neo4j-based application. Internally,\n  * relationship types are dynamic. This means that every time a client invokes\n- * {@link Node#createRelationshipTo(Node,RelationshipType)\n+ * {@link Node#createRelationshipTo(Node, RelationshipType)\n  * node.createRelationshipTo(anotherNode, newRelType)} and passes in a new\n  * relationship type then the new type will be transparently created. So\n  * instantiating a RelationshipType instance will not create it in the\n@@ -53,7 +54,7 @@ import org.neo4j.graphdb.traversal.TraversalDescription;\n  * }\n  * </code>\n  * </pre>\n- *\n+ * <p>\n  * Then later, it's as easy to use as:\n  *\n  * <pre>\n@@ -92,63 +93,63 @@ import org.neo4j.graphdb.traversal.TraversalDescription;\n  */\n public interface RelationshipType\n {\n-    /**\n-     * Returns the name of the relationship type. The name uniquely identifies a\n-     * relationship type, i.e. two different RelationshipType instances with\n-     * different object identifiers (and possibly even different classes) are\n-     * semantically equivalent if they have {@link String#equals(Object) equal}\n-     * names.\n-     *\n-     * @return the name of the relationship type\n-     */\n-    String name();\n+  /**\n+   * Returns the name of the relationship type. The name uniquely identifies a\n+   * relationship type, i.e. two different RelationshipType instances with\n+   * different object identifiers (and possibly even different classes) are\n+   * semantically equivalent if they have {@link String#equals(Object) equal}\n+   * names.\n+   *\n+   * @return the name of the relationship type\n+   */\n+  String name();\n \n-    /**\n-     * Instantiates a new {@linkplain RelationshipType} with the given name.\n-     *\n-     * @param name the name of the dynamic relationship type\n-     * @return a {@link RelationshipType} with the given name\n-     * @throws IllegalArgumentException if name is {@code null}\n-     */\n-    static RelationshipType withName( String name )\n+  /**\n+   * Instantiates a new {@linkplain RelationshipType} with the given name.\n+   *\n+   * @param name the name of the dynamic relationship type\n+   * @return a {@link RelationshipType} with the given name\n+   * @throws IllegalArgumentException if name is {@code null}\n+   */\n+  static RelationshipType withName(String name)\n+  {\n+    if (name == null)\n     {\n-        if ( name == null )\n+      throw new IllegalArgumentException(\"A relationship type cannot have a null name\");\n+    }\n+    return new RelationshipType()\n+    {\n+      @Override\n+      public String name()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public boolean equals(Object that)\n+      {\n+        if (this == that)\n         {\n-            throw new IllegalArgumentException( \"A relationship type cannot have a null name\" );\n+          return true;\n         }\n-        return new RelationshipType()\n+        if (that == null || that.getClass() != getClass())\n         {\n-            @Override\n-            public String name()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public boolean equals( Object that )\n-            {\n-                if ( this == that )\n-                {\n-                    return true;\n-                }\n-                if ( that == null || that.getClass() != getClass() )\n-                {\n-                    return false;\n-                }\n-                return name.equals( ((RelationshipType) that).name() );\n-            }\n+          return false;\n+        }\n+        return name.equals(((RelationshipType) that).name());\n+      }\n \n-            @Override\n-            public int hashCode()\n-            {\n-                return name.hashCode();\n-            }\n-        };\n-    }\n+      @Override\n+      public int hashCode()\n+      {\n+        return name.hashCode();\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2173/RelationshipType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2173/RelationshipType.java\nindex 1a23e5c83ec..f25b94476f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2173/RelationshipType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2173/RelationshipType.java\n@@ -137,11 +137,13 @@ public interface RelationshipType\n                 {\n                     return true;\n                 }\n-                if ( that == null || that.getClass() != getClass() )\n+\n+if ( that == null || that.getClass() != getClass() )\n                 {\n                     return false;\n                 }\n-                return name.equals( ((RelationshipType) that).name() );\n+\n+return name.equals( ((RelationshipType) that).name() );\n             }\n \n             @Override\n@@ -151,4 +153,4 @@ public interface RelationshipType\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}