{
    "project_name": "Angel-ML-angel",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/19/DenseDoubleMatrixTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/19/DenseDoubleMatrixTest.java\nindex d7809a9b493..f38b901acb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/19/DenseDoubleMatrixTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/19/DenseDoubleMatrixTest.java\n@@ -27,7 +27,7 @@ import static junit.framework.Assert.assertEquals;\n public class DenseDoubleMatrixTest {\r\n   @Test\r\n   public void inc() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n \r\n     mat.plusBy(0, 0, 1);\r\n@@ -41,11 +41,11 @@ public class DenseDoubleMatrixTest {\n \r\n   @Test\r\n   public void plusBy1() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-    TDoubleVector vec = new DenseDoubleVector(2, new double[]{1.0, 1.0});\r\n+    TDoubleVector vec = new DenseDoubleVector(2, new double[] {1.0, 1.0});\r\n     vec.setRowId(0);\r\n-    TDoubleVector vec_1 = new SparseDoubleVector(2, new int[]{1}, new double[]{1.0});\r\n+    TDoubleVector vec_1 = new SparseDoubleVector(2, new int[] {1}, new double[] {1.0});\r\n     vec_1.setRowId(1);\r\n \r\n     mat.plusBy(vec);\r\n@@ -59,9 +59,9 @@ public class DenseDoubleMatrixTest {\n \r\n   @Test\r\n   public void plusBy2() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-    DenseDoubleVector vec = new DenseDoubleVector(2, new double[]{1.0, 1.0});\r\n+    DenseDoubleVector vec = new DenseDoubleVector(2, new double[] {1.0, 1.0});\r\n     vec.setRowId(0);\r\n \r\n     mat.plusBy(vec);\r\n@@ -74,7 +74,7 @@ public class DenseDoubleMatrixTest {\n \r\n   @Test\r\n   public void plusBy3() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n     SparseDoubleVector vec = new SparseDoubleVector(2);\r\n     vec.setRowId(0);\r\n@@ -94,7 +94,7 @@ public class DenseDoubleMatrixTest {\n \r\n   @Test\r\n   public void get() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n \r\n     double v1 = mat.get(0, 0);\r\n@@ -105,10 +105,10 @@ public class DenseDoubleMatrixTest {\n \r\n   @Test\r\n   public void getTDoubleVector() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n \r\n-    TDoubleVector vec = (TDoubleVector)mat.getTVector(0);\r\n+    TDoubleVector vec = (TDoubleVector) mat.getTVector(0);\r\n \r\n     assertEquals(2, vec.size());\r\n     assertEquals(0, vec.getRowId());\r\n@@ -116,11 +116,11 @@ public class DenseDoubleMatrixTest {\n     assertEquals(2.0, vec.get(1));\r\n \r\n     DenseDoubleMatrix mat_1 = new DenseDoubleMatrix(2, 2, new double[2][2]);\r\n-    TDoubleVector vec_1 = new DenseDoubleVector(2, new double[]{1.0, 2.0});\r\n+    TDoubleVector vec_1 = new DenseDoubleVector(2, new double[] {1.0, 2.0});\r\n     vec_1.setRowId(0);\r\n     mat_1.plusBy(vec_1);\r\n \r\n-    TDoubleVector vec_2 = (TDoubleVector)mat_1.getTVector(0);\r\n+    TDoubleVector vec_2 = (TDoubleVector) mat_1.getTVector(0);\r\n \r\n     assertEquals(1.0, vec_2.get(0));\r\n     assertEquals(2.0, vec_2.get(1));\r\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/19/DenseDoubleMatrixTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/19/DenseDoubleMatrixTest.java\nindex d7809a9b493..4c4ba8dc4db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/19/DenseDoubleMatrixTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/19/DenseDoubleMatrixTest.java\n@@ -142,10 +142,9 @@ public class DenseDoubleMatrixTest {\n \r\n     long size = mat.size();\r\n     assertEquals(4, size);\r\n-  }\r\n-\r\n-\r\n-  @Test\r\n+  }\n+\n+@Test\r\n   public void clear() {\r\n     double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\r\n     DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n@@ -167,4 +166,4 @@ public class DenseDoubleMatrixTest {\n     assertEquals(1, mat.nonZeroNum());\r\n   }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/19/DenseDoubleMatrixTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/19/DenseDoubleMatrixTest.java\nindex d7809a9b493..1e9bd420be5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/19/DenseDoubleMatrixTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/19/DenseDoubleMatrixTest.java\n@@ -14,157 +14,135 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.TDoubleVector;\r\n-import com.tencent.angel.ml.math.vector.DenseDoubleVector;\r\n-import com.tencent.angel.ml.math.vector.SparseDoubleVector;\r\n-import org.junit.Test;\r\n-\r\n-import static junit.framework.Assert.assertEquals;\r\n-\r\n-\r\n-public class DenseDoubleMatrixTest {\r\n-  @Test\r\n-  public void inc() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    mat.plusBy(0, 0, 1);\r\n-    mat.plusBy(0, 1, 1);\r\n-    mat.plusBy(1, 1, 1);\r\n-\r\n-    assertEquals(2.0, mat.get(0, 0));\r\n-    assertEquals(3.0, mat.get(0, 1));\r\n-    assertEquals(5.0, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy1() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-    TDoubleVector vec = new DenseDoubleVector(2, new double[]{1.0, 1.0});\r\n-    vec.setRowId(0);\r\n-    TDoubleVector vec_1 = new SparseDoubleVector(2, new int[]{1}, new double[]{1.0});\r\n-    vec_1.setRowId(1);\r\n-\r\n-    mat.plusBy(vec);\r\n-    mat.plusBy(vec_1);\r\n-\r\n-    assertEquals(2.0, mat.get(0, 0));\r\n-    assertEquals(3.0, mat.get(0, 1));\r\n-    assertEquals(3.0, mat.get(1, 0));\r\n-    assertEquals(5.0, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy2() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-    DenseDoubleVector vec = new DenseDoubleVector(2, new double[]{1.0, 1.0});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2.0, mat.get(0, 0));\r\n-    assertEquals(3.0, mat.get(0, 1));\r\n-    assertEquals(3.0, mat.get(1, 0));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy3() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-    SparseDoubleVector vec = new SparseDoubleVector(2);\r\n-    vec.setRowId(0);\r\n-    vec.set(0, 1.0);\r\n-    SparseDoubleVector vec_1 = new SparseDoubleVector(2);\r\n-    vec_1.setRowId(1);\r\n-    vec_1.set(1, 1.0);\r\n-\r\n-    mat.plusBy(vec);\r\n-    mat.plusBy(vec_1);\r\n-\r\n-    assertEquals(2.0, mat.get(0, 0));\r\n-    assertEquals(2.0, mat.get(0, 1));\r\n-    assertEquals(3.0, mat.get(1, 0));\r\n-    assertEquals(5.0, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void get() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    double v1 = mat.get(0, 0);\r\n-    double v2 = mat.get(1, 1);\r\n-    assertEquals(1.0, v1);\r\n-    assertEquals(4.0, v2);\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getTDoubleVector() throws Exception {\r\n-    double[][] value = {{1.0, 2.0},{3.0, 4.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    TDoubleVector vec = (TDoubleVector)mat.getTVector(0);\r\n-\r\n-    assertEquals(2, vec.size());\r\n-    assertEquals(0, vec.getRowId());\r\n-    assertEquals(1.0, vec.get(0));\r\n-    assertEquals(2.0, vec.get(1));\r\n-\r\n-    DenseDoubleMatrix mat_1 = new DenseDoubleMatrix(2, 2, new double[2][2]);\r\n-    TDoubleVector vec_1 = new DenseDoubleVector(2, new double[]{1.0, 2.0});\r\n-    vec_1.setRowId(0);\r\n-    mat_1.plusBy(vec_1);\r\n-\r\n-    TDoubleVector vec_2 = (TDoubleVector)mat_1.getTVector(0);\r\n-\r\n-    assertEquals(1.0, vec_2.get(0));\r\n-    assertEquals(2.0, vec_2.get(1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void sparsity() throws Exception {\r\n-    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    double s = mat.sparsity();\r\n-    assertEquals(0.25, s);\r\n-  }\r\n-\r\n-  @Test\r\n-  public void size() throws Exception {\r\n-    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    long size = mat.size();\r\n-    assertEquals(4, size);\r\n-  }\r\n-\r\n-\r\n-  @Test\r\n-  public void clear() {\r\n-    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    mat.clear();\r\n-\r\n-    assertEquals(0.0, mat.get(0, 0));\r\n-    assertEquals(0.0, mat.get(0, 1));\r\n-    assertEquals(0.0, mat.get(1, 0));\r\n-    assertEquals(0.0, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void nonZeroNum() {\r\n-    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\r\n-    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\r\n-\r\n-    long nnz = mat.nonZeroNum();\r\n-    assertEquals(1, mat.nonZeroNum());\r\n-  }\r\n-\r\n-}\r\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.TDoubleVector;\n+import com.tencent.angel.ml.math.vector.DenseDoubleVector;\n+import com.tencent.angel.ml.math.vector.SparseDoubleVector;\n+import org.junit.Test;\n+import static junit.framework.Assert.assertEquals;\n+\n+public class DenseDoubleMatrixTest {\n+\n+\n+  @Test\n+  public void inc() throws Exception {\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    mat.plusBy(0, 0, 1);\n+    mat.plusBy(0, 1, 1);\n+    mat.plusBy(1, 1, 1);\n+    assertEquals(2.0, mat.get(0, 0));\n+    assertEquals(3.0, mat.get(0, 1));\n+    assertEquals(5.0, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void plusBy1() throws Exception {\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    TDoubleVector vec = new DenseDoubleVector(2, new double[]{1.0, 1.0});\n+    vec.setRowId(0);\n+    TDoubleVector vec_1 = new SparseDoubleVector(2, new int[]{1}, new double[]{1.0});\n+    vec_1.setRowId(1);\n+    mat.plusBy(vec);\n+    mat.plusBy(vec_1);\n+    assertEquals(2.0, mat.get(0, 0));\n+    assertEquals(3.0, mat.get(0, 1));\n+    assertEquals(3.0, mat.get(1, 0));\n+    assertEquals(5.0, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void plusBy2() throws Exception {\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    DenseDoubleVector vec = new DenseDoubleVector(2, new double[]{1.0, 1.0});\n+    vec.setRowId(0);\n+    mat.plusBy(vec);\n+    assertEquals(2.0, mat.get(0, 0));\n+    assertEquals(3.0, mat.get(0, 1));\n+    assertEquals(3.0, mat.get(1, 0));\n+  }\n+\n+  @Test\n+  public void plusBy3() throws Exception {\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    SparseDoubleVector vec = new SparseDoubleVector(2);\n+    vec.setRowId(0);\n+    vec.set(0, 1.0);\n+    SparseDoubleVector vec_1 = new SparseDoubleVector(2);\n+    vec_1.setRowId(1);\n+    vec_1.set(1, 1.0);\n+    mat.plusBy(vec);\n+    mat.plusBy(vec_1);\n+    assertEquals(2.0, mat.get(0, 0));\n+    assertEquals(2.0, mat.get(0, 1));\n+    assertEquals(3.0, mat.get(1, 0));\n+    assertEquals(5.0, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void get() throws Exception {\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    double v1 = mat.get(0, 0);\n+    double v2 = mat.get(1, 1);\n+    assertEquals(1.0, v1);\n+    assertEquals(4.0, v2);\n+  }\n+\n+  @Test\n+  public void getTDoubleVector() throws Exception {\n+    double[][] value = {{1.0, 2.0}, {3.0, 4.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    TDoubleVector vec = (TDoubleVector) mat.getTVector(0);\n+    assertEquals(2, vec.size());\n+    assertEquals(0, vec.getRowId());\n+    assertEquals(1.0, vec.get(0));\n+    assertEquals(2.0, vec.get(1));\n+    DenseDoubleMatrix mat_1 = new DenseDoubleMatrix(2, 2, new double[2][2]);\n+    TDoubleVector vec_1 = new DenseDoubleVector(2, new double[]{1.0, 2.0});\n+    vec_1.setRowId(0);\n+    mat_1.plusBy(vec_1);\n+    TDoubleVector vec_2 = (TDoubleVector) mat_1.getTVector(0);\n+    assertEquals(1.0, vec_2.get(0));\n+    assertEquals(2.0, vec_2.get(1));\n+  }\n+\n+  @Test\n+  public void sparsity() throws Exception {\n+    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    double s = mat.sparsity();\n+    assertEquals(0.25, s);\n+  }\n+\n+  @Test\n+  public void size() throws Exception {\n+    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    long size = mat.size();\n+    assertEquals(4, size);\n+  }\n+\n+  @Test\n+  public void clear() {\n+    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    mat.clear();\n+    assertEquals(0.0, mat.get(0, 0));\n+    assertEquals(0.0, mat.get(0, 1));\n+    assertEquals(0.0, mat.get(1, 0));\n+    assertEquals(0.0, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void nonZeroNum() {\n+    double[][] value = {{0.0, 0.0}, {1.0, 0.0}};\n+    DenseDoubleMatrix mat = new DenseDoubleMatrix(2, 2, value);\n+    long nnz = mat.nonZeroNum();\n+    assertEquals(1, mat.nonZeroNum());\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 154
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}