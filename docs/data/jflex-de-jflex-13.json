{
    "project_name": "jflex-de-jflex",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage de.jflex.testcase.apipirivate;\n\nimport static com.google.common.truth.Truth.assertWithMessage;\nimport static java.util.stream.Collectors.joining;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/13/ApiPrivateTest.java\nindex fd5561cbe4f..fe983a0b119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/13/ApiPrivateTest.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package de.jflex.testcase.apipirivate;\n \n import static com.google.common.truth.Truth.assertWithMessage;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/13/ApiPrivateTest.java\nindex fd5561cbe4f..9ab6a2c4532 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/13/ApiPrivateTest.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package de.jflex.testcase.apipirivate;\n \n import static com.google.common.truth.Truth.assertWithMessage;\n@@ -53,8 +54,8 @@ public class ApiPrivateTest {\n   public void compile() throws CompilerException {\n     ImmutableList<File> srcFiles =\n         Stream.of(\n-                \"javatests/de/jflex/testcase/apipirivate/PrivateScanner.java\",\n-                \"javatests/de/jflex/testcase/apipirivate/AttemptPrivateAccess.java\")\n+            \"javatests/de/jflex/testcase/apipirivate/PrivateScanner.java\",\n+            \"javatests/de/jflex/testcase/apipirivate/AttemptPrivateAccess.java\")\n             .map(File::new)\n             .collect(ImmutableList.toImmutableList());\n     try {\n@@ -62,8 +63,8 @@ public class ApiPrivateTest {\n       fail(\"Class `PrivateScanner` should have private access\");\n     } catch (CompilerException e) {\n       assertWithMessage(\n-              \"While compiling %s\",\n-              srcFiles.stream().map(File::getAbsolutePath).collect(joining(\", \")))\n+          \"While compiling %s\",\n+          srcFiles.stream().map(File::getAbsolutePath).collect(joining(\", \")))\n           .that(e)\n           .hasMessageThat()\n           .contains(\"yylex() has private access in de.jflex.testcase.apipirivate.PrivateScanner\");\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/13/ApiPrivateTest.java\nindex fd5561cbe4f..7ece74f041b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/13/ApiPrivateTest.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package de.jflex.testcase.apipirivate;\n \n import static com.google.common.truth.Truth.assertWithMessage;\n@@ -52,21 +53,19 @@ public class ApiPrivateTest {\n   @Test\n   public void compile() throws CompilerException {\n     ImmutableList<File> srcFiles =\n-        Stream.of(\n-                \"javatests/de/jflex/testcase/apipirivate/PrivateScanner.java\",\n+        Stream.of(\"javatests/de/jflex/testcase/apipirivate/PrivateScanner.java\",\n                 \"javatests/de/jflex/testcase/apipirivate/AttemptPrivateAccess.java\")\n-            .map(File::new)\n+.map(File::new)\n             .collect(ImmutableList.toImmutableList());\n-    try {\n+try {\n       JavacUtils.compile(srcFiles);\n       fail(\"Class `PrivateScanner` should have private access\");\n     } catch (CompilerException e) {\n       assertWithMessage(\n-              \"While compiling %s\",\n-              srcFiles.stream().map(File::getAbsolutePath).collect(joining(\", \")))\n-          .that(e)\n+    \"While compiling %s\",\n+              srcFiles.stream().map(File::getAbsolutePath).collect(joining(\", \"))).that(e)\n           .hasMessageThat()\n           .contains(\"yylex() has private access in de.jflex.testcase.apipirivate.PrivateScanner\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/13/ApiPrivateTest.java\nindex fd5561cbe4f..4f073172103 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/13/ApiPrivateTest.java\n@@ -28,7 +28,6 @@ package de.jflex.testcase.apipirivate;\n import static com.google.common.truth.Truth.assertWithMessage;\n import static java.util.stream.Collectors.joining;\n import static org.junit.Assert.fail;\n-\n import com.google.common.collect.ImmutableList;\n import de.jflex.testing.testsuite.JFlexTestRunner;\n import de.jflex.testing.testsuite.annotations.TestSpec;\n@@ -45,28 +44,22 @@ import org.junit.runner.RunWith;\n  * <p>See feature request <a href=\"https://github.com/jflex-de/jflex/issues/141\">#141 Generate\n  * cleaner interfaces</a>, {@code %apiprivate} option.\n  */\n-@RunWith(JFlexTestRunner.class)\n-@TestSpec(lex = \"javatests/de/jflex/testcase/apipirivate/private.flex\")\n-public class ApiPrivateTest {\n \n+\n+@RunWith(JFlexTestRunner.class) @TestSpec(lex = \"javatests/de/jflex/testcase/apipirivate/private.flex\")\n+public class ApiPrivateTest {\n   @Test\n   public void compile() throws CompilerException {\n-    ImmutableList<File> srcFiles =\n-        Stream.of(\n-                \"javatests/de/jflex/testcase/apipirivate/PrivateScanner.java\",\n-                \"javatests/de/jflex/testcase/apipirivate/AttemptPrivateAccess.java\")\n-            .map(File::new)\n-            .collect(ImmutableList.toImmutableList());\n+    ImmutableList<File> srcFiles = Stream.of(\"javatests/de/jflex/testcase/apipirivate/PrivateScanner.java\", \"javatests/de/jflex/testcase/apipirivate/AttemptPrivateAccess.java\").map(File::new)\n+                                                                                                                                                                                .collect(ImmutableList.toImmutableList());\n     try {\n       JavacUtils.compile(srcFiles);\n       fail(\"Class `PrivateScanner` should have private access\");\n     } catch (CompilerException e) {\n-      assertWithMessage(\n-              \"While compiling %s\",\n-              srcFiles.stream().map(File::getAbsolutePath).collect(joining(\", \")))\n-          .that(e)\n-          .hasMessageThat()\n-          .contains(\"yylex() has private access in de.jflex.testcase.apipirivate.PrivateScanner\");\n+      assertWithMessage(\"While compiling %s\",\n+                        srcFiles.stream().map(File::getAbsolutePath)\n+                                         .collect(joining(\", \"))).that(e)\n+                                                                 .hasMessageThat().contains(\"yylex() has private access in de.jflex.testcase.apipirivate.PrivateScanner\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/13/ApiPrivateTest.java\nindex fd5561cbe4f..fe983a0b119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/13/ApiPrivateTest.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package de.jflex.testcase.apipirivate;\n \n import static com.google.common.truth.Truth.assertWithMessage;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/13/ApiPrivateTest.java\nindex fd5561cbe4f..fe983a0b119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/13/ApiPrivateTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/13/ApiPrivateTest.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package de.jflex.testcase.apipirivate;\n \n import static com.google.common.truth.Truth.assertWithMessage;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}