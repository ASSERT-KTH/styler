{
    "project_name": "matsim-org-matsim-episim-libs",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "224",
                "column": "24",
                "severity": "error",
                "message": "Use a single space to separate non-whitespace characters.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
            }
        ]
    },
    "source_code": "\t * @return config file name\n\t */\n\tstatic String  writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n\t\tString runId = runName + run.id;\n\t\tString configFileName = \"config_\" + runName + run.id + \".xml\";\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler/30/CreateBatteryForCluster.java\nindex 93ac2adcd31..ccc72de1818 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler/30/CreateBatteryForCluster.java\n@@ -221,7 +221,7 @@ public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \t * Writes one line into the info.txt for one run.\n \t * @return config file name\n \t */\n-\tstatic String  writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n+\tstatic String writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n \t\tString runId = runName + run.id;\n \t\tString configFileName = \"config_\" + runName + run.id + \".xml\";\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "220",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "261",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "265",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "273",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "274",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "275",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/30/CreateBatteryForCluster.java\nindex 93ac2adcd31..16740c6c580 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/30/CreateBatteryForCluster.java\n@@ -18,6 +18,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * #L%\n  */\n+\n package org.matsim.run;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -60,208 +61,218 @@ import java.util.stream.Collectors;\n  * @param <T> type to match run and params\n  */\n @CommandLine.Command(\n-\t\tname = \"createBattery\",\n-\t\tdescription = \"Create batch scripts for execution on computing cluster.\",\n-\t\tmixinStandardHelpOptions = true\n+    name = \"createBattery\",\n+    description = \"Create batch scripts for execution on computing cluster.\",\n+    mixinStandardHelpOptions = true\n )\n @SuppressWarnings(\"unchecked, rawtypes\")\n public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \n-\tprivate static final Logger log = LogManager.getLogger(CreateBatteryForCluster.class);\n-\n-\t@CommandLine.Option(names = \"--output\", defaultValue = \"battery\")\n-\tprivate Path output;\n-\n-\t@CommandLine.Option(names = \"--batch-output\", defaultValue = \"output\")\n-\tprivate Path batchOutput;\n-\n-\t@CommandLine.Option(names = \"--run-version\", description = \"Run version\", defaultValue = \"v15\")\n-\tprivate String runVersion;\n-\n-\t@CommandLine.Option(names = \"--step-size\", description = \"Step size of the job array\", defaultValue = \"36\")\n-\tprivate int stepSize;\n-\n-\t@CommandLine.Option(names = \"--jvm-opts\", description = \"Additional options for JVM\", defaultValue = \"-Xms82G -Xmx82G -XX:+UseParallelGC\")\n-\tprivate String jvmOpts;\n-\n-\t@CommandLine.Option(names = \"--setup\", defaultValue = \"org.matsim.run.batch.SMBatch\")\n-\tprivate Class<? extends BatchRun<T>> setup;\n-\n-\t@CommandLine.Option(names = \"--params\", defaultValue = \"org.matsim.run.batch.SMBatch$Params\")\n-\tprivate Class<T> params;\n-\n-\t@SuppressWarnings(\"rawtypes\")\n-\tpublic static void main(String[] args) {\n-\t\tSystem.exit(new CommandLine(new CreateBatteryForCluster()).execute(args));\n-\t}\n-\n-\t@Override\n-\tpublic Integer call() throws Exception {\n-\n-\t\t// Set property for BatchRun resolve to build the correct path\n-\t\tSystem.setProperty(\"EPISIM_ON_CLUSTER\", \"true\");\n+  private static final Logger log = LogManager.getLogger(CreateBatteryForCluster.class);\n \n-\t\tPreparedRun prepare = BatchRun.prepare(setup, params);\n+  @CommandLine.Option(names = \"--output\", defaultValue = \"battery\")\n+  private Path output;\n \n-\t\tboolean noBindings = true;\n-\t\tBatchRun.Metadata meta = prepare.setup.getMetadata();\n-\t\tString runName = meta.name;\n-\t\tPath dir = output.resolve(runVersion).resolve(meta.name).resolve(meta.region);\n-\t\tPath input = dir.resolve(\"input\");\n+  @CommandLine.Option(names = \"--batch-output\", defaultValue = \"output\")\n+  private Path batchOutput;\n \n-\t\tFiles.createDirectories(input);\n+  @CommandLine.Option(names = \"--run-version\", description = \"Run version\", defaultValue = \"v15\")\n+  private String runVersion;\n \n-\t\t// Copy all resources\n-\t\tfor (String name : Lists.newArrayList(\"collect.sh\", \"run.sh\", \"runSlurm.sh\", \"runParallel.sh\", \"postProcess.sh\", \"jvm.options\")) {\n-\t\t\tFiles.copy(Resources.getResource(name).openStream(), dir.resolve(name), StandardCopyOption.REPLACE_EXISTING);\n-\t\t}\n+  @CommandLine.Option(names = \"--step-size\", description = \"Step size of the job array\", defaultValue = \"36\")\n+  private int stepSize;\n \n-\t\twriteMetadata(dir, prepare);\n-\t\tBufferedWriter infoWriter = writeInfoHeader(dir, prepare);\n+  @CommandLine.Option(names = \"--jvm-opts\", description = \"Additional options for JVM\", defaultValue = \"-Xms82G -Xmx82G -XX:+UseParallelGC\")\n+  private String jvmOpts;\n \n-\t\tfor (PreparedRun.Run run : prepare.runs) {\n+  @CommandLine.Option(names = \"--setup\", defaultValue = \"org.matsim.run.batch.SMBatch\")\n+  private Class<? extends BatchRun<T>> setup;\n \n-\t\t\tString configFileName = writeRunToInfo(infoWriter, batchOutput, prepare, run, runName);\n+  @CommandLine.Option(names = \"--params\", defaultValue = \"org.matsim.run.batch.SMBatch$Params\")\n+  private Class<T> params;\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  public static void main(String[] args) {\n+    System.exit(new CommandLine(new CreateBatteryForCluster()).execute(args));\n+  }\n \n-\t\t\tnoBindings &= ((BatchRun) prepare.setup).getBindings(run.id, run.args) == null;\n+  @Override\n+  public Integer call() throws Exception {\n+\n+    // Set property for BatchRun resolve to build the correct path\n+    System.setProperty(\"EPISIM_ON_CLUSTER\", \"true\");\n \n-\t\t\tString outputPath = batchOutput + \"/\" + prepare.getOutputName(run);\n-\t\t\tif (noBindings) {\n-\t\t\t\trun.config.controler().setOutputDirectory(outputPath);\n-\t\t\t\trun.config.controler().setRunId(runName + run.id);\n+    PreparedRun prepare = BatchRun.prepare(setup, params);\n \n-\t\t\t\tprepare.setup.writeAuxiliaryFiles(dir, run.config);\n-\t\t\t\tConfigUtils.writeConfig(run.config, input.resolve(configFileName).toString());\n-\t\t\t}\n-\t\t}\n+    boolean noBindings = true;\n+    BatchRun.Metadata meta = prepare.setup.getMetadata();\n+    String runName = meta.name;\n+    Path dir = output.resolve(runVersion).resolve(meta.name).resolve(meta.region);\n+    Path input = dir.resolve(\"input\");\n \n-\t\t// Round up array size to be multiple of step size\n-\t\tint step = (1000 / stepSize) * stepSize;\n+    Files.createDirectories(input);\n \n-\t\tString jvmOpts = \"export JAVA_OPTS='\" + this.jvmOpts + \"'\\n\";\n+    // Copy all resources\n+    for (String name : Lists\n+        .newArrayList(\"collect.sh\", \"run.sh\", \"runSlurm.sh\", \"runParallel.sh\", \"postProcess.sh\",\n+            \"jvm.options\")) {\n+      Files.copy(Resources.getResource(name).openStream(), dir.resolve(name),\n+          StandardCopyOption.REPLACE_EXISTING);\n+    }\n \n-\t\t// Split task into multiple below 1000\n-\t\t// this is due to a limitation of maximum job array size\n-\t\tList<String> lines = Lists.newArrayList(\"#!/bin/bash\\n\", jvmOpts);\n-\t\tfor (int offset = 0; offset < prepare.runs.size(); offset += step) {\n+    writeMetadata(dir, prepare);\n+    BufferedWriter infoWriter = writeInfoHeader(dir, prepare);\n \n-\t\t\t// round array end down according to run size, but must also be multiple of step size\n-\t\t\tint arrayEnd = (int) Math.ceil((double) Math.min(offset + step, prepare.runs.size() - offset) / stepSize) * stepSize;\n+    for (PreparedRun.Run run : prepare.runs) {\n \n-\t\t\tlines.add(\n-\t\t\t\t\tString.format(\"sbatch --export=JAVA_OPTS,EXTRA_OFFSET=%d --array=0-%d:%d --ntasks-per-node=%d --job-name=%s runSlurm.sh\",\n-\t\t\t\t\t\t\toffset, arrayEnd - 1, stepSize, stepSize, runName)\n-\t\t\t);\n-\t\t}\n+      String configFileName = writeRunToInfo(infoWriter, batchOutput, prepare, run, runName);\n \n-\t\tif (noBindings)\n-\t\t\tFileUtils.writeLines(dir.resolve(\"start_slurm.sh\").toFile(), lines, \"\\n\");\n+      noBindings &= ((BatchRun) prepare.setup).getBindings(run.id, run.args) == null;\n \n-\t\t// Target system has 4 numa nodes\n-\t\tint perSocket = (stepSize / 4);\n+      String outputPath = batchOutput + \"/\" + prepare.getOutputName(run);\n+      if (noBindings) {\n+        run.config.controler().setOutputDirectory(outputPath);\n+        run.config.controler().setRunId(runName + run.id);\n+\n+        prepare.setup.writeAuxiliaryFiles(dir, run.config);\n+        ConfigUtils.writeConfig(run.config, input.resolve(configFileName).toString());\n+      }\n+    }\n+\n+    // Round up array size to be multiple of step size\n+    int step = (1000 / stepSize) * stepSize;\n \n-\t\tFileUtils.writeLines(dir.resolve(\"start_parallel_slurm.sh\").toFile(), Lists.newArrayList(\n-\t\t\t\t\"#!/bin/bash\\n\", jvmOpts,\n-\t\t\t\t// Dollar signs must be escaped\n-\t\t\t\t\"export EPISIM_SETUP='\" + setup.getName() + \"'\",\n-\t\t\t\t\"export EPISIM_PARAMS='\" + params.getName() + \"'\",\n-\t\t\t\t\"export EPISIM_INPUT='/scratch/projects/bzz0020/episim-input'\",\n-\t\t\t\t\"export EPISIM_OUTPUT='\" + batchOutput.toString() + \"'\",\n-\t\t\t\t\"\",\n-\t\t\t\tString.format(\"jid=$(sbatch --parsable --export=ALL --array=1-%d --ntasks-per-socket=%d --job-name=%s runParallel.sh)\",\n-\t\t\t\t\t\t(int) Math.ceil(prepare.runs.size() / (perSocket * 4d)), perSocket, runName),\n-\t\t\t\t\"sbatch --export=ALL --dependency=afterok:$jid postProcess.sh\"\n-\t\t), \"\\n\");\n+    String jvmOpts = \"export JAVA_OPTS='\" + this.jvmOpts + \"'\\n\";\n+\n+    // Split task into multiple below 1000\n+    // this is due to a limitation of maximum job array size\n+    List<String> lines = Lists.newArrayList(\"#!/bin/bash\\n\", jvmOpts);\n+    for (int offset = 0; offset < prepare.runs.size(); offset += step) {\n+\n+      // round array end down according to run size, but must also be multiple of step size\n+      int arrayEnd = (int) Math\n+          .ceil((double) Math.min(offset + step, prepare.runs.size() - offset) / stepSize) *\n+          stepSize;\n+\n+      lines.add(\n+          String.format(\n+              \"sbatch --export=JAVA_OPTS,EXTRA_OFFSET=%d --array=0-%d:%d --ntasks-per-node=%d --job-name=%s runSlurm.sh\",\n+              offset, arrayEnd - 1, stepSize, stepSize, runName)\n+      );\n+    }\n+\n+    if (noBindings) {\n+      FileUtils.writeLines(dir.resolve(\"start_slurm.sh\").toFile(), lines, \"\\n\");\n+    }\n \n-\t\tFileUtils.writeLines(dir.resolve(\"start_qsub.sh\").toFile(), Lists.newArrayList(\n-\t\t\t\t\"#!/bin/bash\\n\", jvmOpts,\n-\t\t\t\t// Dollar signs must be escaped\n-\t\t\t\t\"export EPISIM_SETUP='\" + setup.getName() + \"'\",\n-\t\t\t\t\"export EPISIM_PARAMS='\" + params.getName() + \"'\",\n-\t\t\t\t\"export EPISIM_INPUT='<PUT INPUT DIR HERE>'\",\n-\t\t\t\t\"export EPISIM_OUTPUT='\" + batchOutput.toString() + \"'\",\n-\t\t\t\t\"\",\n-\t\t\t\tString.format(\"jid=$(qsub -V -N %s run.sh)\", runName),\n-\t\t\t\t\"qsub -V -W depend=afterok:$jid postProcess.sh\"\n-\t\t), \"\\n\");\n-\n-\n-\t\tFileUtils.writeLines(dir.resolve(\"test.sh\").toFile(), Lists.newArrayList(\n-\t\t\t\t\"#!/bin/bash\\n\", jvmOpts,\n-\t\t\t\t\"export JOB_NAME=\" + runName + 1,\n-\t\t\t\t\"\",\n-\t\t\t\t\"./run.sh\"\n-\t\t), \"\\n\");\n-\n-\t\tinfoWriter.close();\n-\n-\t\tif (!noBindings) {\n-\t\t\tlog.warn(\"This run defines custom bindings. Run from config will not be available.\");\n-\t\t}\n-\n-\t\treturn 0;\n-\t}\n-\n-\t/**\n-\t * Writes the header of _info.txt into {@code dir}.\n-\t */\n-\tstatic BufferedWriter writeInfoHeader(Path dir, PreparedRun prepare) throws IOException {\n-\t\tBufferedWriter infoWriter = Files.newBufferedWriter(dir.resolve(\"_info.txt\"));\n-\n-\t\tList<String> header = Lists.newArrayList(\"RunScript\", \"Config\", \"RunId\", \"Output\");\n-\t\theader.addAll(prepare.parameter);\n-\n-\t\tinfoWriter.write(Joiner.on(\";\").join(header));\n-\t\tinfoWriter.newLine();\n-\n-\t\treturn infoWriter;\n-\t}\n-\n-\t/**\n-\t * Writes one line into the info.txt for one run.\n-\t * @return config file name\n-\t */\n-\tstatic String  writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n-\t\tString runId = runName + run.id;\n-\t\tString configFileName = \"config_\" + runName + run.id + \".xml\";\n-\n-\t\tString outputPath = batchOutput + \"/\" + prepare.getOutputName(run);\n-\n-\t\tList<String> line = Lists.newArrayList(\"run.sh\", configFileName, runId, outputPath);\n-\t\tline.addAll(run.params.stream().map(EpisimUtils::asString).collect(Collectors.toList()));\n-\n-\t\t// base case is not contained in the info file\n-\t\tif (run.id > 0) {\n-\t\t\tinfoWriter.write(Joiner.on(\";\").join(line));\n-\t\t\tinfoWriter.newLine();\n-\t\t}\n-\n-\t\treturn configFileName;\n-\t}\n-\n-\t/**\n-\t * Write metadata.yaml into {@code dir}.\n-\t */\n-\tstatic void writeMetadata(Path dir, PreparedRun run) throws IOException {\n-\n-\t\tBufferedWriter yamlWriter = Files.newBufferedWriter(dir.resolve(\"metadata.yaml\"));\n-\n-\t\tObjectMapper mapper = new ObjectMapper(new YAMLFactory()\n-\t\t\t\t.enable(YAMLGenerator.Feature.MINIMIZE_QUOTES))\n-\t\t\t\t.registerModule(new JavaTimeModule())\n-\t\t\t\t.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n-\n-\t\tMap<String, Object> metadata = new LinkedHashMap<>();\n-\n-\t\tmetadata.put(\"readme\", \"notes.md\");\n-\t\tmetadata.put(\"zip\", \"summaries.zip\");\n-\t\tmetadata.put(\"info\", \"_info.txt\");\n-\t\tmetadata.put(\"zipFolder\", \"summaries\");\n-\t\tmetadata.put(\"timestamp\", LocalDate.now());\n-\n-\t\tmetadata.putAll(run.getMetadata());\n-\t\tmapper.writeValue(yamlWriter, metadata);\n-\t\tyamlWriter.close();\n-\t}\n+    // Target system has 4 numa nodes\n+    int perSocket = (stepSize / 4);\n+\n+    FileUtils.writeLines(dir.resolve(\"start_parallel_slurm.sh\").toFile(), Lists.newArrayList(\n+        \"#!/bin/bash\\n\", jvmOpts,\n+        // Dollar signs must be escaped\n+        \"export EPISIM_SETUP='\" + setup.getName() + \"'\",\n+        \"export EPISIM_PARAMS='\" + params.getName() + \"'\",\n+        \"export EPISIM_INPUT='/scratch/projects/bzz0020/episim-input'\",\n+        \"export EPISIM_OUTPUT='\" + batchOutput.toString() + \"'\",\n+        \"\",\n+        String.format(\n+            \"jid=$(sbatch --parsable --export=ALL --array=1-%d --ntasks-per-socket=%d --job-name=%s runParallel.sh)\",\n+            (int) Math.ceil(prepare.runs.size() / (perSocket * 4d)), perSocket, runName),\n+        \"sbatch --export=ALL --dependency=afterok:$jid postProcess.sh\"\n+    ), \"\\n\");\n+\n+    FileUtils.writeLines(dir.resolve(\"start_qsub.sh\").toFile(), Lists.newArrayList(\n+        \"#!/bin/bash\\n\", jvmOpts,\n+        // Dollar signs must be escaped\n+        \"export EPISIM_SETUP='\" + setup.getName() + \"'\",\n+        \"export EPISIM_PARAMS='\" + params.getName() + \"'\",\n+        \"export EPISIM_INPUT='<PUT INPUT DIR HERE>'\",\n+        \"export EPISIM_OUTPUT='\" + batchOutput.toString() + \"'\",\n+        \"\",\n+        String.format(\"jid=$(qsub -V -N %s run.sh)\", runName),\n+        \"qsub -V -W depend=afterok:$jid postProcess.sh\"\n+    ), \"\\n\");\n+\n+\n+    FileUtils.writeLines(dir.resolve(\"test.sh\").toFile(), Lists.newArrayList(\n+        \"#!/bin/bash\\n\", jvmOpts,\n+        \"export JOB_NAME=\" + runName + 1,\n+        \"\",\n+        \"./run.sh\"\n+    ), \"\\n\");\n+\n+    infoWriter.close();\n+\n+    if (!noBindings) {\n+      log.warn(\"This run defines custom bindings. Run from config will not be available.\");\n+    }\n+\n+    return 0;\n+  }\n+\n+  /**\n+   * Writes the header of _info.txt into {@code dir}.\n+   */\n+  static BufferedWriter writeInfoHeader(Path dir, PreparedRun prepare) throws IOException {\n+    BufferedWriter infoWriter = Files.newBufferedWriter(dir.resolve(\"_info.txt\"));\n+\n+    List<String> header = Lists.newArrayList(\"RunScript\", \"Config\", \"RunId\", \"Output\");\n+    header.addAll(prepare.parameter);\n+\n+    infoWriter.write(Joiner.on(\";\").join(header));\n+    infoWriter.newLine();\n+\n+    return infoWriter;\n+  }\n+\n+  /**\n+   * Writes one line into the info.txt for one run.\n+   *\n+   * @return config file name\n+   */\n+  static String writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare,\n+                               PreparedRun.Run run, String runName) throws IOException {\n+    String runId = runName + run.id;\n+    String configFileName = \"config_\" + runName + run.id + \".xml\";\n+\n+    String outputPath = batchOutput + \"/\" + prepare.getOutputName(run);\n+\n+    List<String> line = Lists.newArrayList(\"run.sh\", configFileName, runId, outputPath);\n+    line.addAll(run.params.stream().map(EpisimUtils::asString).collect(Collectors.toList()));\n+\n+    // base case is not contained in the info file\n+    if (run.id > 0) {\n+      infoWriter.write(Joiner.on(\";\").join(line));\n+      infoWriter.newLine();\n+    }\n+\n+    return configFileName;\n+  }\n+\n+  /**\n+   * Write metadata.yaml into {@code dir}.\n+   */\n+  static void writeMetadata(Path dir, PreparedRun run) throws IOException {\n+\n+    BufferedWriter yamlWriter = Files.newBufferedWriter(dir.resolve(\"metadata.yaml\"));\n+\n+    ObjectMapper mapper = new ObjectMapper(new YAMLFactory()\n+        .enable(YAMLGenerator.Feature.MINIMIZE_QUOTES))\n+        .registerModule(new JavaTimeModule())\n+        .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+\n+    Map<String, Object> metadata = new LinkedHashMap<>();\n+\n+    metadata.put(\"readme\", \"notes.md\");\n+    metadata.put(\"zip\", \"summaries.zip\");\n+    metadata.put(\"info\", \"_info.txt\");\n+    metadata.put(\"zipFolder\", \"summaries\");\n+    metadata.put(\"timestamp\", LocalDate.now());\n+\n+    metadata.putAll(run.getMetadata());\n+    mapper.writeValue(yamlWriter, metadata);\n+    yamlWriter.close();\n+  }\n \n }\n",
            "diff_size": 240
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/30/CreateBatteryForCluster.java\nindex 93ac2adcd31..99f1fb166d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/30/CreateBatteryForCluster.java\n@@ -170,7 +170,7 @@ public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \t\t\t\t\"\",\n \t\t\t\tString.format(\"jid=$(sbatch --parsable --export=ALL --array=1-%d --ntasks-per-socket=%d --job-name=%s runParallel.sh)\",\n \t\t\t\t\t\t(int) Math.ceil(prepare.runs.size() / (perSocket * 4d)), perSocket, runName),\n-\t\t\t\t\"sbatch --export=ALL --dependency=afterok:$jid postProcess.sh\"\n+\"sbatch --export=ALL --dependency=afterok:$jid postProcess.sh\"\n \t\t), \"\\n\");\n \n \t\tFileUtils.writeLines(dir.resolve(\"start_qsub.sh\").toFile(), Lists.newArrayList(\n@@ -221,7 +221,7 @@ public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \t * Writes one line into the info.txt for one run.\n \t * @return config file name\n \t */\n-\tstatic String  writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n+\tstatic String writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n \t\tString runId = runName + run.id;\n \t\tString configFileName = \"config_\" + runName + run.id + \".xml\";\n \n@@ -264,4 +264,4 @@ public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \t\tyamlWriter.close();\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_random/30/CreateBatteryForCluster.java\nindex 93ac2adcd31..ccc72de1818 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_random/30/CreateBatteryForCluster.java\n@@ -221,7 +221,7 @@ public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \t * Writes one line into the info.txt for one run.\n \t * @return config file name\n \t */\n-\tstatic String  writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n+\tstatic String writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n \t\tString runId = runName + run.id;\n \t\tString configFileName = \"config_\" + runName + run.id + \".xml\";\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_three_grams/30/CreateBatteryForCluster.java\nindex 93ac2adcd31..ccc72de1818 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/30/CreateBatteryForCluster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_three_grams/30/CreateBatteryForCluster.java\n@@ -221,7 +221,7 @@ public class CreateBatteryForCluster<T> implements Callable<Integer> {\n \t * Writes one line into the info.txt for one run.\n \t * @return config file name\n \t */\n-\tstatic String  writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n+\tstatic String writeRunToInfo(BufferedWriter infoWriter, Path batchOutput, PreparedRun prepare, PreparedRun.Run run, String runName) throws IOException {\n \t\tString runId = runName + run.id;\n \t\tString configFileName = \"config_\" + runName + run.id + \".xml\";\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}