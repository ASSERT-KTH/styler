{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3019",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3019/BetweennessCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3019/BetweennessCentrality.java\nindex 19524fddc38..7cc897eda17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3019/BetweennessCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3019/BetweennessCentrality.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.HashMap;\n@@ -35,108 +36,104 @@ import org.neo4j.graphdb.Relationship;\n /**\n  * Class for computing betweenness centrality as defined by Linton C. Freeman\n  * (1977) using the algorithm by Ulrik Brandes (2001).\n- * @complexity: Using a {@link SingleSourceShortestPath} algorithm with time\n- *              complexity A, this algorithm runs in time O(n * (A + m)).\n- *              Examples: This becomes O(n * m) for BFS search and O(n^2 *\n- *              log(n) + n * m) for Dijkstra.\n+ *\n+ * @param <ShortestPathCostType> The datatype used by the underlying\n+ *                               {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n+ *                               weights are represented by.\n  * @author Patrik Larsson\n- * @param <ShortestPathCostType>\n- *            The datatype used by the underlying\n- *            {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n- *            weights are represented by.\n+ * @complexity: Using a {@link SingleSourceShortestPath} algorithm with time\n+ * complexity A, this algorithm runs in time O(n * (A + m)).\n+ * Examples: This becomes O(n * m) for BFS search and O(n^2 *\n+ * log(n) + n * m) for Dijkstra.\n  */\n public class BetweennessCentrality<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<Double,ShortestPathCostType>\n+    ShortestPathBasedCentrality<Double, ShortestPathCostType>\n {\n-    protected Double globalFactor;\n+  protected Double globalFactor;\n+\n+  /**\n+   * Default constructor.\n+   *\n+   * @param singleSourceShortestPath Underlying singleSourceShortestPath.\n+   * @param nodeSet                  A set containing the nodes for which centrality values should\n+   *                                 be computed.\n+   */\n+  public BetweennessCentrality(\n+      SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n+      Set<Node> nodeSet)\n+  {\n+    super(singleSourceShortestPath, new DoubleAdder(), 0.0, nodeSet);\n+  }\n \n-    /**\n-     * Default constructor.\n-     * @param singleSourceShortestPath\n-     *            Underlying singleSourceShortestPath.\n-     * @param nodeSet\n-     *            A set containing the nodes for which centrality values should\n-     *            be computed.\n-     */\n-    public BetweennessCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        Set<Node> nodeSet )\n+  @Override\n+  public void reset()\n+  {\n+    super.reset();\n+    globalFactor = 1.0;\n+    if (singleSourceShortestPath.getDirection().equals(Direction.BOTH))\n     {\n-        super( singleSourceShortestPath, new DoubleAdder(), 0.0, nodeSet );\n+      globalFactor = 0.5;\n     }\n+  }\n \n-    @Override\n-    public void reset()\n+  /**\n+   * This recursively updates the node dependencies\n+   *\n+   * @param node          The start node\n+   * @param skipFirstNode If true, the start node is not updated. Useful, since the\n+   *                      first node in any path doesnt need to be updated.\n+   * @param successors\n+   * @param counter       Object that can return the number of paths from the initial\n+   *                      start node to any node.\n+   * @param dependencies  A map used to limit the recursion where possible (dynamic\n+   *                      programming)\n+   * @return\n+   */\n+  protected Double getAndUpdateNodeDependency(Node node,\n+                                              boolean skipFirstNode, Map<Node, List<Relationship>> successors,\n+                                              PathCounter counter, Map<Node, Double> dependencies)\n+  {\n+    Double dependency = dependencies.get(node);\n+    if (dependency != null)\n     {\n-        super.reset();\n-        globalFactor = 1.0;\n-        if ( singleSourceShortestPath.getDirection().equals( Direction.BOTH ) )\n-        {\n-            globalFactor = 0.5;\n-        }\n+      return dependency;\n     }\n-\n-    /**\n-     * This recursively updates the node dependencies\n-     * @param node\n-     *            The start node\n-     * @param skipFirstNode\n-     *            If true, the start node is not updated. Useful, since the\n-     *            first node in any path doesnt need to be updated.\n-     * @param successors\n-     * @param counter\n-     *            Object that can return the number of paths from the initial\n-     *            start node to any node.\n-     * @param dependencies\n-     *            A map used to limit the recursion where possible (dynamic\n-     *            programming)\n-     * @return\n-     */\n-    protected Double getAndUpdateNodeDependency( Node node,\n-        boolean skipFirstNode, Map<Node,List<Relationship>> successors,\n-        PathCounter counter, Map<Node,Double> dependencies )\n+    dependency = (double) 0;\n+    List<Relationship> succs = successors.get(node);\n+    if (succs == null || succs.size() == 0)\n     {\n-        Double dependency = dependencies.get( node );\n-        if ( dependency != null )\n-        {\n-            return dependency;\n-        }\n-        dependency = (double) 0;\n-        List<Relationship> succs = successors.get( node );\n-        if ( succs == null || succs.size() == 0 )\n-        {\n-            return (double) 0;\n-        }\n-        for ( Relationship relationship : succs )\n-        {\n-            Node otherNode = relationship.getOtherNode( node );\n-            Double otherDependency = getAndUpdateNodeDependency( otherNode,\n-                false, successors, counter, dependencies );\n-            dependency += (otherDependency + 1)\n-                * counter.getNumberOfPathsToNode( node )\n-                / counter.getNumberOfPathsToNode( otherNode );\n-        }\n-        if ( !skipFirstNode )\n-        {\n-            dependencies.put( node, dependency );\n-            // When adding to the final result (and only then), take the global\n-            // factor into account.\n-            addCentralityToNode( node, dependency * globalFactor );\n-        }\n-        return dependency;\n+      return (double) 0;\n     }\n-\n-    @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+    for (Relationship relationship : succs)\n     {\n-        // Extract predecessors and successors\n-        Map<Node,List<Relationship>> predecessors = singleSourceShortestPath\n-            .getPredecessors();\n-        Map<Node,List<Relationship>> successors = Util\n-            .reversedPredecessors( predecessors );\n-        PathCounter counter = new Util.PathCounter( predecessors );\n-        // Recursively update the node dependencies\n-        getAndUpdateNodeDependency( node, true, successors, counter, new HashMap<>() );\n+      Node otherNode = relationship.getOtherNode(node);\n+      Double otherDependency = getAndUpdateNodeDependency(otherNode,\n+          false, successors, counter, dependencies);\n+      dependency += (otherDependency + 1)\n+          * counter.getNumberOfPathsToNode(node)\n+          / counter.getNumberOfPathsToNode(otherNode);\n     }\n+    if (!skipFirstNode)\n+    {\n+      dependencies.put(node, dependency);\n+      // When adding to the final result (and only then), take the global\n+      // factor into account.\n+      addCentralityToNode(node, dependency * globalFactor);\n+    }\n+    return dependency;\n+  }\n+\n+  @Override\n+  public void processShortestPaths(Node node,\n+                                   SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath)\n+  {\n+    // Extract predecessors and successors\n+    Map<Node, List<Relationship>> predecessors = singleSourceShortestPath\n+        .getPredecessors();\n+    Map<Node, List<Relationship>> successors = Util\n+        .reversedPredecessors(predecessors);\n+    PathCounter counter = new Util.PathCounter(predecessors);\n+    // Recursively update the node dependencies\n+    getAndUpdateNodeDependency(node, true, successors, counter, new HashMap<>());\n+  }\n }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "62",
                    "severity": "error",
                    "message": "'{' at column 62 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3019/BetweennessCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3019/BetweennessCentrality.java\nindex 19524fddc38..e8c5dfc1511 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3019/BetweennessCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3019/BetweennessCentrality.java\n@@ -46,8 +46,7 @@ import org.neo4j.graphdb.Relationship;\n  *            weights are represented by.\n  */\n public class BetweennessCentrality<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<Double,ShortestPathCostType>\n-{\n+    ShortestPathBasedCentrality<Double,ShortestPathCostType> {\n     protected Double globalFactor;\n \n     /**\n@@ -58,10 +57,8 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n      *            A set containing the nodes for which centrality values should\n      *            be computed.\n      */\n-    public BetweennessCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        Set<Node> nodeSet )\n-    {\n+    public BetweennessCentrality( SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath, Set<Node> nodeSet )\n+{\n         super( singleSourceShortestPath, new DoubleAdder(), 0.0, nodeSet );\n     }\n \n@@ -92,16 +89,16 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n      *            programming)\n      * @return\n      */\n-    protected Double getAndUpdateNodeDependency( Node node,\n-        boolean skipFirstNode, Map<Node,List<Relationship>> successors,\n+    protected Double getAndUpdateNodeDependency( Node node, boolean skipFirstNode, Map<Node,List<Relationship>> successors,\n         PathCounter counter, Map<Node,Double> dependencies )\n-    {\n+{\n         Double dependency = dependencies.get( node );\n         if ( dependency != null )\n         {\n             return dependency;\n         }\n-        dependency = (double) 0;\n+\n+dependency = (double) 0;\n         List<Relationship> succs = successors.get( node );\n         if ( succs == null || succs.size() == 0 )\n         {\n@@ -110,12 +107,11 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n         for ( Relationship relationship : succs )\n         {\n             Node otherNode = relationship.getOtherNode( node );\n-            Double otherDependency = getAndUpdateNodeDependency( otherNode,\n-                false, successors, counter, dependencies );\n-            dependency += (otherDependency + 1)\n+            Double otherDependency = getAndUpdateNodeDependency( otherNode, false, successors, counter, dependencies );\n+            dependency += (otherDependency + 1 )\n                 * counter.getNumberOfPathsToNode( node )\n                 / counter.getNumberOfPathsToNode( otherNode );\n-        }\n+    }\n         if ( !skipFirstNode )\n         {\n             dependencies.put( node, dependency );\n@@ -123,20 +119,18 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n             // factor into account.\n             addCentralityToNode( node, dependency * globalFactor );\n         }\n-        return dependency;\n+\n+return dependency;\n     }\n \n     @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n-    {\n+    public void processShortestPaths( Node node, SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+{\n         // Extract predecessors and successors\n-        Map<Node,List<Relationship>> predecessors = singleSourceShortestPath\n-            .getPredecessors();\n-        Map<Node,List<Relationship>> successors = Util\n-            .reversedPredecessors( predecessors );\n-        PathCounter counter = new Util.PathCounter( predecessors );\n+        Map<Node,List<Relationship>> predecessors = singleSourceShortestPath.getPredecessors();\n+        Map<Node,List<Relationship>> successors = Util.reversedPredecessors( predecessors );\n+PathCounter counter = new Util.PathCounter( predecessors );\n         // Recursively update the node dependencies\n         getAndUpdateNodeDependency( node, true, successors, counter, new HashMap<>() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "36",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "column": "27",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "49",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "113",
                    "column": "89",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "column": "50",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3019/BetweennessCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3019/BetweennessCentrality.java\nindex 19524fddc38..b88950a164d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3019/BetweennessCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3019/BetweennessCentrality.java\n@@ -23,7 +23,6 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.neo4j.graphalgo.impl.shortestpath.SingleSourceShortestPath;\n import org.neo4j.graphalgo.impl.shortestpath.Util;\n import org.neo4j.graphalgo.impl.shortestpath.Util.PathCounter;\n@@ -45,8 +44,8 @@ import org.neo4j.graphdb.Relationship;\n  *            {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n  *            weights are represented by.\n  */\n-public class BetweennessCentrality<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<Double,ShortestPathCostType>\n+\n+public class BetweennessCentrality <ShortestPathCostType> extends ShortestPathBasedCentrality<Double,ShortestPathCostType>\n {\n     protected Double globalFactor;\n \n@@ -58,9 +57,8 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n      *            A set containing the nodes for which centrality values should\n      *            be computed.\n      */\n-    public BetweennessCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        Set<Node> nodeSet )\n+\n+    public BetweennessCentrality( SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath, Set<Node> nodeSet )\n     {\n         super( singleSourceShortestPath, new DoubleAdder(), 0.0, nodeSet );\n     }\n@@ -68,7 +66,7 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n     @Override\n     public void reset()\n     {\n-        super.reset();\n+        super.reset( );\n         globalFactor = 1.0;\n         if ( singleSourceShortestPath.getDirection().equals( Direction.BOTH ) )\n         {\n@@ -92,51 +90,48 @@ public class BetweennessCentrality<ShortestPathCostType> extends\n      *            programming)\n      * @return\n      */\n-    protected Double getAndUpdateNodeDependency( Node node,\n-        boolean skipFirstNode, Map<Node,List<Relationship>> successors,\n-        PathCounter counter, Map<Node,Double> dependencies )\n+\n+    protected Double getAndUpdateNodeDependency( Node node, boolean skipFirstNode, Map<Node,List<Relationship>> successors, PathCounter counter, Map<Node,Double> dependencies )\n     {\n         Double dependency = dependencies.get( node );\n         if ( dependency != null )\n         {\n             return dependency;\n         }\n+\n         dependency = (double) 0;\n         List<Relationship> succs = successors.get( node );\n-        if ( succs == null || succs.size() == 0 )\n+        if ( succs == null|| succs.size() == 0 )\n         {\n             return (double) 0;\n         }\n-        for ( Relationship relationship : succs )\n+\n+        for( Relationship relationship : succs)\n         {\n             Node otherNode = relationship.getOtherNode( node );\n-            Double otherDependency = getAndUpdateNodeDependency( otherNode,\n-                false, successors, counter, dependencies );\n-            dependency += (otherDependency + 1)\n-                * counter.getNumberOfPathsToNode( node )\n-                / counter.getNumberOfPathsToNode( otherNode );\n+            Double otherDependency = getAndUpdateNodeDependency( otherNode, false, successors, counter, dependencies );\n+            dependency += ( otherDependency + 1)* counter.getNumberOfPathsToNode( node )/ counter.getNumberOfPathsToNode( otherNode );\n         }\n-        if ( !skipFirstNode )\n+\n+        if ( ! skipFirstNode )\n         {\n             dependencies.put( node, dependency );\n             // When adding to the final result (and only then), take the global\n             // factor into account.\n-            addCentralityToNode( node, dependency * globalFactor );\n+            addCentralityToNode( node, dependency* globalFactor );\n         }\n+\n         return dependency;\n     }\n \n     @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+    public void processShortestPaths( Node node, SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n     {\n         // Extract predecessors and successors\n-        Map<Node,List<Relationship>> predecessors = singleSourceShortestPath\n-            .getPredecessors();\n-        Map<Node,List<Relationship>> successors = Util\n-            .reversedPredecessors( predecessors );\n-        PathCounter counter = new Util.PathCounter( predecessors );\n+        Map<Node,List<Relationship>> predecessors = singleSourceShortestPath.getPredecessors();\n+        Map<Node,List<Relationship>> successors = Util.reversedPredecessors( predecessors );\n+        PathCounter counter = new Util. PathCounter( predecessors );\n         // Recursively update the node dependencies\n         getAndUpdateNodeDependency( node, true, successors, counter, new HashMap<>() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}