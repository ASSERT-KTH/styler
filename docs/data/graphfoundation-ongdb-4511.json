{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4511",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "193",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "223",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "230",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "233",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "236",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "242",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "245",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "248",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "251",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "256",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4511/Set.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4511/Set.java\nindex 9940c47e78d..bda818f3570 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4511/Set.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4511/Set.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.lang.reflect.Array;\n@@ -38,245 +39,236 @@ import org.neo4j.shell.ShellException;\n /**\n  * Sets a property for the current node or relationship.\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Set extends TransactionProvidingApp\n {\n-    private static class ValueTypeContext\n-    {\n-        private final Class<?> fundamentalClass;\n-        private final Class<?> boxClass;\n-        private final Class<?> fundamentalArrayClass;\n-        private final Class<?> boxArrayClass;\n-\n-        ValueTypeContext( Class<?> fundamentalClass, Class<?> boxClass,\n-            Class<?> fundamentalArrayClass, Class<?> boxArrayClass )\n-        {\n-            this.fundamentalClass = fundamentalClass;\n-            this.boxClass = boxClass;\n-            this.fundamentalArrayClass = fundamentalArrayClass;\n-            this.boxArrayClass = boxArrayClass;\n-        }\n-\n-        public String getName()\n-        {\n-            return fundamentalClass.equals( boxClass ) ?\n-                boxClass.getSimpleName() : fundamentalClass.getSimpleName();\n-        }\n+  private static class ValueTypeContext\n+  {\n+    private final Class<?> fundamentalClass;\n+    private final Class<?> boxClass;\n+    private final Class<?> fundamentalArrayClass;\n+    private final Class<?> boxArrayClass;\n \n-        public String getArrayName()\n-        {\n-            return getName() + \"[]\";\n-        }\n+    ValueTypeContext(Class<?> fundamentalClass, Class<?> boxClass,\n+                     Class<?> fundamentalArrayClass, Class<?> boxArrayClass)\n+    {\n+      this.fundamentalClass = fundamentalClass;\n+      this.boxClass = boxClass;\n+      this.fundamentalArrayClass = fundamentalArrayClass;\n+      this.boxArrayClass = boxArrayClass;\n     }\n \n-    private static class ValueType\n+    public String getName()\n     {\n-        private final ValueTypeContext context;\n-        private final boolean isArray;\n-\n-        ValueType( ValueTypeContext context, boolean isArray )\n-        {\n-            this.context = context;\n-            this.isArray = isArray;\n-        }\n+      return fundamentalClass.equals(boxClass) ?\n+          boxClass.getSimpleName() : fundamentalClass.getSimpleName();\n     }\n \n-    private static final Map<String, ValueType> NAME_TO_VALUE_TYPE = new HashMap<>();\n-    static\n+    public String getArrayName()\n     {\n-        mapNameToValueType( new ValueTypeContext( boolean.class,\n-            Boolean.class, boolean[].class, Boolean[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            byte.class, Byte.class, byte[].class, Byte[].class ) );\n-        mapNameToValueType( new ValueTypeContext( char.class,\n-            Character.class, char[].class, Character[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            short.class, Short.class, short[].class, Short[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            int.class, Integer.class, int[].class, Integer[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            long.class, Long.class, long[].class, Long[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            float.class, Float.class, float[].class, Float[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            double.class, Double.class, double[].class, Double[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            String.class, String.class, String[].class, String[].class ) );\n+      return getName() + \"[]\";\n     }\n+  }\n \n-    private static final Map<Class<?>, String> VALUE_TYPE_TO_NAME = new HashMap<>();\n-    static\n+  private static class ValueType\n+  {\n+    private final ValueTypeContext context;\n+    private final boolean isArray;\n+\n+    ValueType(ValueTypeContext context, boolean isArray)\n     {\n-        for ( Map.Entry<String, ValueType> entry :\n-            NAME_TO_VALUE_TYPE.entrySet() )\n-        {\n-            ValueTypeContext context = entry.getValue().context;\n-            VALUE_TYPE_TO_NAME.put( context.fundamentalClass,\n-                context.getName() );\n-            VALUE_TYPE_TO_NAME.put( context.boxClass,\n-                context.getName() );\n-            VALUE_TYPE_TO_NAME.put( context.fundamentalArrayClass,\n-                context.getArrayName() );\n-            VALUE_TYPE_TO_NAME.put( context.boxArrayClass,\n-                context.getArrayName() );\n-        }\n+      this.context = context;\n+      this.isArray = isArray;\n     }\n+  }\n+\n+  private static final Map<String, ValueType> NAME_TO_VALUE_TYPE = new HashMap<>();\n \n-    private static void mapNameToValueType( ValueTypeContext context )\n+  static\n+  {\n+    mapNameToValueType(new ValueTypeContext(boolean.class,\n+        Boolean.class, boolean[].class, Boolean[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        byte.class, Byte.class, byte[].class, Byte[].class));\n+    mapNameToValueType(new ValueTypeContext(char.class,\n+        Character.class, char[].class, Character[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        short.class, Short.class, short[].class, Short[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        int.class, Integer.class, int[].class, Integer[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        long.class, Long.class, long[].class, Long[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        float.class, Float.class, float[].class, Float[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        double.class, Double.class, double[].class, Double[].class));\n+    mapNameToValueType(new ValueTypeContext(\n+        String.class, String.class, String[].class, String[].class));\n+  }\n+\n+  private static final Map<Class<?>, String> VALUE_TYPE_TO_NAME = new HashMap<>();\n+\n+  static\n+  {\n+    for (Map.Entry<String, ValueType> entry :\n+        NAME_TO_VALUE_TYPE.entrySet())\n     {\n-        NAME_TO_VALUE_TYPE.put( context.getName(),\n-            new ValueType( context, false ) );\n-        NAME_TO_VALUE_TYPE.put( context.getArrayName(),\n-            new ValueType( context, true ) );\n+      ValueTypeContext context = entry.getValue().context;\n+      VALUE_TYPE_TO_NAME.put(context.fundamentalClass,\n+          context.getName());\n+      VALUE_TYPE_TO_NAME.put(context.boxClass,\n+          context.getName());\n+      VALUE_TYPE_TO_NAME.put(context.fundamentalArrayClass,\n+          context.getArrayName());\n+      VALUE_TYPE_TO_NAME.put(context.boxArrayClass,\n+          context.getArrayName());\n     }\n+  }\n \n-    /**\n-     * Constructs a new \"set\" application.\n-     */\n-    public Set()\n-    {\n-        super();\n-        this.addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST,\n-            \"Value type, f.ex: String, String[], int, long[], byte a.s.o. \" +\n+  private static void mapNameToValueType(ValueTypeContext context)\n+  {\n+    NAME_TO_VALUE_TYPE.put(context.getName(),\n+        new ValueType(context, false));\n+    NAME_TO_VALUE_TYPE.put(context.getArrayName(),\n+        new ValueType(context, true));\n+  }\n+\n+  /**\n+   * Constructs a new \"set\" application.\n+   */\n+  public Set()\n+  {\n+    super();\n+    this.addOptionDefinition(\"t\", new OptionDefinition(OptionValueType.MUST,\n+        \"Value type, f.ex: String, String[], int, long[], byte a.s.o. \" +\n             \"If an array type is supplied the value(s) are given in a \" +\n             \"JSON-style array format, f.ex:\\n\" +\n             \"[321,45324] for an int[] or\\n\" +\n             \"\\\"['The first string','The second string here']\\\" for a \" +\n-            \"String[]\" ) );\n-        this.addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.NONE,\n-            \"Tells the command to set the supplied values as property.\" ) );\n-        this.addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-                \"Sets one or more labels on the current node.\" ) );\n-    }\n-\n-    @Override\n-    public String getDescription()\n-    {\n-        return \"Sets a property on the current node or relationship or label on the current node.\\n\" +\n-                \"Usage:\\n\" +\n-                \"  set <key> <value>\\n\" +\n-                \"  set -p <key> <value>\\n\" +\n-                \"  set -l PERSON\";\n-    }\n+            \"String[]\"));\n+    this.addOptionDefinition(\"p\", new OptionDefinition(OptionValueType.NONE,\n+        \"Tells the command to set the supplied values as property.\"));\n+    this.addOptionDefinition(\"l\", new OptionDefinition(OptionValueType.MUST,\n+        \"Sets one or more labels on the current node.\"));\n+  }\n \n-    protected static String getValueTypeName( Class<?> cls )\n-    {\n-        return VALUE_TYPE_TO_NAME.get( cls );\n-    }\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Sets a property on the current node or relationship or label on the current node.\\n\" +\n+        \"Usage:\\n\" +\n+        \"  set <key> <value>\\n\" +\n+        \"  set -p <key> <value>\\n\" +\n+        \"  set -l PERSON\";\n+  }\n \n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException\n-    {\n-        boolean forProperty = parser.options().containsKey( \"p\" );\n-        boolean forLabel = parser.options().containsKey( \"l\" );\n-        if ( forProperty || !forLabel )\n-        {   // Property\n-            if ( parser.arguments().size() < 2 )\n-            {\n-                throw new ShellException( \"Must supply key and value, \" +\n-                    \"like: set title \\\"This is a my title\\\"\" );\n-            }\n+  protected static String getValueTypeName(Class<?> cls)\n+  {\n+    return VALUE_TYPE_TO_NAME.get(cls);\n+  }\n \n-            String key = parser.arguments().get( 0 );\n-            ValueType valueType = getValueType( parser );\n-            Object value = parseValue( parser.arguments().get( 1 ), valueType );\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session,\n+                              Output out) throws ShellException\n+  {\n+    boolean forProperty = parser.options().containsKey(\"p\");\n+    boolean forLabel = parser.options().containsKey(\"l\");\n+    if (forProperty || !forLabel)\n+    {   // Property\n+      if (parser.arguments().size() < 2)\n+      {\n+        throw new ShellException(\"Must supply key and value, \" +\n+            \"like: set title \\\"This is a my title\\\"\");\n+      }\n \n-            NodeOrRelationship thing = getCurrent( session );\n-            thing.setProperty( key, value );\n-        }\n-        else\n-        {   // Label\n-            Node node = getCurrent( session ).asNode();\n-            for ( Label label : parseLabels( parser ) )\n-            {\n-                node.addLabel( label );\n-            }\n-        }\n+      String key = parser.arguments().get(0);\n+      ValueType valueType = getValueType(parser);\n+      Object value = parseValue(parser.arguments().get(1), valueType);\n \n-        return Continuation.INPUT_COMPLETE;\n+      NodeOrRelationship thing = getCurrent(session);\n+      thing.setProperty(key, value);\n+    } else\n+    {   // Label\n+      Node node = getCurrent(session).asNode();\n+      for (Label label : parseLabels(parser))\n+      {\n+        node.addLabel(label);\n+      }\n     }\n \n-    private static Object parseValue( String stringValue, ValueType valueType )\n+    return Continuation.INPUT_COMPLETE;\n+  }\n+\n+  private static Object parseValue(String stringValue, ValueType valueType)\n+  {\n+    Object result = null;\n+    if (valueType.isArray)\n     {\n-        Object result = null;\n-        if ( valueType.isArray )\n-        {\n-            Class<?> componentType = valueType.context.boxClass;\n-            Object[] rawArray = parseArray( stringValue );\n-            result = Array.newInstance( componentType, rawArray.length );\n-            for ( int i = 0; i < rawArray.length; i++ )\n-            {\n-                Array.set( result, i,\n-                    parseValue( rawArray[ i ].toString(), componentType ) );\n-            }\n-        }\n-        else\n-        {\n-            Class<?> componentType = valueType.context.boxClass;\n-            result = parseValue( stringValue, componentType );\n-        }\n-        return result;\n+      Class<?> componentType = valueType.context.boxClass;\n+      Object[] rawArray = parseArray(stringValue);\n+      result = Array.newInstance(componentType, rawArray.length);\n+      for (int i = 0; i < rawArray.length; i++)\n+      {\n+        Array.set(result, i,\n+            parseValue(rawArray[i].toString(), componentType));\n+      }\n+    } else\n+    {\n+      Class<?> componentType = valueType.context.boxClass;\n+      result = parseValue(stringValue, componentType);\n     }\n+    return result;\n+  }\n \n-    private static Object parseValue( String value, Class<?> type )\n+  private static Object parseValue(String value, Class<?> type)\n+  {\n+    // TODO Are you tellin' me this can't be done in a better way?\n+    Object result = null;\n+    if (type.equals(String.class))\n+    {\n+      result = value;\n+    } else if (type.equals(Boolean.class))\n+    {\n+      result = Boolean.parseBoolean(value);\n+    } else if (type.equals(Byte.class))\n+    {\n+      result = Byte.parseByte(value);\n+    } else if (type.equals(Character.class))\n     {\n-        // TODO Are you tellin' me this can't be done in a better way?\n-        Object result = null;\n-        if ( type.equals( String.class ) )\n-        {\n-            result = value;\n-        }\n-        else if ( type.equals( Boolean.class ) )\n-        {\n-            result = Boolean.parseBoolean( value );\n-        }\n-        else if ( type.equals( Byte.class ) )\n-        {\n-            result = Byte.parseByte( value );\n-        }\n-        else if ( type.equals( Character.class ) )\n-        {\n-            result = value.charAt( 0 );\n-        }\n-        else if ( type.equals( Short.class ) )\n-        {\n-            result = Short.parseShort( value );\n-        }\n-        else if ( type.equals( Integer.class ) )\n-        {\n-            result = Integer.parseInt( value );\n-        }\n-        else if ( type.equals( Long.class ) )\n-        {\n-            result = Long.parseLong( value );\n-        }\n-        else if ( type.equals( Float.class ) )\n-        {\n-            result = Float.parseFloat( value );\n-        }\n-        else if ( type.equals( Double.class ) )\n-        {\n-            result = Double.parseDouble( value );\n-        }\n-        else\n-        {\n-            throw new IllegalArgumentException( \"Invalid type \" + type );\n-        }\n-        return result;\n+      result = value.charAt(0);\n+    } else if (type.equals(Short.class))\n+    {\n+      result = Short.parseShort(value);\n+    } else if (type.equals(Integer.class))\n+    {\n+      result = Integer.parseInt(value);\n+    } else if (type.equals(Long.class))\n+    {\n+      result = Long.parseLong(value);\n+    } else if (type.equals(Float.class))\n+    {\n+      result = Float.parseFloat(value);\n+    } else if (type.equals(Double.class))\n+    {\n+      result = Double.parseDouble(value);\n+    } else\n+    {\n+      throw new IllegalArgumentException(\"Invalid type \" + type);\n     }\n+    return result;\n+  }\n \n-    private static ValueType getValueType( AppCommandParser parser )\n-        throws ShellException\n-    {\n-        String type = parser.options().containsKey( \"t\" ) ?\n-            parser.options().get( \"t\" ) : String.class.getSimpleName();\n-        ValueType valueType = NAME_TO_VALUE_TYPE.get( type );\n+  private static ValueType getValueType(AppCommandParser parser)\n+      throws ShellException\n+  {\n+    String type = parser.options().containsKey(\"t\") ?\n+        parser.options().get(\"t\") : String.class.getSimpleName();\n+    ValueType valueType = NAME_TO_VALUE_TYPE.get(type);\n \n-        if ( valueType == null )\n-        {\n-            throw new ShellException( \"Invalid value type '\" + type + \"'\" );\n-        }\n-        return valueType;\n+    if (valueType == null)\n+    {\n+      throw new ShellException(\"Invalid value type '\" + type + \"'\");\n     }\n+    return valueType;\n+  }\n }\n",
            "diff_size": 306
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 358).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4511/Set.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4511/Set.java\nindex 9940c47e78d..542d34761b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4511/Set.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4511/Set.java\n@@ -48,9 +48,8 @@ public class Set extends TransactionProvidingApp\n         private final Class<?> fundamentalArrayClass;\n         private final Class<?> boxArrayClass;\n \n-        ValueTypeContext( Class<?> fundamentalClass, Class<?> boxClass,\n-            Class<?> fundamentalArrayClass, Class<?> boxArrayClass )\n-        {\n+        ValueTypeContext( Class<?> fundamentalClass, Class<?> boxClass, Class<?> fundamentalArrayClass, Class<?> boxArrayClass )\n+{\n             this.fundamentalClass = fundamentalClass;\n             this.boxClass = boxClass;\n             this.fundamentalArrayClass = fundamentalArrayClass;\n@@ -59,9 +58,8 @@ public class Set extends TransactionProvidingApp\n \n         public String getName()\n         {\n-            return fundamentalClass.equals( boxClass ) ?\n-                boxClass.getSimpleName() : fundamentalClass.getSimpleName();\n-        }\n+            return fundamentalClass.equals( boxClass ) ? boxClass.getSimpleName() : fundamentalClass.getSimpleName();\n+    }\n \n         public String getArrayName()\n         {\n@@ -81,54 +79,39 @@ public class Set extends TransactionProvidingApp\n         }\n     }\n \n-    private static final Map<String, ValueType> NAME_TO_VALUE_TYPE = new HashMap<>();\n+    private static final Map<String,ValueType> NAME_TO_VALUE_TYPE = new HashMap<>();\n     static\n     {\n-        mapNameToValueType( new ValueTypeContext( boolean.class,\n-            Boolean.class, boolean[].class, Boolean[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            byte.class, Byte.class, byte[].class, Byte[].class ) );\n-        mapNameToValueType( new ValueTypeContext( char.class,\n-            Character.class, char[].class, Character[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            short.class, Short.class, short[].class, Short[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            int.class, Integer.class, int[].class, Integer[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            long.class, Long.class, long[].class, Long[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            float.class, Float.class, float[].class, Float[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            double.class, Double.class, double[].class, Double[].class ) );\n-        mapNameToValueType( new ValueTypeContext(\n-            String.class, String.class, String[].class, String[].class ) );\n+        mapNameToValueType( new ValueTypeContext( boolean.class, Boolean.class, boolean[].class, Boolean[].class ) );\n+        mapNameToValueType( new ValueTypeContext( byte.class, Byte.class, byte[].class, Byte[].class ) );\n+        mapNameToValueType( new ValueTypeContext( char.class, Character.class, char[].class, Character[].class ) );\n+        mapNameToValueType( new ValueTypeContext( short.class, Short.class, short[].class, Short[].class ) );\n+        mapNameToValueType( new ValueTypeContext( int.class, Integer.class, int[].class, Integer[].class ) );\n+        mapNameToValueType( new ValueTypeContext( long.class, Long.class, long[].class, Long[].class ) );\n+        mapNameToValueType( new ValueTypeContext( float.class, Float.class, float[].class, Float[].class ) );\n+        mapNameToValueType( new ValueTypeContext( double.class, Double.class, double[].class, Double[].class ) );\n+        mapNameToValueType( new ValueTypeContext( String.class, String.class, String[].class, String[].class ) );\n     }\n \n     private static final Map<Class<?>, String> VALUE_TYPE_TO_NAME = new HashMap<>();\n     static\n     {\n-        for ( Map.Entry<String, ValueType> entry :\n+        for ( Map.Entry<String,ValueType> entry:\n             NAME_TO_VALUE_TYPE.entrySet() )\n-        {\n+{\n             ValueTypeContext context = entry.getValue().context;\n-            VALUE_TYPE_TO_NAME.put( context.fundamentalClass,\n-                context.getName() );\n-            VALUE_TYPE_TO_NAME.put( context.boxClass,\n-                context.getName() );\n-            VALUE_TYPE_TO_NAME.put( context.fundamentalArrayClass,\n-                context.getArrayName() );\n-            VALUE_TYPE_TO_NAME.put( context.boxArrayClass,\n-                context.getArrayName() );\n-        }\n+            VALUE_TYPE_TO_NAME.put( context.fundamentalClass,context.getName() );\n+VALUE_TYPE_TO_NAME.put( context.boxClass,context.getName() );\n+VALUE_TYPE_TO_NAME.put( context.fundamentalArrayClass,context.getArrayName() );\n+VALUE_TYPE_TO_NAME.put( context.boxArrayClass,context.getArrayName() );\n+    }\n     }\n \n     private static void mapNameToValueType( ValueTypeContext context )\n     {\n-        NAME_TO_VALUE_TYPE.put( context.getName(),\n-            new ValueType( context, false ) );\n-        NAME_TO_VALUE_TYPE.put( context.getArrayName(),\n-            new ValueType( context, true ) );\n-    }\n+        NAME_TO_VALUE_TYPE.put( context.getName(), new ValueType( context, false ) );\n+NAME_TO_VALUE_TYPE.put( context.getArrayName(), new ValueType( context, true ) );\n+            }\n \n     /**\n      * Constructs a new \"set\" application.\n@@ -136,27 +119,15 @@ public class Set extends TransactionProvidingApp\n     public Set()\n     {\n         super();\n-        this.addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST,\n-            \"Value type, f.ex: String, String[], int, long[], byte a.s.o. \" +\n-            \"If an array type is supplied the value(s) are given in a \" +\n-            \"JSON-style array format, f.ex:\\n\" +\n-            \"[321,45324] for an int[] or\\n\" +\n-            \"\\\"['The first string','The second string here']\\\" for a \" +\n-            \"String[]\" ) );\n-        this.addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.NONE,\n-            \"Tells the command to set the supplied values as property.\" ) );\n-        this.addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-                \"Sets one or more labels on the current node.\" ) );\n+        this.addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST, \"Value type, f.ex: String, String[], int, long[], byte a.s.o. \" + \"If an array type is supplied the value(s) are given in a \" + \"JSON-style array format, f.ex:\\n\" + \"[321,45324] for an int[] or\\n\" + \"\\\"['The first string','The second string here']\\\" for a \" + \"String[]\" ) );\n+this.addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.NONE, \"Tells the command to set the supplied values as property.\" ) );\n+this.addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST, \"Sets one or more labels on the current node.\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Sets a property on the current node or relationship or label on the current node.\\n\" +\n-                \"Usage:\\n\" +\n-                \"  set <key> <value>\\n\" +\n-                \"  set -p <key> <value>\\n\" +\n-                \"  set -l PERSON\";\n+        return \"Sets a property on the current node or relationship or label on the current node.\\n\" + \"Usage:\\n\" + \"  set <key> <value>\\n\" + \"  set -p <key> <value>\\n\" + \"  set -l PERSON\";\n     }\n \n     protected static String getValueTypeName( Class<?> cls )\n@@ -165,28 +136,27 @@ public class Set extends TransactionProvidingApp\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException\n+{\n         boolean forProperty = parser.options().containsKey( \"p\" );\n         boolean forLabel = parser.options().containsKey( \"l\" );\n         if ( forProperty || !forLabel )\n-        {   // Property\n+        {\n+    // Property\n             if ( parser.arguments().size() < 2 )\n             {\n-                throw new ShellException( \"Must supply key and value, \" +\n-                    \"like: set title \\\"This is a my title\\\"\" );\n-            }\n+                throw new ShellException( \"Must supply key and value, \" + \"like: set title \\\"This is a my title\\\"\" );\n+    }\n \n             String key = parser.arguments().get( 0 );\n             ValueType valueType = getValueType( parser );\n             Object value = parseValue( parser.arguments().get( 1 ), valueType );\n-\n-            NodeOrRelationship thing = getCurrent( session );\n+NodeOrRelationship thing = getCurrent( session );\n             thing.setProperty( key, value );\n         }\n         else\n-        {   // Label\n+        {\n+    // Label\n             Node node = getCurrent( session ).asNode();\n             for ( Label label : parseLabels( parser ) )\n             {\n@@ -207,16 +177,16 @@ public class Set extends TransactionProvidingApp\n             result = Array.newInstance( componentType, rawArray.length );\n             for ( int i = 0; i < rawArray.length; i++ )\n             {\n-                Array.set( result, i,\n-                    parseValue( rawArray[ i ].toString(), componentType ) );\n-            }\n+                Array.set( result, i, parseValue( rawArray[ i ].toString(), componentType ) );\n+    }\n         }\n         else\n         {\n             Class<?> componentType = valueType.context.boxClass;\n             result = parseValue( stringValue, componentType );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private static Object parseValue( String value, Class<?> type )\n@@ -263,20 +233,19 @@ public class Set extends TransactionProvidingApp\n         {\n             throw new IllegalArgumentException( \"Invalid type \" + type );\n         }\n-        return result;\n-    }\n \n-    private static ValueType getValueType( AppCommandParser parser )\n-        throws ShellException\n-    {\n-        String type = parser.options().containsKey( \"t\" ) ?\n-            parser.options().get( \"t\" ) : String.class.getSimpleName();\n-        ValueType valueType = NAME_TO_VALUE_TYPE.get( type );\n+return result;\n+    }\n \n-        if ( valueType == null )\n+    private static ValueType getValueType( AppCommandParser parser ) throws ShellException\n+{\n+        String type = parser.options().containsKey( \"t\" ) ? parser.options().get( \"t\" ) : String.class.getSimpleName();\n+ValueType valueType = NAME_TO_VALUE_TYPE.get( type );\n+if ( valueType == null )\n         {\n             throw new ShellException( \"Invalid value type '\" + type + \"'\" );\n         }\n-        return valueType;\n+\n+return valueType;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 90
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}