{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2601",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2601/EntryCountThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2601/EntryCountThreshold.java\nindex aaf9ad17412..478a0b92590 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2601/EntryCountThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2601/EntryCountThreshold.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.pruning;\n \n import java.io.File;\n@@ -26,39 +27,38 @@ import org.neo4j.kernel.impl.transaction.log.LogFileInformation;\n \n public final class EntryCountThreshold implements Threshold\n {\n-    private final long maxTransactionCount;\n+  private final long maxTransactionCount;\n \n-    EntryCountThreshold( long maxTransactionCount )\n-    {\n-        this.maxTransactionCount = maxTransactionCount;\n-    }\n+  EntryCountThreshold(long maxTransactionCount)\n+  {\n+    this.maxTransactionCount = maxTransactionCount;\n+  }\n \n-    @Override\n-    public void init()\n-    {\n-        // nothing to do here\n-    }\n+  @Override\n+  public void init()\n+  {\n+    // nothing to do here\n+  }\n \n-    @Override\n-    public boolean reached( File ignored, long version, LogFileInformation source )\n+  @Override\n+  public boolean reached(File ignored, long version, LogFileInformation source)\n+  {\n+    try\n     {\n-        try\n-        {\n-            // try to ask next version log file which is my last tx\n-            long lastTx = source.getFirstEntryId( version + 1 );\n-            if ( lastTx == -1 )\n-            {\n-                throw new IllegalStateException(\n-                        \"The next version should always exist, since this is called after rotation and the \" +\n-                        \"PruneStrategy never checks the current active log file\" );\n-            }\n+      // try to ask next version log file which is my last tx\n+      long lastTx = source.getFirstEntryId(version + 1);\n+      if (lastTx == -1)\n+      {\n+        throw new IllegalStateException(\n+            \"The next version should always exist, since this is called after rotation and the \" +\n+                \"PruneStrategy never checks the current active log file\");\n+      }\n \n-            long highest = source.getLastEntryId();\n-            return highest - lastTx >= maxTransactionCount;\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n+      long highest = source.getLastEntryId();\n+      return highest - lastTx >= maxTransactionCount;\n+    } catch (IOException e)\n+    {\n+      throw new RuntimeException(e);\n     }\n+  }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2601/EntryCountThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2601/EntryCountThreshold.java\nindex aaf9ad17412..df14119c213 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2601/EntryCountThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2601/EntryCountThreshold.java\n@@ -48,9 +48,7 @@ public final class EntryCountThreshold implements Threshold\n             long lastTx = source.getFirstEntryId( version + 1 );\n             if ( lastTx == -1 )\n             {\n-                throw new IllegalStateException(\n-                        \"The next version should always exist, since this is called after rotation and the \" +\n-                        \"PruneStrategy never checks the current active log file\" );\n+                throw new IllegalStateException( \"The next version should always exist, since this is called after rotation and the \" + \"PruneStrategy never checks the current active log file\" );\n             }\n \n             long highest = source.getLastEntryId();\n@@ -61,4 +59,4 @@ public final class EntryCountThreshold implements Threshold\n             throw new RuntimeException( e );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2601/EntryCountThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2601/EntryCountThreshold.java\nindex aaf9ad17412..f0c17a21f80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2601/EntryCountThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2601/EntryCountThreshold.java\n@@ -21,7 +21,6 @@ package org.neo4j.kernel.impl.transaction.log.pruning;\n \n import java.io.File;\n import java.io.IOException;\n-\n import org.neo4j.kernel.impl.transaction.log.LogFileInformation;\n \n public final class EntryCountThreshold implements Threshold\n@@ -46,11 +45,9 @@ public final class EntryCountThreshold implements Threshold\n         {\n             // try to ask next version log file which is my last tx\n             long lastTx = source.getFirstEntryId( version + 1 );\n-            if ( lastTx == -1 )\n+            if ( lastTx == - 1 )\n             {\n-                throw new IllegalStateException(\n-                        \"The next version should always exist, since this is called after rotation and the \" +\n-                        \"PruneStrategy never checks the current active log file\" );\n+                throw new IllegalStateException( \"The next version should always exist, since this is called after rotation and the \" + \"PruneStrategy never checks the current active log file\" );\n             }\n \n             long highest = source.getLastEntryId();\n@@ -61,4 +58,4 @@ public final class EntryCountThreshold implements Threshold\n             throw new RuntimeException( e );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}