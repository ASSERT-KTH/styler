{
    "project_name": "intuit-Tank",
    "error_id": "193",
    "information": {
        "errors": [
            {
                "line": "23",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public abstract class AbstractParser implements Parser {\n\n\t/**\n\t * Whether this parser is enabled.  If this is <code>false</code>, then\n\t * this parser will not be run.\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/193/AbstractParser.java\nindex e40d0b83aca..948518d470b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/193/AbstractParser.java\n@@ -20,11 +20,11 @@ import java.net.URL;\n  */\n public abstract class AbstractParser implements Parser {\n \n-\t/**\n+    /**\n \t * Whether this parser is enabled.  If this is <code>false</code>, then\n \t * this parser will not be run.\n \t */\n-\tprivate boolean enabled;\n+        private boolean enabled;\n \n \t/**\n \t * Listens for events from\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/193/AbstractParser.java\nindex e40d0b83aca..64c9b27e234 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/193/AbstractParser.java\n@@ -6,6 +6,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea.parser;\n \n import java.net.URL;\n@@ -20,78 +21,78 @@ import java.net.URL;\n  */\n public abstract class AbstractParser implements Parser {\n \n-\t/**\n-\t * Whether this parser is enabled.  If this is <code>false</code>, then\n-\t * this parser will not be run.\n-\t */\n-\tprivate boolean enabled;\n-\n-\t/**\n-\t * Listens for events from\n-\t * {@link org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip}s generated\n-\t * from this parser's notices.\n-\t */\n-\tprivate ExtendedHyperlinkListener linkListener;\n-\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tprotected AbstractParser() {\n-\t\tsetEnabled(true);\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic ExtendedHyperlinkListener getHyperlinkListener() {\n-\t\treturn linkListener;\n-\t}\n-\n-\n-\t/**\n-\t * Returns <code>null</code>.  Parsers that wish to show images in their\n-\t * tool tips should override this method to return the image base URL.\n-\t *\n-\t * @return <code>null</code> always.\n-\t */\n-\t@Override\n-\tpublic URL getImageBase() {\n-\t\treturn null;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic boolean isEnabled() {\n-\t\treturn enabled;\n-\t}\n-\n-\n-\t/**\n-\t * Toggles whether this parser is enabled.\n-\t *\n-\t * @param enabled Whether this parser is enabled.\n-\t * @see #isEnabled()\n-\t */\n-\tpublic void setEnabled(boolean enabled) {\n-\t\tthis.enabled = enabled;\n-\t}\n-\n-\n-\t/**\n-\t * Returns the listener for this parser.\n-\t *\n-\t * @param listener The new listener.\n-\t * @see #getHyperlinkListener()\n-\t */\n-\tpublic void setHyperlinkListener(ExtendedHyperlinkListener listener) {\n-\t\tlinkListener = listener;\n-\t}\n+  /**\n+   * Whether this parser is enabled.  If this is <code>false</code>, then\n+   * this parser will not be run.\n+   */\n+  private boolean enabled;\n+\n+  /**\n+   * Listens for events from\n+   * {@link org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip}s generated\n+   * from this parser's notices.\n+   */\n+  private ExtendedHyperlinkListener linkListener;\n+\n+\n+  /**\n+   * Constructor.\n+   */\n+  protected AbstractParser() {\n+    setEnabled(true);\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public ExtendedHyperlinkListener getHyperlinkListener() {\n+    return linkListener;\n+  }\n+\n+\n+  /**\n+   * Returns <code>null</code>.  Parsers that wish to show images in their\n+   * tool tips should override this method to return the image base URL.\n+   *\n+   * @return <code>null</code> always.\n+   */\n+  @Override\n+  public URL getImageBase() {\n+    return null;\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isEnabled() {\n+    return enabled;\n+  }\n+\n+\n+  /**\n+   * Toggles whether this parser is enabled.\n+   *\n+   * @param enabled Whether this parser is enabled.\n+   * @see #isEnabled()\n+   */\n+  public void setEnabled(boolean enabled) {\n+    this.enabled = enabled;\n+  }\n+\n+\n+  /**\n+   * Returns the listener for this parser.\n+   *\n+   * @param listener The new listener.\n+   * @see #getHyperlinkListener()\n+   */\n+  public void setHyperlinkListener(ExtendedHyperlinkListener listener) {\n+    linkListener = listener;\n+  }\n \n \n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "23",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/193/AbstractParser.java\nindex e40d0b83aca..b17f27ebf5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/193/AbstractParser.java\n@@ -10,7 +10,6 @@ package org.fife.ui.rsyntaxtextarea.parser;\n \n import java.net.URL;\n \n-\n /**\n  * A base class for {@link Parser} implementations.  Most <code>Parser</code>s\n  * should be able to extend this class.\n@@ -20,7 +19,7 @@ import java.net.URL;\n  */\n public abstract class AbstractParser implements Parser {\n \n-\t/**\n+    /**\n \t * Whether this parser is enabled.  If this is <code>false</code>, then\n \t * this parser will not be run.\n \t */\n@@ -33,25 +32,22 @@ public abstract class AbstractParser implements Parser {\n \t */\n \tprivate ExtendedHyperlinkListener linkListener;\n \n-\n-\t/**\n+/**\n \t * Constructor.\n \t */\n \tprotected AbstractParser() {\n-\t\tsetEnabled(true);\n-\t}\n-\n+    setEnabled(true);\n+    }\n \n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic ExtendedHyperlinkListener getHyperlinkListener() {\n-\t\treturn linkListener;\n-\t}\n-\n+    return linkListener;\n+    }\n \n-\t/**\n+/**\n \t * Returns <code>null</code>.  Parsers that wish to show images in their\n \t * tool tips should override this method to return the image base URL.\n \t *\n@@ -59,39 +55,35 @@ public abstract class AbstractParser implements Parser {\n \t */\n \t@Override\n \tpublic URL getImageBase() {\n-\t\treturn null;\n-\t}\n+    return null;\n+    }\n \n-\n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic boolean isEnabled() {\n-\t\treturn enabled;\n-\t}\n+    return enabled;\n+    }\n \n-\n-\t/**\n+/**\n \t * Toggles whether this parser is enabled.\n \t *\n \t * @param enabled Whether this parser is enabled.\n \t * @see #isEnabled()\n \t */\n \tpublic void setEnabled(boolean enabled) {\n-\t\tthis.enabled = enabled;\n-\t}\n-\n+    this.enabled = enabled;\n+    }\n \n-\t/**\n+/**\n \t * Returns the listener for this parser.\n \t *\n \t * @param listener The new listener.\n \t * @see #getHyperlinkListener()\n \t */\n \tpublic void setHyperlinkListener(ExtendedHyperlinkListener listener) {\n-\t\tlinkListener = listener;\n-\t}\n-\n+    linkListener = listener;\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/193/AbstractParser.java\nindex e40d0b83aca..997fbd4768d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/193/AbstractParser.java\n@@ -8,6 +8,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea.parser;\n \n+\n+\n import java.net.URL;\n \n \n@@ -18,80 +20,90 @@ import java.net.URL;\n  * @author Robert Futrell\n  * @version 1.0\n  */\n+\n+\n public abstract class AbstractParser implements Parser {\n \n-\t/**\n-\t * Whether this parser is enabled.  If this is <code>false</code>, then\n-\t * this parser will not be run.\n-\t */\n-\tprivate boolean enabled;\n-\n-\t/**\n-\t * Listens for events from\n-\t * {@link org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip}s generated\n-\t * from this parser's notices.\n-\t */\n-\tprivate ExtendedHyperlinkListener linkListener;\n-\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tprotected AbstractParser() {\n-\t\tsetEnabled(true);\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic ExtendedHyperlinkListener getHyperlinkListener() {\n-\t\treturn linkListener;\n-\t}\n-\n-\n-\t/**\n-\t * Returns <code>null</code>.  Parsers that wish to show images in their\n-\t * tool tips should override this method to return the image base URL.\n-\t *\n-\t * @return <code>null</code> always.\n-\t */\n-\t@Override\n-\tpublic URL getImageBase() {\n-\t\treturn null;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic boolean isEnabled() {\n-\t\treturn enabled;\n-\t}\n-\n-\n-\t/**\n-\t * Toggles whether this parser is enabled.\n-\t *\n-\t * @param enabled Whether this parser is enabled.\n-\t * @see #isEnabled()\n-\t */\n-\tpublic void setEnabled(boolean enabled) {\n-\t\tthis.enabled = enabled;\n-\t}\n-\n-\n-\t/**\n-\t * Returns the listener for this parser.\n-\t *\n-\t * @param listener The new listener.\n-\t * @see #getHyperlinkListener()\n-\t */\n-\tpublic void setHyperlinkListener(ExtendedHyperlinkListener listener) {\n-\t\tlinkListener = listener;\n-\t}\n-\n-\n-}\n+    /**\n+     * Whether this parser is enabled.  If this is <code>false</code>, then\n+     * this parser will not be run.\n+     */\n+\n+    private boolean enabled;\n+\n+    /**\n+     * Listens for events from\n+     * {@link org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip}s generated\n+     * from this parser's notices.\n+     */\n+    private ExtendedHyperlinkListener linkListener;\n+\n+\n+    /**\n+     * Constructor.\n+     */\n+\n+    protected AbstractParser() {\n+        setEnabled(true);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public ExtendedHyperlinkListener getHyperlinkListener() {\n+        return linkListener;\n+    }\n+\n+\n+    /**\n+     * Returns <code>null</code>.  Parsers that wish to show images in their\n+     * tool tips should override this method to return the image base URL.\n+     *\n+     * @return <code>null</code> always.\n+     */\n+\n+    @Override\n+    public URL getImageBase() {\n+        return null;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+\n+    /**\n+     * Toggles whether this parser is enabled.\n+     *\n+     * @param enabled Whether this parser is enabled.\n+     * @see #isEnabled()\n+     */\n+\n+\n+    public void setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+\n+    /**\n+     * Returns the listener for this parser.\n+     *\n+     * @param listener The new listener.\n+     * @see #getHyperlinkListener()\n+     */\n+\n+\n+    public void setHyperlinkListener(ExtendedHyperlinkListener listener) {\n+        linkListener = listener;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 87
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/193/AbstractParser.java\nindex e40d0b83aca..948518d470b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/193/AbstractParser.java\n@@ -20,11 +20,11 @@ import java.net.URL;\n  */\n public abstract class AbstractParser implements Parser {\n \n-\t/**\n+    /**\n \t * Whether this parser is enabled.  If this is <code>false</code>, then\n \t * this parser will not be run.\n \t */\n-\tprivate boolean enabled;\n+        private boolean enabled;\n \n \t/**\n \t * Listens for events from\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/193/AbstractParser.java\nindex e40d0b83aca..e2195c603b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/193/AbstractParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/193/AbstractParser.java\n@@ -20,11 +20,11 @@ import java.net.URL;\n  */\n public abstract class AbstractParser implements Parser {\n \n-\t/**\n+    /**\n \t * Whether this parser is enabled.  If this is <code>false</code>, then\n \t * this parser will not be run.\n \t */\n-\tprivate boolean enabled;\n+ private boolean enabled;\n \n \t/**\n \t * Listens for events from\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}