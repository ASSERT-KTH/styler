{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1247",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "297",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1247/KeyValueStoreFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1247/KeyValueStoreFileFormat.java\nindex 10879a31aee..14ee2826e92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1247/KeyValueStoreFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1247/KeyValueStoreFileFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.kvstore;\n \n import java.io.File;\n@@ -36,293 +37,293 @@ import static java.util.Objects.requireNonNull;\n  */\n public abstract class KeyValueStoreFileFormat\n {\n-    private final int maxSize;\n-    private final HeaderField<?>[] headerFields;\n+  private final int maxSize;\n+  private final HeaderField<?>[] headerFields;\n \n-    /**\n-     * @param maxSize      the largest possible size of a key or value that conforms to this format.\n-     * @param headerFields identifiers for the entries to write from the metadata to the store.\n-     */\n-    public KeyValueStoreFileFormat( int maxSize, HeaderField<?>... headerFields )\n+  /**\n+   * @param maxSize      the largest possible size of a key or value that conforms to this format.\n+   * @param headerFields identifiers for the entries to write from the metadata to the store.\n+   */\n+  public KeyValueStoreFileFormat(int maxSize, HeaderField<?>... headerFields)\n+  {\n+    if (maxSize < 0)\n     {\n-        if ( maxSize < 0 )\n-        {\n-            throw new IllegalArgumentException( \"Negative maxSize: \" + maxSize );\n-        }\n-        this.maxSize = maxSize;\n-        this.headerFields = headerFields.clone();\n+      throw new IllegalArgumentException(\"Negative maxSize: \" + maxSize);\n     }\n+    this.maxSize = maxSize;\n+    this.headerFields = headerFields.clone();\n+  }\n \n-    public final KeyValueStoreFile createStore(\n-            FileSystemAbstraction fs, PageCache pages, File path, int keySize, int valueSize,\n-            Headers headers, DataProvider data ) throws IOException\n-    {\n-        return create( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ),\n-                       requireNonNull( path, \"path\" ),\n-                       requireNonNull( pages, PageCache.class.getSimpleName() ),\n-                       keySize, valueSize,\n-                       requireNonNull( headers, \"headers\" ),\n-                       requireNonNull( data, \"data\" ) );\n-    }\n+  public final KeyValueStoreFile createStore(\n+      FileSystemAbstraction fs, PageCache pages, File path, int keySize, int valueSize,\n+      Headers headers, DataProvider data) throws IOException\n+  {\n+    return create(requireNonNull(fs, FileSystemAbstraction.class.getSimpleName()),\n+        requireNonNull(path, \"path\"),\n+        requireNonNull(pages, PageCache.class.getSimpleName()),\n+        keySize, valueSize,\n+        requireNonNull(headers, \"headers\"),\n+        requireNonNull(data, \"data\"));\n+  }\n+\n+  public final void createEmptyStore(\n+      FileSystemAbstraction fs, File path, int keySize, int valueSize, Headers headers) throws IOException\n+  {\n+    create(requireNonNull(fs, FileSystemAbstraction.class.getSimpleName()),\n+        requireNonNull(path, \"path\"), null, keySize, valueSize,\n+        requireNonNull(headers, \"headers\"), null);\n+  }\n+\n+  public final KeyValueStoreFile openStore(FileSystemAbstraction fs, PageCache pages, File path)\n+      throws IOException\n+  {\n+    return open(requireNonNull(fs, FileSystemAbstraction.class.getSimpleName()),\n+        requireNonNull(path, \"path\"),\n+        requireNonNull(pages, PageCache.class.getSimpleName()));\n+  }\n+\n+  protected abstract void writeFormatSpecifier(WritableBuffer formatSpecifier);\n+\n+  protected HeaderField<?>[] headerFieldsForFormat(ReadableBuffer formatSpecifier)\n+  {\n+    return headerFields.clone();\n+  }\n \n-    public final void createEmptyStore(\n-            FileSystemAbstraction fs, File path, int keySize, int valueSize, Headers headers ) throws IOException\n+  // IMPLEMENTATION\n+\n+  /**\n+   * Create a collector for interpreting metadata from a file.\n+   */\n+  private MetadataCollector metadata(ReadableBuffer formatSpecifier, int pageSize, int keySize, int valueSize)\n+  {\n+    byte[] format = new byte[formatSpecifier.size()];\n+    for (int i = 0; i < format.length; i++)\n     {\n-        create( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ),\n-                requireNonNull( path, \"path\" ), null, keySize, valueSize,\n-                requireNonNull( headers, \"headers\" ), null );\n+      format[i] = formatSpecifier.getByte(i);\n     }\n+    final BigEndianByteArrayBuffer specifier = new BigEndianByteArrayBuffer(format);\n+    HeaderField<?>[] headerFields = headerFieldsForFormat(formatSpecifier);\n+    return new MetadataCollector(pageSize / (keySize + valueSize), headerFields, specifier)\n+    {\n+      @Override\n+      boolean verifyFormatSpecifier(ReadableBuffer value)\n+      {\n+        int size = value.size();\n+        ReadableBuffer expectedFormat = expectedFormat();\n+        if (size == expectedFormat.size())\n+        {\n+          for (int i = 0; i < size; i++)\n+          {\n+            if (value.getByte(i) != expectedFormat.getByte(i))\n+            {\n+              return false;\n+            }\n+          }\n+          return true;\n+        }\n+        return false;\n+      }\n+    };\n+  }\n \n-    public final KeyValueStoreFile openStore( FileSystemAbstraction fs, PageCache pages, File path )\n-            throws IOException\n+  /**\n+   * Create a new store file.\n+   *\n+   * @param fs           the file system that should hold the store file.\n+   * @param path         the location in the file system where the store file resides.\n+   * @param pages        if {@code null} the newly created store fill will not be opened.\n+   * @param keySize      the size of the keys in the new store.\n+   * @param valueSize    the size of the values in the new store.\n+   * @param headers      the headers to write to the store.\n+   * @param dataProvider the data to write into the store, {@code null} is accepted to mean no data.\n+   * @return an opened version of the newly created store file - iff a {@link PageCache} was provided.\n+   */\n+  private KeyValueStoreFile create(\n+      FileSystemAbstraction fs, File path, PageCache pages, int keySize, int valueSize,\n+      Headers headers, DataProvider dataProvider) throws IOException\n+  {\n+    if (keySize <= 0 || keySize > maxSize || valueSize <= 0 || valueSize > maxSize)\n     {\n-        return open( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ),\n-                     requireNonNull( path, \"path\" ),\n-                     requireNonNull( pages, PageCache.class.getSimpleName() ) );\n+      throw new IllegalArgumentException(String.format(\n+          \"Invalid sizes: keySize=%d, valueSize=%d, format maxSize=%d\",\n+          keySize, valueSize, maxSize));\n     }\n \n-    protected abstract void writeFormatSpecifier( WritableBuffer formatSpecifier );\n-\n-    protected HeaderField<?>[] headerFieldsForFormat( ReadableBuffer formatSpecifier )\n+    if (fs.fileExists(path))\n     {\n-        return headerFields.clone();\n+      fs.truncate(path, 0);\n     }\n \n-    // IMPLEMENTATION\n+    BigEndianByteArrayBuffer key = new BigEndianByteArrayBuffer(new byte[keySize]);\n+    BigEndianByteArrayBuffer value = new BigEndianByteArrayBuffer(new byte[valueSize]);\n \n-    /** Create a collector for interpreting metadata from a file. */\n-    private MetadataCollector metadata( ReadableBuffer formatSpecifier, int pageSize, int keySize, int valueSize )\n+    // format specifier\n+    writeFormatSpecifier(value);\n+    if (!validFormatSpecifier(value.buffer, keySize))\n     {\n-        byte[] format = new byte[formatSpecifier.size()];\n-        for ( int i = 0; i < format.length; i++ )\n-        {\n-            format[i] = formatSpecifier.getByte( i );\n-        }\n-        final BigEndianByteArrayBuffer specifier = new BigEndianByteArrayBuffer( format );\n-        HeaderField<?>[] headerFields = headerFieldsForFormat( formatSpecifier );\n-        return new MetadataCollector( pageSize / (keySize + valueSize), headerFields, specifier )\n-        {\n-            @Override\n-            boolean verifyFormatSpecifier( ReadableBuffer value )\n-            {\n-                int size = value.size();\n-                ReadableBuffer expectedFormat = expectedFormat();\n-                if ( size == expectedFormat.size() )\n-                {\n-                    for ( int i = 0; i < size; i++ )\n-                    {\n-                        if ( value.getByte( i ) != expectedFormat.getByte( i ) )\n-                        {\n-                            return false;\n-                        }\n-                    }\n-                    return true;\n-                }\n-                return false;\n-            }\n-        };\n+      throw new IllegalArgumentException(\"Invalid Format specifier: \" +\n+          BigEndianByteArrayBuffer.toString(value.buffer));\n     }\n \n-    /**\n-     * Create a new store file.\n-     *\n-     * @param fs           the file system that should hold the store file.\n-     * @param path         the location in the file system where the store file resides.\n-     * @param pages        if {@code null} the newly created store fill will not be opened.\n-     * @param keySize      the size of the keys in the new store.\n-     * @param valueSize    the size of the values in the new store.\n-     * @param headers      the headers to write to the store.\n-     * @param dataProvider the data to write into the store, {@code null} is accepted to mean no data.\n-     * @return an opened version of the newly created store file - iff a {@link PageCache} was provided.\n-     */\n-    private KeyValueStoreFile create(\n-            FileSystemAbstraction fs, File path, PageCache pages, int keySize, int valueSize,\n-            Headers headers, DataProvider dataProvider ) throws IOException\n+    int pageSize = pageSize(pages, keySize, valueSize);\n+    try (KeyValueWriter writer = newWriter(fs, path, value, pages, pageSize, keySize, valueSize);\n+         DataProvider data = dataProvider)\n     {\n-        if ( keySize <= 0 || keySize > maxSize || valueSize <= 0 || valueSize > maxSize )\n+      // header\n+      if (!writer.writeHeader(key, value))\n+      {\n+        throw new IllegalStateException(\"The format specifier should be a valid header value\");\n+      }\n+      for (HeaderField<?> header : headerFields)\n+      {\n+        headers.write(header, value);\n+        if (!writer.writeHeader(key, value))\n         {\n-            throw new IllegalArgumentException( String.format(\n-                    \"Invalid sizes: keySize=%d, valueSize=%d, format maxSize=%d\",\n-                    keySize, valueSize, maxSize ) );\n+          throw new IllegalArgumentException(\"Invalid header value. \" + header + \": \" + value);\n         }\n-\n-        if ( fs.fileExists( path ) )\n+      }\n+      if (headerFields.length == 0)\n+      {\n+        if (!writer.writeHeader(key, value))\n         {\n-            fs.truncate( path, 0 );\n+          throw new IllegalStateException(\"A padding header should be valid.\");\n         }\n+      }\n \n-        BigEndianByteArrayBuffer key = new BigEndianByteArrayBuffer( new byte[keySize] );\n-        BigEndianByteArrayBuffer value = new BigEndianByteArrayBuffer( new byte[valueSize] );\n+      // data\n+      long dataEntries = 0;\n+      for (; data != null && data.visit(key, value); dataEntries++)\n+      {\n+        writer.writeData(key, value);\n+      }\n+      // 'data' is allowed to write into the buffers even if it returns false, so we need to clear them\n+      key.clear();\n+      value.clear();\n \n-        // format specifier\n-        writeFormatSpecifier( value );\n-        if ( !validFormatSpecifier( value.buffer, keySize ) )\n-        {\n-            throw new IllegalArgumentException( \"Invalid Format specifier: \" +\n-                                                BigEndianByteArrayBuffer.toString( value.buffer ) );\n-        }\n+      // trailer\n+      value.putIntegerAtEnd(dataEntries == 0 ? -1 : dataEntries);\n+      if (!writer.writeHeader(key, value))\n+      {\n+        throw new IllegalStateException(\"The trailing size header should be valid\");\n+      }\n \n-        int pageSize = pageSize( pages, keySize, valueSize );\n-        try ( KeyValueWriter writer = newWriter( fs, path, value, pages, pageSize, keySize, valueSize );\n-              DataProvider data = dataProvider )\n-        {\n-            // header\n-            if ( !writer.writeHeader( key, value ) )\n-            {\n-                throw new IllegalStateException( \"The format specifier should be a valid header value\" );\n-            }\n-            for ( HeaderField<?> header : headerFields )\n-            {\n-                headers.write( header, value );\n-                if ( !writer.writeHeader( key, value ) )\n-                {\n-                    throw new IllegalArgumentException( \"Invalid header value. \" + header + \": \" + value );\n-                }\n-            }\n-            if ( headerFields.length == 0 )\n-            {\n-                if ( !writer.writeHeader( key, value ) )\n-                {\n-                    throw new IllegalStateException( \"A padding header should be valid.\" );\n-                }\n-            }\n+      return writer.openStoreFile();\n+    }\n+  }\n \n-            // data\n-            long dataEntries = 0;\n-            for (; data != null && data.visit( key, value ); dataEntries++ )\n-            {\n-                writer.writeData( key, value );\n-            }\n-            // 'data' is allowed to write into the buffers even if it returns false, so we need to clear them\n-            key.clear();\n-            value.clear();\n+  private KeyValueWriter newWriter(FileSystemAbstraction fs, File path, ReadableBuffer formatSpecifier,\n+                                   PageCache pages, int pageSize, int keySize, int valueSize)\n+      throws IOException\n+  {\n+    return KeyValueWriter.create(metadata(formatSpecifier, pageSize, keySize, valueSize),\n+        fs, pages, path, pageSize);\n+  }\n \n-            // trailer\n-            value.putIntegerAtEnd( dataEntries == 0 ? -1 : dataEntries );\n-            if ( !writer.writeHeader( key, value ) )\n-            {\n-                throw new IllegalStateException( \"The trailing size header should be valid\" );\n-            }\n-\n-            return writer.openStoreFile();\n+  /**\n+   * Opens an existing store file.\n+   *\n+   * @param fs    the file system which holds the store file.\n+   * @param path  the location in the file system where the store file resides.\n+   * @param pages the page cache to use for opening the store file.\n+   * @return the opened store file.\n+   */\n+  private KeyValueStoreFile open(FileSystemAbstraction fs, File path, PageCache pages) throws IOException\n+  {\n+    ByteBuffer buffer = ByteBuffer.wrap(new byte[maxSize * 4]);\n+    try (StoreChannel channel = fs.open(path, OpenMode.READ))\n+    {\n+      while (buffer.hasRemaining())\n+      {\n+        int bytes = channel.read(buffer);\n+        if (bytes == -1)\n+        {\n+          break;\n         }\n+      }\n     }\n-\n-    private KeyValueWriter newWriter( FileSystemAbstraction fs, File path, ReadableBuffer formatSpecifier,\n-                                      PageCache pages, int pageSize, int keySize, int valueSize )\n-            throws IOException\n+    buffer.flip();\n+    // compute the key sizes\n+    int keySize = 0;\n+    while (buffer.hasRemaining() && buffer.get() == 0)\n     {\n-        return KeyValueWriter.create( metadata( formatSpecifier, pageSize, keySize, valueSize ),\n-                                      fs, pages, path, pageSize );\n+      if (++keySize > maxSize)\n+      {\n+        throw new IOException(\"Invalid header, key size too large.\");\n+      }\n     }\n-\n-    /**\n-     * Opens an existing store file.\n-     *\n-     * @param fs    the file system which holds the store file.\n-     * @param path  the location in the file system where the store file resides.\n-     * @param pages the page cache to use for opening the store file.\n-     * @return the opened store file.\n-     */\n-    private KeyValueStoreFile open( FileSystemAbstraction fs, File path, PageCache pages ) throws IOException\n+    // compute the value size\n+    int valueSize = 1; // start at 1, since we've seen the first non-zero byte\n+    for (int zeros = 0; zeros <= keySize; zeros++)\n     {\n-        ByteBuffer buffer = ByteBuffer.wrap( new byte[maxSize * 4] );\n-        try ( StoreChannel channel = fs.open( path, OpenMode.READ ) )\n-        {\n-            while ( buffer.hasRemaining() )\n-            {\n-                int bytes = channel.read( buffer );\n-                if ( bytes == -1 )\n-                {\n-                    break;\n-                }\n-            }\n-        }\n-        buffer.flip();\n-        // compute the key sizes\n-        int keySize = 0;\n-        while ( buffer.hasRemaining() && buffer.get() == 0 )\n-        {\n-            if ( ++keySize > maxSize )\n-            {\n-                throw new IOException( \"Invalid header, key size too large.\" );\n-            }\n-        }\n-        // compute the value size\n-        int valueSize = 1; // start at 1, since we've seen the first non-zero byte\n-        for ( int zeros = 0; zeros <= keySize; zeros++ )\n-        {\n-            if ( !buffer.hasRemaining() )\n-            {\n-                throw new IOException( \"Invalid value size: \" + valueSize );\n-            }\n-            if ( buffer.get() != 0 )\n-            {\n-                zeros = 0;\n-            }\n-            if ( ++valueSize - keySize > maxSize )\n-            {\n-                throw new IOException( \"Invalid header, value size too large.\" );\n-            }\n-        }\n-        valueSize -= keySize; // we read in the next zero-key\n-        // compute a page size that aligns with the <key,value>-tuple size\n-        int pageSize = pageSize( pages, keySize, valueSize );\n-        // read the store metadata\n-        {\n-            BigEndianByteArrayBuffer formatSpecifier = new BigEndianByteArrayBuffer( new byte[valueSize] );\n-            writeFormatSpecifier( formatSpecifier );\n+      if (!buffer.hasRemaining())\n+      {\n+        throw new IOException(\"Invalid value size: \" + valueSize);\n+      }\n+      if (buffer.get() != 0)\n+      {\n+        zeros = 0;\n+      }\n+      if (++valueSize - keySize > maxSize)\n+      {\n+        throw new IOException(\"Invalid header, value size too large.\");\n+      }\n+    }\n+    valueSize -= keySize; // we read in the next zero-key\n+    // compute a page size that aligns with the <key,value>-tuple size\n+    int pageSize = pageSize(pages, keySize, valueSize);\n+    // read the store metadata\n+    {\n+      BigEndianByteArrayBuffer formatSpecifier = new BigEndianByteArrayBuffer(new byte[valueSize]);\n+      writeFormatSpecifier(formatSpecifier);\n \n-            PagedFile file = pages.map( path, pageSize );\n-            try\n-            {\n-                BigEndianByteArrayBuffer key = new BigEndianByteArrayBuffer( new byte[keySize] );\n-                BigEndianByteArrayBuffer value = new BigEndianByteArrayBuffer( new byte[valueSize] );\n-                // the first value is the format identifier, pass it along\n-                buffer.position( keySize );\n-                buffer.limit( keySize + valueSize );\n-                value.dataFrom( buffer );\n+      PagedFile file = pages.map(path, pageSize);\n+      try\n+      {\n+        BigEndianByteArrayBuffer key = new BigEndianByteArrayBuffer(new byte[keySize]);\n+        BigEndianByteArrayBuffer value = new BigEndianByteArrayBuffer(new byte[valueSize]);\n+        // the first value is the format identifier, pass it along\n+        buffer.position(keySize);\n+        buffer.limit(keySize + valueSize);\n+        value.dataFrom(buffer);\n \n-                MetadataCollector metadata = metadata( formatSpecifier, pageSize, keySize, valueSize );\n-                // scan and catalogue all entries in the file\n-                KeyValueStoreFile.scanAll( file, 0, metadata, key, value );\n-                KeyValueStoreFile storeFile = new KeyValueStoreFile( file, keySize, valueSize, metadata );\n-                file = null;\n-                return storeFile;\n-            }\n-            finally\n-            {\n-                if ( file != null )\n-                {\n-                    file.close();\n-                }\n-            }\n+        MetadataCollector metadata = metadata(formatSpecifier, pageSize, keySize, valueSize);\n+        // scan and catalogue all entries in the file\n+        KeyValueStoreFile.scanAll(file, 0, metadata, key, value);\n+        KeyValueStoreFile storeFile = new KeyValueStoreFile(file, keySize, valueSize, metadata);\n+        file = null;\n+        return storeFile;\n+      } finally\n+      {\n+        if (file != null)\n+        {\n+          file.close();\n         }\n+      }\n     }\n+  }\n \n-    private static int pageSize( PageCache pages, int keySize, int valueSize )\n-    {\n-        int pageSize = pages == null ? PageCache.PAGE_SIZE : pages.pageSize();\n-        pageSize -= pageSize % (keySize + valueSize);\n-        return pageSize;\n-    }\n+  private static int pageSize(PageCache pages, int keySize, int valueSize)\n+  {\n+    int pageSize = pages == null ? PageCache.PAGE_SIZE : pages.pageSize();\n+    pageSize -= pageSize % (keySize + valueSize);\n+    return pageSize;\n+  }\n \n-    static boolean validFormatSpecifier( byte[] buffer, int keySize )\n+  static boolean validFormatSpecifier(byte[] buffer, int keySize)\n+  {\n+    for (int i = 0, key = 0; i < buffer.length; i++)\n     {\n-        for ( int i = 0, key = 0; i < buffer.length; i++ )\n+      if (buffer[i] == 0)\n+      {\n+        if (i == 0 || ++key == keySize || i == buffer.length - 1)\n         {\n-            if ( buffer[i] == 0 )\n-            {\n-                if ( i == 0 || ++key == keySize || i == buffer.length - 1 )\n-                {\n-                    return false;\n-                }\n-            }\n-            else\n-            {\n-                key = 0;\n-            }\n+          return false;\n         }\n-        return true;\n+      } else\n+      {\n+        key = 0;\n+      }\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 366
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "column": "37",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "77",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "229",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "248",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1247/KeyValueStoreFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1247/KeyValueStoreFileFormat.java\nindex 10879a31aee..da3af81b5e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1247/KeyValueStoreFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1247/KeyValueStoreFileFormat.java\n@@ -53,32 +53,22 @@ public abstract class KeyValueStoreFileFormat\n         this.headerFields = headerFields.clone();\n     }\n \n-    public final KeyValueStoreFile createStore(\n-            FileSystemAbstraction fs, PageCache pages, File path, int keySize, int valueSize,\n+    public final KeyValueStoreFile createStore( FileSystemAbstraction fs, PageCache pages, File path, int keySize, int valueSize,\n             Headers headers, DataProvider data ) throws IOException\n-    {\n-        return create( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ),\n-                       requireNonNull( path, \"path\" ),\n-                       requireNonNull( pages, PageCache.class.getSimpleName() ),\n-                       keySize, valueSize,\n-                       requireNonNull( headers, \"headers\" ),\n-                       requireNonNull( data, \"data\" ) );\n+{\n+        return create( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ), requireNonNull( path, \"path\" ), requireNonNull( pages, PageCache.class.getSimpleName() ), keySize, valueSize,\n+                       requireNonNull( headers, \"headers\" ), requireNonNull( data, \"data\" ) );\n     }\n \n-    public final void createEmptyStore(\n-            FileSystemAbstraction fs, File path, int keySize, int valueSize, Headers headers ) throws IOException\n-    {\n-        create( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ),\n-                requireNonNull( path, \"path\" ), null, keySize, valueSize,\n+    public final void createEmptyStore( FileSystemAbstraction fs, File path, int keySize, int valueSize, Headers headers ) throws IOException\n+{\n+        create( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ), requireNonNull( path, \"path\" ), null, keySize, valueSize,\n                 requireNonNull( headers, \"headers\" ), null );\n     }\n \n-    public final KeyValueStoreFile openStore( FileSystemAbstraction fs, PageCache pages, File path )\n-            throws IOException\n-    {\n-        return open( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ),\n-                     requireNonNull( path, \"path\" ),\n-                     requireNonNull( pages, PageCache.class.getSimpleName() ) );\n+    public final KeyValueStoreFile openStore( FileSystemAbstraction fs, PageCache pages, File path ) throws IOException\n+{\n+        return open( requireNonNull( fs, FileSystemAbstraction.class.getSimpleName() ), requireNonNull( path, \"path\" ), requireNonNull( pages, PageCache.class.getSimpleName() ) );\n     }\n \n     protected abstract void writeFormatSpecifier( WritableBuffer formatSpecifier );\n@@ -135,15 +125,12 @@ public abstract class KeyValueStoreFileFormat\n      * @param dataProvider the data to write into the store, {@code null} is accepted to mean no data.\n      * @return an opened version of the newly created store file - iff a {@link PageCache} was provided.\n      */\n-    private KeyValueStoreFile create(\n-            FileSystemAbstraction fs, File path, PageCache pages, int keySize, int valueSize,\n+    private KeyValueStoreFile create( FileSystemAbstraction fs, File path, PageCache pages, int keySize, int valueSize,\n             Headers headers, DataProvider dataProvider ) throws IOException\n-    {\n-        if ( keySize <= 0 || keySize > maxSize || valueSize <= 0 || valueSize > maxSize )\n+{\n+        if ( keySize <= 0 || keySize> maxSize || valueSize <= 0 || valueSize> maxSize )\n         {\n-            throw new IllegalArgumentException( String.format(\n-                    \"Invalid sizes: keySize=%d, valueSize=%d, format maxSize=%d\",\n-                    keySize, valueSize, maxSize ) );\n+            throw new IllegalArgumentException( String.format( \"Invalid sizes: keySize=%d, valueSize=%d, format maxSize=%d\", keySize, valueSize, maxSize ) );\n         }\n \n         if ( fs.fileExists( path ) )\n@@ -158,14 +145,13 @@ public abstract class KeyValueStoreFileFormat\n         writeFormatSpecifier( value );\n         if ( !validFormatSpecifier( value.buffer, keySize ) )\n         {\n-            throw new IllegalArgumentException( \"Invalid Format specifier: \" +\n-                                                BigEndianByteArrayBuffer.toString( value.buffer ) );\n-        }\n+            throw new IllegalArgumentException( \"Invalid Format specifier: \" + BigEndianByteArrayBuffer.toString( value.buffer ) );\n+    }\n \n         int pageSize = pageSize( pages, keySize, valueSize );\n         try ( KeyValueWriter writer = newWriter( fs, path, value, pages, pageSize, keySize, valueSize );\n-              DataProvider data = dataProvider )\n-        {\n+DataProvider data = dataProvider )\n+{\n             // header\n             if ( !writer.writeHeader( key, value ) )\n             {\n@@ -208,13 +194,10 @@ public abstract class KeyValueStoreFileFormat\n         }\n     }\n \n-    private KeyValueWriter newWriter( FileSystemAbstraction fs, File path, ReadableBuffer formatSpecifier,\n-                                      PageCache pages, int pageSize, int keySize, int valueSize )\n-            throws IOException\n-    {\n-        return KeyValueWriter.create( metadata( formatSpecifier, pageSize, keySize, valueSize ),\n-                                      fs, pages, path, pageSize );\n-    }\n+    private KeyValueWriter newWriter( FileSystemAbstraction fs, File path, ReadableBuffer formatSpecifier, PageCache pages, int pageSize, int keySize, int valueSize ) throws IOException\n+{\n+        return KeyValueWriter.create( metadata( formatSpecifier, pageSize, keySize, valueSize ), fs, pages, path, pageSize );\n+            }\n \n     /**\n      * Opens an existing store file.\n@@ -243,7 +226,7 @@ public abstract class KeyValueStoreFileFormat\n         int keySize = 0;\n         while ( buffer.hasRemaining() && buffer.get() == 0 )\n         {\n-            if ( ++keySize > maxSize )\n+            if ( ++keySize> maxSize )\n             {\n                 throw new IOException( \"Invalid header, key size too large.\" );\n             }\n@@ -256,11 +239,13 @@ public abstract class KeyValueStoreFileFormat\n             {\n                 throw new IOException( \"Invalid value size: \" + valueSize );\n             }\n-            if ( buffer.get() != 0 )\n+\n+if ( buffer.get() != 0 )\n             {\n                 zeros = 0;\n             }\n-            if ( ++valueSize - keySize > maxSize )\n+\n+if ( ++valueSize - keySize> maxSize )\n             {\n                 throw new IOException( \"Invalid header, value size too large.\" );\n             }\n@@ -272,8 +257,7 @@ public abstract class KeyValueStoreFileFormat\n         {\n             BigEndianByteArrayBuffer formatSpecifier = new BigEndianByteArrayBuffer( new byte[valueSize] );\n             writeFormatSpecifier( formatSpecifier );\n-\n-            PagedFile file = pages.map( path, pageSize );\n+PagedFile file = pages.map( path, pageSize );\n             try\n             {\n                 BigEndianByteArrayBuffer key = new BigEndianByteArrayBuffer( new byte[keySize] );\n@@ -282,8 +266,7 @@ public abstract class KeyValueStoreFileFormat\n                 buffer.position( keySize );\n                 buffer.limit( keySize + valueSize );\n                 value.dataFrom( buffer );\n-\n-                MetadataCollector metadata = metadata( formatSpecifier, pageSize, keySize, valueSize );\n+MetadataCollector metadata = metadata( formatSpecifier, pageSize, keySize, valueSize );\n                 // scan and catalogue all entries in the file\n                 KeyValueStoreFile.scanAll( file, 0, metadata, key, value );\n                 KeyValueStoreFile storeFile = new KeyValueStoreFile( file, keySize, valueSize, metadata );\n@@ -325,4 +308,4 @@ public abstract class KeyValueStoreFileFormat\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}