{
    "project_name": "graphfoundation-ongdb",
    "error_id": "697",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/697/Serializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/697/Serializer.java\nindex 165a60ed01f..64ceb2a69a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/697/Serializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/697/Serializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.net.URI;\n@@ -25,93 +26,92 @@ import java.util.Map;\n \n abstract class Serializer\n {\n-    private final URI baseUri;\n-    private final ExtensionInjector extensions;\n+  private final URI baseUri;\n+  private final ExtensionInjector extensions;\n \n-    Serializer( URI baseUri, ExtensionInjector extensions )\n-    {\n-        this.baseUri = baseUri;\n-        this.extensions = extensions;\n-    }\n+  Serializer(URI baseUri, ExtensionInjector extensions)\n+  {\n+    this.baseUri = baseUri;\n+    this.extensions = extensions;\n+  }\n \n-    final void serialize( MappingWriter mapping, MappingRepresentation value )\n-    {\n-        injectExtensions( mapping, value, baseUri, extensions );\n-        value.serialize( new MappingSerializer( mapping, baseUri, extensions ) );\n-        mapping.done();\n-    }\n+  final void serialize(MappingWriter mapping, MappingRepresentation value)\n+  {\n+    injectExtensions(mapping, value, baseUri, extensions);\n+    value.serialize(new MappingSerializer(mapping, baseUri, extensions));\n+    mapping.done();\n+  }\n \n-    static void injectExtensions( MappingWriter mapping, MappingRepresentation value, URI baseUri,\n-            ExtensionInjector injector )\n+  static void injectExtensions(MappingWriter mapping, MappingRepresentation value, URI baseUri,\n+                               ExtensionInjector injector)\n+  {\n+    if (value instanceof ExtensibleRepresentation && injector != null)\n     {\n-        if ( value instanceof ExtensibleRepresentation && injector != null )\n+      Map<String/*name*/, List<String/*method*/>> extData = injector.getExensionsFor(value.type.extend);\n+      String entityIdentity = ((ExtensibleRepresentation) value).getIdentity();\n+      if (extData != null)\n+      {\n+        MappingWriter extensions = mapping.newMapping(RepresentationType.PLUGINS, \"extensions\");\n+        for (Map.Entry<String, List<String>> ext : extData.entrySet())\n         {\n-            Map<String/*name*/, List<String/*method*/>> extData = injector.getExensionsFor( value.type.extend );\n-            String entityIdentity = ( (ExtensibleRepresentation) value ).getIdentity();\n-            if ( extData != null )\n+          MappingWriter extension = extensions.newMapping(RepresentationType.PLUGIN, ext.getKey());\n+          for (String method : ext.getValue())\n+          {\n+            StringBuilder path = new StringBuilder(\"/ext/\").append(ext.getKey());\n+            path.append(\"/\").append(value.type.valueName);\n+            if (entityIdentity != null)\n             {\n-                MappingWriter extensions = mapping.newMapping( RepresentationType.PLUGINS, \"extensions\" );\n-                for ( Map.Entry<String, List<String>> ext : extData.entrySet() )\n-                {\n-                    MappingWriter extension = extensions.newMapping( RepresentationType.PLUGIN, ext.getKey() );\n-                    for ( String method : ext.getValue() )\n-                    {\n-                        StringBuilder path = new StringBuilder( \"/ext/\" ).append( ext.getKey() );\n-                        path.append( \"/\" ).append( value.type.valueName );\n-                        if ( entityIdentity != null )\n-                        {\n-                            path.append( \"/\" ).append( entityIdentity );\n-                        }\n-                        path.append( \"/\" ).append( method );\n-                        extension.writeValue( RepresentationType.URI, method, joinBaseWithRelativePath( baseUri,\n-                                path.toString() ) );\n-                    }\n-                    extension.done();\n-                }\n-                extensions.done();\n+              path.append(\"/\").append(entityIdentity);\n             }\n+            path.append(\"/\").append(method);\n+            extension.writeValue(RepresentationType.URI, method, joinBaseWithRelativePath(baseUri,\n+                path.toString()));\n+          }\n+          extension.done();\n         }\n+        extensions.done();\n+      }\n     }\n+  }\n \n-    final void serialize( ListWriter list, ListRepresentation value )\n-    {\n-        value.serialize( new ListSerializer( list, baseUri, extensions ) );\n-        list.done();\n-    }\n+  final void serialize(ListWriter list, ListRepresentation value)\n+  {\n+    value.serialize(new ListSerializer(list, baseUri, extensions));\n+    list.done();\n+  }\n \n-    final String relativeUri( String path )\n-    {\n-        return joinBaseWithRelativePath(baseUri, path);\n-    }\n+  final String relativeUri(String path)\n+  {\n+    return joinBaseWithRelativePath(baseUri, path);\n+  }\n \n-    final String relativeTemplate( String path )\n-    {\n-        return joinBaseWithRelativePath( baseUri, path );\n-    }\n+  final String relativeTemplate(String path)\n+  {\n+    return joinBaseWithRelativePath(baseUri, path);\n+  }\n \n-    static String joinBaseWithRelativePath( URI baseUri, String path )\n+  static String joinBaseWithRelativePath(URI baseUri, String path)\n+  {\n+    String base = baseUri.toString();\n+    final StringBuilder result = new StringBuilder(base.length() + path.length() + 1).append(base);\n+    if (base.endsWith(\"/\"))\n     {\n-        String base = baseUri.toString();\n-        final StringBuilder result = new StringBuilder( base.length() + path.length() + 1 ).append( base );\n-        if ( base.endsWith( \"/\" ) )\n-        {\n-            if ( path.startsWith( \"/\" ) )\n-            {\n-                return result.append(path.substring(1)).toString();\n-            }\n-        }\n-        else if ( !path.startsWith( \"/\" ) )\n-        {\n-            return result.append('/').append(path).toString();\n-        }\n-        return result.append(path).toString();\n+      if (path.startsWith(\"/\"))\n+      {\n+        return result.append(path.substring(1)).toString();\n+      }\n+    } else if (!path.startsWith(\"/\"))\n+    {\n+      return result.append('/').append(path).toString();\n     }\n+    return result.append(path).toString();\n+  }\n \n-    void checkThatItIsBuiltInType( Object value )\n+  void checkThatItIsBuiltInType(Object value)\n+  {\n+    if (!\"java.lang\".equals(value.getClass().getPackage().getName()))\n     {\n-        if ( !\"java.lang\".equals( value.getClass().getPackage().getName() ) )\n-        {\n-            throw new IllegalArgumentException( \"Unsupported number type: \" + value.getClass() );\n-        }\n+      throw new IllegalArgumentException(\"Unsupported number type: \" + value.getClass());\n     }\n+  }\n }\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/697/Serializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/697/Serializer.java\nindex 165a60ed01f..74fb5bb0612 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/697/Serializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/697/Serializer.java\n@@ -47,7 +47,7 @@ abstract class Serializer\n         if ( value instanceof ExtensibleRepresentation && injector != null )\n         {\n             Map<String/*name*/, List<String/*method*/>> extData = injector.getExensionsFor( value.type.extend );\n-            String entityIdentity = ( (ExtensibleRepresentation) value ).getIdentity();\n+            String entityIdentity = ( (ExtensibleRepresentation) value).getIdentity();\n             if ( extData != null )\n             {\n                 MappingWriter extensions = mapping.newMapping( RepresentationType.PLUGINS, \"extensions\" );\n@@ -81,7 +81,7 @@ abstract class Serializer\n \n     final String relativeUri( String path )\n     {\n-        return joinBaseWithRelativePath(baseUri, path);\n+        return joinBaseWithRelativePath( baseUri, path );\n     }\n \n     final String relativeTemplate( String path )\n@@ -97,14 +97,15 @@ abstract class Serializer\n         {\n             if ( path.startsWith( \"/\" ) )\n             {\n-                return result.append(path.substring(1)).toString();\n+                return result.append(path.substring( 1)).toString();\n             }\n         }\n         else if ( !path.startsWith( \"/\" ) )\n         {\n-            return result.append('/').append(path).toString();\n+            return result.append( '/').append(path).toString();\n         }\n-        return result.append(path).toString();\n+\n+return result.append(path).toString();\n     }\n \n     void checkThatItIsBuiltInType( Object value )\n@@ -114,4 +115,4 @@ abstract class Serializer\n             throw new IllegalArgumentException( \"Unsupported number type: \" + value.getClass() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "55",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "53",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "21",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/697/Serializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/697/Serializer.java\nindex 165a60ed01f..fb787502dba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/697/Serializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/697/Serializer.java\n@@ -41,20 +41,21 @@ abstract class Serializer\n         mapping.done();\n     }\n \n-    static void injectExtensions( MappingWriter mapping, MappingRepresentation value, URI baseUri,\n-            ExtensionInjector injector )\n+    static void injectExtensions( MappingWriter mapping, MappingRepresentation value, URI baseUri, ExtensionInjector injector )\n     {\n-        if ( value instanceof ExtensibleRepresentation && injector != null )\n+        if ( value instanceof ExtensibleRepresentation&& injector != null )\n         {\n-            Map<String/*name*/, List<String/*method*/>> extData = injector.getExensionsFor( value.type.extend );\n-            String entityIdentity = ( (ExtensibleRepresentation) value ).getIdentity();\n+            Map<String/*name*/,List<String/*method*/>> extData = injector.getExensionsFor( value.type.extend );\n+            String entityIdentity = ((ExtensibleRepresentation) value).getIdentity();\n             if ( extData != null )\n             {\n                 MappingWriter extensions = mapping.newMapping( RepresentationType.PLUGINS, \"extensions\" );\n-                for ( Map.Entry<String, List<String>> ext : extData.entrySet() )\n+                for( Map.Entry<String,List<String>> ext : extData.entrySet()\n+                )\n                 {\n                     MappingWriter extension = extensions.newMapping( RepresentationType.PLUGIN, ext.getKey() );\n-                    for ( String method : ext.getValue() )\n+                    for( String method : ext.getValue()\n+                    )\n                     {\n                         StringBuilder path = new StringBuilder( \"/ext/\" ).append( ext.getKey() );\n                         path.append( \"/\" ).append( value.type.valueName );\n@@ -62,12 +63,14 @@ abstract class Serializer\n                         {\n                             path.append( \"/\" ).append( entityIdentity );\n                         }\n+\n                         path.append( \"/\" ).append( method );\n-                        extension.writeValue( RepresentationType.URI, method, joinBaseWithRelativePath( baseUri,\n-                                path.toString() ) );\n+                        extension.writeValue( RepresentationType.URI, method, joinBaseWithRelativePath( baseUri, path.toString() ) );\n                     }\n+\n                     extension.done();\n                 }\n+\n                 extensions.done();\n             }\n         }\n@@ -81,7 +84,7 @@ abstract class Serializer\n \n     final String relativeUri( String path )\n     {\n-        return joinBaseWithRelativePath(baseUri, path);\n+        return joinBaseWithRelativePath( baseUri, path );\n     }\n \n     final String relativeTemplate( String path )\n@@ -97,21 +100,23 @@ abstract class Serializer\n         {\n             if ( path.startsWith( \"/\" ) )\n             {\n-                return result.append(path.substring(1)).toString();\n+                return result.append( path.substring( 1 ) ).toString();\n             }\n         }\n-        else if ( !path.startsWith( \"/\" ) )\n+        else\n+        if ( ! path.startsWith( \"/\" ) )\n         {\n-            return result.append('/').append(path).toString();\n+            return result.append( '/' ).append( path ).toString();\n         }\n-        return result.append(path).toString();\n+\n+        return result.append( path ).toString();\n     }\n \n     void checkThatItIsBuiltInType( Object value )\n     {\n-        if ( !\"java.lang\".equals( value.getClass().getPackage().getName() ) )\n+        if ( ! \"java.lang\".equals( value.getClass().getPackage().getName() ) )\n         {\n             throw new IllegalArgumentException( \"Unsupported number type: \" + value.getClass() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}