{
    "project_name": "blockchain-lab-ScaleOutDistributedLedger",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "122",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 165).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            return RSAKey.verify(attrInBytes, this.signature, this.owner.getPublicKey());\n        } catch (Exception e) {\n\t    \t//TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n\t        return false;\n        }\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler/9/BlockAbstract.java\nindex 6d0237c8192..a1032c9fcf6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler/9/BlockAbstract.java\n@@ -119,8 +119,8 @@ public class BlockAbstract implements Serializable {\n \n             return RSAKey.verify(attrInBytes, this.signature, this.owner.getPublicKey());\n         } catch (Exception e) {\n-\t    \t//TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n-\t        return false;\n+        //TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n+            return false;\n         }\n \t}\n }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/intellij/9/BlockAbstract.java\nindex 6d0237c8192..b671c045c22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/intellij/9/BlockAbstract.java\n@@ -18,29 +18,30 @@ import java.util.logging.Level;\n  */\n public class BlockAbstract implements Serializable {\n \n-\tprivate static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n-\t@Getter\n-\tprivate final Node owner;\n+    @Getter\n+    private final Node owner;\n \n-\t@Getter\n-\tprivate final int blockNumber;\n+    @Getter\n+    private final int blockNumber;\n \n-\t@Getter\n-\tprivate final Sha256Hash blockHash;\n+    @Getter\n+    private final Sha256Hash blockHash;\n \n-\t@Getter\n-\tprivate final byte[] signature;\n+    @Getter\n+    private final byte[] signature;\n \n-\t@Setter\n-\tprivate Optional<Boolean> onMainChain; // any means unknown\n+    @Setter\n+    private Optional<Boolean> onMainChain; // any means unknown\n \n     /**\n      * Constructor.\n-     * @param owner - the owner of the block this abstract is for.\n+     *\n+     * @param owner       - the owner of the block this abstract is for.\n      * @param blockNumber - the number of the block this abstract is for.\n-     * @param blockHash - the hash of the block this abstract is for.\n-     * @param signature - the signature for the block by the owner.\n+     * @param blockHash   - the hash of the block this abstract is for.\n+     * @param signature   - the signature for the block by the owner.\n      */\n     public BlockAbstract(Node owner, int blockNumber, Sha256Hash blockHash, byte[] signature) {\n         this.owner = owner;\n@@ -50,67 +51,70 @@ public class BlockAbstract implements Serializable {\n         this.onMainChain = Optional.empty();\n     }\n \n-\t/**\n-\t * Convert this abstract to a byte array.\n-\t * Performs the inverse of {@link BlockAbstract#fromBytes(byte[])}.\n-\t *\n-\t * @return - the byte array conversion; or null if serialization fails.\n-\t */\n-\tpublic byte[] toBytes() {\n-\t\tbyte[] ret;\n-\t\ttry {\n-\t\t\tret = SerializationUtils.serialize(this);\n-\t\t} catch (SerializationException e) {\n-\t\t\tLog.log(Level.WARNING, \"Could not serialize the BlockAbstract to bytes\", e);\n-\t\t\tret = null;\n-\t\t}\n-\t\treturn ret;\n+    /**\n+     * Convert this abstract to a byte array.\n+     * Performs the inverse of {@link BlockAbstract#fromBytes(byte[])}.\n+     *\n+     * @return - the byte array conversion; or null if serialization fails.\n+     */\n+    public byte[] toBytes() {\n+        byte[] ret;\n+        try {\n+            ret = SerializationUtils.serialize(this);\n+        } catch (SerializationException e) {\n+            Log.log(Level.WARNING, \"Could not serialize the BlockAbstract to bytes\", e);\n+            ret = null;\n+        }\n+        return ret;\n+    }\n+\n+    /**\n+     * Construct a {@link BlockAbstract} from a byte array.\n+     * Performs the inverse of {@link BlockAbstract#toBytes()}.\n+     *\n+     * @param bytes - the data to construct from\n+     * @return - the abstract represented by the bytes; null if the deserialization fails.\n+     */\n+    public static BlockAbstract fromBytes(byte[] bytes) {\n+        BlockAbstract block;\n+        try {\n+            block = SerializationUtils.deserialize(bytes);\n+        } catch (SerializationException e) {\n+            Log.log(Level.WARNING, \"Could not deserialize BlockAbstract from bytes\", e);\n+            block = null;\n+        }\n+        return block;\n+    }\n+\n+    /**\n+     * Returns the boolean onMainChain, and gets it if it is not present.\n+     *\n+     * @return - boolean identifiying if this abstract is on the main chain.\n+     */\n+    public boolean isOnMainChain() {\n+        if (!this.onMainChain.isPresent()) {\n+            this.onMainChain = Optional.of(Application.getMainChain().isPresent(this));\n+        }\n+        return this.onMainChain.get();\n     }\n \n-\t/**\n-\t * Construct a {@link BlockAbstract} from a byte array.\n-\t * Performs the inverse of {@link BlockAbstract#toBytes()}.\n-\t *\n-\t * @param bytes - the data to construct from\n-\t * @return - the abstract represented by the bytes; null if the deserialization fails.\n-\t */\n-\tpublic static BlockAbstract fromBytes(byte[] bytes) {\n-\t\tBlockAbstract block;\n-\t\ttry {\n-\t\t\tblock = SerializationUtils.deserialize(bytes);\n-\t\t} catch (SerializationException e) {\n-\t\t\tLog.log(Level.WARNING, \"Could not deserialize BlockAbstract from bytes\", e);\n-\t\t\tblock = null;\n-\t\t}\n-\t\treturn block;\n+    /**\n+     * Checks if the given blocks corresponds with the blockHash in this abstract.\n+     *\n+     * @param block - the block to check\n+     * @return - boolean identifying if the blockhash was correct or not.\n+     */\n+    public boolean checkBlockHash(Block block) {\n+        return this.blockHash.equals(block.getHash());\n     }\n \n-\t/**\n-\t * Returns the boolean onMainChain, and gets it if it is not present.\n-\t * @return - boolean identifiying if this abstract is on the main chain.\n-\t */\n-\tpublic boolean isOnMainChain() {\n-\t\tif (!this.onMainChain.isPresent()) {\n-\t\t\tthis.onMainChain = Optional.of(Application.getMainChain().isPresent(this));\n-\t\t}\n-\t\treturn this.onMainChain.get();\n-\t}\n-\n-\t/**\n-\t * Checks if the given blocks corresponds with the blockHash in this abstract.\n-\t * @param block - the block to check\n-\t * @return - boolean identifying if the blockhash was correct or not.\n-\t */\n-\tpublic boolean checkBlockHash(Block block) {\n-\t\treturn this.blockHash.equals(block.getHash());\n-\t}\n-\n-\t/**\n-\t * Checks if the signature included in this abstract is valid.\n-\t * @return - boolean identifying if the signature is valid.\n-\t */\n-\tpublic boolean checkSignature() {\n-\t    try {\n+    /**\n+     * Checks if the signature included in this abstract is valid.\n+     *\n+     * @return - boolean identifying if the signature is valid.\n+     */\n+    public boolean checkSignature() {\n+        try {\n             ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n             outputStream.write(Utils.intToByteArray(this.owner.getId()));\n             outputStream.write(Utils.intToByteArray(this.blockNumber));\n@@ -119,8 +123,8 @@ public class BlockAbstract implements Serializable {\n \n             return RSAKey.verify(attrInBytes, this.signature, this.owner.getPublicKey());\n         } catch (Exception e) {\n-\t    \t//TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n-\t        return false;\n+            //TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n+            return false;\n         }\n-\t}\n+    }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler_random/9/BlockAbstract.java\nindex 6d0237c8192..a1032c9fcf6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler_random/9/BlockAbstract.java\n@@ -119,8 +119,8 @@ public class BlockAbstract implements Serializable {\n \n             return RSAKey.verify(attrInBytes, this.signature, this.owner.getPublicKey());\n         } catch (Exception e) {\n-\t    \t//TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n-\t        return false;\n+        //TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n+            return false;\n         }\n \t}\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler_three_grams/9/BlockAbstract.java\nindex 6d0237c8192..852dd0d0b11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/9/BlockAbstract.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/styler_three_grams/9/BlockAbstract.java\n@@ -119,8 +119,8 @@ public class BlockAbstract implements Serializable {\n \n             return RSAKey.verify(attrInBytes, this.signature, this.owner.getPublicKey());\n         } catch (Exception e) {\n-\t    \t//TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n-\t        return false;\n+        //TODO: we are potentially swallowing a huge stack of exceptions here; this should really only be catching relevant exceptions (e.g. signature exception)\n+        return false;\n         }\n \t}\n }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}