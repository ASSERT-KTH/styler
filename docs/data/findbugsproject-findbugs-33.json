{
    "project_name": "findbugsproject-findbugs",
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "24",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class FindBugsPreferences extends JPanel implements PreferenceGenerator {\n\n\tprivate\tBlueJ bluej;\n\tprivate static JRadioButton[] radioList = new JRadioButton[3];\n\t\n\t//Description of each radioButton.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "25",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/33/FindBugsPreferences.java\nindex c6610a4b528..6eb07a58ce7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/33/FindBugsPreferences.java\n@@ -21,7 +21,7 @@ import bluej.extensions.PreferenceGenerator;\n @SuppressWarnings(\"serial\")\n public class FindBugsPreferences extends JPanel implements PreferenceGenerator {\n \n-\tprivate\tBlueJ bluej;\n+private BlueJ bluej;\n \tprivate static JRadioButton[] radioList = new JRadioButton[3];\n \t\n \t//Description of each radioButton.\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/33/FindBugsPreferences.java\nindex c6610a4b528..91afaa1e063 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/33/FindBugsPreferences.java\n@@ -15,76 +15,79 @@ import bluej.extensions.PreferenceGenerator;\n  * compiling all uncompiled classes when FindBugs is run, not compiling the classes,\n  * or popping up a dialog box each time there are uncompiled classes when FindBugs\n  * is called.\n- * @author Kristin Stephens\n  *\n+ * @author Kristin Stephens\n  */\n @SuppressWarnings(\"serial\")\n public class FindBugsPreferences extends JPanel implements PreferenceGenerator {\n \n-\tprivate\tBlueJ bluej;\n-\tprivate static JRadioButton[] radioList = new JRadioButton[3];\n-\t\n-\t//Description of each radioButton.\n-\tprivate static String[] radioDescription = {\"Compile all classes not already compiled.\", \n-\t\t\t\"Do not compile classes not already compiled.\",\n-\t\t\t\"Show dialog box.\"};\n-\t\n-\t//Warning if this is changed must check and/or change loadValues()\n-\t//and RunFindbugs method compileSucceeded()\n-\tstatic String[] radioCommand = {\"Compile\", \"DoNotCompile\", \"DialogBox\"};\n-\t\n-\tstatic final String PROFILE_LABEL = \"FindBugsPreference\";\n-\tprivate ButtonGroup compileGroup;\n-\t\n-\t/**\n-\t * Creates the preference panel and loads the value.\n-\t * @param bluej Instance of BlueJ\n-\t */\n-\tpublic FindBugsPreferences(BlueJ bluej){\n-\t\tthis.bluej = bluej;\n-\t\tcompileGroup = new ButtonGroup();\n-\t\t\t\t\n-\t\tsetLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n-\t\t\n-\t\tadd(new JLabel(\"When FindBugs runs:\"));\n-\t\t\n-\t\tfor(int i = 0; i < radioList.length; i++){\n-\t\t\tradioList[i] = new JRadioButton(radioDescription[i]);\n-\t\t\tradioList[i].setActionCommand(radioCommand[i]);\n-\t\t\tcompileGroup.add(radioList[i]);\n-\t\t\tadd(radioList[i]);\n-\t\t}\n-\t\t\n-\t\tloadValues();\n-\t}\n-\t\n-\t/**\n-\t * @see bluej.extensions.PreferenceGenerator\n-\t */\n-\tpublic JPanel getPanel() {\n-\t\treturn this;\n-\t}\n-\n-\t/**\n-\t * @see bluej.extensions.PreferenceGenerator\n-\t */\n-\tpublic void loadValues() {\n-\t\tString strButton = bluej.getExtensionPropertyString(PROFILE_LABEL,\"\");\n-\t\t\n-\t\tif(strButton.equals(\"\"))\n-\t\t\tradioList[2].setSelected(true);\n-\t\telse\n-\t\t\tfor(int i = 0; i < radioCommand.length; i++){\n-\t\t\t\tif(strButton.equalsIgnoreCase(radioCommand[i]))\n-\t\t\t\t\tradioList[i].setSelected(true);\n-\t\t\t}\n-\t}\n-\n-\t/**\n-\t * @see bluej.extensions.PreferenceGenerator\n-\t */\n-\tpublic void saveValues() {\n-\t\tbluej.setExtensionPropertyString(PROFILE_LABEL, compileGroup.getSelection().getActionCommand());\n-\t}\n+    private BlueJ bluej;\n+    private static JRadioButton[] radioList = new JRadioButton[3];\n+\n+    //Description of each radioButton.\n+    private static String[] radioDescription = {\"Compile all classes not already compiled.\",\n+        \"Do not compile classes not already compiled.\",\n+        \"Show dialog box.\"};\n+\n+    //Warning if this is changed must check and/or change loadValues()\n+    //and RunFindbugs method compileSucceeded()\n+    static String[] radioCommand = {\"Compile\", \"DoNotCompile\", \"DialogBox\"};\n+\n+    static final String PROFILE_LABEL = \"FindBugsPreference\";\n+    private ButtonGroup compileGroup;\n+\n+    /**\n+     * Creates the preference panel and loads the value.\n+     *\n+     * @param bluej Instance of BlueJ\n+     */\n+    public FindBugsPreferences(BlueJ bluej) {\n+        this.bluej = bluej;\n+        compileGroup = new ButtonGroup();\n+\n+        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+\n+        add(new JLabel(\"When FindBugs runs:\"));\n+\n+        for (int i = 0; i < radioList.length; i++) {\n+            radioList[i] = new JRadioButton(radioDescription[i]);\n+            radioList[i].setActionCommand(radioCommand[i]);\n+            compileGroup.add(radioList[i]);\n+            add(radioList[i]);\n+        }\n+\n+        loadValues();\n+    }\n+\n+    /**\n+     * @see bluej.extensions.PreferenceGenerator\n+     */\n+    public JPanel getPanel() {\n+        return this;\n+    }\n+\n+    /**\n+     * @see bluej.extensions.PreferenceGenerator\n+     */\n+    public void loadValues() {\n+        String strButton = bluej.getExtensionPropertyString(PROFILE_LABEL, \"\");\n+\n+        if (strButton.equals(\"\")) {\n+            radioList[2].setSelected(true);\n+        } else {\n+            for (int i = 0; i < radioCommand.length; i++) {\n+                if (strButton.equalsIgnoreCase(radioCommand[i])) {\n+                    radioList[i].setSelected(true);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @see bluej.extensions.PreferenceGenerator\n+     */\n+    public void saveValues() {\n+        bluej.setExtensionPropertyString(PROFILE_LABEL, compileGroup.getSelection().getActionCommand());\n+    }\n \n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/33/FindBugsPreferences.java\nindex c6610a4b528..243e0ad14ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/33/FindBugsPreferences.java\n@@ -5,7 +5,6 @@ import javax.swing.ButtonGroup;\n import javax.swing.JLabel;\n import javax.swing.JPanel;\n import javax.swing.JRadioButton;\n-\n import bluej.extensions.BlueJ;\n import bluej.extensions.PreferenceGenerator;\n \n@@ -18,73 +17,75 @@ import bluej.extensions.PreferenceGenerator;\n  * @author Kristin Stephens\n  *\n  */\n+\n @SuppressWarnings(\"serial\")\n public class FindBugsPreferences extends JPanel implements PreferenceGenerator {\n+    private BlueJ bluej;\n+\n+    private static JRadioButton[] radioList = new JRadioButton[3];\n+    \n+    //Description of each radioButton.\n+\n+    private static String[] radioDescription = { \"Compile all classes not already compiled.\", \"Do not compile classes not already compiled.\", \"Show dialog box.\" };\n+    \n+    //Warning if this is changed must check and/or change loadValues()\n+    //and RunFindbugs method compileSucceeded()\n+\n+    static String[] radioCommand = { \"Compile\", \"DoNotCompile\", \"DialogBox\" };\n+\n+    static final String PROFILE_LABEL = \"FindBugsPreference\";\n+\n+    private ButtonGroup compileGroup;\n+    \n+    /**\n+     * Creates the preference panel and loads the value.\n+     * @param bluej Instance of BlueJ\n+     */\n+\n+\n+    public FindBugsPreferences(BlueJ bluej) {\n+        this.bluej = bluej;\n+        compileGroup = new ButtonGroup();\n+        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+        add(new JLabel(\"When FindBugs runs:\"));\n+        for (int i = 0; i < radioList.length; i++) {\n+            radioList[i] = new JRadioButton(radioDescription[i]);\n+            radioList[i].setActionCommand(radioCommand[i]);\n+            compileGroup.add(radioList[i]);\n+            add(radioList[i]);\n+        }\n+        loadValues();\n+    }\n+    \n+    /**\n+     * @see bluej.extensions.PreferenceGenerator\n+     */\n+\n+\n+    public JPanel getPanel() {\n+        return this;\n+    }\n+\n+    /**\n+     * @see bluej.extensions.PreferenceGenerator\n+     */\n+\n+    public void loadValues() {\n+        String strButton = bluej.getExtensionPropertyString(PROFILE_LABEL, \"\");\n+        if (strButton.equals(\"\"))\n+            radioList[2].setSelected(true);\n+        else\n+            for (int i = 0; i < radioCommand.length; i++) {\n+                if (strButton.equalsIgnoreCase(radioCommand[i]))\n+                    radioList[i].setSelected(true);\n+            }\n+    }\n+\n+    /**\n+     * @see bluej.extensions.PreferenceGenerator\n+     */\n \n-\tprivate\tBlueJ bluej;\n-\tprivate static JRadioButton[] radioList = new JRadioButton[3];\n-\t\n-\t//Description of each radioButton.\n-\tprivate static String[] radioDescription = {\"Compile all classes not already compiled.\", \n-\t\t\t\"Do not compile classes not already compiled.\",\n-\t\t\t\"Show dialog box.\"};\n-\t\n-\t//Warning if this is changed must check and/or change loadValues()\n-\t//and RunFindbugs method compileSucceeded()\n-\tstatic String[] radioCommand = {\"Compile\", \"DoNotCompile\", \"DialogBox\"};\n-\t\n-\tstatic final String PROFILE_LABEL = \"FindBugsPreference\";\n-\tprivate ButtonGroup compileGroup;\n-\t\n-\t/**\n-\t * Creates the preference panel and loads the value.\n-\t * @param bluej Instance of BlueJ\n-\t */\n-\tpublic FindBugsPreferences(BlueJ bluej){\n-\t\tthis.bluej = bluej;\n-\t\tcompileGroup = new ButtonGroup();\n-\t\t\t\t\n-\t\tsetLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n-\t\t\n-\t\tadd(new JLabel(\"When FindBugs runs:\"));\n-\t\t\n-\t\tfor(int i = 0; i < radioList.length; i++){\n-\t\t\tradioList[i] = new JRadioButton(radioDescription[i]);\n-\t\t\tradioList[i].setActionCommand(radioCommand[i]);\n-\t\t\tcompileGroup.add(radioList[i]);\n-\t\t\tadd(radioList[i]);\n-\t\t}\n-\t\t\n-\t\tloadValues();\n-\t}\n-\t\n-\t/**\n-\t * @see bluej.extensions.PreferenceGenerator\n-\t */\n-\tpublic JPanel getPanel() {\n-\t\treturn this;\n-\t}\n-\n-\t/**\n-\t * @see bluej.extensions.PreferenceGenerator\n-\t */\n-\tpublic void loadValues() {\n-\t\tString strButton = bluej.getExtensionPropertyString(PROFILE_LABEL,\"\");\n-\t\t\n-\t\tif(strButton.equals(\"\"))\n-\t\t\tradioList[2].setSelected(true);\n-\t\telse\n-\t\t\tfor(int i = 0; i < radioCommand.length; i++){\n-\t\t\t\tif(strButton.equalsIgnoreCase(radioCommand[i]))\n-\t\t\t\t\tradioList[i].setSelected(true);\n-\t\t\t}\n-\t}\n-\n-\t/**\n-\t * @see bluej.extensions.PreferenceGenerator\n-\t */\n-\tpublic void saveValues() {\n-\t\tbluej.setExtensionPropertyString(PROFILE_LABEL, compileGroup.getSelection().getActionCommand());\n-\t}\n-\n-}\n+    public void saveValues() {\n+        bluej.setExtensionPropertyString(PROFILE_LABEL, compileGroup.getSelection().getActionCommand());\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 133
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "25",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/33/FindBugsPreferences.java\nindex c6610a4b528..6eb07a58ce7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/33/FindBugsPreferences.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/33/FindBugsPreferences.java\n@@ -21,7 +21,7 @@ import bluej.extensions.PreferenceGenerator;\n @SuppressWarnings(\"serial\")\n public class FindBugsPreferences extends JPanel implements PreferenceGenerator {\n \n-\tprivate\tBlueJ bluej;\n+private BlueJ bluej;\n \tprivate static JRadioButton[] radioList = new JRadioButton[3];\n \t\n \t//Description of each radioButton.\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}