{
    "project_name": "neo4j-neo4j",
    "error_id": "3030",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3030/JoltRelationshipReversedSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3030/JoltRelationshipReversedSerializer.java\nindex 60c3328f5ed..23da02ece8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3030/JoltRelationshipReversedSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3030/JoltRelationshipReversedSerializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher.format.jolt;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n@@ -34,33 +35,33 @@ final class JoltRelationshipReversedSerializer extends StdSerializer<JoltRelatio\n {\n     JoltRelationshipReversedSerializer()\n     {\n-        super( JoltRelationship.class );\n+        super(JoltRelationship.class);\n     }\n \n     @Override\n-    public void serialize( JoltRelationship relationship, JsonGenerator generator, SerializerProvider provider )\n-            throws IOException\n+    public void serialize(JoltRelationship relationship, JsonGenerator generator, SerializerProvider provider)\n+      throws IOException\n     {\n-        generator.writeStartObject( relationship );\n-        generator.writeFieldName( Sigil.RELATIONSHIP_REVERSED.getValue() );\n+        generator.writeStartObject(relationship);\n+        generator.writeFieldName(Sigil.RELATIONSHIP_REVERSED.getValue());\n \n         generator.writeStartArray();\n \n-        generator.writeNumber( relationship.getId() );\n+        generator.writeNumber(relationship.getId());\n \n-        generator.writeNumber( relationship.getStartNodeId() );\n+        generator.writeNumber(relationship.getStartNodeId());\n \n-        generator.writeString( relationship.getType().name() );\n+        generator.writeString(relationship.getType().name());\n \n-        generator.writeNumber( relationship.getEndNodeId() );\n+        generator.writeNumber(relationship.getEndNodeId());\n \n-        var properties = Optional.ofNullable( relationship.getAllProperties() ).orElseGet( Map::of );\n+        var properties = Optional.ofNullable(relationship.getAllProperties()).orElseGet(Map::of);\n         generator.writeStartObject();\n \n-        for ( var entry : properties.entrySet() )\n+        for (var entry : properties.entrySet())\n         {\n-            generator.writeFieldName( entry.getKey() );\n-            generator.writeObject( entry.getValue() );\n+            generator.writeFieldName(entry.getKey());\n+            generator.writeObject(entry.getValue());\n         }\n \n         generator.writeEndObject();\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}