{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3258",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3258/MuninnWritePageCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3258/MuninnWritePageCursor.java\nindex 511bd4818bd..59a39692a64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3258/MuninnWritePageCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3258/MuninnWritePageCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl.muninn;\n \n import java.io.IOException;\n@@ -28,113 +29,110 @@ import org.neo4j.io.pagecache.tracing.cursor.context.VersionContextSupplier;\n \n final class MuninnWritePageCursor extends MuninnPageCursor\n {\n-    MuninnWritePageCursor( long victimPage, PageCursorTracer pageCursorTracer,\n-            VersionContextSupplier versionContextSupplier )\n-    {\n-        super( victimPage, pageCursorTracer, versionContextSupplier );\n-    }\n+  MuninnWritePageCursor(long victimPage, PageCursorTracer pageCursorTracer,\n+                        VersionContextSupplier versionContextSupplier)\n+  {\n+    super(victimPage, pageCursorTracer, versionContextSupplier);\n+  }\n \n-    @Override\n-    protected void unpinCurrentPage()\n+  @Override\n+  protected void unpinCurrentPage()\n+  {\n+    if (pinnedPageRef != 0)\n     {\n-        if ( pinnedPageRef != 0 )\n-        {\n-            pinEvent.done();\n-            // Mark the page as dirty *after* our write access, to make sure it's dirty even if it was concurrently\n-            // flushed. Unlocking the write-locked page will mark it as dirty for us.\n-            if ( eagerFlush )\n-            {\n-                eagerlyFlushAndUnlockPage();\n-            }\n-            else\n-            {\n-                pagedFile.unlockWrite( pinnedPageRef );\n-            }\n-        }\n-        clearPageCursorState();\n+      pinEvent.done();\n+      // Mark the page as dirty *after* our write access, to make sure it's dirty even if it was concurrently\n+      // flushed. Unlocking the write-locked page will mark it as dirty for us.\n+      if (eagerFlush)\n+      {\n+        eagerlyFlushAndUnlockPage();\n+      } else\n+      {\n+        pagedFile.unlockWrite(pinnedPageRef);\n+      }\n     }\n+    clearPageCursorState();\n+  }\n \n-    private void eagerlyFlushAndUnlockPage()\n+  private void eagerlyFlushAndUnlockPage()\n+  {\n+    long flushStamp = pagedFile.unlockWriteAndTryTakeFlushLock(pinnedPageRef);\n+    if (flushStamp != 0)\n     {\n-        long flushStamp = pagedFile.unlockWriteAndTryTakeFlushLock( pinnedPageRef );\n-        if ( flushStamp != 0 )\n-        {\n-            boolean success = false;\n-            try\n-            {\n-                success = pagedFile.flushLockedPage( pinnedPageRef, currentPageId );\n-            }\n-            finally\n-            {\n-                pagedFile.unlockFlush( pinnedPageRef, flushStamp, success );\n-            }\n-        }\n+      boolean success = false;\n+      try\n+      {\n+        success = pagedFile.flushLockedPage(pinnedPageRef, currentPageId);\n+      } finally\n+      {\n+        pagedFile.unlockFlush(pinnedPageRef, flushStamp, success);\n+      }\n     }\n+  }\n \n-    @Override\n-    public boolean next() throws IOException\n+  @Override\n+  public boolean next() throws IOException\n+  {\n+    unpinCurrentPage();\n+    long lastPageId = assertPagedFileStillMappedAndGetIdOfLastPage();\n+    if (nextPageId < 0)\n     {\n-        unpinCurrentPage();\n-        long lastPageId = assertPagedFileStillMappedAndGetIdOfLastPage();\n-        if ( nextPageId < 0 )\n-        {\n-            return false;\n-        }\n-        if ( nextPageId > lastPageId )\n-        {\n-            if ( noGrow )\n-            {\n-                return false;\n-            }\n-            else\n-            {\n-                pagedFile.increaseLastPageIdTo( nextPageId );\n-            }\n-        }\n-        currentPageId = nextPageId;\n-        nextPageId++;\n-        pin( currentPageId, true );\n-        return true;\n+      return false;\n     }\n-\n-    @Override\n-    protected boolean tryLockPage( long pageRef )\n+    if (nextPageId > lastPageId)\n     {\n-        return pagedFile.tryWriteLock( pageRef );\n+      if (noGrow)\n+      {\n+        return false;\n+      } else\n+      {\n+        pagedFile.increaseLastPageIdTo(nextPageId);\n+      }\n     }\n+    currentPageId = nextPageId;\n+    nextPageId++;\n+    pin(currentPageId, true);\n+    return true;\n+  }\n \n-    @Override\n-    protected void unlockPage( long pageRef )\n-    {\n-        pagedFile.unlockWrite( pageRef );\n-    }\n+  @Override\n+  protected boolean tryLockPage(long pageRef)\n+  {\n+    return pagedFile.tryWriteLock(pageRef);\n+  }\n \n-    @Override\n-    protected void pinCursorToPage( long pageRef, long filePageId, PageSwapper swapper ) throws FileIsNotMappedException\n-    {\n-        reset( pageRef );\n-        // Check if we've been racing with unmapping. We want to do this before\n-        // we make any changes to the contents of the page, because once all\n-        // files have been unmapped, the page cache can be closed. And when\n-        // that happens, dirty contents in memory will no longer have a chance\n-        // to get flushed. It is okay for this method to throw, because we are\n-        // after the reset() call, which means that if we throw, the cursor will\n-        // be closed and the page lock will be released.\n-        assertPagedFileStillMappedAndGetIdOfLastPage();\n-        pagedFile.incrementUsage( pageRef );\n-        pagedFile.setLastModifiedTxId( pageRef, versionContextSupplier.getVersionContext().committingTransactionId() );\n-    }\n+  @Override\n+  protected void unlockPage(long pageRef)\n+  {\n+    pagedFile.unlockWrite(pageRef);\n+  }\n \n-    @Override\n-    protected void convertPageFaultLock( long pageRef )\n-    {\n-        pagedFile.unlockExclusiveAndTakeWriteLock( pageRef );\n-    }\n+  @Override\n+  protected void pinCursorToPage(long pageRef, long filePageId, PageSwapper swapper) throws FileIsNotMappedException\n+  {\n+    reset(pageRef);\n+    // Check if we've been racing with unmapping. We want to do this before\n+    // we make any changes to the contents of the page, because once all\n+    // files have been unmapped, the page cache can be closed. And when\n+    // that happens, dirty contents in memory will no longer have a chance\n+    // to get flushed. It is okay for this method to throw, because we are\n+    // after the reset() call, which means that if we throw, the cursor will\n+    // be closed and the page lock will be released.\n+    assertPagedFileStillMappedAndGetIdOfLastPage();\n+    pagedFile.incrementUsage(pageRef);\n+    pagedFile.setLastModifiedTxId(pageRef, versionContextSupplier.getVersionContext().committingTransactionId());\n+  }\n \n-    @Override\n-    public boolean shouldRetry()\n-    {\n-        // We take exclusive locks, so there's never a need to retry.\n-        return false;\n-    }\n+  @Override\n+  protected void convertPageFaultLock(long pageRef)\n+  {\n+    pagedFile.unlockExclusiveAndTakeWriteLock(pageRef);\n+  }\n+\n+  @Override\n+  public boolean shouldRetry()\n+  {\n+    // We take exclusive locks, so there's never a need to retry.\n+    return false;\n+  }\n }\n",
            "diff_size": 134
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "85",
                    "column": "16",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "96",
                    "column": "49",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3258/MuninnWritePageCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3258/MuninnWritePageCursor.java\nindex 511bd4818bd..a1fbaafe3b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3258/MuninnWritePageCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3258/MuninnWritePageCursor.java\n@@ -51,7 +51,8 @@ final class MuninnWritePageCursor extends MuninnPageCursor\n                 pagedFile.unlockWrite( pinnedPageRef );\n             }\n         }\n-        clearPageCursorState();\n+\n+clearPageCursorState();\n     }\n \n     private void eagerlyFlushAndUnlockPage()\n@@ -80,7 +81,8 @@ final class MuninnWritePageCursor extends MuninnPageCursor\n         {\n             return false;\n         }\n-        if ( nextPageId > lastPageId )\n+\n+if ( nextPageId> lastPageId )\n         {\n             if ( noGrow )\n             {\n@@ -91,8 +93,7 @@ final class MuninnWritePageCursor extends MuninnPageCursor\n                 pagedFile.increaseLastPageIdTo( nextPageId );\n             }\n         }\n-        currentPageId = nextPageId;\n-        nextPageId++;\n+        currentPageId = nextPageId; nextPageId++;\n         pin( currentPageId, true );\n         return true;\n     }\n@@ -137,4 +138,4 @@ final class MuninnWritePageCursor extends MuninnPageCursor\n         // We take exclusive locks, so there's never a need to retry.\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}