{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 117).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final int OFFSET = 42;\n  private static final Integer LIMIT = 43;\n  private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n  private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n  private static final OrderBy ORDER_BY_2 = OrderBy.desc(\"p3\");\n  private static final List<OrderBy> ORDER_BY = ImmutableList.of(ORDER_BY_1, ORDER_BY_2);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/30/StructuredQueryTest.java\nindex b0d188cae16..2e5d9e41066 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/30/StructuredQueryTest.java\n@@ -41,7 +41,8 @@ public class StructuredQueryTest {\n   private static final int OFFSET = 42;\n   private static final Integer LIMIT = 43;\n   private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n-  private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n+\n+private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n   private static final OrderBy ORDER_BY_2 = OrderBy.desc(\"p3\");\n   private static final List<OrderBy> ORDER_BY = ImmutableList.of(ORDER_BY_1, ORDER_BY_2);\n   private static final Projection PROJECTION1 = Projection.property(\"p4\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/30/StructuredQueryTest.java\nindex b0d188cae16..4b6589efd72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/30/StructuredQueryTest.java\n@@ -40,7 +40,8 @@ public class StructuredQueryTest {\n   private static final Cursor END_CURSOR = Cursor.copyFrom(new byte[] {10});\n   private static final int OFFSET = 42;\n   private static final Integer LIMIT = 43;\n-  private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n+  private static final Filter FILTER =\n+      CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n   private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n   private static final OrderBy ORDER_BY_2 = OrderBy.desc(\"p3\");\n   private static final List<OrderBy> ORDER_BY = ImmutableList.of(ORDER_BY_1, ORDER_BY_2);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "column": "43",
                    "severity": "warning",
                    "message": "GenericWhitespace '>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/30/StructuredQueryTest.java\nindex b0d188cae16..3f32d72ac58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/30/StructuredQueryTest.java\n@@ -84,7 +84,7 @@ public class StructuredQueryTest {\n           .groupBy(GROUP_BY1, GROUP_BY2)\n           .build();\n \n-  @Test\n+@Test\n   public void testEntityQueryBuilder() {\n     compareBaseBuilderFields(ENTITY_QUERY);\n     assertTrue(ENTITY_QUERY.projection().isEmpty());\n@@ -120,12 +120,9 @@ public class StructuredQueryTest {\n \n   @Test\n   public void mergeFrom() {\n-    compareMergedQuery(\n-        ENTITY_QUERY, new EntityQuery.Builder().mergeFrom(ENTITY_QUERY.toPb()).build());\n+    compareMergedQuery(ENTITY_QUERY, new EntityQuery.Builder().mergeFrom(ENTITY_QUERY.toPb()).build());\n     compareMergedQuery(KEY_QUERY, new KeyQuery.Builder().mergeFrom(KEY_QUERY.toPb()).build());\n-    compareMergedQuery(\n-        PROJECTION_QUERY,\n-        new ProjectionEntityQuery.Builder().mergeFrom(PROJECTION_QUERY.toPb()).build());\n+    compareMergedQuery(PROJECTION_QUERY, new ProjectionEntityQuery.Builder().mergeFrom(PROJECTION_QUERY.toPb()).build());\n   }\n \n   private void compareMergedQuery(StructuredQuery<?> expected, StructuredQuery<?> actual) {\n@@ -142,13 +139,10 @@ public class StructuredQueryTest {\n \n   @Test\n   public void testToAndFromPb() {\n-    assertEquals(\n-        ENTITY_QUERY,\n+    assertEquals(ENTITY_QUERY,\n         StructuredQuery.fromPb(ResultType.ENTITY, ENTITY_QUERY.namespace(), ENTITY_QUERY.toPb()));\n-    assertEquals(\n-        KEY_QUERY, StructuredQuery.fromPb(ResultType.KEY, KEY_QUERY.namespace(), KEY_QUERY.toPb()));\n-    assertEquals(\n-        PROJECTION_QUERY,\n+    assertEquals(KEY_QUERY, StructuredQuery.fromPb(ResultType.KEY, KEY_QUERY.namespace(), KEY_QUERY.toPb()));\n+    assertEquals(PROJECTION_QUERY,\n         StructuredQuery.fromPb(\n             ResultType.PROJECTION_ENTITY, PROJECTION_QUERY.namespace(), PROJECTION_QUERY.toPb()));\n   }\n@@ -156,7 +150,7 @@ public class StructuredQueryTest {\n   @Test\n   public void testToBuilder() {\n     List<StructuredQuery<?>> queries =\n-        ImmutableList.<StructuredQuery<?>>of(ENTITY_QUERY, KEY_QUERY, PROJECTION_QUERY);\n+        ImmutableList.<StructuredQuery<?>> of(ENTITY_QUERY, KEY_QUERY, PROJECTION_QUERY);\n     for (StructuredQuery<?> query : queries) {\n       assertEquals(query, query.toBuilder().build());\n     }\n@@ -168,4 +162,4 @@ public class StructuredQueryTest {\n     assertFalse(ENTITY_QUERY.keyOnly());\n     assertFalse(PROJECTION_QUERY.keyOnly());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 331).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'StructuredQuery' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'StructuredQuery' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/30/StructuredQueryTest.java\nindex b0d188cae16..542829359dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/30/StructuredQueryTest.java\n@@ -27,17 +27,16 @@ import com.google.gcloud.datastore.StructuredQuery.Filter;\n import com.google.gcloud.datastore.StructuredQuery.OrderBy;\n import com.google.gcloud.datastore.StructuredQuery.Projection;\n import com.google.gcloud.datastore.StructuredQuery.PropertyFilter;\n-\n import org.junit.Test;\n-\n import java.util.List;\n \n+\n public class StructuredQueryTest {\n \n   private static final String NAMESPACE = \"ns\";\n   private static final String KIND = \"k\";\n-  private static final Cursor START_CURSOR = Cursor.copyFrom(new byte[] {1, 2});\n-  private static final Cursor END_CURSOR = Cursor.copyFrom(new byte[] {10});\n+  private static final Cursor START_CURSOR = Cursor.copyFrom(new byte[]{1, 2});\n+  private static final Cursor END_CURSOR = Cursor.copyFrom(new byte[]{10});\n   private static final int OFFSET = 42;\n   private static final Integer LIMIT = 43;\n   private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n@@ -50,39 +49,9 @@ public class StructuredQueryTest {\n   private static final String GROUP_BY1 = \"p6\";\n   private static final String GROUP_BY2 = \"p7\";\n   private static final List<String> GROUP_BY = ImmutableList.of(GROUP_BY1, GROUP_BY2);\n-  private static final EntityQuery ENTITY_QUERY = Query.entityQueryBuilder()\n-      .namespace(NAMESPACE)\n-      .kind(KIND)\n-      .startCursor(START_CURSOR)\n-      .endCursor(END_CURSOR)\n-      .offset(OFFSET)\n-      .limit(LIMIT)\n-      .filter(FILTER)\n-      .orderBy(ORDER_BY_1, ORDER_BY_2)\n-      .build();\n-  private static final KeyQuery KEY_QUERY = Query.keyQueryBuilder()\n-      .namespace(NAMESPACE)\n-      .kind(KIND)\n-      .startCursor(START_CURSOR)\n-      .endCursor(END_CURSOR)\n-      .offset(OFFSET)\n-      .limit(LIMIT)\n-      .filter(FILTER)\n-      .orderBy(ORDER_BY_1, ORDER_BY_2)\n-      .build();\n-  private static final ProjectionEntityQuery PROJECTION_QUERY =\n-      Query.projectionEntityQueryBuilder()\n-          .namespace(NAMESPACE)\n-          .kind(KIND)\n-          .startCursor(START_CURSOR)\n-          .endCursor(END_CURSOR)\n-          .offset(OFFSET)\n-          .limit(LIMIT)\n-          .filter(FILTER)\n-          .orderBy(ORDER_BY_1, ORDER_BY_2)\n-          .projection(PROJECTION1, PROJECTION2)\n-          .groupBy(GROUP_BY1, GROUP_BY2)\n-          .build();\n+  private static final EntityQuery ENTITY_QUERY = Query.entityQueryBuilder().namespace(NAMESPACE).kind(KIND).startCursor(START_CURSOR).endCursor(END_CURSOR).offset(OFFSET).limit(LIMIT).filter(FILTER).orderBy(ORDER_BY_1, ORDER_BY_2).build();\n+  private static final KeyQuery KEY_QUERY = Query.keyQueryBuilder().namespace(NAMESPACE).kind(KIND).startCursor(START_CURSOR).endCursor(END_CURSOR).offset(OFFSET).limit(LIMIT).filter(FILTER).orderBy(ORDER_BY_1, ORDER_BY_2).build();\n+  private static final ProjectionEntityQuery PROJECTION_QUERY = Query.projectionEntityQueryBuilder().namespace(NAMESPACE).kind(KIND).startCursor(START_CURSOR).endCursor(END_CURSOR).offset(OFFSET).limit(LIMIT).filter(FILTER).orderBy(ORDER_BY_1, ORDER_BY_2).projection(PROJECTION1, PROJECTION2).groupBy(GROUP_BY1, GROUP_BY2).build();\n \n   @Test\n   public void testEntityQueryBuilder() {\n@@ -94,9 +63,7 @@ public class StructuredQueryTest {\n   @Test\n   public void testKeyQueryBuilder() {\n     compareBaseBuilderFields(KEY_QUERY);\n-    assertEquals(\n-        ImmutableList.of(Projection.property(StructuredQuery.KEY_PROPERTY_NAME)),\n-        KEY_QUERY.projection());\n+    assertEquals(ImmutableList.of(Projection.property(StructuredQuery.KEY_PROPERTY_NAME)), KEY_QUERY.projection());\n     assertTrue(KEY_QUERY.groupBy().isEmpty());\n   }\n \n@@ -120,12 +87,9 @@ public class StructuredQueryTest {\n \n   @Test\n   public void mergeFrom() {\n-    compareMergedQuery(\n-        ENTITY_QUERY, new EntityQuery.Builder().mergeFrom(ENTITY_QUERY.toPb()).build());\n+    compareMergedQuery(ENTITY_QUERY, new EntityQuery.Builder().mergeFrom(ENTITY_QUERY.toPb()).build());\n     compareMergedQuery(KEY_QUERY, new KeyQuery.Builder().mergeFrom(KEY_QUERY.toPb()).build());\n-    compareMergedQuery(\n-        PROJECTION_QUERY,\n-        new ProjectionEntityQuery.Builder().mergeFrom(PROJECTION_QUERY.toPb()).build());\n+    compareMergedQuery(PROJECTION_QUERY, new ProjectionEntityQuery.Builder().mergeFrom(PROJECTION_QUERY.toPb()).build());\n   }\n \n   private void compareMergedQuery(StructuredQuery<?> expected, StructuredQuery<?> actual) {\n@@ -142,21 +106,16 @@ public class StructuredQueryTest {\n \n   @Test\n   public void testToAndFromPb() {\n-    assertEquals(\n-        ENTITY_QUERY,\n-        StructuredQuery.fromPb(ResultType.ENTITY, ENTITY_QUERY.namespace(), ENTITY_QUERY.toPb()));\n-    assertEquals(\n-        KEY_QUERY, StructuredQuery.fromPb(ResultType.KEY, KEY_QUERY.namespace(), KEY_QUERY.toPb()));\n-    assertEquals(\n-        PROJECTION_QUERY,\n-        StructuredQuery.fromPb(\n-            ResultType.PROJECTION_ENTITY, PROJECTION_QUERY.namespace(), PROJECTION_QUERY.toPb()));\n+    assertEquals(ENTITY_QUERY,\n+StructuredQuery.fromPb(ResultType.ENTITY, ENTITY_QUERY.namespace(), ENTITY_QUERY.toPb()));\n+    assertEquals(KEY_QUERY, StructuredQuery.fromPb(ResultType.KEY, KEY_QUERY.namespace(), KEY_QUERY.toPb()));\n+    assertEquals(PROJECTION_QUERY,\n+StructuredQuery.fromPb(ResultType.PROJECTION_ENTITY, PROJECTION_QUERY.namespace(), PROJECTION_QUERY.toPb()));\n   }\n \n   @Test\n   public void testToBuilder() {\n-    List<StructuredQuery<?>> queries =\n-        ImmutableList.<StructuredQuery<?>>of(ENTITY_QUERY, KEY_QUERY, PROJECTION_QUERY);\n+    List<StructuredQuery<?>> queries = ImmutableList.<StructuredQuery<?>>of(ENTITY_QUERY, KEY_QUERY, PROJECTION_QUERY);\n     for (StructuredQuery<?> query : queries) {\n       assertEquals(query, query.toBuilder().build());\n     }\n@@ -168,4 +127,4 @@ public class StructuredQueryTest {\n     assertFalse(ENTITY_QUERY.keyOnly());\n     assertFalse(PROJECTION_QUERY.keyOnly());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/30/StructuredQueryTest.java\nindex b0d188cae16..2e5d9e41066 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/30/StructuredQueryTest.java\n@@ -41,7 +41,8 @@ public class StructuredQueryTest {\n   private static final int OFFSET = 42;\n   private static final Integer LIMIT = 43;\n   private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n-  private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n+\n+private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n   private static final OrderBy ORDER_BY_2 = OrderBy.desc(\"p3\");\n   private static final List<OrderBy> ORDER_BY = ImmutableList.of(ORDER_BY_1, ORDER_BY_2);\n   private static final Projection PROJECTION1 = Projection.property(\"p4\");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/30/StructuredQueryTest.java\nindex b0d188cae16..aad9bc31a9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/30/StructuredQueryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/30/StructuredQueryTest.java\n@@ -40,7 +40,8 @@ public class StructuredQueryTest {\n   private static final Cursor END_CURSOR = Cursor.copyFrom(new byte[] {10});\n   private static final int OFFSET = 42;\n   private static final Integer LIMIT = 43;\n-  private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"));\n+  private static final Filter FILTER = CompositeFilter.and(PropertyFilter.gt(\"p1\", 10),PropertyFilter\n+  . eq(\"a\", \"v\"));\n   private static final OrderBy ORDER_BY_1 = OrderBy.asc(\"p2\");\n   private static final OrderBy ORDER_BY_2 = OrderBy.desc(\"p3\");\n   private static final List<OrderBy> ORDER_BY = ImmutableList.of(ORDER_BY_1, ORDER_BY_2);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}