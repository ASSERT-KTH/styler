{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3704",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "261",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "264",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "267",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "273",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3704/MethodSourceWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3704/MethodSourceWriter.java\nindex b3e5a8964ff..a5856f76be7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3704/MethodSourceWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3704/MethodSourceWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.source;\n \n import org.apache.commons.lang3.StringEscapeUtils;\n@@ -35,447 +36,444 @@ import org.neo4j.codegen.TypeReference;\n \n class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n {\n-    private static final Runnable BOTTOM = () -> { throw new IllegalStateException( \"Popped too many levels!\" ); };\n-    private static final Runnable LEVEL = () -> {};\n-    private static final String INDENTATION = \"    \";\n-    private final StringBuilder target;\n-    private final ClassSourceWriter classSourceWriter;\n-    private final Deque<Runnable> levels = new LinkedList<>();\n-\n-    MethodSourceWriter( StringBuilder target, ClassSourceWriter classSourceWriter )\n-    {\n-        this.target = target;\n-        this.classSourceWriter = classSourceWriter;\n-        this.levels.push( BOTTOM );\n-        this.levels.push( LEVEL );\n-    }\n-\n-    private StringBuilder indent()\n-    {\n-        for ( int level = this.levels.size(); level-- > 0; )\n-        {\n-            target.append( INDENTATION );\n-        }\n-        return target;\n-    }\n-\n-    private StringBuilder append( CharSequence text )\n-    {\n-        return target.append( text );\n-    }\n-\n-    @Override\n-    public void done()\n-    {\n-        if ( levels.size() != 1 )\n-        {\n-            throw new IllegalStateException( \"unbalanced blocks!\" );\n-        }\n-        classSourceWriter.append( target );\n-    }\n-\n-    @Override\n-    public void expression( Expression expression )\n-    {\n-        indent();\n-        expression.accept( this );\n-        target.append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void put( Expression target, FieldReference field, Expression value )\n-    {\n-        indent();\n-        target.accept( this );\n-        append( \".\" );\n-        append( field.name() );\n-        append( \" = \" );\n-        value.accept( this );\n-        append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void returns()\n-    {\n-        indent().append( \"return;\\n\" );\n-    }\n-\n-    @Override\n-    public void returns( Expression value )\n-    {\n-        indent().append( \"return \" );\n-        value.accept( this );\n-        append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void continues()\n-    {\n-        indent().append( \"continue;\\n\" );\n-    }\n-\n-    @Override\n-    public void declare( LocalVariable local )\n-    {\n-        indent().append( local.type().fullName() ).append( ' ' ).append( local.name() ).append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void assignVariableInScope( LocalVariable local, Expression value )\n-    {\n-        indent().append( local.name() ).append( \" = \" );\n-        value.accept( this );\n-        append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void assign( LocalVariable variable, Expression value )\n-    {\n-        indent().append( variable.type().fullName() ).append( ' ' ).append( variable.name() ).append( \" = \" );\n-        value.accept( this );\n-        append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void beginWhile( Expression test )\n-    {\n-        indent().append( \"while( \" );\n-        test.accept( this );\n-        append( \" )\\n\" );\n-        indent().append( \"{\\n\" );\n-        levels.push( LEVEL );\n-    }\n-\n-    @Override\n-    public void beginIf( Expression test )\n-    {\n-        indent().append( \"if ( \" );\n-        test.accept( this );\n-        append( \" )\\n\" );\n-        indent().append( \"{\\n\" );\n-        levels.push( LEVEL );\n-    }\n-\n-    @Override\n-    public void beginBlock()\n-    {\n-        indent().append( \"{\\n\" );\n-        levels.push( LEVEL );\n-    }\n-\n-    @Override\n-    public <T> void tryCatchBlock( Consumer<T> body, Consumer<T> handler, LocalVariable exception, T block )\n-    {\n-\n-        indent().append( \"try\\n\" );\n-        indent().append( \"{\\n\" );\n-        levels.push( LEVEL );\n-        body.accept( block );\n-        levels.pop();\n-        indent().append( \"}\\n\" );\n-        indent().append( \"catch ( \" )\n-                .append( exception.type().fullName() ).append( \" \" )\n-                .append( exception.name() )\n-                .append( \" )\\n\" );\n-        indent().append( \"{\\n\" );\n-        levels.push( LEVEL );\n-        handler.accept( block );\n-        levels.pop();\n-        indent().append( \"}\\n\" );\n-    }\n-\n-    @Override\n-    public void throwException( Expression exception )\n-    {\n-        indent().append( \"throw \" );\n-        exception.accept( this );\n-        append( \";\\n\" );\n-    }\n-\n-    @Override\n-    public void endBlock()\n-    {\n-        Runnable action = levels.pop();\n-        indent().append( \"}\\n\" );\n-        action.run();\n-    }\n-\n-    @Override\n-    public void invoke( Expression target, MethodReference method, Expression[] arguments )\n-    {\n-        target.accept( this );\n-        if ( !method.isConstructor() )\n-        {\n-            append( \".\" ).append( method.name() );\n-        }\n-        arglist( arguments );\n-    }\n-\n-    @Override\n-    public void invoke( MethodReference method, Expression[] arguments )\n-    {\n-        append( method.owner().fullName() ).append( '.' ).append( method.name() );\n-        arglist( arguments );\n-    }\n-\n-    private void arglist( Expression[] arguments )\n-    {\n-        append( \"(\" );\n-        String sep = \" \";\n-        for ( Expression argument : arguments )\n-        {\n-            append( sep );\n-            argument.accept( this );\n-            sep = \", \";\n-        }\n-        if ( sep.length() > 1 )\n-        {\n-            append( \" \" );\n-        }\n-        append( \")\" );\n-    }\n-\n-    @Override\n-    public void load( LocalVariable variable )\n-    {\n-        append( variable.name() );\n-    }\n-\n-    @Override\n-    public void getField( Expression target, FieldReference field )\n-    {\n-        target.accept( this );\n-        append( \".\" ).append( field.name() );\n-    }\n-\n-    @Override\n-    public void constant( Object value )\n-    {\n-        if ( value == null )\n-        {\n-            append( \"null\" );\n-        }\n-        else if ( value instanceof String )\n-        {\n-            append( \"\\\"\" ).append( StringEscapeUtils.escapeJava( (String) value ) ).append( '\"' );\n-        }\n-        else if ( value instanceof Integer )\n-        {\n-            append( value.toString() );\n-        }\n-        else if ( value instanceof Long )\n-        {\n-            append( value.toString() ).append( 'L' );\n-        }\n-        else if ( value instanceof Double )\n-        {\n-            append( value.toString() );\n-        }\n-        else if ( value instanceof Boolean )\n-        {\n-            append( value.toString() );\n-        }\n-        else\n-        {\n-            throw new UnsupportedOperationException( value.getClass() + \" constants\" );\n-        }\n-    }\n-\n-    @Override\n-    public void getStatic( FieldReference field )\n-    {\n-        append( field.owner().fullName() ).append( \".\" ).append( field.name() );\n-    }\n-\n-    @Override\n-    public void loadThis( String sourceName )\n-    {\n-        append( sourceName );\n-    }\n-\n-    @Override\n-    public void newInstance( TypeReference type )\n-    {\n-        append( \"new \" ).append( type.fullName() );\n-    }\n-\n-    @Override\n-    public void not( Expression expression )\n-    {\n-        append( \"!( \" );\n-        expression.accept( this );\n-        append( \" )\" );\n-    }\n-\n-    @Override\n-    public void ternary( Expression test, Expression onTrue, Expression onFalse )\n-    {\n-        append( \"((\" );\n-        test.accept( this );\n-        append( \") ? (\" );\n-        onTrue.accept( this );\n-        append( \") : (\" );\n-        onFalse.accept( this );\n-        append( \"))\" );\n-    }\n-\n-    @Override\n-    public void equal( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" == \" );\n-    }\n-\n-    @Override\n-    public void notEqual( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" != \" );\n-    }\n-\n-    @Override\n-    public void isNull( Expression expression )\n-    {\n-        expression.accept( this );\n-        append( \" == null\" );\n-    }\n-\n-    @Override\n-    public void notNull( Expression expression )\n-    {\n-        expression.accept( this );\n-        append( \" != null\" );\n-    }\n-\n-    @Override\n-    public void or( Expression... expressions )\n-    {\n-        boolOp( expressions, \" || \");\n-    }\n-\n-    @Override\n-    public void and( Expression... expressions )\n-    {\n-        boolOp( expressions, \" && \");\n-    }\n-\n-    private void boolOp( Expression[] expressions, String op )\n-    {\n-        String sep = \"\";\n-        for ( Expression expression : expressions )\n-        {\n-            append( sep );\n-            expression.accept( this );\n-            sep = op;\n-        }\n-    }\n-\n-    @Override\n-    public void add( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" + \" );\n-    }\n-\n-    @Override\n-    public void gt( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" > \" );\n-    }\n-\n-    @Override\n-    public void gte( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" >= \" );\n-    }\n-\n-    @Override\n-    public void lt( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" < \" );\n-    }\n-\n-    @Override\n-    public void lte( Expression lhs, Expression rhs )\n-    {\n-        binaryOperation( lhs, rhs, \" <= \" );\n-    }\n-\n-    @Override\n-    public void subtract( Expression lhs, Expression rhs )\n-    {\n-        lhs.accept( this );\n-        append( \" - \" );\n-        rhs.accept( this );\n-    }\n-\n-    @Override\n-    public void multiply( Expression lhs, Expression rhs )\n-    {\n-        lhs.accept( this );\n-        append( \" * \" );\n-        rhs.accept( this );\n-    }\n-\n-    private void div( Expression lhs, Expression rhs )\n-    {\n-        lhs.accept( this );\n-        append( \" / \" );\n-        rhs.accept( this );\n-    }\n-\n-    @Override\n-    public void cast( TypeReference type, Expression expression )\n-    {\n-        append( \"(\" );\n-        append( \"(\" ).append( type.fullName() ).append( \") \" );\n-        expression.accept( this );\n-        append( \")\" );\n-    }\n-\n-    @Override\n-    public void newArray( TypeReference type, Expression... constants )\n-    {\n-        append( \"new \" ).append( type.fullName() ).append( \"[]{\" );\n-        String sep = \"\";\n-        for ( Expression constant : constants )\n-        {\n-            append( sep );\n-            constant.accept( this );\n-            sep = \", \";\n-        }\n-        append( \"}\" );\n-    }\n-\n-    @Override\n-    public void longToDouble( Expression expression )\n-    {\n-        cast( TypeReference.typeReference( double.class ), expression );\n-    }\n-\n-    @Override\n-    public void pop( Expression expression )\n-    {\n-        expression.accept( this );\n-    }\n-\n-    @Override\n-    public void box( Expression expression )\n-    {\n-        //For source code we rely on autoboxing\n-        append( \"(/*box*/ \" );\n-        expression.accept( this );\n-        append( \")\" );\n-    }\n-\n-    @Override\n-    public void unbox( Expression expression )\n-    {\n-        //For source code we rely on autoboxing\n-        expression.accept( this );\n-    }\n-\n-    private void binaryOperation( Expression lhs, Expression rhs, String operator )\n-    {\n-        lhs.accept( this );\n-        append( operator );\n-        rhs.accept( this );\n-    }\n+  private static final Runnable BOTTOM = () -> {\n+    throw new IllegalStateException(\"Popped too many levels!\");\n+  };\n+  private static final Runnable LEVEL = () -> {\n+  };\n+  private static final String INDENTATION = \"    \";\n+  private final StringBuilder target;\n+  private final ClassSourceWriter classSourceWriter;\n+  private final Deque<Runnable> levels = new LinkedList<>();\n+\n+  MethodSourceWriter(StringBuilder target, ClassSourceWriter classSourceWriter)\n+  {\n+    this.target = target;\n+    this.classSourceWriter = classSourceWriter;\n+    this.levels.push(BOTTOM);\n+    this.levels.push(LEVEL);\n+  }\n+\n+  private StringBuilder indent()\n+  {\n+    for (int level = this.levels.size(); level-- > 0; )\n+    {\n+      target.append(INDENTATION);\n+    }\n+    return target;\n+  }\n+\n+  private StringBuilder append(CharSequence text)\n+  {\n+    return target.append(text);\n+  }\n+\n+  @Override\n+  public void done()\n+  {\n+    if (levels.size() != 1)\n+    {\n+      throw new IllegalStateException(\"unbalanced blocks!\");\n+    }\n+    classSourceWriter.append(target);\n+  }\n+\n+  @Override\n+  public void expression(Expression expression)\n+  {\n+    indent();\n+    expression.accept(this);\n+    target.append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void put(Expression target, FieldReference field, Expression value)\n+  {\n+    indent();\n+    target.accept(this);\n+    append(\".\");\n+    append(field.name());\n+    append(\" = \");\n+    value.accept(this);\n+    append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void returns()\n+  {\n+    indent().append(\"return;\\n\");\n+  }\n+\n+  @Override\n+  public void returns(Expression value)\n+  {\n+    indent().append(\"return \");\n+    value.accept(this);\n+    append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void continues()\n+  {\n+    indent().append(\"continue;\\n\");\n+  }\n+\n+  @Override\n+  public void declare(LocalVariable local)\n+  {\n+    indent().append(local.type().fullName()).append(' ').append(local.name()).append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void assignVariableInScope(LocalVariable local, Expression value)\n+  {\n+    indent().append(local.name()).append(\" = \");\n+    value.accept(this);\n+    append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void assign(LocalVariable variable, Expression value)\n+  {\n+    indent().append(variable.type().fullName()).append(' ').append(variable.name()).append(\" = \");\n+    value.accept(this);\n+    append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void beginWhile(Expression test)\n+  {\n+    indent().append(\"while( \");\n+    test.accept(this);\n+    append(\" )\\n\");\n+    indent().append(\"{\\n\");\n+    levels.push(LEVEL);\n+  }\n+\n+  @Override\n+  public void beginIf(Expression test)\n+  {\n+    indent().append(\"if ( \");\n+    test.accept(this);\n+    append(\" )\\n\");\n+    indent().append(\"{\\n\");\n+    levels.push(LEVEL);\n+  }\n+\n+  @Override\n+  public void beginBlock()\n+  {\n+    indent().append(\"{\\n\");\n+    levels.push(LEVEL);\n+  }\n+\n+  @Override\n+  public <T> void tryCatchBlock(Consumer<T> body, Consumer<T> handler, LocalVariable exception, T block)\n+  {\n+\n+    indent().append(\"try\\n\");\n+    indent().append(\"{\\n\");\n+    levels.push(LEVEL);\n+    body.accept(block);\n+    levels.pop();\n+    indent().append(\"}\\n\");\n+    indent().append(\"catch ( \")\n+        .append(exception.type().fullName()).append(\" \")\n+        .append(exception.name())\n+        .append(\" )\\n\");\n+    indent().append(\"{\\n\");\n+    levels.push(LEVEL);\n+    handler.accept(block);\n+    levels.pop();\n+    indent().append(\"}\\n\");\n+  }\n+\n+  @Override\n+  public void throwException(Expression exception)\n+  {\n+    indent().append(\"throw \");\n+    exception.accept(this);\n+    append(\";\\n\");\n+  }\n+\n+  @Override\n+  public void endBlock()\n+  {\n+    Runnable action = levels.pop();\n+    indent().append(\"}\\n\");\n+    action.run();\n+  }\n+\n+  @Override\n+  public void invoke(Expression target, MethodReference method, Expression[] arguments)\n+  {\n+    target.accept(this);\n+    if (!method.isConstructor())\n+    {\n+      append(\".\").append(method.name());\n+    }\n+    arglist(arguments);\n+  }\n+\n+  @Override\n+  public void invoke(MethodReference method, Expression[] arguments)\n+  {\n+    append(method.owner().fullName()).append('.').append(method.name());\n+    arglist(arguments);\n+  }\n+\n+  private void arglist(Expression[] arguments)\n+  {\n+    append(\"(\");\n+    String sep = \" \";\n+    for (Expression argument : arguments)\n+    {\n+      append(sep);\n+      argument.accept(this);\n+      sep = \", \";\n+    }\n+    if (sep.length() > 1)\n+    {\n+      append(\" \");\n+    }\n+    append(\")\");\n+  }\n+\n+  @Override\n+  public void load(LocalVariable variable)\n+  {\n+    append(variable.name());\n+  }\n+\n+  @Override\n+  public void getField(Expression target, FieldReference field)\n+  {\n+    target.accept(this);\n+    append(\".\").append(field.name());\n+  }\n+\n+  @Override\n+  public void constant(Object value)\n+  {\n+    if (value == null)\n+    {\n+      append(\"null\");\n+    } else if (value instanceof String)\n+    {\n+      append(\"\\\"\").append(StringEscapeUtils.escapeJava((String) value)).append('\"');\n+    } else if (value instanceof Integer)\n+    {\n+      append(value.toString());\n+    } else if (value instanceof Long)\n+    {\n+      append(value.toString()).append('L');\n+    } else if (value instanceof Double)\n+    {\n+      append(value.toString());\n+    } else if (value instanceof Boolean)\n+    {\n+      append(value.toString());\n+    } else\n+    {\n+      throw new UnsupportedOperationException(value.getClass() + \" constants\");\n+    }\n+  }\n+\n+  @Override\n+  public void getStatic(FieldReference field)\n+  {\n+    append(field.owner().fullName()).append(\".\").append(field.name());\n+  }\n+\n+  @Override\n+  public void loadThis(String sourceName)\n+  {\n+    append(sourceName);\n+  }\n+\n+  @Override\n+  public void newInstance(TypeReference type)\n+  {\n+    append(\"new \").append(type.fullName());\n+  }\n+\n+  @Override\n+  public void not(Expression expression)\n+  {\n+    append(\"!( \");\n+    expression.accept(this);\n+    append(\" )\");\n+  }\n+\n+  @Override\n+  public void ternary(Expression test, Expression onTrue, Expression onFalse)\n+  {\n+    append(\"((\");\n+    test.accept(this);\n+    append(\") ? (\");\n+    onTrue.accept(this);\n+    append(\") : (\");\n+    onFalse.accept(this);\n+    append(\"))\");\n+  }\n+\n+  @Override\n+  public void equal(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" == \");\n+  }\n+\n+  @Override\n+  public void notEqual(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" != \");\n+  }\n+\n+  @Override\n+  public void isNull(Expression expression)\n+  {\n+    expression.accept(this);\n+    append(\" == null\");\n+  }\n+\n+  @Override\n+  public void notNull(Expression expression)\n+  {\n+    expression.accept(this);\n+    append(\" != null\");\n+  }\n+\n+  @Override\n+  public void or(Expression... expressions)\n+  {\n+    boolOp(expressions, \" || \");\n+  }\n+\n+  @Override\n+  public void and(Expression... expressions)\n+  {\n+    boolOp(expressions, \" && \");\n+  }\n+\n+  private void boolOp(Expression[] expressions, String op)\n+  {\n+    String sep = \"\";\n+    for (Expression expression : expressions)\n+    {\n+      append(sep);\n+      expression.accept(this);\n+      sep = op;\n+    }\n+  }\n+\n+  @Override\n+  public void add(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" + \");\n+  }\n+\n+  @Override\n+  public void gt(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" > \");\n+  }\n+\n+  @Override\n+  public void gte(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" >= \");\n+  }\n+\n+  @Override\n+  public void lt(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" < \");\n+  }\n+\n+  @Override\n+  public void lte(Expression lhs, Expression rhs)\n+  {\n+    binaryOperation(lhs, rhs, \" <= \");\n+  }\n+\n+  @Override\n+  public void subtract(Expression lhs, Expression rhs)\n+  {\n+    lhs.accept(this);\n+    append(\" - \");\n+    rhs.accept(this);\n+  }\n+\n+  @Override\n+  public void multiply(Expression lhs, Expression rhs)\n+  {\n+    lhs.accept(this);\n+    append(\" * \");\n+    rhs.accept(this);\n+  }\n+\n+  private void div(Expression lhs, Expression rhs)\n+  {\n+    lhs.accept(this);\n+    append(\" / \");\n+    rhs.accept(this);\n+  }\n+\n+  @Override\n+  public void cast(TypeReference type, Expression expression)\n+  {\n+    append(\"(\");\n+    append(\"(\").append(type.fullName()).append(\") \");\n+    expression.accept(this);\n+    append(\")\");\n+  }\n+\n+  @Override\n+  public void newArray(TypeReference type, Expression... constants)\n+  {\n+    append(\"new \").append(type.fullName()).append(\"[]{\");\n+    String sep = \"\";\n+    for (Expression constant : constants)\n+    {\n+      append(sep);\n+      constant.accept(this);\n+      sep = \", \";\n+    }\n+    append(\"}\");\n+  }\n+\n+  @Override\n+  public void longToDouble(Expression expression)\n+  {\n+    cast(TypeReference.typeReference(double.class), expression);\n+  }\n+\n+  @Override\n+  public void pop(Expression expression)\n+  {\n+    expression.accept(this);\n+  }\n+\n+  @Override\n+  public void box(Expression expression)\n+  {\n+    //For source code we rely on autoboxing\n+    append(\"(/*box*/ \");\n+    expression.accept(this);\n+    append(\")\");\n+  }\n+\n+  @Override\n+  public void unbox(Expression expression)\n+  {\n+    //For source code we rely on autoboxing\n+    expression.accept(this);\n+  }\n+\n+  private void binaryOperation(Expression lhs, Expression rhs, String operator)\n+  {\n+    lhs.accept(this);\n+    append(operator);\n+    rhs.accept(this);\n+  }\n }\n",
            "diff_size": 444
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3704/MethodSourceWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3704/MethodSourceWriter.java\nindex b3e5a8964ff..cea4ce9f79f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3704/MethodSourceWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3704/MethodSourceWriter.java\n@@ -35,9 +35,16 @@ import org.neo4j.codegen.TypeReference;\n \n class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n {\n-    private static final Runnable BOTTOM = () -> { throw new IllegalStateException( \"Popped too many levels!\" ); };\n-    private static final Runnable LEVEL = () -> {};\n-    private static final String INDENTATION = \"    \";\n+    private static final Runnable BOTTOM = () ->\n+{\n+    throw new IllegalStateException( \"Popped too many levels!\" );\n+    };\n+\n+private static final Runnable LEVEL = () ->\n+{\n+};\n+\n+private static final String INDENTATION = \"    \";\n     private final StringBuilder target;\n     private final ClassSourceWriter classSourceWriter;\n     private final Deque<Runnable> levels = new LinkedList<>();\n@@ -56,7 +63,8 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n         {\n             target.append( INDENTATION );\n         }\n-        return target;\n+\n+return target;\n     }\n \n     private StringBuilder append( CharSequence text )\n@@ -166,18 +174,14 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n     @Override\n     public <T> void tryCatchBlock( Consumer<T> body, Consumer<T> handler, LocalVariable exception, T block )\n     {\n-\n-        indent().append( \"try\\n\" );\n+    indent().append( \"try\\n\" );\n         indent().append( \"{\\n\" );\n         levels.push( LEVEL );\n         body.accept( block );\n         levels.pop();\n         indent().append( \"}\\n\" );\n-        indent().append( \"catch ( \" )\n-                .append( exception.type().fullName() ).append( \" \" )\n-                .append( exception.name() )\n-                .append( \" )\\n\" );\n-        indent().append( \"{\\n\" );\n+        indent().append( \"catch ( \" ).append( exception.type().fullName() ).append( \" \" ).append( exception.name() ).append( \" )\\n\" );\n+indent().append( \"{\\n\" );\n         levels.push( LEVEL );\n         handler.accept( block );\n         levels.pop();\n@@ -208,7 +212,8 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n         {\n             append( \".\" ).append( method.name() );\n         }\n-        arglist( arguments );\n+\n+arglist( arguments );\n     }\n \n     @Override\n@@ -228,11 +233,13 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n             argument.accept( this );\n             sep = \", \";\n         }\n-        if ( sep.length() > 1 )\n+\n+if ( sep.length() > 1 )\n         {\n             append( \" \" );\n         }\n-        append( \")\" );\n+\n+append( \")\" );\n     }\n \n     @Override\n@@ -348,13 +355,13 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n     @Override\n     public void or( Expression... expressions )\n     {\n-        boolOp( expressions, \" || \");\n+        boolOp( expressions, \" || \" );\n     }\n \n     @Override\n     public void and( Expression... expressions )\n     {\n-        boolOp( expressions, \" && \");\n+        boolOp( expressions, \" && \" );\n     }\n \n     private void boolOp( Expression[] expressions, String op )\n@@ -441,7 +448,8 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n             constant.accept( this );\n             sep = \", \";\n         }\n-        append( \"}\" );\n+\n+append( \"}\" );\n     }\n \n     @Override\n@@ -478,4 +486,4 @@ class MethodSourceWriter implements MethodEmitter, ExpressionVisitor\n         append( operator );\n         rhs.accept( this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}