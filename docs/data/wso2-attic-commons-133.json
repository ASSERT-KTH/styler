{
    "project_name": "wso2-attic-commons",
    "error_id": "133",
    "information": {
        "errors": [
            {
                "line": "85",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 147).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    WSDLDocument rootdoc = new WSDLDocument(documentBaseURI, defEl, 0, messagegenerator, wsdlvalinfo);\n    String targetNamespace = rootdoc.getDefinition().getTargetNamespace();\n    ImportHolder rootImport = new ImportHolder(targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator, wsdlvalinfo);\n    rootImport.createWSDLImport(rootdoc);\n    parsedImports.add(rootImport);\n    List rootList = new ArrayList();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/133/WSDLReaderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/133/WSDLReaderImpl.java\nindex 797072f0e22..5af84e9186f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/133/WSDLReaderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/133/WSDLReaderImpl.java\n@@ -82,7 +82,8 @@ public class WSDLReaderImpl\n \n     WSDLDocument rootdoc = new WSDLDocument(documentBaseURI, defEl, 0, messagegenerator, wsdlvalinfo);\n     String targetNamespace = rootdoc.getDefinition().getTargetNamespace();\n-    ImportHolder rootImport = new ImportHolder(targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator, wsdlvalinfo);\n+    ImportHolder rootImport = new ImportHolder(\n+            targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator, wsdlvalinfo);\n     rootImport.createWSDLImport(rootdoc);\n     parsedImports.add(rootImport);\n     List rootList = new ArrayList();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/133/WSDLReaderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/133/WSDLReaderImpl.java\nindex 797072f0e22..0f4c6d04285 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/133/WSDLReaderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/133/WSDLReaderImpl.java\n@@ -4,7 +4,7 @@\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n@@ -43,36 +43,33 @@ import com.ibm.wsdl.util.StringUtils;\n \n /**\n  * A WSDL reader that supports cyclic WSDL imports, schema imports and inline schemas.\n- * This reader is based on the WSDLReaderImpl from WSDL4J. \n+ * This reader is based on the WSDLReaderImpl from WSDL4J.\n  */\n-public class WSDLReaderImpl\n-{\n+public class WSDLReaderImpl {\n   protected MessageGenerator messagegenerator;\n   protected IWSDL11ValidationInfo wsdlvalinfo;\n-  \n+\n   /**\n    * Constructor.\n-   * \n+   *\n    * @param wsdlvalinfo The WSDL 1.1 validation info object to use.\n    */\n-  public WSDLReaderImpl(IWSDL11ValidationInfo wsdlvalinfo)\n-  {\n+  public WSDLReaderImpl(IWSDL11ValidationInfo wsdlvalinfo) {\n     this.wsdlvalinfo = wsdlvalinfo;\n   }\n-  \n+\n   /**\n-   * Parse the root document. This method will find all imports and parse them as \n+   * Parse the root document. This method will find all imports and parse them as\n    * well creating a WSDLDocument for each unique WSDL file. This method supports\n    * cyclic WSDL import statements such that file A can import file B and file B\n    * can import file A.\n-   * \n+   *\n    * @param documentBaseURI The base URI of the root document.\n-   * @param defEl The definition element of the root document.\n+   * @param defEl           The definition element of the root document.\n    * @return An array of WSDLDocuments containing all of the unique files in the description.\n    * @throws WSDLException\n    */\n-  protected WSDLDocument[] parseDocument(String documentBaseURI, Element defEl) throws WSDLException\n-  {\n+  protected WSDLDocument[] parseDocument(String documentBaseURI, Element defEl) throws WSDLException {\n     int initialImportArraySize = 20;\n     List[] filesAtDepth = new ArrayList[initialImportArraySize];\n     Map filesImporting = new Hashtable();\n@@ -82,7 +79,9 @@ public class WSDLReaderImpl\n \n     WSDLDocument rootdoc = new WSDLDocument(documentBaseURI, defEl, 0, messagegenerator, wsdlvalinfo);\n     String targetNamespace = rootdoc.getDefinition().getTargetNamespace();\n-    ImportHolder rootImport = new ImportHolder(targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator, wsdlvalinfo);\n+    ImportHolder rootImport =\n+      new ImportHolder(targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator,\n+        wsdlvalinfo);\n     rootImport.createWSDLImport(rootdoc);\n     parsedImports.add(rootImport);\n     List rootList = new ArrayList();\n@@ -92,63 +91,54 @@ public class WSDLReaderImpl\n     importsToParse.addAll(rootdoc.getImports());\n     Set imps = rootdoc.getImports();\n     Iterator impIter = imps.iterator();\n-    while(impIter.hasNext())\n-    {\n-      ImportHolder imp = (ImportHolder)impIter.next();\n+    while (impIter.hasNext()) {\n+      ImportHolder imp = (ImportHolder) impIter.next();\n       List tempList = new ArrayList();\n       tempList.add(imp.getImportingDocument());\n       filesImporting.put(imp.getLocation(), tempList);\n     }\n-    \n-    while(!importsToParse.isEmpty())\n-    {\n-      ImportHolder imp = (ImportHolder)importsToParse.first();\n+\n+    while (!importsToParse.isEmpty()) {\n+      ImportHolder imp = (ImportHolder) importsToParse.first();\n       // It's important to initialize the import here so each import\n       // is only created once. In the case of reciprical imports this\n       // avoids an infinite loop.\n       imp.initialize();\n       WSDLDocument impDoc = imp.getWSDLDocument();\n-      \n+\n       importsToParse.remove(imp);\n-      \n+\n       parsedImports.add(imp);\n-      \n+\n       // Add new imports to the list of imports to parse.\n       // Remove all the imports that have already been parsed.\n-      if(impDoc != null)\n-      {\n+      if (impDoc != null) {\n         // Increate import array if necessary.\n-        if(imp.getDepth() >= initialImportArraySize)\n-        {\n+        if (imp.getDepth() >= initialImportArraySize) {\n           List[] tempArray = new List[filesAtDepth.length + initialImportArraySize];\n           System.arraycopy(filesAtDepth, 0, tempArray, 0, filesAtDepth.length);\n           filesAtDepth = tempArray;\n         }\n         // Create the list for the depth if necessary.\n         int impDepth = imp.getDepth();\n-        if(filesAtDepth[impDepth] == null)\n-        {\n-          if(maxdepth < impDepth)\n-          {\n+        if (filesAtDepth[impDepth] == null) {\n+          if (maxdepth < impDepth) {\n             maxdepth = impDepth;\n           }\n           filesAtDepth[impDepth] = new ArrayList();\n         }\n         filesAtDepth[imp.getDepth()].add(impDoc);\n-        \n+\n         Set imports = impDoc.getImports();\n-        ImportHolder[] importsArray = (ImportHolder[])imports.toArray(new ImportHolder[imports.size()]);\n-        for(int i = 0; i < importsArray.length; i++)\n-        {\n+        ImportHolder[] importsArray = (ImportHolder[]) imports.toArray(new ImportHolder[imports.size()]);\n+        for (int i = 0; i < importsArray.length; i++) {\n           ImportHolder ih = importsArray[i];\n           // If already parsed, add the definition importing this file to the list.\n-          if(filesImporting.containsKey(ih.getLocation()))\n-          {\n-            ((List)filesImporting.get(ih.getLocation())).add(ih.getImportingDocument());\n+          if (filesImporting.containsKey(ih.getLocation())) {\n+            ((List) filesImporting.get(ih.getLocation())).add(ih.getImportingDocument());\n           }\n           // Otherwise add it to the list to parse.\n-          else\n-          {\n+          else {\n             // Add this import to the list of files importing list.\n             List tempList = new ArrayList();\n             tempList.add(ih.getImportingDocument());\n@@ -158,165 +148,139 @@ public class WSDLReaderImpl\n         }\n       }\n     }\n-    \n+\n     // Add all of the imports to the respective documents.\n     Iterator importElementsIter = parsedImports.iterator();\n-    while(importElementsIter.hasNext())\n-    {\n-      ImportHolder imp = (ImportHolder)importElementsIter.next();\n-      List files = (List)filesImporting.get(imp.getLocation());\n+    while (importElementsIter.hasNext()) {\n+      ImportHolder imp = (ImportHolder) importElementsIter.next();\n+      List files = (List) filesImporting.get(imp.getLocation());\n       Iterator filesIter = files.iterator();\n-      while(filesIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)filesIter.next();\n-        \n-        DefinitionImpl def = (DefinitionImpl)doc.getDefinition();\n+      while (filesIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) filesIter.next();\n+\n+        DefinitionImpl def = (DefinitionImpl) doc.getDefinition();\n         Import impElem = imp.getImport();\n-        if(impElem != null)\n-        {\n+        if (impElem != null) {\n           def.addImport(impElem);\n-          if(!imp.isWSDLFileImport())\n-          {\n+          if (!imp.isWSDLFileImport()) {\n             doc.addSchemas(imp.getSchemas());\n           }\n         }\n-        \n+\n       }\n     }\n-    \n+\n     // Parse the WSDL documents.\n     // Parse the Messages.\n-    for(int i = maxdepth; i >=0; i--)\n-    {\n+    for (int i = maxdepth; i >= 0; i--) {\n       List docs = filesAtDepth[i];\n       Iterator docsIter = docs.iterator();\n-      while(docsIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)docsIter.next();\n+      while (docsIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) docsIter.next();\n         doc.parseMessages();\n       }\n     }\n     // Parse the Porttypes.\n-    for(int i = maxdepth; i >=0; i--)\n-    {\n+    for (int i = maxdepth; i >= 0; i--) {\n       List docs = filesAtDepth[i];\n       Iterator docsIter = docs.iterator();\n-      while(docsIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)docsIter.next();\n+      while (docsIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) docsIter.next();\n         doc.parsePorttypes();\n       }\n     }\n     // Parse the Bindings.\n-    for(int i = maxdepth; i >=0; i--)\n-    {\n+    for (int i = maxdepth; i >= 0; i--) {\n       List docs = filesAtDepth[i];\n       Iterator docsIter = docs.iterator();\n-      while(docsIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)docsIter.next();\n+      while (docsIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) docsIter.next();\n         doc.parseBindings();\n       }\n     }\n     // Parse the Services.\n-    for(int i = maxdepth; i >=0; i--)\n-    {\n+    for (int i = maxdepth; i >= 0; i--) {\n       List docs = filesAtDepth[i];\n       Iterator docsIter = docs.iterator();\n-      while(docsIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)docsIter.next();\n+      while (docsIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) docsIter.next();\n         doc.parseServices();\n       }\n     }\n     // Parse the Extensibility Elements.\n-    for(int i = maxdepth; i >=0; i--)\n-    {\n+    for (int i = maxdepth; i >= 0; i--) {\n       List docs = filesAtDepth[i];\n       Iterator docsIter = docs.iterator();\n-      while(docsIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)docsIter.next();\n+      while (docsIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) docsIter.next();\n         doc.parseExtensibilityElements();\n       }\n     }\n-    \n+\n     List wsdlDocs = new ArrayList();\n-    for(int i = maxdepth; i >=0; i--)\n-    {\n+    for (int i = maxdepth; i >= 0; i--) {\n       List docs = filesAtDepth[i];\n       Iterator docsIter = docs.iterator();\n-      while(docsIter.hasNext())\n-      {\n-        WSDLDocument doc = (WSDLDocument)docsIter.next();\n+      while (docsIter.hasNext()) {\n+        WSDLDocument doc = (WSDLDocument) docsIter.next();\n         wsdlDocs.add(doc);\n       }\n     }\n-    \n-    return (WSDLDocument[])wsdlDocs.toArray(new WSDLDocument[wsdlDocs.size()]);\n+\n+    return (WSDLDocument[]) wsdlDocs.toArray(new WSDLDocument[wsdlDocs.size()]);\n   }\n-  \n+\n   /**\n    * Get the WSDL document.\n-   * \n+   *\n    * @param inputSource The source of the document being retrieved.\n-   * @param desc The description of the document being retrieved.\n+   * @param desc        The description of the document being retrieved.\n    * @return The WSDL document.\n    * @throws WSDLException\n    */\n-  public static Document getDocument(InputSource inputSource, String desc) throws WSDLException\n-  {\n-    try\n-    {\n-      StandardParserConfiguration configuration = new StandardParserConfiguration()\n-      {\n-        protected XMLErrorReporter createErrorReporter()\n-        {\n-          return new XMLErrorReporter()\n-          {\n-            public void reportError(String domain, String key, Object[] arguments, short severity) throws XNIException\n-            {\n+  public static Document getDocument(InputSource inputSource, String desc) throws WSDLException {\n+    try {\n+      StandardParserConfiguration configuration = new StandardParserConfiguration() {\n+        protected XMLErrorReporter createErrorReporter() {\n+          return new XMLErrorReporter() {\n+            public void reportError(String domain, String key, Object[] arguments, short severity) throws XNIException {\n               boolean reportError = true;\n-              if (key.equals(\"PrematureEOF\"))\n-               {         \n+              if (key.equals(\"PrematureEOF\")) {\n                 reportError = false;\n               }\n \n-              if (reportError)\n-               {\n+              if (reportError) {\n                 super.reportError(domain, key, arguments, severity);\n               }\n             }\n           };\n         }\n       };\n-      \n-      ErrorHandler errorHandler = new ErrorHandler()\n-      {\n-            /* (non-Javadoc)\n-           * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)\n-           */\n-          public void error(SAXParseException exception) throws SAXException\n-          {\n-            // TODO Auto-generated method stub\n \n-          }\n-          /* (non-Javadoc)\n-           * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)\n-           */\n-          public void fatalError(SAXParseException exception) throws SAXException\n-          {\n-            // TODO Auto-generated method stub\n+      ErrorHandler errorHandler = new ErrorHandler() {\n+        /* (non-Javadoc)\n+         * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)\n+         */\n+        public void error(SAXParseException exception) throws SAXException {\n+          // TODO Auto-generated method stub\n \n-          }\n-          /* (non-Javadoc)\n-           * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)\n-           */\n-          public void warning(SAXParseException exception) throws SAXException\n-          {\n-            // TODO Auto-generated method stub\n+        }\n \n-          }\n+        /* (non-Javadoc)\n+         * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)\n+         */\n+        public void fatalError(SAXParseException exception) throws SAXException {\n+          // TODO Auto-generated method stub\n+\n+        }\n+\n+        /* (non-Javadoc)\n+         * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)\n+         */\n+        public void warning(SAXParseException exception) throws SAXException {\n+          // TODO Auto-generated method stub\n+\n+        }\n       };\n \n       DOMParser builder = new LineNumberDOMParser(configuration);\n@@ -325,25 +289,21 @@ public class WSDLReaderImpl\n       Document doc = builder.getDocument();\n \n       return doc;\n-    }\n-    catch (Throwable t)\n-    {\n+    } catch (Throwable t) {\n       throw new WSDLException(WSDLException.PARSER_ERROR, \"Problem parsing '\" + desc + \"'.\", t);\n     }\n   }\n \n   /**\n    * Read a WSDL document using a context URI and file URI.\n-   * \n+   *\n    * @param contextURI The context URI to use.\n-   * @param wsdlURI The WSDL URI to use.\n+   * @param wsdlURI    The WSDL URI to use.\n    * @return An array of WSDLDocuments.\n    * @throws WSDLException\n    */\n-  public WSDLDocument[] readWSDL(String contextURI, String wsdlURI) throws WSDLException\n-  {\n-    try\n-    {\n+  public WSDLDocument[] readWSDL(String contextURI, String wsdlURI) throws WSDLException {\n+    try {\n       URL contextURL = (contextURI != null) ? StringUtils.getURL(null, contextURI) : null;\n       URL url = StringUtils.getURL(contextURL, wsdlURI);\n       InputStream reader = StringUtils.getContentAsInputStream(url);\n@@ -352,18 +312,13 @@ public class WSDLReaderImpl\n       reader.close();\n       WSDLDocument[] wsdlDocs = null;\n       // only parse the document if it isn't empty\n-      if(doc.getDocumentElement() != null)\n-       {      \n+      if (doc.getDocumentElement() != null) {\n         wsdlDocs = readWSDL(url.toString(), doc);\n       }\n       return wsdlDocs;\n-    }\n-    catch (WSDLException e)\n-    {\n+    } catch (WSDLException e) {\n       throw e;\n-    }\n-    catch (Throwable t)\n-    {\n+    } catch (Throwable t) {\n       throw new WSDLException(\n         WSDLException.OTHER_ERROR,\n         \"Unable to resolve imported document at '\" + wsdlURI + \"'.\",\n@@ -373,14 +328,13 @@ public class WSDLReaderImpl\n \n   /**\n    * Set the messagegenerator for the reader.\n-   * \n+   *\n    * @param mg The message generator to set.\n    */\n-  public void setMessageGenerator(MessageGenerator mg)\n-  {\n+  public void setMessageGenerator(MessageGenerator mg) {\n     messagegenerator = mg;\n   }\n-  \n+\n   /**\n    * Read the WSDL document accessible via the specified\n    * URI into a WSDL definition.\n@@ -388,23 +342,21 @@ public class WSDLReaderImpl\n    * @param wsdlURI A URI pointing to a WSDL file.\n    * @return An array of WSDLDocuments.\n    */\n-  public WSDLDocument[] readWSDL(String wsdlURI) throws WSDLException\n-  {\n+  public WSDLDocument[] readWSDL(String wsdlURI) throws WSDLException {\n     return readWSDL(null, wsdlURI);\n   }\n \n   /**\n    * Read the WSDL document described by a URI and its definitions element.\n-   * \n-   * @param documentBaseURI The URI of the WSDL document.\n+   *\n+   * @param documentBaseURI    The URI of the WSDL document.\n    * @param definitionsElement The definitions element for the WSDL document.\n    * @return An array of WSDLDocuments.\n    * @throws WSDLException\n    */\n   protected WSDLDocument[] readWSDL(String documentBaseURI,\n-                                Element definitionsElement)\n-                                  throws WSDLException\n-  {\n+                                    Element definitionsElement)\n+    throws WSDLException {\n     return parseDocument(documentBaseURI, definitionsElement);\n   }\n \n@@ -412,16 +364,14 @@ public class WSDLReaderImpl\n    * Read the specified WSDL document.\n    *\n    * @param documentBaseURI The document base URI.\n-   * @param wsdlDocument The WSDL document.\n+   * @param wsdlDocument    The WSDL document.\n    * @return An array of WSDLDocuments.\n    */\n   public WSDLDocument[] readWSDL(String documentBaseURI, Document wsdlDocument)\n-    throws WSDLException\n-  {\n+    throws WSDLException {\n     return readWSDL(documentBaseURI, wsdlDocument.getDocumentElement());\n   }\n-  \n-  \n-  \n+\n+\n }\n \n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/133/WSDLReaderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/133/WSDLReaderImpl.java\nindex 797072f0e22..5af84e9186f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/133/WSDLReaderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/133/WSDLReaderImpl.java\n@@ -82,7 +82,8 @@ public class WSDLReaderImpl\n \n     WSDLDocument rootdoc = new WSDLDocument(documentBaseURI, defEl, 0, messagegenerator, wsdlvalinfo);\n     String targetNamespace = rootdoc.getDefinition().getTargetNamespace();\n-    ImportHolder rootImport = new ImportHolder(targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator, wsdlvalinfo);\n+    ImportHolder rootImport = new ImportHolder(\n+            targetNamespace, documentBaseURI, documentBaseURI, rootdoc, 0, null, messagegenerator, wsdlvalinfo);\n     rootImport.createWSDLImport(rootdoc);\n     parsedImports.add(rootImport);\n     List rootList = new ArrayList();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}