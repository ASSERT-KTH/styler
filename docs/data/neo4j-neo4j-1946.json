{
    "project_name": "neo4j-neo4j",
    "error_id": "1946",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1946/CountsAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1946/CountsAccessor.java\nindex 80cfeb6b8fb..9cdf371960d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1946/CountsAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1946/CountsAccessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.counts;\n \n import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n@@ -27,20 +28,20 @@ import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n public interface CountsAccessor extends CountsVisitor.Visitable\n {\n     /**\n-     * @param labelId node label token id to get count for.\n+     * @param labelId      node label token id to get count for.\n      * @param cursorTracer underlying page cursor tracer\n      * @return the count for the label token id, i.e. number of nodes with that label.\n      */\n-    long nodeCount( int labelId, PageCursorTracer cursorTracer );\n+    long nodeCount(int labelId, PageCursorTracer cursorTracer);\n \n     /**\n      * @param startLabelId node label token id of start node.\n-     * @param typeId relationship type token id of relationship.\n-     * @param endLabelId node label token id of end node.\n+     * @param typeId       relationship type token id of relationship.\n+     * @param endLabelId   node label token id of end node.\n      * @param cursorTracer underlying page cursor tracer\n      * @return the count for the start/end node label and relationship type combination.\n      */\n-    long relationshipCount( int startLabelId, int typeId, int endLabelId, PageCursorTracer cursorTracer );\n+    long relationshipCount(int startLabelId, int typeId, int endLabelId, PageCursorTracer cursorTracer);\n \n     /**\n      * Updater of counts. Matches {@link CountsAccessor} and has the writing equivalence of those methods.\n@@ -49,19 +50,21 @@ public interface CountsAccessor extends CountsVisitor.Visitable\n     {\n         /**\n          * Increments (or decrements if delta is negative) the count for the node label token id.\n+         *\n          * @param labelId node label token id.\n-         * @param delta delta (positive or negative) to apply for the label.\n+         * @param delta   delta (positive or negative) to apply for the label.\n          */\n-        void incrementNodeCount( long labelId, long delta );\n+        void incrementNodeCount(long labelId, long delta);\n \n         /**\n          * Increments (or decrements if delta is negative) the count for the combination of the start/end labels and relationship type.\n+         *\n          * @param startLabelId node label token id of start node of relationship.\n-         * @param typeId relationship type token id of relationship.\n-         * @param endLabelId node label token id of end node of relationship.\n-         * @param delta delta (positive or negative) to apply for the label.\n+         * @param typeId       relationship type token id of relationship.\n+         * @param endLabelId   node label token id of end node of relationship.\n+         * @param delta        delta (positive or negative) to apply for the label.\n          */\n-        void incrementRelationshipCount( long startLabelId, int typeId, long endLabelId, long delta );\n+        void incrementRelationshipCount(long startLabelId, int typeId, long endLabelId, long delta);\n \n         /**\n          * Closes this updater and ensures that counts are applied as well as no more deltas can be applied after closed.\n@@ -73,12 +76,12 @@ public interface CountsAccessor extends CountsVisitor.Visitable\n     CountsAccessor.Updater NO_OP_UPDATER = new CountsAccessor.Updater()\n     {\n         @Override\n-        public void incrementNodeCount( long labelId, long delta )\n+        public void incrementNodeCount(long labelId, long delta)\n         {   // no-op\n         }\n \n         @Override\n-        public void incrementRelationshipCount( long startLabelId, int typeId, long endLabelId, long delta )\n+        public void incrementRelationshipCount(long startLabelId, int typeId, long endLabelId, long delta)\n         {   // no-op\n         }\n \n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}