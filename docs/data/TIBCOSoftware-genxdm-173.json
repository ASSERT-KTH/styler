{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "173",
    "information": {
        "errors": [
            {
                "line": "25",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class UnaryIterable<E> implements List<E>\n{\n\tprivate final E m_thing;\n\n\tpublic UnaryIterable(final E thing)\n\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/173/UnaryIterable.java\nindex 96c46ec515f..106dd1a9382 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/173/UnaryIterable.java\n@@ -22,7 +22,7 @@ import java.util.ListIterator;\n \n final class UnaryIterable<E> implements List<E>\n {\n-\tprivate final E m_thing;\n+private final E m_thing;\n \n \tpublic UnaryIterable(final E thing)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/173/UnaryIterable.java\nindex 96c46ec515f..aa937c6ca10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/173/UnaryIterable.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.Collection;\n@@ -20,161 +21,123 @@ import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n \n-final class UnaryIterable<E> implements List<E>\n-{\n-\tprivate final E m_thing;\n-\n-\tpublic UnaryIterable(final E thing)\n-\t{\n-\t\tm_thing = thing;\n-\t}\n-\n-\tpublic Iterator<E> iterator()\n-\t{\n-\t\treturn new UnaryIterator<E>(m_thing);\n-\t}\n-\n-\tpublic int size()\n-\t{\n-\t\treturn (null != m_thing) ? 1 : 0;\n-\t}\n-\n-\tpublic boolean isEmpty()\n-\t{\n-\t\treturn (null == m_thing);\n-\t}\n-\n-\tpublic E get(final int index)\n-\t{\n-\t\tif (null != m_thing)\n-\t\t{\n-\t\t\tif (0 == index)\n-\t\t\t{\n-\t\t\t\treturn m_thing;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tthrow new IndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tthrow new IndexOutOfBoundsException();\n-\t\t}\n-\t}\n-\n-\tpublic boolean contains(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"contains\");\n-\t}\n-\n-\tpublic Object[] toArray()\n-\t{\n-\t\tif (null != m_thing)\n-\t\t{\n-\t\t\treturn new Object[] { m_thing };\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn new Object[] {};\n-\t\t}\n-\t}\n-\n-\tpublic <T> T[] toArray(T[] a)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"toArray\");\n-\t}\n-\n-\tpublic boolean add(E e)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"add\");\n-\t}\n-\n-\tpublic boolean remove(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"remove\");\n-\t}\n-\n-\tpublic boolean containsAll(Collection<?> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"containsAll\");\n-\t}\n-\n-\tpublic boolean addAll(Collection<? extends E> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"addAll\");\n-\t}\n-\n-\tpublic boolean addAll(int index, Collection<? extends E> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"addAll\");\n-\t}\n-\n-\tpublic boolean removeAll(Collection<?> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"removeAll\");\n-\t}\n-\n-\tpublic boolean retainAll(Collection<?> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"retainAll\");\n-\t}\n-\n-\tpublic void clear()\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"clear\");\n-\t}\n-\n-\tpublic E set(int index, E element)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"set\");\n-\t}\n-\n-\tpublic void add(int index, E element)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"add\");\n-\t}\n-\n-\tpublic E remove(int index)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"remove\");\n-\t}\n-\n-\tpublic int indexOf(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"indexOf\");\n-\t}\n-\n-\tpublic int lastIndexOf(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"lastIndexOf\");\n-\t}\n-\n-\tpublic ListIterator<E> listIterator()\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"listIterator\");\n-\t}\n-\n-\tpublic ListIterator<E> listIterator(int index)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"listIterator\");\n-\t}\n-\n-\tpublic List<E> subList(int fromIndex, int toIndex)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"subList\");\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\tif (null != m_thing)\n-\t\t{\n-\t\t\treturn m_thing.toString();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn \"()\";\n-\t\t}\n-\t}\n+final class UnaryIterable<E> implements List<E> {\n+    private final E m_thing;\n+\n+    public UnaryIterable(final E thing) {\n+        m_thing = thing;\n+    }\n+\n+    public Iterator<E> iterator() {\n+        return new UnaryIterator<E>(m_thing);\n+    }\n+\n+    public int size() {\n+        return (null != m_thing) ? 1 : 0;\n+    }\n+\n+    public boolean isEmpty() {\n+        return (null == m_thing);\n+    }\n+\n+    public E get(final int index) {\n+        if (null != m_thing) {\n+            if (0 == index) {\n+                return m_thing;\n+            } else {\n+                throw new IndexOutOfBoundsException();\n+            }\n+        } else {\n+            throw new IndexOutOfBoundsException();\n+        }\n+    }\n+\n+    public boolean contains(Object o) {\n+        throw new UnsupportedOperationException(\"contains\");\n+    }\n+\n+    public Object[] toArray() {\n+        if (null != m_thing) {\n+            return new Object[] {m_thing};\n+        } else {\n+            return new Object[] {};\n+        }\n+    }\n+\n+    public <T> T[] toArray(T[] a) {\n+        throw new UnsupportedOperationException(\"toArray\");\n+    }\n+\n+    public boolean add(E e) {\n+        throw new UnsupportedOperationException(\"add\");\n+    }\n+\n+    public boolean remove(Object o) {\n+        throw new UnsupportedOperationException(\"remove\");\n+    }\n+\n+    public boolean containsAll(Collection<?> c) {\n+        throw new UnsupportedOperationException(\"containsAll\");\n+    }\n+\n+    public boolean addAll(Collection<? extends E> c) {\n+        throw new UnsupportedOperationException(\"addAll\");\n+    }\n+\n+    public boolean addAll(int index, Collection<? extends E> c) {\n+        throw new UnsupportedOperationException(\"addAll\");\n+    }\n+\n+    public boolean removeAll(Collection<?> c) {\n+        throw new UnsupportedOperationException(\"removeAll\");\n+    }\n+\n+    public boolean retainAll(Collection<?> c) {\n+        throw new UnsupportedOperationException(\"retainAll\");\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException(\"clear\");\n+    }\n+\n+    public E set(int index, E element) {\n+        throw new UnsupportedOperationException(\"set\");\n+    }\n+\n+    public void add(int index, E element) {\n+        throw new UnsupportedOperationException(\"add\");\n+    }\n+\n+    public E remove(int index) {\n+        throw new UnsupportedOperationException(\"remove\");\n+    }\n+\n+    public int indexOf(Object o) {\n+        throw new UnsupportedOperationException(\"indexOf\");\n+    }\n+\n+    public int lastIndexOf(Object o) {\n+        throw new UnsupportedOperationException(\"lastIndexOf\");\n+    }\n+\n+    public ListIterator<E> listIterator() {\n+        throw new UnsupportedOperationException(\"listIterator\");\n+    }\n+\n+    public ListIterator<E> listIterator(int index) {\n+        throw new UnsupportedOperationException(\"listIterator\");\n+    }\n+\n+    public List<E> subList(int fromIndex, int toIndex) {\n+        throw new UnsupportedOperationException(\"subList\");\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (null != m_thing) {\n+            return m_thing.toString();\n+        } else {\n+            return \"()\";\n+        }\n+    }\n }\n",
            "diff_size": 162
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/173/UnaryIterable.java\nindex 96c46ec515f..49d005f2c8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/173/UnaryIterable.java\n@@ -22,159 +22,159 @@ import java.util.ListIterator;\n \n final class UnaryIterable<E> implements List<E>\n {\n-\tprivate final E m_thing;\n+    private final E m_thing;\n \n \tpublic UnaryIterable(final E thing)\n \t{\n-\t\tm_thing = thing;\n-\t}\n+    m_thing = thing;\n+    }\n \n \tpublic Iterator<E> iterator()\n \t{\n-\t\treturn new UnaryIterator<E>(m_thing);\n-\t}\n+    return new UnaryIterator<E>(m_thing);\n+    }\n \n \tpublic int size()\n \t{\n-\t\treturn (null != m_thing) ? 1 : 0;\n-\t}\n+    return (null != m_thing) ? 1 : 0;\n+    }\n \n \tpublic boolean isEmpty()\n \t{\n-\t\treturn (null == m_thing);\n-\t}\n+    return (null == m_thing);\n+    }\n \n \tpublic E get(final int index)\n \t{\n-\t\tif (null != m_thing)\n+    if (null != m_thing)\n \t\t{\n-\t\t\tif (0 == index)\n+    if (0 == index)\n \t\t\t{\n-\t\t\t\treturn m_thing;\n-\t\t\t}\n+    return m_thing;\n+    }\n \t\t\telse\n \t\t\t{\n-\t\t\t\tthrow new IndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n+    throw new IndexOutOfBoundsException();\n+    }\n+    }\n \t\telse\n \t\t{\n-\t\t\tthrow new IndexOutOfBoundsException();\n-\t\t}\n-\t}\n+    throw new IndexOutOfBoundsException();\n+    }\n+    }\n \n \tpublic boolean contains(Object o)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"contains\");\n-\t}\n+    throw new UnsupportedOperationException(\"contains\");\n+    }\n \n \tpublic Object[] toArray()\n \t{\n-\t\tif (null != m_thing)\n+    if (null != m_thing)\n \t\t{\n-\t\t\treturn new Object[] { m_thing };\n-\t\t}\n+    return new Object[] { m_thing };\n+    }\n \t\telse\n \t\t{\n-\t\t\treturn new Object[] {};\n-\t\t}\n-\t}\n+    return new Object[] {};\n+    }\n+    }\n \n \tpublic <T> T[] toArray(T[] a)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"toArray\");\n-\t}\n+    throw new UnsupportedOperationException(\"toArray\");\n+    }\n \n \tpublic boolean add(E e)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"add\");\n-\t}\n+    throw new UnsupportedOperationException(\"add\");\n+    }\n \n \tpublic boolean remove(Object o)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"remove\");\n-\t}\n+    throw new UnsupportedOperationException(\"remove\");\n+    }\n \n \tpublic boolean containsAll(Collection<?> c)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"containsAll\");\n-\t}\n+    throw new UnsupportedOperationException(\"containsAll\");\n+    }\n \n \tpublic boolean addAll(Collection<? extends E> c)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"addAll\");\n-\t}\n+    throw new UnsupportedOperationException(\"addAll\");\n+    }\n \n \tpublic boolean addAll(int index, Collection<? extends E> c)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"addAll\");\n-\t}\n+    throw new UnsupportedOperationException(\"addAll\");\n+    }\n \n \tpublic boolean removeAll(Collection<?> c)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"removeAll\");\n-\t}\n+    throw new UnsupportedOperationException(\"removeAll\");\n+    }\n \n \tpublic boolean retainAll(Collection<?> c)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"retainAll\");\n-\t}\n+    throw new UnsupportedOperationException(\"retainAll\");\n+    }\n \n \tpublic void clear()\n \t{\n-\t\tthrow new UnsupportedOperationException(\"clear\");\n-\t}\n+    throw new UnsupportedOperationException(\"clear\");\n+    }\n \n \tpublic E set(int index, E element)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"set\");\n-\t}\n+    throw new UnsupportedOperationException(\"set\");\n+    }\n \n \tpublic void add(int index, E element)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"add\");\n-\t}\n+    throw new UnsupportedOperationException(\"add\");\n+    }\n \n \tpublic E remove(int index)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"remove\");\n-\t}\n+    throw new UnsupportedOperationException(\"remove\");\n+    }\n \n \tpublic int indexOf(Object o)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"indexOf\");\n-\t}\n+    throw new UnsupportedOperationException(\"indexOf\");\n+    }\n \n \tpublic int lastIndexOf(Object o)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"lastIndexOf\");\n-\t}\n+    throw new UnsupportedOperationException(\"lastIndexOf\");\n+    }\n \n \tpublic ListIterator<E> listIterator()\n \t{\n-\t\tthrow new UnsupportedOperationException(\"listIterator\");\n-\t}\n+    throw new UnsupportedOperationException(\"listIterator\");\n+    }\n \n \tpublic ListIterator<E> listIterator(int index)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"listIterator\");\n-\t}\n+    throw new UnsupportedOperationException(\"listIterator\");\n+    }\n \n \tpublic List<E> subList(int fromIndex, int toIndex)\n \t{\n-\t\tthrow new UnsupportedOperationException(\"subList\");\n-\t}\n+    throw new UnsupportedOperationException(\"subList\");\n+    }\n \n \t@Override\n \tpublic String toString()\n \t{\n-\t\tif (null != m_thing)\n+    if (null != m_thing)\n \t\t{\n-\t\t\treturn m_thing.toString();\n-\t\t}\n+    return m_thing.toString();\n+    }\n \t\telse\n \t\t{\n-\t\t\treturn \"()\";\n-\t\t}\n-\t}\n-}\n+    return \"()\";\n+    }\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/173/UnaryIterable.java\nindex 96c46ec515f..8b627330d8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/173/UnaryIterable.java\n@@ -22,159 +22,159 @@ import java.util.ListIterator;\n \n final class UnaryIterable<E> implements List<E>\n {\n-\tprivate final E m_thing;\n-\n-\tpublic UnaryIterable(final E thing)\n-\t{\n-\t\tm_thing = thing;\n-\t}\n-\n-\tpublic Iterator<E> iterator()\n-\t{\n-\t\treturn new UnaryIterator<E>(m_thing);\n-\t}\n-\n-\tpublic int size()\n-\t{\n-\t\treturn (null != m_thing) ? 1 : 0;\n-\t}\n-\n-\tpublic boolean isEmpty()\n-\t{\n-\t\treturn (null == m_thing);\n-\t}\n-\n-\tpublic E get(final int index)\n-\t{\n-\t\tif (null != m_thing)\n-\t\t{\n-\t\t\tif (0 == index)\n-\t\t\t{\n-\t\t\t\treturn m_thing;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tthrow new IndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tthrow new IndexOutOfBoundsException();\n-\t\t}\n-\t}\n-\n-\tpublic boolean contains(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"contains\");\n-\t}\n-\n-\tpublic Object[] toArray()\n-\t{\n-\t\tif (null != m_thing)\n-\t\t{\n-\t\t\treturn new Object[] { m_thing };\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn new Object[] {};\n-\t\t}\n-\t}\n-\n-\tpublic <T> T[] toArray(T[] a)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"toArray\");\n-\t}\n-\n-\tpublic boolean add(E e)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"add\");\n-\t}\n-\n-\tpublic boolean remove(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"remove\");\n-\t}\n-\n-\tpublic boolean containsAll(Collection<?> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"containsAll\");\n-\t}\n-\n-\tpublic boolean addAll(Collection<? extends E> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"addAll\");\n-\t}\n-\n-\tpublic boolean addAll(int index, Collection<? extends E> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"addAll\");\n-\t}\n-\n-\tpublic boolean removeAll(Collection<?> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"removeAll\");\n-\t}\n-\n-\tpublic boolean retainAll(Collection<?> c)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"retainAll\");\n-\t}\n-\n-\tpublic void clear()\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"clear\");\n-\t}\n-\n-\tpublic E set(int index, E element)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"set\");\n-\t}\n-\n-\tpublic void add(int index, E element)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"add\");\n-\t}\n-\n-\tpublic E remove(int index)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"remove\");\n-\t}\n-\n-\tpublic int indexOf(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"indexOf\");\n-\t}\n-\n-\tpublic int lastIndexOf(Object o)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"lastIndexOf\");\n-\t}\n-\n-\tpublic ListIterator<E> listIterator()\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"listIterator\");\n-\t}\n-\n-\tpublic ListIterator<E> listIterator(int index)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"listIterator\");\n-\t}\n-\n-\tpublic List<E> subList(int fromIndex, int toIndex)\n-\t{\n-\t\tthrow new UnsupportedOperationException(\"subList\");\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\tif (null != m_thing)\n-\t\t{\n-\t\t\treturn m_thing.toString();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn \"()\";\n-\t\t}\n-\t}\n-}\n+    private final E m_thing;\n+\n+    public UnaryIterable(final E thing)\n+    {\n+        m_thing = thing;\n+    }\n+\n+    public Iterator<E> iterator()\n+    {\n+        return new UnaryIterator<E>(m_thing);\n+    }\n+\n+    public int size()\n+    {\n+        return (null != m_thing) ? 1 : 0;\n+    }\n+\n+    public boolean isEmpty()\n+    {\n+        return (null == m_thing);\n+    }\n+\n+    public E get(final int index)\n+    {\n+        if (null != m_thing)\n+        {\n+            if (0 == index)\n+            {\n+                return m_thing;\n+            }\n+            else\n+            {\n+                throw new IndexOutOfBoundsException();\n+            }\n+        }\n+        else\n+        {\n+            throw new IndexOutOfBoundsException();\n+        }\n+    }\n+\n+    public boolean contains(Object o)\n+    {\n+        throw new UnsupportedOperationException(\"contains\");\n+    }\n+\n+    public Object[] toArray()\n+    {\n+        if (null != m_thing)\n+        {\n+            return new Object[] { m_thing };\n+        }\n+        else\n+        {\n+            return new Object[] {};\n+        }\n+    }\n+\n+    public <T> T[] toArray(T[] a)\n+    {\n+        throw new UnsupportedOperationException(\"toArray\");\n+    }\n+\n+    public boolean add(E e)\n+    {\n+        throw new UnsupportedOperationException(\"add\");\n+    }\n+\n+    public boolean remove(Object o)\n+    {\n+        throw new UnsupportedOperationException(\"remove\");\n+    }\n+\n+    public boolean containsAll(Collection<?> c)\n+    {\n+        throw new UnsupportedOperationException(\"containsAll\");\n+    }\n+\n+    public boolean addAll(Collection<? extends E> c)\n+    {\n+        throw new UnsupportedOperationException(\"addAll\");\n+    }\n+\n+    public boolean addAll(int index, Collection<? extends E> c)\n+    {\n+        throw new UnsupportedOperationException(\"addAll\");\n+    }\n+\n+    public boolean removeAll(Collection<?> c)\n+    {\n+        throw new UnsupportedOperationException(\"removeAll\");\n+    }\n+\n+    public boolean retainAll(Collection<?> c)\n+    {\n+        throw new UnsupportedOperationException(\"retainAll\");\n+    }\n+\n+    public void clear()\n+    {\n+        throw new UnsupportedOperationException(\"clear\");\n+    }\n+\n+    public E set(int index, E element)\n+    {\n+        throw new UnsupportedOperationException(\"set\");\n+    }\n+\n+    public void add(int index, E element)\n+    {\n+        throw new UnsupportedOperationException(\"add\");\n+    }\n+\n+    public E remove(int index)\n+    {\n+        throw new UnsupportedOperationException(\"remove\");\n+    }\n+\n+    public int indexOf(Object o)\n+    {\n+        throw new UnsupportedOperationException(\"indexOf\");\n+    }\n+\n+    public int lastIndexOf(Object o)\n+    {\n+        throw new UnsupportedOperationException(\"lastIndexOf\");\n+    }\n+\n+    public ListIterator<E> listIterator()\n+    {\n+        throw new UnsupportedOperationException(\"listIterator\");\n+    }\n+\n+    public ListIterator<E> listIterator(int index)\n+    {\n+        throw new UnsupportedOperationException(\"listIterator\");\n+    }\n+\n+    public List<E> subList(int fromIndex, int toIndex)\n+    {\n+        throw new UnsupportedOperationException(\"subList\");\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        if (null != m_thing)\n+        {\n+            return m_thing.toString();\n+        }\n+        else\n+        {\n+            return \"()\";\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 156
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/173/UnaryIterable.java\nindex 96c46ec515f..106dd1a9382 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/173/UnaryIterable.java\n@@ -22,7 +22,7 @@ import java.util.ListIterator;\n \n final class UnaryIterable<E> implements List<E>\n {\n-\tprivate final E m_thing;\n+private final E m_thing;\n \n \tpublic UnaryIterable(final E thing)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/173/UnaryIterable.java\nindex 96c46ec515f..d879e94eb75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/173/UnaryIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/173/UnaryIterable.java\n@@ -22,7 +22,7 @@ import java.util.ListIterator;\n \n final class UnaryIterable<E> implements List<E>\n {\n-\tprivate final E m_thing;\n+    private final E m_thing;\n \n \tpublic UnaryIterable(final E thing)\n \t{\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}