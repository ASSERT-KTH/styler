{
    "project_name": "Angel-ML-angel",
    "error_id": "709",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/709/GetColsFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/709/GetColsFunc.java\nindex 3127b17e9a0..05bf311655b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/709/GetColsFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/709/GetColsFunc.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.psf.columns;\n \n import com.tencent.angel.exception.AngelException;\n@@ -55,7 +54,7 @@ public class GetColsFunc extends GetFunc {\n \n     RowBasedPartition partition = (RowBasedPartition) psContext.getMatrixStorageManager()\n         .getPart(matId, partitionId);\n-    ServerRow[] splits = new ServerRow[rows.length];\n+ServerRow[] splits = new ServerRow[rows.length];\n     for (int i = 0; i < rows.length; i++) {\n       splits[i] = partition.getRow(rows[i]);\n     }\n@@ -190,4 +189,4 @@ public class GetColsFunc extends GetFunc {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/709/GetColsFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/709/GetColsFunc.java\nindex 3127b17e9a0..cec98eec0e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/709/GetColsFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/709/GetColsFunc.java\n@@ -28,7 +28,6 @@ import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetResult;\n import com.tencent.angel.ps.server.data.request.InitFunc;\n import com.tencent.angel.ps.storage.partition.RowBasedPartition;\n import com.tencent.angel.ps.storage.vector.*;\n-\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n@@ -52,19 +51,18 @@ public class GetColsFunc extends GetFunc {\n     int matId = param.getMatrixId();\n     int partitionId = param.getPartKey().getPartitionId();\n     Arrays.sort(rows);\n-\n-    RowBasedPartition partition = (RowBasedPartition) psContext.getMatrixStorageManager()\n-        .getPart(matId, partitionId);\n+    RowBasedPartition partition = (RowBasedPartition) psContext.getMatrixStorageManager().getPart(matId, partitionId);\n     ServerRow[] splits = new ServerRow[rows.length];\n     for (int i = 0; i < rows.length; i++) {\n       splits[i] = partition.getRow(rows[i]);\n     }\n-    Vector result = doGet(splits, cols, param.func);\n \n+    Vector result = doGet(splits, cols, param.func);\n     return new PartitionGetColsResult(rows, cols, result);\n   }\n \n-  private Vector doGet(ServerRow[] rows, long[] cols, InitFunc func) {\n+  private Vector doGet(\n+    ServerRow[] rows, long[] cols, InitFunc func) {\n     if (func != null) {\n       rows[0].startWrite();\n       try {\n@@ -82,7 +80,8 @@ public class GetColsFunc extends GetFunc {\n     }\n   }\n \n-  private Vector doGetLockFree(ServerRow[] rows, long[] cols, InitFunc func) {\n+  private Vector doGetLockFree(\n+    ServerRow[] rows, long[] cols, InitFunc func) {\n     if (rows[0] instanceof ServerIntDoubleRow) {\n       IntDoubleVector[] vectors = new IntDoubleVector[cols.length];\n       if (func != null) {\n@@ -102,62 +101,62 @@ public class GetColsFunc extends GetFunc {\n       }\n       return VFactory.compIntDoubleVector(cols.length, vectors, rows.length);\n     } else if (rows[0] instanceof ServerLongDoubleRow) {\n-      IntDoubleVector[] vectors = new IntDoubleVector[cols.length];\n-      if (func != null) {\n-        for (int i = 0; i < cols.length; i++) {\n-          vectors[i] = VFactory.denseDoubleVector(rows.length);\n-          for (int j = 0; j < rows.length; j++) {\n-            vectors[i].set(j, ((ServerLongDoubleRow) rows[j]).initAndGet(cols[i], func));\n-          }\n-        }\n-      } else {\n-        for (int i = 0; i < cols.length; i++) {\n-          vectors[i] = VFactory.denseDoubleVector(rows.length);\n-          for (int j = 0; j < rows.length; j++) {\n-            vectors[i].set(j, ((ServerLongDoubleRow) rows[j]).get(cols[i]));\n-          }\n-        }\n-      }\n-      return VFactory.compIntDoubleVector(cols.length, vectors, rows.length);\n+             IntDoubleVector[] vectors = new IntDoubleVector[cols.length];\n+             if (func != null) {\n+               for (int i = 0; i < cols.length; i++) {\n+                 vectors[i] = VFactory.denseDoubleVector(rows.length);\n+                 for (int j = 0; j < rows.length; j++) {\n+                   vectors[i].set(j, ((ServerLongDoubleRow) rows[j]).initAndGet(cols[i], func));\n+                 }\n+               }\n+             } else {\n+               for (int i = 0; i < cols.length; i++) {\n+                 vectors[i] = VFactory.denseDoubleVector(rows.length);\n+                 for (int j = 0; j < rows.length; j++) {\n+                   vectors[i].set(j, ((ServerLongDoubleRow) rows[j]).get(cols[i]));\n+                 }\n+               }\n+             }\n+             return VFactory.compIntDoubleVector(cols.length, vectors, rows.length);\n     } else if (rows[0] instanceof ServerIntFloatRow) {\n-      IntFloatVector[] vectors = new IntFloatVector[cols.length];\n-      if (func != null) {\n-        for (int i = 0; i < cols.length; i++) {\n-          vectors[i] = VFactory.denseFloatVector(rows.length);\n-          for (int j = 0; j < rows.length; j++) {\n-            vectors[i].set(j, ((ServerIntFloatRow) rows[j]).initAndGet((int) cols[i], func));\n-          }\n-        }\n-      } else {\n-        for (int i = 0; i < cols.length; i++) {\n-          vectors[i] = VFactory.denseFloatVector(rows.length);\n-          for (int j = 0; j < rows.length; j++) {\n-            vectors[i].set(j, ((ServerIntFloatRow) rows[j]).get((int) cols[i]));\n-          }\n-        }\n-      }\n-      return VFactory.compIntFloatVector(cols.length, vectors, rows.length);\n-    } else if (rows[0] instanceof ServerLongFloatRow) {\n-      IntFloatVector[] vectors = new IntFloatVector[cols.length];\n-      if (func != null) {\n-        for (int i = 0; i < cols.length; i++) {\n-          vectors[i] = VFactory.denseFloatVector(rows.length);\n-          for (int j = 0; j < rows.length; j++) {\n-            vectors[i].set(j, ((ServerLongFloatRow) rows[j]).initAndGet(cols[i], func));\n-          }\n-        }\n-      } else {\n-        for (int i = 0; i < cols.length; i++) {\n-          vectors[i] = VFactory.denseFloatVector(rows.length);\n-          for (int j = 0; j < rows.length; j++) {\n-            vectors[i].set(j, ((ServerLongFloatRow) rows[j]).get(cols[i]));\n-          }\n-        }\n-      }\n-      return VFactory.compIntFloatVector(cols.length, vectors, rows.length);\n-    } else {\n-      throw new AngelException(\"The rowType \" + rows[0].getRowType() + \" is not support!\");\n-    }\n+             IntFloatVector[] vectors = new IntFloatVector[cols.length];\n+             if (func != null) {\n+               for (int i = 0; i < cols.length; i++) {\n+                 vectors[i] = VFactory.denseFloatVector(rows.length);\n+                 for (int j = 0; j < rows.length; j++) {\n+                   vectors[i].set(j, ((ServerIntFloatRow) rows[j]).initAndGet((int) cols[i], func));\n+                 }\n+               }\n+             } else {\n+               for (int i = 0; i < cols.length; i++) {\n+                 vectors[i] = VFactory.denseFloatVector(rows.length);\n+                 for (int j = 0; j < rows.length; j++) {\n+                   vectors[i].set(j, ((ServerIntFloatRow) rows[j]).get((int) cols[i]));\n+                 }\n+               }\n+             }\n+             return VFactory.compIntFloatVector(cols.length, vectors, rows.length);\n+           } else if (rows[0] instanceof ServerLongFloatRow) {\n+                    IntFloatVector[] vectors = new IntFloatVector[cols.length];\n+                    if (func != null) {\n+                      for (int i = 0; i < cols.length; i++) {\n+                        vectors[i] = VFactory.denseFloatVector(rows.length);\n+                        for (int j = 0; j < rows.length; j++) {\n+                          vectors[i].set(j, ((ServerLongFloatRow) rows[j]).initAndGet(cols[i], func));\n+                        }\n+                      }\n+                    } else {\n+                      for (int i = 0; i < cols.length; i++) {\n+                        vectors[i] = VFactory.denseFloatVector(rows.length);\n+                        for (int j = 0; j < rows.length; j++) {\n+                          vectors[i].set(j, ((ServerLongFloatRow) rows[j]).get(cols[i]));\n+                        }\n+                      }\n+                    }\n+                    return VFactory.compIntFloatVector(cols.length, vectors, rows.length);\n+           } else {\n+             throw new AngelException(\"The rowType \" + rows[0].getRowType() + \" is not support!\");\n+           }\n   }\n \n   @Override\n@@ -175,19 +174,19 @@ public class GetColsFunc extends GetFunc {\n       }\n       return new GetColsResult(maps);\n     } else if (rr.vector instanceof CompIntFloatVector) {\n-      Map<Long, Vector> maps = new HashMap<>();\n-      for (PartitionGetResult r : partResults) {\n-        PartitionGetColsResult rrr = (PartitionGetColsResult) r;\n-        long[] cols = rrr.cols;\n-        CompIntFloatVector vector = (CompIntFloatVector) rrr.vector;\n-        for (int i = 0; i < cols.length; i++) {\n-          maps.put(cols[i], vector.getPartitions()[i]);\n-        }\n-      }\n-      return new GetColsResult(maps);\n+             Map<Long, Vector> maps = new HashMap<>();\n+             for (PartitionGetResult r : partResults) {\n+               PartitionGetColsResult rrr = (PartitionGetColsResult) r;\n+               long[] cols = rrr.cols;\n+               CompIntFloatVector vector = (CompIntFloatVector) rrr.vector;\n+               for (int i = 0; i < cols.length; i++) {\n+                 maps.put(cols[i], vector.getPartitions()[i]);\n+               }\n+             }\n+             return new GetColsResult(maps);\n     } else {\n       throw new AngelException(\"Data type should be double or float!\");\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 76
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}