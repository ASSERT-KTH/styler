{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2881",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "114",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "11",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "157",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "255",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2881/StoreCopyClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2881/StoreCopyClient.java\nindex 2a55093fe89..e4fe0e82dd6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2881/StoreCopyClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2881/StoreCopyClient.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.com.storecopy;\n \n import java.io.File;\n@@ -70,248 +71,245 @@ import static org.neo4j.kernel.impl.transaction.log.entry.LogHeaderWriter.writeL\n public class StoreCopyClient\n {\n \n-    /**\n-     * This is built as a pluggable interface to allow backup and HA to use this code independently of each other,\n-     * each implements it's own version of how to copy a store from a remote location.\n-     */\n-    public interface StoreCopyRequester\n-    {\n-        Response<?> copyStore( StoreWriter writer );\n+  /**\n+   * This is built as a pluggable interface to allow backup and HA to use this code independently of each other,\n+   * each implements it's own version of how to copy a store from a remote location.\n+   */\n+  public interface StoreCopyRequester\n+  {\n+    Response<?> copyStore(StoreWriter writer);\n \n-        void done();\n-    }\n+    void done();\n+  }\n \n-    private final File storeDir;\n-    private final Config config;\n-    private final Iterable<KernelExtensionFactory<?>> kernelExtensions;\n-    private final Log log;\n-    private final FileSystemAbstraction fs;\n-    private final PageCache pageCache;\n-    private final StoreCopyClientMonitor monitor;\n-    private final boolean forensics;\n-    private final FileMoveProvider fileMoveProvider;\n-\n-    public StoreCopyClient( File storeDir, Config config, Iterable<KernelExtensionFactory<?>> kernelExtensions, LogProvider logProvider,\n-            FileSystemAbstraction fs, PageCache pageCache, StoreCopyClientMonitor monitor, boolean forensics )\n-    {\n-        this( storeDir, config, kernelExtensions, logProvider, fs, pageCache, monitor, forensics, new FileMoveProvider( pageCache,\n-                fs ) );\n-    }\n+  private final File storeDir;\n+  private final Config config;\n+  private final Iterable<KernelExtensionFactory<?>> kernelExtensions;\n+  private final Log log;\n+  private final FileSystemAbstraction fs;\n+  private final PageCache pageCache;\n+  private final StoreCopyClientMonitor monitor;\n+  private final boolean forensics;\n+  private final FileMoveProvider fileMoveProvider;\n \n-    public StoreCopyClient( File storeDir, Config config, Iterable<KernelExtensionFactory<?>> kernelExtensions, LogProvider logProvider,\n-            FileSystemAbstraction fs, PageCache pageCache, StoreCopyClientMonitor monitor, boolean forensics, FileMoveProvider fileMoveProvider )\n-    {\n-        this.storeDir = storeDir;\n-        this.config = config;\n-        this.kernelExtensions = kernelExtensions;\n-        this.log = logProvider.getLog( getClass() );\n-        this.fs = fs;\n-        this.pageCache = pageCache;\n-        this.monitor = monitor;\n-        this.forensics = forensics;\n-        this.fileMoveProvider = fileMoveProvider;\n-    }\n+  public StoreCopyClient(File storeDir, Config config, Iterable<KernelExtensionFactory<?>> kernelExtensions, LogProvider logProvider,\n+                         FileSystemAbstraction fs, PageCache pageCache, StoreCopyClientMonitor monitor, boolean forensics)\n+  {\n+    this(storeDir, config, kernelExtensions, logProvider, fs, pageCache, monitor, forensics, new FileMoveProvider(pageCache,\n+        fs));\n+  }\n+\n+  public StoreCopyClient(File storeDir, Config config, Iterable<KernelExtensionFactory<?>> kernelExtensions, LogProvider logProvider,\n+                         FileSystemAbstraction fs, PageCache pageCache, StoreCopyClientMonitor monitor, boolean forensics, FileMoveProvider fileMoveProvider)\n+  {\n+    this.storeDir = storeDir;\n+    this.config = config;\n+    this.kernelExtensions = kernelExtensions;\n+    this.log = logProvider.getLog(getClass());\n+    this.fs = fs;\n+    this.pageCache = pageCache;\n+    this.monitor = monitor;\n+    this.forensics = forensics;\n+    this.fileMoveProvider = fileMoveProvider;\n+  }\n \n-    public void copyStore( StoreCopyRequester requester, CancellationRequest cancellationRequest, MoveAfterCopy moveAfterCopy ) throws Exception\n+  public void copyStore(StoreCopyRequester requester, CancellationRequest cancellationRequest, MoveAfterCopy moveAfterCopy) throws Exception\n+  {\n+    // Create a temp directory (or clean if present)\n+    File tempStore = new File(storeDir, StoreUtil.TEMP_COPY_DIRECTORY_NAME);\n+    try\n     {\n-        // Create a temp directory (or clean if present)\n-        File tempStore = new File( storeDir, StoreUtil.TEMP_COPY_DIRECTORY_NAME );\n-        try\n-        {\n-            // The ToFileStoreWriter will add FileMoveActions for *RecordStores* that have to be\n-            // *moved via the PageCache*!\n-            // We have to move these files via the page cache, because that is the *only way* that we can communicate\n-            // with any block storage that might have been configured for this instance.\n-            List<FileMoveAction> moveActions = new ArrayList<>();\n-            cleanDirectory( tempStore );\n-\n-            // Request store files and transactions that will need recovery\n-            monitor.startReceivingStoreFiles();\n-            ToFileStoreWriter storeWriter = new ToFileStoreWriter( tempStore, fs, monitor, pageCache, moveActions );\n-            try ( Response<?> response = requester.copyStore( decorateWithProgressIndicator( storeWriter ) ) )\n-            {\n-                monitor.finishReceivingStoreFiles();\n-                // Update highest archived log id\n-                // Write transactions that happened during the copy to the currently active logical log\n-                writeTransactionsToActiveLogFile( tempStore, response );\n-            }\n-            finally\n-            {\n-                requester.done();\n-            }\n+      // The ToFileStoreWriter will add FileMoveActions for *RecordStores* that have to be\n+      // *moved via the PageCache*!\n+      // We have to move these files via the page cache, because that is the *only way* that we can communicate\n+      // with any block storage that might have been configured for this instance.\n+      List<FileMoveAction> moveActions = new ArrayList<>();\n+      cleanDirectory(tempStore);\n \n-            // This is a good place to check if the switch has been cancelled\n-            checkCancellation( cancellationRequest, tempStore );\n+      // Request store files and transactions that will need recovery\n+      monitor.startReceivingStoreFiles();\n+      ToFileStoreWriter storeWriter = new ToFileStoreWriter(tempStore, fs, monitor, pageCache, moveActions);\n+      try (Response<?> response = requester.copyStore(decorateWithProgressIndicator(storeWriter)))\n+      {\n+        monitor.finishReceivingStoreFiles();\n+        // Update highest archived log id\n+        // Write transactions that happened during the copy to the currently active logical log\n+        writeTransactionsToActiveLogFile(tempStore, response);\n+      } finally\n+      {\n+        requester.done();\n+      }\n \n-            // Run recovery, so that the transactions we just wrote into the active log will be applied.\n-            recoverDatabase( tempStore );\n+      // This is a good place to check if the switch has been cancelled\n+      checkCancellation(cancellationRequest, tempStore);\n \n-            // All is well, move the streamed files to the real store directory.\n-            // Start with the files written through the page cache. Should only be record store files.\n-            // Note that the stream is lazy, so the file system traversal won't happen until *after* the store files\n-            // have been moved. Thus we ensure that we only attempt to move them once.\n-            moveFromTemporaryLocationToCorrect( moveActions, tempStore, moveAfterCopy );\n-        }\n-        finally\n-        {\n-            // All done, delete temp directory\n-            FileUtils.deleteRecursively( tempStore );\n-        }\n-    }\n+      // Run recovery, so that the transactions we just wrote into the active log will be applied.\n+      recoverDatabase(tempStore);\n \n-    private void moveFromTemporaryLocationToCorrect(\n-            List<FileMoveAction> storeFileMoveActions, File tempStore, MoveAfterCopy moveAfterCopy ) throws Exception\n+      // All is well, move the streamed files to the real store directory.\n+      // Start with the files written through the page cache. Should only be record store files.\n+      // Note that the stream is lazy, so the file system traversal won't happen until *after* the store files\n+      // have been moved. Thus we ensure that we only attempt to move them once.\n+      moveFromTemporaryLocationToCorrect(moveActions, tempStore, moveAfterCopy);\n+    } finally\n     {\n-        LogFiles logFiles = LogFilesBuilder.activeFilesBuilder( storeDir, fs, pageCache ).withConfig( config ).build();\n-\n-        Stream<FileMoveAction> moveActionStream =\n-                Stream.concat( storeFileMoveActions.stream(), fileMoveProvider.traverseForMoving( tempStore ) );\n-        Function<File,File> destinationMapper =\n-                file -> logFiles.isLogFile( file ) ? logFiles.logFilesDirectory() : storeDir;\n-        moveAfterCopy.move( moveActionStream, tempStore, destinationMapper );\n+      // All done, delete temp directory\n+      FileUtils.deleteRecursively(tempStore);\n     }\n+  }\n \n-    private void recoverDatabase( File tempStore )\n-    {\n-        monitor.startRecoveringStore();\n-        GraphDatabaseService graphDatabaseService = newTempDatabase( tempStore );\n-        graphDatabaseService.shutdown();\n-        monitor.finishRecoveringStore();\n-    }\n+  private void moveFromTemporaryLocationToCorrect(\n+      List<FileMoveAction> storeFileMoveActions, File tempStore, MoveAfterCopy moveAfterCopy) throws Exception\n+  {\n+    LogFiles logFiles = LogFilesBuilder.activeFilesBuilder(storeDir, fs, pageCache).withConfig(config).build();\n+\n+    Stream<FileMoveAction> moveActionStream =\n+        Stream.concat(storeFileMoveActions.stream(), fileMoveProvider.traverseForMoving(tempStore));\n+    Function<File, File> destinationMapper =\n+        file -> logFiles.isLogFile(file) ? logFiles.logFilesDirectory() : storeDir;\n+    moveAfterCopy.move(moveActionStream, tempStore, destinationMapper);\n+  }\n \n-    private void writeTransactionsToActiveLogFile( File tempStoreDir, Response<?> response ) throws Exception\n+  private void recoverDatabase(File tempStore)\n+  {\n+    monitor.startRecoveringStore();\n+    GraphDatabaseService graphDatabaseService = newTempDatabase(tempStore);\n+    graphDatabaseService.shutdown();\n+    monitor.finishRecoveringStore();\n+  }\n+\n+  private void writeTransactionsToActiveLogFile(File tempStoreDir, Response<?> response) throws Exception\n+  {\n+    LifeSupport life = new LifeSupport();\n+    try\n     {\n-        LifeSupport life = new LifeSupport();\n-        try\n-        {\n-            // Start the log and appender\n-            LogFiles logFiles = LogFilesBuilder.activeFilesBuilder( tempStoreDir, fs, pageCache ).build();\n-            life.add( logFiles );\n-            life.start();\n-\n-            // Just write all transactions to the active log version. Remember that this is after a store copy\n-            // where there are no logs, and the transaction stream we're about to write will probably contain\n-            // transactions that goes some time back, before the last committed transaction id. So we cannot\n-            // use a TransactionAppender, since it has checks for which transactions one can append.\n-            FlushableChannel channel = logFiles.getLogFile().getWriter();\n-            final TransactionLogWriter writer = new TransactionLogWriter( new LogEntryWriter( channel ) );\n-            final AtomicLong firstTxId = new AtomicLong( BASE_TX_ID );\n-\n-            response.accept( new Response.Handler()\n-            {\n-                @Override\n-                public void obligation( long txId )\n-                {\n-                    throw new UnsupportedOperationException( \"Shouldn't be called\" );\n-                }\n-\n-                @Override\n-                public Visitor<CommittedTransactionRepresentation,Exception> transactions()\n-                {\n-                    return transaction ->\n-                    {\n-                        long txId = transaction.getCommitEntry().getTxId();\n-                        if ( firstTxId.compareAndSet( BASE_TX_ID, txId ) )\n-                        {\n-                            monitor.startReceivingTransactions( txId );\n-                        }\n-                        writer.append( transaction.getTransactionRepresentation(), txId );\n-                        return false;\n-                    };\n-                }\n-            } );\n-\n-            long endTxId = firstTxId.get();\n-            if ( endTxId != BASE_TX_ID )\n-            {\n-                monitor.finishReceivingTransactions( endTxId );\n-            }\n+      // Start the log and appender\n+      LogFiles logFiles = LogFilesBuilder.activeFilesBuilder(tempStoreDir, fs, pageCache).build();\n+      life.add(logFiles);\n+      life.start();\n \n-            long currentLogVersion = logFiles.getHighestLogVersion();\n-            writer.checkPoint( new LogPosition( currentLogVersion, LOG_HEADER_SIZE ) );\n+      // Just write all transactions to the active log version. Remember that this is after a store copy\n+      // where there are no logs, and the transaction stream we're about to write will probably contain\n+      // transactions that goes some time back, before the last committed transaction id. So we cannot\n+      // use a TransactionAppender, since it has checks for which transactions one can append.\n+      FlushableChannel channel = logFiles.getLogFile().getWriter();\n+      final TransactionLogWriter writer = new TransactionLogWriter(new LogEntryWriter(channel));\n+      final AtomicLong firstTxId = new AtomicLong(BASE_TX_ID);\n \n-            // And since we write this manually we need to set the correct transaction id in the\n-            // header of the log that we just wrote.\n-            File currentLogFile = logFiles.getLogFileForVersion( currentLogVersion );\n-            writeLogHeader( fs, currentLogFile, currentLogVersion, max( BASE_TX_ID, endTxId - 1 ) );\n+      response.accept(new Response.Handler()\n+      {\n+        @Override\n+        public void obligation(long txId)\n+        {\n+          throw new UnsupportedOperationException(\"Shouldn't be called\");\n+        }\n \n-            if ( !forensics )\n+        @Override\n+        public Visitor<CommittedTransactionRepresentation, Exception> transactions()\n+        {\n+          return transaction ->\n+          {\n+            long txId = transaction.getCommitEntry().getTxId();\n+            if (firstTxId.compareAndSet(BASE_TX_ID, txId))\n             {\n-                // since we just create new log and put checkpoint into it with offset equals to\n-                // LOG_HEADER_SIZE we need to update last transaction offset to be equal to this newly defined max\n-                // offset otherwise next checkpoint that use last transaction offset will be created for non\n-                // existing offset that is in most of the cases bigger than new log size.\n-                // Recovery will treat that as last checkpoint and will not try to recover store till new\n-                // last closed transaction offset will not overcome old one. Till that happens it will be\n-                // impossible for recovery process to restore the store\n-                File neoStore = new File( tempStoreDir, MetaDataStore.DEFAULT_NAME );\n-                MetaDataStore.setRecord( pageCache, neoStore, MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, LOG_HEADER_SIZE );\n+              monitor.startReceivingTransactions(txId);\n             }\n+            writer.append(transaction.getTransactionRepresentation(), txId);\n+            return false;\n+          };\n         }\n-        finally\n-        {\n-            life.shutdown();\n-        }\n-    }\n+      });\n+\n+      long endTxId = firstTxId.get();\n+      if (endTxId != BASE_TX_ID)\n+      {\n+        monitor.finishReceivingTransactions(endTxId);\n+      }\n+\n+      long currentLogVersion = logFiles.getHighestLogVersion();\n+      writer.checkPoint(new LogPosition(currentLogVersion, LOG_HEADER_SIZE));\n+\n+      // And since we write this manually we need to set the correct transaction id in the\n+      // header of the log that we just wrote.\n+      File currentLogFile = logFiles.getLogFileForVersion(currentLogVersion);\n+      writeLogHeader(fs, currentLogFile, currentLogVersion, max(BASE_TX_ID, endTxId - 1));\n \n-    private GraphDatabaseService newTempDatabase( File tempStore )\n+      if (!forensics)\n+      {\n+        // since we just create new log and put checkpoint into it with offset equals to\n+        // LOG_HEADER_SIZE we need to update last transaction offset to be equal to this newly defined max\n+        // offset otherwise next checkpoint that use last transaction offset will be created for non\n+        // existing offset that is in most of the cases bigger than new log size.\n+        // Recovery will treat that as last checkpoint and will not try to recover store till new\n+        // last closed transaction offset will not overcome old one. Till that happens it will be\n+        // impossible for recovery process to restore the store\n+        File neoStore = new File(tempStoreDir, MetaDataStore.DEFAULT_NAME);\n+        MetaDataStore.setRecord(pageCache, neoStore, MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET, LOG_HEADER_SIZE);\n+      }\n+    } finally\n     {\n-        ExternallyManagedPageCache.GraphDatabaseFactoryWithPageCacheFactory factory =\n-                ExternallyManagedPageCache.graphDatabaseFactoryWithPageCache( pageCache );\n-        return factory\n-                .setKernelExtensions( kernelExtensions )\n-                .setUserLogProvider( NullLogProvider.getInstance() )\n-                .newEmbeddedDatabaseBuilder( tempStore.getAbsoluteFile() )\n-                .setConfig( \"dbms.backup.enabled\", Settings.FALSE )\n-                .setConfig( GraphDatabaseSettings.pagecache_warmup_enabled, Settings.FALSE )\n-                .setConfig( GraphDatabaseSettings.logs_directory, tempStore.getAbsolutePath() )\n-                .setConfig( GraphDatabaseSettings.keep_logical_logs, Settings.TRUE )\n-                .setConfig( GraphDatabaseSettings.logical_logs_location, tempStore.getAbsolutePath() )\n-                .setConfig( GraphDatabaseSettings.allow_upgrade, config.get( GraphDatabaseSettings.allow_upgrade ).toString() )\n-                .newGraphDatabase();\n+      life.shutdown();\n     }\n+  }\n \n-    private StoreWriter decorateWithProgressIndicator( final StoreWriter actual )\n+  private GraphDatabaseService newTempDatabase(File tempStore)\n+  {\n+    ExternallyManagedPageCache.GraphDatabaseFactoryWithPageCacheFactory factory =\n+        ExternallyManagedPageCache.graphDatabaseFactoryWithPageCache(pageCache);\n+    return factory\n+        .setKernelExtensions(kernelExtensions)\n+        .setUserLogProvider(NullLogProvider.getInstance())\n+        .newEmbeddedDatabaseBuilder(tempStore.getAbsoluteFile())\n+        .setConfig(\"dbms.backup.enabled\", Settings.FALSE)\n+        .setConfig(GraphDatabaseSettings.pagecache_warmup_enabled, Settings.FALSE)\n+        .setConfig(GraphDatabaseSettings.logs_directory, tempStore.getAbsolutePath())\n+        .setConfig(GraphDatabaseSettings.keep_logical_logs, Settings.TRUE)\n+        .setConfig(GraphDatabaseSettings.logical_logs_location, tempStore.getAbsolutePath())\n+        .setConfig(GraphDatabaseSettings.allow_upgrade, config.get(GraphDatabaseSettings.allow_upgrade).toString())\n+        .newGraphDatabase();\n+  }\n+\n+  private StoreWriter decorateWithProgressIndicator(final StoreWriter actual)\n+  {\n+    return new StoreWriter()\n     {\n-        return new StoreWriter()\n-        {\n-            private int totalFiles;\n+      private int totalFiles;\n \n-            @Override\n-            public long write( String path, ReadableByteChannel data, ByteBuffer temporaryBuffer,\n-                    boolean hasData, int requiredElementAlignment ) throws IOException\n-            {\n-                log.info( \"Copying %s\", path );\n-                long written = actual.write( path, data, temporaryBuffer, hasData, requiredElementAlignment );\n-                log.info( \"Copied %s %s\", path, bytes( written ) );\n-                totalFiles++;\n-                return written;\n-            }\n+      @Override\n+      public long write(String path, ReadableByteChannel data, ByteBuffer temporaryBuffer,\n+                        boolean hasData, int requiredElementAlignment) throws IOException\n+      {\n+        log.info(\"Copying %s\", path);\n+        long written = actual.write(path, data, temporaryBuffer, hasData, requiredElementAlignment);\n+        log.info(\"Copied %s %s\", path, bytes(written));\n+        totalFiles++;\n+        return written;\n+      }\n \n-            @Override\n-            public void close()\n-            {\n-                actual.close();\n-                log.info( \"Done, copied %s files\", totalFiles );\n-            }\n-        };\n-    }\n+      @Override\n+      public void close()\n+      {\n+        actual.close();\n+        log.info(\"Done, copied %s files\", totalFiles);\n+      }\n+    };\n+  }\n \n-    private void cleanDirectory( File directory ) throws IOException\n+  private void cleanDirectory(File directory) throws IOException\n+  {\n+    if (!directory.mkdir())\n     {\n-        if ( !directory.mkdir() )\n-        {\n-            FileUtils.deleteRecursively( directory );\n-            directory.mkdir();\n-        }\n+      FileUtils.deleteRecursively(directory);\n+      directory.mkdir();\n     }\n+  }\n \n-    private void checkCancellation( CancellationRequest cancellationRequest, File tempStore ) throws IOException\n+  private void checkCancellation(CancellationRequest cancellationRequest, File tempStore) throws IOException\n+  {\n+    if (cancellationRequest.cancellationRequested())\n     {\n-        if ( cancellationRequest.cancellationRequested() )\n-        {\n-            log.info( \"Store copying was cancelled. Cleaning up temp-directories.\" );\n-            cleanDirectory( tempStore );\n-        }\n+      log.info(\"Store copying was cancelled. Cleaning up temp-directories.\");\n+      cleanDirectory(tempStore);\n     }\n+  }\n }\n",
            "diff_size": 319
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "257",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 617).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2881/StoreCopyClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2881/StoreCopyClient.java\nindex 2a55093fe89..d8f4f205674 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2881/StoreCopyClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2881/StoreCopyClient.java\n@@ -70,7 +70,7 @@ import static org.neo4j.kernel.impl.transaction.log.entry.LogHeaderWriter.writeL\n public class StoreCopyClient\n {\n \n-    /**\n+/**\n      * This is built as a pluggable interface to allow backup and HA to use this code independently of each other,\n      * each implements it's own version of how to copy a store from a remote location.\n      */\n@@ -159,16 +159,14 @@ public class StoreCopyClient\n         }\n     }\n \n-    private void moveFromTemporaryLocationToCorrect(\n-            List<FileMoveAction> storeFileMoveActions, File tempStore, MoveAfterCopy moveAfterCopy ) throws Exception\n-    {\n+    private void moveFromTemporaryLocationToCorrect( List<FileMoveAction> storeFileMoveActions, File tempStore, MoveAfterCopy moveAfterCopy ) throws Exception\n+{\n         LogFiles logFiles = LogFilesBuilder.activeFilesBuilder( storeDir, fs, pageCache ).withConfig( config ).build();\n \n-        Stream<FileMoveAction> moveActionStream =\n-                Stream.concat( storeFileMoveActions.stream(), fileMoveProvider.traverseForMoving( tempStore ) );\n-        Function<File,File> destinationMapper =\n+        Stream<FileMoveAction> moveActionStream = Stream.concat( storeFileMoveActions.stream(), fileMoveProvider.traverseForMoving( tempStore ) );\n+Function<File,File> destinationMapper =\n                 file -> logFiles.isLogFile( file ) ? logFiles.logFilesDirectory() : storeDir;\n-        moveAfterCopy.move( moveActionStream, tempStore, destinationMapper );\n+moveAfterCopy.move( moveActionStream, tempStore, destinationMapper );\n     }\n \n     private void recoverDatabase( File tempStore )\n@@ -196,8 +194,7 @@ public class StoreCopyClient\n             FlushableChannel channel = logFiles.getLogFile().getWriter();\n             final TransactionLogWriter writer = new TransactionLogWriter( new LogEntryWriter( channel ) );\n             final AtomicLong firstTxId = new AtomicLong( BASE_TX_ID );\n-\n-            response.accept( new Response.Handler()\n+response.accept( new Response.Handler()\n             {\n                 @Override\n                 public void obligation( long txId )\n@@ -234,8 +231,7 @@ public class StoreCopyClient\n             // header of the log that we just wrote.\n             File currentLogFile = logFiles.getLogFileForVersion( currentLogVersion );\n             writeLogHeader( fs, currentLogFile, currentLogVersion, max( BASE_TX_ID, endTxId - 1 ) );\n-\n-            if ( !forensics )\n+if ( !forensics )\n             {\n                 // since we just create new log and put checkpoint into it with offset equals to\n                 // LOG_HEADER_SIZE we need to update last transaction offset to be equal to this newly defined max\n@@ -256,19 +252,9 @@ public class StoreCopyClient\n \n     private GraphDatabaseService newTempDatabase( File tempStore )\n     {\n-        ExternallyManagedPageCache.GraphDatabaseFactoryWithPageCacheFactory factory =\n-                ExternallyManagedPageCache.graphDatabaseFactoryWithPageCache( pageCache );\n-        return factory\n-                .setKernelExtensions( kernelExtensions )\n-                .setUserLogProvider( NullLogProvider.getInstance() )\n-                .newEmbeddedDatabaseBuilder( tempStore.getAbsoluteFile() )\n-                .setConfig( \"dbms.backup.enabled\", Settings.FALSE )\n-                .setConfig( GraphDatabaseSettings.pagecache_warmup_enabled, Settings.FALSE )\n-                .setConfig( GraphDatabaseSettings.logs_directory, tempStore.getAbsolutePath() )\n-                .setConfig( GraphDatabaseSettings.keep_logical_logs, Settings.TRUE )\n-                .setConfig( GraphDatabaseSettings.logical_logs_location, tempStore.getAbsolutePath() )\n-                .setConfig( GraphDatabaseSettings.allow_upgrade, config.get( GraphDatabaseSettings.allow_upgrade ).toString() )\n-                .newGraphDatabase();\n+        ExternallyManagedPageCache.GraphDatabaseFactoryWithPageCacheFactory factory = ExternallyManagedPageCache.graphDatabaseFactoryWithPageCache( pageCache );\n+return factory.setKernelExtensions( kernelExtensions )\n+                .setUserLogProvider( NullLogProvider.getInstance() ).newEmbeddedDatabaseBuilder( tempStore.getAbsoluteFile() ).setConfig( \"dbms.backup.enabled\", Settings.FALSE ).setConfig( GraphDatabaseSettings.pagecache_warmup_enabled, Settings.FALSE ).setConfig( GraphDatabaseSettings.logs_directory, tempStore.getAbsolutePath() ).setConfig( GraphDatabaseSettings.keep_logical_logs, Settings.TRUE ).setConfig( GraphDatabaseSettings.logical_logs_location, tempStore.getAbsolutePath() ).setConfig( GraphDatabaseSettings.allow_upgrade, config.get( GraphDatabaseSettings.allow_upgrade ).toString() ).newGraphDatabase();\n     }\n \n     private StoreWriter decorateWithProgressIndicator( final StoreWriter actual )\n@@ -280,7 +266,7 @@ public class StoreCopyClient\n             @Override\n             public long write( String path, ReadableByteChannel data, ByteBuffer temporaryBuffer,\n                     boolean hasData, int requiredElementAlignment ) throws IOException\n-            {\n+{\n                 log.info( \"Copying %s\", path );\n                 long written = actual.write( path, data, temporaryBuffer, hasData, requiredElementAlignment );\n                 log.info( \"Copied %s %s\", path, bytes( written ) );\n@@ -314,4 +300,4 @@ public class StoreCopyClient\n             cleanDirectory( tempStore );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}