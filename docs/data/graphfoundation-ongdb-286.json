{
    "project_name": "graphfoundation-ongdb",
    "error_id": "286",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "157",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "94",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "475",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "495",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "495",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "501",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "540",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "559",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "564",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "634",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "743",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "752",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "752",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "778",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "778",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "785",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "785",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "813",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "813",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "853",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "882",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "882",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "918",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "928",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "930",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "930",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "953",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "959",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "959",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "959",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "964",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "972",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "972",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "998",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "998",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1015",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1015",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1017",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1029",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1029",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1031",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1031",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1034",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1045",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1046",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1053",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1053",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1070",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1070",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1073",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1073",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1086",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1086",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1088",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1088",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1091",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1091",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1106",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1106",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1109",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1110",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1134",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1134",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1155",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1155",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1157",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1157",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1181",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1181",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1183",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1185",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1200",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1200",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1200",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1204",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1206",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1206",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1220",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1220",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1226",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1226",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1226",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1237",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1237",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1245",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1245",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1252",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1252",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1252",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1266",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1266",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1279",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1279",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1279",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1289",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1289",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1291",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1292",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1300",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1300",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/286/GBPTree.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/286/GBPTree.java\nindex fe6cc6bf6fd..7e0052c4bb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/286/GBPTree.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/286/GBPTree.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.apache.commons.lang3.tuple.Pair;\n@@ -101,7 +102,7 @@ import static org.neo4j.index.internal.gbptree.PointerChecking.assertNoSuccessor\n  * TIME |--w--w----w--c--ww--w-c-w--w-ww--w--w---x------|\n  *         ^------ safe -----^   ^- unsafe --^\n  * </pre>\n-\n+ * <p>\n  * The writes that happened before the last checkpoint are durable and safe, but the writes after it are not.\n  * The tree can however get back to a consistent state by replaying all the writes since the last checkpoint\n  * all the way up to the crash ({@code x}). Even including writes before the last checkpoint is OK,\n@@ -109,7 +110,7 @@ import static org.neo4j.index.internal.gbptree.PointerChecking.assertNoSuccessor\n  * in which the changes are applied is not important as long as they do not affect the same key. The order of\n  * updates targeting the same key needs to be preserved when replaying as only the last applied update will\n  * be visible.\n- *\n+ * <p>\n  * If failing to replay missing writes, that data will simply be missing from the tree and most likely leave the\n  * database inconsistent.\n  * <p>\n@@ -117,1220 +118,1206 @@ import static org.neo4j.index.internal.gbptree.PointerChecking.assertNoSuccessor\n  * be managed externally, keeping multiple resources in sync w/ regards to checkpoints. This is especially important\n  * since a it is impossible to recognize crashed pointers after a checkpoint.\n  *\n- * @param <KEY> type of keys\n+ * @param <KEY>   type of keys\n  * @param <VALUE> type of values\n  */\n-public class GBPTree<KEY,VALUE> implements Closeable\n+public class GBPTree<KEY, VALUE> implements Closeable\n {\n+  /**\n+   * For monitoring {@link GBPTree}.\n+   */\n+  public interface Monitor\n+  {\n     /**\n-     * For monitoring {@link GBPTree}.\n+     * Adapter for {@link Monitor}.\n      */\n-    public interface Monitor\n+    class Adaptor implements Monitor\n     {\n-        /**\n-         * Adapter for {@link Monitor}.\n-         */\n-        class Adaptor implements Monitor\n-        {\n-            @Override\n-            public void checkpointCompleted()\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void noStoreFile()\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void cleanupRegistered()\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void cleanupStarted()\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void cleanupFinished( long numberOfPagesVisited, long numberOfCleanedCrashPointers, long durationMillis )\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void cleanupClosed()\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void cleanupFailed( Throwable throwable )\n-            {   // no-op\n-            }\n-\n-            @Override\n-            public void startupState( boolean clean )\n-            {   // no-op\n-            }\n-        }\n-\n-        /**\n-         * Called when a {@link GBPTree#checkpoint(IOLimiter)} has been completed, but right before\n-         * {@link GBPTree#writer() writers} are re-enabled.\n-         */\n-        void checkpointCompleted();\n-\n-        /**\n-         * Called when the tree was started on no existing store file and so will be created.\n-         */\n-        void noStoreFile();\n-\n-        /**\n-         * Called after cleanup job has been created\n-         */\n-        void cleanupRegistered();\n-\n-        /**\n-         * Called after cleanup job has been started\n-         */\n-        void cleanupStarted();\n-\n-        /**\n-         * Called after recovery has completed and cleaning has been done.\n-         *\n-         * @param numberOfPagesVisited number of pages visited by the cleaner.\n-         * @param numberOfCleanedCrashPointers number of cleaned crashed pointers.\n-         * @param durationMillis time spent cleaning.\n-         */\n-        void cleanupFinished( long numberOfPagesVisited, long numberOfCleanedCrashPointers, long durationMillis );\n-\n-        /**\n-         * Called when cleanup job is closed and lock is released\n-         */\n-        void cleanupClosed();\n-\n-        /**\n-         * Called when cleanup job catches a throwable\n-         * @param throwable cause of failure\n-         */\n-        void cleanupFailed( Throwable throwable );\n-\n-        /**\n-         * Report tree state on startup.\n-         *\n-         * @param clean true if tree was clean on startup.\n-         */\n-        void startupState( boolean clean );\n+      @Override\n+      public void checkpointCompleted()\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void noStoreFile()\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void cleanupRegistered()\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void cleanupStarted()\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void cleanupFinished(long numberOfPagesVisited, long numberOfCleanedCrashPointers, long durationMillis)\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void cleanupClosed()\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void cleanupFailed(Throwable throwable)\n+      {   // no-op\n+      }\n+\n+      @Override\n+      public void startupState(boolean clean)\n+      {   // no-op\n+      }\n     }\n \n     /**\n-     * No-op {@link Monitor}.\n-     */\n-    public static final Monitor NO_MONITOR = new Monitor.Adaptor();\n-\n-    /**\n-     * No-op header reader.\n+     * Called when a {@link GBPTree#checkpoint(IOLimiter)} has been completed, but right before\n+     * {@link GBPTree#writer() writers} are re-enabled.\n      */\n-    public static final Header.Reader NO_HEADER_READER = headerData ->\n-    {\n-    };\n+    void checkpointCompleted();\n \n     /**\n-     * No-op header writer.\n+     * Called when the tree was started on no existing store file and so will be created.\n      */\n-    public static final Consumer<PageCursor> NO_HEADER_WRITER = pc ->\n-    {\n-    };\n+    void noStoreFile();\n \n     /**\n-     * Paged file in a {@link PageCache} providing the means of storage.\n+     * Called after cleanup job has been created\n      */\n-    private final PagedFile pagedFile;\n+    void cleanupRegistered();\n \n     /**\n-     * {@link File} to map in {@link PageCache} for storing this tree.\n-     */\n-    private final File indexFile;\n-\n-    /**\n-     * User-provided layout of key/value as well as custom additional meta information.\n-     * This allows for custom key/value and comparison representation. The layout provided during index\n-     * creation, i.e. the first time constructor is called for the given paged file, will be stored\n-     * in the meta page and it's asserted that the same layout is passed to the constructor when opening the tree.\n-     */\n-    private final Layout<KEY,VALUE> layout;\n-\n-    /**\n-     * Instance of {@link TreeNode} which handles reading/writing physical bytes from pages representing tree nodes.\n-     */\n-    private final TreeNode<KEY,VALUE> bTreeNode;\n-\n-    /**\n-     * A free-list of released ids. Acquiring new ids involves first trying out the free-list and then,\n-     * as a fall-back allocate a new id at the end of the store.\n-     */\n-    private final FreeListIdProvider freeList;\n-\n-    /**\n-     * A single instance {@link Writer} because tree only supports single writer.\n-     */\n-    private final SingleWriter writer;\n-\n-    /**\n-     * Tells whether or not there have been made changes (using {@link #writer()}) to this tree\n-     * since last call to {@link #checkpoint(IOLimiter)}. This variable is set when calling {@link #writer()}\n-     * and cleared inside {@link #checkpoint(IOLimiter)}.\n-     */\n-    private volatile boolean changesSinceLastCheckpoint;\n-\n-    /**\n-     * Lock with two individual parts. Writer lock and cleaner lock.\n-     * <p>\n-     * There are a few different scenarios that involve writing or flushing that can not be happen concurrently:\n-     * <ul>\n-     *     <li>Checkpoint and writing</li>\n-     *     <li>Checkpoint and close</li>\n-     *     <li>Write and checkpoint</li>\n-     * </ul>\n-     * For those scenarios, writer lock is taken.\n-     * <p>\n-     * If cleaning of crash pointers is needed the tree can not be allowed to perform a checkpoint until that job\n-     * has finished. For this scenario, cleaner lock is taken.\n+     * Called after cleanup job has been started\n      */\n-    private final GBPTreeLock lock = new GBPTreeLock();\n+    void cleanupStarted();\n \n     /**\n-     * Page size, i.e. tree node size, of the tree nodes in this tree. The page size is determined on\n-     * tree creation, stored in meta page and read when opening tree later.\n+     * Called after recovery has completed and cleaning has been done.\n+     *\n+     * @param numberOfPagesVisited         number of pages visited by the cleaner.\n+     * @param numberOfCleanedCrashPointers number of cleaned crashed pointers.\n+     * @param durationMillis               time spent cleaning.\n      */\n-    private int pageSize;\n+    void cleanupFinished(long numberOfPagesVisited, long numberOfCleanedCrashPointers, long durationMillis);\n \n     /**\n-     * Whether or not the tree was created this time it was instantiated.\n+     * Called when cleanup job is closed and lock is released\n      */\n-    private boolean created;\n+    void cleanupClosed();\n \n     /**\n-     * Generation of the tree. This variable contains both stable and unstable generation and is\n-     * represented as one long to get atomic updates of both stable and unstable generation for readers.\n-     * Both stable and unstable generation are unsigned ints, i.e. 32 bits each.\n+     * Called when cleanup job catches a throwable\n      *\n-     * <ul>\n-     * <li>stable generation, generation which has survived the last {@link #checkpoint(IOLimiter)}</li>\n-     * <li>unstable generation, current generation under evolution. This generation will be the\n-     * {@link Generation#stableGeneration(long)} after the next {@link #checkpoint(IOLimiter)}</li>\n-     * </ul>\n+     * @param throwable cause of failure\n      */\n-    private volatile long generation;\n+    void cleanupFailed(Throwable throwable);\n \n     /**\n-     * Current root (id and generation where it was assigned). In the rare event of creating a new root\n-     * a new {@link Root} instance will be created and assigned to this variable.\n+     * Report tree state on startup.\n      *\n-     * For reading id and generation atomically a reader can first grab a local reference to this variable\n-     * and then call {@link Root#id()} and {@link Root#generation()}, or use {@link Root#goTo(PageCursor)}\n-     * directly, which moves the page cursor to the id and returns the generation.\n-     */\n-    private volatile Root root;\n-\n-    /**\n-     * Catchup for {@link SeekCursor} to become aware of new roots since it started.\n-     */\n-    private final Supplier<RootCatchup> rootCatchupSupplier = () -> new TripCountingRootCatchup( () -> root );\n-\n-    /**\n-     * Supplier of generation to readers. This supplier will actually very rarely be used, because normally\n-     * a {@link SeekCursor} is bootstrapped from {@link #generation}. The only time this supplier will be\n-     * used is so that a long-running {@link SeekCursor} can keep up with a generation change after\n-     * a checkpoint, if the cursor lives that long.\n-     */\n-    private final LongSupplier generationSupplier = () -> generation;\n-\n-    /**\n-     * Called on certain events.\n-     */\n-    private final Monitor monitor;\n-\n-    /**\n-     * Whether or not this tree has been closed. Accessed and changed solely in\n-     * {@link #close()} to be able to close tree multiple times gracefully.\n-     */\n-    private boolean closed = true;\n-\n-    /**\n-     * True if tree is clean, false if dirty\n+     * @param clean true if tree was clean on startup.\n      */\n-    private boolean clean;\n-\n-    /**\n-     * True if initial tree state was dirty\n-     */\n-    private boolean dirtyOnStartup;\n-\n-    /**\n-     * State of cleanup job.\n-     */\n-    private final CleanupJob cleaning;\n-\n-    /**\n-     * {@link Consumer} to hand out to others who want to decorate information about this tree\n-     * to exceptions thrown out from its surface.\n-     */\n-    private final Consumer<Throwable> exceptionDecorator = this::appendTreeInformation;\n+    void startupState(boolean clean);\n+  }\n+\n+  /**\n+   * No-op {@link Monitor}.\n+   */\n+  public static final Monitor NO_MONITOR = new Monitor.Adaptor();\n+\n+  /**\n+   * No-op header reader.\n+   */\n+  public static final Header.Reader NO_HEADER_READER = headerData ->\n+  {\n+  };\n+\n+  /**\n+   * No-op header writer.\n+   */\n+  public static final Consumer<PageCursor> NO_HEADER_WRITER = pc ->\n+  {\n+  };\n+\n+  /**\n+   * Paged file in a {@link PageCache} providing the means of storage.\n+   */\n+  private final PagedFile pagedFile;\n+\n+  /**\n+   * {@link File} to map in {@link PageCache} for storing this tree.\n+   */\n+  private final File indexFile;\n+\n+  /**\n+   * User-provided layout of key/value as well as custom additional meta information.\n+   * This allows for custom key/value and comparison representation. The layout provided during index\n+   * creation, i.e. the first time constructor is called for the given paged file, will be stored\n+   * in the meta page and it's asserted that the same layout is passed to the constructor when opening the tree.\n+   */\n+  private final Layout<KEY, VALUE> layout;\n+\n+  /**\n+   * Instance of {@link TreeNode} which handles reading/writing physical bytes from pages representing tree nodes.\n+   */\n+  private final TreeNode<KEY, VALUE> bTreeNode;\n+\n+  /**\n+   * A free-list of released ids. Acquiring new ids involves first trying out the free-list and then,\n+   * as a fall-back allocate a new id at the end of the store.\n+   */\n+  private final FreeListIdProvider freeList;\n+\n+  /**\n+   * A single instance {@link Writer} because tree only supports single writer.\n+   */\n+  private final SingleWriter writer;\n+\n+  /**\n+   * Tells whether or not there have been made changes (using {@link #writer()}) to this tree\n+   * since last call to {@link #checkpoint(IOLimiter)}. This variable is set when calling {@link #writer()}\n+   * and cleared inside {@link #checkpoint(IOLimiter)}.\n+   */\n+  private volatile boolean changesSinceLastCheckpoint;\n+\n+  /**\n+   * Lock with two individual parts. Writer lock and cleaner lock.\n+   * <p>\n+   * There are a few different scenarios that involve writing or flushing that can not be happen concurrently:\n+   * <ul>\n+   *     <li>Checkpoint and writing</li>\n+   *     <li>Checkpoint and close</li>\n+   *     <li>Write and checkpoint</li>\n+   * </ul>\n+   * For those scenarios, writer lock is taken.\n+   * <p>\n+   * If cleaning of crash pointers is needed the tree can not be allowed to perform a checkpoint until that job\n+   * has finished. For this scenario, cleaner lock is taken.\n+   */\n+  private final GBPTreeLock lock = new GBPTreeLock();\n+\n+  /**\n+   * Page size, i.e. tree node size, of the tree nodes in this tree. The page size is determined on\n+   * tree creation, stored in meta page and read when opening tree later.\n+   */\n+  private int pageSize;\n+\n+  /**\n+   * Whether or not the tree was created this time it was instantiated.\n+   */\n+  private boolean created;\n+\n+  /**\n+   * Generation of the tree. This variable contains both stable and unstable generation and is\n+   * represented as one long to get atomic updates of both stable and unstable generation for readers.\n+   * Both stable and unstable generation are unsigned ints, i.e. 32 bits each.\n+   *\n+   * <ul>\n+   * <li>stable generation, generation which has survived the last {@link #checkpoint(IOLimiter)}</li>\n+   * <li>unstable generation, current generation under evolution. This generation will be the\n+   * {@link Generation#stableGeneration(long)} after the next {@link #checkpoint(IOLimiter)}</li>\n+   * </ul>\n+   */\n+  private volatile long generation;\n+\n+  /**\n+   * Current root (id and generation where it was assigned). In the rare event of creating a new root\n+   * a new {@link Root} instance will be created and assigned to this variable.\n+   * <p>\n+   * For reading id and generation atomically a reader can first grab a local reference to this variable\n+   * and then call {@link Root#id()} and {@link Root#generation()}, or use {@link Root#goTo(PageCursor)}\n+   * directly, which moves the page cursor to the id and returns the generation.\n+   */\n+  private volatile Root root;\n+\n+  /**\n+   * Catchup for {@link SeekCursor} to become aware of new roots since it started.\n+   */\n+  private final Supplier<RootCatchup> rootCatchupSupplier = () -> new TripCountingRootCatchup(() -> root);\n+\n+  /**\n+   * Supplier of generation to readers. This supplier will actually very rarely be used, because normally\n+   * a {@link SeekCursor} is bootstrapped from {@link #generation}. The only time this supplier will be\n+   * used is so that a long-running {@link SeekCursor} can keep up with a generation change after\n+   * a checkpoint, if the cursor lives that long.\n+   */\n+  private final LongSupplier generationSupplier = () -> generation;\n+\n+  /**\n+   * Called on certain events.\n+   */\n+  private final Monitor monitor;\n+\n+  /**\n+   * Whether or not this tree has been closed. Accessed and changed solely in\n+   * {@link #close()} to be able to close tree multiple times gracefully.\n+   */\n+  private boolean closed = true;\n+\n+  /**\n+   * True if tree is clean, false if dirty\n+   */\n+  private boolean clean;\n+\n+  /**\n+   * True if initial tree state was dirty\n+   */\n+  private boolean dirtyOnStartup;\n+\n+  /**\n+   * State of cleanup job.\n+   */\n+  private final CleanupJob cleaning;\n+\n+  /**\n+   * {@link Consumer} to hand out to others who want to decorate information about this tree\n+   * to exceptions thrown out from its surface.\n+   */\n+  private final Consumer<Throwable> exceptionDecorator = this::appendTreeInformation;\n+\n+  /**\n+   * Opens an index {@code indexFile} in the {@code pageCache}, creating and initializing it if it doesn't exist.\n+   * If the index doesn't exist it will be created and the {@link Layout} and {@code pageSize} will\n+   * be written in index header.\n+   * If the index exists it will be opened and the {@link Layout} will be matched with the information\n+   * in the header. At the very least {@link Layout#identifier()} will be matched.\n+   * <p>\n+   * On start, tree can be in a clean or dirty state. If dirty, it will\n+   * {@link #createCleanupJob(RecoveryCleanupWorkCollector, boolean)} and clean crashed pointers as part of constructor. Tree is only clean if\n+   * since last time it was opened it was {@link #close() closed} without any non-checkpointed changes present.\n+   * Correct usage pattern of the GBPTree is:\n+   *\n+   * <pre>\n+   *     try ( GBPTree tree = new GBPTree(...) )\n+   *     {\n+   *         // Use the tree\n+   *         tree.checkpoint( ... );\n+   *     }\n+   * </pre>\n+   * <p>\n+   * Expected state after first time tree is opened, where initial state is created:\n+   * <ul>\n+   * <li>StateA\n+   * <ul>\n+   * <li>stableGeneration=2</li>\n+   * <li>unstableGeneration=3</li>\n+   * <li>rootId=3</li>\n+   * <li>rootGeneration=2</li>\n+   * <li>lastId=4</li>\n+   * <li>freeListWritePageId=4</li>\n+   * <li>freeListReadPageId=4</li>\n+   * <li>freeListWritePos=0</li>\n+   * <li>freeListReadPos=0</li>\n+   * <li>clean=false</li>\n+   * </ul>\n+   * <li>StateB\n+   * <ul>\n+   * <li>stableGeneration=2</li>\n+   * <li>unstableGeneration=4</li>\n+   * <li>rootId=3</li>\n+   * <li>rootGeneration=2</li>\n+   * <li>lastId=4</li>\n+   * <li>freeListWritePageId=4</li>\n+   * <li>freeListReadPageId=4</li>\n+   * <li>freeListWritePos=0</li>\n+   * <li>freeListReadPos=0</li>\n+   * <li>clean=false</li>\n+   * </ul>\n+   * </ul>\n+   *\n+   * @param pageCache                    {@link PageCache} to use to map index file\n+   * @param indexFile                    {@link File} containing the actual index\n+   * @param layout                       {@link Layout} to use in the tree, this must match the existing layout\n+   *                                     we're just opening the index\n+   * @param tentativePageSize            page size, i.e. tree node size. Must be less than or equal to that of the page cache.\n+   *                                     A pageSize of {@code 0} means to use whatever the page cache has (at creation)\n+   * @param monitor                      {@link Monitor} for monitoring {@link GBPTree}.\n+   * @param headerReader                 reads header data, previously written using {@link #checkpoint(IOLimiter, Consumer)}\n+   *                                     or {@link #close()}\n+   * @param headerWriter                 writes header data if indexFile is created as a result of this call.\n+   * @param recoveryCleanupWorkCollector collects recovery cleanup jobs for execution after recovery.\n+   * @throws IOException               on page cache error\n+   * @throws MetadataMismatchException if meta information does not match constructor parameters or meta page is missing\n+   */\n+  public GBPTree(PageCache pageCache, File indexFile, Layout<KEY, VALUE> layout, int tentativePageSize,\n+                 Monitor monitor, Header.Reader headerReader, Consumer<PageCursor> headerWriter,\n+                 RecoveryCleanupWorkCollector recoveryCleanupWorkCollector) throws IOException, MetadataMismatchException\n+  {\n+    this.indexFile = indexFile;\n+    this.monitor = monitor;\n+    this.generation = Generation.generation(MIN_GENERATION, MIN_GENERATION + 1);\n+    long rootId = IdSpace.MIN_TREE_NODE_ID;\n+    setRoot(rootId, Generation.unstableGeneration(generation));\n+    this.layout = layout;\n+\n+    boolean success = false;\n+    try\n+    {\n+      this.pagedFile = openOrCreate(pageCache, indexFile, tentativePageSize);\n+      this.pageSize = pagedFile.pageSize();\n+      closed = false;\n+      TreeNodeSelector.Factory format;\n+      if (created)\n+      {\n+        format = TreeNodeSelector.selectByLayout(layout);\n+        writeMeta(layout, format, pagedFile);\n+      } else\n+      {\n+        Meta meta = readMeta(layout, pagedFile);\n+        meta.verify(layout);\n+        format = TreeNodeSelector.selectByFormat(meta.getFormatIdentifier(), meta.getFormatVersion());\n+      }\n+      this.bTreeNode = format.create(pageSize, layout);\n+      this.freeList = new FreeListIdProvider(pagedFile, pageSize, rootId, FreeListIdProvider.NO_MONITOR);\n+      this.writer = new SingleWriter(new InternalTreeLogic<>(freeList, bTreeNode, layout));\n+\n+      // Create or load state\n+      if (created)\n+      {\n+        initializeAfterCreation(headerWriter);\n+      } else\n+      {\n+        loadState(pagedFile, headerReader);\n+      }\n+      this.monitor.startupState(clean);\n+\n+      // Prepare tree for action\n+      dirtyOnStartup = !clean;\n+      clean = false;\n+      bumpUnstableGeneration();\n+      forceState();\n+      cleaning = createCleanupJob(recoveryCleanupWorkCollector, dirtyOnStartup);\n+      success = true;\n+    } catch (Throwable t)\n+    {\n+      appendTreeInformation(t);\n+      throw t;\n+    } finally\n+    {\n+      if (!success)\n+      {\n+        close();\n+      }\n+    }\n+  }\n \n-    /**\n-     * Opens an index {@code indexFile} in the {@code pageCache}, creating and initializing it if it doesn't exist.\n-     * If the index doesn't exist it will be created and the {@link Layout} and {@code pageSize} will\n-     * be written in index header.\n-     * If the index exists it will be opened and the {@link Layout} will be matched with the information\n-     * in the header. At the very least {@link Layout#identifier()} will be matched.\n-     * <p>\n-     * On start, tree can be in a clean or dirty state. If dirty, it will\n-     * {@link #createCleanupJob(RecoveryCleanupWorkCollector, boolean)} and clean crashed pointers as part of constructor. Tree is only clean if\n-     * since last time it was opened it was {@link #close() closed} without any non-checkpointed changes present.\n-     * Correct usage pattern of the GBPTree is:\n-     *\n-     * <pre>\n-     *     try ( GBPTree tree = new GBPTree(...) )\n-     *     {\n-     *         // Use the tree\n-     *         tree.checkpoint( ... );\n-     *     }\n-     * </pre>\n-     *\n-     * Expected state after first time tree is opened, where initial state is created:\n-     * <ul>\n-     * <li>StateA\n-     * <ul>\n-     * <li>stableGeneration=2</li>\n-     * <li>unstableGeneration=3</li>\n-     * <li>rootId=3</li>\n-     * <li>rootGeneration=2</li>\n-     * <li>lastId=4</li>\n-     * <li>freeListWritePageId=4</li>\n-     * <li>freeListReadPageId=4</li>\n-     * <li>freeListWritePos=0</li>\n-     * <li>freeListReadPos=0</li>\n-     * <li>clean=false</li>\n-     * </ul>\n-     * <li>StateB\n-     * <ul>\n-     * <li>stableGeneration=2</li>\n-     * <li>unstableGeneration=4</li>\n-     * <li>rootId=3</li>\n-     * <li>rootGeneration=2</li>\n-     * <li>lastId=4</li>\n-     * <li>freeListWritePageId=4</li>\n-     * <li>freeListReadPageId=4</li>\n-     * <li>freeListWritePos=0</li>\n-     * <li>freeListReadPos=0</li>\n-     * <li>clean=false</li>\n-     * </ul>\n-     * </ul>\n-     *\n-     * @param pageCache {@link PageCache} to use to map index file\n-     * @param indexFile {@link File} containing the actual index\n-     * @param layout {@link Layout} to use in the tree, this must match the existing layout\n-     * we're just opening the index\n-     * @param tentativePageSize page size, i.e. tree node size. Must be less than or equal to that of the page cache.\n-     * A pageSize of {@code 0} means to use whatever the page cache has (at creation)\n-     * @param monitor {@link Monitor} for monitoring {@link GBPTree}.\n-     * @param headerReader reads header data, previously written using {@link #checkpoint(IOLimiter, Consumer)}\n-     * or {@link #close()}\n-     * @param headerWriter writes header data if indexFile is created as a result of this call.\n-     * @param recoveryCleanupWorkCollector collects recovery cleanup jobs for execution after recovery.\n-     * @throws IOException on page cache error\n-     * @throws MetadataMismatchException if meta information does not match constructor parameters or meta page is missing\n-     */\n-    public GBPTree( PageCache pageCache, File indexFile, Layout<KEY,VALUE> layout, int tentativePageSize,\n-            Monitor monitor, Header.Reader headerReader, Consumer<PageCursor> headerWriter,\n-            RecoveryCleanupWorkCollector recoveryCleanupWorkCollector ) throws IOException, MetadataMismatchException\n+  private void initializeAfterCreation(Consumer<PageCursor> headerWriter) throws IOException\n+  {\n+    // Initialize state\n+    try (PageCursor cursor = pagedFile.io(0 /*ignored*/, PagedFile.PF_SHARED_WRITE_LOCK))\n     {\n-        this.indexFile = indexFile;\n-        this.monitor = monitor;\n-        this.generation = Generation.generation( MIN_GENERATION, MIN_GENERATION + 1 );\n-        long rootId = IdSpace.MIN_TREE_NODE_ID;\n-        setRoot( rootId, Generation.unstableGeneration( generation ) );\n-        this.layout = layout;\n-\n-        boolean success = false;\n-        try\n-        {\n-            this.pagedFile = openOrCreate( pageCache, indexFile, tentativePageSize );\n-            this.pageSize = pagedFile.pageSize();\n-            closed = false;\n-            TreeNodeSelector.Factory format;\n-            if ( created )\n-            {\n-                format = TreeNodeSelector.selectByLayout( layout );\n-                writeMeta( layout, format, pagedFile );\n-            }\n-            else\n-            {\n-                Meta meta = readMeta( layout, pagedFile );\n-                meta.verify( layout );\n-                format = TreeNodeSelector.selectByFormat( meta.getFormatIdentifier(), meta.getFormatVersion() );\n-            }\n-            this.bTreeNode = format.create( pageSize, layout );\n-            this.freeList = new FreeListIdProvider( pagedFile, pageSize, rootId, FreeListIdProvider.NO_MONITOR );\n-            this.writer = new SingleWriter( new InternalTreeLogic<>( freeList, bTreeNode, layout ) );\n-\n-            // Create or load state\n-            if ( created )\n-            {\n-                initializeAfterCreation( headerWriter );\n-            }\n-            else\n-            {\n-                loadState( pagedFile, headerReader );\n-            }\n-            this.monitor.startupState( clean );\n-\n-            // Prepare tree for action\n-            dirtyOnStartup = !clean;\n-            clean = false;\n-            bumpUnstableGeneration();\n-            forceState();\n-            cleaning = createCleanupJob( recoveryCleanupWorkCollector, dirtyOnStartup );\n-            success = true;\n-        }\n-        catch ( Throwable t )\n-        {\n-            appendTreeInformation( t );\n-            throw t;\n-        }\n-        finally\n-        {\n-            if ( !success )\n-            {\n-                close();\n-            }\n-        }\n+      TreeStatePair.initializeStatePages(cursor);\n     }\n \n-    private void initializeAfterCreation( Consumer<PageCursor> headerWriter ) throws IOException\n+    // Initialize index root node to a leaf node.\n+    try (PageCursor cursor = openRootCursor(PagedFile.PF_SHARED_WRITE_LOCK))\n     {\n-        // Initialize state\n-        try ( PageCursor cursor = pagedFile.io( 0 /*ignored*/, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-        {\n-            TreeStatePair.initializeStatePages( cursor );\n-        }\n+      long stableGeneration = stableGeneration(generation);\n+      long unstableGeneration = unstableGeneration(generation);\n+      bTreeNode.initializeLeaf(cursor, stableGeneration, unstableGeneration);\n+      checkOutOfBounds(cursor);\n+    }\n \n-        // Initialize index root node to a leaf node.\n-        try ( PageCursor cursor = openRootCursor( PagedFile.PF_SHARED_WRITE_LOCK ) )\n-        {\n-            long stableGeneration = stableGeneration( generation );\n-            long unstableGeneration = unstableGeneration( generation );\n-            bTreeNode.initializeLeaf( cursor, stableGeneration, unstableGeneration );\n-            checkOutOfBounds( cursor );\n-        }\n+    // Initialize free-list\n+    freeList.initializeAfterCreation();\n+    changesSinceLastCheckpoint = true;\n \n-        // Initialize free-list\n-        freeList.initializeAfterCreation();\n-        changesSinceLastCheckpoint = true;\n+    // Checkpoint to make the created root node stable. Forcing tree state also piggy-backs on this.\n+    checkpoint(IOLimiter.unlimited(), headerWriter);\n+    clean = true;\n+  }\n \n-        // Checkpoint to make the created root node stable. Forcing tree state also piggy-backs on this.\n-        checkpoint( IOLimiter.unlimited(), headerWriter );\n-        clean = true;\n+  private PagedFile openOrCreate(PageCache pageCache, File indexFile,\n+                                 int pageSizeForCreation) throws IOException, MetadataMismatchException\n+  {\n+    try\n+    {\n+      return openExistingIndexFile(pageCache, indexFile);\n+    } catch (NoSuchFileException e)\n+    {\n+      return createNewIndexFile(pageCache, indexFile, pageSizeForCreation);\n     }\n+  }\n \n-    private PagedFile openOrCreate( PageCache pageCache, File indexFile,\n-            int pageSizeForCreation ) throws IOException, MetadataMismatchException\n+  private static PagedFile openExistingIndexFile(PageCache pageCache, File indexFile) throws IOException, MetadataMismatchException\n+  {\n+    PagedFile pagedFile = pageCache.map(indexFile, pageCache.pageSize());\n+    // This index already exists, verify meta data aligns with expectations\n+\n+    boolean success = false;\n+    try\n     {\n-        try\n-        {\n-            return openExistingIndexFile( pageCache, indexFile );\n-        }\n-        catch ( NoSuchFileException e )\n-        {\n-            return createNewIndexFile( pageCache, indexFile, pageSizeForCreation );\n-        }\n+      // We're only interested in the page size really, so don't involve layout at this point\n+      Meta meta = readMeta(null, pagedFile);\n+      pagedFile = mapWithCorrectPageSize(pageCache, indexFile, pagedFile, meta.getPageSize());\n+      success = true;\n+      return pagedFile;\n+    } catch (IllegalStateException e)\n+    {\n+      throw new MetadataMismatchException(\"Index is not fully initialized since it's missing the meta page\", e);\n+    } finally\n+    {\n+      if (!success)\n+      {\n+        pagedFile.close();\n+      }\n     }\n-\n-    private static PagedFile openExistingIndexFile( PageCache pageCache, File indexFile ) throws IOException, MetadataMismatchException\n+  }\n+\n+  private PagedFile createNewIndexFile(PageCache pageCache, File indexFile, int pageSizeForCreation) throws IOException\n+  {\n+    // First time\n+    monitor.noStoreFile();\n+    int pageSize = pageSizeForCreation == 0 ? pageCache.pageSize() : pageSizeForCreation;\n+    if (pageSize > pageCache.pageSize())\n     {\n-        PagedFile pagedFile = pageCache.map( indexFile, pageCache.pageSize() );\n-        // This index already exists, verify meta data aligns with expectations\n-\n-        boolean success = false;\n-        try\n-        {\n-            // We're only interested in the page size really, so don't involve layout at this point\n-            Meta meta = readMeta( null, pagedFile );\n-            pagedFile = mapWithCorrectPageSize( pageCache, indexFile, pagedFile, meta.getPageSize() );\n-            success = true;\n-            return pagedFile;\n-        }\n-        catch ( IllegalStateException e )\n-        {\n-            throw new MetadataMismatchException( \"Index is not fully initialized since it's missing the meta page\", e );\n-        }\n-        finally\n-        {\n-            if ( !success )\n-            {\n-                pagedFile.close();\n-            }\n-        }\n+      throw new MetadataMismatchException(\n+          \"Tried to create tree with page size %d\" +\n+              \", but page cache used to create it has a smaller page size %d\" +\n+              \" so cannot be created\", pageSize, pageCache.pageSize());\n     }\n \n-    private PagedFile createNewIndexFile( PageCache pageCache, File indexFile, int pageSizeForCreation ) throws IOException\n+    // We need to create this index\n+    PagedFile pagedFile = pageCache.map(indexFile, pageSize, StandardOpenOption.CREATE);\n+    created = true;\n+    return pagedFile;\n+  }\n+\n+  private void loadState(PagedFile pagedFile, Header.Reader headerReader) throws IOException\n+  {\n+    Pair<TreeState, TreeState> states = loadStatePages(pagedFile);\n+    TreeState state = TreeStatePair.selectNewestValidState(states);\n+    try (PageCursor cursor = pagedFile.io(state.pageId(), PagedFile.PF_SHARED_READ_LOCK))\n     {\n-        // First time\n-        monitor.noStoreFile();\n-        int pageSize = pageSizeForCreation == 0 ? pageCache.pageSize() : pageSizeForCreation;\n-        if ( pageSize > pageCache.pageSize() )\n-        {\n-            throw new MetadataMismatchException(\n-                    \"Tried to create tree with page size %d\" +\n-                    \", but page cache used to create it has a smaller page size %d\" +\n-                    \" so cannot be created\", pageSize, pageCache.pageSize() );\n-        }\n-\n-        // We need to create this index\n-        PagedFile pagedFile = pageCache.map( indexFile, pageSize, StandardOpenOption.CREATE );\n-        created = true;\n-        return pagedFile;\n+      PageCursorUtil.goTo(cursor, \"header data\", state.pageId());\n+      doReadHeader(headerReader, cursor);\n     }\n-\n-    private void loadState( PagedFile pagedFile, Header.Reader headerReader ) throws IOException\n+    generation = Generation.generation(state.stableGeneration(), state.unstableGeneration());\n+    setRoot(state.rootId(), state.rootGeneration());\n+\n+    long lastId = state.lastId();\n+    long freeListWritePageId = state.freeListWritePageId();\n+    long freeListReadPageId = state.freeListReadPageId();\n+    int freeListWritePos = state.freeListWritePos();\n+    int freeListReadPos = state.freeListReadPos();\n+    freeList.initialize(lastId, freeListWritePageId, freeListReadPageId, freeListWritePos, freeListReadPos);\n+    clean = state.isClean();\n+  }\n+\n+  /**\n+   * Use when you are only interested in reading the header of existing index file without opening the index for writes.\n+   * Useful when reading header and the demands on matching layout can be relaxed a bit.\n+   *\n+   * @param pageCache    {@link PageCache} to use to map index file\n+   * @param indexFile    {@link File} containing the actual index\n+   * @param headerReader reads header data, previously written using {@link #checkpoint(IOLimiter, Consumer)}\n+   *                     or {@link #close()}\n+   * @throws IOException               On page cache error\n+   * @throws MetadataMismatchException if some meta page is missing (tree not fully initialized)\n+   */\n+  public static void readHeader(PageCache pageCache, File indexFile, Header.Reader headerReader)\n+      throws IOException, MetadataMismatchException\n+  {\n+    try (PagedFile pagedFile = openExistingIndexFile(pageCache, indexFile))\n     {\n-        Pair<TreeState,TreeState> states = loadStatePages( pagedFile );\n-        TreeState state = TreeStatePair.selectNewestValidState( states );\n-        try ( PageCursor cursor = pagedFile.io( state.pageId(), PagedFile.PF_SHARED_READ_LOCK ) )\n-        {\n-            PageCursorUtil.goTo( cursor, \"header data\", state.pageId() );\n-            doReadHeader( headerReader, cursor );\n-        }\n-        generation = Generation.generation( state.stableGeneration(), state.unstableGeneration() );\n-        setRoot( state.rootId(), state.rootGeneration() );\n-\n-        long lastId = state.lastId();\n-        long freeListWritePageId = state.freeListWritePageId();\n-        long freeListReadPageId = state.freeListReadPageId();\n-        int freeListWritePos = state.freeListWritePos();\n-        int freeListReadPos = state.freeListReadPos();\n-        freeList.initialize( lastId, freeListWritePageId, freeListReadPageId, freeListWritePos, freeListReadPos );\n-        clean = state.isClean();\n+      Pair<TreeState, TreeState> states = loadStatePages(pagedFile);\n+      TreeState state = TreeStatePair.selectNewestValidState(states);\n+      try (PageCursor cursor = pagedFile.io(state.pageId(), PagedFile.PF_SHARED_READ_LOCK))\n+      {\n+        PageCursorUtil.goTo(cursor, \"header data\", state.pageId());\n+        doReadHeader(headerReader, cursor);\n+      }\n+    } catch (Throwable t)\n+    {\n+      // Decorate outgoing exceptions with basic tree information. This is similar to how the constructor\n+      // appends its information, but the constructor has read more information at that point so this one\n+      // is a bit more sparse on information.\n+      withMessage(t, t.getMessage() + \" | \" + format(\"GBPTree[file:%s]\", indexFile));\n+      throw t;\n     }\n+  }\n \n-    /**\n-     * Use when you are only interested in reading the header of existing index file without opening the index for writes.\n-     * Useful when reading header and the demands on matching layout can be relaxed a bit.\n-     *\n-     * @param pageCache {@link PageCache} to use to map index file\n-     * @param indexFile {@link File} containing the actual index\n-     * @param headerReader reads header data, previously written using {@link #checkpoint(IOLimiter, Consumer)}\n-     * or {@link #close()}\n-     * @throws IOException On page cache error\n-     * @throws MetadataMismatchException if some meta page is missing (tree not fully initialized)\n-     */\n-    public static void readHeader( PageCache pageCache, File indexFile, Header.Reader headerReader )\n-            throws IOException, MetadataMismatchException\n+  private static void doReadHeader(Header.Reader headerReader, PageCursor cursor) throws IOException\n+  {\n+    int headerDataLength;\n+    do\n     {\n-        try ( PagedFile pagedFile = openExistingIndexFile( pageCache, indexFile ) )\n-        {\n-            Pair<TreeState,TreeState> states = loadStatePages( pagedFile );\n-            TreeState state = TreeStatePair.selectNewestValidState( states );\n-            try ( PageCursor cursor = pagedFile.io( state.pageId(), PagedFile.PF_SHARED_READ_LOCK ) )\n-            {\n-                PageCursorUtil.goTo( cursor, \"header data\", state.pageId() );\n-                doReadHeader( headerReader, cursor );\n-            }\n-        }\n-        catch ( Throwable t )\n-        {\n-            // Decorate outgoing exceptions with basic tree information. This is similar to how the constructor\n-            // appends its information, but the constructor has read more information at that point so this one\n-            // is a bit more sparse on information.\n-            withMessage( t, t.getMessage() + \" | \" + format( \"GBPTree[file:%s]\", indexFile ) );\n-            throw t;\n-        }\n+      TreeState.read(cursor);\n+      headerDataLength = cursor.getInt();\n     }\n+    while (cursor.shouldRetry());\n \n-    private static void doReadHeader( Header.Reader headerReader, PageCursor cursor ) throws IOException\n+    int headerDataOffset = cursor.getOffset();\n+    byte[] headerDataBytes = new byte[headerDataLength];\n+    do\n     {\n-        int headerDataLength;\n-        do\n-        {\n-            TreeState.read( cursor );\n-            headerDataLength = cursor.getInt();\n-        }\n-        while ( cursor.shouldRetry() );\n-\n-        int headerDataOffset = cursor.getOffset();\n-        byte[] headerDataBytes = new byte[headerDataLength];\n-        do\n-        {\n-            cursor.setOffset( headerDataOffset );\n-            cursor.getBytes( headerDataBytes );\n-        }\n-        while ( cursor.shouldRetry() );\n-\n-        headerReader.read( ByteBuffer.wrap( headerDataBytes ) );\n+      cursor.setOffset(headerDataOffset);\n+      cursor.getBytes(headerDataBytes);\n     }\n-\n-    private void writeState( PagedFile pagedFile, Header.Writer headerWriter ) throws IOException\n+    while (cursor.shouldRetry());\n+\n+    headerReader.read(ByteBuffer.wrap(headerDataBytes));\n+  }\n+\n+  private void writeState(PagedFile pagedFile, Header.Writer headerWriter) throws IOException\n+  {\n+    Pair<TreeState, TreeState> states = readStatePages(pagedFile);\n+    TreeState oldestState = TreeStatePair.selectOldestOrInvalid(states);\n+    long pageToOverwrite = oldestState.pageId();\n+    Root root = this.root;\n+    try (PageCursor cursor = pagedFile.io(pageToOverwrite, PagedFile.PF_SHARED_WRITE_LOCK))\n     {\n-        Pair<TreeState,TreeState> states = readStatePages( pagedFile );\n-        TreeState oldestState = TreeStatePair.selectOldestOrInvalid( states );\n-        long pageToOverwrite = oldestState.pageId();\n-        Root root = this.root;\n-        try ( PageCursor cursor = pagedFile.io( pageToOverwrite, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-        {\n-            PageCursorUtil.goTo( cursor, \"state page\", pageToOverwrite );\n-            TreeState.write( cursor, stableGeneration( generation ), unstableGeneration( generation ),\n-                    root.id(), root.generation(),\n-                    freeList.lastId(), freeList.writePageId(), freeList.readPageId(),\n-                    freeList.writePos(), freeList.readPos(), clean );\n+      PageCursorUtil.goTo(cursor, \"state page\", pageToOverwrite);\n+      TreeState.write(cursor, stableGeneration(generation), unstableGeneration(generation),\n+          root.id(), root.generation(),\n+          freeList.lastId(), freeList.writePageId(), freeList.readPageId(),\n+          freeList.writePos(), freeList.readPos(), clean);\n \n-            writerHeader( pagedFile, headerWriter, other( states, oldestState ), cursor );\n+      writerHeader(pagedFile, headerWriter, other(states, oldestState), cursor);\n \n-            checkOutOfBounds( cursor );\n-        }\n+      checkOutOfBounds(cursor);\n     }\n-\n-    private static void writerHeader( PagedFile pagedFile, Header.Writer headerWriter,\n-            TreeState otherState, PageCursor cursor ) throws IOException\n+  }\n+\n+  private static void writerHeader(PagedFile pagedFile, Header.Writer headerWriter,\n+                                   TreeState otherState, PageCursor cursor) throws IOException\n+  {\n+    // Write/carry over header\n+    int headerOffset = cursor.getOffset();\n+    int headerDataOffset = headerOffset + Integer.BYTES; // will contain length of written header data (below)\n+    if (otherState.isValid() || headerWriter != CARRY_OVER_PREVIOUS_HEADER)\n     {\n-        // Write/carry over header\n-        int headerOffset = cursor.getOffset();\n-        int headerDataOffset = headerOffset + Integer.BYTES; // will contain length of written header data (below)\n-        if ( otherState.isValid() || headerWriter != CARRY_OVER_PREVIOUS_HEADER )\n-        {\n-            PageCursor previousCursor = pagedFile.io( otherState.pageId(), PagedFile.PF_SHARED_READ_LOCK );\n-            PageCursorUtil.goTo( previousCursor, \"previous state page\", otherState.pageId() );\n-            checkOutOfBounds( cursor );\n-            do\n-            {\n-                // Clear any out-of-bounds from prior attempts\n-                cursor.checkAndClearBoundsFlag();\n-                // Place the previous state cursor after state data\n-                TreeState.read( previousCursor );\n-                // Read length of previous header\n-                int previousLength = previousCursor.getInt();\n-                // Reserve space to store length\n-                cursor.setOffset( headerDataOffset );\n-                // Write\n-                headerWriter.write( previousCursor, previousLength, cursor );\n-            }\n-            while ( previousCursor.shouldRetry() );\n-            checkOutOfBounds( previousCursor );\n-            checkOutOfBounds( cursor );\n-\n-            int length = cursor.getOffset() - headerDataOffset;\n-            cursor.putInt( headerOffset, length );\n-        }\n+      PageCursor previousCursor = pagedFile.io(otherState.pageId(), PagedFile.PF_SHARED_READ_LOCK);\n+      PageCursorUtil.goTo(previousCursor, \"previous state page\", otherState.pageId());\n+      checkOutOfBounds(cursor);\n+      do\n+      {\n+        // Clear any out-of-bounds from prior attempts\n+        cursor.checkAndClearBoundsFlag();\n+        // Place the previous state cursor after state data\n+        TreeState.read(previousCursor);\n+        // Read length of previous header\n+        int previousLength = previousCursor.getInt();\n+        // Reserve space to store length\n+        cursor.setOffset(headerDataOffset);\n+        // Write\n+        headerWriter.write(previousCursor, previousLength, cursor);\n+      }\n+      while (previousCursor.shouldRetry());\n+      checkOutOfBounds(previousCursor);\n+      checkOutOfBounds(cursor);\n+\n+      int length = cursor.getOffset() - headerDataOffset;\n+      cursor.putInt(headerOffset, length);\n     }\n-\n-    private static TreeState other( Pair<TreeState,TreeState> states, TreeState state )\n+  }\n+\n+  private static TreeState other(Pair<TreeState, TreeState> states, TreeState state)\n+  {\n+    return states.getLeft() == state ? states.getRight() : states.getLeft();\n+  }\n+\n+  /**\n+   * Basically {@link #readStatePages(PagedFile)} with some more checks, suitable for when first opening an index file,\n+   * not while running it and check pointing.\n+   *\n+   * @param pagedFile {@link PagedFile} to read the state pages from.\n+   * @return both read state pages.\n+   * @throws MetadataMismatchException if state pages are missing (file is smaller than that) or if they are both empty.\n+   * @throws IOException               on {@link PageCursor} error.\n+   */\n+  private static Pair<TreeState, TreeState> loadStatePages(PagedFile pagedFile) throws MetadataMismatchException, IOException\n+  {\n+    try\n     {\n-        return states.getLeft() == state ? states.getRight() : states.getLeft();\n-    }\n-\n-    /**\n-     * Basically {@link #readStatePages(PagedFile)} with some more checks, suitable for when first opening an index file,\n-     * not while running it and check pointing.\n-     *\n-     * @param pagedFile {@link PagedFile} to read the state pages from.\n-     * @return both read state pages.\n-     * @throws MetadataMismatchException if state pages are missing (file is smaller than that) or if they are both empty.\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    private static Pair<TreeState,TreeState> loadStatePages( PagedFile pagedFile ) throws MetadataMismatchException, IOException\n+      Pair<TreeState, TreeState> states = readStatePages(pagedFile);\n+      if (states.getLeft().isEmpty() && states.getRight().isEmpty())\n+      {\n+        throw new MetadataMismatchException(\"Index is not fully initialized since its state pages are empty\");\n+      }\n+      return states;\n+    } catch (IllegalStateException e)\n     {\n-        try\n-        {\n-            Pair<TreeState,TreeState> states = readStatePages( pagedFile );\n-            if ( states.getLeft().isEmpty() && states.getRight().isEmpty() )\n-            {\n-                throw new MetadataMismatchException( \"Index is not fully initialized since its state pages are empty\" );\n-            }\n-            return states;\n-        }\n-        catch ( IllegalStateException e )\n-        {\n-            throw new MetadataMismatchException( \"Index is not fully initialized since it's missing state pages\", e );\n-        }\n+      throw new MetadataMismatchException(\"Index is not fully initialized since it's missing state pages\", e);\n     }\n+  }\n \n-    private static Pair<TreeState,TreeState> readStatePages( PagedFile pagedFile ) throws IOException\n+  private static Pair<TreeState, TreeState> readStatePages(PagedFile pagedFile) throws IOException\n+  {\n+    Pair<TreeState, TreeState> states;\n+    try (PageCursor cursor = pagedFile.io(0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK))\n     {\n-        Pair<TreeState,TreeState> states;\n-        try ( PageCursor cursor = pagedFile.io( 0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK ) )\n-        {\n-            states = TreeStatePair.readStatePages(\n-                    cursor, IdSpace.STATE_PAGE_A, IdSpace.STATE_PAGE_B );\n-        }\n-        return states;\n+      states = TreeStatePair.readStatePages(\n+          cursor, IdSpace.STATE_PAGE_A, IdSpace.STATE_PAGE_B);\n     }\n-\n-    private static PageCursor openMetaPageCursor( PagedFile pagedFile, int pfFlags ) throws IOException\n+    return states;\n+  }\n+\n+  private static PageCursor openMetaPageCursor(PagedFile pagedFile, int pfFlags) throws IOException\n+  {\n+    PageCursor metaCursor = pagedFile.io(IdSpace.META_PAGE_ID, pfFlags);\n+    PageCursorUtil.goTo(metaCursor, \"meta page\", IdSpace.META_PAGE_ID);\n+    return metaCursor;\n+  }\n+\n+  private static <KEY, VALUE> Meta readMeta(Layout<KEY, VALUE> layout, PagedFile pagedFile)\n+      throws IOException\n+  {\n+    try (PageCursor metaCursor = openMetaPageCursor(pagedFile, PagedFile.PF_SHARED_READ_LOCK))\n     {\n-        PageCursor metaCursor = pagedFile.io( IdSpace.META_PAGE_ID, pfFlags );\n-        PageCursorUtil.goTo( metaCursor, \"meta page\", IdSpace.META_PAGE_ID );\n-        return metaCursor;\n+      return Meta.read(metaCursor, layout);\n     }\n+  }\n \n-    private static <KEY,VALUE> Meta readMeta( Layout<KEY,VALUE> layout, PagedFile pagedFile )\n-            throws IOException\n+  private void writeMeta(Layout<KEY, VALUE> layout, TreeNodeSelector.Factory format, PagedFile pagedFile) throws IOException\n+  {\n+    Meta meta = new Meta(format.formatIdentifier(), format.formatVersion(), pageSize, layout);\n+    try (PageCursor metaCursor = openMetaPageCursor(pagedFile, PagedFile.PF_SHARED_WRITE_LOCK))\n     {\n-        try ( PageCursor metaCursor = openMetaPageCursor( pagedFile, PagedFile.PF_SHARED_READ_LOCK ) )\n-        {\n-            return Meta.read( metaCursor, layout );\n-        }\n+      meta.write(metaCursor, layout);\n     }\n+  }\n \n-    private void writeMeta( Layout<KEY,VALUE> layout, TreeNodeSelector.Factory format, PagedFile pagedFile ) throws IOException\n+  private static PagedFile mapWithCorrectPageSize(PageCache pageCache, File indexFile, PagedFile pagedFile, int pageSize)\n+      throws IOException\n+  {\n+    // This index was created with another page size, re-open with that actual page size\n+    if (pageSize != pageCache.pageSize())\n     {\n-        Meta meta = new Meta( format.formatIdentifier(), format.formatVersion(), pageSize, layout );\n-        try ( PageCursor metaCursor = openMetaPageCursor( pagedFile, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-        {\n-            meta.write( metaCursor, layout );\n-        }\n+      if (pageSize > pageCache.pageSize() || pageSize < 0)\n+      {\n+        throw new MetadataMismatchException(\n+            \"Tried to create tree with page size %d, but page cache used to open it this time \" +\n+                \"has a smaller page size %d so cannot be opened\",\n+            pageSize, pageCache.pageSize());\n+      }\n+      pagedFile.close();\n+      return pageCache.map(indexFile, pageSize);\n     }\n-\n-    private static PagedFile mapWithCorrectPageSize( PageCache pageCache, File indexFile, PagedFile pagedFile, int pageSize )\n-            throws IOException\n+    return pagedFile;\n+  }\n+\n+  /**\n+   * Utility for {@link PagedFile#io(long, int) acquiring} a new {@link PageCursor},\n+   * placed at the current root id and which have had its {@link PageCursor#next()} called-\n+   *\n+   * @param pfFlags flags sent into {@link PagedFile#io(long, int)}.\n+   * @return {@link PageCursor} result from call to {@link PagedFile#io(long, int)} after it has been\n+   * placed at the current root and has had {@link PageCursor#next()} called.\n+   * @throws IOException on {@link PageCursor} error.\n+   */\n+  private PageCursor openRootCursor(int pfFlags) throws IOException\n+  {\n+    PageCursor cursor = pagedFile.io(0L /*Ignored*/, pfFlags);\n+    root.goTo(cursor);\n+    return cursor;\n+  }\n+\n+  /**\n+   * Seeks hits in this tree, given a key range. Hits are iterated over using the returned {@link RawCursor}.\n+   * There's no guarantee that neither the {@link Hit} nor key/value instances are immutable and so\n+   * if caller wants to cache the results it's safest to copy the instances, or rather their contents,\n+   * into its own result cache.\n+   * <p>\n+   * Seeks can go either forwards or backwards depending on the values of the key arguments.\n+   * <ul>\n+   * <li>\n+   * A {@code fromInclusive} that is smaller than the {@code toExclusive} results in results in ascending order.\n+   * </li>\n+   * <li>\n+   * A {@code fromInclusive} that is bigger than the {@code toExclusive} results in results in descending order.\n+   * </li>\n+   * </ul>\n+   *\n+   * @param fromInclusive lower bound of the range to seek (inclusive).\n+   * @param toExclusive   higher bound of the range to seek (exclusive).\n+   * @return a {@link RawCursor} used to iterate over the hits within the specified key range.\n+   * @throws IOException on error reading from index.\n+   */\n+  public RawCursor<Hit<KEY, VALUE>, IOException> seek(KEY fromInclusive, KEY toExclusive) throws IOException\n+  {\n+    long generation = this.generation;\n+    long stableGeneration = stableGeneration(generation);\n+    long unstableGeneration = unstableGeneration(generation);\n+\n+    PageCursor cursor = pagedFile.io(0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK);\n+    long rootGeneration = root.goTo(cursor);\n+\n+    // Returns cursor which is now initiated with left-most leaf node for the specified range\n+    return new SeekCursor<>(cursor, bTreeNode, fromInclusive, toExclusive, layout,\n+        stableGeneration, unstableGeneration, generationSupplier, rootCatchupSupplier.get(), rootGeneration,\n+        exceptionDecorator, SeekCursor.DEFAULT_MAX_READ_AHEAD);\n+  }\n+\n+  /**\n+   * Checkpoints and flushes any pending changes to storage. After a successful call to this method\n+   * the data is durable and safe. {@link #writer() Changes} made after this call and until crashing or\n+   * otherwise non-clean shutdown (by omitting calling checkpoint before {@link #close()}) will need to be replayed\n+   * next time this tree is opened.\n+   * <p>\n+   * Header writer is expected to leave consumed {@link PageCursor} at end of written header for calculation of\n+   * header size.\n+   *\n+   * @param ioLimiter    for controlling I/O usage.\n+   * @param headerWriter hook for writing header data, must leave cursor at end of written header.\n+   * @throws IOException on error flushing to storage.\n+   */\n+  public void checkpoint(IOLimiter ioLimiter, Consumer<PageCursor> headerWriter) throws IOException\n+  {\n+    checkpoint(ioLimiter, replace(headerWriter));\n+  }\n+\n+  /**\n+   * Performs a {@link #checkpoint(IOLimiter, Consumer) check point}, keeping any header information\n+   * written in previous check point.\n+   *\n+   * @param ioLimiter for controlling I/O usage.\n+   * @throws IOException on error flushing to storage.\n+   * @see #checkpoint(IOLimiter, Consumer)\n+   */\n+  public void checkpoint(IOLimiter ioLimiter) throws IOException\n+  {\n+    checkpoint(ioLimiter, CARRY_OVER_PREVIOUS_HEADER);\n+  }\n+\n+  private void checkpoint(IOLimiter ioLimiter, Header.Writer headerWriter) throws IOException\n+  {\n+    // Flush dirty pages of the tree, do this before acquiring the lock so that writers won't be\n+    // blocked while we do this\n+    pagedFile.flushAndForce(ioLimiter);\n+\n+    // Block writers, or if there's a current writer then wait for it to complete and then block\n+    // From this point and till the lock is released we know that the tree won't change.\n+    lock.writerAndCleanerLock();\n+    try\n     {\n-        // This index was created with another page size, re-open with that actual page size\n-        if ( pageSize != pageCache.pageSize() )\n-        {\n-            if ( pageSize > pageCache.pageSize() || pageSize < 0 )\n-            {\n-                throw new MetadataMismatchException(\n-                        \"Tried to create tree with page size %d, but page cache used to open it this time \" +\n-                        \"has a smaller page size %d so cannot be opened\",\n-                        pageSize, pageCache.pageSize() );\n-            }\n-            pagedFile.close();\n-            return pageCache.map( indexFile, pageSize );\n-        }\n-        return pagedFile;\n-    }\n-\n-    /**\n-     * Utility for {@link PagedFile#io(long, int) acquiring} a new {@link PageCursor},\n-     * placed at the current root id and which have had its {@link PageCursor#next()} called-\n-     *\n-     * @param pfFlags flags sent into {@link PagedFile#io(long, int)}.\n-     * @return {@link PageCursor} result from call to {@link PagedFile#io(long, int)} after it has been\n-     * placed at the current root and has had {@link PageCursor#next()} called.\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    private PageCursor openRootCursor( int pfFlags ) throws IOException\n+      assertRecoveryCleanSuccessful();\n+      // Flush dirty pages since that last flush above. This should be a very small set of pages\n+      // and should be rather fast. In here writers are blocked and we want to minimize this\n+      // windows of time as much as possible, that's why there's an initial flush outside this lock.\n+      pagedFile.flushAndForce();\n+\n+      // Increment generation, i.e. stable becomes current unstable and unstable increments by one\n+      // and write the tree state (rootId, lastId, generation a.s.o.) to state page.\n+      long unstableGeneration = unstableGeneration(generation);\n+      generation = Generation.generation(unstableGeneration, unstableGeneration + 1);\n+      writeState(pagedFile, headerWriter);\n+\n+      // Flush the state page.\n+      pagedFile.flushAndForce();\n+\n+      // Expose this fact.\n+      monitor.checkpointCompleted();\n+\n+      // Clear flag so that until next change there's no need to do another checkpoint.\n+      changesSinceLastCheckpoint = false;\n+    } finally\n     {\n-        PageCursor cursor = pagedFile.io( 0L /*Ignored*/, pfFlags );\n-        root.goTo( cursor );\n-        return cursor;\n+      // Unblock writers, any writes after this point and up until the next checkpoint will have\n+      // the new unstable generation.\n+      lock.writerAndCleanerUnlock();\n     }\n+  }\n \n-    /**\n-     * Seeks hits in this tree, given a key range. Hits are iterated over using the returned {@link RawCursor}.\n-     * There's no guarantee that neither the {@link Hit} nor key/value instances are immutable and so\n-     * if caller wants to cache the results it's safest to copy the instances, or rather their contents,\n-     * into its own result cache.\n-     * <p>\n-     * Seeks can go either forwards or backwards depending on the values of the key arguments.\n-     * <ul>\n-     * <li>\n-     * A {@code fromInclusive} that is smaller than the {@code toExclusive} results in results in ascending order.\n-     * </li>\n-     * <li>\n-     * A {@code fromInclusive} that is bigger than the {@code toExclusive} results in results in descending order.\n-     * </li>\n-     * </ul>\n-     *\n-     * @param fromInclusive lower bound of the range to seek (inclusive).\n-     * @param toExclusive higher bound of the range to seek (exclusive).\n-     * @return a {@link RawCursor} used to iterate over the hits within the specified key range.\n-     * @throws IOException on error reading from index.\n-     */\n-    public RawCursor<Hit<KEY,VALUE>,IOException> seek( KEY fromInclusive, KEY toExclusive ) throws IOException\n+  private void assertRecoveryCleanSuccessful() throws IOException\n+  {\n+    if (cleaning != null && cleaning.hasFailed())\n     {\n-        long generation = this.generation;\n-        long stableGeneration = stableGeneration( generation );\n-        long unstableGeneration = unstableGeneration( generation );\n-\n-        PageCursor cursor = pagedFile.io( 0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK );\n-        long rootGeneration = root.goTo( cursor );\n-\n-        // Returns cursor which is now initiated with left-most leaf node for the specified range\n-        return new SeekCursor<>( cursor, bTreeNode, fromInclusive, toExclusive, layout,\n-                stableGeneration, unstableGeneration, generationSupplier, rootCatchupSupplier.get(), rootGeneration,\n-                exceptionDecorator, SeekCursor.DEFAULT_MAX_READ_AHEAD );\n+      throw new IOException(\"Pointer cleaning during recovery failed\", cleaning.getCause());\n     }\n+  }\n+\n+  /**\n+   * Closes this tree and its associated resources.\n+   * <p>\n+   * NOTE: No {@link #checkpoint(IOLimiter) checkpoint} is performed.\n+   *\n+   * @throws IOException on error closing resources.\n+   */\n+  @Override\n+  public void close() throws IOException\n+  {\n+    lock.writerLock();\n+    try\n+    {\n+      if (closed)\n+      {\n+        return;\n+      }\n \n-    /**\n-     * Checkpoints and flushes any pending changes to storage. After a successful call to this method\n-     * the data is durable and safe. {@link #writer() Changes} made after this call and until crashing or\n-     * otherwise non-clean shutdown (by omitting calling checkpoint before {@link #close()}) will need to be replayed\n-     * next time this tree is opened.\n-     * <p>\n-     * Header writer is expected to leave consumed {@link PageCursor} at end of written header for calculation of\n-     * header size.\n-     *\n-     * @param ioLimiter for controlling I/O usage.\n-     * @param headerWriter hook for writing header data, must leave cursor at end of written header.\n-     * @throws IOException on error flushing to storage.\n-     */\n-    public void checkpoint( IOLimiter ioLimiter, Consumer<PageCursor> headerWriter ) throws IOException\n+      internalIndexClose();\n+    } catch (IOException ioe)\n     {\n-        checkpoint( ioLimiter, replace( headerWriter ) );\n+      try\n+      {\n+        pagedFile.flushAndForce();\n+        internalIndexClose();\n+      } catch (IOException e)\n+      {\n+        ioe.addSuppressed(e);\n+        throw ioe;\n+      }\n+    } finally\n+    {\n+      lock.writerUnlock();\n     }\n+  }\n \n-    /**\n-     * Performs a {@link #checkpoint(IOLimiter, Consumer) check point}, keeping any header information\n-     * written in previous check point.\n-     *\n-     * @param ioLimiter for controlling I/O usage.\n-     * @throws IOException on error flushing to storage.\n-     * @see #checkpoint(IOLimiter, Consumer)\n-     */\n-    public void checkpoint( IOLimiter ioLimiter ) throws IOException\n+  private void internalIndexClose() throws IOException\n+  {\n+    if (cleaning != null && !changesSinceLastCheckpoint && !cleaning.needed())\n     {\n-        checkpoint( ioLimiter, CARRY_OVER_PREVIOUS_HEADER );\n+      clean = true;\n+      forceState();\n     }\n-\n-    private void checkpoint( IOLimiter ioLimiter, Header.Writer headerWriter ) throws IOException\n+    pagedFile.close();\n+    closed = true;\n+  }\n+\n+  /**\n+   * Returns a {@link Writer} able to modify the index, i.e. insert and remove keys/values.\n+   * After usage the returned writer must be closed, typically by using try-with-resource clause.\n+   *\n+   * @return the single {@link Writer} for this index. The returned writer must be\n+   * {@link Writer#close() closed} before another caller can acquire this writer.\n+   * @throws IOException           on error accessing the index.\n+   * @throws IllegalStateException for calls made between a successful call to this method and closing the\n+   *                               returned writer.\n+   */\n+  public Writer<KEY, VALUE> writer() throws IOException\n+  {\n+    writer.initialize();\n+    changesSinceLastCheckpoint = true;\n+    return writer;\n+  }\n+\n+  private void setRoot(long rootId, long rootGeneration)\n+  {\n+    this.root = new Root(rootId, rootGeneration);\n+  }\n+\n+  /**\n+   * Bump unstable generation, increasing the gap between stable and unstable generation. All pointers and tree nodes\n+   * with generation in this gap are considered to be 'crashed' and will be cleaned up by {@link CleanupJob}\n+   * created in {@link #createCleanupJob(RecoveryCleanupWorkCollector, boolean)}.\n+   */\n+  private void bumpUnstableGeneration()\n+  {\n+    generation = generation(stableGeneration(generation), unstableGeneration(generation) + 1);\n+  }\n+\n+  private void forceState() throws IOException\n+  {\n+    if (changesSinceLastCheckpoint)\n     {\n-        // Flush dirty pages of the tree, do this before acquiring the lock so that writers won't be\n-        // blocked while we do this\n-        pagedFile.flushAndForce( ioLimiter );\n-\n-        // Block writers, or if there's a current writer then wait for it to complete and then block\n-        // From this point and till the lock is released we know that the tree won't change.\n-        lock.writerAndCleanerLock();\n-        try\n-        {\n-            assertRecoveryCleanSuccessful();\n-            // Flush dirty pages since that last flush above. This should be a very small set of pages\n-            // and should be rather fast. In here writers are blocked and we want to minimize this\n-            // windows of time as much as possible, that's why there's an initial flush outside this lock.\n-            pagedFile.flushAndForce();\n-\n-            // Increment generation, i.e. stable becomes current unstable and unstable increments by one\n-            // and write the tree state (rootId, lastId, generation a.s.o.) to state page.\n-            long unstableGeneration = unstableGeneration( generation );\n-            generation = Generation.generation( unstableGeneration, unstableGeneration + 1 );\n-            writeState( pagedFile, headerWriter );\n-\n-            // Flush the state page.\n-            pagedFile.flushAndForce();\n-\n-            // Expose this fact.\n-            monitor.checkpointCompleted();\n-\n-            // Clear flag so that until next change there's no need to do another checkpoint.\n-            changesSinceLastCheckpoint = false;\n-        }\n-        finally\n-        {\n-            // Unblock writers, any writes after this point and up until the next checkpoint will have\n-            // the new unstable generation.\n-            lock.writerAndCleanerUnlock();\n-        }\n+      throw new IllegalStateException(\"It seems that this method has been called in the wrong state. \" +\n+          \"It's expected that this is called after opening this tree, but before any changes \" +\n+          \"have been made\");\n     }\n \n-    private void assertRecoveryCleanSuccessful() throws IOException\n+    writeState(pagedFile, CARRY_OVER_PREVIOUS_HEADER);\n+    pagedFile.flushAndForce();\n+  }\n+\n+  /**\n+   * Called on start if tree was not clean.\n+   */\n+  private CleanupJob createCleanupJob(RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, boolean needsCleaning)\n+  {\n+    if (!needsCleaning)\n     {\n-        if ( cleaning != null && cleaning.hasFailed() )\n-        {\n-            throw new IOException( \"Pointer cleaning during recovery failed\", cleaning.getCause() );\n-        }\n+      return CleanupJob.CLEAN;\n+    } else\n+    {\n+      lock.cleanerLock();\n+      monitor.cleanupRegistered();\n+\n+      long generation = this.generation;\n+      long stableGeneration = stableGeneration(generation);\n+      long unstableGeneration = unstableGeneration(generation);\n+      long highTreeNodeId = freeList.lastId() + 1;\n+\n+      CrashGenerationCleaner crashGenerationCleaner =\n+          new CrashGenerationCleaner(pagedFile, bTreeNode, IdSpace.MIN_TREE_NODE_ID, highTreeNodeId,\n+              stableGeneration, unstableGeneration, monitor);\n+      GBPTreeCleanupJob cleanupJob = new GBPTreeCleanupJob(crashGenerationCleaner, lock, monitor, indexFile);\n+      recoveryCleanupWorkCollector.add(cleanupJob);\n+      return cleanupJob;\n     }\n-\n-    /**\n-     * Closes this tree and its associated resources.\n-     * <p>\n-     * NOTE: No {@link #checkpoint(IOLimiter) checkpoint} is performed.\n-     *\n-     * @throws IOException on error closing resources.\n-     */\n-    @Override\n-    public void close() throws IOException\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  void printTree() throws IOException\n+  {\n+    printTree(false, false, false, false);\n+  }\n+\n+  // Utility method\n+\n+  /**\n+   * Prints the contents of the tree to System.out.\n+   *\n+   * @param printValues   whether or not to print values in the leaf nodes.\n+   * @param printPosition whether or not to print position for each key.\n+   * @param printState    whether or not to print the tree state.\n+   * @param printHeader   whether or not to print header of each tree node\n+   * @throws IOException on I/O error.\n+   */\n+  @SuppressWarnings(\"SameParameterValue\")\n+  void printTree(boolean printValues, boolean printPosition, boolean printState, boolean printHeader) throws IOException\n+  {\n+    try (PageCursor cursor = openRootCursor(PagedFile.PF_SHARED_READ_LOCK))\n     {\n-        lock.writerLock();\n-        try\n-        {\n-            if ( closed )\n-            {\n-                return;\n-            }\n-\n-            internalIndexClose();\n-        }\n-        catch ( IOException ioe )\n-        {\n-            try\n-            {\n-                pagedFile.flushAndForce();\n-                internalIndexClose();\n-            }\n-            catch ( IOException e )\n-            {\n-                ioe.addSuppressed( e );\n-                throw ioe;\n-            }\n-        }\n-        finally\n-        {\n-            lock.writerUnlock();\n-        }\n+      new TreePrinter<>(bTreeNode, layout, stableGeneration(generation), unstableGeneration(generation))\n+          .printTree(cursor, writer.cursor, System.out, printValues, printPosition, printState, printHeader);\n     }\n-\n-    private void internalIndexClose() throws IOException\n+  }\n+  // Utility method\n+\n+  /**\n+   * Print node with given id to System.out, if node with id exists.\n+   *\n+   * @param id the page id of node to print\n+   */\n+  void printNode(int id) throws IOException\n+  {\n+    if (id < freeList.lastId())\n     {\n-        if ( cleaning != null && !changesSinceLastCheckpoint && !cleaning.needed() )\n+      // Use write lock to avoid adversary interference\n+      try (PageCursor cursor = pagedFile.io(id, PagedFile.PF_SHARED_WRITE_LOCK))\n+      {\n+        cursor.next();\n+        byte nodeType = TreeNode.nodeType(cursor);\n+        if (nodeType == TreeNode.NODE_TYPE_TREE_NODE)\n         {\n-            clean = true;\n-            forceState();\n+          bTreeNode.printNode(cursor, false, true, stableGeneration(generation), unstableGeneration(generation));\n         }\n-        pagedFile.close();\n-        closed = true;\n+      }\n     }\n+  }\n \n-    /**\n-     * Returns a {@link Writer} able to modify the index, i.e. insert and remove keys/values.\n-     * After usage the returned writer must be closed, typically by using try-with-resource clause.\n-     *\n-     * @return the single {@link Writer} for this index. The returned writer must be\n-     * {@link Writer#close() closed} before another caller can acquire this writer.\n-     * @throws IOException on error accessing the index.\n-     * @throws IllegalStateException for calls made between a successful call to this method and closing the\n-     * returned writer.\n-     */\n-    public Writer<KEY,VALUE> writer() throws IOException\n+  // Utility method\n+  boolean consistencyCheck() throws IOException\n+  {\n+    try (PageCursor cursor = pagedFile.io(0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK))\n     {\n-        writer.initialize();\n-        changesSinceLastCheckpoint = true;\n-        return writer;\n-    }\n+      long unstableGeneration = unstableGeneration(generation);\n+      ConsistencyChecker<KEY> consistencyChecker = new ConsistencyChecker<>(bTreeNode, layout,\n+          stableGeneration(generation), unstableGeneration);\n \n-    private void setRoot( long rootId, long rootGeneration )\n-    {\n-        this.root = new Root( rootId, rootGeneration );\n-    }\n+      long rootGeneration = root.goTo(cursor);\n+      boolean check = consistencyChecker.check(cursor, rootGeneration);\n+      root.goTo(cursor);\n \n-    /**\n-     * Bump unstable generation, increasing the gap between stable and unstable generation. All pointers and tree nodes\n-     * with generation in this gap are considered to be 'crashed' and will be cleaned up by {@link CleanupJob}\n-     * created in {@link #createCleanupJob(RecoveryCleanupWorkCollector, boolean)}.\n-     */\n-    private void bumpUnstableGeneration()\n-    {\n-        generation = generation( stableGeneration( generation ), unstableGeneration( generation ) + 1 );\n-    }\n+      PrimitiveLongSet freelistIds = Primitive.longSet();\n+      freeList.visitFreelistPageIds(freelistIds::add);\n+      freeList.visitUnacquiredIds(freelistIds::add, unstableGeneration);\n+      boolean checkSpace = consistencyChecker.checkSpace(cursor, freeList.lastId(), freelistIds.iterator());\n \n-    private void forceState() throws IOException\n-    {\n-        if ( changesSinceLastCheckpoint )\n-        {\n-            throw new IllegalStateException( \"It seems that this method has been called in the wrong state. \" +\n-                    \"It's expected that this is called after opening this tree, but before any changes \" +\n-                    \"have been made\" );\n-        }\n-\n-        writeState( pagedFile, CARRY_OVER_PREVIOUS_HEADER );\n-        pagedFile.flushAndForce();\n+      return check && checkSpace;\n     }\n-\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    long generation = this.generation;\n+    return format(\"GB+Tree[file:%s, layout:%s, generation:%d/%d]\",\n+        indexFile.getAbsolutePath(), layout,\n+        stableGeneration(generation), unstableGeneration(generation));\n+  }\n+\n+  private <E extends Throwable> E appendTreeInformation(E e)\n+  {\n+    return Exceptions.withMessage(e, e.getMessage() + \" | \" + toString());\n+  }\n+\n+  private class SingleWriter implements Writer<KEY, VALUE>\n+  {\n     /**\n-     * Called on start if tree was not clean.\n+     * Currently an index only supports one concurrent writer and so this boolean will act as\n+     * guard so that only one writer ever exist.\n      */\n-    private CleanupJob createCleanupJob( RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, boolean needsCleaning )\n-    {\n-        if ( !needsCleaning )\n-        {\n-            return CleanupJob.CLEAN;\n-        }\n-        else\n-        {\n-            lock.cleanerLock();\n-            monitor.cleanupRegistered();\n-\n-            long generation = this.generation;\n-            long stableGeneration = stableGeneration( generation );\n-            long unstableGeneration = unstableGeneration( generation );\n-            long highTreeNodeId = freeList.lastId() + 1;\n-\n-            CrashGenerationCleaner crashGenerationCleaner =\n-                    new CrashGenerationCleaner( pagedFile, bTreeNode, IdSpace.MIN_TREE_NODE_ID, highTreeNodeId,\n-                            stableGeneration, unstableGeneration, monitor );\n-            GBPTreeCleanupJob cleanupJob = new GBPTreeCleanupJob( crashGenerationCleaner, lock, monitor, indexFile );\n-            recoveryCleanupWorkCollector.add( cleanupJob );\n-            return cleanupJob;\n-        }\n-    }\n+    private final AtomicBoolean writerTaken = new AtomicBoolean();\n+    private final InternalTreeLogic<KEY, VALUE> treeLogic;\n+    private final StructurePropagation<KEY> structurePropagation;\n+    private PageCursor cursor;\n+\n+    // Writer can't live past a checkpoint because of the mutex with checkpoint,\n+    // therefore safe to locally cache these generation fields from the volatile generation in the tree\n+    private long stableGeneration;\n+    private long unstableGeneration;\n \n-    @SuppressWarnings( \"unused\" )\n-    void printTree() throws IOException\n+    SingleWriter(InternalTreeLogic<KEY, VALUE> treeLogic)\n     {\n-        printTree( false, false, false, false );\n+      this.structurePropagation = new StructurePropagation<>(layout.newKey(), layout.newKey(), layout.newKey());\n+      this.treeLogic = treeLogic;\n     }\n \n-    // Utility method\n     /**\n-     * Prints the contents of the tree to System.out.\n+     * When leaving initialize, writer should be in a fully consistent state.\n+     * <p>\n+     * Either fully initialized:\n+     * <ul>\n+     *    <li>{@link #writerTaken} - true</li>\n+     *    <li>{@link #lock} - writerLock locked</li>\n+     *    <li>{@link #cursor} - not null</li>\n+     * </ul>\n+     * Of fully closed:\n+     * <ul>\n+     *    <li>{@link #writerTaken} - false</li>\n+     *    <li>{@link #lock} - writerLock unlocked</li>\n+     *    <li>{@link #cursor} - null</li>\n+     * </ul>\n      *\n-     * @param printValues whether or not to print values in the leaf nodes.\n-     * @param printPosition whether or not to print position for each key.\n-     * @param printState whether or not to print the tree state.\n-     * @param printHeader whether or not to print header of each tree node\n-     * @throws IOException on I/O error.\n+     * @throws IOException if fail to open {@link PageCursor}\n      */\n-    @SuppressWarnings( \"SameParameterValue\" )\n-    void printTree( boolean printValues, boolean printPosition, boolean printState, boolean printHeader ) throws IOException\n+    void initialize() throws IOException\n     {\n-        try ( PageCursor cursor = openRootCursor( PagedFile.PF_SHARED_READ_LOCK ) )\n-        {\n-            new TreePrinter<>( bTreeNode, layout, stableGeneration( generation ), unstableGeneration( generation ) )\n-                .printTree( cursor, writer.cursor, System.out, printValues, printPosition, printState, printHeader );\n-        }\n-    }\n-    // Utility method\n-    /**\n-     * Print node with given id to System.out, if node with id exists.\n-     * @param id the page id of node to print\n-     */\n-    void printNode( int id ) throws IOException\n-    {\n-        if ( id < freeList.lastId() )\n+      if (!writerTaken.compareAndSet(false, true))\n+      {\n+        throw new IllegalStateException(\"Writer in \" + this + \" is already acquired by someone else. \" +\n+            \"Only a single writer is allowed. The writer will become available as soon as \" +\n+            \"acquired writer is closed\");\n+      }\n+\n+      boolean success = false;\n+      try\n+      {\n+        // Block here until cleaning has completed, if cleaning was required\n+        lock.writerAndCleanerLock();\n+        assertRecoveryCleanSuccessful();\n+        cursor = openRootCursor(PagedFile.PF_SHARED_WRITE_LOCK);\n+        stableGeneration = stableGeneration(generation);\n+        unstableGeneration = unstableGeneration(generation);\n+        assert assertNoSuccessor(cursor, stableGeneration, unstableGeneration);\n+        treeLogic.initialize(cursor);\n+        success = true;\n+      } catch (Throwable e)\n+      {\n+        appendTreeInformation(e);\n+        throw e;\n+      } finally\n+      {\n+        if (!success)\n         {\n-            // Use write lock to avoid adversary interference\n-            try ( PageCursor cursor = pagedFile.io( id, PagedFile.PF_SHARED_WRITE_LOCK ) )\n-            {\n-                cursor.next();\n-                byte nodeType = TreeNode.nodeType( cursor );\n-                if ( nodeType == TreeNode.NODE_TYPE_TREE_NODE )\n-                {\n-                    bTreeNode.printNode( cursor, false, true, stableGeneration( generation ), unstableGeneration( generation ) );\n-                }\n-            }\n+          close();\n         }\n+      }\n     }\n \n-    // Utility method\n-    boolean consistencyCheck() throws IOException\n+    @Override\n+    public void put(KEY key, VALUE value) throws IOException\n     {\n-        try ( PageCursor cursor = pagedFile.io( 0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK ) )\n-        {\n-            long unstableGeneration = unstableGeneration( generation );\n-            ConsistencyChecker<KEY> consistencyChecker = new ConsistencyChecker<>( bTreeNode, layout,\n-                    stableGeneration( generation ), unstableGeneration );\n-\n-            long rootGeneration = root.goTo( cursor );\n-            boolean check = consistencyChecker.check( cursor, rootGeneration );\n-            root.goTo( cursor );\n-\n-            PrimitiveLongSet freelistIds = Primitive.longSet();\n-            freeList.visitFreelistPageIds( freelistIds::add );\n-            freeList.visitUnacquiredIds( freelistIds::add, unstableGeneration );\n-            boolean checkSpace = consistencyChecker.checkSpace( cursor, freeList.lastId(), freelistIds.iterator() );\n-\n-            return check && checkSpace;\n-        }\n+      merge(key, value, ValueMergers.overwrite());\n     }\n \n     @Override\n-    public String toString()\n+    public void merge(KEY key, VALUE value, ValueMerger<KEY, VALUE> valueMerger) throws IOException\n     {\n-        long generation = this.generation;\n-        return format( \"GB+Tree[file:%s, layout:%s, generation:%d/%d]\",\n-                indexFile.getAbsolutePath(), layout,\n-                stableGeneration( generation ), unstableGeneration( generation ) );\n+      try\n+      {\n+        treeLogic.insert(cursor, structurePropagation, key, value, valueMerger,\n+            stableGeneration, unstableGeneration);\n+      } catch (Throwable e)\n+      {\n+        appendTreeInformation(e);\n+        throw e;\n+      }\n+\n+      handleStructureChanges();\n+\n+      checkOutOfBounds(cursor);\n     }\n \n-    private <E extends Throwable> E appendTreeInformation( E e )\n+    private void setRoot(long rootPointer)\n     {\n-        return Exceptions.withMessage( e, e.getMessage() + \" | \" + toString() );\n+      long rootId = GenerationSafePointerPair.pointer(rootPointer);\n+      GBPTree.this.setRoot(rootId, unstableGeneration);\n+      treeLogic.initialize(cursor);\n     }\n \n-    private class SingleWriter implements Writer<KEY,VALUE>\n+    @Override\n+    public VALUE remove(KEY key) throws IOException\n     {\n-        /**\n-         * Currently an index only supports one concurrent writer and so this boolean will act as\n-         * guard so that only one writer ever exist.\n-         */\n-        private final AtomicBoolean writerTaken = new AtomicBoolean();\n-        private final InternalTreeLogic<KEY,VALUE> treeLogic;\n-        private final StructurePropagation<KEY> structurePropagation;\n-        private PageCursor cursor;\n-\n-        // Writer can't live past a checkpoint because of the mutex with checkpoint,\n-        // therefore safe to locally cache these generation fields from the volatile generation in the tree\n-        private long stableGeneration;\n-        private long unstableGeneration;\n-\n-        SingleWriter( InternalTreeLogic<KEY,VALUE> treeLogic )\n-        {\n-            this.structurePropagation = new StructurePropagation<>( layout.newKey(), layout.newKey(), layout.newKey() );\n-            this.treeLogic = treeLogic;\n-        }\n-\n-        /**\n-         * When leaving initialize, writer should be in a fully consistent state.\n-         * <p>\n-         * Either fully initialized:\n-         * <ul>\n-         *    <li>{@link #writerTaken} - true</li>\n-         *    <li>{@link #lock} - writerLock locked</li>\n-         *    <li>{@link #cursor} - not null</li>\n-         * </ul>\n-         * Of fully closed:\n-         * <ul>\n-         *    <li>{@link #writerTaken} - false</li>\n-         *    <li>{@link #lock} - writerLock unlocked</li>\n-         *    <li>{@link #cursor} - null</li>\n-         * </ul>\n-         *\n-         * @throws IOException if fail to open {@link PageCursor}\n-         */\n-        void initialize() throws IOException\n-        {\n-            if ( !writerTaken.compareAndSet( false, true ) )\n-            {\n-                throw new IllegalStateException( \"Writer in \" + this + \" is already acquired by someone else. \" +\n-                        \"Only a single writer is allowed. The writer will become available as soon as \" +\n-                        \"acquired writer is closed\" );\n-            }\n-\n-            boolean success = false;\n-            try\n-            {\n-                // Block here until cleaning has completed, if cleaning was required\n-                lock.writerAndCleanerLock();\n-                assertRecoveryCleanSuccessful();\n-                cursor = openRootCursor( PagedFile.PF_SHARED_WRITE_LOCK );\n-                stableGeneration = stableGeneration( generation );\n-                unstableGeneration = unstableGeneration( generation );\n-                assert assertNoSuccessor( cursor, stableGeneration, unstableGeneration );\n-                treeLogic.initialize( cursor );\n-                success = true;\n-            }\n-            catch ( Throwable e )\n-            {\n-                appendTreeInformation( e );\n-                throw e;\n-            }\n-            finally\n-            {\n-                if ( !success )\n-                {\n-                    close();\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void put( KEY key, VALUE value ) throws IOException\n-        {\n-            merge( key, value, ValueMergers.overwrite() );\n-        }\n-\n-        @Override\n-        public void merge( KEY key, VALUE value, ValueMerger<KEY,VALUE> valueMerger ) throws IOException\n-        {\n-            try\n-            {\n-                treeLogic.insert( cursor, structurePropagation, key, value, valueMerger,\n-                        stableGeneration, unstableGeneration );\n-            }\n-            catch ( Throwable e )\n-            {\n-                appendTreeInformation( e );\n-                throw e;\n-            }\n-\n-            handleStructureChanges();\n-\n-            checkOutOfBounds( cursor );\n-        }\n-\n-        private void setRoot( long rootPointer )\n-        {\n-            long rootId = GenerationSafePointerPair.pointer( rootPointer );\n-            GBPTree.this.setRoot( rootId, unstableGeneration );\n-            treeLogic.initialize( cursor );\n-        }\n-\n-        @Override\n-        public VALUE remove( KEY key ) throws IOException\n-        {\n-            VALUE result;\n-            try\n-            {\n-                result = treeLogic.remove( cursor, structurePropagation, key, layout.newValue(),\n-                        stableGeneration, unstableGeneration );\n-            }\n-            catch ( Throwable e )\n-            {\n-                appendTreeInformation( e );\n-                throw e;\n-            }\n-\n-            handleStructureChanges();\n-\n-            checkOutOfBounds( cursor );\n-            return result;\n-        }\n-\n-        private void handleStructureChanges() throws IOException\n-        {\n-            if ( structurePropagation.hasRightKeyInsert )\n-            {\n-                // New root\n-                long newRootId = freeList.acquireNewId( stableGeneration, unstableGeneration );\n-                PageCursorUtil.goTo( cursor, \"new root\", newRootId );\n-\n-                bTreeNode.initializeInternal( cursor, stableGeneration, unstableGeneration );\n-                bTreeNode.setChildAt( cursor, structurePropagation.midChild, 0,\n-                        stableGeneration, unstableGeneration );\n-                bTreeNode.insertKeyAndRightChildAt( cursor, structurePropagation.rightKey, structurePropagation.rightChild, 0, 0,\n-                        stableGeneration, unstableGeneration );\n-                TreeNode.setKeyCount( cursor, 1 );\n-                setRoot( newRootId );\n-            }\n-            else if ( structurePropagation.hasMidChildUpdate )\n-            {\n-                setRoot( structurePropagation.midChild );\n-            }\n-            structurePropagation.clear();\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            if ( !writerTaken.compareAndSet( true, false ) )\n-            {\n-                throw new IllegalStateException( \"Tried to close writer of \" + GBPTree.this +\n-                        \", but writer is already closed.\" );\n-            }\n-            closeCursor();\n-            lock.writerAndCleanerUnlock();\n-        }\n+      VALUE result;\n+      try\n+      {\n+        result = treeLogic.remove(cursor, structurePropagation, key, layout.newValue(),\n+            stableGeneration, unstableGeneration);\n+      } catch (Throwable e)\n+      {\n+        appendTreeInformation(e);\n+        throw e;\n+      }\n+\n+      handleStructureChanges();\n+\n+      checkOutOfBounds(cursor);\n+      return result;\n+    }\n \n-        private void closeCursor()\n-        {\n-            if ( cursor != null )\n-            {\n-                cursor.close();\n-                cursor = null;\n-            }\n-        }\n+    private void handleStructureChanges() throws IOException\n+    {\n+      if (structurePropagation.hasRightKeyInsert)\n+      {\n+        // New root\n+        long newRootId = freeList.acquireNewId(stableGeneration, unstableGeneration);\n+        PageCursorUtil.goTo(cursor, \"new root\", newRootId);\n+\n+        bTreeNode.initializeInternal(cursor, stableGeneration, unstableGeneration);\n+        bTreeNode.setChildAt(cursor, structurePropagation.midChild, 0,\n+            stableGeneration, unstableGeneration);\n+        bTreeNode.insertKeyAndRightChildAt(cursor, structurePropagation.rightKey, structurePropagation.rightChild, 0, 0,\n+            stableGeneration, unstableGeneration);\n+        TreeNode.setKeyCount(cursor, 1);\n+        setRoot(newRootId);\n+      } else if (structurePropagation.hasMidChildUpdate)\n+      {\n+        setRoot(structurePropagation.midChild);\n+      }\n+      structurePropagation.clear();\n     }\n \n-    public boolean wasDirtyOnStartup()\n+    @Override\n+    public void close()\n     {\n-        return dirtyOnStartup;\n+      if (!writerTaken.compareAndSet(true, false))\n+      {\n+        throw new IllegalStateException(\"Tried to close writer of \" + GBPTree.this +\n+            \", but writer is already closed.\");\n+      }\n+      closeCursor();\n+      lock.writerAndCleanerUnlock();\n     }\n \n-    /**\n-     * Total size limit for key and value.\n-     * This limit includes storage overhead that is specific to key implementation for example entity id or meta data about type.\n-     * @return Total size limit for key and value or {@link TreeNode#NO_KEY_VALUE_SIZE_CAP} if no such value exists.\n-     */\n-    public int keyValueSizeCap()\n+    private void closeCursor()\n     {\n-        return bTreeNode.keyValueSizeCap();\n+      if (cursor != null)\n+      {\n+        cursor.close();\n+        cursor = null;\n+      }\n     }\n+  }\n+\n+  public boolean wasDirtyOnStartup()\n+  {\n+    return dirtyOnStartup;\n+  }\n+\n+  /**\n+   * Total size limit for key and value.\n+   * This limit includes storage overhead that is specific to key implementation for example entity id or meta data about type.\n+   *\n+   * @return Total size limit for key and value or {@link TreeNode#NO_KEY_VALUE_SIZE_CAP} if no such value exists.\n+   */\n+  public int keyValueSizeCap()\n+  {\n+    return bTreeNode.keyValueSizeCap();\n+  }\n }\n",
            "diff_size": 1789
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "588",
                    "column": "22",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "590",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "684",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "796",
                    "column": "26",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "798",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "854",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1022",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1077",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1179",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/286/GBPTree.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/286/GBPTree.java\nindex fe6cc6bf6fd..58549353ac7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/286/GBPTree.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/286/GBPTree.java\n@@ -134,42 +134,50 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         {\n             @Override\n             public void checkpointCompleted()\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void noStoreFile()\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void cleanupRegistered()\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void cleanupStarted()\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void cleanupFinished( long numberOfPagesVisited, long numberOfCleanedCrashPointers, long durationMillis )\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void cleanupClosed()\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void cleanupFailed( Throwable throwable )\n-            {   // no-op\n+            {\n+    // no-op\n             }\n \n             @Override\n             public void startupState( boolean clean )\n-            {   // no-op\n+            {\n+    // no-op\n             }\n         }\n \n@@ -444,7 +452,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n     public GBPTree( PageCache pageCache, File indexFile, Layout<KEY,VALUE> layout, int tentativePageSize,\n             Monitor monitor, Header.Reader headerReader, Consumer<PageCursor> headerWriter,\n             RecoveryCleanupWorkCollector recoveryCleanupWorkCollector ) throws IOException, MetadataMismatchException\n-    {\n+{\n         this.indexFile = indexFile;\n         this.monitor = monitor;\n         this.generation = Generation.generation( MIN_GENERATION, MIN_GENERATION + 1 );\n@@ -533,9 +541,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         clean = true;\n     }\n \n-    private PagedFile openOrCreate( PageCache pageCache, File indexFile,\n-            int pageSizeForCreation ) throws IOException, MetadataMismatchException\n-    {\n+    private PagedFile openOrCreate( PageCache pageCache, File indexFile, int pageSizeForCreation ) throws IOException, MetadataMismatchException\n+{\n         try\n         {\n             return openExistingIndexFile( pageCache, indexFile );\n@@ -578,12 +585,9 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         // First time\n         monitor.noStoreFile();\n         int pageSize = pageSizeForCreation == 0 ? pageCache.pageSize() : pageSizeForCreation;\n-        if ( pageSize > pageCache.pageSize() )\n+        if ( pageSize> pageCache.pageSize() )\n         {\n-            throw new MetadataMismatchException(\n-                    \"Tried to create tree with page size %d\" +\n-                    \", but page cache used to create it has a smaller page size %d\" +\n-                    \" so cannot be created\", pageSize, pageCache.pageSize() );\n+            throw new MetadataMismatchException( \"Tried to create tree with page size %d\" + \", but page cache used to create it has a smaller page size %d\" + \" so cannot be created\", pageSize, pageCache.pageSize() );\n         }\n \n         // We need to create this index\n@@ -601,7 +605,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             PageCursorUtil.goTo( cursor, \"header data\", state.pageId() );\n             doReadHeader( headerReader, cursor );\n         }\n-        generation = Generation.generation( state.stableGeneration(), state.unstableGeneration() );\n+\n+generation = Generation.generation( state.stableGeneration(), state.unstableGeneration() );\n         setRoot( state.rootId(), state.rootGeneration() );\n \n         long lastId = state.lastId();\n@@ -624,9 +629,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n      * @throws IOException On page cache error\n      * @throws MetadataMismatchException if some meta page is missing (tree not fully initialized)\n      */\n-    public static void readHeader( PageCache pageCache, File indexFile, Header.Reader headerReader )\n-            throws IOException, MetadataMismatchException\n-    {\n+    public static void readHeader( PageCache pageCache, File indexFile, Header.Reader headerReader ) throws IOException, MetadataMismatchException\n+{\n         try ( PagedFile pagedFile = openExistingIndexFile( pageCache, indexFile ) )\n         {\n             Pair<TreeState,TreeState> states = loadStatePages( pagedFile );\n@@ -665,8 +669,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             cursor.getBytes( headerDataBytes );\n         }\n         while ( cursor.shouldRetry() );\n-\n-        headerReader.read( ByteBuffer.wrap( headerDataBytes ) );\n+headerReader.read( ByteBuffer.wrap( headerDataBytes ) );\n     }\n \n     private void writeState( PagedFile pagedFile, Header.Writer headerWriter ) throws IOException\n@@ -678,12 +681,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         try ( PageCursor cursor = pagedFile.io( pageToOverwrite, PagedFile.PF_SHARED_WRITE_LOCK ) )\n         {\n             PageCursorUtil.goTo( cursor, \"state page\", pageToOverwrite );\n-            TreeState.write( cursor, stableGeneration( generation ), unstableGeneration( generation ),\n-                    root.id(), root.generation(),\n-                    freeList.lastId(), freeList.writePageId(), freeList.readPageId(),\n-                    freeList.writePos(), freeList.readPos(), clean );\n-\n-            writerHeader( pagedFile, headerWriter, other( states, oldestState ), cursor );\n+            TreeState.write( cursor, stableGeneration( generation ), unstableGeneration( generation ), root.id(), root.generation(), freeList.lastId(), freeList.writePageId(), freeList.readPageId(), freeList.writePos(), freeList.readPos(), clean );\n+writerHeader( pagedFile, headerWriter, other( states, oldestState ), cursor );\n \n             checkOutOfBounds( cursor );\n         }\n@@ -691,7 +690,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n \n     private static void writerHeader( PagedFile pagedFile, Header.Writer headerWriter,\n             TreeState otherState, PageCursor cursor ) throws IOException\n-    {\n+{\n         // Write/carry over header\n         int headerOffset = cursor.getOffset();\n         int headerDataOffset = headerOffset + Integer.BYTES; // will contain length of written header data (below)\n@@ -745,7 +744,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             {\n                 throw new MetadataMismatchException( \"Index is not fully initialized since its state pages are empty\" );\n             }\n-            return states;\n+\n+return states;\n         }\n         catch ( IllegalStateException e )\n         {\n@@ -758,10 +758,10 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         Pair<TreeState,TreeState> states;\n         try ( PageCursor cursor = pagedFile.io( 0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK ) )\n         {\n-            states = TreeStatePair.readStatePages(\n-                    cursor, IdSpace.STATE_PAGE_A, IdSpace.STATE_PAGE_B );\n+            states = TreeStatePair.readStatePages( cursor, IdSpace.STATE_PAGE_A, IdSpace.STATE_PAGE_B );\n         }\n-        return states;\n+\n+return states;\n     }\n \n     private static PageCursor openMetaPageCursor( PagedFile pagedFile, int pfFlags ) throws IOException\n@@ -771,9 +771,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         return metaCursor;\n     }\n \n-    private static <KEY,VALUE> Meta readMeta( Layout<KEY,VALUE> layout, PagedFile pagedFile )\n-            throws IOException\n-    {\n+    private static <KEY,VALUE> Meta readMeta( Layout<KEY,VALUE> layout, PagedFile pagedFile ) throws IOException\n+{\n         try ( PageCursor metaCursor = openMetaPageCursor( pagedFile, PagedFile.PF_SHARED_READ_LOCK ) )\n         {\n             return Meta.read( metaCursor, layout );\n@@ -789,23 +788,20 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         }\n     }\n \n-    private static PagedFile mapWithCorrectPageSize( PageCache pageCache, File indexFile, PagedFile pagedFile, int pageSize )\n-            throws IOException\n-    {\n+    private static PagedFile mapWithCorrectPageSize( PageCache pageCache, File indexFile, PagedFile pagedFile, int pageSize ) throws IOException\n+{\n         // This index was created with another page size, re-open with that actual page size\n         if ( pageSize != pageCache.pageSize() )\n         {\n-            if ( pageSize > pageCache.pageSize() || pageSize < 0 )\n+            if ( pageSize> pageCache.pageSize() || pageSize < 0 )\n             {\n-                throw new MetadataMismatchException(\n-                        \"Tried to create tree with page size %d, but page cache used to open it this time \" +\n-                        \"has a smaller page size %d so cannot be opened\",\n-                        pageSize, pageCache.pageSize() );\n+                throw new MetadataMismatchException( \"Tried to create tree with page size %d, but page cache used to open it this time \" + \"has a smaller page size %d so cannot be opened\", pageSize, pageCache.pageSize() );\n             }\n             pagedFile.close();\n             return pageCache.map( indexFile, pageSize );\n         }\n-        return pagedFile;\n+\n+return pagedFile;\n     }\n \n     /**\n@@ -850,14 +846,12 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         long generation = this.generation;\n         long stableGeneration = stableGeneration( generation );\n         long unstableGeneration = unstableGeneration( generation );\n-\n-        PageCursor cursor = pagedFile.io( 0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK );\n+PageCursor cursor = pagedFile.io( 0L /*ignored*/, PagedFile.PF_SHARED_READ_LOCK );\n         long rootGeneration = root.goTo( cursor );\n \n         // Returns cursor which is now initiated with left-most leaf node for the specified range\n         return new SeekCursor<>( cursor, bTreeNode, fromInclusive, toExclusive, layout,\n-                stableGeneration, unstableGeneration, generationSupplier, rootCatchupSupplier.get(), rootGeneration,\n-                exceptionDecorator, SeekCursor.DEFAULT_MAX_READ_AHEAD );\n+                stableGeneration, unstableGeneration, generationSupplier, rootCatchupSupplier.get(), rootGeneration, exceptionDecorator, SeekCursor.DEFAULT_MAX_READ_AHEAD );\n     }\n \n     /**\n@@ -1025,9 +1019,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n     {\n         if ( changesSinceLastCheckpoint )\n         {\n-            throw new IllegalStateException( \"It seems that this method has been called in the wrong state. \" +\n-                    \"It's expected that this is called after opening this tree, but before any changes \" +\n-                    \"have been made\" );\n+            throw new IllegalStateException( \"It seems that this method has been called in the wrong state. \" + \"It's expected that this is called after opening this tree, but before any changes \" + \"have been made\" );\n         }\n \n         writeState( pagedFile, CARRY_OVER_PREVIOUS_HEADER );\n@@ -1053,10 +1045,9 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             long unstableGeneration = unstableGeneration( generation );\n             long highTreeNodeId = freeList.lastId() + 1;\n \n-            CrashGenerationCleaner crashGenerationCleaner =\n-                    new CrashGenerationCleaner( pagedFile, bTreeNode, IdSpace.MIN_TREE_NODE_ID, highTreeNodeId,\n+            CrashGenerationCleaner crashGenerationCleaner = new CrashGenerationCleaner( pagedFile, bTreeNode, IdSpace.MIN_TREE_NODE_ID, highTreeNodeId,\n                             stableGeneration, unstableGeneration, monitor );\n-            GBPTreeCleanupJob cleanupJob = new GBPTreeCleanupJob( crashGenerationCleaner, lock, monitor, indexFile );\n+GBPTreeCleanupJob cleanupJob = new GBPTreeCleanupJob( crashGenerationCleaner, lock, monitor, indexFile );\n             recoveryCleanupWorkCollector.add( cleanupJob );\n             return cleanupJob;\n         }\n@@ -1083,9 +1074,8 @@ public class GBPTree<KEY,VALUE> implements Closeable\n     {\n         try ( PageCursor cursor = openRootCursor( PagedFile.PF_SHARED_READ_LOCK ) )\n         {\n-            new TreePrinter<>( bTreeNode, layout, stableGeneration( generation ), unstableGeneration( generation ) )\n-                .printTree( cursor, writer.cursor, System.out, printValues, printPosition, printState, printHeader );\n-        }\n+            new TreePrinter<>( bTreeNode, layout, stableGeneration( generation ), unstableGeneration( generation ) ).printTree( cursor, writer.cursor, System.out, printValues, printPosition, printState, printHeader );\n+    }\n     }\n     // Utility method\n     /**\n@@ -1117,17 +1107,14 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             long unstableGeneration = unstableGeneration( generation );\n             ConsistencyChecker<KEY> consistencyChecker = new ConsistencyChecker<>( bTreeNode, layout,\n                     stableGeneration( generation ), unstableGeneration );\n-\n-            long rootGeneration = root.goTo( cursor );\n+    long rootGeneration = root.goTo( cursor );\n             boolean check = consistencyChecker.check( cursor, rootGeneration );\n             root.goTo( cursor );\n-\n-            PrimitiveLongSet freelistIds = Primitive.longSet();\n+PrimitiveLongSet freelistIds = Primitive.longSet();\n             freeList.visitFreelistPageIds( freelistIds::add );\n             freeList.visitUnacquiredIds( freelistIds::add, unstableGeneration );\n             boolean checkSpace = consistencyChecker.checkSpace( cursor, freeList.lastId(), freelistIds.iterator() );\n-\n-            return check && checkSpace;\n+return check && checkSpace;\n         }\n     }\n \n@@ -1189,9 +1176,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         {\n             if ( !writerTaken.compareAndSet( false, true ) )\n             {\n-                throw new IllegalStateException( \"Writer in \" + this + \" is already acquired by someone else. \" +\n-                        \"Only a single writer is allowed. The writer will become available as soon as \" +\n-                        \"acquired writer is closed\" );\n+                throw new IllegalStateException( \"Writer in \" + this + \" is already acquired by someone else. \" + \"Only a single writer is allowed. The writer will become available as soon as \" + \"acquired writer is closed\" );\n             }\n \n             boolean success = false;\n@@ -1234,7 +1219,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             {\n                 treeLogic.insert( cursor, structurePropagation, key, value, valueMerger,\n                         stableGeneration, unstableGeneration );\n-            }\n+    }\n             catch ( Throwable e )\n             {\n                 appendTreeInformation( e );\n@@ -1261,7 +1246,7 @@ public class GBPTree<KEY,VALUE> implements Closeable\n             {\n                 result = treeLogic.remove( cursor, structurePropagation, key, layout.newValue(),\n                         stableGeneration, unstableGeneration );\n-            }\n+    }\n             catch ( Throwable e )\n             {\n                 appendTreeInformation( e );\n@@ -1281,13 +1266,12 @@ public class GBPTree<KEY,VALUE> implements Closeable\n                 // New root\n                 long newRootId = freeList.acquireNewId( stableGeneration, unstableGeneration );\n                 PageCursorUtil.goTo( cursor, \"new root\", newRootId );\n-\n-                bTreeNode.initializeInternal( cursor, stableGeneration, unstableGeneration );\n+bTreeNode.initializeInternal( cursor, stableGeneration, unstableGeneration );\n                 bTreeNode.setChildAt( cursor, structurePropagation.midChild, 0,\n                         stableGeneration, unstableGeneration );\n-                bTreeNode.insertKeyAndRightChildAt( cursor, structurePropagation.rightKey, structurePropagation.rightChild, 0, 0,\n+bTreeNode.insertKeyAndRightChildAt( cursor, structurePropagation.rightKey, structurePropagation.rightChild, 0, 0,\n                         stableGeneration, unstableGeneration );\n-                TreeNode.setKeyCount( cursor, 1 );\n+TreeNode.setKeyCount( cursor, 1 );\n                 setRoot( newRootId );\n             }\n             else if ( structurePropagation.hasMidChildUpdate )\n@@ -1302,10 +1286,10 @@ public class GBPTree<KEY,VALUE> implements Closeable\n         {\n             if ( !writerTaken.compareAndSet( true, false ) )\n             {\n-                throw new IllegalStateException( \"Tried to close writer of \" + GBPTree.this +\n-                        \", but writer is already closed.\" );\n+                throw new IllegalStateException( \"Tried to close writer of \" + GBPTree.this + \", but writer is already closed.\" );\n             }\n-            closeCursor();\n+\n+closeCursor();\n             lock.writerAndCleanerUnlock();\n         }\n \n@@ -1333,4 +1317,4 @@ public class GBPTree<KEY,VALUE> implements Closeable\n     {\n         return bTreeNode.keyValueSizeCap();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 91
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}