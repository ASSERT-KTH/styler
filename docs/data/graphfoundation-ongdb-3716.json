{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3716",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3716/GraphAlgoFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3716/GraphAlgoFactory.java\nindex b2766c6a6cc..1b7ec581061 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3716/GraphAlgoFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3716/GraphAlgoFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo;\n \n import org.neo4j.graphalgo.impl.path.AStar;\n@@ -42,254 +43,252 @@ import org.neo4j.kernel.impl.util.NoneStrictMath;\n  */\n public abstract class GraphAlgoFactory\n {\n-    /**\n-     * Returns an algorithm which can find all available paths between two\n-     * nodes. These returned paths can contain loops (i.e. a node can occur\n-     * more than once in any returned path).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param maxDepth the max {@link Path#length()} returned paths are\n-     * allowed to have.\n-     * @return an algorithm which finds all paths between two nodes.\n-     */\n-    public static PathFinder<Path> allPaths( PathExpander expander, int maxDepth )\n-    {\n-        return new AllPaths( maxDepth, expander );\n-    }\n+  /**\n+   * Returns an algorithm which can find all available paths between two\n+   * nodes. These returned paths can contain loops (i.e. a node can occur\n+   * more than once in any returned path).\n+   *\n+   * @param expander the {@link PathExpander} to use for expanding\n+   *                 {@link Relationship}s for each {@link Path}.\n+   * @param maxDepth the max {@link Path#length()} returned paths are\n+   *                 allowed to have.\n+   * @return an algorithm which finds all paths between two nodes.\n+   */\n+  public static PathFinder<Path> allPaths(PathExpander expander, int maxDepth)\n+  {\n+    return new AllPaths(maxDepth, expander);\n+  }\n \n-    /**\n-     * Returns an algorithm which can find all simple paths between two\n-     * nodes. These returned paths cannot contain loops (i.e. a node cannot\n-     * occur more than once in any returned path).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param maxDepth the max {@link Path#length()} returned paths are\n-     * allowed to have.\n-     * @return an algorithm which finds simple paths between two nodes.\n-     */\n-    public static PathFinder<Path> allSimplePaths( PathExpander expander,\n-            int maxDepth )\n-    {\n-        return new AllSimplePaths( maxDepth, expander );\n-    }\n+  /**\n+   * Returns an algorithm which can find all simple paths between two\n+   * nodes. These returned paths cannot contain loops (i.e. a node cannot\n+   * occur more than once in any returned path).\n+   *\n+   * @param expander the {@link PathExpander} to use for expanding\n+   *                 {@link Relationship}s for each {@link Path}.\n+   * @param maxDepth the max {@link Path#length()} returned paths are\n+   *                 allowed to have.\n+   * @return an algorithm which finds simple paths between two nodes.\n+   */\n+  public static PathFinder<Path> allSimplePaths(PathExpander expander,\n+                                                int maxDepth)\n+  {\n+    return new AllSimplePaths(maxDepth, expander);\n+  }\n \n-    /**\n-     * Returns an algorithm which can find all shortest paths (that is paths\n-     * with as short {@link Path#length()} as possible) between two nodes. These\n-     * returned paths cannot contain loops (i.e. a node cannot occur more than\n-     * once in any returned path).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     *            {@link Relationship}s for each {@link Path}.\n-     * @param maxDepth the max {@link Path#length()} returned paths are allowed\n-     *            to have.\n-     * @return an algorithm which finds shortest paths between two nodes.\n-     */\n-    public static PathFinder<Path> shortestPath( PathExpander expander, int maxDepth )\n-    {\n-        return new ShortestPath( maxDepth, expander );\n-    }\n+  /**\n+   * Returns an algorithm which can find all shortest paths (that is paths\n+   * with as short {@link Path#length()} as possible) between two nodes. These\n+   * returned paths cannot contain loops (i.e. a node cannot occur more than\n+   * once in any returned path).\n+   *\n+   * @param expander the {@link PathExpander} to use for expanding\n+   *                 {@link Relationship}s for each {@link Path}.\n+   * @param maxDepth the max {@link Path#length()} returned paths are allowed\n+   *                 to have.\n+   * @return an algorithm which finds shortest paths between two nodes.\n+   */\n+  public static PathFinder<Path> shortestPath(PathExpander expander, int maxDepth)\n+  {\n+    return new ShortestPath(maxDepth, expander);\n+  }\n \n-    /**\n-     * Returns an algorithm which can find all shortest paths (that is paths\n-     * with as short {@link Path#length()} as possible) between two nodes. These\n-     * returned paths cannot contain loops (i.e. a node cannot occur more than\n-     * once in any returned path).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     *            {@link Relationship}s for each {@link Path}.\n-     * @param maxDepth the max {@link Path#length()} returned paths are allowed\n-     *            to have.\n-     * @param maxHitCount the maximum number of {@link Path}s to return.\n-     * If this number of found paths are encountered the traversal will stop.\n-     * @return an algorithm which finds shortest paths between two nodes.\n-     */\n-    public static PathFinder<Path> shortestPath( PathExpander expander, int maxDepth, int maxHitCount )\n-    {\n-        return new ShortestPath( maxDepth, expander, maxHitCount );\n-    }\n+  /**\n+   * Returns an algorithm which can find all shortest paths (that is paths\n+   * with as short {@link Path#length()} as possible) between two nodes. These\n+   * returned paths cannot contain loops (i.e. a node cannot occur more than\n+   * once in any returned path).\n+   *\n+   * @param expander    the {@link PathExpander} to use for expanding\n+   *                    {@link Relationship}s for each {@link Path}.\n+   * @param maxDepth    the max {@link Path#length()} returned paths are allowed\n+   *                    to have.\n+   * @param maxHitCount the maximum number of {@link Path}s to return.\n+   *                    If this number of found paths are encountered the traversal will stop.\n+   * @return an algorithm which finds shortest paths between two nodes.\n+   */\n+  public static PathFinder<Path> shortestPath(PathExpander expander, int maxDepth, int maxHitCount)\n+  {\n+    return new ShortestPath(maxDepth, expander, maxHitCount);\n+  }\n \n-    /**\n-     * Returns an algorithm which can find simple all paths of a certain length\n-     * between two nodes. These returned paths cannot contain loops (i.e. a node\n-     * could not occur more than once in any returned path).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Node}.\n-     * @param length the {@link Path#length()} returned paths will have, if any\n-     * paths were found.\n-     * @return an algorithm which finds paths of a certain length between two nodes.\n-     */\n-    public static PathFinder<Path> pathsWithLength( PathExpander expander, int length )\n-    {\n-        return new ExactDepthPathFinder( expander, length, Integer.MAX_VALUE, false );\n-    }\n+  /**\n+   * Returns an algorithm which can find simple all paths of a certain length\n+   * between two nodes. These returned paths cannot contain loops (i.e. a node\n+   * could not occur more than once in any returned path).\n+   *\n+   * @param expander the {@link PathExpander} to use for expanding\n+   *                 {@link Relationship}s for each {@link Node}.\n+   * @param length   the {@link Path#length()} returned paths will have, if any\n+   *                 paths were found.\n+   * @return an algorithm which finds paths of a certain length between two nodes.\n+   */\n+  public static PathFinder<Path> pathsWithLength(PathExpander expander, int length)\n+  {\n+    return new ExactDepthPathFinder(expander, length, Integer.MAX_VALUE, false);\n+  }\n \n-    /**\n-     * Returns an {@link PathFinder} which uses the A* algorithm to find the\n-     * cheapest path between two nodes. The definition of \"cheap\" is the lowest\n-     * possible cost to get from the start node to the end node, where the cost\n-     * is returned from {@code lengthEvaluator} and {@code estimateEvaluator}.\n-     * These returned paths cannot contain loops (i.e. a node cannot occur more\n-     * than once in any returned path).\n-     *\n-     * See http://en.wikipedia.org/wiki/A*_search_algorithm for more\n-     * information.\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param lengthEvaluator evaluator that can return the cost represented\n-     * by each relationship the algorithm traverses.\n-     * @param estimateEvaluator evaluator that returns an (optimistic)\n-     * estimation of the cost to get from the current node (in the traversal)\n-     * to the end node.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the A* algorithm.\n-     */\n-    public static PathFinder<WeightedPath> aStar( PathExpander expander,\n-            CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n-    {\n-        return new AStar( expander, lengthEvaluator, estimateEvaluator );\n-    }\n+  /**\n+   * Returns an {@link PathFinder} which uses the A* algorithm to find the\n+   * cheapest path between two nodes. The definition of \"cheap\" is the lowest\n+   * possible cost to get from the start node to the end node, where the cost\n+   * is returned from {@code lengthEvaluator} and {@code estimateEvaluator}.\n+   * These returned paths cannot contain loops (i.e. a node cannot occur more\n+   * than once in any returned path).\n+   * <p>\n+   * See http://en.wikipedia.org/wiki/A*_search_algorithm for more\n+   * information.\n+   *\n+   * @param expander          the {@link PathExpander} to use for expanding\n+   *                          {@link Relationship}s for each {@link Path}.\n+   * @param lengthEvaluator   evaluator that can return the cost represented\n+   *                          by each relationship the algorithm traverses.\n+   * @param estimateEvaluator evaluator that returns an (optimistic)\n+   *                          estimation of the cost to get from the current node (in the traversal)\n+   *                          to the end node.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the A* algorithm.\n+   */\n+  public static PathFinder<WeightedPath> aStar(PathExpander expander,\n+                                               CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator)\n+  {\n+    return new AStar(expander, lengthEvaluator, estimateEvaluator);\n+  }\n \n-    /**\n-     * Returns a {@link PathFinder} which uses the Dijkstra algorithm to find\n-     * the cheapest path between two nodes. The definition of \"cheap\" is the\n-     * lowest possible cost to get from the start node to the end node, where\n-     * the cost is returned from {@code costEvaluator}. These returned paths\n-     * cannot contain loops (i.e. a node cannot occur more than once in any\n-     * returned path).\n-     *\n-     * Dijkstra assumes none negative costs on all considered relationships.\n-     * If this is not the case behaviour is undefined. Do not use Dijkstra\n-     * with negative weights or use a {@link CostEvaluator} that handles\n-     * negative weights.\n-     *\n-     * See http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm for more\n-     * information.\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param costEvaluator evaluator that can return the cost represented\n-     * by each relationship the algorithm traverses.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the Dijkstra algorithm.\n-     */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            CostEvaluator<Double> costEvaluator )\n-    {\n-        return new DijkstraBidirectional( expander, costEvaluator );\n-    }\n+  /**\n+   * Returns a {@link PathFinder} which uses the Dijkstra algorithm to find\n+   * the cheapest path between two nodes. The definition of \"cheap\" is the\n+   * lowest possible cost to get from the start node to the end node, where\n+   * the cost is returned from {@code costEvaluator}. These returned paths\n+   * cannot contain loops (i.e. a node cannot occur more than once in any\n+   * returned path).\n+   * <p>\n+   * Dijkstra assumes none negative costs on all considered relationships.\n+   * If this is not the case behaviour is undefined. Do not use Dijkstra\n+   * with negative weights or use a {@link CostEvaluator} that handles\n+   * negative weights.\n+   * <p>\n+   * See http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm for more\n+   * information.\n+   *\n+   * @param expander      the {@link PathExpander} to use for expanding\n+   *                      {@link Relationship}s for each {@link Path}.\n+   * @param costEvaluator evaluator that can return the cost represented\n+   *                      by each relationship the algorithm traverses.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the Dijkstra algorithm.\n+   */\n+  public static PathFinder<WeightedPath> dijkstra(PathExpander expander,\n+                                                  CostEvaluator<Double> costEvaluator)\n+  {\n+    return new DijkstraBidirectional(expander, costEvaluator);\n+  }\n \n-    /**\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation.\n-     *\n-     * Uses a cost evaluator which uses the supplied property key to\n-     * represent the cost (values of type <b>double</b>).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param relationshipPropertyRepresentingCost the property to represent cost\n-     * on each relationship the algorithm traverses.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the Dijkstra algorithm.\n-     */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            String relationshipPropertyRepresentingCost )\n-    {\n-        return dijkstra( expander, new DoubleEvaluator( relationshipPropertyRepresentingCost ) );\n-    }\n+  /**\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation.\n+   * <p>\n+   * Uses a cost evaluator which uses the supplied property key to\n+   * represent the cost (values of type <b>double</b>).\n+   *\n+   * @param expander                             the {@link PathExpander} to use for expanding\n+   *                                             {@link Relationship}s for each {@link Path}.\n+   * @param relationshipPropertyRepresentingCost the property to represent cost\n+   *                                             on each relationship the algorithm traverses.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the Dijkstra algorithm.\n+   */\n+  public static PathFinder<WeightedPath> dijkstra(PathExpander expander,\n+                                                  String relationshipPropertyRepresentingCost)\n+  {\n+    return dijkstra(expander, new DoubleEvaluator(relationshipPropertyRepresentingCost));\n+  }\n \n-    /**\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation\n-     *\n-     * Instead of finding all shortest paths with equal cost, find the top {@code numberOfWantedPaths} paths.\n-     * This is usually slower than finding all shortest paths with equal cost.\n-     *\n-     * Uses a cost evaluator which uses the supplied property key to\n-     * represent the cost (values of type <b>double</b>).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param relationshipPropertyRepresentingCost the property to represent cost\n-     * on each relationship the algorithm traverses.\n-     * @param numberOfWantedPaths number of paths to find.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the Dijkstra algorithm.\n-     */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            String relationshipPropertyRepresentingCost, int numberOfWantedPaths )\n-    {\n-        return dijkstra( expander, new DoubleEvaluator( relationshipPropertyRepresentingCost ), numberOfWantedPaths );\n-    }\n+  /**\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation\n+   * <p>\n+   * Instead of finding all shortest paths with equal cost, find the top {@code numberOfWantedPaths} paths.\n+   * This is usually slower than finding all shortest paths with equal cost.\n+   * <p>\n+   * Uses a cost evaluator which uses the supplied property key to\n+   * represent the cost (values of type <b>double</b>).\n+   *\n+   * @param expander                             the {@link PathExpander} to use for expanding\n+   *                                             {@link Relationship}s for each {@link Path}.\n+   * @param relationshipPropertyRepresentingCost the property to represent cost\n+   *                                             on each relationship the algorithm traverses.\n+   * @param numberOfWantedPaths                  number of paths to find.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the Dijkstra algorithm.\n+   */\n+  public static PathFinder<WeightedPath> dijkstra(PathExpander expander,\n+                                                  String relationshipPropertyRepresentingCost, int numberOfWantedPaths)\n+  {\n+    return dijkstra(expander, new DoubleEvaluator(relationshipPropertyRepresentingCost), numberOfWantedPaths);\n+  }\n \n-    /**\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation\n-     *\n-     * Instead of finding all shortest paths with equal cost, find the top {@code numberOfWantedPaths} paths.\n-     * This is usually slower than finding all shortest paths with equal cost.\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param costEvaluator evaluator that can return the cost represented\n-     * by each relationship the algorithm traverses.\n-     * @param numberOfWantedPaths number of paths to find.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the Dijkstra algorithm.\n-     */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            CostEvaluator<Double> costEvaluator, int numberOfWantedPaths )\n-    {\n-        return new Dijkstra( expander, costEvaluator, NoneStrictMath.EPSILON,\n-                PathInterestFactory.numberOfShortest( NoneStrictMath.EPSILON, numberOfWantedPaths ) );\n-    }\n+  /**\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation\n+   * <p>\n+   * Instead of finding all shortest paths with equal cost, find the top {@code numberOfWantedPaths} paths.\n+   * This is usually slower than finding all shortest paths with equal cost.\n+   *\n+   * @param expander            the {@link PathExpander} to use for expanding\n+   *                            {@link Relationship}s for each {@link Path}.\n+   * @param costEvaluator       evaluator that can return the cost represented\n+   *                            by each relationship the algorithm traverses.\n+   * @param numberOfWantedPaths number of paths to find.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the Dijkstra algorithm.\n+   */\n+  public static PathFinder<WeightedPath> dijkstra(PathExpander expander,\n+                                                  CostEvaluator<Double> costEvaluator, int numberOfWantedPaths)\n+  {\n+    return new Dijkstra(expander, costEvaluator, NoneStrictMath.EPSILON,\n+        PathInterestFactory.numberOfShortest(NoneStrictMath.EPSILON, numberOfWantedPaths));\n+  }\n \n-    /**\n-     * @deprecated Dijkstra should not be used with state on {@link PathExpander}\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)}.\n-     *\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation.\n-     *\n-     * Uses a cost evaluator which uses the supplied property key to\n-     * represent the cost (values of type <b>double</b>).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param stateFactory initial state for the traversal branches.\n-     * @param costEvaluator the cost evaluator for each relationship the algorithm traverses.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the Dijkstra algorithm.\n-     */\n-    @Deprecated\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator )\n-    {\n-        return new Dijkstra( expander, stateFactory, costEvaluator );\n-    }\n+  /**\n+   * @param expander      the {@link PathExpander} to use for expanding\n+   *                      {@link Relationship}s for each {@link Path}.\n+   * @param stateFactory  initial state for the traversal branches.\n+   * @param costEvaluator the cost evaluator for each relationship the algorithm traverses.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the Dijkstra algorithm.\n+   * @deprecated Dijkstra should not be used with state on {@link PathExpander}\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)}.\n+   * <p>\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation.\n+   * <p>\n+   * Uses a cost evaluator which uses the supplied property key to\n+   * represent the cost (values of type <b>double</b>).\n+   */\n+  @Deprecated\n+  public static PathFinder<WeightedPath> dijkstra(PathExpander expander,\n+                                                  InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator)\n+  {\n+    return new Dijkstra(expander, stateFactory, costEvaluator);\n+  }\n \n-    /**\n-     * @deprecated Dijkstra should not be used with state on {@link PathExpander}\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)}.\n-     *\n-     * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation.\n-     *\n-     * Uses a cost evaluator which uses the supplied property key to\n-     * represent the cost (values of type <b>double</b>).\n-     *\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param stateFactory initial state for the traversal branches.\n-     * @param relationshipPropertyRepresentingCost the property to represent cost\n-     * on each relationship the algorithm traverses.\n-     * @return an algorithm which finds the cheapest path between two nodes\n-     * using the Dijkstra algorithm.\n-     */\n-    @Deprecated\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            InitialBranchState stateFactory, String relationshipPropertyRepresentingCost )\n-    {\n-        return dijkstra( expander, stateFactory, new DoubleEvaluator( relationshipPropertyRepresentingCost ) );\n-    }\n+  /**\n+   * @param expander                             the {@link PathExpander} to use for expanding\n+   *                                             {@link Relationship}s for each {@link Path}.\n+   * @param stateFactory                         initial state for the traversal branches.\n+   * @param relationshipPropertyRepresentingCost the property to represent cost\n+   *                                             on each relationship the algorithm traverses.\n+   * @return an algorithm which finds the cheapest path between two nodes\n+   * using the Dijkstra algorithm.\n+   * @deprecated Dijkstra should not be used with state on {@link PathExpander}\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)}.\n+   * <p>\n+   * See {@link #dijkstra(PathExpander, CostEvaluator)} for documentation.\n+   * <p>\n+   * Uses a cost evaluator which uses the supplied property key to\n+   * represent the cost (values of type <b>double</b>).\n+   */\n+  @Deprecated\n+  public static PathFinder<WeightedPath> dijkstra(PathExpander expander,\n+                                                  InitialBranchState stateFactory, String relationshipPropertyRepresentingCost)\n+  {\n+    return dijkstra(expander, stateFactory, new DoubleEvaluator(relationshipPropertyRepresentingCost));\n+  }\n }\n",
            "diff_size": 240
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3716/GraphAlgoFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3716/GraphAlgoFactory.java\nindex b2766c6a6cc..be5f1527fd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3716/GraphAlgoFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3716/GraphAlgoFactory.java\n@@ -69,8 +69,7 @@ public abstract class GraphAlgoFactory\n      * allowed to have.\n      * @return an algorithm which finds simple paths between two nodes.\n      */\n-    public static PathFinder<Path> allSimplePaths( PathExpander expander,\n-            int maxDepth )\n+    public static PathFinder<Path> allSimplePaths( PathExpander expander, int maxDepth )\n     {\n         return new AllSimplePaths( maxDepth, expander );\n     }\n@@ -148,8 +147,7 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the A* algorithm.\n      */\n-    public static PathFinder<WeightedPath> aStar( PathExpander expander,\n-            CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+    public static PathFinder<WeightedPath> aStar( PathExpander expander, CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n     {\n         return new AStar( expander, lengthEvaluator, estimateEvaluator );\n     }\n@@ -177,8 +175,7 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            CostEvaluator<Double> costEvaluator )\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator )\n     {\n         return new DijkstraBidirectional( expander, costEvaluator );\n     }\n@@ -239,8 +236,7 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            CostEvaluator<Double> costEvaluator, int numberOfWantedPaths )\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator, int numberOfWantedPaths )\n     {\n         return new Dijkstra( expander, costEvaluator, NoneStrictMath.EPSILON,\n                 PathInterestFactory.numberOfShortest( NoneStrictMath.EPSILON, numberOfWantedPaths ) );\n@@ -292,4 +288,4 @@ public abstract class GraphAlgoFactory\n     {\n         return dijkstra( expander, stateFactory, new DoubleEvaluator( relationshipPropertyRepresentingCost ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3716/GraphAlgoFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3716/GraphAlgoFactory.java\nindex b2766c6a6cc..b8228dbd723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3716/GraphAlgoFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3716/GraphAlgoFactory.java\n@@ -40,6 +40,7 @@ import org.neo4j.kernel.impl.util.NoneStrictMath;\n  * graph algorithms for Neo4j. The algorithms exposed here are implementations\n  * which are tested extensively and also scale on bigger graphs.\n  */\n+\n public abstract class GraphAlgoFactory\n {\n     /**\n@@ -69,8 +70,8 @@ public abstract class GraphAlgoFactory\n      * allowed to have.\n      * @return an algorithm which finds simple paths between two nodes.\n      */\n-    public static PathFinder<Path> allSimplePaths( PathExpander expander,\n-            int maxDepth )\n+\n+    public static PathFinder<Path> allSimplePaths( PathExpander expander, int maxDepth )\n     {\n         return new AllSimplePaths( maxDepth, expander );\n     }\n@@ -87,6 +88,7 @@ public abstract class GraphAlgoFactory\n      *            to have.\n      * @return an algorithm which finds shortest paths between two nodes.\n      */\n+\n     public static PathFinder<Path> shortestPath( PathExpander expander, int maxDepth )\n     {\n         return new ShortestPath( maxDepth, expander );\n@@ -106,6 +108,7 @@ public abstract class GraphAlgoFactory\n      * If this number of found paths are encountered the traversal will stop.\n      * @return an algorithm which finds shortest paths between two nodes.\n      */\n+\n     public static PathFinder<Path> shortestPath( PathExpander expander, int maxDepth, int maxHitCount )\n     {\n         return new ShortestPath( maxDepth, expander, maxHitCount );\n@@ -122,6 +125,7 @@ public abstract class GraphAlgoFactory\n      * paths were found.\n      * @return an algorithm which finds paths of a certain length between two nodes.\n      */\n+\n     public static PathFinder<Path> pathsWithLength( PathExpander expander, int length )\n     {\n         return new ExactDepthPathFinder( expander, length, Integer.MAX_VALUE, false );\n@@ -148,8 +152,8 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the A* algorithm.\n      */\n-    public static PathFinder<WeightedPath> aStar( PathExpander expander,\n-            CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+\n+    public static PathFinder<WeightedPath> aStar( PathExpander expander, CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n     {\n         return new AStar( expander, lengthEvaluator, estimateEvaluator );\n     }\n@@ -177,8 +181,8 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            CostEvaluator<Double> costEvaluator )\n+\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator )\n     {\n         return new DijkstraBidirectional( expander, costEvaluator );\n     }\n@@ -196,8 +200,8 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            String relationshipPropertyRepresentingCost )\n+\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, String relationshipPropertyRepresentingCost )\n     {\n         return dijkstra( expander, new DoubleEvaluator( relationshipPropertyRepresentingCost ) );\n     }\n@@ -219,8 +223,8 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            String relationshipPropertyRepresentingCost, int numberOfWantedPaths )\n+\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, String relationshipPropertyRepresentingCost, int numberOfWantedPaths )\n     {\n         return dijkstra( expander, new DoubleEvaluator( relationshipPropertyRepresentingCost ), numberOfWantedPaths );\n     }\n@@ -239,11 +243,10 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            CostEvaluator<Double> costEvaluator, int numberOfWantedPaths )\n+\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, CostEvaluator<Double> costEvaluator, int numberOfWantedPaths )\n     {\n-        return new Dijkstra( expander, costEvaluator, NoneStrictMath.EPSILON,\n-                PathInterestFactory.numberOfShortest( NoneStrictMath.EPSILON, numberOfWantedPaths ) );\n+        return new Dijkstra( expander, costEvaluator, NoneStrictMath.EPSILON, PathInterestFactory.numberOfShortest( NoneStrictMath.EPSILON, numberOfWantedPaths ) );\n     }\n \n     /**\n@@ -262,9 +265,9 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n+\n     @Deprecated\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator )\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, InitialBranchState stateFactory, CostEvaluator<Double> costEvaluator )\n     {\n         return new Dijkstra( expander, stateFactory, costEvaluator );\n     }\n@@ -286,10 +289,10 @@ public abstract class GraphAlgoFactory\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the Dijkstra algorithm.\n      */\n+\n     @Deprecated\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander expander,\n-            InitialBranchState stateFactory, String relationshipPropertyRepresentingCost )\n+    public static PathFinder<WeightedPath> dijkstra( PathExpander expander, InitialBranchState stateFactory, String relationshipPropertyRepresentingCost )\n     {\n         return dijkstra( expander, stateFactory, new DoubleEvaluator( relationshipPropertyRepresentingCost ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}