{
    "project_name": "CESNET-perun",
    "error_id": "156",
    "information": {
        "errors": [
            {
                "line": "501",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n\n \t/**\n\t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n\t *\n\t * @param sess",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/156/MembersManager.java\nindex 08fa5905771..13986668806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/156/MembersManager.java\n@@ -498,7 +498,7 @@ public interface MembersManager {\n \t */\n \tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n \n- \t/**\n+/**\n \t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n \t *\n \t * @param sess\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/156/MembersManager.java\nindex 08fa5905771..6e929500549 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/156/MembersManager.java\n@@ -15,1162 +15,1185 @@ import cz.metacentrum.perun.core.api.exceptions.*;\n  */\n public interface MembersManager {\n \n-\t// Names of the keys in membershipExpirationRules attribute\n-\tstatic final String membershipGracePeriodKeyName = \"gracePeriod\";\n-\tstatic final String membershipPeriodKeyName = \"period\";\n-\tstatic final String membershipDoNotExtendLoaKeyName = \"doNotExtendLoa\";\n-\tstatic final String membershipPeriodLoaKeyName = \"periodLoa\";\n-\tstatic final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n-\n-\t/**\n-\t * Attribute which contains rules for membership expiration\n-\t */\n-\tfinal static String membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n-\n-\t/**\n-\t *  Deletes only member data  appropriated by member id.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t * @throws GroupOperationsException\n-\t */\n-\tvoid deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t *  Deletes all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t * @throws GroupOperationsException\n-\t */\n-\tvoid deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specific User\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service or sponsored)\n-\t * @return newly created member (of specificUser)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specificUser\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service or sponsored)\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member (of specific User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners,SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new sponsored member in given namespace and external source.\n-\t * Owner of the member must be specified in params map under key \"sponsor\"\n-\t *\n-\t * @param sess session\n-\t * @param params Map containing parameters about user that will be created, will be used to create Candidate,\n-\t *               must contain key \"sponsor\" with value of user login in given namespace that will be owner of created member\n-\t * @param namespace namespace to generate account in\n-\t * @param extSource external source\n-\t * @param extSourcePostfix login postfix if external source uses postfix after login from given namespace, e.g. \"@muni.cz\"\n-\t * @param vo VO in which user will be created\n-\t * @param loa level of assurance\n-\t * @return newly created sponsored member\n-\t *\n-\t * @deprecated replaced by {@link #createSponsoredMember(PerunSession, Vo, String, String, String, User)}\n-\t */\n-\t@Deprecated\n-\tMember createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, Vo vo, int loa) throws InternalErrorException, PrivilegeException, UserNotExistsException, ExtSourceNotExistsException, UserExtSourceNotExistsException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, AlreadyMemberException, GroupOperationsException, PasswordStrengthFailedException, PasswordOperationTimeoutException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @param groups\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Find member of this Vo by his login in external source\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSource\n-\t * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tMember getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Find member of this Vo by one of his login in external source.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSources\n-\t * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tMember getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his user and vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns members by his user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO members who have the status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get richMember without attribute by id of member\n-\t *\n-\t * @param sess\n-\t * @param id of member\n-\t * @return richMember without attributes (only with user)\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException if user has no rights to get this richMember\n-\t * @throws MemberNotExistsException if member not exists\n-\t */\n-\tRichMember getRichMemberById(PerunSession sess, int id) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tRichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsDef list of attrDefs only for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n- \t/**\n-\t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param group to get richMembers from\n-\t * @param allowedStatuses only allowed statuses\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws AttributeNotExistsException\n-\t * @throws GroupNotExistsException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrNames.\n-\t * Attributes are defined by member (user) and resource (facility) objects.\n-\t * It returns also user-facility (in userAttributes of RichMember) and\n-\t * member-resource (in memberAttributes of RichMember) attributes.\n-\t * Members are defined by group and are filtered by list of allowed statuses.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t *\n-\t * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @return list of rich members, empty list if there are no members in Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return list of rich members, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count with defined status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the member VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member's VO\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tVo getMemberVo(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t *  Set status of the member to specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status new status\n-\t * @return member with status set\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws MemberNotValidYetException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n-\n-\t/**\n-\t * Validate all attributes for member and set member's status to VALID.\n-\t * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n-\t * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws PrivilegeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tMember validateMemberAsync(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Extend member membership using membershipExpirationRules attribute defined at VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tvoid extendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tboolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Get member by extSourceName, extSourceLogin and Vo\n-\t *\n-\t * @param sess\n-\t * @param extSourceName name of extSource\n-\t * @param extLogin login of user in extSource\n-\t * @param vo Vo where we are looking for member\n-\t * @return member\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, InternalErrorException, VoNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns the date to which will be extended member's expiration time.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return date\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tDate getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-   * Returns the date to which will be extended member's expiration time.\n-   *\n-   * @param sess\n-   * @param vo\n-   * @param loa\n-   * @return date\n-   * @throws InternalErrorException\n-   * @throws PrivilegeException\n-   * @throws VoNotExistsException\n-   * @throws ExtendMembershipException\n-   */\n-  Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz password reset.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace namespace to change password in (member must have login in)\n-\t * @param url base URL of Perun instance\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException If not VO admin of member\n-\t * @throws MemberNotExistsException If member not exists\n-\t */\n-\tvoid sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Creates a new sponsored Member and its User.\n-\t * @param session actor\n-\t * @param vo virtual organization  for the member\n-\t * @param namespace namespace for selecting password module\n-\t * @param guestName a designation, usually a full name\n-\t * @param password  password\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @return new Member in the Vo\n-\t */\n-\tRichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, String guestName, String password, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotExistsException, AlreadyMemberException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordCreationFailedException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Assigns a new sponsor to an existing member.\n-\t * @param session actor\n-\t * @param sponsored existing member that needs sponsoring\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @return existing Member\n-\t */\n-\tRichMember sponsorMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotSponsoredException;\n-\n-\t/**\n-\t * Gets list of members of a VO sponsored by the given user.\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Gets list of sponsored members of a VO.\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException If not REGISTRAR or VOADMIN\n-\t * @return list of members from given vo who are sponsored\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n-\t */\n-\tString extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Removes the sponsor.\n-\t */\n-\tvoid removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws InternalErrorException, PrivilegeException;\n+    // Names of the keys in membershipExpirationRules attribute\n+    static final String membershipGracePeriodKeyName = \"gracePeriod\";\n+    static final String membershipPeriodKeyName = \"period\";\n+    static final String membershipDoNotExtendLoaKeyName = \"doNotExtendLoa\";\n+    static final String membershipPeriodLoaKeyName = \"periodLoa\";\n+    static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n+\n+    /**\n+     * Attribute which contains rules for membership expiration\n+     */\n+    final static String membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n+\n+    /**\n+     * Deletes only member data  appropriated by member id.\n+     *\n+     * @param sess\n+     * @param member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     * @throws MemberAlreadyRemovedException\n+     * @throws GroupOperationsException\n+     */\n+    void deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n+\n+    /**\n+     * Deletes all VO members.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws MemberAlreadyRemovedException\n+     * @throws GroupOperationsException\n+     */\n+    void deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member from candidate which is prepared for creating specific User\n+     * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate          prepared future specificUser\n+     * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+     * @param specificUserType   type of specific user (service or sponsored)\n+     * @return newly created member (of specificUser)\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws UserNotExistsException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member from candidate which is prepared for creating specificUser\n+     * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate          prepared future specificUser\n+     * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+     * @param specificUserType   type of specific user (service or sponsored)\n+     * @param groups             list of groups where member will be added too\n+     * @return newly created member (of specific User)\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws UserNotExistsException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param login         user's login within extSource\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param login         user's login within extSource\n+     * @param groups        list of groups where member will be added too\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param extSourceLoa  level of assurance\n+     * @param login         user's login within extSource\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member and sets all member's attributes from the candidate.\n+     * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param extSourceName name of the extSource\n+     * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+     * @param extSourceLoa  level of assurance\n+     * @param login         user's login within extSource\n+     * @param groups        list of groups where member will be added too\n+     * @return newly created member, who has set all his/her attributes\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new sponsored member in given namespace and external source.\n+     * Owner of the member must be specified in params map under key \"sponsor\"\n+     *\n+     * @param sess             session\n+     * @param params           Map containing parameters about user that will be created, will be used to create Candidate,\n+     *                         must contain key \"sponsor\" with value of user login in given namespace that will be owner of created member\n+     * @param namespace        namespace to generate account in\n+     * @param extSource        external source\n+     * @param extSourcePostfix login postfix if external source uses postfix after login from given namespace, e.g. \"@muni.cz\"\n+     * @param vo               VO in which user will be created\n+     * @param loa              level of assurance\n+     * @return newly created sponsored member\n+     * @deprecated replaced by {@link #createSponsoredMember(PerunSession, Vo, String, String, String, User)}\n+     */\n+    @Deprecated\n+    Member createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, Vo vo, int loa)\n+            throws InternalErrorException, PrivilegeException, UserNotExistsException, ExtSourceNotExistsException, UserExtSourceNotExistsException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, AlreadyMemberException,\n+            GroupOperationsException, PasswordStrengthFailedException, PasswordOperationTimeoutException, WrongAttributeValueException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, Candidate candidate)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param candidate\n+     * @param groups    list of groups where member will be added too\n+     * @return newly created members\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member from user.\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, User user)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Creates a new member from user.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param groups list of groups where member will be added too\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws ExtendMembershipException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Create new member from user by login and ExtSource.\n+     *\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param extSource\n+     * @param login\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @throws VoNotExistsException\n+     * @throws ExtSourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Create new member from user by login and ExtSource.\n+     * <p>\n+     * Also add this member to groups in list.\n+     *\n+     * <strong>This method runs asynchronously</strong>\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param extSource\n+     * @param login\n+     * @param groups\n+     * @return newly created member\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws AlreadyMemberException\n+     * @throws ExtendMembershipException\n+     * @throws VoNotExistsException\n+     * @throws ExtSourceNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws GroupOperationsException\n+     */\n+    Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups)\n+            throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n+\n+    /**\n+     * Find member of this Vo by his login in external source\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @param userExtSource\n+     * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    Member getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Find member of this Vo by one of his login in external source.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @param userExtSources\n+     * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    Member getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns member by his id.\n+     *\n+     * @param sess\n+     * @param id\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Member getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns member by his user and vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    Member getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Returns members by his user.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return member\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, UserNotExistsException;\n+\n+    /**\n+     * Get all VO members.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return all members of the VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all VO members who have the status.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status\n+     * @return all members of the VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get richMember without attribute by id of member\n+     *\n+     * @param sess\n+     * @param id   of member\n+     * @return richMember without attributes (only with user)\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException       if user has no rights to get this richMember\n+     * @throws MemberNotExistsException if member not exists\n+     */\n+    RichMember getRichMemberById(PerunSession sess, int id) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Get Member to RichMember with attributes.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsDef list of attrDefs only for selected attributes\n+     * @return list of richmembers\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n+     *\n+     * @param sess\n+     * @param group           to get richMembers from\n+     * @param allowedStatuses only allowed statuses\n+     * @return list of rich members with all member/user attributes, empty list if there are no members in group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of richmembers\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames list of attrNames for selected attributes\n+     * @return list of richmembers\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws AttributeNotExistsException\n+     * @throws GroupNotExistsException\n+     * @throws WrongAttributeAssignmentException\n+     */\n+    List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @return list of richMembers with specific attributes from Vo\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n+     * status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @return list of richMembers with specific attributes from Vo\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the group.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * <p>\n+     * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so get richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param lookingInParentGroup\n+     * @return list of richMembers with specific attributes from Group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup)\n+            throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n+     * status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     * <p>\n+     * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so get richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param lookingInParentGroup\n+     * @return list of richMembers with specific attributes from group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws WrongAttributeAssignmentException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup)\n+            throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Get all RichMembers with attributes specific for list of attrNames.\n+     * Attributes are defined by member (user) and resource (facility) objects.\n+     * It returns also user-facility (in userAttributes of RichMember) and\n+     * member-resource (in memberAttributes of RichMember) attributes.\n+     * Members are defined by group and are filtered by list of allowed statuses.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param resource\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @return list of richMembers with specific attributes\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     * @throws GroupNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupResourceMismatchException\n+     */\n+    List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses)\n+            throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n+\n+    /**\n+     * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes from Vo for searchString\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     *\n+     * @param sess\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws MemberNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+    /**\n+     * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * <p>\n+     * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so find richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param searchString\n+     * @param lookingInParentGroup\n+     * @return list of founded richMembers with specific attributes from Group for searchString\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup)\n+            throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n+     * and who have only status which is contain in list of statuses.\n+     * If attrsNames is empty or null return all attributes for specific richMembers.\n+     * If listOfStatuses is empty or null, return all possible statuses.\n+     * <p>\n+     * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+     * If this group is top level group, so find richMembers from members group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsNames\n+     * @param allowedStatuses\n+     * @param searchString\n+     * @param lookingInParentGroup\n+     * @return list of founded richMembers with specific attributes from Group for searchString\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws AttributeNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup)\n+            throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attrsDef\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws WrongAttributeAssignmentException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of rich members, empty list if there are no members in VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param group\n+     * @return list of rich members, empty list if there are no members in Group\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status get only members who have this status\n+     * @return list of rich members, empty list if there are no members in VO with specified status\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status\n+     * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get the VO members count.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return count of VO members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    int getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get the VO members count with defined status.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param status\n+     * @return count of VO members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    int getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Get the member VO.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member's VO\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     */\n+    Vo getMemberVo(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Return list of members by the searchString under defined VO.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param searchString\n+     * @return list of members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group        this group is used to get parent group, we are searching members of the parent group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group        this group is used to get parent group, we are searching members of the parent group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+     */\n+    List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+\n+    /**\n+     * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param searchString\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws GroupNotExistsException       is thrown if group or parent group of this group not exists.\n+     * @throws ParentGroupNotExistsException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+    /**\n+     * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of rich members\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param vo\n+     * @return list of rich members with attributes\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Set status of the member to specified status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param status new status\n+     * @return member with status set\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws MemberNotValidYetException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws PrivilegeException\n+     */\n+    Member setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n+\n+    /**\n+     * Validate all attributes for member and set member's status to VALID.\n+     * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n+     * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return member with new status set\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws WrongAttributeValueException\n+     * @throws PrivilegeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    Member validateMemberAsync(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Extend member membership using membershipExpirationRules attribute defined at VO.\n+     *\n+     * @param sess\n+     * @param member\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    void extendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n+\n+    /**\n+     * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    boolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n+     * @throws InternalErrorException\n+     * @throws ExtendMembershipException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     */\n+    boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param loa\n+     * @return true if user can be apply for membership to the VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     */\n+    boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param user\n+     * @param loa\n+     * @return true if user can be apply for membership to the VO\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n+\n+    /**\n+     * Get member by extSourceName, extSourceLogin and Vo\n+     *\n+     * @param sess\n+     * @param extSourceName name of extSource\n+     * @param extLogin      login of user in extSource\n+     * @param vo            Vo where we are looking for member\n+     * @return member\n+     * @throws ExtSourceNotExistsException\n+     * @throws UserExtSourceNotExistsException\n+     * @throws MemberNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws VoNotExistsException\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     */\n+    Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, InternalErrorException, VoNotExistsException, PrivilegeException;\n+\n+    /**\n+     * Returns the date to which will be extended member's expiration time.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return date\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws MemberNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    Date getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n+\n+    /**\n+     * Returns the date to which will be extended member's expiration time.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param loa\n+     * @return date\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException\n+     * @throws VoNotExistsException\n+     * @throws ExtendMembershipException\n+     */\n+    Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n+\n+    /**\n+     * Send mail to user's preferred email address with link for non-authz password reset.\n+     * Correct authz information is stored in link's URL.\n+     *\n+     * @param sess      PerunSession\n+     * @param member    Member to get user to send link mail to\n+     * @param namespace namespace to change password in (member must have login in)\n+     * @param url       base URL of Perun instance\n+     * @throws InternalErrorException\n+     * @throws PrivilegeException       If not VO admin of member\n+     * @throws MemberNotExistsException If member not exists\n+     */\n+    void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+    /**\n+     * Creates a new sponsored Member and its User.\n+     *\n+     * @param session   actor\n+     * @param vo        virtual organization  for the member\n+     * @param namespace namespace for selecting password module\n+     * @param guestName a designation, usually a full name\n+     * @param password  password\n+     * @param sponsor   sponsoring user or null for the caller\n+     * @return new Member in the Vo\n+     */\n+    RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, String guestName, String password, User sponsor)\n+            throws InternalErrorException, PrivilegeException, MemberNotExistsException, AlreadyMemberException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordCreationFailedException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException,\n+            WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Assigns a new sponsor to an existing member.\n+     *\n+     * @param session   actor\n+     * @param sponsored existing member that needs sponsoring\n+     * @param sponsor   sponsoring user or null for the caller\n+     * @return existing Member\n+     */\n+    RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotSponsoredException;\n+\n+    /**\n+     * Gets list of members of a VO sponsored by the given user.\n+     */\n+    List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Gets list of sponsored members of a VO.\n+     *\n+     * @param sess actor\n+     * @param vo   virtual organization from which are the sponsored members chosen\n+     * @return list of members from given vo who are sponsored\n+     * @throws InternalErrorException if given parameters are invalid\n+     * @throws PrivilegeException     If not REGISTRAR or VOADMIN\n+     */\n+    List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n+     */\n+    String extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+    /**\n+     * Removes the sponsor.\n+     */\n+    void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws InternalErrorException, PrivilegeException;\n \n }\n",
            "diff_size": 1180
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/156/MembersManager.java\nindex 08fa5905771..30710d14086 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/156/MembersManager.java\n@@ -3,7 +3,6 @@ package cz.metacentrum.perun.core.api;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n-\n import cz.metacentrum.perun.core.api.exceptions.*;\n \n /**\n@@ -13,1093 +12,1225 @@ import cz.metacentrum.perun.core.api.exceptions.*;\n  * @author Slavek Licehammer\n  * @author Zora Sebestianova\n  */\n+\n+\n public interface MembersManager {\n \n-\t// Names of the keys in membershipExpirationRules attribute\n-\tstatic final String membershipGracePeriodKeyName = \"gracePeriod\";\n-\tstatic final String membershipPeriodKeyName = \"period\";\n-\tstatic final String membershipDoNotExtendLoaKeyName = \"doNotExtendLoa\";\n-\tstatic final String membershipPeriodLoaKeyName = \"periodLoa\";\n-\tstatic final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n-\n-\t/**\n-\t * Attribute which contains rules for membership expiration\n-\t */\n-\tfinal static String membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n-\n-\t/**\n-\t *  Deletes only member data  appropriated by member id.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t * @throws GroupOperationsException\n-\t */\n-\tvoid deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t *  Deletes all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws MemberAlreadyRemovedException\n-\t * @throws GroupOperationsException\n-\t */\n-\tvoid deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specific User\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service or sponsored)\n-\t * @return newly created member (of specificUser)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from candidate which is prepared for creating specificUser\n-\t * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate prepared future specificUser\n-\t * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n-\t * @param specificUserType type of specific user (service or sponsored)\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member (of specific User)\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws UserNotExistsException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners,SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member and sets all member's attributes from the candidate.\n-\t * Also stores the associated user if doesn't exist. This method is used by the registrar.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param extSourceName name of the extSource\n-\t * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n-\t * @param extSourceLoa level of assurance\n-\t * @param login user's login within extSource\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member, who has set all his/her attributes\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new sponsored member in given namespace and external source.\n-\t * Owner of the member must be specified in params map under key \"sponsor\"\n-\t *\n-\t * @param sess session\n-\t * @param params Map containing parameters about user that will be created, will be used to create Candidate,\n-\t *               must contain key \"sponsor\" with value of user login in given namespace that will be owner of created member\n-\t * @param namespace namespace to generate account in\n-\t * @param extSource external source\n-\t * @param extSourcePostfix login postfix if external source uses postfix after login from given namespace, e.g. \"@muni.cz\"\n-\t * @param vo VO in which user will be created\n-\t * @param loa level of assurance\n-\t * @return newly created sponsored member\n-\t *\n-\t * @deprecated replaced by {@link #createSponsoredMember(PerunSession, Vo, String, String, String, User)}\n-\t */\n-\t@Deprecated\n-\tMember createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, Vo vo, int loa) throws InternalErrorException, PrivilegeException, UserNotExistsException, ExtSourceNotExistsException, UserExtSourceNotExistsException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, AlreadyMemberException, GroupOperationsException, PasswordStrengthFailedException, PasswordOperationTimeoutException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param candidate\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created members\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Creates a new member from user.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param groups list of groups where member will be added too\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws ExtendMembershipException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Create new member from user by login and ExtSource.\n-\t *\n-\t * Also add this member to groups in list.\n-\t *\n-\t * <strong>This method runs asynchronously</strong>\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param extSource\n-\t * @param login\n-\t * @param groups\n-\t * @return newly created member\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws AlreadyMemberException\n-\t * @throws ExtendMembershipException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws GroupOperationsException\n-\t */\n-\tMember createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n-\n-\t/**\n-\t * Find member of this Vo by his login in external source\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSource\n-\t * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tMember getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Find member of this Vo by one of his login in external source.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @param userExtSources\n-\t * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tMember getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns member by his user and vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns members by his user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return member\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all VO members.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all VO members who have the status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return all members of the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get richMember without attribute by id of member\n-\t *\n-\t * @param sess\n-\t * @param id of member\n-\t * @return richMember without attributes (only with user)\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException if user has no rights to get this richMember\n-\t * @throws MemberNotExistsException if member not exists\n-\t */\n-\tRichMember getRichMemberById(PerunSession sess, int id) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get Member to RichMember with attributes.\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tRichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsDef list of attrDefs only for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n- \t/**\n-\t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param group to get richMembers from\n-\t * @param allowedStatuses only allowed statuses\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames list of attrNames for selected attributes\n-\t * @return list of richmembers\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws AttributeNotExistsException\n-\t * @throws GroupNotExistsException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes from Vo\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n-\t * status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so get richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param lookingInParentGroup\n-\t * @return list of richMembers with specific attributes from group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all RichMembers with attributes specific for list of attrNames.\n-\t * Attributes are defined by member (user) and resource (facility) objects.\n-\t * It returns also user-facility (in userAttributes of RichMember) and\n-\t * member-resource (in memberAttributes of RichMember) attributes.\n-\t * Members are defined by group and are filtered by list of allowed statuses.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @return list of richMembers with specific attributes\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupResourceMismatchException\n-\t */\n-\tList<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * @param sess\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t *\n-\t * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n-\t * and who have only status which is contain in list of statuses.\n-\t * If attrsNames is empty or null return all attributes for specific richMembers.\n-\t * If listOfStatuses is empty or null, return all possible statuses.\n-\t *\n-\t * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n-\t * If this group is top level group, so find richMembers from members group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsNames\n-\t * @param allowedStatuses\n-\t * @param searchString\n-\t * @param lookingInParentGroup\n-\t * @return list of founded richMembers with specific attributes from Group for searchString\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws AttributeNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attrsDef\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @return list of rich members, empty list if there are no members in Group\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status get only members who have this status\n-\t * @return list of rich members, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the VO members count with defined status.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param status\n-\t * @return count of VO members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tint getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Get the member VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member's VO\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tVo getMemberVo(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return list of members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group this group is used to get parent group, we are searching members of the parent group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param searchString\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n-\t * @throws ParentGroupNotExistsException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param vo\n-\t * @return list of rich members with attributes\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tList<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t *  Set status of the member to specified status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param status new status\n-\t * @return member with status set\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws MemberNotValidYetException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n-\n-\t/**\n-\t * Validate all attributes for member and set member's status to VALID.\n-\t * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n-\t * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return member with new status set\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws PrivilegeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tMember validateMemberAsync(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Extend member membership using membershipExpirationRules attribute defined at VO.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tvoid extendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n-\t * @throws InternalErrorException\n-\t * @throws ExtendMembershipException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t */\n-\tboolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t */\n-\tboolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n-\t * @param sess\n-\t * @param vo\n-\t * @param user\n-\t * @param loa\n-\t * @return true if user can be apply for membership to the VO\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws VoNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tboolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Get member by extSourceName, extSourceLogin and Vo\n-\t *\n-\t * @param sess\n-\t * @param extSourceName name of extSource\n-\t * @param extLogin login of user in extSource\n-\t * @param vo Vo where we are looking for member\n-\t * @return member\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws MemberNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws VoNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t */\n-\tMember getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, InternalErrorException, VoNotExistsException, PrivilegeException;\n-\n-\t/**\n-\t * Returns the date to which will be extended member's expiration time.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return date\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException\n-\t * @throws MemberNotExistsException\n-\t * @throws ExtendMembershipException\n-\t */\n-\tDate getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n-\n-\t/**\n+ // Names of the keys in membershipExpirationRules attribute\n+\n+ static final String membershipGracePeriodKeyName = \"gracePeriod\";\n+ static final String membershipPeriodKeyName = \"period\";\n+ static final String membershipDoNotExtendLoaKeyName = \"doNotExtendLoa\";\n+ static final String membershipPeriodLoaKeyName = \"periodLoa\";\n+ static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n+\n+ /**\n+  * Attribute which contains rules for membership expiration\n+  */\n+ final static String membershipExpirationRulesAttributeName = AttributesManager.NS_VO_ATTR_DEF + \":\" + \"membershipExpirationRules\";\n+\n+ /**\n+  *  Deletes only member data  appropriated by member id.\n+  *\n+  * @param sess\n+  * @param member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  * @throws MemberAlreadyRemovedException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ void deleteMember(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n+\n+ /**\n+  *  Deletes all VO members.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws MemberAlreadyRemovedException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ void deleteAllMembers(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException, PrivilegeException, MemberAlreadyRemovedException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member from candidate which is prepared for creating specific User\n+  * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate prepared future specificUser\n+  * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+  * @param specificUserType type of specific user (service or sponsored)\n+  * @return newly created member (of specificUser)\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws UserNotExistsException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member from candidate which is prepared for creating specificUser\n+  * In list specificUserOwners can't be specific user, only normal users and sponsored users are allowed.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate prepared future specificUser\n+  * @param specificUserOwners list of users who own specificUser (can't be empty or contain specificUser)\n+  * @param specificUserType type of specific user (service or sponsored)\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member (of specific User)\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws UserNotExistsException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createSpecificMember(PerunSession sess, Vo vo, Candidate candidate, List<User> specificUserOwners, SpecificUserType specificUserType, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, UserNotExistsException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param login user's login within extSource\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param login user's login within extSource\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param extSourceLoa level of assurance\n+  * @param login user's login within extSource\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member and sets all member's attributes from the candidate.\n+  * Also stores the associated user if doesn't exist. This method is used by the registrar.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param extSourceName name of the extSource\n+  * @param extSourceType type of the extSource (e.g. cz.metacentrum.perun.core.impl.ExtSourceIdp)\n+  * @param extSourceLoa level of assurance\n+  * @param login user's login within extSource\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member, who has set all his/her attributes\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, String extSourceName, String extSourceType, int extSourceLoa, String login, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new sponsored member in given namespace and external source.\n+  * Owner of the member must be specified in params map under key \"sponsor\"\n+  *\n+  * @param sess session\n+  * @param params Map containing parameters about user that will be created, will be used to create Candidate,\n+  *               must contain key \"sponsor\" with value of user login in given namespace that will be owner of created member\n+  * @param namespace namespace to generate account in\n+  * @param extSource external source\n+  * @param extSourcePostfix login postfix if external source uses postfix after login from given namespace, e.g. \"@muni.cz\"\n+  * @param vo VO in which user will be created\n+  * @param loa level of assurance\n+  * @return newly created sponsored member\n+  *\n+  * @deprecated replaced by {@link #createSponsoredMember(PerunSession, Vo, String, String, String, User)}\n+  */\n+\n+ @Deprecated\n+ Member createSponsoredAccount(PerunSession sess, Map<String, String> params, String namespace, ExtSource extSource, String extSourcePostfix, Vo vo, int loa) throws InternalErrorException, PrivilegeException, UserNotExistsException, ExtSourceNotExistsException, UserExtSourceNotExistsException, WrongReferenceAttributeValueException, LoginNotExistsException, PasswordCreationFailedException, ExtendMembershipException, AlreadyMemberException, GroupOperationsException, PasswordStrengthFailedException, PasswordOperationTimeoutException, WrongAttributeValueException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, Candidate candidate) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member from candidate returned by the method VosManager.findCandidates which fills Candidate.userExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param candidate\n+  * @param groups list of groups where member will be added too\n+  * @return newly created members\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, Candidate candidate, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member from user.\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Creates a new member from user.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs WITHOUT synchronization. If validation is needed, need to call concrete validateMember method (validateMemberAsync recommended).</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param groups list of groups where member will be added too\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws ExtendMembershipException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, User user, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, VoNotExistsException, UserNotExistsException, PrivilegeException, ExtendMembershipException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Create new member from user by login and ExtSource.\n+  *\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param extSource\n+  * @param login\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @throws VoNotExistsException\n+  * @throws ExtSourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Create new member from user by login and ExtSource.\n+  *\n+  * Also add this member to groups in list.\n+  *\n+  * <strong>This method runs asynchronously</strong>\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param extSource\n+  * @param login\n+  * @param groups\n+  * @return newly created member\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws AlreadyMemberException\n+  * @throws ExtendMembershipException\n+  * @throws VoNotExistsException\n+  * @throws ExtSourceNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws GroupOperationsException\n+  */\n+\n+\n+ Member createMember(PerunSession sess, Vo vo, ExtSource extSource, String login, List<Group> groups) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, AlreadyMemberException, ExtendMembershipException, VoNotExistsException, ExtSourceNotExistsException, PrivilegeException, GroupNotExistsException, GroupOperationsException;\n+\n+ /**\n+  * Find member of this Vo by his login in external source\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @param userExtSource\n+  * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ Member getMemberByUserExtSource(PerunSession perunSession, Vo vo, UserExtSource userExtSource) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Find member of this Vo by one of his login in external source.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @param userExtSources\n+  * @return selected user or throws MemberNotExistsException in case the requested member doesn't exists in this Vo\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ Member getMemberByUserExtSources(PerunSession perunSession, Vo vo, List<UserExtSource> userExtSources) throws InternalErrorException, VoNotExistsException, MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns member by his id.\n+  *\n+  * @param sess\n+  * @param id\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member getMemberById(PerunSession sess, int id) throws InternalErrorException, MemberNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns member by his user and vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member getMemberByUser(PerunSession sess, Vo vo, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Returns members by his user.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return member\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> getMembersByUser(PerunSession sess, User user) throws InternalErrorException, MemberNotExistsException, PrivilegeException, UserNotExistsException;\n+\n+ /**\n+  * Get all VO members.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return all members of the VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<Member> getMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all VO members who have the status.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status\n+  * @return all members of the VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<Member> getMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get richMember without attribute by id of member\n+  *\n+  * @param sess\n+  * @param id of member\n+  * @return richMember without attributes (only with user)\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException if user has no rights to get this richMember\n+  * @throws MemberNotExistsException if member not exists\n+  */\n+\n+\n+ RichMember getRichMemberById(PerunSession sess, int id) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Get Member to RichMember with attributes.\n+  * @param sess\n+  * @param member\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ RichMember getRichMemberWithAttributes(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsDef list of attrDefs only for selected attributes\n+  * @return list of richmembers\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+  /**\n+  * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n+  *\n+  * @param sess\n+  * @param group to get richMembers from\n+  * @param allowedStatuses only allowed statuses\n+  * @return list of rich members with all member/user attributes, empty list if there are no members in group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of richmembers\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames list of attrNames for selected attributes\n+  * @return list of richmembers\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws AttributeNotExistsException\n+  * @throws GroupNotExistsException\n+  * @throws WrongAttributeAssignmentException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributesByNames(PerunSession sess, Group group, List<String> attrsNames) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the vo.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @return list of richMembers with specific attributes from Vo\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the vo and have only\n+  * status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @return list of richMembers with specific attributes from Vo\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the group.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so get richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param lookingInParentGroup\n+  * @return list of richMembers with specific attributes from Group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Get all RichMembers with attrs specific for list of attrsNames from the group and have only\n+  * status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * If lookingInParentGroup is true, get all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so get richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param lookingInParentGroup\n+  * @return list of richMembers with specific attributes from group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws WrongAttributeAssignmentException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, VoNotExistsException, GroupNotExistsException, AttributeNotExistsException, ParentGroupNotExistsException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Get all RichMembers with attributes specific for list of attrNames.\n+  * Attributes are defined by member (user) and resource (facility) objects.\n+  * It returns also user-facility (in userAttributes of RichMember) and\n+  * member-resource (in memberAttributes of RichMember) attributes.\n+  * Members are defined by group and are filtered by list of allowed statuses.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param resource\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @return list of richMembers with specific attributes\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  * @throws GroupNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupResourceMismatchException\n+  */\n+\n+\n+ List<RichMember> getCompleteRichMembers(PerunSession sess, Group group, Resource resource, List<String> attrsNames, List<String> allowedStatuses) throws InternalErrorException, AttributeNotExistsException, ParentGroupNotExistsException, GroupNotExistsException, ResourceNotExistsException, PrivilegeException, GroupResourceMismatchException;\n+\n+ /**\n+  * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes from Vo for searchString\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Return list of richMembers for specific vo by the searchString with attrs specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @return list of founded richMembers with specific attributes from Vo for searchString with allowed statuses\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Vo vo, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Return list of richMembers from Perun by searchString with attrs specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * @param sess\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  *\n+  * @return list of founded richMembers with specific attributes by searchString with allowed statuses\n+  *\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, List<String> attrsNames, List<String> allowedStatuses, String searchString) throws InternalErrorException, MemberNotExistsException, PrivilegeException, VoNotExistsException, AttributeNotExistsException;\n+\n+ /**\n+  * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  *\n+  * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so find richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param searchString\n+  * @param lookingInParentGroup\n+  * @return list of founded richMembers with specific attributes from Group for searchString\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, String searchString, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of richMembers for specific group by the searchString with attrs specific for list of attrsNames\n+  * and who have only status which is contain in list of statuses.\n+  * If attrsNames is empty or null return all attributes for specific richMembers.\n+  * If listOfStatuses is empty or null, return all possible statuses.\n+  *\n+  * If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+  * If this group is top level group, so find richMembers from members group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsNames\n+  * @param allowedStatuses\n+  * @param searchString\n+  * @param lookingInParentGroup\n+  * @return list of founded richMembers with specific attributes from Group for searchString\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws AttributeNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findCompleteRichMembers(PerunSession sess, Group group, List<String> attrsNames, List<String> allowedStatuses, String searchString, boolean lookingInParentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, AttributeNotExistsException, VoNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Get RichMembers with Attributes but only with selected attributes from list attrsDef for group.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attrsDef\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws WrongAttributeAssignmentException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Group group, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Get all rich members of VO. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of rich members, empty list if there are no members in VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members of Group. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param group\n+  * @return list of rich members, empty list if there are no members in Group\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status get only members who have this status\n+  * @return list of rich members, empty list if there are no members in VO with specified status\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembers(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO. Rich member object contains user, member, userExtSources and member/user attributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of rich members with all member/user attributes, empty list if there are no members in VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get all rich members of VO with specified status. Rich member object contains user, member, userExtSources and member/user attributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status\n+  * @return list of rich members with all member/user attributes, empty list if there are no members in VO with specified status\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get the VO members count.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return count of VO members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ int getMembersCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get the VO members count with defined status.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param status\n+  * @return count of VO members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ int getMembersCount(PerunSession sess, Vo vo, Status status) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Get the member VO.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member's VO\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ Vo getMemberVo(PerunSession sess, Member member) throws InternalErrorException, MemberNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> findMembersByName(PerunSession sess, String searchString) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Return list of members by the searchString under defined VO.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> findMembersByNameInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString under defined VO. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<Member> findMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString under defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param searchString\n+  * @return list of members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<Member> findMembersInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of members by the searchString udner parentGroup of defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group this group is used to get parent group, we are searching members of the parent group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<Member> findMembersInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of rich members with attributes by the searchString under defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group this group is used to get parent group, we are searching members of the parent group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+\n+ /**\n+  * Return list of rich with attributes members by the searchString under parent group of defined Group. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param searchString\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws GroupNotExistsException is thrown if group or parent group of this group not exists.\n+  * @throws ParentGroupNotExistsException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInParentGroup(PerunSession sess, Group group, String searchString) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException;\n+\n+ /**\n+  * Return list of rich members by the searchString under defined VO. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of rich members\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichMember> findRichMembersInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Return list of rich members with attributes by the searchString under defined VO. Search is done in name, email and login.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param vo\n+  * @return list of rich members with attributes\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ List<RichMember> findRichMembersWithAttributesInVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  *  Set status of the member to specified status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param status new status\n+  * @return member with status set\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws MemberNotValidYetException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member setStatus(PerunSession sess, Member member, Status status) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberNotValidYetException;\n+\n+ /**\n+  * Validate all attributes for member and set member's status to VALID.\n+  * This method runs asynchronously. It immediately return member with <b>ORIGINAL</b> status and after asynchronous validation successfully\n+  * finishes it switch member's status to VALID. If validation ends with error, member keeps his status.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return member with new status set\n+  *\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws WrongAttributeValueException\n+  * @throws PrivilegeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ Member validateMemberAsync(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Extend member membership using membershipExpirationRules attribute defined at VO.\n+  *\n+  * @param sess\n+  * @param member\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ void extendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n+\n+ /**\n+  * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false.\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ boolean canExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise throws exception.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return true if the membership can be extended or if no rules were set for the membershipExpiration, otherwise false\n+  * @throws InternalErrorException\n+  * @throws ExtendMembershipException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  */\n+\n+\n+ boolean canExtendMembershipWithReason(PerunSession sess, Member member) throws InternalErrorException, ExtendMembershipException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param loa\n+  * @return true if user can be apply for membership to the VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ boolean canBeMember(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Checks if the user can apply membership to the VO, it decides based on extendMembershipRules on the doNotAllowLoa key\n+  * @param sess\n+  * @param vo\n+  * @param user\n+  * @param loa\n+  * @return true if user can be apply for membership to the VO\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws VoNotExistsException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ boolean canBeMemberWithReason(PerunSession sess, Vo vo, User user, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n+\n+ /**\n+  * Get member by extSourceName, extSourceLogin and Vo\n+  *\n+  * @param sess\n+  * @param extSourceName name of extSource\n+  * @param extLogin login of user in extSource\n+  * @param vo Vo where we are looking for member\n+  * @return member\n+  * @throws ExtSourceNotExistsException\n+  * @throws UserExtSourceNotExistsException\n+  * @throws MemberNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws VoNotExistsException\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  */\n+\n+\n+ Member getMemberByExtSourceNameAndExtLogin(PerunSession sess, Vo vo, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, MemberNotExistsException, UserNotExistsException, InternalErrorException, VoNotExistsException, PrivilegeException;\n+\n+ /**\n+  * Returns the date to which will be extended member's expiration time.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return date\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException\n+  * @throws MemberNotExistsException\n+  * @throws ExtendMembershipException\n+  */\n+\n+\n+ Date getNewExtendMembership(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException, ExtendMembershipException;\n+\n+ /**\n    * Returns the date to which will be extended member's expiration time.\n    *\n    * @param sess\n@@ -1111,66 +1242,82 @@ public interface MembersManager {\n    * @throws VoNotExistsException\n    * @throws ExtendMembershipException\n    */\n-  Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n-\n-\t/**\n-\t * Send mail to user's preferred email address with link for non-authz password reset.\n-\t * Correct authz information is stored in link's URL.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param member Member to get user to send link mail to\n-\t * @param namespace namespace to change password in (member must have login in)\n-\t * @param url base URL of Perun instance\n-\t * @throws InternalErrorException\n-\t * @throws PrivilegeException If not VO admin of member\n-\t * @throws MemberNotExistsException If member not exists\n-\t */\n-\tvoid sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n-\n-\t/**\n-\t * Creates a new sponsored Member and its User.\n-\t * @param session actor\n-\t * @param vo virtual organization  for the member\n-\t * @param namespace namespace for selecting password module\n-\t * @param guestName a designation, usually a full name\n-\t * @param password  password\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @return new Member in the Vo\n-\t */\n-\tRichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, String guestName, String password, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotExistsException, AlreadyMemberException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordCreationFailedException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Assigns a new sponsor to an existing member.\n-\t * @param session actor\n-\t * @param sponsored existing member that needs sponsoring\n-\t * @param sponsor sponsoring user or null for the caller\n-\t * @return existing Member\n-\t */\n-\tRichMember sponsorMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotSponsoredException;\n-\n-\t/**\n-\t * Gets list of members of a VO sponsored by the given user.\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Gets list of sponsored members of a VO.\n-\t * @param sess actor\n-\t * @param vo virtual organization from which are the sponsored members chosen\n-\t * @throws InternalErrorException if given parameters are invalid\n-\t * @throws PrivilegeException If not REGISTRAR or VOADMIN\n-\t * @return list of members from given vo who are sponsored\n-\t */\n-\tList<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n-\t */\n-\tString extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n-\n-\t/**\n-\t * Removes the sponsor.\n-\t */\n-\tvoid removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws InternalErrorException, PrivilegeException;\n-\n-}\n+\n+\n+ Date getNewExtendMembership(PerunSession sess, Vo vo, String loa) throws InternalErrorException, PrivilegeException, VoNotExistsException, ExtendMembershipException;\n+\n+ /**\n+  * Send mail to user's preferred email address with link for non-authz password reset.\n+  * Correct authz information is stored in link's URL.\n+  *\n+  * @param sess PerunSession\n+  * @param member Member to get user to send link mail to\n+  * @param namespace namespace to change password in (member must have login in)\n+  * @param url base URL of Perun instance\n+  * @throws InternalErrorException\n+  * @throws PrivilegeException If not VO admin of member\n+  * @throws MemberNotExistsException If member not exists\n+  */\n+\n+\n+ void sendPasswordResetLinkEmail(PerunSession sess, Member member, String namespace, String url) throws InternalErrorException, PrivilegeException, MemberNotExistsException;\n+\n+ /**\n+  * Creates a new sponsored Member and its User.\n+  * @param session actor\n+  * @param vo virtual organization  for the member\n+  * @param namespace namespace for selecting password module\n+  * @param guestName a designation, usually a full name\n+  * @param password  password\n+  * @param sponsor sponsoring user or null for the caller\n+  * @return new Member in the Vo\n+  */\n+\n+\n+ RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, String guestName, String password, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotExistsException, AlreadyMemberException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordCreationFailedException, PasswordStrengthFailedException, GroupOperationsException, ExtendMembershipException, WrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Assigns a new sponsor to an existing member.\n+  * @param session actor\n+  * @param sponsored existing member that needs sponsoring\n+  * @param sponsor sponsoring user or null for the caller\n+  * @return existing Member\n+  */\n+\n+\n+ RichMember sponsorMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, MemberNotSponsoredException;\n+\n+ /**\n+  * Gets list of members of a VO sponsored by the given user.\n+  */\n+\n+\n+ List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Gets list of sponsored members of a VO.\n+  * @param sess actor\n+  * @param vo virtual organization from which are the sponsored members chosen\n+  * @throws InternalErrorException if given parameters are invalid\n+  * @throws PrivilegeException If not REGISTRAR or VOADMIN\n+  * @return list of members from given vo who are sponsored\n+  */\n+\n+\n+ List<RichMember> getSponsoredMembers(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Extends expiration date. Sponsored members cannot apply for membership extension, this method allows a sponsor to extend it.\n+  */\n+\n+\n+ String extendExpirationForSponsoredMember(PerunSession session, Member sponsored, User sponsor) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n+\n+ /**\n+  * Removes the sponsor.\n+  */\n+\n+\n+ void removeSponsor(PerunSession sess, Member sponsoredMember, User sponsorToRemove) throws InternalErrorException, PrivilegeException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1297
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/156/MembersManager.java\nindex 08fa5905771..13986668806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/156/MembersManager.java\n@@ -498,7 +498,7 @@ public interface MembersManager {\n \t */\n \tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n \n- \t/**\n+/**\n \t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n \t *\n \t * @param sess\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/156/MembersManager.java\nindex 08fa5905771..c95cba42b13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/156/MembersManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/156/MembersManager.java\n@@ -498,7 +498,7 @@ public interface MembersManager {\n \t */\n \tList<RichMember> getRichMembersWithAttributes(PerunSession sess, Vo vo, List<AttributeDefinition> attrsDef) throws InternalErrorException, PrivilegeException, VoNotExistsException;\n \n- \t/**\n+/**\n \t * Get all rich members with allowed statuses from specific group. Rich member object contains user, member, userExtSources and member/user attributes.\n \t *\n \t * @param sess\n@@ -509,7 +509,7 @@ public interface MembersManager {\n \t * @throws PrivilegeException\n \t * @throws GroupNotExistsException\n \t */\n-\tList<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n+ List<RichMember> getRichMembersWithAttributes(PerunSession sess, List<String> allowedStatuses, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException;\n \n \t/**\n \t * Get RichMembers with Attributes but only with selected attributes from list attrsDef for vo.\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}