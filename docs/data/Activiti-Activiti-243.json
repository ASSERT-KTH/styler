{
    "project_name": "Activiti-Activiti",
    "error_id": "243",
    "information": {
        "errors": [
            {
                "line": "73",
                "column": "7",
                "severity": "error",
                "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    for (Method method : methods) {\n      idAnnotation = method.getAnnotation(Id.class);\n      if(idAnnotation != null && !method.isBridge()) {\n        idMethod = method;\n        break;\n      }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/243/JPAEntityScanner.java\nindex 1cfc056c6f0..05886a90366 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/243/JPAEntityScanner.java\n@@ -70,7 +70,7 @@ public class JPAEntityScanner {\n     Id idAnnotation = null;\n     for (Method method : methods) {\n       idAnnotation = method.getAnnotation(Id.class);\n-      if(idAnnotation != null && !method.isBridge()) {\n+      if (idAnnotation != null && !method.isBridge()) {\n         idMethod = method;\n         break;\n       }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/243/JPAEntityScanner.java\nindex 1cfc056c6f0..951bed28093 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/243/JPAEntityScanner.java\n@@ -1,9 +1,9 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -23,87 +23,85 @@ import org.activiti.engine.ActivitiException;\n \n /**\n  * Scans class and creates {@link EntityMetaData} based on it.\n- * \n-\n  */\n public class JPAEntityScanner {\n \n-  public EntityMetaData scanClass(Class<?> clazz) {\n-    EntityMetaData metaData = new EntityMetaData();\n-    // in case with JPA Enhancement\n-    // method should iterate over superclasses list\n-    // to find @Entity and @Id annotations\n-    while (clazz != null && !clazz.equals(Object.class)) {\n+    public EntityMetaData scanClass(Class<?> clazz) {\n+        EntityMetaData metaData = new EntityMetaData();\n+        // in case with JPA Enhancement\n+        // method should iterate over superclasses list\n+        // to find @Entity and @Id annotations\n+        while (clazz != null && !clazz.equals(Object.class)) {\n \n-      // Class should have @Entity annotation\n-      boolean isEntity = isEntityAnnotationPresent(clazz);\n+            // Class should have @Entity annotation\n+            boolean isEntity = isEntityAnnotationPresent(clazz);\n \n-      if (isEntity) {\n-        metaData.setEntityClass(clazz);\n-        metaData.setJPAEntity(true);\n-        // Try to find a field annotated with @Id\n-        Field idField = getIdField(clazz);\n-        if (idField != null) {\n-          metaData.setIdField(idField);\n-        } else {\n-          // Try to find a method annotated with @Id\n-          Method idMethod = getIdMethod(clazz);\n-          if (idMethod != null) {\n-            metaData.setIdMethod(idMethod);\n-          } else {\n-            throw new ActivitiException(\"Cannot find field or method with annotation @Id on class '\" + clazz.getName() + \"', only single-valued primary keys are supported on JPA-entities\");\n-          }\n+            if (isEntity) {\n+                metaData.setEntityClass(clazz);\n+                metaData.setJPAEntity(true);\n+                // Try to find a field annotated with @Id\n+                Field idField = getIdField(clazz);\n+                if (idField != null) {\n+                    metaData.setIdField(idField);\n+                } else {\n+                    // Try to find a method annotated with @Id\n+                    Method idMethod = getIdMethod(clazz);\n+                    if (idMethod != null) {\n+                        metaData.setIdMethod(idMethod);\n+                    } else {\n+                        throw new ActivitiException(\"Cannot find field or method with annotation @Id on class '\" + clazz.getName() + \"', only single-valued primary keys are supported on JPA-entities\");\n+                    }\n+                }\n+                break;\n+            }\n+            clazz = clazz.getSuperclass();\n         }\n-        break;\n-      }\n-      clazz = clazz.getSuperclass();\n+        return metaData;\n     }\n-    return metaData;\n-  }\n \n-  private Method getIdMethod(Class<?> clazz) {\n-    Method idMethod = null;\n-    // Get all public declared methods on the class. According to spec, @Id\n-    // should only be\n-    // applied to fields and property get methods\n-    Method[] methods = clazz.getMethods();\n-    Id idAnnotation = null;\n-    for (Method method : methods) {\n-      idAnnotation = method.getAnnotation(Id.class);\n-      if(idAnnotation != null && !method.isBridge()) {\n-        idMethod = method;\n-        break;\n-      }\n+    private Method getIdMethod(Class<?> clazz) {\n+        Method idMethod = null;\n+        // Get all public declared methods on the class. According to spec, @Id\n+        // should only be\n+        // applied to fields and property get methods\n+        Method[] methods = clazz.getMethods();\n+        Id idAnnotation = null;\n+        for (Method method : methods) {\n+            idAnnotation = method.getAnnotation(Id.class);\n+            if (idAnnotation != null && !method.isBridge()) {\n+                idMethod = method;\n+                break;\n+            }\n+        }\n+        return idMethod;\n     }\n-    return idMethod;\n-  }\n \n-  private Field getIdField(Class<?> clazz) {\n-    Field idField = null;\n-    Field[] fields = clazz.getDeclaredFields();\n-    Id idAnnotation = null;\n-    for (Field field : fields) {\n-      idAnnotation = field.getAnnotation(Id.class);\n-      if (idAnnotation != null) {\n-        idField = field;\n-        break;\n-      }\n-    }\n+    private Field getIdField(Class<?> clazz) {\n+        Field idField = null;\n+        Field[] fields = clazz.getDeclaredFields();\n+        Id idAnnotation = null;\n+        for (Field field : fields) {\n+            idAnnotation = field.getAnnotation(Id.class);\n+            if (idAnnotation != null) {\n+                idField = field;\n+                break;\n+            }\n+        }\n \n-    if (idField == null) {\n-      // Check superClass for fields with @Id, since getDeclaredFields\n-      // does\n-      // not return superclass-fields.\n-      Class<?> superClass = clazz.getSuperclass();\n-      if (superClass != null && !superClass.equals(Object.class)) {\n-        // Recursively go up class hierarchy\n-        idField = getIdField(superClass);\n-      }\n+        if (idField == null) {\n+            // Check superClass for fields with @Id, since getDeclaredFields\n+            // does\n+            // not return superclass-fields.\n+            Class<?> superClass = clazz.getSuperclass();\n+            if (superClass != null && !superClass.equals(Object.class)) {\n+                // Recursively go up class hierarchy\n+                idField = getIdField(superClass);\n+            }\n+        }\n+        return idField;\n     }\n-    return idField;\n-  }\n \n-  private boolean isEntityAnnotationPresent(Class<?> clazz) {\n-    return (clazz.getAnnotation(Entity.class) != null);\n-  }\n+    private boolean isEntityAnnotationPresent(Class<?> clazz) {\n+        return (clazz.getAnnotation(Entity.class) != null);\n+    }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/243/JPAEntityScanner.java\nindex 1cfc056c6f0..094fedf263c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/243/JPAEntityScanner.java\n@@ -15,10 +15,8 @@ package org.activiti.engine.impl.variable;\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-\n import javax.persistence.Entity;\n import javax.persistence.Id;\n-\n import org.activiti.engine.ActivitiException;\n \n /**\n@@ -26,6 +24,8 @@ import org.activiti.engine.ActivitiException;\n  * \n \n  */\n+\n+\n public class JPAEntityScanner {\n \n   public EntityMetaData scanClass(Class<?> clazz) {\n@@ -37,11 +37,11 @@ public class JPAEntityScanner {\n \n       // Class should have @Entity annotation\n       boolean isEntity = isEntityAnnotationPresent(clazz);\n-\n       if (isEntity) {\n         metaData.setEntityClass(clazz);\n         metaData.setJPAEntity(true);\n         // Try to find a field annotated with @Id\n+\n         Field idField = getIdField(clazz);\n         if (idField != null) {\n           metaData.setIdField(idField);\n@@ -69,11 +69,11 @@ public class JPAEntityScanner {\n     Method[] methods = clazz.getMethods();\n     Id idAnnotation = null;\n     for (Method method : methods) {\n-      idAnnotation = method.getAnnotation(Id.class);\n-      if(idAnnotation != null && !method.isBridge()) {\n-        idMethod = method;\n-        break;\n-      }\n+        idAnnotation = method.getAnnotation(Id.class);\n+        if (idAnnotation != null && !method.isBridge()) {\n+          idMethod = method;\n+          break;\n+        }\n     }\n     return idMethod;\n   }\n@@ -83,13 +83,12 @@ public class JPAEntityScanner {\n     Field[] fields = clazz.getDeclaredFields();\n     Id idAnnotation = null;\n     for (Field field : fields) {\n-      idAnnotation = field.getAnnotation(Id.class);\n-      if (idAnnotation != null) {\n-        idField = field;\n-        break;\n-      }\n+        idAnnotation = field.getAnnotation(Id.class);\n+        if (idAnnotation != null) {\n+          idField = field;\n+          break;\n+        }\n     }\n-\n     if (idField == null) {\n       // Check superClass for fields with @Id, since getDeclaredFields\n       // does\n@@ -106,4 +105,4 @@ public class JPAEntityScanner {\n   private boolean isEntityAnnotationPresent(Class<?> clazz) {\n     return (clazz.getAnnotation(Entity.class) != null);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/243/JPAEntityScanner.java\nindex 1cfc056c6f0..05886a90366 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/243/JPAEntityScanner.java\n@@ -70,7 +70,7 @@ public class JPAEntityScanner {\n     Id idAnnotation = null;\n     for (Method method : methods) {\n       idAnnotation = method.getAnnotation(Id.class);\n-      if(idAnnotation != null && !method.isBridge()) {\n+      if (idAnnotation != null && !method.isBridge()) {\n         idMethod = method;\n         break;\n       }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/243/JPAEntityScanner.java\nindex 1cfc056c6f0..05886a90366 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/243/JPAEntityScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/243/JPAEntityScanner.java\n@@ -70,7 +70,7 @@ public class JPAEntityScanner {\n     Id idAnnotation = null;\n     for (Method method : methods) {\n       idAnnotation = method.getAnnotation(Id.class);\n-      if(idAnnotation != null && !method.isBridge()) {\n+      if (idAnnotation != null && !method.isBridge()) {\n         idMethod = method;\n         break;\n       }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}