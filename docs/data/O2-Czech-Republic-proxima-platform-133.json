{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "133",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 100).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        FileSystem.local(\n            folder.newFolder(),\n            NamingConvention.defaultConvention(Duration.ofHours(1), \"prefix\", format.fileSuffix()));\n  }\n\n  @After",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/133/FileSystemTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/133/FileSystemTest.java\nindex 46ad418828f..af29f5aedf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/133/FileSystemTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/133/FileSystemTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.bulk;\n \n import static org.junit.Assert.*;\n@@ -30,7 +31,8 @@ import org.junit.rules.TemporaryFolder;\n /** Test {@link FileSystem#local} */\n public class FileSystemTest {\n \n-  @Rule public final TemporaryFolder folder = new TemporaryFolder();\n+  @Rule\n+  public final TemporaryFolder folder = new TemporaryFolder();\n   private final FileFormat format = FileFormat.blob(true);\n   FileSystem fs;\n \n@@ -40,7 +42,8 @@ public class FileSystemTest {\n     fs =\n         FileSystem.local(\n             folder.newFolder(),\n-            NamingConvention.defaultConvention(Duration.ofHours(1), \"prefix\", format.fileSuffix()));\n+            NamingConvention\n+                .defaultConvention(Duration.ofHours(1), \"prefix\", format.fileSuffix()));\n   }\n \n   @After\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "'try' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/133/FileSystemTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/133/FileSystemTest.java\nindex 46ad418828f..4a26243a623 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/133/FileSystemTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/133/FileSystemTest.java\n@@ -30,15 +30,15 @@ import org.junit.rules.TemporaryFolder;\n /** Test {@link FileSystem#local} */\n public class FileSystemTest {\n \n-  @Rule public final TemporaryFolder folder = new TemporaryFolder();\n+  @Rule\n+public final TemporaryFolder folder = new TemporaryFolder();\n   private final FileFormat format = FileFormat.blob(true);\n   FileSystem fs;\n \n   @Before\n   public void setUp() throws IOException {\n     folder.create();\n-    fs =\n-        FileSystem.local(\n+    fs = FileSystem.local(\n             folder.newFolder(),\n             NamingConvention.defaultConvention(Duration.ofHours(1), \"prefix\", format.fileSuffix()));\n   }\n@@ -65,10 +65,9 @@ public class FileSystemTest {\n     assertEquals(1L, fs.list(now, now + 1).count());\n     assertEquals(0L, fs.list(now + 3600000, now + 7200000).count());\n     assertEquals(1L, fs.list(now + 7200000, now + 7200001).count());\n-\n-    try (InputStream reader = p.reader()) {\n+try (InputStream reader = p.reader()) {\n       int read = reader.read();\n       assertTrue(read > 0);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "'array initialization' child has incorrect indentation level 21, expected level should be one of the following: 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "'array initialization rcurly' has incorrect indentation level 0, expected level should be one of the following: 6, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "'array initialization' child has incorrect indentation level 21, expected level should be one of the following: 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "'array initialization rcurly' has incorrect indentation level 0, expected level should be one of the following: 6, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/133/FileSystemTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/133/FileSystemTest.java\nindex 46ad418828f..9ddb8507bc5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/133/FileSystemTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/133/FileSystemTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.direct.bulk;\n \n import static org.junit.Assert.*;\n-\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -28,6 +27,8 @@ import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n \n /** Test {@link FileSystem#local} */\n+\n+\n public class FileSystemTest {\n \n   @Rule public final TemporaryFolder folder = new TemporaryFolder();\n@@ -37,10 +38,8 @@ public class FileSystemTest {\n   @Before\n   public void setUp() throws IOException {\n     folder.create();\n-    fs =\n-        FileSystem.local(\n-            folder.newFolder(),\n-            NamingConvention.defaultConvention(Duration.ofHours(1), \"prefix\", format.fileSuffix()));\n+    fs = FileSystem.local(folder.newFolder(),\n+                          NamingConvention.defaultConvention(Duration.ofHours(1), \"prefix\", format.fileSuffix()));\n   }\n \n   @After\n@@ -55,20 +54,23 @@ public class FileSystemTest {\n     now = now - now % 3600000;\n     Path p = fs.newPath(now);\n     try (OutputStream stream = p.writer()) {\n-      stream.write(new byte[] {'b'});\n+      stream.write(new byte[] {\n+                     'b'\n+});\n     }\n     p = fs.newPath(now + 7200000);\n     try (OutputStream stream = p.writer()) {\n-      stream.write(new byte[] {'c'});\n+      stream.write(new byte[] {\n+                     'c'\n+});\n     }\n     assertEquals(2L, fs.list().count());\n     assertEquals(1L, fs.list(now, now + 1).count());\n     assertEquals(0L, fs.list(now + 3600000, now + 7200000).count());\n     assertEquals(1L, fs.list(now + 7200000, now + 7200001).count());\n-\n     try (InputStream reader = p.reader()) {\n       int read = reader.read();\n       assertTrue(read > 0);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}