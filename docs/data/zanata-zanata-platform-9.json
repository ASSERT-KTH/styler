{
    "project_name": "zanata-zanata-platform",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "272",
                "column": "23",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                    null);\n        }\n        return false; // No authenticated user\n    }\n\n    public boolean isUserAllowedAccess(HProject project) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/9/SecurityFunctions.java\nindex 3933874f180..6404926be6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/9/SecurityFunctions.java\n@@ -269,8 +269,9 @@ public class SecurityFunctions extends PermissionProvider {\n                     currentUser.getPerson(), lang, true, null,\n                     null);\n         }\n-        return false; // No authenticated user\n-    }\n+        return false;\n+        // No authenticated user\n+     }\n \n     public boolean isUserAllowedAccess(HProject project) {\n         if (project.isRestrictedByRoles()) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "272",
                    "column": "19",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/9/SecurityFunctions.java\nindex 3933874f180..070f115ea62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/9/SecurityFunctions.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.security;\n \n import org.hibernate.Session;\n@@ -54,599 +55,596 @@ import static org.zanata.model.ProjectRole.TranslationMaintainer;\n  * will trigger a flush, which triggers another SmartEntitySecurityListener\n  * check and this will run into a loop.\n  *\n- *\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n public class SecurityFunctions extends PermissionProvider {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(SecurityFunctions.class);\n-\n-    @Inject\n-    private ZanataIdentity identity;\n-    @Inject\n-    private CurrentUser currentUser;\n-    @Inject\n-    private PersonDAO personDAO;\n-    /* admin can do anything */\n-\n-    @GrantsPermission\n-    public boolean isAdmin() {\n-        return identity.hasRole(\"admin\");\n-    }\n-\n-    public boolean isLoggedIn() {\n-        return currentUser.isLoggedIn();\n-    }\n-\n-    public boolean isProjectMaintainer(HProject project) {\n-        return isProjectRole(project, Maintainer);\n-    }\n-\n-    public boolean isProjectTranslationMaintainer(HProject project) {\n-        return isProjectRole(project, TranslationMaintainer);\n-    }\n-\n-    public boolean isProjectMember(HProject project) {\n-        if (isLoggedIn()) {\n-            HPerson person = currentUser.getPerson();\n-            // see class level javadoc for why we need a new session here\n-            try (AutoCloseSession autoCloseSession = newSession()) {\n-                ProjectMemberDAO projectMemberDAO =\n-                        new ProjectMemberDAO(autoCloseSession.session);\n-                if (projectMemberDAO.isProjectMember(person, project)) {\n-                    return true;\n-                }\n-                ProjectLocaleMemberDAO projectLocaleMemberDAO =\n-                        new ProjectLocaleMemberDAO(autoCloseSession.session);\n-                return projectLocaleMemberDAO.isProjectLocaleMember(person, project);\n-            }\n-        }\n-        // No authenticated user\n-        return false;\n-    }\n-    /*\n-     * Check whether the authenticated person has the given role in the given\n-     * project.\n-     */\n-\n-    private boolean isProjectRole(HProject project, ProjectRole role) {\n-        if (isLoggedIn()) {\n-            HPerson person = currentUser.getPerson();\n-            // see class level javadoc for why we need a new session here\n-            try (AutoCloseSession autoCloseSession = newSession()) {\n-                ProjectMemberDAO projectMemberDAO =\n-                        new ProjectMemberDAO(autoCloseSession.session);\n-                return projectMemberDAO.hasProjectRole(person, project, role);\n-            }\n-        }\n-        // No authenticated user\n-        return false;\n-    }\n-\n-    /**\n-     * @return a new AutoClosable wrapper of a NEW session\n-     */\n-    private static AutoCloseSession newSession() {\n-        Session session = (Session) ServiceLocator.instance()\n-                .getEntityManagerFactory().createEntityManager().getDelegate();\n-        return new AutoCloseSession(session);\n-    }\n-\n-    private boolean userHasProjectLanguageRole(HProject project, HLocale lang,\n-            LocaleRole role) {\n-        if (isLoggedIn()) {\n-            HPerson person = currentUser.getPerson();\n-            return ServiceLocator.instance()\n-                    .getInstance(ProjectLocaleMemberDAO.class)\n-                    .hasProjectLocaleRole(person, project, lang, role);\n-        }\n-        // No authenticated user\n-        return false;\n-    }\n-\n-    /**\n-     * ************************************************************************\n-     * The Following Rules are for Identity Management\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = \"create\")\n-    public boolean canCreateAccount(String target) {\n-        return target.equals(\"seam.account\") && isAdmin();\n-    }\n-\n-    @GrantsPermission\n-    public boolean canManageUsers(String target) {\n-        return target.equals(\"seam.user\") && isAdmin();\n-    }\n-\n-    @GrantsPermission\n-    public boolean canManageRoles(String target) {\n-        return target.equals(\"seam.role\") && isAdmin();\n-    }\n-    /* 'project-creator' can create project */\n-\n-    /**\n-     * ************************************************************************\n-     * Project ownership rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = \"insert\")\n-    public boolean canCreateProject(HProject target) {\n-        return identity.hasRole(\"project-creator\");\n-    }\n-\n-    /**\n-     * Anyone can read a non-private project\n-     * Only project members can read private project\n-     */\n-    @GrantsPermission(actions = \"read\")\n-    public boolean canReadProject(HProject target) {\n-        return !target.isPrivateProject() || isProjectMember(target);\n-    }\n-\n-    /**\n-     * Anyone can read a non-private project\n-     * Only project members can read private project\n-     */\n-    @GrantsPermission(actions = \"read\")\n-    public boolean canReadProjectIteration(HProjectIteration target) {\n-        return !target.getProject().isPrivateProject() ||\n-                isProjectMember(target.getProject());\n-    }\n-    /*\n-     * Project maintainers may edit (but not delete) a project, or add an\n-     * iteration. Note that 'add-iteration' (on a project) should be granted in\n-     * the same circumstances that 'insert' is granted (on an iteration). In\n-     * other words, make sure the rules agree with each other. (NB:\n-     * 'add-iteration' is used in the UI to enable buttons etc, without\n-     * requiring the construction of HProjectIteration just to do a permission\n-     * check.)\n-     */\n-\n-    @GrantsPermission(actions = { \"update\", \"add-iteration\" })\n-    public boolean canUpdateProjectOrAddIteration(HProject project) {\n-        if (!identity.isLoggedIn()) {\n-            return false;\n+  private static final org.slf4j.Logger log =\n+    org.slf4j.LoggerFactory.getLogger(SecurityFunctions.class);\n+\n+  @Inject\n+  private ZanataIdentity identity;\n+  @Inject\n+  private CurrentUser currentUser;\n+  @Inject\n+  private PersonDAO personDAO;\n+  /* admin can do anything */\n+\n+  @GrantsPermission\n+  public boolean isAdmin() {\n+    return identity.hasRole(\"admin\");\n+  }\n+\n+  public boolean isLoggedIn() {\n+    return currentUser.isLoggedIn();\n+  }\n+\n+  public boolean isProjectMaintainer(HProject project) {\n+    return isProjectRole(project, Maintainer);\n+  }\n+\n+  public boolean isProjectTranslationMaintainer(HProject project) {\n+    return isProjectRole(project, TranslationMaintainer);\n+  }\n+\n+  public boolean isProjectMember(HProject project) {\n+    if (isLoggedIn()) {\n+      HPerson person = currentUser.getPerson();\n+      // see class level javadoc for why we need a new session here\n+      try (AutoCloseSession autoCloseSession = newSession()) {\n+        ProjectMemberDAO projectMemberDAO =\n+          new ProjectMemberDAO(autoCloseSession.session);\n+        if (projectMemberDAO.isProjectMember(person, project)) {\n+          return true;\n         }\n-        return isProjectMaintainer(project);\n-    }\n-    /*\n-     * Project maintainers may create or edit (but not delete) a project\n-     * iteration\n-     */\n-\n-    @GrantsPermission(actions = { \"insert\", \"update\", \"import-template\" })\n-    public boolean\n-            canInsertOrUpdateProjectIteration(HProjectIteration iteration) {\n-        return isProjectMaintainer(iteration.getProject());\n-    }\n-\n-    @GrantsPermission(actions = \"merge-trans\")\n-    public boolean canMergeTrans(HProject project) {\n-        return isAdmin() || isProjectMaintainer(project);\n-    }\n-    /* Maintainer can manage all project roles */\n-\n-    /**\n-     * ************************************************************************\n-     * Project team management rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = { \"manage-members\" })\n-    public boolean canManageProjectMembers(HProject project) {\n-        return identity.isLoggedIn() && isProjectMaintainer(project);\n-    }\n-    /* Translation Maintainer can manage project translation team */\n-\n-    @GrantsPermission(actions = { \"manage-translation-members\" })\n-    public boolean canManageProjectTranslationMembers(HProject project) {\n-        // TODO add a DAO check for multiple project roles at once (single query\n-        // instead of two)\n-        return identity.isLoggedIn() && (isProjectTranslationMaintainer(project)\n-                || isProjectMaintainer(project));\n-    }\n-    /*\n-     * Global Language Team members can add a translation for their language\n-     * teams, unless global translation is restricted.\n-     */\n-\n-    /**\n-     * ************************************************************************\n-     * Translation rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\" })\n-    public boolean canTranslate(HProject project, HLocale lang) {\n-        return !project.isPrivateProject()\n-                && isUserAllowedAccess(project)\n-                && isUserTranslatorOfLanguage(lang);\n-    }\n-\n-    public boolean isUserTranslatorOfLanguage(HLocale lang) {\n-        if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, true, null,\n-                    null);\n-        }\n-        return false; // No authenticated user\n-    }\n-\n-    public boolean isUserAllowedAccess(HProject project) {\n-        if (project.isRestrictedByRoles()) {\n-            for (HAccountRole role : project.getAllowedRoles()) {\n-                if (identity.hasRole(role.getName())) {\n-                    return true;\n-                }\n-            }\n-            // no access\n-            return false;\n-        } else {\n-            return true;\n+        ProjectLocaleMemberDAO projectLocaleMemberDAO =\n+          new ProjectLocaleMemberDAO(autoCloseSession.session);\n+        return projectLocaleMemberDAO.isProjectLocaleMember(person, project);\n+      }\n+    }\n+    // No authenticated user\n+    return false;\n+  }\n+  /*\n+   * Check whether the authenticated person has the given role in the given\n+   * project.\n+   */\n+\n+  private boolean isProjectRole(HProject project, ProjectRole role) {\n+    if (isLoggedIn()) {\n+      HPerson person = currentUser.getPerson();\n+      // see class level javadoc for why we need a new session here\n+      try (AutoCloseSession autoCloseSession = newSession()) {\n+        ProjectMemberDAO projectMemberDAO =\n+          new ProjectMemberDAO(autoCloseSession.session);\n+        return projectMemberDAO.hasProjectRole(person, project, role);\n+      }\n+    }\n+    // No authenticated user\n+    return false;\n+  }\n+\n+  /**\n+   * @return a new AutoClosable wrapper of a NEW session\n+   */\n+  private static AutoCloseSession newSession() {\n+    Session session = (Session) ServiceLocator.instance()\n+      .getEntityManagerFactory().createEntityManager().getDelegate();\n+    return new AutoCloseSession(session);\n+  }\n+\n+  private boolean userHasProjectLanguageRole(HProject project, HLocale lang,\n+                                             LocaleRole role) {\n+    if (isLoggedIn()) {\n+      HPerson person = currentUser.getPerson();\n+      return ServiceLocator.instance()\n+        .getInstance(ProjectLocaleMemberDAO.class)\n+        .hasProjectLocaleRole(person, project, lang, role);\n+    }\n+    // No authenticated user\n+    return false;\n+  }\n+\n+  /**\n+   * ************************************************************************\n+   * The Following Rules are for Identity Management\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = \"create\")\n+  public boolean canCreateAccount(String target) {\n+    return target.equals(\"seam.account\") && isAdmin();\n+  }\n+\n+  @GrantsPermission\n+  public boolean canManageUsers(String target) {\n+    return target.equals(\"seam.user\") && isAdmin();\n+  }\n+\n+  @GrantsPermission\n+  public boolean canManageRoles(String target) {\n+    return target.equals(\"seam.role\") && isAdmin();\n+  }\n+  /* 'project-creator' can create project */\n+\n+  /**\n+   * ************************************************************************\n+   * Project ownership rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = \"insert\")\n+  public boolean canCreateProject(HProject target) {\n+    return identity.hasRole(\"project-creator\");\n+  }\n+\n+  /**\n+   * Anyone can read a non-private project\n+   * Only project members can read private project\n+   */\n+  @GrantsPermission(actions = \"read\")\n+  public boolean canReadProject(HProject target) {\n+    return !target.isPrivateProject() || isProjectMember(target);\n+  }\n+\n+  /**\n+   * Anyone can read a non-private project\n+   * Only project members can read private project\n+   */\n+  @GrantsPermission(actions = \"read\")\n+  public boolean canReadProjectIteration(HProjectIteration target) {\n+    return !target.getProject().isPrivateProject() ||\n+      isProjectMember(target.getProject());\n+  }\n+  /*\n+   * Project maintainers may edit (but not delete) a project, or add an\n+   * iteration. Note that 'add-iteration' (on a project) should be granted in\n+   * the same circumstances that 'insert' is granted (on an iteration). In\n+   * other words, make sure the rules agree with each other. (NB:\n+   * 'add-iteration' is used in the UI to enable buttons etc, without\n+   * requiring the construction of HProjectIteration just to do a permission\n+   * check.)\n+   */\n+\n+  @GrantsPermission(actions = {\"update\", \"add-iteration\"})\n+  public boolean canUpdateProjectOrAddIteration(HProject project) {\n+    if (!identity.isLoggedIn()) {\n+      return false;\n+    }\n+    return isProjectMaintainer(project);\n+  }\n+  /*\n+   * Project maintainers may create or edit (but not delete) a project\n+   * iteration\n+   */\n+\n+  @GrantsPermission(actions = {\"insert\", \"update\", \"import-template\"})\n+  public boolean\n+  canInsertOrUpdateProjectIteration(HProjectIteration iteration) {\n+    return isProjectMaintainer(iteration.getProject());\n+  }\n+\n+  @GrantsPermission(actions = \"merge-trans\")\n+  public boolean canMergeTrans(HProject project) {\n+    return isAdmin() || isProjectMaintainer(project);\n+  }\n+  /* Maintainer can manage all project roles */\n+\n+  /**\n+   * ************************************************************************\n+   * Project team management rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = {\"manage-members\"})\n+  public boolean canManageProjectMembers(HProject project) {\n+    return identity.isLoggedIn() && isProjectMaintainer(project);\n+  }\n+  /* Translation Maintainer can manage project translation team */\n+\n+  @GrantsPermission(actions = {\"manage-translation-members\"})\n+  public boolean canManageProjectTranslationMembers(HProject project) {\n+    // TODO add a DAO check for multiple project roles at once (single query\n+    // instead of two)\n+    return identity.isLoggedIn() && (isProjectTranslationMaintainer(project)\n+      || isProjectMaintainer(project));\n+  }\n+  /*\n+   * Global Language Team members can add a translation for their language\n+   * teams, unless global translation is restricted.\n+   */\n+\n+  /**\n+   * ************************************************************************\n+   * Translation rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = {\"add-translation\", \"modify-translation\"})\n+  public boolean canTranslate(HProject project, HLocale lang) {\n+    return !project.isPrivateProject()\n+      && isUserAllowedAccess(project)\n+      && isUserTranslatorOfLanguage(lang);\n+  }\n+\n+  public boolean isUserTranslatorOfLanguage(HLocale lang) {\n+    if (isLoggedIn()) {\n+      return personDAO.isUserInLanguageTeamWithRoles(\n+        currentUser.getPerson(), lang, true, null,\n+        null);\n+    }\n+    return false; // No authenticated user\n+  }\n+\n+  public boolean isUserAllowedAccess(HProject project) {\n+    if (project.isRestrictedByRoles()) {\n+      for (HAccountRole role : project.getAllowedRoles()) {\n+        if (identity.hasRole(role.getName())) {\n+          return true;\n         }\n-    }\n-    /*\n-     * Project Language Translators can add a translation for their language\n-     * regardless of global translation setting.\n-     */\n-\n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\" })\n-    public boolean projectTranslatorCanTranslate(HProject project,\n-            HLocale lang) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, lang,\n-                LocaleRole.Translator);\n-    }\n-\n-    /**\n-     * Project language translators can translate glossary term for their\n-     * language regardless of global translation setting.\n-     */\n-    @GrantsPermission(actions = { \"glossary-update\" })\n-    public boolean projectTranslatorCanTranslateGlossary(HProject project,\n-            HLocale lang) {\n-        return isLoggedIn() && (canManageProjectTranslationMembers(project)\n-                || userHasProjectLanguageRole(project, lang,\n-                        LocaleRole.Glossarist));\n-    }\n-\n-    @GrantsPermission(actions = { \"glossary-insert\", \"glossary-delete\" })\n-    public boolean projectTranslatorCanAddDeleteGlossary(HProject project) {\n-        return isLoggedIn() && canManageProjectTranslationMembers(project);\n-    }\n-\n-    @GrantsPermission(actions = { \"glossary-download\" })\n-    public boolean userCanDownloadProjectGlossary(HProject project) {\n-        return isLoggedIn();\n-    }\n-    /*\n-     * Global Language Team reviewer can approve/reject translation, unless\n-     * global translation is restricted.\n-     */\n-    // TODO Unify these two permission actions into a single one\n-\n-    /**\n-     * ************************************************************************\n-     * Review translation rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = { \"review-translation\", \"translation-review\" })\n-    public boolean canReviewTranslation(HProject project, HLocale locale) {\n-        return !project.isPrivateProject()\n-                && isUserAllowedAccess(project)\n-                && isUserReviewerOfLanguage(locale);\n-    }\n-\n-    public boolean isUserReviewerOfLanguage(HLocale lang) {\n-        if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, null, true,\n-                    null);\n-        } else {\n-            return false;\n-        }\n-    }\n-    /*\n-     * Project Maintainers can add, modify or review a translation for their\n-     * projects\n-     */\n-\n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\",\n-            \"review-translation\", \"translation-review\" })\n-    public boolean canAddOrReviewTranslation(HProject project, HLocale locale) {\n-        return isLoggedIn() && isProjectMaintainer(project);\n-    }\n-    /*\n-     * Project Translation Maintainers can add, modify or review a translation\n-     * for their projects.\n-     */\n-\n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\",\n-            \"review-translation\", \"translation-review\" })\n-    public boolean translationMaintainerCanTranslate(HProject project,\n-            HLocale locale) {\n-        return isLoggedIn() && isProjectTranslationMaintainer(project);\n-    }\n-    /*\n-     * Project Translation Reviewer can perform translation and review for their\n-     * language in the project, regardless of global translation permission.\n-     */\n-\n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\",\n-            \"review-translation\", \"translation-review\" })\n-    public boolean projectReviewerCanTranslateAndReview(HProject project,\n-            HLocale lang) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, lang,\n-                LocaleRole.Reviewer);\n-    }\n-    /* Project Maintainer can import translation (merge type is IMPORT) */\n-\n-    @GrantsPermission(actions = \"import-translation\")\n-    public boolean canImportTranslation(HProjectIteration projectIteration) {\n-        return isLoggedIn()\n-                && isProjectMaintainer(projectIteration.getProject());\n-    }\n-    /*\n-     * Project Translation Maintainer can import translation (merge type is\n-     * IMPORT)\n-     */\n-\n-    @GrantsPermission(actions = \"import-translation\")\n-    public boolean translationMaintainerCanImportTranslation(\n-            HProjectIteration projectIteration) {\n-        return isLoggedIn() && isProjectTranslationMaintainer(\n-                projectIteration.getProject());\n-    }\n-    /* Membership in global language teams. */\n-\n-    public boolean isLanguageTeamMember(HLocale lang) {\n-        if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, null, null,\n-                    null);\n-        } else {\n-            return false;\n-        }\n-    }\n-    /* 'glossarist' can push and update glossaries */\n-\n-    /**\n-     * ************************************************************************\n-     * Glossary rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = { \"glossary-insert\", \"glossary-update\" })\n-    public boolean canPushGlossary() {\n-        return identity.hasRole(\"glossarist\");\n-    }\n-    /* 'glossarist' can download glossary */\n-\n-    @GrantsPermission(actions = { \"glossary-download\" })\n-    public boolean canDownloadGlossary() {\n-        return identity.isLoggedIn();\n-    }\n-    /* 'glossarist-admin' can also delete */\n-\n-    @GrantsPermission(actions = { \"glossary-insert\", \"glossary-update\",\n-            \"glossary-delete\" })\n-    public boolean canAdminGlossary() {\n-        return identity.hasRole(\"glossary-admin\");\n-    }\n-    /* Anyone can read Locale members */\n-\n-    /**\n-     * ************************************************************************\n-     * Language Team Coordinator rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = \"read\")\n-    public static boolean canSeeLocaleMembers(HLocaleMember localeMember) {\n-        return true;\n-    }\n-    /* 'team coordinator' can manage language teams */\n-\n-    @GrantsPermission(actions = \"manage-language-team\")\n-    public boolean isUserCoordinatorOfLanguage(HLocale lang) {\n-        if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, null, null,\n-                    true);\n-        } else {\n-            return false;\n-        }\n-    }\n-    /* 'team coordinator' can insert/update/delete language team members */\n-\n-    @GrantsPermission(actions = { \"insert\", \"update\", \"delete\" })\n-    public boolean canModifyLanguageTeamMembers(HLocaleMember localeMember) {\n-        return isUserCoordinatorOfLanguage(localeMember.getSupportedLanguage());\n-    }\n-    /* Only admin can delete language in the server */\n-\n-    @GrantsPermission(actions = { \"delete-language\", \"insert-language\" })\n-    public boolean canManageSystemLanguage() {\n-        return identity.hasRole(\"admin\");\n-    }\n-\n-    @GrantsPermission(actions = { \"read-source-language\"})\n-    public boolean canGetAllSourceLanguages() {\n-        return identity.hasRole(\"admin\");\n-    }\n-\n-    // Only admin can view obsolete projects\n-\n-    /**\n-     * ************************************************************************\n-     * View Obsolete Project and Project Iteration rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = \"view-obsolete\")\n-    public boolean canViewObsoleteProject(HProject project) {\n-        return identity.hasRole(\"admin\");\n-    }\n-    // Only admin can view obsolete project iterations\n-\n-    @GrantsPermission(actions = \"view-obsolete\")\n-    public boolean canViewObsoleteProjectIteration(\n-            HProjectIteration projectIteration) {\n-        return identity.hasRole(\"admin\");\n-    }\n-    // Project maintainer can archive/delete projects\n-\n-    /**\n-     * ************************************************************************\n-     * Mark Project and Project Iteration obsolete rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = \"mark-obsolete\")\n-    public boolean canArchiveProject(HProject project) {\n-        return isProjectMaintainer(project);\n-    }\n-    // Project maintainer can archive/delete project iterations\n-\n-    @GrantsPermission(actions = \"mark-obsolete\")\n-    public boolean\n-            canArchiveProjectIteration(HProjectIteration projectIteration) {\n-        return isProjectMaintainer(projectIteration.getProject());\n-    }\n-    /*\n-     * Permissions to download files. NOTE: Currently any authenticated user can\n-     * download files\n-     */\n-\n-    /**\n-     * ************************************************************************\n-     * File Download rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = { \"download-single\", \"download-all\" })\n-    public boolean canDownloadFiles(HProjectIteration projectIteration) {\n-        return identity.isLoggedIn();\n-    }\n-\n-    /**\n-     * ************************************************************************\n-     * Version Group rules\n-     * ************************************************************************\n-     */\n-    @GrantsPermission(actions = \"update\")\n-    public boolean canUpdateVersionGroup(HIterationGroup group) {\n-        if (isLoggedIn()) {\n-            HPerson person = currentUser.getPerson();\n-            return group.getMaintainers().contains(person);\n-        }\n-        return false;\n-    }\n-\n-    @GrantsPermission(actions = \"insert\")\n-    public boolean canInsertVersionGroup(HIterationGroup group) {\n-        return isAdmin();\n-    }\n-\n-    /***************************************************************************\n-     * Copy Trans rules\n-     **************************************************************************/\n-\n-    /**\n-     * Admins and Project maintainers can perform copy-trans\n-     */\n-    @GrantsPermission(actions = \"copy-trans\")\n-    public boolean canRunCopyTrans(HProjectIteration iteration) {\n-        return isLoggedIn() && isProjectMaintainer(iteration.getProject());\n-    }\n-\n-    /**\n-     * **************************************************************************************\n-     * Review comment rules\n-     * ****************************************************************************************\n-     */\n-    @GrantsPermission(actions = \"review-comment\")\n-    public boolean canCommentOnReview(HLocale locale, HProject project) {\n-        return !project.isPrivateProject()\n-                && isUserAllowedAccess(project) && isLanguageTeamMember(locale);\n-    }\n-\n-    @GrantsPermission(actions = \"review-comment\")\n-    public boolean canMaintainerCommentOnReview(HLocale locale,\n-            HProject project) {\n-        return isLoggedIn() && isProjectMaintainer(project);\n-    }\n-\n-    @GrantsPermission(actions = \"review-comment\")\n-    public boolean canTranslationMaintainerCommentOnReview(HLocale locale,\n-            HProject project) {\n-        return isLoggedIn() && isProjectTranslationMaintainer(project);\n-    }\n-\n-    @GrantsPermission(actions = \"review-comment\")\n-    public boolean canReviewerCommentOnReview(HLocale locale,\n-            HProject project) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, locale,\n-                LocaleRole.Reviewer);\n-    }\n-\n-    @GrantsPermission(actions = \"review-comment\")\n-    public boolean canTranslatorCommentOnReview(HLocale locale,\n-            HProject project) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, locale,\n-                LocaleRole.Translator);\n-    }\n-\n-    /**\n-     * **************************************************************************************\n-     * TMX rules\n-     * ****************************************************************************************\n-     */\n-    @GrantsPermission(actions = \"download-tmx\")\n-    public boolean canDownloadTMX() {\n-        return isLoggedIn();\n-    }\n-\n-    /*****************************************************************************************\n-     * HTTP request rules\n-     ******************************************************************************************/\n-\n-    /**\n-     * Check if user can access to REST URL with httpMethod. 1) Check if request\n-     * can communicate to with rest service path, 2) then check if request can\n-     * perform the specific API action.\n-     *\n-     *\n-     * This rule apply to all REST endpoint.\n-     *\n-     * @param identity\n-     *            - zanata identity representing authenticated account\n-     * @param restServicePath\n-     *            - service path of rest request. See annotation @Path in REST\n-     *            service class.\n-     */\n-    public static boolean canAccessRestPath(@Nonnull ZanataIdentity identity,\n-            String restServicePath) {\n-        if (isLocalesServicePath(restServicePath)) {\n-            log.debug(\"Allow rest access for /locales path (Zanata UI)\");\n-            return true;\n-        }\n-        return identity.isLoggedIn();\n-    }\n-\n-    /**\n-     * Check if request path is Zanata UI locale endpoint. This endpoint is used\n-     * for getting list of locales internationalised in Zanata, update locale in\n-     * Zanata instance.\n-     */\n-    private static boolean isLocalesServicePath(String servicePath) {\n-        return servicePath != null\n-                && servicePath.contains(\"/rest\" + LocalesResource.SERVICE_PATH);\n-    }\n-\n-    private static class AutoCloseSession implements AutoCloseable {\n-        private final Session session;\n-\n-        private AutoCloseSession(Session session) {\n-            this.session = session;\n-        }\n-\n-        public void close() {\n-            session.close();\n-        }\n-    }\n+      }\n+      // no access\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  }\n+  /*\n+   * Project Language Translators can add a translation for their language\n+   * regardless of global translation setting.\n+   */\n+\n+  @GrantsPermission(actions = {\"add-translation\", \"modify-translation\"})\n+  public boolean projectTranslatorCanTranslate(HProject project,\n+                                               HLocale lang) {\n+    return isLoggedIn() && userHasProjectLanguageRole(project, lang,\n+      LocaleRole.Translator);\n+  }\n+\n+  /**\n+   * Project language translators can translate glossary term for their\n+   * language regardless of global translation setting.\n+   */\n+  @GrantsPermission(actions = {\"glossary-update\"})\n+  public boolean projectTranslatorCanTranslateGlossary(HProject project,\n+                                                       HLocale lang) {\n+    return isLoggedIn() && (canManageProjectTranslationMembers(project)\n+      || userHasProjectLanguageRole(project, lang,\n+      LocaleRole.Glossarist));\n+  }\n+\n+  @GrantsPermission(actions = {\"glossary-insert\", \"glossary-delete\"})\n+  public boolean projectTranslatorCanAddDeleteGlossary(HProject project) {\n+    return isLoggedIn() && canManageProjectTranslationMembers(project);\n+  }\n+\n+  @GrantsPermission(actions = {\"glossary-download\"})\n+  public boolean userCanDownloadProjectGlossary(HProject project) {\n+    return isLoggedIn();\n+  }\n+  /*\n+   * Global Language Team reviewer can approve/reject translation, unless\n+   * global translation is restricted.\n+   */\n+  // TODO Unify these two permission actions into a single one\n+\n+  /**\n+   * ************************************************************************\n+   * Review translation rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = {\"review-translation\", \"translation-review\"})\n+  public boolean canReviewTranslation(HProject project, HLocale locale) {\n+    return !project.isPrivateProject()\n+      && isUserAllowedAccess(project)\n+      && isUserReviewerOfLanguage(locale);\n+  }\n+\n+  public boolean isUserReviewerOfLanguage(HLocale lang) {\n+    if (isLoggedIn()) {\n+      return personDAO.isUserInLanguageTeamWithRoles(\n+        currentUser.getPerson(), lang, null, true,\n+        null);\n+    } else {\n+      return false;\n+    }\n+  }\n+  /*\n+   * Project Maintainers can add, modify or review a translation for their\n+   * projects\n+   */\n+\n+  @GrantsPermission(actions = {\"add-translation\", \"modify-translation\",\n+    \"review-translation\", \"translation-review\"})\n+  public boolean canAddOrReviewTranslation(HProject project, HLocale locale) {\n+    return isLoggedIn() && isProjectMaintainer(project);\n+  }\n+  /*\n+   * Project Translation Maintainers can add, modify or review a translation\n+   * for their projects.\n+   */\n+\n+  @GrantsPermission(actions = {\"add-translation\", \"modify-translation\",\n+    \"review-translation\", \"translation-review\"})\n+  public boolean translationMaintainerCanTranslate(HProject project,\n+                                                   HLocale locale) {\n+    return isLoggedIn() && isProjectTranslationMaintainer(project);\n+  }\n+  /*\n+   * Project Translation Reviewer can perform translation and review for their\n+   * language in the project, regardless of global translation permission.\n+   */\n+\n+  @GrantsPermission(actions = {\"add-translation\", \"modify-translation\",\n+    \"review-translation\", \"translation-review\"})\n+  public boolean projectReviewerCanTranslateAndReview(HProject project,\n+                                                      HLocale lang) {\n+    return isLoggedIn() && userHasProjectLanguageRole(project, lang,\n+      LocaleRole.Reviewer);\n+  }\n+  /* Project Maintainer can import translation (merge type is IMPORT) */\n+\n+  @GrantsPermission(actions = \"import-translation\")\n+  public boolean canImportTranslation(HProjectIteration projectIteration) {\n+    return isLoggedIn()\n+      && isProjectMaintainer(projectIteration.getProject());\n+  }\n+  /*\n+   * Project Translation Maintainer can import translation (merge type is\n+   * IMPORT)\n+   */\n+\n+  @GrantsPermission(actions = \"import-translation\")\n+  public boolean translationMaintainerCanImportTranslation(\n+    HProjectIteration projectIteration) {\n+    return isLoggedIn() && isProjectTranslationMaintainer(\n+      projectIteration.getProject());\n+  }\n+  /* Membership in global language teams. */\n+\n+  public boolean isLanguageTeamMember(HLocale lang) {\n+    if (isLoggedIn()) {\n+      return personDAO.isUserInLanguageTeamWithRoles(\n+        currentUser.getPerson(), lang, null, null,\n+        null);\n+    } else {\n+      return false;\n+    }\n+  }\n+  /* 'glossarist' can push and update glossaries */\n+\n+  /**\n+   * ************************************************************************\n+   * Glossary rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = {\"glossary-insert\", \"glossary-update\"})\n+  public boolean canPushGlossary() {\n+    return identity.hasRole(\"glossarist\");\n+  }\n+  /* 'glossarist' can download glossary */\n+\n+  @GrantsPermission(actions = {\"glossary-download\"})\n+  public boolean canDownloadGlossary() {\n+    return identity.isLoggedIn();\n+  }\n+  /* 'glossarist-admin' can also delete */\n+\n+  @GrantsPermission(actions = {\"glossary-insert\", \"glossary-update\",\n+    \"glossary-delete\"})\n+  public boolean canAdminGlossary() {\n+    return identity.hasRole(\"glossary-admin\");\n+  }\n+  /* Anyone can read Locale members */\n+\n+  /**\n+   * ************************************************************************\n+   * Language Team Coordinator rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = \"read\")\n+  public static boolean canSeeLocaleMembers(HLocaleMember localeMember) {\n+    return true;\n+  }\n+  /* 'team coordinator' can manage language teams */\n+\n+  @GrantsPermission(actions = \"manage-language-team\")\n+  public boolean isUserCoordinatorOfLanguage(HLocale lang) {\n+    if (isLoggedIn()) {\n+      return personDAO.isUserInLanguageTeamWithRoles(\n+        currentUser.getPerson(), lang, null, null,\n+        true);\n+    } else {\n+      return false;\n+    }\n+  }\n+  /* 'team coordinator' can insert/update/delete language team members */\n+\n+  @GrantsPermission(actions = {\"insert\", \"update\", \"delete\"})\n+  public boolean canModifyLanguageTeamMembers(HLocaleMember localeMember) {\n+    return isUserCoordinatorOfLanguage(localeMember.getSupportedLanguage());\n+  }\n+  /* Only admin can delete language in the server */\n+\n+  @GrantsPermission(actions = {\"delete-language\", \"insert-language\"})\n+  public boolean canManageSystemLanguage() {\n+    return identity.hasRole(\"admin\");\n+  }\n+\n+  @GrantsPermission(actions = {\"read-source-language\"})\n+  public boolean canGetAllSourceLanguages() {\n+    return identity.hasRole(\"admin\");\n+  }\n+\n+  // Only admin can view obsolete projects\n+\n+  /**\n+   * ************************************************************************\n+   * View Obsolete Project and Project Iteration rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = \"view-obsolete\")\n+  public boolean canViewObsoleteProject(HProject project) {\n+    return identity.hasRole(\"admin\");\n+  }\n+  // Only admin can view obsolete project iterations\n+\n+  @GrantsPermission(actions = \"view-obsolete\")\n+  public boolean canViewObsoleteProjectIteration(\n+    HProjectIteration projectIteration) {\n+    return identity.hasRole(\"admin\");\n+  }\n+  // Project maintainer can archive/delete projects\n+\n+  /**\n+   * ************************************************************************\n+   * Mark Project and Project Iteration obsolete rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = \"mark-obsolete\")\n+  public boolean canArchiveProject(HProject project) {\n+    return isProjectMaintainer(project);\n+  }\n+  // Project maintainer can archive/delete project iterations\n+\n+  @GrantsPermission(actions = \"mark-obsolete\")\n+  public boolean\n+  canArchiveProjectIteration(HProjectIteration projectIteration) {\n+    return isProjectMaintainer(projectIteration.getProject());\n+  }\n+  /*\n+   * Permissions to download files. NOTE: Currently any authenticated user can\n+   * download files\n+   */\n+\n+  /**\n+   * ************************************************************************\n+   * File Download rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = {\"download-single\", \"download-all\"})\n+  public boolean canDownloadFiles(HProjectIteration projectIteration) {\n+    return identity.isLoggedIn();\n+  }\n+\n+  /**\n+   * ************************************************************************\n+   * Version Group rules\n+   * ************************************************************************\n+   */\n+  @GrantsPermission(actions = \"update\")\n+  public boolean canUpdateVersionGroup(HIterationGroup group) {\n+    if (isLoggedIn()) {\n+      HPerson person = currentUser.getPerson();\n+      return group.getMaintainers().contains(person);\n+    }\n+    return false;\n+  }\n+\n+  @GrantsPermission(actions = \"insert\")\n+  public boolean canInsertVersionGroup(HIterationGroup group) {\n+    return isAdmin();\n+  }\n+\n+  /***************************************************************************\n+   * Copy Trans rules\n+   **************************************************************************/\n+\n+  /**\n+   * Admins and Project maintainers can perform copy-trans\n+   */\n+  @GrantsPermission(actions = \"copy-trans\")\n+  public boolean canRunCopyTrans(HProjectIteration iteration) {\n+    return isLoggedIn() && isProjectMaintainer(iteration.getProject());\n+  }\n+\n+  /**\n+   * **************************************************************************************\n+   * Review comment rules\n+   * ****************************************************************************************\n+   */\n+  @GrantsPermission(actions = \"review-comment\")\n+  public boolean canCommentOnReview(HLocale locale, HProject project) {\n+    return !project.isPrivateProject()\n+      && isUserAllowedAccess(project) && isLanguageTeamMember(locale);\n+  }\n+\n+  @GrantsPermission(actions = \"review-comment\")\n+  public boolean canMaintainerCommentOnReview(HLocale locale,\n+                                              HProject project) {\n+    return isLoggedIn() && isProjectMaintainer(project);\n+  }\n+\n+  @GrantsPermission(actions = \"review-comment\")\n+  public boolean canTranslationMaintainerCommentOnReview(HLocale locale,\n+                                                         HProject project) {\n+    return isLoggedIn() && isProjectTranslationMaintainer(project);\n+  }\n+\n+  @GrantsPermission(actions = \"review-comment\")\n+  public boolean canReviewerCommentOnReview(HLocale locale,\n+                                            HProject project) {\n+    return isLoggedIn() && userHasProjectLanguageRole(project, locale,\n+      LocaleRole.Reviewer);\n+  }\n+\n+  @GrantsPermission(actions = \"review-comment\")\n+  public boolean canTranslatorCommentOnReview(HLocale locale,\n+                                              HProject project) {\n+    return isLoggedIn() && userHasProjectLanguageRole(project, locale,\n+      LocaleRole.Translator);\n+  }\n+\n+  /**\n+   * **************************************************************************************\n+   * TMX rules\n+   * ****************************************************************************************\n+   */\n+  @GrantsPermission(actions = \"download-tmx\")\n+  public boolean canDownloadTMX() {\n+    return isLoggedIn();\n+  }\n+\n+  /*****************************************************************************************\n+   * HTTP request rules\n+   ******************************************************************************************/\n+\n+  /**\n+   * Check if user can access to REST URL with httpMethod. 1) Check if request\n+   * can communicate to with rest service path, 2) then check if request can\n+   * perform the specific API action.\n+   * <p>\n+   * <p>\n+   * This rule apply to all REST endpoint.\n+   *\n+   * @param identity        - zanata identity representing authenticated account\n+   * @param restServicePath - service path of rest request. See annotation @Path in REST\n+   *                        service class.\n+   */\n+  public static boolean canAccessRestPath(@Nonnull ZanataIdentity identity,\n+                                          String restServicePath) {\n+    if (isLocalesServicePath(restServicePath)) {\n+      log.debug(\"Allow rest access for /locales path (Zanata UI)\");\n+      return true;\n+    }\n+    return identity.isLoggedIn();\n+  }\n+\n+  /**\n+   * Check if request path is Zanata UI locale endpoint. This endpoint is used\n+   * for getting list of locales internationalised in Zanata, update locale in\n+   * Zanata instance.\n+   */\n+  private static boolean isLocalesServicePath(String servicePath) {\n+    return servicePath != null\n+      && servicePath.contains(\"/rest\" + LocalesResource.SERVICE_PATH);\n+  }\n+\n+  private static class AutoCloseSession implements AutoCloseable {\n+    private final Session session;\n+\n+    private AutoCloseSession(Session session) {\n+      this.session = session;\n+    }\n+\n+    public void close() {\n+      session.close();\n+    }\n+  }\n }\n",
            "diff_size": 701
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "266",
                    "column": "23",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/9/SecurityFunctions.java\nindex 3933874f180..1aaa78b0bbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/9/SecurityFunctions.java\n@@ -58,10 +58,10 @@ import static org.zanata.model.ProjectRole.TranslationMaintainer;\n  * @author Carlos Munoz\n  *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n-public class SecurityFunctions extends PermissionProvider {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(SecurityFunctions.class);\n \n+\n+public class SecurityFunctions extends PermissionProvider {\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(SecurityFunctions.class);\n     @Inject\n     private ZanataIdentity identity;\n     @Inject\n@@ -69,7 +69,6 @@ public class SecurityFunctions extends PermissionProvider {\n     @Inject\n     private PersonDAO personDAO;\n     /* admin can do anything */\n-\n     @GrantsPermission\n     public boolean isAdmin() {\n         return identity.hasRole(\"admin\");\n@@ -92,13 +91,11 @@ public class SecurityFunctions extends PermissionProvider {\n             HPerson person = currentUser.getPerson();\n             // see class level javadoc for why we need a new session here\n             try (AutoCloseSession autoCloseSession = newSession()) {\n-                ProjectMemberDAO projectMemberDAO =\n-                        new ProjectMemberDAO(autoCloseSession.session);\n+                ProjectMemberDAO projectMemberDAO = new ProjectMemberDAO(autoCloseSession.session);\n                 if (projectMemberDAO.isProjectMember(person, project)) {\n                     return true;\n                 }\n-                ProjectLocaleMemberDAO projectLocaleMemberDAO =\n-                        new ProjectLocaleMemberDAO(autoCloseSession.session);\n+                ProjectLocaleMemberDAO projectLocaleMemberDAO = new ProjectLocaleMemberDAO(autoCloseSession.session);\n                 return projectLocaleMemberDAO.isProjectLocaleMember(person, project);\n             }\n         }\n@@ -115,8 +112,7 @@ public class SecurityFunctions extends PermissionProvider {\n             HPerson person = currentUser.getPerson();\n             // see class level javadoc for why we need a new session here\n             try (AutoCloseSession autoCloseSession = newSession()) {\n-                ProjectMemberDAO projectMemberDAO =\n-                        new ProjectMemberDAO(autoCloseSession.session);\n+                ProjectMemberDAO projectMemberDAO = new ProjectMemberDAO(autoCloseSession.session);\n                 return projectMemberDAO.hasProjectRole(person, project, role);\n             }\n         }\n@@ -127,19 +123,16 @@ public class SecurityFunctions extends PermissionProvider {\n     /**\n      * @return a new AutoClosable wrapper of a NEW session\n      */\n+\n     private static AutoCloseSession newSession() {\n-        Session session = (Session) ServiceLocator.instance()\n-                .getEntityManagerFactory().createEntityManager().getDelegate();\n+        Session session = (Session) ServiceLocator.instance().getEntityManagerFactory().createEntityManager().getDelegate();\n         return new AutoCloseSession(session);\n     }\n \n-    private boolean userHasProjectLanguageRole(HProject project, HLocale lang,\n-            LocaleRole role) {\n+    private boolean userHasProjectLanguageRole(HProject project, HLocale lang, LocaleRole role) {\n         if (isLoggedIn()) {\n             HPerson person = currentUser.getPerson();\n-            return ServiceLocator.instance()\n-                    .getInstance(ProjectLocaleMemberDAO.class)\n-                    .hasProjectLocaleRole(person, project, lang, role);\n+            return ServiceLocator.instance().getInstance(ProjectLocaleMemberDAO.class).hasProjectLocaleRole(person, project, lang, role);\n         }\n         // No authenticated user\n         return false;\n@@ -150,6 +143,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * The Following Rules are for Identity Management\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"create\")\n     public boolean canCreateAccount(String target) {\n         return target.equals(\"seam.account\") && isAdmin();\n@@ -171,6 +165,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Project ownership rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"insert\")\n     public boolean canCreateProject(HProject target) {\n         return identity.hasRole(\"project-creator\");\n@@ -180,6 +175,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Anyone can read a non-private project\n      * Only project members can read private project\n      */\n+\n     @GrantsPermission(actions = \"read\")\n     public boolean canReadProject(HProject target) {\n         return !target.isPrivateProject() || isProjectMember(target);\n@@ -189,10 +185,10 @@ public class SecurityFunctions extends PermissionProvider {\n      * Anyone can read a non-private project\n      * Only project members can read private project\n      */\n+\n     @GrantsPermission(actions = \"read\")\n     public boolean canReadProjectIteration(HProjectIteration target) {\n-        return !target.getProject().isPrivateProject() ||\n-                isProjectMember(target.getProject());\n+        return !target.getProject().isPrivateProject() || isProjectMember(target.getProject());\n     }\n     /*\n      * Project maintainers may edit (but not delete) a project, or add an\n@@ -217,8 +213,7 @@ public class SecurityFunctions extends PermissionProvider {\n      */\n \n     @GrantsPermission(actions = { \"insert\", \"update\", \"import-template\" })\n-    public boolean\n-            canInsertOrUpdateProjectIteration(HProjectIteration iteration) {\n+    public boolean canInsertOrUpdateProjectIteration(HProjectIteration iteration) {\n         return isProjectMaintainer(iteration.getProject());\n     }\n \n@@ -233,6 +228,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Project team management rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = { \"manage-members\" })\n     public boolean canManageProjectMembers(HProject project) {\n         return identity.isLoggedIn() && isProjectMaintainer(project);\n@@ -243,8 +239,8 @@ public class SecurityFunctions extends PermissionProvider {\n     public boolean canManageProjectTranslationMembers(HProject project) {\n         // TODO add a DAO check for multiple project roles at once (single query\n         // instead of two)\n-        return identity.isLoggedIn() && (isProjectTranslationMaintainer(project)\n-                || isProjectMaintainer(project));\n+        return identity.isLoggedIn() &&\n+            (isProjectTranslationMaintainer(project) || isProjectMaintainer(project));\n     }\n     /*\n      * Global Language Team members can add a translation for their language\n@@ -256,18 +252,16 @@ public class SecurityFunctions extends PermissionProvider {\n      * Translation rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = { \"add-translation\", \"modify-translation\" })\n     public boolean canTranslate(HProject project, HLocale lang) {\n-        return !project.isPrivateProject()\n-                && isUserAllowedAccess(project)\n-                && isUserTranslatorOfLanguage(lang);\n+        return !project.isPrivateProject() && isUserAllowedAccess(project)\n+        && isUserTranslatorOfLanguage(lang);\n     }\n \n     public boolean isUserTranslatorOfLanguage(HLocale lang) {\n         if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, true, null,\n-                    null);\n+            return personDAO.isUserInLanguageTeamWithRoles(currentUser.getPerson(), lang, true, null, null);\n         }\n         return false; // No authenticated user\n     }\n@@ -291,22 +285,19 @@ public class SecurityFunctions extends PermissionProvider {\n      */\n \n     @GrantsPermission(actions = { \"add-translation\", \"modify-translation\" })\n-    public boolean projectTranslatorCanTranslate(HProject project,\n-            HLocale lang) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, lang,\n-                LocaleRole.Translator);\n+    public boolean projectTranslatorCanTranslate(HProject project, HLocale lang) {\n+        return isLoggedIn() && userHasProjectLanguageRole(project, lang, LocaleRole.Translator);\n     }\n \n     /**\n      * Project language translators can translate glossary term for their\n      * language regardless of global translation setting.\n      */\n+\n     @GrantsPermission(actions = { \"glossary-update\" })\n-    public boolean projectTranslatorCanTranslateGlossary(HProject project,\n-            HLocale lang) {\n-        return isLoggedIn() && (canManageProjectTranslationMembers(project)\n-                || userHasProjectLanguageRole(project, lang,\n-                        LocaleRole.Glossarist));\n+    public boolean projectTranslatorCanTranslateGlossary(HProject project, HLocale lang) {\n+        return isLoggedIn() &&\n+            (canManageProjectTranslationMembers(project) || userHasProjectLanguageRole(project, lang, LocaleRole.Glossarist));\n     }\n \n     @GrantsPermission(actions = { \"glossary-insert\", \"glossary-delete\" })\n@@ -329,18 +320,16 @@ public class SecurityFunctions extends PermissionProvider {\n      * Review translation rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = { \"review-translation\", \"translation-review\" })\n     public boolean canReviewTranslation(HProject project, HLocale locale) {\n-        return !project.isPrivateProject()\n-                && isUserAllowedAccess(project)\n-                && isUserReviewerOfLanguage(locale);\n+        return !project.isPrivateProject() && isUserAllowedAccess(project)\n+        && isUserReviewerOfLanguage(locale);\n     }\n \n     public boolean isUserReviewerOfLanguage(HLocale lang) {\n         if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, null, true,\n-                    null);\n+            return personDAO.isUserInLanguageTeamWithRoles(currentUser.getPerson(), lang, null, true, null);\n         } else {\n             return false;\n         }\n@@ -350,8 +339,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * projects\n      */\n \n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\",\n-            \"review-translation\", \"translation-review\" })\n+    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\", \"review-translation\", \"translation-review\" })\n     public boolean canAddOrReviewTranslation(HProject project, HLocale locale) {\n         return isLoggedIn() && isProjectMaintainer(project);\n     }\n@@ -360,10 +348,8 @@ public class SecurityFunctions extends PermissionProvider {\n      * for their projects.\n      */\n \n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\",\n-            \"review-translation\", \"translation-review\" })\n-    public boolean translationMaintainerCanTranslate(HProject project,\n-            HLocale locale) {\n+    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\", \"review-translation\", \"translation-review\" })\n+    public boolean translationMaintainerCanTranslate(HProject project, HLocale locale) {\n         return isLoggedIn() && isProjectTranslationMaintainer(project);\n     }\n     /*\n@@ -371,19 +357,15 @@ public class SecurityFunctions extends PermissionProvider {\n      * language in the project, regardless of global translation permission.\n      */\n \n-    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\",\n-            \"review-translation\", \"translation-review\" })\n-    public boolean projectReviewerCanTranslateAndReview(HProject project,\n-            HLocale lang) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, lang,\n-                LocaleRole.Reviewer);\n+    @GrantsPermission(actions = { \"add-translation\", \"modify-translation\", \"review-translation\", \"translation-review\" })\n+    public boolean projectReviewerCanTranslateAndReview(HProject project, HLocale lang) {\n+        return isLoggedIn() && userHasProjectLanguageRole(project, lang, LocaleRole.Reviewer);\n     }\n     /* Project Maintainer can import translation (merge type is IMPORT) */\n \n     @GrantsPermission(actions = \"import-translation\")\n     public boolean canImportTranslation(HProjectIteration projectIteration) {\n-        return isLoggedIn()\n-                && isProjectMaintainer(projectIteration.getProject());\n+        return isLoggedIn() && isProjectMaintainer(projectIteration.getProject());\n     }\n     /*\n      * Project Translation Maintainer can import translation (merge type is\n@@ -391,18 +373,14 @@ public class SecurityFunctions extends PermissionProvider {\n      */\n \n     @GrantsPermission(actions = \"import-translation\")\n-    public boolean translationMaintainerCanImportTranslation(\n-            HProjectIteration projectIteration) {\n-        return isLoggedIn() && isProjectTranslationMaintainer(\n-                projectIteration.getProject());\n+    public boolean translationMaintainerCanImportTranslation(HProjectIteration projectIteration) {\n+        return isLoggedIn() && isProjectTranslationMaintainer(projectIteration.getProject());\n     }\n     /* Membership in global language teams. */\n \n     public boolean isLanguageTeamMember(HLocale lang) {\n         if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, null, null,\n-                    null);\n+            return personDAO.isUserInLanguageTeamWithRoles(currentUser.getPerson(), lang, null, null, null);\n         } else {\n             return false;\n         }\n@@ -414,6 +392,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Glossary rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = { \"glossary-insert\", \"glossary-update\" })\n     public boolean canPushGlossary() {\n         return identity.hasRole(\"glossarist\");\n@@ -426,8 +405,7 @@ public class SecurityFunctions extends PermissionProvider {\n     }\n     /* 'glossarist-admin' can also delete */\n \n-    @GrantsPermission(actions = { \"glossary-insert\", \"glossary-update\",\n-            \"glossary-delete\" })\n+    @GrantsPermission(actions = { \"glossary-insert\", \"glossary-update\", \"glossary-delete\" })\n     public boolean canAdminGlossary() {\n         return identity.hasRole(\"glossary-admin\");\n     }\n@@ -438,6 +416,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Language Team Coordinator rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"read\")\n     public static boolean canSeeLocaleMembers(HLocaleMember localeMember) {\n         return true;\n@@ -447,9 +426,7 @@ public class SecurityFunctions extends PermissionProvider {\n     @GrantsPermission(actions = \"manage-language-team\")\n     public boolean isUserCoordinatorOfLanguage(HLocale lang) {\n         if (isLoggedIn()) {\n-            return personDAO.isUserInLanguageTeamWithRoles(\n-                    currentUser.getPerson(), lang, null, null,\n-                    true);\n+            return personDAO.isUserInLanguageTeamWithRoles(currentUser.getPerson(), lang, null, null, true);\n         } else {\n             return false;\n         }\n@@ -467,7 +444,7 @@ public class SecurityFunctions extends PermissionProvider {\n         return identity.hasRole(\"admin\");\n     }\n \n-    @GrantsPermission(actions = { \"read-source-language\"})\n+    @GrantsPermission(actions = { \"read-source-language\" })\n     public boolean canGetAllSourceLanguages() {\n         return identity.hasRole(\"admin\");\n     }\n@@ -479,6 +456,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * View Obsolete Project and Project Iteration rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"view-obsolete\")\n     public boolean canViewObsoleteProject(HProject project) {\n         return identity.hasRole(\"admin\");\n@@ -486,8 +464,7 @@ public class SecurityFunctions extends PermissionProvider {\n     // Only admin can view obsolete project iterations\n \n     @GrantsPermission(actions = \"view-obsolete\")\n-    public boolean canViewObsoleteProjectIteration(\n-            HProjectIteration projectIteration) {\n+    public boolean canViewObsoleteProjectIteration(HProjectIteration projectIteration) {\n         return identity.hasRole(\"admin\");\n     }\n     // Project maintainer can archive/delete projects\n@@ -497,6 +474,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Mark Project and Project Iteration obsolete rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"mark-obsolete\")\n     public boolean canArchiveProject(HProject project) {\n         return isProjectMaintainer(project);\n@@ -504,8 +482,7 @@ public class SecurityFunctions extends PermissionProvider {\n     // Project maintainer can archive/delete project iterations\n \n     @GrantsPermission(actions = \"mark-obsolete\")\n-    public boolean\n-            canArchiveProjectIteration(HProjectIteration projectIteration) {\n+    public boolean canArchiveProjectIteration(HProjectIteration projectIteration) {\n         return isProjectMaintainer(projectIteration.getProject());\n     }\n     /*\n@@ -518,6 +495,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * File Download rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = { \"download-single\", \"download-all\" })\n     public boolean canDownloadFiles(HProjectIteration projectIteration) {\n         return identity.isLoggedIn();\n@@ -528,6 +506,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * Version Group rules\n      * ************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"update\")\n     public boolean canUpdateVersionGroup(HIterationGroup group) {\n         if (isLoggedIn()) {\n@@ -549,6 +528,7 @@ public class SecurityFunctions extends PermissionProvider {\n     /**\n      * Admins and Project maintainers can perform copy-trans\n      */\n+\n     @GrantsPermission(actions = \"copy-trans\")\n     public boolean canRunCopyTrans(HProjectIteration iteration) {\n         return isLoggedIn() && isProjectMaintainer(iteration.getProject());\n@@ -559,36 +539,31 @@ public class SecurityFunctions extends PermissionProvider {\n      * Review comment rules\n      * ****************************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"review-comment\")\n     public boolean canCommentOnReview(HLocale locale, HProject project) {\n-        return !project.isPrivateProject()\n-                && isUserAllowedAccess(project) && isLanguageTeamMember(locale);\n+        return !project.isPrivateProject() && isUserAllowedAccess(project)\n+        && isLanguageTeamMember(locale);\n     }\n \n     @GrantsPermission(actions = \"review-comment\")\n-    public boolean canMaintainerCommentOnReview(HLocale locale,\n-            HProject project) {\n+    public boolean canMaintainerCommentOnReview(HLocale locale, HProject project) {\n         return isLoggedIn() && isProjectMaintainer(project);\n     }\n \n     @GrantsPermission(actions = \"review-comment\")\n-    public boolean canTranslationMaintainerCommentOnReview(HLocale locale,\n-            HProject project) {\n+    public boolean canTranslationMaintainerCommentOnReview(HLocale locale, HProject project) {\n         return isLoggedIn() && isProjectTranslationMaintainer(project);\n     }\n \n     @GrantsPermission(actions = \"review-comment\")\n-    public boolean canReviewerCommentOnReview(HLocale locale,\n-            HProject project) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, locale,\n-                LocaleRole.Reviewer);\n+    public boolean canReviewerCommentOnReview(HLocale locale, HProject project) {\n+        return isLoggedIn() && userHasProjectLanguageRole(project, locale, LocaleRole.Reviewer);\n     }\n \n     @GrantsPermission(actions = \"review-comment\")\n-    public boolean canTranslatorCommentOnReview(HLocale locale,\n-            HProject project) {\n-        return isLoggedIn() && userHasProjectLanguageRole(project, locale,\n-                LocaleRole.Translator);\n+    public boolean canTranslatorCommentOnReview(HLocale locale, HProject project) {\n+        return isLoggedIn() && userHasProjectLanguageRole(project, locale, LocaleRole.Translator);\n     }\n \n     /**\n@@ -596,6 +571,7 @@ public class SecurityFunctions extends PermissionProvider {\n      * TMX rules\n      * ****************************************************************************************\n      */\n+\n     @GrantsPermission(actions = \"download-tmx\")\n     public boolean canDownloadTMX() {\n         return isLoggedIn();\n@@ -619,8 +595,8 @@ public class SecurityFunctions extends PermissionProvider {\n      *            - service path of rest request. See annotation @Path in REST\n      *            service class.\n      */\n-    public static boolean canAccessRestPath(@Nonnull ZanataIdentity identity,\n-            String restServicePath) {\n+\n+    public static boolean canAccessRestPath(@Nonnull ZanataIdentity identity, String restServicePath) {\n         if (isLocalesServicePath(restServicePath)) {\n             log.debug(\"Allow rest access for /locales path (Zanata UI)\");\n             return true;\n@@ -633,9 +609,9 @@ public class SecurityFunctions extends PermissionProvider {\n      * for getting list of locales internationalised in Zanata, update locale in\n      * Zanata instance.\n      */\n+\n     private static boolean isLocalesServicePath(String servicePath) {\n-        return servicePath != null\n-                && servicePath.contains(\"/rest\" + LocalesResource.SERVICE_PATH);\n+        return servicePath != null && servicePath.contains(\"/rest\" + LocalesResource.SERVICE_PATH);\n     }\n \n     private static class AutoCloseSession implements AutoCloseable {\n@@ -649,4 +625,4 @@ public class SecurityFunctions extends PermissionProvider {\n             session.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 116
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "272",
                    "column": "23",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/9/SecurityFunctions.java\nindex 3933874f180..6404926be6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/9/SecurityFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/9/SecurityFunctions.java\n@@ -269,8 +269,9 @@ public class SecurityFunctions extends PermissionProvider {\n                     currentUser.getPerson(), lang, true, null,\n                     null);\n         }\n-        return false; // No authenticated user\n-    }\n+        return false;\n+        // No authenticated user\n+     }\n \n     public boolean isUserAllowedAccess(HProject project) {\n         if (project.isRestrictedByRoles()) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}