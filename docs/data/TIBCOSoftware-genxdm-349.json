{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "349",
    "information": {
        "errors": [
            {
                "line": "38",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class IdentityConstraintManager\n{\n\t/**\n\t * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n\t * actually used. This member variable keeps track of the *total* number of scopes in progress.\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/349/IdentityConstraintManager.java\nindex d4050ed4008..abdded66849 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/349/IdentityConstraintManager.java\n@@ -35,11 +35,11 @@ import org.genxdm.xs.types.SimpleType;\n  */\n final class IdentityConstraintManager\n {\n-\t/**\n+/**\n \t * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n \t * actually used. This member variable keeps track of the *total* number of scopes in progress.\n \t */\n-\tprivate int m_totalScopes = 0;\n+ private int m_totalScopes = 0;\n \n \tpublic void reset()\n \t{\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/349/IdentityConstraintManager.java\nindex d4050ed4008..e4fe247dc17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/349/IdentityConstraintManager.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n@@ -33,163 +34,146 @@ import org.genxdm.xs.types.SimpleType;\n  * It is tightly coupled to the stack of validation items maintained by the core validator, but plays a key role by\n  * keeping track of the number of active scopes in order to optimize performance.\n  */\n-final class IdentityConstraintManager\n-{\n-\t/**\n-\t * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n-\t * actually used. This member variable keeps track of the *total* number of scopes in progress.\n-\t */\n-\tprivate int m_totalScopes = 0;\n+final class IdentityConstraintManager {\n+    /**\n+     * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n+     * actually used. This member variable keeps track of the *total* number of scopes in progress.\n+     */\n+    private int m_totalScopes = 0;\n \n-\tpublic void reset()\n-\t{\n-\t\tm_totalScopes = 0;\n-\t}\n+    public void reset() {\n+        m_totalScopes = 0;\n+    }\n \n-\tpublic void startElement(final ModelPSVI elementPSVI, final ValidationItem elementItem, final SchemaExceptionHandler errors) throws AbortException\n-\t{\n-\t\t// Notify existing scopes of the current event (start of element)\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.startElement(elementPSVI.getName(), elementItem.getElementIndex(), elementPSVI.getType(), elementItem);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    public void startElement(final ModelPSVI elementPSVI, final ValidationItem elementItem,\n+                             final SchemaExceptionHandler errors) throws AbortException {\n+        // Notify existing scopes of the current event (start of element)\n+        if (m_totalScopes > 0) {\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem)) {\n+                for (final IdentityScope scope : currentItem.m_identityScopes) {\n+                    scope.startElement(elementPSVI.getName(), elementItem.getElementIndex(),\n+                        elementPSVI.getType(), elementItem);\n+                }\n+            }\n+        }\n \n-\t\t// This code looks at the element decl to see if it specifies any\n-\t\t// identity constraints, and if so creates an IdentityScope object for\n-\t\t// it...\n-\t\tPreCondition.assertArgumentNotNull(elementPSVI, \"elementPSVI\");\n-\t\tfinal ElementDefinition declaration = elementPSVI.getDeclaration();\n-\t\tif (null != declaration && declaration.hasIdentityConstraints())\n-\t\t{\n-\t\t\t// Handle xs:unique, xs:key and xs:keyref in order so that\n-\t\t\t// xs:keyref scopes can be fixed up to xs:key scopes.\n-\t\t\tfor (final IdentityConstraint constraint : declaration.getIdentityConstraints())\n-\t\t\t{\n-\t\t\t\tswitch (constraint.getCategory())\n-\t\t\t\t{\n-\t\t\t\t\tcase Key:\n-\t\t\t\t\tcase Unique:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tfinal IdentityScopeKey scope = new IdentityScopeKey(elementItem.getElementIndex(), constraint, errors, elementItem.getLocation());\n+        // This code looks at the element decl to see if it specifies any\n+        // identity constraints, and if so creates an IdentityScope object for\n+        // it...\n+        PreCondition.assertArgumentNotNull(elementPSVI, \"elementPSVI\");\n+        final ElementDefinition declaration = elementPSVI.getDeclaration();\n+        if (null != declaration && declaration.hasIdentityConstraints()) {\n+            // Handle xs:unique, xs:key and xs:keyref in order so that\n+            // xs:keyref scopes can be fixed up to xs:key scopes.\n+            for (final IdentityConstraint constraint : declaration.getIdentityConstraints()) {\n+                switch (constraint.getCategory()) {\n+                    case Key:\n+                    case Unique: {\n+                        final IdentityScopeKey scope =\n+                            new IdentityScopeKey(elementItem.getElementIndex(), constraint, errors,\n+                                elementItem.getLocation());\n \n-\t\t\t\t\t\telementItem.m_keyScopes.put(constraint.getName(), scope);\n-\t\t\t\t\t\telementItem.m_refScopes.put(constraint.getName(), new ArrayList<IdentityScopeRef>());\n-\t\t\t\t\t\telementItem.m_identityScopes.add(scope);\n-\t\t\t\t\t\tm_totalScopes++;\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tcase KeyRef:\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Ignore\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new RuntimeException(constraint.getCategory().name());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor (final IdentityConstraint constraint : declaration.getIdentityConstraints())\n-\t\t\t{\n-\t\t\t\tswitch (constraint.getCategory())\n-\t\t\t\t{\n-\t\t\t\t\tcase Key:\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Ignore\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Unique:\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Ignore\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tcase KeyRef:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tfinal QName keyName = constraint.getKeyConstraint().getName();\n-\t\t\t\t\t\tfinal ValidationItem referencedItem = ValidationItem.findItemWithKeyConstraint(elementItem, keyName);\n-\t\t\t\t\t\tfinal IdentityScopeKey keyScope = ValidationItem.getKeyIdentityScope(referencedItem, keyName);\n-\t\t\t\t\t\tfinal IdentityScopeRef scope = new IdentityScopeRef(elementItem.getElementIndex(), keyScope, constraint, errors, elementItem.getLocation());\n-\t\t\t\t\t\treferencedItem.m_refScopes.get(keyName).add(scope);\n-\t\t\t\t\t\telementItem.m_identityScopes.add(scope);\n-\t\t\t\t\t\tm_totalScopes++;\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new RuntimeException(constraint.getCategory().name());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+                        elementItem.m_keyScopes.put(constraint.getName(), scope);\n+                        elementItem.m_refScopes\n+                            .put(constraint.getName(), new ArrayList<IdentityScopeRef>());\n+                        elementItem.m_identityScopes.add(scope);\n+                        m_totalScopes++;\n+                    }\n+                    break;\n+                    case KeyRef: {\n+                        // Ignore\n+                    }\n+                    break;\n+                    default: {\n+                        throw new RuntimeException(constraint.getCategory().name());\n+                    }\n+                }\n+            }\n+            for (final IdentityConstraint constraint : declaration.getIdentityConstraints()) {\n+                switch (constraint.getCategory()) {\n+                    case Key: {\n+                        // Ignore\n+                    }\n+                    break;\n+                    case Unique: {\n+                        // Ignore\n+                    }\n+                    break;\n+                    case KeyRef: {\n+                        final QName keyName = constraint.getKeyConstraint().getName();\n+                        final ValidationItem referencedItem =\n+                            ValidationItem.findItemWithKeyConstraint(elementItem, keyName);\n+                        final IdentityScopeKey keyScope =\n+                            ValidationItem.getKeyIdentityScope(referencedItem, keyName);\n+                        final IdentityScopeRef scope =\n+                            new IdentityScopeRef(elementItem.getElementIndex(), keyScope,\n+                                constraint, errors, elementItem.getLocation());\n+                        referencedItem.m_refScopes.get(keyName).add(scope);\n+                        elementItem.m_identityScopes.add(scope);\n+                        m_totalScopes++;\n+                    }\n+                    break;\n+                    default: {\n+                        throw new RuntimeException(constraint.getCategory().name());\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n-\tpublic <A> void attribute(final List<? extends A> actualValue, final SimpleType attributeType, final ValidationItem elementItem, final QName attributeName, final int attributeIndex, final AtomBridge<A> atomBridge) throws AbortException\n-\t{\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.attribute(attributeName, actualValue, attributeIndex, attributeType, elementItem, atomBridge);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    public <A> void attribute(final List<? extends A> actualValue, final SimpleType attributeType,\n+                              final ValidationItem elementItem, final QName attributeName,\n+                              final int attributeIndex, final AtomBridge<A> atomBridge)\n+        throws AbortException {\n+        if (m_totalScopes > 0) {\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem)) {\n+                for (final IdentityScope scope : currentItem.m_identityScopes) {\n+                    scope.attribute(attributeName, actualValue, attributeIndex, attributeType,\n+                        elementItem, atomBridge);\n+                }\n+            }\n+        }\n+    }\n \n-\tpublic <A> void text(final List<? extends A> actualValue, final SimpleType actualType, final ValidationItem elementItem, final int textIndex, final AtomBridge<A> atomBridge) throws AbortException\n-\t{\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.text(actualValue, actualType, textIndex, elementItem, atomBridge);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    public <A> void text(final List<? extends A> actualValue, final SimpleType actualType,\n+                         final ValidationItem elementItem, final int textIndex,\n+                         final AtomBridge<A> atomBridge) throws AbortException {\n+        if (m_totalScopes > 0) {\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem)) {\n+                for (final IdentityScope scope : currentItem.m_identityScopes) {\n+                    scope.text(actualValue, actualType, textIndex, elementItem, atomBridge);\n+                }\n+            }\n+        }\n+    }\n \n-\tpublic void endElement(final ModelPSVI elementPSVI, final ValidationItem elementItem) throws AbortException\n-\t{\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final QName key : elementItem.m_keyScopes.keySet())\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScopeRef scope : elementItem.m_refScopes.get(key))\n-\t\t\t\t{\n-\t\t\t\t\tscope.reportUnmatchedRefs();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tm_totalScopes = m_totalScopes - elementItem.m_identityScopes.size();\n-\t\t\telementItem.m_identityScopes.clear();\n-\t\t\telementItem.m_keyScopes.clear();\n-\t\t\telementItem.m_refScopes.clear();\n+    public void endElement(final ModelPSVI elementPSVI, final ValidationItem elementItem)\n+        throws AbortException {\n+        if (m_totalScopes > 0) {\n+            for (final QName key : elementItem.m_keyScopes.keySet()) {\n+                for (final IdentityScopeRef scope : elementItem.m_refScopes.get(key)) {\n+                    scope.reportUnmatchedRefs();\n+                }\n+            }\n+            m_totalScopes = m_totalScopes - elementItem.m_identityScopes.size();\n+            elementItem.m_identityScopes.clear();\n+            elementItem.m_keyScopes.clear();\n+            elementItem.m_refScopes.clear();\n \n-\t\t\tfinal QName elementName = elementPSVI.getName();\n-\t\t\tfinal int elementIndex = elementItem.getElementIndex();\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.endElement(elementName, elementIndex, elementItem);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+            final QName elementName = elementPSVI.getName();\n+            final int elementIndex = elementItem.getElementIndex();\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem)) {\n+                for (final IdentityScope scope : currentItem.m_identityScopes) {\n+                    scope.endElement(elementName, elementIndex, elementItem);\n+                }\n+            }\n+        }\n+    }\n \n-\t/**\n-\t * Get an iterable of the links from the origin link to the document link.\n-\t */\n-\tprivate Iterable<ValidationItem> getAncestorOrSelf(final ValidationItem origin)\n-\t{\n-\t\treturn new ValidationItemIterable(origin);\n-\t}\n+    /**\n+     * Get an iterable of the links from the origin link to the document link.\n+     */\n+    private Iterable<ValidationItem> getAncestorOrSelf(final ValidationItem origin) {\n+        return new ValidationItemIterable(origin);\n+    }\n }\n",
            "diff_size": 155
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/349/IdentityConstraintManager.java\nindex d4050ed4008..4032175a89f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/349/IdentityConstraintManager.java\n@@ -17,9 +17,7 @@ package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.typed.types.AtomBridge;\n import org.genxdm.xs.components.ElementDefinition;\n@@ -33,163 +31,169 @@ import org.genxdm.xs.types.SimpleType;\n  * It is tightly coupled to the stack of validation items maintained by the core validator, but plays a key role by\n  * keeping track of the number of active scopes in order to optimize performance.\n  */\n+\n final class IdentityConstraintManager\n {\n-\t/**\n-\t * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n-\t * actually used. This member variable keeps track of the *total* number of scopes in progress.\n-\t */\n-\tprivate int m_totalScopes = 0;\n+    /**\n+     * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n+     * actually used. This member variable keeps track of the *total* number of scopes in progress.\n+     */\n+    private int m_totalScopes = 0;\n+    public void reset()\n+    {\n+        m_totalScopes = 0;\n+    }\n+\n+    public void startElement(final ModelPSVI elementPSVI, final ValidationItem elementItem, final SchemaExceptionHandler errors)\n+        throws AbortException\n+    {\n+        // Notify existing scopes of the current event (start of element)\n+        if (m_totalScopes > 0)\n+        {\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n+            {\n+                for (final IdentityScope scope : currentItem.m_identityScopes)\n+                {\n+                    scope.startElement(elementPSVI.getName(), elementItem.getElementIndex(), elementPSVI.getType(), elementItem);\n+                }\n+            }\n+        }\n+\n+        // This code looks at the element decl to see if it specifies any\n+        // identity constraints, and if so creates an IdentityScope object for\n+        // it...\n+        PreCondition.assertArgumentNotNull(elementPSVI, \"elementPSVI\");\n+\n+        final ElementDefinition declaration = elementPSVI.getDeclaration();\n+        if (null != declaration && declaration.hasIdentityConstraints())\n+        {\n+            // Handle xs:unique, xs:key and xs:keyref in order so that\n+            // xs:keyref scopes can be fixed up to xs:key scopes.\n+            for (final IdentityConstraint constraint : declaration.getIdentityConstraints())\n+            {\n+                switch (constraint.getCategory())\n+                {\n+                    case Key:\n+                    case Unique:\n+                    {\n+                        final IdentityScopeKey scope = new IdentityScopeKey(elementItem.getElementIndex(), constraint, errors, elementItem.getLocation());\n+                        elementItem.m_keyScopes.put(constraint.getName(), scope);\n+                        elementItem.m_refScopes.put(constraint.getName(), new ArrayList<IdentityScopeRef>());\n+                        elementItem.m_identityScopes.add(scope);\n+                        m_totalScopes++;\n+                    }\n+                    break;\n+                    case KeyRef:\n+                    {\n+                        // Ignore\n \n-\tpublic void reset()\n-\t{\n-\t\tm_totalScopes = 0;\n-\t}\n+                    }\n+                    break;\n+                    default:\n+                    {\n+                        throw new RuntimeException(constraint.getCategory().name());\n+                    }\n+                }\n+            }\n+            for (final IdentityConstraint constraint : declaration.getIdentityConstraints())\n+            {\n+                switch (constraint.getCategory())\n+                {\n+                    case Key:\n+                    {\n+                        // Ignore\n \n-\tpublic void startElement(final ModelPSVI elementPSVI, final ValidationItem elementItem, final SchemaExceptionHandler errors) throws AbortException\n-\t{\n-\t\t// Notify existing scopes of the current event (start of element)\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.startElement(elementPSVI.getName(), elementItem.getElementIndex(), elementPSVI.getType(), elementItem);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+                    }\n+                    break;\n+                    case Unique:\n+                    {\n+                        // Ignore\n \n-\t\t// This code looks at the element decl to see if it specifies any\n-\t\t// identity constraints, and if so creates an IdentityScope object for\n-\t\t// it...\n-\t\tPreCondition.assertArgumentNotNull(elementPSVI, \"elementPSVI\");\n-\t\tfinal ElementDefinition declaration = elementPSVI.getDeclaration();\n-\t\tif (null != declaration && declaration.hasIdentityConstraints())\n-\t\t{\n-\t\t\t// Handle xs:unique, xs:key and xs:keyref in order so that\n-\t\t\t// xs:keyref scopes can be fixed up to xs:key scopes.\n-\t\t\tfor (final IdentityConstraint constraint : declaration.getIdentityConstraints())\n-\t\t\t{\n-\t\t\t\tswitch (constraint.getCategory())\n-\t\t\t\t{\n-\t\t\t\t\tcase Key:\n-\t\t\t\t\tcase Unique:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tfinal IdentityScopeKey scope = new IdentityScopeKey(elementItem.getElementIndex(), constraint, errors, elementItem.getLocation());\n+                    }\n+                    break;\n+                    case KeyRef:\n+                    {\n+                        final QName keyName = constraint.getKeyConstraint().getName();\n+                        final ValidationItem referencedItem = ValidationItem.findItemWithKeyConstraint(elementItem, keyName);\n+                        final IdentityScopeKey keyScope = ValidationItem.getKeyIdentityScope(referencedItem, keyName);\n+                        final IdentityScopeRef scope = new IdentityScopeRef(elementItem.getElementIndex(), keyScope, constraint, errors, elementItem.getLocation());\n+                        referencedItem.m_refScopes.get(keyName).add(scope);\n+                        elementItem.m_identityScopes.add(scope);\n+                        m_totalScopes++;\n+                    }\n+                    break;\n+                    default:\n+                    {\n+                        throw new RuntimeException(constraint.getCategory().name());\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n-\t\t\t\t\t\telementItem.m_keyScopes.put(constraint.getName(), scope);\n-\t\t\t\t\t\telementItem.m_refScopes.put(constraint.getName(), new ArrayList<IdentityScopeRef>());\n-\t\t\t\t\t\telementItem.m_identityScopes.add(scope);\n-\t\t\t\t\t\tm_totalScopes++;\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tcase KeyRef:\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Ignore\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new RuntimeException(constraint.getCategory().name());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor (final IdentityConstraint constraint : declaration.getIdentityConstraints())\n-\t\t\t{\n-\t\t\t\tswitch (constraint.getCategory())\n-\t\t\t\t{\n-\t\t\t\t\tcase Key:\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Ignore\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Unique:\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Ignore\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tcase KeyRef:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tfinal QName keyName = constraint.getKeyConstraint().getName();\n-\t\t\t\t\t\tfinal ValidationItem referencedItem = ValidationItem.findItemWithKeyConstraint(elementItem, keyName);\n-\t\t\t\t\t\tfinal IdentityScopeKey keyScope = ValidationItem.getKeyIdentityScope(referencedItem, keyName);\n-\t\t\t\t\t\tfinal IdentityScopeRef scope = new IdentityScopeRef(elementItem.getElementIndex(), keyScope, constraint, errors, elementItem.getLocation());\n-\t\t\t\t\t\treferencedItem.m_refScopes.get(keyName).add(scope);\n-\t\t\t\t\t\telementItem.m_identityScopes.add(scope);\n-\t\t\t\t\t\tm_totalScopes++;\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new RuntimeException(constraint.getCategory().name());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    public <A> void attribute(final List<? extends A> actualValue, final SimpleType attributeType, final ValidationItem elementItem, final QName attributeName, final int attributeIndex, final AtomBridge<A> atomBridge) throws AbortException\n+    {\n+        if (m_totalScopes > 0)\n+        {\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n+            {\n+                for (final IdentityScope scope : currentItem.m_identityScopes)\n+                {\n+                    scope.attribute(attributeName, actualValue, attributeIndex, attributeType, elementItem, atomBridge);\n+                }\n+            }\n+        }\n+    }\n \n-\tpublic <A> void attribute(final List<? extends A> actualValue, final SimpleType attributeType, final ValidationItem elementItem, final QName attributeName, final int attributeIndex, final AtomBridge<A> atomBridge) throws AbortException\n-\t{\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.attribute(attributeName, actualValue, attributeIndex, attributeType, elementItem, atomBridge);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    public <A> void text(final List<? extends A> actualValue, final SimpleType actualType, final ValidationItem elementItem, final int textIndex, final AtomBridge<A> atomBridge) throws AbortException\n+    {\n+        if (m_totalScopes > 0)\n+        {\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n+            {\n+                for (final IdentityScope scope : currentItem.m_identityScopes)\n+                {\n+                    scope.text(actualValue, actualType, textIndex, elementItem, atomBridge);\n+                }\n+            }\n+        }\n+    }\n \n-\tpublic <A> void text(final List<? extends A> actualValue, final SimpleType actualType, final ValidationItem elementItem, final int textIndex, final AtomBridge<A> atomBridge) throws AbortException\n-\t{\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.text(actualValue, actualType, textIndex, elementItem, atomBridge);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    public void endElement(final ModelPSVI elementPSVI, final ValidationItem elementItem)\n+        throws AbortException\n+    {\n+        if (m_totalScopes > 0)\n+        {\n+            for (final QName key : elementItem.m_keyScopes.keySet())\n+            {\n+                for (final IdentityScopeRef scope : elementItem.m_refScopes.get(key))\n+                {\n+                    scope.reportUnmatchedRefs();\n+                }\n+            }\n+            m_totalScopes = m_totalScopes - elementItem.m_identityScopes.size();\n+            elementItem.m_identityScopes.clear();\n+            elementItem.m_keyScopes.clear();\n+            elementItem.m_refScopes.clear();\n \n-\tpublic void endElement(final ModelPSVI elementPSVI, final ValidationItem elementItem) throws AbortException\n-\t{\n-\t\tif (m_totalScopes > 0)\n-\t\t{\n-\t\t\tfor (final QName key : elementItem.m_keyScopes.keySet())\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScopeRef scope : elementItem.m_refScopes.get(key))\n-\t\t\t\t{\n-\t\t\t\t\tscope.reportUnmatchedRefs();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tm_totalScopes = m_totalScopes - elementItem.m_identityScopes.size();\n-\t\t\telementItem.m_identityScopes.clear();\n-\t\t\telementItem.m_keyScopes.clear();\n-\t\t\telementItem.m_refScopes.clear();\n+            final QName elementName = elementPSVI.getName();\n+            final int elementIndex = elementItem.getElementIndex();\n+            for (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n+            {\n+                for (final IdentityScope scope : currentItem.m_identityScopes)\n+                {\n+                    scope.endElement(elementName, elementIndex, elementItem);\n+                }\n+            }\n+        }\n+    }\n \n-\t\t\tfinal QName elementName = elementPSVI.getName();\n-\t\t\tfinal int elementIndex = elementItem.getElementIndex();\n-\t\t\tfor (final ValidationItem currentItem : getAncestorOrSelf(elementItem))\n-\t\t\t{\n-\t\t\t\tfor (final IdentityScope scope : currentItem.m_identityScopes)\n-\t\t\t\t{\n-\t\t\t\t\tscope.endElement(elementName, elementIndex, elementItem);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    /**\n+     * Get an iterable of the links from the origin link to the document link.\n+     */\n \n-\t/**\n-\t * Get an iterable of the links from the origin link to the document link.\n-\t */\n-\tprivate Iterable<ValidationItem> getAncestorOrSelf(final ValidationItem origin)\n-\t{\n-\t\treturn new ValidationItemIterable(origin);\n-\t}\n-}\n+    private Iterable<ValidationItem> getAncestorOrSelf(final ValidationItem origin)\n+    {\n+        return new ValidationItemIterable(origin);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 217
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/349/IdentityConstraintManager.java\nindex d4050ed4008..abdded66849 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/349/IdentityConstraintManager.java\n@@ -35,11 +35,11 @@ import org.genxdm.xs.types.SimpleType;\n  */\n final class IdentityConstraintManager\n {\n-\t/**\n+/**\n \t * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n \t * actually used. This member variable keeps track of the *total* number of scopes in progress.\n \t */\n-\tprivate int m_totalScopes = 0;\n+ private int m_totalScopes = 0;\n \n \tpublic void reset()\n \t{\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/349/IdentityConstraintManager.java\nindex d4050ed4008..5b4fb01deee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/349/IdentityConstraintManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/349/IdentityConstraintManager.java\n@@ -35,11 +35,11 @@ import org.genxdm.xs.types.SimpleType;\n  */\n final class IdentityConstraintManager\n {\n-\t/**\n+    /**\n \t * Identity Constraint Validation is very CPU and memory intensive so we want to avoid paying the cost if it is not\n \t * actually used. This member variable keeps track of the *total* number of scopes in progress.\n \t */\n-\tprivate int m_totalScopes = 0;\n+ private int m_totalScopes = 0;\n \n \tpublic void reset()\n \t{\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}