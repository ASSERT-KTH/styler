{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "210",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "{\n\n\tprivate final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\n\t{\n\t    // TODO:\n\t    // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/210/IdFunction.java\nindex 5a2cf34cf1f..26990152fa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/210/IdFunction.java\n@@ -42,7 +42,7 @@ public final class IdFunction\n     extends Function1\r\n {\r\n \r\n-\tprivate final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n+private final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n \t{\r\n \t    // TODO:\r\n \t    // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/210/IdFunction.java\nindex 5a2cf34cf1f..1b677f7bea2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/210/IdFunction.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.functions;\r\n \r\n import org.genxdm.Model;\r\n@@ -39,69 +40,60 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n  * the XPath function id(x)\r\n  */\r\n public final class IdFunction\r\n-    extends Function1\r\n-{\r\n+    extends Function1 {\r\n \r\n-\tprivate final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n-\t{\r\n-\t    // TODO:\r\n-\t    // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n-\t    // (or something like that: turn the node into a string representing an id)\r\n-\t    // collect the results of each call, return the iterator over the entire collection.\r\n-\t\tthrow new UnsupportedOperationException(\"TODO: id()\");\r\n-\t}\r\n+    private final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter)\r\n+        throws ExprException {\r\n+        // TODO:\r\n+        // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n+        // (or something like that: turn the node into a string representing an id)\r\n+        // collect the results of each call, return the iterator over the entire collection.\r\n+        throw new UnsupportedOperationException(\"TODO: id()\");\r\n+    }\r\n \r\n-\tprivate final <N> NodeIterator<N> id(Model<N> model, final N node, final String str) throws ExprException\r\n-\t{\r\n-\t\t// TODO - review:\r\n-\t\t// The following seems a little to simplistic - it just always returns the node with the given ID? \r\n-\t\tN result = model.getElementById(node, str);\r\n-\t\treturn new SingleNodeIterator<N>(result);\r\n-\t}\r\n+    private final <N> NodeIterator<N> id(Model<N> model, final N node, final String str)\r\n+        throws ExprException {\r\n+        // TODO - review:\r\n+        // The following seems a little to simplistic - it just always returns the node with the given ID?\r\n+        N result = model.getElementById(node, str);\r\n+        return new SingleNodeIterator<N>(result);\r\n+    }\r\n \r\n-\tConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tif (e instanceof NodeSetExpr)\r\n-\t\t{\r\n-\t\t\tfinal NodeSetExpr nse = (NodeSetExpr)e;\r\n-\t\t\treturn new ConvertibleNodeSetExprImpl()\r\n-\t\t\t{\r\n-\t\t\t\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t\t{\r\n-\t\t\t\t\treturn id(node, nse.nodeIterator(model, node, dynEnv));\r\n-\t\t\t\t}\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\telse if (e instanceof VariantExpr)\r\n-\t\t{\r\n-\t\t\tfinal VariantExpr ve = (VariantExpr)e;\r\n-\t\t\treturn new ConvertibleNodeSetExprImpl()\r\n-\t\t\t{\r\n-\t\t\t\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t\t{\r\n-\t\t\t\t\tVariant<N> v = ve.evaluateAsVariant(model, node, dynEnv);\r\n-\t\t\t\t\tif (v.isNodeSet())\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn id(node, v.convertToNodeSet());\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\telse\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn id(model, node, v.convertToString());\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\tfinal StringExpr se = e.makeStringExpr(statEnv);\r\n-\t\t\treturn new ConvertibleNodeSetExprImpl()\r\n-\t\t\t{\r\n-\t\t\t\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t\t{\r\n-\t\t\t\t\treturn id(model, contextNode, se.stringFunction(model, contextNode, dynEnv));\r\n-\t\t\t\t}\r\n-\t\t\t};\r\n-\t\t}\r\n-\t}\r\n+    ConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final ExprContextStatic statEnv)\r\n+        throws ExprParseException {\r\n+        if (e instanceof NodeSetExpr) {\r\n+            final NodeSetExpr nse = (NodeSetExpr) e;\r\n+            return new ConvertibleNodeSetExprImpl() {\r\n+                public <N> NodeIterator<N> nodeIterator(Model<N> model, final N node,\r\n+                                                        final ExprContextDynamic<N> dynEnv)\r\n+                    throws ExprException {\r\n+                    return id(node, nse.nodeIterator(model, node, dynEnv));\r\n+                }\r\n+            };\r\n+        } else if (e instanceof VariantExpr) {\r\n+            final VariantExpr ve = (VariantExpr) e;\r\n+            return new ConvertibleNodeSetExprImpl() {\r\n+                public <N> NodeIterator<N> nodeIterator(Model<N> model, final N node,\r\n+                                                        final ExprContextDynamic<N> dynEnv)\r\n+                    throws ExprException {\r\n+                    Variant<N> v = ve.evaluateAsVariant(model, node, dynEnv);\r\n+                    if (v.isNodeSet()) {\r\n+                        return id(node, v.convertToNodeSet());\r\n+                    } else {\r\n+                        return id(model, node, v.convertToString());\r\n+                    }\r\n+                }\r\n+            };\r\n+        } else {\r\n+            final StringExpr se = e.makeStringExpr(statEnv);\r\n+            return new ConvertibleNodeSetExprImpl() {\r\n+                public <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode,\r\n+                                                        final ExprContextDynamic<N> dynEnv)\r\n+                    throws ExprException {\r\n+                    return id(model, contextNode, se.stringFunction(model, contextNode, dynEnv));\r\n+                }\r\n+            };\r\n+        }\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/210/IdFunction.java\nindex 5a2cf34cf1f..605528db8ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/210/IdFunction.java\n@@ -18,90 +18,89 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.functions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.processor.xpath.v10.expressions.ConvertibleExprImpl;\r\n-import org.genxdm.processor.xpath.v10.expressions.ConvertibleNodeSetExprImpl;\r\n-import org.genxdm.processor.xpath.v10.iterators.SingleNodeIterator;\r\n-import org.genxdm.xpath.v10.ExprContextDynamic;\r\n-import org.genxdm.xpath.v10.ExprContextStatic;\r\n-import org.genxdm.xpath.v10.ExprException;\r\n-import org.genxdm.xpath.v10.ExprParseException;\r\n-import org.genxdm.xpath.v10.NodeIterator;\r\n-import org.genxdm.xpath.v10.NodeSetExpr;\r\n-import org.genxdm.xpath.v10.StringExpr;\r\n-import org.genxdm.xpath.v10.Variant;\r\n-import org.genxdm.xpath.v10.VariantExpr;\r\n+package org.genxdm.processor.xpath.v10.functions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.processor.xpath.v10.expressions.ConvertibleExprImpl;\n+import org.genxdm.processor.xpath.v10.expressions.ConvertibleNodeSetExprImpl;\n+import org.genxdm.processor.xpath.v10.iterators.SingleNodeIterator;\n+import org.genxdm.xpath.v10.ExprContextDynamic;\n+import org.genxdm.xpath.v10.ExprContextStatic;\n+import org.genxdm.xpath.v10.ExprException;\n+import org.genxdm.xpath.v10.ExprParseException;\n+import org.genxdm.xpath.v10.NodeIterator;\n+import org.genxdm.xpath.v10.NodeSetExpr;\n+import org.genxdm.xpath.v10.StringExpr;\n+import org.genxdm.xpath.v10.Variant;\n+import org.genxdm.xpath.v10.VariantExpr;\n import org.genxdm.xpath.v10.extend.ConvertibleExpr;\r\n \r\n /**\r\n  * the XPath function id(x)\r\n- */\r\n-public final class IdFunction\r\n-    extends Function1\r\n-{\r\n-\r\n-\tprivate final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n-\t{\r\n-\t    // TODO:\r\n-\t    // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n-\t    // (or something like that: turn the node into a string representing an id)\r\n-\t    // collect the results of each call, return the iterator over the entire collection.\r\n-\t\tthrow new UnsupportedOperationException(\"TODO: id()\");\r\n-\t}\r\n-\r\n-\tprivate final <N> NodeIterator<N> id(Model<N> model, final N node, final String str) throws ExprException\r\n-\t{\r\n-\t\t// TODO - review:\r\n-\t\t// The following seems a little to simplistic - it just always returns the node with the given ID? \r\n-\t\tN result = model.getElementById(node, str);\r\n-\t\treturn new SingleNodeIterator<N>(result);\r\n-\t}\r\n-\r\n-\tConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tif (e instanceof NodeSetExpr)\r\n-\t\t{\r\n-\t\t\tfinal NodeSetExpr nse = (NodeSetExpr)e;\r\n-\t\t\treturn new ConvertibleNodeSetExprImpl()\r\n-\t\t\t{\r\n-\t\t\t\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t\t{\r\n-\t\t\t\t\treturn id(node, nse.nodeIterator(model, node, dynEnv));\r\n-\t\t\t\t}\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\telse if (e instanceof VariantExpr)\r\n-\t\t{\r\n-\t\t\tfinal VariantExpr ve = (VariantExpr)e;\r\n-\t\t\treturn new ConvertibleNodeSetExprImpl()\r\n-\t\t\t{\r\n-\t\t\t\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t\t{\r\n-\t\t\t\t\tVariant<N> v = ve.evaluateAsVariant(model, node, dynEnv);\r\n-\t\t\t\t\tif (v.isNodeSet())\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn id(node, v.convertToNodeSet());\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\telse\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn id(model, node, v.convertToString());\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\tfinal StringExpr se = e.makeStringExpr(statEnv);\r\n-\t\t\treturn new ConvertibleNodeSetExprImpl()\r\n-\t\t\t{\r\n-\t\t\t\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t\t{\r\n-\t\t\t\t\treturn id(model, contextNode, se.stringFunction(model, contextNode, dynEnv));\r\n-\t\t\t\t}\r\n-\t\t\t};\r\n-\t\t}\r\n-\t}\r\n-\r\n-}\r\n+ */\n+\n+public final class IdFunction extends Function1\n+{\n+    private final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\n+    {\r\n+        // TODO:\r\n+        // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n+        // (or something like that: turn the node into a string representing an id)\r\n+        // collect the results of each call, return the iterator over the entire collection.\n+        throw new UnsupportedOperationException(\"TODO: id()\");\n+    }\n+\n+    private final <N> NodeIterator<N> id(Model<N> model, final N node, final String str) throws ExprException\n+    {\r\n+        // TODO - review:\r\n+        // The following seems a little to simplistic - it just always returns the node with the given ID? \n+        N result = model.getElementById(node, str);\n+        return new SingleNodeIterator<N>(result);\n+    }\n+\n+    ConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        if (e instanceof NodeSetExpr)\n+        {\n+            final NodeSetExpr nse = (NodeSetExpr)e;\n+            return new ConvertibleNodeSetExprImpl()\n+            {\n+                public <N> NodeIterator<N> nodeIterator(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\n+                {\n+                    return id(node, nse.nodeIterator(model, node, dynEnv));\n+                }\n+            };\n+        }\n+        else if (e instanceof VariantExpr)\n+        {\n+            final VariantExpr ve = (VariantExpr)e;\n+            return new ConvertibleNodeSetExprImpl()\n+            {\n+                public <N> NodeIterator<N> nodeIterator(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\n+                {\n+                    Variant<N> v = ve.evaluateAsVariant(model, node, dynEnv);\n+                    if (v.isNodeSet())\n+                    {\n+                        return id(node, v.convertToNodeSet());\n+                    }\n+                    else\n+                    {\n+                        return id(model, node, v.convertToString());\n+                    }\n+                }\n+            };\n+        }\n+        else\n+        {\n+            final StringExpr se = e.makeStringExpr(statEnv);\n+            return new ConvertibleNodeSetExprImpl()\n+            {\n+                public <N> NodeIterator<N> nodeIterator(Model<N> model, final N contextNode, final ExprContextDynamic<N> dynEnv) throws ExprException\n+                {\n+                    return id(model, contextNode, se.stringFunction(model, contextNode, dynEnv));\n+                }\n+            };\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/210/IdFunction.java\nindex 5a2cf34cf1f..26990152fa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/210/IdFunction.java\n@@ -42,7 +42,7 @@ public final class IdFunction\n     extends Function1\r\n {\r\n \r\n-\tprivate final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n+private final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n \t{\r\n \t    // TODO:\r\n \t    // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/210/IdFunction.java\nindex 5a2cf34cf1f..37c1d92f204 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/210/IdFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/210/IdFunction.java\n@@ -42,7 +42,7 @@ public final class IdFunction\n     extends Function1\r\n {\r\n \r\n-\tprivate final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n+    private final <N> NodeIterator<N> id(final N node, final NodeIterator<N> iter) throws ExprException\r\n \t{\r\n \t    // TODO:\r\n \t    // for each node in the set, call: id(node, StringFunction(iter.next()).stringFunction())\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}