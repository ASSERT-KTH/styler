{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "141",
    "information": {
        "errors": [
            {
                "line": "737",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        addProjection(projectionPb.getProperty().getName());\n      }\n      for (com.google.datastore.v1beta3.PropertyReference distinctOnPb : queryPb.getDistinctOnList()) {\n        addDistinctOn(distinctOnPb.getName());\n      }\n      return self();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "737",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/141/StructuredQuery.java\nindex 149b0030cf4..6e40553402d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/141/StructuredQuery.java\n@@ -78,7 +78,7 @@ import java.util.Objects;\n  *\n  * @param <V> the type of the result values this query will produce\n  * @see <a href=\"https://cloud.google.com/appengine/docs/java/datastore/queries\">Datastore\n- *     queries</a>\n+ * queries</a>\n  */\n public abstract class StructuredQuery<V> extends Query<V> {\n \n@@ -731,10 +731,11 @@ public abstract class StructuredQuery<V> extends Query<V> {\n         addOrderBy(OrderBy.fromPb(orderByPb));\n       }\n       for (com.google.datastore.v1beta3.Projection projectionPb\n-           : queryPb.getProjectionList()) {\n+          : queryPb.getProjectionList()) {\n         addProjection(projectionPb.getProperty().getName());\n       }\n-      for (com.google.datastore.v1beta3.PropertyReference distinctOnPb : queryPb.getDistinctOnList()) {\n+      for (com.google.datastore.v1beta3.PropertyReference distinctOnPb : queryPb\n+          .getDistinctOnList()) {\n         addDistinctOn(distinctOnPb.getName());\n       }\n       return self();\n@@ -757,7 +758,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n   @Override\n   public int hashCode() {\n     return Objects.hash(namespace(), kind, startCursor, endCursor, offset, limit, filter, orderBy,\n-distinctOn());\n+        distinctOn());\n   }\n \n   @Override\n@@ -891,7 +892,7 @@ distinctOn());\n \n   @SuppressWarnings(\"unchecked\")\n   static <V> StructuredQuery<V> fromPb(ResultType<?> resultType, String namespace,\n-      com.google.datastore.v1beta3.Query queryPb) {\n+                                       com.google.datastore.v1beta3.Query queryPb) {\n     BuilderImpl<?, ?> builder;\n     if (resultType.equals(ResultType.ENTITY)) {\n       builder = new EntityQuery.Builder();\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'switch rcurly' has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "576",
                    "severity": "warning",
                    "message": "'implements' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "735",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "737",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "759",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/141/StructuredQuery.java\nindex 149b0030cf4..78aa55ba397 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/141/StructuredQuery.java\n@@ -83,7 +83,8 @@ import java.util.Objects;\n public abstract class StructuredQuery<V> extends Query<V> {\n \n   private static final long serialVersionUID = 546838955624019594L;\n-  static final String KEY_PROPERTY_NAME = \"__key__\";\n+\n+static final String KEY_PROPERTY_NAME = \"__key__\";\n \n   private final transient String kind;\n   private final ImmutableList<String> projection;\n@@ -112,7 +113,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n           return PropertyFilter.fromPb(filterPb.getPropertyFilter());\n         default:\n           throw new AssertionError(\"Unexpected enum value \" + filterPb.getFilterTypeCase());\n-      }\n+  }\n     }\n   }\n \n@@ -512,8 +513,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n       return com.google.datastore.v1beta3.PropertyOrder.newBuilder()\n           .setDirection(direction.toPb())\n           .setProperty(com.google.datastore.v1beta3.PropertyReference.newBuilder()\n-              .setName(property).build())\n-          .build();\n+              .setName(property).build()).build();\n     }\n \n     public static OrderBy asc(String property) {\n@@ -572,7 +572,8 @@ public abstract class StructuredQuery<V> extends Query<V> {\n    * @param <V> the type of result the query returns.\n    * @param <B> the query builder.\n    */\n-  abstract static class BuilderImpl<V, B extends BuilderImpl<V, B>> implements Builder<V> {\n+  abstract static class BuilderImpl<V, B extends BuilderImpl<V, B>>\n+    implements Builder<V> {\n \n     private final ResultType<V> resultType;\n     private String namespace;\n@@ -730,9 +731,8 @@ public abstract class StructuredQuery<V> extends Query<V> {\n       for (com.google.datastore.v1beta3.PropertyOrder orderByPb : queryPb.getOrderList()) {\n         addOrderBy(OrderBy.fromPb(orderByPb));\n       }\n-      for (com.google.datastore.v1beta3.Projection projectionPb\n-           : queryPb.getProjectionList()) {\n-        addProjection(projectionPb.getProperty().getName());\n+      for (com.google.datastore.v1beta3.Projection projectionPb : queryPb.getProjectionList()) {\n+  addProjection(projectionPb.getProperty().getName());\n       }\n       for (com.google.datastore.v1beta3.PropertyReference distinctOnPb : queryPb.getDistinctOnList()) {\n         addDistinctOn(distinctOnPb.getName());\n@@ -756,8 +756,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n \n   @Override\n   public int hashCode() {\n-    return Objects.hash(namespace(), kind, startCursor, endCursor, offset, limit, filter, orderBy,\n-distinctOn());\n+    return Objects.hash(namespace(), kind, startCursor, endCursor, offset, limit, filter, orderBy, distinctOn());\n   }\n \n   @Override\n@@ -779,7 +778,6 @@ distinctOn());\n         && Objects.equals(orderBy, other.orderBy)\n         && Objects.equals(projection, other.projection)\n         && Objects.equals(distinctOn, other.distinctOn);\n-\n   }\n \n   public String kind() {\n@@ -902,4 +900,4 @@ distinctOn());\n     }\n     return (StructuredQuery<V>) builder.namespace(namespace).mergeFrom(queryPb).build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "109",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 45, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 45, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 45, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "443",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "444",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "505",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "570",
                    "severity": "warning",
                    "message": "'implements' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "731",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "753",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "766",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "767",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "768",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "769",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "770",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "771",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "772",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "773",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "774",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "841",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "864",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "867",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "868",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "875",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "880",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "885",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "886",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "887",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/141/StructuredQuery.java\nindex 149b0030cf4..4467531cf61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/141/StructuredQuery.java\n@@ -30,7 +30,6 @@ import com.google.common.base.MoreObjects.ToStringHelper;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.protobuf.InvalidProtocolBufferException;\n-\n import java.io.Serializable;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -80,11 +79,13 @@ import java.util.Objects;\n  * @see <a href=\"https://cloud.google.com/appengine/docs/java/datastore/queries\">Datastore\n  *     queries</a>\n  */\n+\n+\n public abstract class StructuredQuery<V> extends Query<V> {\n \n   private static final long serialVersionUID = 546838955624019594L;\n-  static final String KEY_PROPERTY_NAME = \"__key__\";\n \n+  static final String KEY_PROPERTY_NAME = \"__key__\";\n   private final transient String kind;\n   private final ImmutableList<String> projection;\n   private final transient Filter filter;\n@@ -99,19 +100,19 @@ public abstract class StructuredQuery<V> extends Query<V> {\n \n     private static final long serialVersionUID = -6443285436239990860L;\n \n-    Filter() {\n-    }\n+    Filter() {}\n+\n \n     abstract com.google.datastore.v1beta3.Filter toPb();\n \n     static Filter fromPb(com.google.datastore.v1beta3.Filter filterPb) {\n-      switch (filterPb.getFilterTypeCase()) {\n+      switch(filterPb.getFilterTypeCase()) {\n         case COMPOSITE_FILTER:\n-          return CompositeFilter.fromPb(filterPb.getCompositeFilter());\n+                                             return CompositeFilter.fromPb(filterPb.getCompositeFilter());\n         case PROPERTY_FILTER:\n-          return PropertyFilter.fromPb(filterPb.getPropertyFilter());\n+                                             return PropertyFilter.fromPb(filterPb.getPropertyFilter());\n         default:\n-          throw new AssertionError(\"Unexpected enum value \" + filterPb.getFilterTypeCase());\n+                                             throw new AssertionError(\"Unexpected enum value \" + filterPb.getFilterTypeCase());\n       }\n     }\n   }\n@@ -119,6 +120,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n   /**\n    * A class representing a filter composed of a combination of other filters.\n    */\n+\n   public static final class CompositeFilter extends Filter {\n \n     private static final long serialVersionUID = 3610352685739360009L;\n@@ -126,6 +128,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n     private final ImmutableList<Filter> filters;\n \n     enum Operator {\n+\n       AND;\n \n       com.google.datastore.v1beta3.CompositeFilter.Operator toPb() {\n@@ -139,8 +142,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n \n     private CompositeFilter(Operator operator, Filter first, Filter... other) {\n       this.operator = operator;\n-      this.filters =\n-          ImmutableList.<Filter>builder().add(first).addAll(Arrays.asList(other)).build();\n+      this.filters = ImmutableList.<Filter>builder().add(first).addAll(Arrays.asList(other)).build();\n     }\n \n     private CompositeFilter(Operator operator, ImmutableList<Filter> filters) {\n@@ -172,7 +174,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n       }\n       CompositeFilter other = (CompositeFilter) obj;\n       return operator == other.operator\n-          && filters.equals(other.filters);\n+        && filters.equals(other.filters);\n     }\n \n     static CompositeFilter fromPb(com.google.datastore.v1beta3.CompositeFilter compositeFilterPb) {\n@@ -193,10 +195,8 @@ public abstract class StructuredQuery<V> extends Query<V> {\n \n     @Override\n     com.google.datastore.v1beta3.Filter toPb() {\n-      com.google.datastore.v1beta3.Filter.Builder filterPb =\n-          com.google.datastore.v1beta3.Filter.newBuilder();\n-      com.google.datastore.v1beta3.CompositeFilter.Builder compositeFilterPb =\n-          filterPb.getCompositeFilterBuilder();\n+      com.google.datastore.v1beta3.Filter.Builder filterPb = com.google.datastore.v1beta3.Filter.newBuilder();\n+      com.google.datastore.v1beta3.CompositeFilter.Builder compositeFilterPb = filterPb.getCompositeFilterBuilder();\n       compositeFilterPb.setOp(operator.toPb());\n       for (Filter filter : filters) {\n         compositeFilterPb.addFilters(filter.toPb());\n@@ -208,21 +208,17 @@ public abstract class StructuredQuery<V> extends Query<V> {\n   /**\n    * A class representing a filter based on a single property or ancestor.\n    */\n+\n   public static final class PropertyFilter extends Filter {\n \n     private static final long serialVersionUID = -4514695915258598597L;\n-\n     private final String property;\n     private final Operator operator;\n     private final Value<?> value;\n \n     enum Operator {\n-      LESS_THAN,\n-      LESS_THAN_OR_EQUAL,\n-      GREATER_THAN,\n-      GREATER_THAN_OR_EQUAL,\n-      EQUAL,\n-      HAS_ANCESTOR;\n+\n+      LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, EQUAL, HAS_ANCESTOR;\n \n       com.google.datastore.v1beta3.PropertyFilter.Operator toPb() {\n         return com.google.datastore.v1beta3.PropertyFilter.Operator.valueOf(name());\n@@ -270,8 +266,8 @@ public abstract class StructuredQuery<V> extends Query<V> {\n       }\n       PropertyFilter other = (PropertyFilter) obj;\n       return property.equals(other.property)\n-          && operator == other.operator\n-          && Objects.equals(value, other.value);\n+        && operator == other.operator\n+        && Objects.equals(value, other.value);\n     }\n \n     public static PropertyFilter lt(String property, Value<?> value) {\n@@ -444,10 +440,8 @@ public abstract class StructuredQuery<V> extends Query<V> {\n \n     @Override\n     com.google.datastore.v1beta3.Filter toPb() {\n-      com.google.datastore.v1beta3.Filter.Builder filterPb =\n-          com.google.datastore.v1beta3.Filter.newBuilder();\n-      com.google.datastore.v1beta3.PropertyFilter.Builder propertyFilterPb =\n-          filterPb.getPropertyFilterBuilder();\n+      com.google.datastore.v1beta3.Filter.Builder filterPb = com.google.datastore.v1beta3.Filter.newBuilder();\n+      com.google.datastore.v1beta3.PropertyFilter.Builder propertyFilterPb = filterPb.getPropertyFilterBuilder();\n       propertyFilterPb.getPropertyBuilder().setName(property);\n       propertyFilterPb.setOp(operator.toPb());\n       if (value != null) {\n@@ -460,7 +454,6 @@ public abstract class StructuredQuery<V> extends Query<V> {\n   public static final class OrderBy implements Serializable {\n \n     private static final long serialVersionUID = 4091186784814400031L;\n-\n     private final String property;\n     private final Direction direction;\n \n@@ -497,7 +490,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n       }\n       OrderBy other = (OrderBy) obj;\n       return property.equals(other.property)\n-          && direction == other.direction;\n+        && direction == other.direction;\n     }\n \n     public String property() {\n@@ -509,11 +502,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n     }\n \n     com.google.datastore.v1beta3.PropertyOrder toPb() {\n-      return com.google.datastore.v1beta3.PropertyOrder.newBuilder()\n-          .setDirection(direction.toPb())\n-          .setProperty(com.google.datastore.v1beta3.PropertyReference.newBuilder()\n-              .setName(property).build())\n-          .build();\n+      return com.google.datastore.v1beta3.PropertyOrder.newBuilder().setDirection(direction.toPb()).setProperty(com.google.datastore.v1beta3.PropertyReference.newBuilder().setName(property).build()).build();\n     }\n \n     public static OrderBy asc(String property) {\n@@ -536,7 +525,9 @@ public abstract class StructuredQuery<V> extends Query<V> {\n    *\n    * @param <V> the type of result the query returns.\n    */\n+\n   public interface Builder<V> {\n+\n     Builder<V> namespace(String namespace);\n \n     Builder<V> kind(String kind);\n@@ -556,11 +547,13 @@ public abstract class StructuredQuery<V> extends Query<V> {\n     /**\n      * Sets the query's order by clause (clearing any previously specified OrderBy settings).\n      */\n+\n     Builder<V> orderBy(OrderBy orderBy, OrderBy... others);\n \n     /**\n      * Adds settings to the existing order by clause.\n      */\n+\n     Builder<V> addOrderBy(OrderBy orderBy, OrderBy... others);\n \n     StructuredQuery<V> build();\n@@ -572,7 +565,9 @@ public abstract class StructuredQuery<V> extends Query<V> {\n    * @param <V> the type of result the query returns.\n    * @param <B> the query builder.\n    */\n-  abstract static class BuilderImpl<V, B extends BuilderImpl<V, B>> implements Builder<V> {\n+\n+  abstract static class BuilderImpl<V, B extends BuilderImpl<V, B>>\n+    implements Builder<V> {\n \n     private final ResultType<V> resultType;\n     private String namespace;\n@@ -730,8 +725,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n       for (com.google.datastore.v1beta3.PropertyOrder orderByPb : queryPb.getOrderList()) {\n         addOrderBy(OrderBy.fromPb(orderByPb));\n       }\n-      for (com.google.datastore.v1beta3.Projection projectionPb\n-           : queryPb.getProjectionList()) {\n+      for (com.google.datastore.v1beta3.Projection projectionPb : queryPb.getProjectionList()) {\n         addProjection(projectionPb.getProperty().getName());\n       }\n       for (com.google.datastore.v1beta3.PropertyReference distinctOnPb : queryPb.getDistinctOnList()) {\n@@ -756,8 +750,7 @@ public abstract class StructuredQuery<V> extends Query<V> {\n \n   @Override\n   public int hashCode() {\n-    return Objects.hash(namespace(), kind, startCursor, endCursor, offset, limit, filter, orderBy,\n-distinctOn());\n+    return Objects.hash(namespace(), kind, startCursor, endCursor, offset, limit, filter, orderBy, distinctOn());\n   }\n \n   @Override\n@@ -770,16 +763,15 @@ distinctOn());\n     }\n     StructuredQuery<?> other = (StructuredQuery<?>) obj;\n     return Objects.equals(namespace(), other.namespace())\n-        && Objects.equals(kind, other.kind)\n-        && Objects.equals(startCursor, other.startCursor)\n-        && Objects.equals(endCursor, other.endCursor)\n-        && Objects.equals(offset, other.offset)\n-        && Objects.equals(limit, other.limit)\n-        && Objects.equals(filter, other.filter)\n-        && Objects.equals(orderBy, other.orderBy)\n-        && Objects.equals(projection, other.projection)\n-        && Objects.equals(distinctOn, other.distinctOn);\n-\n+    && Objects.equals(kind, other.kind)\n+    && Objects.equals(startCursor, other.startCursor)\n+    && Objects.equals(endCursor, other.endCursor)\n+    && Objects.equals(offset, other.offset)\n+    && Objects.equals(limit, other.limit)\n+    && Objects.equals(filter, other.filter)\n+    && Objects.equals(orderBy, other.orderBy)\n+    && Objects.equals(projection, other.projection)\n+    && Objects.equals(distinctOn, other.distinctOn);\n   }\n \n   public String kind() {\n@@ -846,8 +838,7 @@ distinctOn());\n \n   @Override\n   com.google.datastore.v1beta3.Query toPb() {\n-    com.google.datastore.v1beta3.Query.Builder queryPb =\n-        com.google.datastore.v1beta3.Query.newBuilder();\n+    com.google.datastore.v1beta3.Query.Builder queryPb = com.google.datastore.v1beta3.Query.newBuilder();\n     if (kind != null) {\n       queryPb.addKindBuilder().setName(kind);\n     }\n@@ -870,36 +861,31 @@ distinctOn());\n       queryPb.addOrder(value.toPb());\n     }\n     for (String value : distinctOn) {\n-      queryPb.addDistinctOn(com.google.datastore.v1beta3.PropertyReference.newBuilder()\n-          .setName(value).build());\n+      queryPb.addDistinctOn(com.google.datastore.v1beta3.PropertyReference.newBuilder().setName(value).build());\n     }\n     for (String value : projection) {\n-      com.google.datastore.v1beta3.Projection.Builder expressionPb =\n-          com.google.datastore.v1beta3.Projection.newBuilder();\n-      expressionPb.setProperty(\n-          com.google.datastore.v1beta3.PropertyReference.newBuilder().setName(value).build());\n+      com.google.datastore.v1beta3.Projection.Builder expressionPb = com.google.datastore.v1beta3.Projection.newBuilder();\n+      expressionPb.setProperty(com.google.datastore.v1beta3.PropertyReference.newBuilder().setName(value).build());\n       queryPb.addProjection(expressionPb.build());\n     }\n     return queryPb.build();\n   }\n \n   @Override\n-  Object fromPb(ResultType<V> resultType, String namespace, byte[] bytesPb)\n-      throws InvalidProtocolBufferException {\n+  Object fromPb(ResultType<V> resultType, String namespace, byte[] bytesPb) throws InvalidProtocolBufferException {\n     return fromPb(resultType, namespace, com.google.datastore.v1beta3.Query.parseFrom(bytesPb));\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  static <V> StructuredQuery<V> fromPb(ResultType<?> resultType, String namespace,\n-      com.google.datastore.v1beta3.Query queryPb) {\n+  static <V> StructuredQuery<V> fromPb(ResultType<?> resultType, String namespace, com.google.datastore.v1beta3.Query queryPb) {\n     BuilderImpl<?, ?> builder;\n     if (resultType.equals(ResultType.ENTITY)) {\n       builder = new EntityQuery.Builder();\n     } else if (resultType.equals(ResultType.KEY)) {\n-      builder = new KeyQuery.Builder();\n-    } else {\n-      builder = new ProjectionEntityQuery.Builder();\n+             builder = new KeyQuery.Builder();\n+           } else {\n+             builder = new ProjectionEntityQuery.Builder();\n     }\n     return (StructuredQuery<V>) builder.namespace(namespace).mergeFrom(queryPb).build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 78
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "737",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "738",
                    "severity": "warning",
                    "message": "'for rparen' has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "738",
                    "column": "10",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/141/StructuredQuery.java\nindex 149b0030cf4..862d767201b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/141/StructuredQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/141/StructuredQuery.java\n@@ -734,7 +734,8 @@ public abstract class StructuredQuery<V> extends Query<V> {\n            : queryPb.getProjectionList()) {\n         addProjection(projectionPb.getProperty().getName());\n       }\n-      for (com.google.datastore.v1beta3.PropertyReference distinctOnPb : queryPb.getDistinctOnList()) {\n+      for (com.google.datastore.v1beta3. PropertyReference distinctOnPb:queryPb.getDistinctOnList( )\n+        ){\n         addDistinctOn(distinctOnPb.getName());\n       }\n       return self();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}