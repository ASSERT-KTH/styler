{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2786",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2786/ConsistencyCheckingError.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2786/ConsistencyCheckingError.java\nindex 4acb3584d48..66dde38572e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2786/ConsistencyCheckingError.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2786/ConsistencyCheckingError.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency;\n \n import org.neo4j.consistency.report.ConsistencySummaryStatistics;\n@@ -26,25 +27,25 @@ import org.neo4j.kernel.impl.transaction.log.entry.LogEntryStart;\n \n public class ConsistencyCheckingError extends DataInconsistencyError\n {\n-    private final ConsistencySummaryStatistics summary;\n+  private final ConsistencySummaryStatistics summary;\n \n-    public ConsistencyCheckingError( LogEntryStart startEntry, LogEntryCommit commitEntry,\n-                                     ConsistencySummaryStatistics summary )\n-    {\n-        super( String.format( \"Inconsistencies in transaction:\\n\\t%s\\n\\t%s\\n\\t%s\",\n-                               startEntry == null ? \"NO START ENTRY\" : startEntry.toString(),\n-                               commitEntry == null ? \"NO COMMIT ENTRY\" : commitEntry.toString(),\n-                               summary ) );\n-        this.summary = summary;\n-    }\n+  public ConsistencyCheckingError(LogEntryStart startEntry, LogEntryCommit commitEntry,\n+                                  ConsistencySummaryStatistics summary)\n+  {\n+    super(String.format(\"Inconsistencies in transaction:\\n\\t%s\\n\\t%s\\n\\t%s\",\n+        startEntry == null ? \"NO START ENTRY\" : startEntry.toString(),\n+        commitEntry == null ? \"NO COMMIT ENTRY\" : commitEntry.toString(),\n+        summary));\n+    this.summary = summary;\n+  }\n \n-    public int getInconsistencyCountForRecordType( RecordType recordType )\n-    {\n-        return summary.getInconsistencyCountForRecordType( recordType );\n-    }\n+  public int getInconsistencyCountForRecordType(RecordType recordType)\n+  {\n+    return summary.getInconsistencyCountForRecordType(recordType);\n+  }\n \n-    public int getTotalInconsistencyCount()\n-    {\n-        return summary.getTotalInconsistencyCount();\n-    }\n+  public int getTotalInconsistencyCount()\n+  {\n+    return summary.getTotalInconsistencyCount();\n+  }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2786/ConsistencyCheckingError.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2786/ConsistencyCheckingError.java\nindex 4acb3584d48..c94d5d9d6ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2786/ConsistencyCheckingError.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2786/ConsistencyCheckingError.java\n@@ -28,14 +28,10 @@ public class ConsistencyCheckingError extends DataInconsistencyError\n {\n     private final ConsistencySummaryStatistics summary;\n \n-    public ConsistencyCheckingError( LogEntryStart startEntry, LogEntryCommit commitEntry,\n-                                     ConsistencySummaryStatistics summary )\n-    {\n-        super( String.format( \"Inconsistencies in transaction:\\n\\t%s\\n\\t%s\\n\\t%s\",\n-                               startEntry == null ? \"NO START ENTRY\" : startEntry.toString(),\n-                               commitEntry == null ? \"NO COMMIT ENTRY\" : commitEntry.toString(),\n-                               summary ) );\n-        this.summary = summary;\n+    public ConsistencyCheckingError( LogEntryStart startEntry, LogEntryCommit commitEntry, ConsistencySummaryStatistics summary )\n+{\n+        super( String.format( \"Inconsistencies in transaction:\\n\\t%s\\n\\t%s\\n\\t%s\", startEntry == null ? \"NO START ENTRY\" : startEntry.toString(), commitEntry == null ? \"NO COMMIT ENTRY\" : commitEntry.toString(), summary ) );\n+this.summary = summary;\n     }\n \n     public int getInconsistencyCountForRecordType( RecordType recordType )\n@@ -47,4 +43,4 @@ public class ConsistencyCheckingError extends DataInconsistencyError\n     {\n         return summary.getTotalInconsistencyCount();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}