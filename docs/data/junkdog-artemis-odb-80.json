{
    "project_name": "junkdog-artemis-odb",
    "error_id": "80",
    "information": {
        "errors": [
            {
                "line": "10",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "/** Delegate for system invocation.\n *\n * Maybe you want to more granular control over system invocations, feed certain systems different deltas,\n * or completely rewrite processing in favor of events. Extending this class allows you to write your own\n * logic for processing system invocation.\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "10",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/80/SystemInvocationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/80/SystemInvocationStrategy.java\nindex 64d8aba3fbf..3b3567ef4ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/80/SystemInvocationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/80/SystemInvocationStrategy.java\n@@ -5,74 +5,86 @@ import com.artemis.utils.ImmutableBag;\n \n import java.util.BitSet;\n \n-/** Delegate for system invocation.\n- *\n+/**\n+ * Delegate for system invocation.\n+ * <p>\n  * Maybe you want to more granular control over system invocations, feed certain systems different deltas,\n  * or completely rewrite processing in favor of events. Extending this class allows you to write your own\n  * logic for processing system invocation.\n- *\n+ * <p>\n  * Register it with {@link WorldConfigurationBuilder#register(SystemInvocationStrategy)}\n- * \n+ * <p>\n  * Be sure to call {@link #updateEntityStates()} after the world dies.\n  *\n  * @see InvocationStrategy for the default strategy.\n  */\n public abstract class SystemInvocationStrategy {\n \n-\t/** World to operate on. */\n-\tprotected World world;\n-\tprotected final BitSet disabled = new BitSet();\n-\tprotected Bag<BaseSystem> systems;\n+    /**\n+     * World to operate on.\n+     */\n+    protected World world;\n+    protected final BitSet disabled = new BitSet();\n+    protected Bag<BaseSystem> systems;\n \n-\t/** World to operate on. */\n-\tprotected final void setWorld(World world) {\n-\t\tthis.world = world;\n-\t}\n+    /**\n+     * World to operate on.\n+     */\n+    protected final void setWorld(World world) {\n+        this.world = world;\n+    }\n \n-\t/**\n-\t * Called prior to {@link #initialize()}\n-\t */\n-\tprotected void setSystems(Bag<BaseSystem> systems) {\n-\t\tthis.systems = systems;\n-\t}\n+    /**\n+     * Called prior to {@link #initialize()}\n+     */\n+    protected void setSystems(Bag<BaseSystem> systems) {\n+        this.systems = systems;\n+    }\n \n-\t/** Called during world initialization phase. */\n-\tprotected void initialize() {}\n+    /**\n+     * Called during world initialization phase.\n+     */\n+    protected void initialize() {\n+    }\n \n-\t/** Call to inform all systems and subscription of world state changes. */\n-\tprotected final void updateEntityStates() {\n-\t\tworld.batchProcessor.update();\n-\t}\n+    /**\n+     * Call to inform all systems and subscription of world state changes.\n+     */\n+    protected final void updateEntityStates() {\n+        world.batchProcessor.update();\n+    }\n \n-\t/**\n-\t * Process all systems.\n-\t *\n-\t * @deprecated superseded by {@link #process()}\n-\t */\n-\t@Deprecated\n-\tprotected final void process(Bag<BaseSystem> systems) {\n-\t\tthrow new RuntimeException(\"wrong process method\");\n-\t}\n+    /**\n+     * Process all systems.\n+     *\n+     * @deprecated superseded by {@link #process()}\n+     */\n+    @Deprecated\n+    protected final void process(Bag<BaseSystem> systems) {\n+        throw new RuntimeException(\"wrong process method\");\n+    }\n \n-\tprotected abstract void process();\n+    protected abstract void process();\n \n-\tpublic boolean isEnabled(BaseSystem system) {\n-\t\tClass<? extends BaseSystem> target = system.getClass();\n-\t\tImmutableBag<BaseSystem> systems = world.getSystems();\n-\t\tfor (int i = 0; i < systems.size(); i++) {\n-\t\t\tif (target == systems.get(i).getClass())\n-\t\t\t\treturn !disabled.get(i);\n-\t\t}\n+    public boolean isEnabled(BaseSystem system) {\n+        Class<? extends BaseSystem> target = system.getClass();\n+        ImmutableBag<BaseSystem> systems = world.getSystems();\n+        for (int i = 0; i < systems.size(); i++) {\n+            if (target == systems.get(i).getClass()) {\n+                return !disabled.get(i);\n+            }\n+        }\n \n-\t\tthrow new RuntimeException(\"huh?\");\n-\t}\n+        throw new RuntimeException(\"huh?\");\n+    }\n \n-\tpublic void setEnabled(BaseSystem system, boolean value) {\n-\t\tClass<? extends BaseSystem> target = system.getClass();\n-\t\tImmutableBag<BaseSystem> systems = world.getSystems();\n-\t\tfor (int i = 0; i < systems.size(); i++) {\n-\t\t\tif (target == systems.get(i).getClass())\n-\t\t\t\tdisabled.set(i, !value);\n-\t\t}\n-\t}\n+    public void setEnabled(BaseSystem system, boolean value) {\n+        Class<? extends BaseSystem> target = system.getClass();\n+        ImmutableBag<BaseSystem> systems = world.getSystems();\n+        for (int i = 0; i < systems.size(); i++) {\n+            if (target == systems.get(i).getClass()) {\n+                disabled.set(i, !value);\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "10",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/80/SystemInvocationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/80/SystemInvocationStrategy.java\nindex 64d8aba3fbf..e6556101973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/80/SystemInvocationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/80/SystemInvocationStrategy.java\n@@ -75,4 +75,4 @@ public abstract class SystemInvocationStrategy {\n \t\t\t\tdisabled.set(i, !value);\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "9",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/80/SystemInvocationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/80/SystemInvocationStrategy.java\nindex 64d8aba3fbf..118977b8ea0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/80/SystemInvocationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/80/SystemInvocationStrategy.java\n@@ -2,7 +2,6 @@ package com.artemis;\n \n import com.artemis.utils.Bag;\n import com.artemis.utils.ImmutableBag;\n-\n import java.util.BitSet;\n \n /** Delegate for system invocation.\n@@ -17,62 +16,70 @@ import java.util.BitSet;\n  *\n  * @see InvocationStrategy for the default strategy.\n  */\n+\n public abstract class SystemInvocationStrategy {\n \n-\t/** World to operate on. */\n-\tprotected World world;\n-\tprotected final BitSet disabled = new BitSet();\n-\tprotected Bag<BaseSystem> systems;\n-\n-\t/** World to operate on. */\n-\tprotected final void setWorld(World world) {\n-\t\tthis.world = world;\n-\t}\n-\n-\t/**\n-\t * Called prior to {@link #initialize()}\n-\t */\n-\tprotected void setSystems(Bag<BaseSystem> systems) {\n-\t\tthis.systems = systems;\n-\t}\n-\n-\t/** Called during world initialization phase. */\n-\tprotected void initialize() {}\n-\n-\t/** Call to inform all systems and subscription of world state changes. */\n-\tprotected final void updateEntityStates() {\n-\t\tworld.batchProcessor.update();\n-\t}\n-\n-\t/**\n-\t * Process all systems.\n-\t *\n-\t * @deprecated superseded by {@link #process()}\n-\t */\n-\t@Deprecated\n-\tprotected final void process(Bag<BaseSystem> systems) {\n-\t\tthrow new RuntimeException(\"wrong process method\");\n-\t}\n-\n-\tprotected abstract void process();\n-\n-\tpublic boolean isEnabled(BaseSystem system) {\n-\t\tClass<? extends BaseSystem> target = system.getClass();\n-\t\tImmutableBag<BaseSystem> systems = world.getSystems();\n-\t\tfor (int i = 0; i < systems.size(); i++) {\n-\t\t\tif (target == systems.get(i).getClass())\n-\t\t\t\treturn !disabled.get(i);\n-\t\t}\n-\n-\t\tthrow new RuntimeException(\"huh?\");\n-\t}\n-\n-\tpublic void setEnabled(BaseSystem system, boolean value) {\n-\t\tClass<? extends BaseSystem> target = system.getClass();\n-\t\tImmutableBag<BaseSystem> systems = world.getSystems();\n-\t\tfor (int i = 0; i < systems.size(); i++) {\n-\t\t\tif (target == systems.get(i).getClass())\n-\t\t\t\tdisabled.set(i, !value);\n-\t\t}\n-\t}\n-}\n+ /** World to operate on. */\n+ protected World world;\n+\n+ protected final BitSet disabled = new BitSet();\n+\n+ protected Bag<BaseSystem> systems;\n+\n+ /** World to operate on. */\n+\n+ protected final void setWorld(World world) {\n+  this.world = world;\n+ }\n+\n+ /**\n+  * Called prior to {@link #initialize()}\n+  */\n+\n+ protected void setSystems(Bag<BaseSystem> systems) {\n+  this.systems = systems;\n+ }\n+\n+ /** Called during world initialization phase. */\n+\n+ protected void initialize() {}\n+\n+ /** Call to inform all systems and subscription of world state changes. */\n+\n+ protected final void updateEntityStates() {\n+  world.batchProcessor.update();\n+ }\n+\n+ /**\n+  * Process all systems.\n+  *\n+  * @deprecated superseded by {@link #process()}\n+  */\n+\n+ @Deprecated\n+ protected final void process(Bag<BaseSystem> systems) {\n+  throw new RuntimeException(\"wrong process method\");\n+ }\n+\n+ protected abstract void process();\n+ public boolean isEnabled(BaseSystem system) {\n+  Class<? extends BaseSystem> target = system.getClass();\n+  ImmutableBag<BaseSystem> systems = world.getSystems();\n+  for (int i = 0; i < systems.size(); i++) {\n+   if (target == systems.get(i).getClass())\n+    return !disabled.get(i);\n+  }\n+\n+  throw new RuntimeException(\"huh?\");\n+ }\n+\n+\n+ public void setEnabled(BaseSystem system, boolean value) {\n+  Class<? extends BaseSystem> target = system.getClass();\n+  ImmutableBag<BaseSystem> systems = world.getSystems();\n+  for (int i = 0; i < systems.size(); i++) {\n+   if (target == systems.get(i).getClass())\n+    disabled.set(i, !value);\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "10",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}