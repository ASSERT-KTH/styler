{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1683",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1683/DynamicNodeLabels.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1683/DynamicNodeLabels.java\nindex e70eff25695..537d8593aa7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1683/DynamicNodeLabels.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1683/DynamicNodeLabels.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.util.ArrayList;\n@@ -42,207 +43,206 @@ import static org.neo4j.kernel.impl.store.PropertyType.ARRAY;\n \n public class DynamicNodeLabels implements NodeLabels\n {\n-    private final NodeRecord node;\n-\n-    public DynamicNodeLabels( NodeRecord node )\n-    {\n-        this.node = node;\n-    }\n-\n-    @Override\n-    public long[] get( NodeStore nodeStore )\n-    {\n-        return get( node, nodeStore );\n-    }\n-\n-    public static long[] get( NodeRecord node, NodeStore nodeStore )\n-    {\n-        if ( node.isLight() )\n-        {\n-            nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ) );\n-        }\n-        return getDynamicLabelsArray( node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore() );\n-    }\n-\n-    public static long[] get( NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor )\n-    {\n-        if ( node.isLight() )\n-        {\n-            NodeStore.ensureHeavy( node, dynamicLabelCursor );\n-        }\n-        return getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() );\n-    }\n-\n-    @Override\n-    public long[] getIfLoaded()\n-    {\n-        if ( node.isLight() )\n-        {\n-            return null;\n-        }\n-        return stripNodeId( (long[]) getRightArray( readFullByteArrayFromHeavyRecords(\n-                node.getUsedDynamicLabelRecords(), ARRAY ) ).asObject() );\n-    }\n-\n-    @Override\n-    public Collection<DynamicRecord> put( long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator )\n-    {\n-        Arrays.sort( labelIds );\n-        return putSorted( node, labelIds, nodeStore, allocator );\n-    }\n-\n-    public static Collection<DynamicRecord> putSorted( NodeRecord node, long[] labelIds, NodeStore nodeStore,\n-            DynamicRecordAllocator allocator )\n-    {\n-        long existingLabelsField = node.getLabelField();\n-        long existingLabelsBits = parseLabelsBody( existingLabelsField );\n-\n-        Collection<DynamicRecord> changedDynamicRecords = node.getDynamicLabelRecords();\n-\n-        long labelField = node.getLabelField();\n-        if ( fieldPointsToDynamicRecordOfLabels( labelField ) )\n-        {\n-            // There are existing dynamic label records, get them\n-            nodeStore.ensureHeavy( node, existingLabelsBits );\n-            changedDynamicRecords = node.getDynamicLabelRecords();\n-            setNotInUse( changedDynamicRecords );\n-        }\n-\n-        if ( !InlineNodeLabels.tryInlineInNodeRecord( node, labelIds, changedDynamicRecords ) )\n-        {\n-            Iterator<DynamicRecord> recycledRecords = changedDynamicRecords.iterator();\n-            Collection<DynamicRecord> allocatedRecords = allocateRecordsForDynamicLabels( node.getId(), labelIds,\n-                    new ReusableRecordsCompositeAllocator( recycledRecords, allocator ) );\n-            // Set the rest of the previously set dynamic records as !inUse\n-            while ( recycledRecords.hasNext() )\n-            {\n-                DynamicRecord removedRecord = recycledRecords.next();\n-                removedRecord.setInUse( false );\n-                allocatedRecords.add( removedRecord );\n-            }\n-            node.setLabelField( dynamicPointer( allocatedRecords ), allocatedRecords );\n-            changedDynamicRecords = allocatedRecords;\n-        }\n-\n-        return changedDynamicRecords;\n-    }\n-\n-    @Override\n-    public Collection<DynamicRecord> add( long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator )\n-    {\n-        nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ) );\n-        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(),\n-                nodeStore.getDynamicLabelStore() );\n-        long[] newLabelIds = LabelIdArray.concatAndSort( existingLabelIds, labelId );\n-        Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n-        Collection<DynamicRecord> changedDynamicRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds,\n-                new ReusableRecordsCompositeAllocator( existingRecords, allocator ) );\n-        node.setLabelField( dynamicPointer( changedDynamicRecords ), changedDynamicRecords );\n-        return changedDynamicRecords;\n-    }\n-\n-    @Override\n-    public Collection<DynamicRecord> remove( long labelId, NodeStore nodeStore )\n-    {\n-        nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ) );\n-        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(),\n-                nodeStore.getDynamicLabelStore() );\n-        long[] newLabelIds = filter( existingLabelIds, labelId );\n-        Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n-        if ( InlineNodeLabels.tryInlineInNodeRecord( node, newLabelIds, existingRecords ) )\n-        {\n-            setNotInUse( existingRecords );\n-        }\n-        else\n-        {\n-            Collection<DynamicRecord> newRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds,\n-                    new ReusableRecordsCompositeAllocator( existingRecords, nodeStore.getDynamicLabelStore() ) );\n-            node.setLabelField( dynamicPointer( newRecords ), existingRecords );\n-            if ( !newRecords.equals( existingRecords ) )\n-            {   // One less dynamic record, mark that one as not in use\n-                for ( DynamicRecord record : existingRecords )\n-                {\n-                    if ( !newRecords.contains( record ) )\n-                    {\n-                        record.setInUse( false );\n-                    }\n-                }\n-            }\n-        }\n-        return existingRecords;\n-    }\n-\n-    public long getFirstDynamicRecordId()\n-    {\n-        return firstDynamicLabelRecordId( node.getLabelField() );\n-    }\n-\n-    public static long dynamicPointer( Collection<DynamicRecord> newRecords )\n-    {\n-        return 0x8000000000L | Iterables.first( newRecords ).getId();\n-    }\n-\n-    private static void setNotInUse( Collection<DynamicRecord> changedDynamicRecords )\n-    {\n-        for ( DynamicRecord record : changedDynamicRecords )\n+  private final NodeRecord node;\n+\n+  public DynamicNodeLabels(NodeRecord node)\n+  {\n+    this.node = node;\n+  }\n+\n+  @Override\n+  public long[] get(NodeStore nodeStore)\n+  {\n+    return get(node, nodeStore);\n+  }\n+\n+  public static long[] get(NodeRecord node, NodeStore nodeStore)\n+  {\n+    if (node.isLight())\n+    {\n+      nodeStore.ensureHeavy(node, firstDynamicLabelRecordId(node.getLabelField()));\n+    }\n+    return getDynamicLabelsArray(node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore());\n+  }\n+\n+  public static long[] get(NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor)\n+  {\n+    if (node.isLight())\n+    {\n+      NodeStore.ensureHeavy(node, dynamicLabelCursor);\n+    }\n+    return getDynamicLabelsArrayFromHeavyRecords(node.getUsedDynamicLabelRecords());\n+  }\n+\n+  @Override\n+  public long[] getIfLoaded()\n+  {\n+    if (node.isLight())\n+    {\n+      return null;\n+    }\n+    return stripNodeId((long[]) getRightArray(readFullByteArrayFromHeavyRecords(\n+        node.getUsedDynamicLabelRecords(), ARRAY)).asObject());\n+  }\n+\n+  @Override\n+  public Collection<DynamicRecord> put(long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator)\n+  {\n+    Arrays.sort(labelIds);\n+    return putSorted(node, labelIds, nodeStore, allocator);\n+  }\n+\n+  public static Collection<DynamicRecord> putSorted(NodeRecord node, long[] labelIds, NodeStore nodeStore,\n+                                                    DynamicRecordAllocator allocator)\n+  {\n+    long existingLabelsField = node.getLabelField();\n+    long existingLabelsBits = parseLabelsBody(existingLabelsField);\n+\n+    Collection<DynamicRecord> changedDynamicRecords = node.getDynamicLabelRecords();\n+\n+    long labelField = node.getLabelField();\n+    if (fieldPointsToDynamicRecordOfLabels(labelField))\n+    {\n+      // There are existing dynamic label records, get them\n+      nodeStore.ensureHeavy(node, existingLabelsBits);\n+      changedDynamicRecords = node.getDynamicLabelRecords();\n+      setNotInUse(changedDynamicRecords);\n+    }\n+\n+    if (!InlineNodeLabels.tryInlineInNodeRecord(node, labelIds, changedDynamicRecords))\n+    {\n+      Iterator<DynamicRecord> recycledRecords = changedDynamicRecords.iterator();\n+      Collection<DynamicRecord> allocatedRecords = allocateRecordsForDynamicLabels(node.getId(), labelIds,\n+          new ReusableRecordsCompositeAllocator(recycledRecords, allocator));\n+      // Set the rest of the previously set dynamic records as !inUse\n+      while (recycledRecords.hasNext())\n+      {\n+        DynamicRecord removedRecord = recycledRecords.next();\n+        removedRecord.setInUse(false);\n+        allocatedRecords.add(removedRecord);\n+      }\n+      node.setLabelField(dynamicPointer(allocatedRecords), allocatedRecords);\n+      changedDynamicRecords = allocatedRecords;\n+    }\n+\n+    return changedDynamicRecords;\n+  }\n+\n+  @Override\n+  public Collection<DynamicRecord> add(long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator)\n+  {\n+    nodeStore.ensureHeavy(node, firstDynamicLabelRecordId(node.getLabelField()));\n+    long[] existingLabelIds = getDynamicLabelsArray(node.getUsedDynamicLabelRecords(),\n+        nodeStore.getDynamicLabelStore());\n+    long[] newLabelIds = LabelIdArray.concatAndSort(existingLabelIds, labelId);\n+    Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n+    Collection<DynamicRecord> changedDynamicRecords = allocateRecordsForDynamicLabels(node.getId(), newLabelIds,\n+        new ReusableRecordsCompositeAllocator(existingRecords, allocator));\n+    node.setLabelField(dynamicPointer(changedDynamicRecords), changedDynamicRecords);\n+    return changedDynamicRecords;\n+  }\n+\n+  @Override\n+  public Collection<DynamicRecord> remove(long labelId, NodeStore nodeStore)\n+  {\n+    nodeStore.ensureHeavy(node, firstDynamicLabelRecordId(node.getLabelField()));\n+    long[] existingLabelIds = getDynamicLabelsArray(node.getUsedDynamicLabelRecords(),\n+        nodeStore.getDynamicLabelStore());\n+    long[] newLabelIds = filter(existingLabelIds, labelId);\n+    Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n+    if (InlineNodeLabels.tryInlineInNodeRecord(node, newLabelIds, existingRecords))\n+    {\n+      setNotInUse(existingRecords);\n+    } else\n+    {\n+      Collection<DynamicRecord> newRecords = allocateRecordsForDynamicLabels(node.getId(), newLabelIds,\n+          new ReusableRecordsCompositeAllocator(existingRecords, nodeStore.getDynamicLabelStore()));\n+      node.setLabelField(dynamicPointer(newRecords), existingRecords);\n+      if (!newRecords.equals(existingRecords))\n+      {   // One less dynamic record, mark that one as not in use\n+        for (DynamicRecord record : existingRecords)\n         {\n-            record.setInUse( false );\n+          if (!newRecords.contains(record))\n+          {\n+            record.setInUse(false);\n+          }\n         }\n-    }\n-\n-    @Override\n-    public boolean isInlined()\n-    {\n-        return false;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        if ( node.isLight() )\n-        {\n-            return format( \"Dynamic(id:%d)\", firstDynamicLabelRecordId( node.getLabelField() ) );\n-        }\n-        return format( \"Dynamic(id:%d,[%s])\", firstDynamicLabelRecordId( node.getLabelField() ),\n-                Arrays.toString( getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() ) ) );\n-    }\n-\n-    public static Collection<DynamicRecord> allocateRecordsForDynamicLabels( long nodeId, long[] labels,\n-            AbstractDynamicStore dynamicLabelStore )\n-    {\n-        return allocateRecordsForDynamicLabels( nodeId, labels, (DynamicRecordAllocator)dynamicLabelStore );\n-    }\n-\n-    public static Collection<DynamicRecord> allocateRecordsForDynamicLabels( long nodeId, long[] labels,\n-            DynamicRecordAllocator allocator )\n-    {\n-        long[] storedLongs = LabelIdArray.prependNodeId( nodeId, labels );\n-        Collection<DynamicRecord> records = new ArrayList<>();\n-        // since we can't store points in long array we passing false as possibility to store points\n-        DynamicArrayStore.allocateRecords( records, storedLongs, allocator, false );\n-        return records;\n-    }\n-\n-    public static long[] getDynamicLabelsArray( Iterable<DynamicRecord> records,\n-            AbstractDynamicStore dynamicLabelStore )\n-    {\n-        long[] storedLongs = (long[])\n-            DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( storedLongs );\n-    }\n-\n-    public static long[] getDynamicLabelsArrayFromHeavyRecords( Iterable<DynamicRecord> records )\n-    {\n-        long[] storedLongs = (long[])\n-            DynamicArrayStore.getRightArray( readFullByteArrayFromHeavyRecords( records, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( storedLongs );\n-    }\n-\n-    public static Pair<Long, long[]> getDynamicLabelsArrayAndOwner( Iterable<DynamicRecord> records,\n-            AbstractDynamicStore dynamicLabelStore )\n-    {\n-        long[] storedLongs = (long[])\n-                DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n-        return Pair.of(storedLongs[0], LabelIdArray.stripNodeId( storedLongs ));\n-    }\n+      }\n+    }\n+    return existingRecords;\n+  }\n+\n+  public long getFirstDynamicRecordId()\n+  {\n+    return firstDynamicLabelRecordId(node.getLabelField());\n+  }\n+\n+  public static long dynamicPointer(Collection<DynamicRecord> newRecords)\n+  {\n+    return 0x8000000000L | Iterables.first(newRecords).getId();\n+  }\n+\n+  private static void setNotInUse(Collection<DynamicRecord> changedDynamicRecords)\n+  {\n+    for (DynamicRecord record : changedDynamicRecords)\n+    {\n+      record.setInUse(false);\n+    }\n+  }\n+\n+  @Override\n+  public boolean isInlined()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    if (node.isLight())\n+    {\n+      return format(\"Dynamic(id:%d)\", firstDynamicLabelRecordId(node.getLabelField()));\n+    }\n+    return format(\"Dynamic(id:%d,[%s])\", firstDynamicLabelRecordId(node.getLabelField()),\n+        Arrays.toString(getDynamicLabelsArrayFromHeavyRecords(node.getUsedDynamicLabelRecords())));\n+  }\n+\n+  public static Collection<DynamicRecord> allocateRecordsForDynamicLabels(long nodeId, long[] labels,\n+                                                                          AbstractDynamicStore dynamicLabelStore)\n+  {\n+    return allocateRecordsForDynamicLabels(nodeId, labels, (DynamicRecordAllocator) dynamicLabelStore);\n+  }\n+\n+  public static Collection<DynamicRecord> allocateRecordsForDynamicLabels(long nodeId, long[] labels,\n+                                                                          DynamicRecordAllocator allocator)\n+  {\n+    long[] storedLongs = LabelIdArray.prependNodeId(nodeId, labels);\n+    Collection<DynamicRecord> records = new ArrayList<>();\n+    // since we can't store points in long array we passing false as possibility to store points\n+    DynamicArrayStore.allocateRecords(records, storedLongs, allocator, false);\n+    return records;\n+  }\n+\n+  public static long[] getDynamicLabelsArray(Iterable<DynamicRecord> records,\n+                                             AbstractDynamicStore dynamicLabelStore)\n+  {\n+    long[] storedLongs = (long[])\n+        DynamicArrayStore.getRightArray(dynamicLabelStore.readFullByteArray(records, PropertyType.ARRAY)).asObject();\n+    return LabelIdArray.stripNodeId(storedLongs);\n+  }\n+\n+  public static long[] getDynamicLabelsArrayFromHeavyRecords(Iterable<DynamicRecord> records)\n+  {\n+    long[] storedLongs = (long[])\n+        DynamicArrayStore.getRightArray(readFullByteArrayFromHeavyRecords(records, PropertyType.ARRAY)).asObject();\n+    return LabelIdArray.stripNodeId(storedLongs);\n+  }\n+\n+  public static Pair<Long, long[]> getDynamicLabelsArrayAndOwner(Iterable<DynamicRecord> records,\n+                                                                 AbstractDynamicStore dynamicLabelStore)\n+  {\n+    long[] storedLongs = (long[])\n+        DynamicArrayStore.getRightArray(dynamicLabelStore.readFullByteArray(records, PropertyType.ARRAY)).asObject();\n+    return Pair.of(storedLongs[0], LabelIdArray.stripNodeId(storedLongs));\n+  }\n }\n",
            "diff_size": 226
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1683/DynamicNodeLabels.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1683/DynamicNodeLabels.java\nindex e70eff25695..b59df70f41b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1683/DynamicNodeLabels.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1683/DynamicNodeLabels.java\n@@ -61,7 +61,8 @@ public class DynamicNodeLabels implements NodeLabels\n         {\n             nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ) );\n         }\n-        return getDynamicLabelsArray( node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore() );\n+\n+return getDynamicLabelsArray( node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore() );\n     }\n \n     public static long[] get( NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor )\n@@ -70,7 +71,8 @@ public class DynamicNodeLabels implements NodeLabels\n         {\n             NodeStore.ensureHeavy( node, dynamicLabelCursor );\n         }\n-        return getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() );\n+\n+return getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() );\n     }\n \n     @Override\n@@ -80,8 +82,8 @@ public class DynamicNodeLabels implements NodeLabels\n         {\n             return null;\n         }\n-        return stripNodeId( (long[]) getRightArray( readFullByteArrayFromHeavyRecords(\n-                node.getUsedDynamicLabelRecords(), ARRAY ) ).asObject() );\n+\n+return stripNodeId( (long[]) getRightArray( readFullByteArrayFromHeavyRecords( node.getUsedDynamicLabelRecords(), ARRAY ) ).asObject() );\n     }\n \n     @Override\n@@ -111,9 +113,8 @@ public class DynamicNodeLabels implements NodeLabels\n         if ( !InlineNodeLabels.tryInlineInNodeRecord( node, labelIds, changedDynamicRecords ) )\n         {\n             Iterator<DynamicRecord> recycledRecords = changedDynamicRecords.iterator();\n-            Collection<DynamicRecord> allocatedRecords = allocateRecordsForDynamicLabels( node.getId(), labelIds,\n-                    new ReusableRecordsCompositeAllocator( recycledRecords, allocator ) );\n-            // Set the rest of the previously set dynamic records as !inUse\n+            Collection<DynamicRecord> allocatedRecords = allocateRecordsForDynamicLabels( node.getId(), labelIds, new ReusableRecordsCompositeAllocator( recycledRecords, allocator ) );\n+    // Set the rest of the previously set dynamic records as !inUse\n             while ( recycledRecords.hasNext() )\n             {\n                 DynamicRecord removedRecord = recycledRecords.next();\n@@ -131,13 +132,11 @@ public class DynamicNodeLabels implements NodeLabels\n     public Collection<DynamicRecord> add( long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator )\n     {\n         nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ) );\n-        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(),\n-                nodeStore.getDynamicLabelStore() );\n-        long[] newLabelIds = LabelIdArray.concatAndSort( existingLabelIds, labelId );\n+        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore() );\n+    long[] newLabelIds = LabelIdArray.concatAndSort( existingLabelIds, labelId );\n         Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n-        Collection<DynamicRecord> changedDynamicRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds,\n-                new ReusableRecordsCompositeAllocator( existingRecords, allocator ) );\n-        node.setLabelField( dynamicPointer( changedDynamicRecords ), changedDynamicRecords );\n+        Collection<DynamicRecord> changedDynamicRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds, new ReusableRecordsCompositeAllocator( existingRecords, allocator ) );\n+node.setLabelField( dynamicPointer( changedDynamicRecords ), changedDynamicRecords );\n         return changedDynamicRecords;\n     }\n \n@@ -145,9 +144,8 @@ public class DynamicNodeLabels implements NodeLabels\n     public Collection<DynamicRecord> remove( long labelId, NodeStore nodeStore )\n     {\n         nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ) );\n-        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(),\n-                nodeStore.getDynamicLabelStore() );\n-        long[] newLabelIds = filter( existingLabelIds, labelId );\n+        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore() );\n+    long[] newLabelIds = filter( existingLabelIds, labelId );\n         Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n         if ( InlineNodeLabels.tryInlineInNodeRecord( node, newLabelIds, existingRecords ) )\n         {\n@@ -155,11 +153,11 @@ public class DynamicNodeLabels implements NodeLabels\n         }\n         else\n         {\n-            Collection<DynamicRecord> newRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds,\n-                    new ReusableRecordsCompositeAllocator( existingRecords, nodeStore.getDynamicLabelStore() ) );\n-            node.setLabelField( dynamicPointer( newRecords ), existingRecords );\n+            Collection<DynamicRecord> newRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds, new ReusableRecordsCompositeAllocator( existingRecords, nodeStore.getDynamicLabelStore() ) );\n+node.setLabelField( dynamicPointer( newRecords ), existingRecords );\n             if ( !newRecords.equals( existingRecords ) )\n-            {   // One less dynamic record, mark that one as not in use\n+            {\n+    // One less dynamic record, mark that one as not in use\n                 for ( DynamicRecord record : existingRecords )\n                 {\n                     if ( !newRecords.contains( record ) )\n@@ -203,14 +201,14 @@ public class DynamicNodeLabels implements NodeLabels\n         {\n             return format( \"Dynamic(id:%d)\", firstDynamicLabelRecordId( node.getLabelField() ) );\n         }\n-        return format( \"Dynamic(id:%d,[%s])\", firstDynamicLabelRecordId( node.getLabelField() ),\n-                Arrays.toString( getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() ) ) );\n+\n+return format( \"Dynamic(id:%d,[%s])\", firstDynamicLabelRecordId( node.getLabelField() ), Arrays.toString( getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() ) ) );\n     }\n \n     public static Collection<DynamicRecord> allocateRecordsForDynamicLabels( long nodeId, long[] labels,\n             AbstractDynamicStore dynamicLabelStore )\n     {\n-        return allocateRecordsForDynamicLabels( nodeId, labels, (DynamicRecordAllocator)dynamicLabelStore );\n+        return allocateRecordsForDynamicLabels( nodeId, labels, (DynamicRecordAllocator) dynamicLabelStore );\n     }\n \n     public static Collection<DynamicRecord> allocateRecordsForDynamicLabels( long nodeId, long[] labels,\n@@ -226,23 +224,20 @@ public class DynamicNodeLabels implements NodeLabels\n     public static long[] getDynamicLabelsArray( Iterable<DynamicRecord> records,\n             AbstractDynamicStore dynamicLabelStore )\n     {\n-        long[] storedLongs = (long[])\n-            DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( storedLongs );\n+        long[] storedLongs = (long[]) DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n+return LabelIdArray.stripNodeId( storedLongs );\n     }\n \n     public static long[] getDynamicLabelsArrayFromHeavyRecords( Iterable<DynamicRecord> records )\n     {\n-        long[] storedLongs = (long[])\n-            DynamicArrayStore.getRightArray( readFullByteArrayFromHeavyRecords( records, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( storedLongs );\n+        long[] storedLongs = (long[]) DynamicArrayStore.getRightArray( readFullByteArrayFromHeavyRecords( records, PropertyType.ARRAY ) ).asObject();\n+return LabelIdArray.stripNodeId( storedLongs );\n     }\n \n     public static Pair<Long, long[]> getDynamicLabelsArrayAndOwner( Iterable<DynamicRecord> records,\n             AbstractDynamicStore dynamicLabelStore )\n     {\n-        long[] storedLongs = (long[])\n-                DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n-        return Pair.of(storedLongs[0], LabelIdArray.stripNodeId( storedLongs ));\n+        long[] storedLongs = (long[]) DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY ) ).asObject();\n+return Pair.of( storedLongs[0], LabelIdArray.stripNodeId( storedLongs ));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}