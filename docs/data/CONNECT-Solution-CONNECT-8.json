{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.admingui.services.impl;\n\nimport gov.hhs.fha.nhinc.admingui.event.model.Certificate;\nimport gov.hhs.fha.nhinc.admingui.services.CertificateManagerService;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/8/CertificateManagerServiceImpl.java\nindex 6151524a9a8..a0630bc4d4a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/8/CertificateManagerServiceImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.event.model.Certificate;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/8/CertificateManagerServiceImpl.java\nindex 6151524a9a8..8a9509b1424 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/8/CertificateManagerServiceImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.event.model.Certificate;\n@@ -47,124 +48,123 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author tjafri\n  */\n public class CertificateManagerServiceImpl implements CertificateManagerService {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(CertificateManagerServiceImpl.class);\n-    private CertificateManager cmHelper = CertificateManagerImpl.getInstance();\n-    //NOSONAR\n-    private static final String AUTHORITY_KEY_ID = \"2.5.29.35\";\n-    //NOSONAR\n-    private static final String SUBJECT_KEY_ID = \"2.5.29.14\";\n-    private static final int AUTHORITY_KEY_POSITION = 6;\n-    private SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MMM/YYYY HH:mm:ss z\");\n-\n-    @Override\n-    public List<Certificate> fetchKeyStores() {\n-        return buildCertificateList(cmHelper.getKeyStore());\n-    }\n+  private static final Logger LOG = LoggerFactory.getLogger(CertificateManagerServiceImpl.class);\n+  private CertificateManager cmHelper = CertificateManagerImpl.getInstance();\n+  //NOSONAR\n+  private static final String AUTHORITY_KEY_ID = \"2.5.29.35\";\n+  //NOSONAR\n+  private static final String SUBJECT_KEY_ID = \"2.5.29.14\";\n+  private static final int AUTHORITY_KEY_POSITION = 6;\n+  private SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MMM/YYYY HH:mm:ss z\");\n \n-    @Override\n-    public List<Certificate> fetchTrustStores() {\n-        return buildCertificateList(cmHelper.getTrustStore());\n-    }\n+  @Override\n+  public List<Certificate> fetchKeyStores() {\n+    return buildCertificateList(cmHelper.getKeyStore());\n+  }\n \n-    @Override\n-    public String getKeyStoreLocation() {\n-        return cmHelper.getKeyStoreLocation();\n-    }\n+  @Override\n+  public List<Certificate> fetchTrustStores() {\n+    return buildCertificateList(cmHelper.getTrustStore());\n+  }\n \n-    @Override\n-    public String getTrustStoreLocation() {\n-        return cmHelper.getTrustStoreLocation();\n-    }\n+  @Override\n+  public String getKeyStoreLocation() {\n+    return cmHelper.getKeyStoreLocation();\n+  }\n \n-    @Override\n-    public List<Certificate> refreshKeyStores() {\n-        return buildCertificateList(cmHelper.refreshKeyStore());\n-    }\n+  @Override\n+  public String getTrustStoreLocation() {\n+    return cmHelper.getTrustStoreLocation();\n+  }\n \n-    private List<Certificate> buildCertificateList(KeyStore keystore) {\n-        List<Certificate> certs = null;\n-        try {\n-            Enumeration<String> aliases = keystore.aliases();\n-            if (aliases != null) {\n-                certs = new ArrayList<>();\n-                while (aliases.hasMoreElements()) {\n-                    String alias = aliases.nextElement();\n-                    java.security.cert.Certificate jCert = keystore.getCertificate(alias);\n-                    X509Certificate x509 = (X509Certificate) jCert;\n-                    Certificate obj = new Certificate();\n-                    obj.setAlias(alias);\n-                    obj.setAlgorithm(jCert.getPublicKey().getAlgorithm());\n-                    obj.setExpirationDate(formatDate(x509.getNotAfter()));\n-                    obj.setSerialNumber(getCertSerialNumber(x509));\n-                    obj.setVersion(x509.getVersion());\n-                    obj.setAuthorityKeyID(getAuthorityKeyIdentify(x509.getExtensionValue(AUTHORITY_KEY_ID)));\n-                    obj.setSubjectKeyID(getSubjectKeyID(x509.getExtensionValue(SUBJECT_KEY_ID)));\n-                    obj.setKeySize(getKeySize(x509));\n-                    certs.add(obj);\n-                }\n-            }\n-        } catch (KeyStoreException ex) {\n-            LOG.error(\"Unable to fetch keystore: {}\", ex);\n-        }\n-        return certs;\n-    }\n+  @Override\n+  public List<Certificate> refreshKeyStores() {\n+    return buildCertificateList(cmHelper.refreshKeyStore());\n+  }\n \n-    private static String getSubjectKeyID(byte[] subjectKeyID) {\n-        String ski = null;\n-        try {\n-            if (subjectKeyID != null) {\n-                // this logic extracts from CryptoBase class inside wss4j\n-                DERDecoder extVal = new DERDecoder(subjectKeyID);\n-                extVal.expect(DERDecoder.TYPE_OCTET_STRING); // ExtensionValue OCTET STRING\n-                extVal.getLength(); // leave this method alone. getlength modify array position.\n-                extVal.expect(DERDecoder.TYPE_OCTET_STRING); // KeyIdentifier OCTET STRING\n-                int keyIDLen = extVal.getLength();\n-                ski = Hex.encodeHexString(extVal.getBytes(keyIDLen));\n-            }\n-        } catch (WSSecurityException e) {\n-            LOG.error(\"Unable to convert SKI into human readable {}\", e.getLocalizedMessage(), e);\n+  private List<Certificate> buildCertificateList(KeyStore keystore) {\n+    List<Certificate> certs = null;\n+    try {\n+      Enumeration<String> aliases = keystore.aliases();\n+      if (aliases != null) {\n+        certs = new ArrayList<>();\n+        while (aliases.hasMoreElements()) {\n+          String alias = aliases.nextElement();\n+          java.security.cert.Certificate jCert = keystore.getCertificate(alias);\n+          X509Certificate x509 = (X509Certificate) jCert;\n+          Certificate obj = new Certificate();\n+          obj.setAlias(alias);\n+          obj.setAlgorithm(jCert.getPublicKey().getAlgorithm());\n+          obj.setExpirationDate(formatDate(x509.getNotAfter()));\n+          obj.setSerialNumber(getCertSerialNumber(x509));\n+          obj.setVersion(x509.getVersion());\n+          obj.setAuthorityKeyID(getAuthorityKeyIdentify(x509.getExtensionValue(AUTHORITY_KEY_ID)));\n+          obj.setSubjectKeyID(getSubjectKeyID(x509.getExtensionValue(SUBJECT_KEY_ID)));\n+          obj.setKeySize(getKeySize(x509));\n+          certs.add(obj);\n         }\n-        return ski;\n+      }\n+    } catch (KeyStoreException ex) {\n+      LOG.error(\"Unable to fetch keystore: {}\", ex);\n     }\n+    return certs;\n+  }\n \n-    private static String getAuthorityKeyIdentify(byte[] authorityKey) {\n-        String aik = null;\n-        try {\n-            if (authorityKey != null) {\n-                DERDecoder extValA = new DERDecoder(authorityKey);\n-                extValA.skip(AUTHORITY_KEY_POSITION);\n-                int length = authorityKey.length - AUTHORITY_KEY_POSITION;\n-                aik = Hex.encodeHexString(extValA.getBytes(length));\n-            }\n-        } catch (WSSecurityException e) {\n-            LOG.error(\"Unable to convert AIK into human readable {} \", e.getLocalizedMessage(), e);\n-        }\n-        return aik;\n+  private static String getSubjectKeyID(byte[] subjectKeyID) {\n+    String ski = null;\n+    try {\n+      if (subjectKeyID != null) {\n+        // this logic extracts from CryptoBase class inside wss4j\n+        DERDecoder extVal = new DERDecoder(subjectKeyID);\n+        extVal.expect(DERDecoder.TYPE_OCTET_STRING); // ExtensionValue OCTET STRING\n+        extVal.getLength(); // leave this method alone. getlength modify array position.\n+        extVal.expect(DERDecoder.TYPE_OCTET_STRING); // KeyIdentifier OCTET STRING\n+        int keyIDLen = extVal.getLength();\n+        ski = Hex.encodeHexString(extVal.getBytes(keyIDLen));\n+      }\n+    } catch (WSSecurityException e) {\n+      LOG.error(\"Unable to convert SKI into human readable {}\", e.getLocalizedMessage(), e);\n     }\n+    return ski;\n+  }\n \n-    private static String getCertSerialNumber(X509Certificate cert) {\n-        return new String(Hex.encodeHex(cert.getSerialNumber().toByteArray()));\n+  private static String getAuthorityKeyIdentify(byte[] authorityKey) {\n+    String aik = null;\n+    try {\n+      if (authorityKey != null) {\n+        DERDecoder extValA = new DERDecoder(authorityKey);\n+        extValA.skip(AUTHORITY_KEY_POSITION);\n+        int length = authorityKey.length - AUTHORITY_KEY_POSITION;\n+        aik = Hex.encodeHexString(extValA.getBytes(length));\n+      }\n+    } catch (WSSecurityException e) {\n+      LOG.error(\"Unable to convert AIK into human readable {} \", e.getLocalizedMessage(), e);\n     }\n+    return aik;\n+  }\n \n-    private static int getKeySize(X509Certificate cert) {\n-        PublicKey publicKey = cert.getPublicKey();\n-        if (publicKey instanceof RSAPublicKey) {\n-            return ((RSAPublicKey) publicKey).getModulus().bitLength();\n-        }\n-        return -1;\n-    }\n+  private static String getCertSerialNumber(X509Certificate cert) {\n+    return new String(Hex.encodeHex(cert.getSerialNumber().toByteArray()));\n+  }\n \n-    private String formatDate(Date obj) {\n-        return obj != null ? formatter.format(obj) : null;\n+  private static int getKeySize(X509Certificate cert) {\n+    PublicKey publicKey = cert.getPublicKey();\n+    if (publicKey instanceof RSAPublicKey) {\n+      return ((RSAPublicKey) publicKey).getModulus().bitLength();\n     }\n+    return -1;\n+  }\n \n-    @Override\n-    public List<Certificate> refreshTrustStores() {\n-        return buildCertificateList(cmHelper.refreshTrustStore());\n-    }\n+  private String formatDate(Date obj) {\n+    return obj != null ? formatter.format(obj) : null;\n+  }\n+\n+  @Override\n+  public List<Certificate> refreshTrustStores() {\n+    return buildCertificateList(cmHelper.refreshTrustStore());\n+  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/8/CertificateManagerServiceImpl.java\nindex 6151524a9a8..c810e39eaa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/8/CertificateManagerServiceImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.event.model.Certificate;\n@@ -110,7 +111,8 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n             }\n         } catch (KeyStoreException ex) {\n             LOG.error(\"Unable to fetch keystore: {}\", ex);\n-        }\n+\n+    }\n         return certs;\n     }\n \n@@ -128,7 +130,8 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n             }\n         } catch (WSSecurityException e) {\n             LOG.error(\"Unable to convert SKI into human readable {}\", e.getLocalizedMessage(), e);\n-        }\n+\n+    }\n         return ski;\n     }\n \n@@ -143,7 +146,8 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n             }\n         } catch (WSSecurityException e) {\n             LOG.error(\"Unable to convert AIK into human readable {} \", e.getLocalizedMessage(), e);\n-        }\n+\n+    }\n         return aik;\n     }\n \n@@ -155,7 +159,8 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n         PublicKey publicKey = cert.getPublicKey();\n         if (publicKey instanceof RSAPublicKey) {\n             return ((RSAPublicKey) publicKey).getModulus().bitLength();\n-        }\n+\n+    }\n         return -1;\n     }\n \n@@ -167,4 +172,4 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n     public List<Certificate> refreshTrustStores() {\n         return buildCertificateList(cmHelper.refreshTrustStore());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "102",
                    "column": "22",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "170",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "27",
                    "severity": "error",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "177",
                    "column": "50",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/8/CertificateManagerServiceImpl.java\nindex 6151524a9a8..ca89f5ca056 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/8/CertificateManagerServiceImpl.java\n@@ -50,6 +50,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author tjafri\n  */\n+\n+\n public class CertificateManagerServiceImpl implements CertificateManagerService {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CertificateManagerServiceImpl.class);\n@@ -61,26 +63,31 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n     private static final int AUTHORITY_KEY_POSITION = 6;\n     private SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MMM/YYYY HH:mm:ss z\");\n \n+\n     @Override\n     public List<Certificate> fetchKeyStores() {\n         return buildCertificateList(cmHelper.getKeyStore());\n     }\n \n+\n     @Override\n     public List<Certificate> fetchTrustStores() {\n         return buildCertificateList(cmHelper.getTrustStore());\n     }\n \n+\n     @Override\n     public String getKeyStoreLocation() {\n         return cmHelper.getKeyStoreLocation();\n     }\n \n+\n     @Override\n     public String getTrustStoreLocation() {\n         return cmHelper.getTrustStoreLocation();\n     }\n \n+\n     @Override\n     public List<Certificate> refreshKeyStores() {\n         return buildCertificateList(cmHelper.refreshKeyStore());\n@@ -92,10 +99,11 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n             Enumeration<String> aliases = keystore.aliases();\n             if (aliases != null) {\n                 certs = new ArrayList<>();\n-                while (aliases.hasMoreElements()) {\n+                while(aliases.hasMoreElements()) {\n                     String alias = aliases.nextElement();\n                     java.security.cert.Certificate jCert = keystore.getCertificate(alias);\n-                    X509Certificate x509 = (X509Certificate) jCert;\n+                    X509Certificate x509 = (X509Certificate)\n+                                               jCert;\n                     Certificate obj = new Certificate();\n                     obj.setAlias(alias);\n                     obj.setAlgorithm(jCert.getPublicKey().getAlgorithm());\n@@ -114,7 +122,8 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n         return certs;\n     }\n \n-    private static String getSubjectKeyID(byte[] subjectKeyID) {\n+    private static String getSubjectKeyID(byte\n+                                              [ ] subjectKeyID) {\n         String ski = null;\n         try {\n             if (subjectKeyID != null) {\n@@ -123,6 +132,7 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n                 extVal.expect(DERDecoder.TYPE_OCTET_STRING); // ExtensionValue OCTET STRING\n                 extVal.getLength(); // leave this method alone. getlength modify array position.\n                 extVal.expect(DERDecoder.TYPE_OCTET_STRING); // KeyIdentifier OCTET STRING\n+\n                 int keyIDLen = extVal.getLength();\n                 ski = Hex.encodeHexString(extVal.getBytes(keyIDLen));\n             }\n@@ -132,12 +142,14 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n         return ski;\n     }\n \n-    private static String getAuthorityKeyIdentify(byte[] authorityKey) {\n+    private static String getAuthorityKeyIdentify(byte\n+                                                      [ ] authorityKey) {\n         String aik = null;\n         try {\n             if (authorityKey != null) {\n                 DERDecoder extValA = new DERDecoder(authorityKey);\n                 extValA.skip(AUTHORITY_KEY_POSITION);\n+\n                 int length = authorityKey.length - AUTHORITY_KEY_POSITION;\n                 aik = Hex.encodeHexString(extValA.getBytes(length));\n             }\n@@ -154,17 +166,21 @@ public class CertificateManagerServiceImpl implements CertificateManagerService\n     private static int getKeySize(X509Certificate cert) {\n         PublicKey publicKey = cert.getPublicKey();\n         if (publicKey instanceof RSAPublicKey) {\n-            return ((RSAPublicKey) publicKey).getModulus().bitLength();\n+            return ((RSAPublicKey)\n+                        publicKey ).getModulus().bitLength();\n         }\n-        return -1;\n+        return -\n+                   1;\n     }\n \n     private String formatDate(Date obj) {\n-        return obj != null ? formatter.format(obj) : null;\n+        return obj != null? formatter.format(obj): null;\n     }\n \n+\n     @Override\n     public List<Certificate> refreshTrustStores() {\n         return buildCertificateList(cmHelper.refreshTrustStore());\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/8/CertificateManagerServiceImpl.java\nindex 6151524a9a8..21ddff08101 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/8/CertificateManagerServiceImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.admingui.services.impl;\n-\n import gov.hhs.fha.nhinc.admingui.event.model.Certificate;\n import gov.hhs.fha.nhinc.admingui.services.CertificateManagerService;\n import gov.hhs.fha.nhinc.callback.opensaml.CertificateManager;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/8/CertificateManagerServiceImpl.java\nindex 6151524a9a8..a0630bc4d4a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/8/CertificateManagerServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/8/CertificateManagerServiceImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.services.impl;\n \n import gov.hhs.fha.nhinc.admingui.event.model.Certificate;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}