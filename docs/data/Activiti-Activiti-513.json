{
    "project_name": "Activiti-Activiti",
    "error_id": "513",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.util.List;\nimport java.util.Map;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/513/TaskRuntimeHelper.java\nindex a715017bb98..c3465f87d8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/513/TaskRuntimeHelper.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/513/TaskRuntimeHelper.java\nindex a715017bb98..d1b0cda4820 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/513/TaskRuntimeHelper.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n@@ -187,12 +188,12 @@ public class TaskRuntimeHelper {\n             List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n             List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n             org.activiti.engine.task.Task task = taskService.createTaskQuery()\n-                                                         .or()\n-                                                         .taskCandidateOrAssigned(authenticatedUserId, userGroups)\n-                                                         .taskOwner(authenticatedUserId)\n-                                                         .endOr()\n-                                                         .taskId(taskId)\n-                                                         .singleResult();\n+                    .or()\n+                    .taskCandidateOrAssigned(authenticatedUserId, userGroups)\n+                    .taskOwner(authenticatedUserId)\n+                    .endOr()\n+                    .taskId(taskId)\n+                    .singleResult();\n             if (task == null) {\n                 throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n             }\n@@ -275,14 +276,14 @@ public class TaskRuntimeHelper {\n     public void handleCompleteTaskPayload(CompleteTaskPayload completeTaskPayload) {\n \n         completeTaskPayload.setVariables(taskVariablesValidator\n-                                         .handlePayloadVariables(completeTaskPayload.getVariables()));\n+                .handlePayloadVariables(completeTaskPayload.getVariables()));\n \n     }\n \n     public void handleSaveTaskPayload(SaveTaskPayload saveTaskPayload) {\n \n         saveTaskPayload.setVariables(taskVariablesValidator\n-                                     .handlePayloadVariables(saveTaskPayload.getVariables()));\n+                .handlePayloadVariables(saveTaskPayload.getVariables()));\n \n     }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 82.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/513/TaskRuntimeHelper.java\nindex a715017bb98..a836f522f90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/513/TaskRuntimeHelper.java\n@@ -18,7 +18,6 @@ package org.activiti.runtime.api.impl;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n-\n import org.activiti.api.runtime.shared.NotFoundException;\n import org.activiti.api.runtime.shared.security.SecurityManager;\n import org.activiti.api.task.model.Task;\n@@ -31,259 +30,206 @@ import org.activiti.engine.TaskService;\n import org.activiti.engine.impl.persistence.entity.VariableInstance;\n import org.activiti.runtime.api.model.impl.APITaskConverter;\n \n-public class TaskRuntimeHelper {\n-    private final TaskService taskService;\n-    private final SecurityManager securityManager;\n-    private final APITaskConverter taskConverter;\n-    private final TaskVariablesPayloadValidator taskVariablesValidator;\n-\n-    public TaskRuntimeHelper(TaskService taskService,\n-                             APITaskConverter taskConverter,\n-                             SecurityManager securityManager,\n-                             TaskVariablesPayloadValidator taskVariablesValidator) {\n-        this.taskService = taskService;\n-        this.securityManager = securityManager;\n-        this.taskConverter = taskConverter;\n-        this.taskVariablesValidator = taskVariablesValidator;\n-    }\n-\n-    public Task applyUpdateTaskPayload(boolean isAdmin, UpdateTaskPayload updateTaskPayload) {\n-\n-        org.activiti.engine.task.Task internalTask;\n-\n-        if (isAdmin) {\n-            internalTask = getInternalTask(updateTaskPayload.getTaskId());\n-        } else {\n-            internalTask = getTaskToUpdate(updateTaskPayload.getTaskId());\n-        }\n-\n-        int updates = updateName(updateTaskPayload,\n-                internalTask,\n-                0);\n-        updates = updateDescription(updateTaskPayload,\n-                internalTask,\n-                updates);\n-        updates = updatePriority(updateTaskPayload,\n-                internalTask,\n-                updates);\n-\n-        updates = updateDueDate(updateTaskPayload,\n-                internalTask,\n-                updates);\n-        updates = updateParentTaskId(updateTaskPayload,\n-                internalTask,\n-                updates);\n-        updates = updateFormKey(updateTaskPayload,\n-                internalTask,\n-                updates);\n-\n-        if (updates > 0) {\n-            taskService.saveTask(internalTask);\n-        }\n-\n-        return taskConverter.from(getInternalTask(updateTaskPayload.getTaskId()));\n-    }\n-\n-    private org.activiti.engine.task.Task getTaskToUpdate(String taskId) {\n-\n-        org.activiti.engine.task.Task internalTask = getInternalTaskWithChecks(taskId);\n-        assertCanModifyTask(internalTask);\n-        return internalTask;\n-    }\n-\n-    private void assertCanModifyTask(org.activiti.engine.task.Task internalTask) {\n-        String authenticatedUserId = getAuthenticatedUser();\n-        // validate that you are trying to update task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-    }\n-\n-    private int updateFormKey(UpdateTaskPayload updateTaskPayload,\n-                              org.activiti.engine.task.Task internalTask,\n-                              int updates) {\n-        String newValue;\n-\n-        if ((newValue = updateTaskPayload.getFormKey()) != null) {\n-            String oldValue = internalTask.getFormKey();\n-            if (!Objects.equals(oldValue, newValue)) {\n-                updates++;\n-                internalTask.setFormKey(newValue);\n-            }\n-        }\n-        return updates;\n-    }\n-\n-    private int updateParentTaskId(UpdateTaskPayload updateTaskPayload,\n-                                   org.activiti.engine.task.Task internalTask,\n-                                   int updates) {\n-        String newValue;\n-\n-        if ((newValue = updateTaskPayload.getParentTaskId()) != null) {\n-            String oldValue = internalTask.getParentTaskId();\n-            if (!Objects.equals(oldValue, newValue)) {\n-                updates++;\n-                internalTask.setParentTaskId(newValue);\n-            }\n-        }\n-        return updates;\n-    }\n-\n-    private int updateDueDate(UpdateTaskPayload updateTaskPayload,\n-                              org.activiti.engine.task.Task internalTask,\n-                              int updates) {\n-        if (updateTaskPayload.getDueDate() != null && !Objects.equals(internalTask.getDueDate(),\n-                updateTaskPayload.getDueDate())) {\n-            updates++;\n-            internalTask.setDueDate(updateTaskPayload.getDueDate());\n-        }\n-        return updates;\n-    }\n-\n-    private int updatePriority(UpdateTaskPayload updateTaskPayload,\n-                               org.activiti.engine.task.Task internalTask,\n-                               int updates) {\n-        if (updateTaskPayload.getPriority() != null && internalTask.getPriority() != updateTaskPayload.getPriority()) {\n-            updates++;\n-            internalTask.setPriority(updateTaskPayload.getPriority());\n-        }\n-        return updates;\n-    }\n-\n-    private int updateDescription(UpdateTaskPayload updateTaskPayload,\n-                                  org.activiti.engine.task.Task internalTask,\n-                                  int updates) {\n-        String newValue;\n-\n-        if ((newValue = updateTaskPayload.getDescription()) != null) {\n-            String oldValue = internalTask.getDescription();\n-            if (!Objects.equals(oldValue, newValue)) {\n-                updates++;\n-                internalTask.setDescription(newValue);\n-            }\n-        }\n-        return updates;\n-    }\n-\n-    private int updateName(UpdateTaskPayload updateTaskPayload,\n-                           org.activiti.engine.task.Task internalTask,\n-                           int updates) {\n-        String newValue;\n-        if ((newValue = updateTaskPayload.getName()) != null) {\n-            String oldValue = internalTask.getName();\n-            if (!Objects.equals(oldValue, newValue)) {\n-                updates++;\n-                internalTask.setName(newValue);\n-            }\n-        }\n-        return updates;\n-    }\n-\n-    public org.activiti.engine.task.Task getInternalTaskWithChecks(String taskId) {\n-        String authenticatedUserId = getAuthenticatedUser();\n-\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty() && securityManager != null) {\n-\n-            List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            org.activiti.engine.task.Task task = taskService.createTaskQuery()\n-                                                         .or()\n-                                                         .taskCandidateOrAssigned(authenticatedUserId, userGroups)\n-                                                         .taskOwner(authenticatedUserId)\n-                                                         .endOr()\n-                                                         .taskId(taskId)\n-                                                         .singleResult();\n-            if (task == null) {\n-                throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n-            }\n-\n-            return task;\n-        }\n-        throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n-    }\n-\n-    public void assertHasAccessToTask(String taskId) {\n-        getInternalTaskWithChecks(taskId);\n-    }\n-\n-    private String getAuthenticatedUser() {\n-        return securityManager != null ? securityManager.getAuthenticatedUserId() : null;\n-    }\n-\n-    public org.activiti.engine.task.Task getInternalTask(String taskId) {\n-        org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskId(taskId).singleResult();\n-        if (internalTask == null) {\n-            throw new NotFoundException(\"Unable to find task for the given id: \" + taskId);\n-        }\n-        return internalTask;\n-    }\n-\n-    public Map<String, org.activiti.engine.impl.persistence.entity.VariableInstance> getInternalTaskVariables(String taskId) {\n-        return taskService.getVariableInstancesLocal(taskId);\n-    }\n-\n-    public void createVariable(boolean isAdmin,\n-                               CreateTaskVariablePayload createTaskVariablePayload) {\n-        if (!isAdmin) {\n-            assertCanModifyTask(getInternalTask(createTaskVariablePayload.getTaskId()));\n-        }\n \n-        taskVariablesValidator.handleCreateTaskVariablePayload(createTaskVariablePayload);\n-\n-        assertVariableDoesNotExist(createTaskVariablePayload);\n-\n-        taskService.setVariableLocal(createTaskVariablePayload.getTaskId(),\n-                createTaskVariablePayload.getName(),\n-                createTaskVariablePayload.getValue());\n-    }\n+public class TaskRuntimeHelper {\n \n-    private void assertVariableDoesNotExist(CreateTaskVariablePayload createTaskVariablePayload) {\n-        Map<String, VariableInstance> variables = taskService.getVariableInstancesLocal(createTaskVariablePayload.getTaskId());\n+  private final TaskService taskService;\n \n-        if (variables != null && variables.containsKey(createTaskVariablePayload.getName())) {\n-            throw new IllegalStateException(\"Variable already exists\");\n-        }\n-    }\n+  private final SecurityManager securityManager;\n \n-    public void updateVariable(boolean isAdmin,\n-                               UpdateTaskVariablePayload updateTaskVariablePayload) {\n-        if (!isAdmin) {\n-            assertCanModifyTask(getInternalTask(updateTaskVariablePayload.getTaskId()));\n-        }\n+  private final APITaskConverter taskConverter;\n \n-        taskVariablesValidator.handleUpdateTaskVariablePayload(updateTaskVariablePayload);\n+  private final TaskVariablesPayloadValidator taskVariablesValidator;\n \n-        assertVariableExists(updateTaskVariablePayload);\n+  public TaskRuntimeHelper(TaskService taskService,\n+                           APITaskConverter taskConverter,\n+                           SecurityManager securityManager, TaskVariablesPayloadValidator taskVariablesValidator) {\n+    this.taskService = taskService;\n+    this.securityManager = securityManager;\n+    this.taskConverter = taskConverter;\n+    this.taskVariablesValidator = taskVariablesValidator;\n+  }\n \n-        taskService.setVariableLocal(updateTaskVariablePayload.getTaskId(),\n-                updateTaskVariablePayload.getName(),\n-                updateTaskVariablePayload.getValue());\n+  public Task applyUpdateTaskPayload(boolean isAdmin, UpdateTaskPayload updateTaskPayload) {\n+    org.activiti.engine.task.Task internalTask;\n+    if (isAdmin) {\n+      internalTask = getInternalTask(updateTaskPayload.getTaskId());\n+    } else {\n+      internalTask = getTaskToUpdate(updateTaskPayload.getTaskId());\n     }\n \n-    private void assertVariableExists(UpdateTaskVariablePayload updateTaskVariablePayload) {\n-        Map<String, VariableInstance> variables = taskService.getVariableInstancesLocal(updateTaskVariablePayload.getTaskId());\n-\n-        if (variables == null) {\n-            throw new IllegalStateException(\"Variable does not exist\");\n-        }\n-\n-        if (!variables.containsKey(updateTaskVariablePayload.getName())) {\n-            throw new IllegalStateException(\"Variable does not exist\");\n-        }\n+    int updates = updateName(updateTaskPayload, internalTask, 0);\n+    updates = updateDescription(updateTaskPayload, internalTask, updates);\n+    updates = updatePriority(updateTaskPayload, internalTask, updates);\n+    updates = updateDueDate(updateTaskPayload, internalTask, updates);\n+    updates = updateParentTaskId(updateTaskPayload, internalTask, updates);\n+    updates = updateFormKey(updateTaskPayload, internalTask, updates);\n+    if (updates > 0) {\n+      taskService.saveTask(internalTask);\n     }\n+    return taskConverter.from(getInternalTask(updateTaskPayload.getTaskId()));\n+  }\n \n-    public void handleCompleteTaskPayload(CompleteTaskPayload completeTaskPayload) {\n-\n-        completeTaskPayload.setVariables(taskVariablesValidator\n-                                         .handlePayloadVariables(completeTaskPayload.getVariables()));\n+  private org.activiti.engine.task.Task getTaskToUpdate(String taskId) {\n+    org.activiti.engine.task.Task internalTask = getInternalTaskWithChecks(taskId);\n+    assertCanModifyTask(internalTask);\n+    return internalTask;\n+  }\n \n-    }\n-\n-    public void handleSaveTaskPayload(SaveTaskPayload saveTaskPayload) {\n-\n-        saveTaskPayload.setVariables(taskVariablesValidator\n-                                     .handlePayloadVariables(saveTaskPayload.getVariables()));\n-\n-    }\n-\n-}\n+  private void assertCanModifyTask(org.activiti.engine.task.Task internalTask) {\n+    String authenticatedUserId = getAuthenticatedUser();\n+        // validate that you are trying to update task where you are the assignee\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+      throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n+    }\n+  }\n+\n+  private int updateFormKey(UpdateTaskPayload updateTaskPayload,\n+                            org.activiti.engine.task.Task internalTask, int updates) {\n+    String newValue;\n+    if ((newValue = updateTaskPayload.getFormKey()) != null) {\n+      String oldValue = internalTask.getFormKey();\n+      if (!Objects.equals(oldValue, newValue)) {\n+        updates++;\n+        internalTask.setFormKey(newValue);\n+      }\n+    }\n+    return updates;\n+  }\n+\n+  private int updateParentTaskId(UpdateTaskPayload updateTaskPayload,\n+                                 org.activiti.engine.task.Task internalTask, int updates) {\n+    String newValue;\n+    if ((newValue = updateTaskPayload.getParentTaskId()) != null) {\n+      String oldValue = internalTask.getParentTaskId();\n+      if (!Objects.equals(oldValue, newValue)) {\n+        updates++;\n+        internalTask.setParentTaskId(newValue);\n+      }\n+    }\n+    return updates;\n+  }\n+\n+  private int updateDueDate(UpdateTaskPayload updateTaskPayload,\n+                            org.activiti.engine.task.Task internalTask, int updates) {\n+    if (updateTaskPayload.getDueDate() != null && !Objects.equals(internalTask.getDueDate(),\n+                                                                  updateTaskPayload.getDueDate())) {\n+      updates++;\n+      internalTask.setDueDate(updateTaskPayload.getDueDate());\n+    }\n+    return updates;\n+  }\n+\n+  private int updatePriority(UpdateTaskPayload updateTaskPayload,\n+                             org.activiti.engine.task.Task internalTask, int updates) {\n+    if (updateTaskPayload.getPriority() != null && internalTask.getPriority() != updateTaskPayload.getPriority()) {\n+      updates++;\n+      internalTask.setPriority(updateTaskPayload.getPriority());\n+    }\n+    return updates;\n+  }\n+\n+  private int updateDescription(UpdateTaskPayload updateTaskPayload,\n+                                org.activiti.engine.task.Task internalTask, int updates) {\n+    String newValue;\n+    if ((newValue = updateTaskPayload.getDescription()) != null) {\n+      String oldValue = internalTask.getDescription();\n+      if (!Objects.equals(oldValue, newValue)) {\n+        updates++;\n+        internalTask.setDescription(newValue);\n+      }\n+    }\n+    return updates;\n+  }\n+\n+  private int updateName(UpdateTaskPayload updateTaskPayload,\n+                         org.activiti.engine.task.Task internalTask, int updates) {\n+    String newValue;\n+    if ((newValue = updateTaskPayload.getName()) != null) {\n+      String oldValue = internalTask.getName();\n+      if (!Objects.equals(oldValue, newValue)) {\n+        updates++;\n+        internalTask.setName(newValue);\n+      }\n+    }\n+    return updates;\n+  }\n+\n+  public org.activiti.engine.task.Task getInternalTaskWithChecks(String taskId) {\n+    String authenticatedUserId = getAuthenticatedUser();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty() && securityManager != null) {\n+      List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n+      List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+      org.activiti.engine.task.Task task = taskService.createTaskQuery().or().taskCandidateOrAssigned(authenticatedUserId, userGroups).taskOwner(authenticatedUserId).endOr().taskId(taskId).singleResult();\n+      if (task == null) {\n+        throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n+      }\n+      return task;\n+    }\n+    throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n+  }\n+\n+  public void assertHasAccessToTask(String taskId) {\n+    getInternalTaskWithChecks(taskId);\n+  }\n+\n+  private String getAuthenticatedUser() {\n+    return securityManager != null ? securityManager.getAuthenticatedUserId() : null;\n+  }\n+\n+  public org.activiti.engine.task.Task getInternalTask(String taskId) {\n+    org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskId(taskId).singleResult();\n+    if (internalTask == null) {\n+      throw new NotFoundException(\"Unable to find task for the given id: \" + taskId);\n+    }\n+    return internalTask;\n+  }\n+\n+  public Map<String, org.activiti.engine.impl.persistence.entity.VariableInstance> getInternalTaskVariables(String taskId) {\n+    return taskService.getVariableInstancesLocal(taskId);\n+  }\n+\n+  public void createVariable(boolean isAdmin, CreateTaskVariablePayload createTaskVariablePayload) {\n+    if (!isAdmin) {\n+      assertCanModifyTask(getInternalTask(createTaskVariablePayload.getTaskId()));\n+    }\n+    taskVariablesValidator.handleCreateTaskVariablePayload(createTaskVariablePayload);\n+    assertVariableDoesNotExist(createTaskVariablePayload);\n+    taskService.setVariableLocal(createTaskVariablePayload.getTaskId(), createTaskVariablePayload.getName(), createTaskVariablePayload.getValue());\n+  }\n+\n+  private void assertVariableDoesNotExist(CreateTaskVariablePayload createTaskVariablePayload) {\n+    Map<String, VariableInstance> variables = taskService.getVariableInstancesLocal(createTaskVariablePayload.getTaskId());\n+    if (variables != null && variables.containsKey(createTaskVariablePayload.getName())) {\n+      throw new IllegalStateException(\"Variable already exists\");\n+    }\n+  }\n+\n+  public void updateVariable(boolean isAdmin, UpdateTaskVariablePayload updateTaskVariablePayload) {\n+    if (!isAdmin) {\n+      assertCanModifyTask(getInternalTask(updateTaskVariablePayload.getTaskId()));\n+    }\n+    taskVariablesValidator.handleUpdateTaskVariablePayload(updateTaskVariablePayload);\n+    assertVariableExists(updateTaskVariablePayload);\n+    taskService.setVariableLocal(updateTaskVariablePayload.getTaskId(), updateTaskVariablePayload.getName(), updateTaskVariablePayload.getValue());\n+  }\n+\n+  private void assertVariableExists(UpdateTaskVariablePayload updateTaskVariablePayload) {\n+    Map<String, VariableInstance> variables = taskService.getVariableInstancesLocal(updateTaskVariablePayload.getTaskId());\n+    if (variables == null) {\n+      throw new IllegalStateException(\"Variable does not exist\");\n+    }\n+    if (!variables.containsKey(updateTaskVariablePayload.getName())) {\n+      throw new IllegalStateException(\"Variable does not exist\");\n+    }\n+  }\n+\n+  public void handleCompleteTaskPayload(CompleteTaskPayload completeTaskPayload) {\n+    completeTaskPayload.setVariables(taskVariablesValidator.handlePayloadVariables(completeTaskPayload.getVariables()));\n+  }\n+\n+  public void handleSaveTaskPayload(SaveTaskPayload saveTaskPayload) {\n+    saveTaskPayload.setVariables(taskVariablesValidator.handlePayloadVariables(saveTaskPayload.getVariables()));\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 405
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/513/TaskRuntimeHelper.java\nindex a715017bb98..c3465f87d8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/513/TaskRuntimeHelper.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/513/TaskRuntimeHelper.java\nindex a715017bb98..c3465f87d8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/513/TaskRuntimeHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/513/TaskRuntimeHelper.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}