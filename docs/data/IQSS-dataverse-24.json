{
    "project_name": "IQSS-dataverse",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "65",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class MakeDataCountUtil {\n\n    public static final String LOG_HEADER = \"#Fields: event_time\tclient_ip\tsession_cookie_id\tuser_cookie_id\tuser_id\trequest_url\tidentifier\tfilename\tsize\tuser-agent\ttitle\tpublisher\tpublisher_id\tauthors\tpublication_date\tversion\tother_id\ttarget_url\tpublication_year\\n\";\n\n    //ISO 3166 Country codes as used by Geomind Geolite2 database in counter-processor\n    @Transient private static Set<String> validCountryCodes = Stream",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "50",
                    "column": "25",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/24/MakeDataCountUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/24/MakeDataCountUtil.java\nindex f3d45642083..fdd03f01415 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/24/MakeDataCountUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/24/MakeDataCountUtil.java\n@@ -16,134 +16,148 @@ import javax.persistence.Transient;\n /**\n  * See doc/sphinx-guides/source/admin/make-data-count.rst for user facing docs\n  * about Make Data Count. Go read that first.\n- *\n+ * <p>\n  * The main issue for initial backend work is\n  * https://github.com/IQSS/dataverse/issues/4821\n- *\n+ * <p>\n  * The following is a brain dump of additional details from participating in a\n  * 2018-10-18 kickoff meeting (notes at\n  * https://docs.google.com/document/d/1eM4rAuhmR4ZQxJC_PTE0rq2x7N3aNEjMN7QVvpkY1os/edit?usp=sharing\n  * ) and from watching two webinars at https://makedatacount.org/presentations/\n  * (MDC Webinar: COUNTER Code of Practice September 13th, 2017 and MDC Webinar:\n  * How to Make Your Data Count July 10th, 2018).\n- *\n+ * <p>\n  * The recommended starting point to implement Make Data Count is\n  * https://github.com/CDLUC3/Make-Data-Count/blob/master/getting-started.md\n  * which specifically recommends reading the \"COUNTER Code of Practice for\n  * Research Data\" mentioned in the user facing docs.\n- *\n+ * <p>\n  * Make Data Count was first implemented in DASH. Here's an example dataset:\n  * https://dash.ucmerced.edu/stash/dataset/doi:10.6071/M3RP49\n- *\n+ * <p>\n  * For processing logs we could try DASH's\n  * https://github.com/CDLUC3/counter-processor\n- *\n+ * <p>\n  * Next, DataOne implemented it, and you can see an example dataset here:\n  * https://search.dataone.org/view/doi:10.5063/F1Z899CZ\n- *\n+ * <p>\n  * Parts of DataOne are written in Java so perhaps there is some code that can\n  * be reused?\n  */\n public class MakeDataCountUtil {\n \n-    public static final String LOG_HEADER = \"#Fields: event_time\tclient_ip\tsession_cookie_id\tuser_cookie_id\tuser_id\trequest_url\tidentifier\tfilename\tsize\tuser-agent\ttitle\tpublisher\tpublisher_id\tauthors\tpublication_date\tversion\tother_id\ttarget_url\tpublication_year\\n\";\n-\n-    //ISO 3166 Country codes as used by Geomind Geolite2 database in counter-processor\n-    @Transient private static Set<String> validCountryCodes = Stream\n-            .of(\"a1\", \"a2\", \"o1\", \"ad\", \"ae\", \"af\", \"ag\", \"ai\", \"al\", \"am\", \"ao\", \"ap\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"aw\", \"ax\", \"az\", \"ba\", \"bb\", \"bd\", \"be\", \"bf\", \"bg\", \"bh\", \"bi\", \"bj\", \"bl\", \"bm\", \"bn\", \"bo\", \"bq\", \"br\", \"bs\", \"bt\", \"bv\", \"bw\", \"by\", \"bz\", \"ca\", \"cc\", \"cd\", \"cf\", \"cg\", \"ch\", \"ci\", \"ck\", \"cl\", \"cm\", \"cn\", \"co\", \"cr\", \"cu\", \"cv\", \"cw\", \"cx\", \"cy\", \"cz\", \"de\", \"dj\", \"dk\", \"dm\", \"do\", \"dz\", \"ec\", \"ee\", \"eg\", \"eh\", \"er\", \"es\", \"et\", \"eu\", \"fi\", \"fj\", \"fk\",\n-                    \"fm\", \"fo\", \"fr\", \"ga\", \"gb\", \"gd\", \"ge\", \"gf\", \"gg\", \"gh\", \"gi\", \"gl\", \"gm\", \"gn\", \"gp\", \"gq\", \"gr\", \"gs\", \"gt\", \"gu\", \"gw\", \"gy\", \"hk\", \"hm\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"ie\", \"il\", \"im\", \"in\", \"io\", \"iq\", \"ir\", \"is\", \"it\", \"je\", \"jm\", \"jo\", \"jp\", \"ke\", \"kg\", \"kh\", \"ki\", \"km\", \"kn\", \"kp\", \"kr\", \"kw\", \"ky\", \"kz\", \"la\", \"lb\", \"lc\", \"li\", \"lk\", \"lr\", \"ls\", \"lt\", \"lu\", \"lv\", \"ly\", \"ma\", \"mc\", \"md\", \"me\", \"mf\", \"mg\", \"mh\", \"mk\", \"ml\", \"mm\", \"mn\", \"mo\",\n-                    \"mp\", \"mq\", \"mr\", \"ms\", \"mt\", \"mu\", \"mv\", \"mw\", \"mx\", \"my\", \"mz\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"ni\", \"nl\", \"no\", \"np\", \"nr\", \"nu\", \"nz\", \"om\", \"pa\", \"pe\", \"pf\", \"pg\", \"ph\", \"pk\", \"pl\", \"pm\", \"pn\", \"pr\", \"ps\", \"pt\", \"pw\", \"py\", \"qa\", \"re\", \"ro\", \"rs\", \"ru\", \"rw\", \"sa\", \"sb\", \"sc\", \"sd\", \"se\", \"sg\", \"sh\", \"si\", \"sj\", \"sk\", \"sl\", \"sm\", \"sn\", \"so\", \"sr\", \"ss\", \"st\", \"sv\", \"sx\", \"sy\", \"sz\", \"tc\", \"td\", \"tf\", \"tg\", \"th\", \"tj\", \"tk\", \"tl\", \"tm\", \"tn\", \"to\",\n-                    \"tr\", \"tt\", \"tv\", \"tw\", \"tz\", \"ua\", \"ug\", \"um\", \"us\", \"uy\", \"uz\", \"va\", \"vc\", \"ve\", \"vg\", \"vi\", \"vn\", \"vu\", \"wf\", \"ws\", \"ye\", \"yt\", \"za\", \"zm\", \"zw\")\n-            .collect(Collectors.toCollection(HashSet<String>::new));;\n-\n-    public enum MetricType {\n-\n-        VIEWS_TOTAL(\"viewsTotal\"),\n-        VIEWS_TOTAL_REGULAR(\"viewsTotalRegular\"),\n-        VIEWS_TOTAL_MACHINE(\"viewsTotalMachine\"),\n-        VIEWS_UNIQUE(\"viewsUnique\"),\n-        VIEWS_UNIQUE_REGULAR(\"viewsUniqueRegular\"),\n-        VIEWS_UNIQUE_MACHINE(\"viewsUniqueMachine\"),\n-        DOWNLOADS_TOTAL(\"downloadsTotal\"),\n-        DOWNLOADS_TOTAL_REGULAR(\"downloadsTotalRegular\"),\n-        DOWNLOADS_TOTAL_MACHINE(\"downloadsTotalMachine\"),\n-        DOWNLOADS_UNIQUE(\"downloadsUnique\"),\n-        DOWNLOADS_UNIQUE_REGULAR(\"downloadsUniqueRegular\"),\n-        DOWNLOADS_UNIQUE_MACHINE(\"downloadsUniqueMachine\"),\n-        // Technically, \"citations\" goes to a different API endpoint and database table.\n-        CITATIONS(\"citations\");\n-\n-        private final String text;\n-\n-        private MetricType(final String text) {\n-            this.text = text;\n-        }\n+  public static final String LOG_HEADER =\n+    \"#Fields: event_time\tclient_ip\tsession_cookie_id\tuser_cookie_id\tuser_id\trequest_url\tidentifier\tfilename\tsize\tuser-agent\ttitle\tpublisher\tpublisher_id\tauthors\tpublication_date\tversion\tother_id\ttarget_url\tpublication_year\\n\";\n \n-        public static MetricType fromString(String text) {\n-            if (text != null) {\n-                for (MetricType metricType : MetricType.values()) {\n-                    if (text.equals(metricType.text)) {\n-                        return metricType;\n-                    }\n-                }\n-            }\n-            throw new IllegalArgumentException(\"MetricType must be one of these values: \" + getMetricNameList() + \".\");\n-        }\n-        \n-        private static List<String> getMetricNameList() {\n-           ArrayList<String> names = new ArrayList<String>();\n-           for(MetricType mt: MetricType.values()) {\n-               names.add(mt.text);\n-           }\n-            return names;\n-        }\n+  //ISO 3166 Country codes as used by Geomind Geolite2 database in counter-processor\n+  @Transient\n+  private static Set<String> validCountryCodes = Stream\n+    .of(\"a1\", \"a2\", \"o1\", \"ad\", \"ae\", \"af\", \"ag\", \"ai\", \"al\", \"am\", \"ao\", \"ap\", \"aq\", \"ar\", \"as\", \"at\", \"au\", \"aw\",\n+      \"ax\", \"az\", \"ba\", \"bb\", \"bd\", \"be\", \"bf\", \"bg\", \"bh\", \"bi\", \"bj\", \"bl\", \"bm\", \"bn\", \"bo\", \"bq\", \"br\", \"bs\", \"bt\",\n+      \"bv\", \"bw\", \"by\", \"bz\", \"ca\", \"cc\", \"cd\", \"cf\", \"cg\", \"ch\", \"ci\", \"ck\", \"cl\", \"cm\", \"cn\", \"co\", \"cr\", \"cu\", \"cv\",\n+      \"cw\", \"cx\", \"cy\", \"cz\", \"de\", \"dj\", \"dk\", \"dm\", \"do\", \"dz\", \"ec\", \"ee\", \"eg\", \"eh\", \"er\", \"es\", \"et\", \"eu\", \"fi\",\n+      \"fj\", \"fk\",\n+      \"fm\", \"fo\", \"fr\", \"ga\", \"gb\", \"gd\", \"ge\", \"gf\", \"gg\", \"gh\", \"gi\", \"gl\", \"gm\", \"gn\", \"gp\", \"gq\", \"gr\", \"gs\", \"gt\",\n+      \"gu\", \"gw\", \"gy\", \"hk\", \"hm\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"ie\", \"il\", \"im\", \"in\", \"io\", \"iq\", \"ir\", \"is\", \"it\",\n+      \"je\", \"jm\", \"jo\", \"jp\", \"ke\", \"kg\", \"kh\", \"ki\", \"km\", \"kn\", \"kp\", \"kr\", \"kw\", \"ky\", \"kz\", \"la\", \"lb\", \"lc\", \"li\",\n+      \"lk\", \"lr\", \"ls\", \"lt\", \"lu\", \"lv\", \"ly\", \"ma\", \"mc\", \"md\", \"me\", \"mf\", \"mg\", \"mh\", \"mk\", \"ml\", \"mm\", \"mn\", \"mo\",\n+      \"mp\", \"mq\", \"mr\", \"ms\", \"mt\", \"mu\", \"mv\", \"mw\", \"mx\", \"my\", \"mz\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"ni\", \"nl\", \"no\",\n+      \"np\", \"nr\", \"nu\", \"nz\", \"om\", \"pa\", \"pe\", \"pf\", \"pg\", \"ph\", \"pk\", \"pl\", \"pm\", \"pn\", \"pr\", \"ps\", \"pt\", \"pw\", \"py\",\n+      \"qa\", \"re\", \"ro\", \"rs\", \"ru\", \"rw\", \"sa\", \"sb\", \"sc\", \"sd\", \"se\", \"sg\", \"sh\", \"si\", \"sj\", \"sk\", \"sl\", \"sm\", \"sn\",\n+      \"so\", \"sr\", \"ss\", \"st\", \"sv\", \"sx\", \"sy\", \"sz\", \"tc\", \"td\", \"tf\", \"tg\", \"th\", \"tj\", \"tk\", \"tl\", \"tm\", \"tn\", \"to\",\n+      \"tr\", \"tt\", \"tv\", \"tw\", \"tz\", \"ua\", \"ug\", \"um\", \"us\", \"uy\", \"uz\", \"va\", \"vc\", \"ve\", \"vg\", \"vi\", \"vn\", \"vu\", \"wf\",\n+      \"ws\", \"ye\", \"yt\", \"za\", \"zm\", \"zw\")\n+    .collect(Collectors.toCollection(HashSet<String>::new));\n+  ;\n \n-        @Override\n-        public String toString() {\n-            switch (this) {\n-            case DOWNLOADS_TOTAL:\n-                return (MetricType.DOWNLOADS_TOTAL_MACHINE + \" + \" + MetricType.DOWNLOADS_TOTAL_REGULAR);\n-            case VIEWS_TOTAL:\n-                return (MetricType.VIEWS_TOTAL_MACHINE + \" + \" + MetricType.VIEWS_TOTAL_REGULAR);\n-            case DOWNLOADS_UNIQUE:\n-                return (MetricType.DOWNLOADS_UNIQUE_MACHINE + \" + \" + MetricType.DOWNLOADS_UNIQUE_REGULAR);\n-            case VIEWS_UNIQUE:\n-                return (MetricType.VIEWS_UNIQUE_MACHINE + \" + \" + MetricType.VIEWS_UNIQUE_REGULAR);\n-            default:\n-                return text;\n-            }\n-        }\n+  public enum MetricType {\n+\n+    VIEWS_TOTAL(\"viewsTotal\"),\n+    VIEWS_TOTAL_REGULAR(\"viewsTotalRegular\"),\n+    VIEWS_TOTAL_MACHINE(\"viewsTotalMachine\"),\n+    VIEWS_UNIQUE(\"viewsUnique\"),\n+    VIEWS_UNIQUE_REGULAR(\"viewsUniqueRegular\"),\n+    VIEWS_UNIQUE_MACHINE(\"viewsUniqueMachine\"),\n+    DOWNLOADS_TOTAL(\"downloadsTotal\"),\n+    DOWNLOADS_TOTAL_REGULAR(\"downloadsTotalRegular\"),\n+    DOWNLOADS_TOTAL_MACHINE(\"downloadsTotalMachine\"),\n+    DOWNLOADS_UNIQUE(\"downloadsUnique\"),\n+    DOWNLOADS_UNIQUE_REGULAR(\"downloadsUniqueRegular\"),\n+    DOWNLOADS_UNIQUE_MACHINE(\"downloadsUniqueMachine\"),\n+    // Technically, \"citations\" goes to a different API endpoint and database table.\n+    CITATIONS(\"citations\");\n+\n+    private final String text;\n+\n+    private MetricType(final String text) {\n+      this.text = text;\n     }\n \n-    static List<DatasetMetrics> parseSushiReport(JsonObject report) {\n-        List<DatasetMetrics> datasetMetrics = new ArrayList<>();\n-        JsonArray reportDatasets = report.getJsonArray(\"report_datasets\");\n-        for (JsonValue reportDataset : reportDatasets) {\n-            // TODO: Populate each DatasetMetrics object properly once that entity has settled down.\n-            //Done in MakeDataCountServiceBean because access to the Dataset Service Bean is required\n-            datasetMetrics.add(new DatasetMetrics());\n+    public static MetricType fromString(String text) {\n+      if (text != null) {\n+        for (MetricType metricType : MetricType.values()) {\n+          if (text.equals(metricType.text)) {\n+            return metricType;\n+          }\n         }\n-        return datasetMetrics;\n+      }\n+      throw new IllegalArgumentException(\"MetricType must be one of these values: \" + getMetricNameList() + \".\");\n     }\n \n-    public static List<DatasetExternalCitations> parseCitations(JsonObject report) {\n-        List<DatasetExternalCitations> datasetExternalCitations = new ArrayList<>();\n-        JsonArray citations = report.getJsonArray(\"data\");\n-        for (JsonValue citationValue : citations) {\n-            JsonObject citation = (JsonObject) citationValue;\n-            String citedByDoi = citation.getJsonObject(\"attributes\").getString(\"subj-id\");\n-            String occurredAtDate = citation.getJsonObject(\"attributes\").getString(\"occurred-at\");\n-            System.out.println(\"cited by \" + citedByDoi + \" at \" + occurredAtDate);\n-            datasetExternalCitations.add(new DatasetExternalCitations());\n-        }\n-        return datasetExternalCitations;\n+    private static List<String> getMetricNameList() {\n+      ArrayList<String> names = new ArrayList<String>();\n+      for (MetricType mt : MetricType.values()) {\n+        names.add(mt.text);\n+      }\n+      return names;\n     }\n-    \n-    \n-    //counter-processor sushi report uses lower case, so standardizing on that for storage\n-    public static boolean isValidCountryCode(String code) {\n-        return validCountryCodes.contains(code.toLowerCase());\n+\n+    @Override\n+    public String toString() {\n+      switch (this) {\n+        case DOWNLOADS_TOTAL:\n+          return (MetricType.DOWNLOADS_TOTAL_MACHINE + \" + \" + MetricType.DOWNLOADS_TOTAL_REGULAR);\n+        case VIEWS_TOTAL:\n+          return (MetricType.VIEWS_TOTAL_MACHINE + \" + \" + MetricType.VIEWS_TOTAL_REGULAR);\n+        case DOWNLOADS_UNIQUE:\n+          return (MetricType.DOWNLOADS_UNIQUE_MACHINE + \" + \" + MetricType.DOWNLOADS_UNIQUE_REGULAR);\n+        case VIEWS_UNIQUE:\n+          return (MetricType.VIEWS_UNIQUE_MACHINE + \" + \" + MetricType.VIEWS_UNIQUE_REGULAR);\n+        default:\n+          return text;\n+      }\n+    }\n+  }\n+\n+  static List<DatasetMetrics> parseSushiReport(JsonObject report) {\n+    List<DatasetMetrics> datasetMetrics = new ArrayList<>();\n+    JsonArray reportDatasets = report.getJsonArray(\"report_datasets\");\n+    for (JsonValue reportDataset : reportDatasets) {\n+      // TODO: Populate each DatasetMetrics object properly once that entity has settled down.\n+      //Done in MakeDataCountServiceBean because access to the Dataset Service Bean is required\n+      datasetMetrics.add(new DatasetMetrics());\n     }\n+    return datasetMetrics;\n+  }\n+\n+  public static List<DatasetExternalCitations> parseCitations(JsonObject report) {\n+    List<DatasetExternalCitations> datasetExternalCitations = new ArrayList<>();\n+    JsonArray citations = report.getJsonArray(\"data\");\n+    for (JsonValue citationValue : citations) {\n+      JsonObject citation = (JsonObject) citationValue;\n+      String citedByDoi = citation.getJsonObject(\"attributes\").getString(\"subj-id\");\n+      String occurredAtDate = citation.getJsonObject(\"attributes\").getString(\"occurred-at\");\n+      System.out.println(\"cited by \" + citedByDoi + \" at \" + occurredAtDate);\n+      datasetExternalCitations.add(new DatasetExternalCitations());\n+    }\n+    return datasetExternalCitations;\n+  }\n+\n+\n+  //counter-processor sushi report uses lower case, so standardizing on that for storage\n+  public static boolean isValidCountryCode(String code) {\n+    return validCountryCodes.contains(code.toLowerCase());\n+  }\n \n \n }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}