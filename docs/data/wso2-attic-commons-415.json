{
    "project_name": "wso2-attic-commons",
    "error_id": "415",
    "information": {
        "errors": [
            {
                "line": "491",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            session = sessionFactory.getCurrentSession();\n            session.beginTransaction();\n            List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\" + rmdSequenceID).list();\n            session.getTransaction().commit();\n            return numbers;\n        } catch (HibernateException e) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/415/HibernatePersistenceManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/415/HibernatePersistenceManager.java\nindex 88cd74c692a..b5248fdb7cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/415/HibernatePersistenceManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/415/HibernatePersistenceManager.java\n@@ -488,8 +488,9 @@ public class HibernatePersistenceManager implements PersistenceManager {\n         try {\n             session = sessionFactory.getCurrentSession();\n             session.beginTransaction();\n-            List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\" + rmdSequenceID).list();\n-            session.getTransaction().commit();\n+            List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\"\n+            + rmdSequenceID).list();\n+             session.getTransaction().commit();\n             return numbers;\n         } catch (HibernateException e) {\n             if (session.getTransaction().isActive()) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/415/HibernatePersistenceManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/415/HibernatePersistenceManager.java\nindex 88cd74c692a..8f8cbf6cbb5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/415/HibernatePersistenceManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/415/HibernatePersistenceManager.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.wso2.mercury.persistence.hibernate;\n \n import org.wso2.mercury.persistence.PersistenceManager;\n@@ -40,649 +41,649 @@ import java.util.Iterator;\n \n public class HibernatePersistenceManager implements PersistenceManager {\n \n-    public static final String HIBERNATE_CONNECTION_DRIVER_CLASS = \"hibernate.connection.driver_class\";\n-    public static final String HIBERNATE_CONNECTION_URL = \"hibernate.connection.url\";\n-    public static final String HIBERNATE_CONNECTION_USERNAME = \"hibernate.connection.username\";\n-    public static final String HIBERNATE_CONNECTION_PASSWORD = \"hibernate.connection.password\";\n-    public static final String HIBERNATE_CONNECTION_POOL_SIZE = \"hibernate.connection.pool_size\";\n-    public static final String HIBERNATE_CURRENT_SESSION_CONTEXT_CLASS = \"hibernate.current_session_context_class\";\n-    public static final String HIBERNATE_DIALECT = \"hibernate.dialect\";\n-\n-    private static Log log = LogFactory.getLog(HibernatePersistenceManager.class);\n-\n-    // session factory used to handle persistence\n-    private SessionFactory sessionFactory;\n-\n-    public HibernatePersistenceManager(Configuration configuration) {\n-        this.sessionFactory = configuration.buildSessionFactory();\n-    }\n-\n-    public HibernatePersistenceManager(AxisConfiguration axisConfiguration) {\n-\n-        Configuration configuration = new Configuration();\n-        setProperty(configuration, HIBERNATE_CONNECTION_DRIVER_CLASS, axisConfiguration);\n-        setProperty(configuration, HIBERNATE_CONNECTION_URL, axisConfiguration);\n-        setProperty(configuration, HIBERNATE_CONNECTION_USERNAME, axisConfiguration);\n-        setProperty(configuration, HIBERNATE_CONNECTION_PASSWORD, axisConfiguration);\n-        setProperty(configuration, HIBERNATE_CONNECTION_POOL_SIZE, axisConfiguration);\n-        setProperty(configuration, HIBERNATE_CURRENT_SESSION_CONTEXT_CLASS, axisConfiguration);\n-        setProperty(configuration, HIBERNATE_DIALECT, axisConfiguration);\n+  public static final String HIBERNATE_CONNECTION_DRIVER_CLASS = \"hibernate.connection.driver_class\";\n+  public static final String HIBERNATE_CONNECTION_URL = \"hibernate.connection.url\";\n+  public static final String HIBERNATE_CONNECTION_USERNAME = \"hibernate.connection.username\";\n+  public static final String HIBERNATE_CONNECTION_PASSWORD = \"hibernate.connection.password\";\n+  public static final String HIBERNATE_CONNECTION_POOL_SIZE = \"hibernate.connection.pool_size\";\n+  public static final String HIBERNATE_CURRENT_SESSION_CONTEXT_CLASS = \"hibernate.current_session_context_class\";\n+  public static final String HIBERNATE_DIALECT = \"hibernate.dialect\";\n+\n+  private static Log log = LogFactory.getLog(HibernatePersistenceManager.class);\n+\n+  // session factory used to handle persistence\n+  private SessionFactory sessionFactory;\n+\n+  public HibernatePersistenceManager(Configuration configuration) {\n+    this.sessionFactory = configuration.buildSessionFactory();\n+  }\n+\n+  public HibernatePersistenceManager(AxisConfiguration axisConfiguration) {\n+\n+    Configuration configuration = new Configuration();\n+    setProperty(configuration, HIBERNATE_CONNECTION_DRIVER_CLASS, axisConfiguration);\n+    setProperty(configuration, HIBERNATE_CONNECTION_URL, axisConfiguration);\n+    setProperty(configuration, HIBERNATE_CONNECTION_USERNAME, axisConfiguration);\n+    setProperty(configuration, HIBERNATE_CONNECTION_PASSWORD, axisConfiguration);\n+    setProperty(configuration, HIBERNATE_CONNECTION_POOL_SIZE, axisConfiguration);\n+    setProperty(configuration, HIBERNATE_CURRENT_SESSION_CONTEXT_CLASS, axisConfiguration);\n+    setProperty(configuration, HIBERNATE_DIALECT, axisConfiguration);\n //        configuration.setProperty(\"hibernate.show_sql\",\"true\");\n //        configuration.setProperty(\"hibernate.hbm2ddl.auto\",\"create\");\n-        configuration.addResource(\"org/wso2/mercury/persistence/hibernate/rm.hbm.xml\");\n-\n-        this.sessionFactory = configuration.buildSessionFactory();\n-    }\n-\n-    private void setProperty(Configuration configuration,\n-                             String parameterName,\n-                             AxisConfiguration axisConfiguration){\n-          Parameter parameter = axisConfiguration.getParameter(parameterName);\n-          if (parameter != null){\n-              configuration.setProperty(parameterName, (String) parameter.getValue());\n-          } else {\n-              log.warn(\"Hibernate parameter \" + parameterName + \" has not been set\");\n-          }\n-    }\n-\n-    public void save(InternalKeyDto internalKeyDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(internalKeyDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the internal key object with key ==> \" +\n-                    internalKeyDto.getKey() + \" toAddress \" + internalKeyDto.getToAddress(), e);\n-            throw new PersistenceException(\"Can not save the internal key object with key ==> \" +\n-                    internalKeyDto.getKey() + \" toAddress \" + internalKeyDto.getToAddress(), e);\n-        }\n-\n-    }\n-\n-    public List getInternalKey(String key, String toAddress) throws PersistenceException {\n-\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List keys = session.createQuery(\"from InternalKeyDto where key='\" +\n-                    key + \"' and toAddress='\" + toAddress + \"'\").list();\n-            session.getTransaction().commit();\n-            return keys;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the internal key objects with key ==> \" +\n-                    key + \" toAddress \" + toAddress, e);\n-            throw new PersistenceException(\"Can not load the internal key objects with key ==> \" +\n-                    key + \" toAddress \" + toAddress, e);\n-        }\n-    }\n-\n-    public void save(RMSSequenceDto rmsSequenceDto, Axis2InfoDto axis2InfoDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(axis2InfoDto);\n-            // save enaged modules\n-            for (EngagedModuleDto engagedModuleDto: axis2InfoDto.getEngagedModules()){\n-                engagedModuleDto.setAxis2InfoID(axis2InfoDto.getId());\n-                session.save(engagedModuleDto);\n-            }\n-\n-            // save the properties\n-            for (PropertyDto propertyDto : axis2InfoDto.getProperties()){\n-                propertyDto.setAxis2InfoID(axis2InfoDto.getId());\n-                session.save(propertyDto);\n-            }\n-\n-            rmsSequenceDto.setAxis2InfoID(axis2InfoDto.getId());\n-            session.save(rmsSequenceDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the RMS Sequence object with state ==> \" +\n-                    rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n-            throw new PersistenceException(\"Can not save the RMS Sequence object with state ==> \" +\n-                    rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n-        }\n-    }\n-\n-    public void update(RMSSequenceDto rmsSequenceDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.update(rmsSequenceDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not update the RMS Sequence object with state ==> \" +\n-                    rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n-            throw new PersistenceException(\"Can not update the RMS Sequence object with state ==> \" +\n-                    rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n-        }\n-    }\n-\n-    public List getRMSSquenceWithInternalKey(long internalKeyID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List keys = session.createQuery(\"from RMSSequenceDto where internalKeyID=\" +\n-                    internalKeyID).list();\n-            session.getTransaction().commit();\n-            return keys;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the RMSSeqence objects with internal key ==> \" +\n-                    internalKeyID, e);\n-            throw new PersistenceException(\"Can not load the RMSSeqence objects with internal key ==> \" +\n-                    internalKeyID, e);\n-        }\n-    }\n-\n-    public RMSSequenceDto getRMSSquenceWithID(long id) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            RMSSequenceDto rmsSequenceDto =\n-                    (RMSSequenceDto) session.load(RMSSequenceDto.class, id,LockMode.READ);\n-            session.getTransaction().commit();\n-            return rmsSequenceDto;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the RMSSeqence objects with id ==> \" + id, e);\n-            throw new PersistenceException(\"Can not load the RMSSeqence objects with id ==> \" +\n-                    id, e);\n-        }\n-    }\n-\n-    public void save(RMSMessageDto rmsMessageDto,\n-                     RMSSequenceDto rmsSequenceDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(rmsMessageDto);\n-            session.update(rmsSequenceDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the RMSMessage object with message number ==> \" +\n-                    rmsMessageDto.getMessageNumber(), e);\n-            throw new PersistenceException(\"Can not save the RMSMessage object with message number ==> \" +\n-                    rmsMessageDto.getMessageNumber(), e);\n-        }\n-    }\n-\n-    public void updateMessagesAsSend(Set acknowledgedMessageDtos, RMSSequenceDto rmsSequenceDto)\n-            throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            for (Iterator iter = acknowledgedMessageDtos.iterator();iter.hasNext();){\n-                session.update(iter.next());\n-            }\n-            session.update(rmsSequenceDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not update the RMSMessageDtos \", e);\n-            throw new PersistenceException(\"Can not update the RMSMessageDtos \", e);\n-        }\n-    }\n-\n-    public RMSMessageDto getRMSMessageWithSequenceID(String sequenceID) throws PersistenceException {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    //TODO: load only the not send messages\n-    public List getRMSMessagesWithRMSSequenceID(long rmsSequenceID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List keys = session.createQuery(\"from RMSMessageDto where rmsSequenceID=\" + rmsSequenceID).list();\n-            session.getTransaction().commit();\n-            return keys;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the RMSMessage objects with rms Sequces key ==> \" +\n-                    rmsSequenceID, e);\n-            throw new PersistenceException(\"Can not load the RMSMessage objects with rms Sequces key ==> \" +\n-                    rmsSequenceID, e);\n-        }\n-    }\n-\n-    public void update(RMSMessageDto rmsMessageDto) throws PersistenceException {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    public void save(AcknowledgmentDto acknowledgmentsDto) throws PersistenceException {\n-        //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    public void save(RMDSequenceDto rmdSequenceDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(rmdSequenceDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the RMD Sequence object with state ==> \" +\n-                    rmdSequenceDto.getState() + \" Ackto address \" + rmdSequenceDto.getAcksTo(), e);\n-            throw new PersistenceException(\"Can not save the RMD Sequence object with state ==> \" +\n-                    rmdSequenceDto.getState() + \" Ackto address \" + rmdSequenceDto.getAcksTo(), e);\n-        }\n-    }\n-\n-    public void save(InvokerBufferDto invokerBufferDto,\n-                     RMDSequenceDto rmdSequenceDto,\n-                     Axis2InfoDto axis2InfoDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(axis2InfoDto);\n-            // save the properties\n+    configuration.addResource(\"org/wso2/mercury/persistence/hibernate/rm.hbm.xml\");\n+\n+    this.sessionFactory = configuration.buildSessionFactory();\n+  }\n+\n+  private void setProperty(Configuration configuration,\n+                           String parameterName,\n+                           AxisConfiguration axisConfiguration) {\n+    Parameter parameter = axisConfiguration.getParameter(parameterName);\n+    if (parameter != null) {\n+      configuration.setProperty(parameterName, (String) parameter.getValue());\n+    } else {\n+      log.warn(\"Hibernate parameter \" + parameterName + \" has not been set\");\n+    }\n+  }\n+\n+  public void save(InternalKeyDto internalKeyDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(internalKeyDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the internal key object with key ==> \" +\n+        internalKeyDto.getKey() + \" toAddress \" + internalKeyDto.getToAddress(), e);\n+      throw new PersistenceException(\"Can not save the internal key object with key ==> \" +\n+        internalKeyDto.getKey() + \" toAddress \" + internalKeyDto.getToAddress(), e);\n+    }\n+\n+  }\n+\n+  public List getInternalKey(String key, String toAddress) throws PersistenceException {\n+\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List keys = session.createQuery(\"from InternalKeyDto where key='\" +\n+        key + \"' and toAddress='\" + toAddress + \"'\").list();\n+      session.getTransaction().commit();\n+      return keys;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the internal key objects with key ==> \" +\n+        key + \" toAddress \" + toAddress, e);\n+      throw new PersistenceException(\"Can not load the internal key objects with key ==> \" +\n+        key + \" toAddress \" + toAddress, e);\n+    }\n+  }\n+\n+  public void save(RMSSequenceDto rmsSequenceDto, Axis2InfoDto axis2InfoDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(axis2InfoDto);\n+      // save enaged modules\n+      for (EngagedModuleDto engagedModuleDto : axis2InfoDto.getEngagedModules()) {\n+        engagedModuleDto.setAxis2InfoID(axis2InfoDto.getId());\n+        session.save(engagedModuleDto);\n+      }\n+\n+      // save the properties\n+      for (PropertyDto propertyDto : axis2InfoDto.getProperties()) {\n+        propertyDto.setAxis2InfoID(axis2InfoDto.getId());\n+        session.save(propertyDto);\n+      }\n+\n+      rmsSequenceDto.setAxis2InfoID(axis2InfoDto.getId());\n+      session.save(rmsSequenceDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the RMS Sequence object with state ==> \" +\n+        rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n+      throw new PersistenceException(\"Can not save the RMS Sequence object with state ==> \" +\n+        rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n+    }\n+  }\n+\n+  public void update(RMSSequenceDto rmsSequenceDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.update(rmsSequenceDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not update the RMS Sequence object with state ==> \" +\n+        rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n+      throw new PersistenceException(\"Can not update the RMS Sequence object with state ==> \" +\n+        rmsSequenceDto.getState() + \" toAddress \" + rmsSequenceDto.getEndPointAddress(), e);\n+    }\n+  }\n+\n+  public List getRMSSquenceWithInternalKey(long internalKeyID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List keys = session.createQuery(\"from RMSSequenceDto where internalKeyID=\" +\n+        internalKeyID).list();\n+      session.getTransaction().commit();\n+      return keys;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the RMSSeqence objects with internal key ==> \" +\n+        internalKeyID, e);\n+      throw new PersistenceException(\"Can not load the RMSSeqence objects with internal key ==> \" +\n+        internalKeyID, e);\n+    }\n+  }\n+\n+  public RMSSequenceDto getRMSSquenceWithID(long id) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      RMSSequenceDto rmsSequenceDto =\n+        (RMSSequenceDto) session.load(RMSSequenceDto.class, id, LockMode.READ);\n+      session.getTransaction().commit();\n+      return rmsSequenceDto;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the RMSSeqence objects with id ==> \" + id, e);\n+      throw new PersistenceException(\"Can not load the RMSSeqence objects with id ==> \" +\n+        id, e);\n+    }\n+  }\n+\n+  public void save(RMSMessageDto rmsMessageDto,\n+                   RMSSequenceDto rmsSequenceDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(rmsMessageDto);\n+      session.update(rmsSequenceDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the RMSMessage object with message number ==> \" +\n+        rmsMessageDto.getMessageNumber(), e);\n+      throw new PersistenceException(\"Can not save the RMSMessage object with message number ==> \" +\n+        rmsMessageDto.getMessageNumber(), e);\n+    }\n+  }\n+\n+  public void updateMessagesAsSend(Set acknowledgedMessageDtos, RMSSequenceDto rmsSequenceDto)\n+    throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      for (Iterator iter = acknowledgedMessageDtos.iterator(); iter.hasNext(); ) {\n+        session.update(iter.next());\n+      }\n+      session.update(rmsSequenceDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not update the RMSMessageDtos \", e);\n+      throw new PersistenceException(\"Can not update the RMSMessageDtos \", e);\n+    }\n+  }\n+\n+  public RMSMessageDto getRMSMessageWithSequenceID(String sequenceID) throws PersistenceException {\n+    return null;  //To change body of implemented methods use File | Settings | File Templates.\n+  }\n+\n+  //TODO: load only the not send messages\n+  public List getRMSMessagesWithRMSSequenceID(long rmsSequenceID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List keys = session.createQuery(\"from RMSMessageDto where rmsSequenceID=\" + rmsSequenceID).list();\n+      session.getTransaction().commit();\n+      return keys;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the RMSMessage objects with rms Sequces key ==> \" +\n+        rmsSequenceID, e);\n+      throw new PersistenceException(\"Can not load the RMSMessage objects with rms Sequces key ==> \" +\n+        rmsSequenceID, e);\n+    }\n+  }\n+\n+  public void update(RMSMessageDto rmsMessageDto) throws PersistenceException {\n+    //To change body of implemented methods use File | Settings | File Templates.\n+  }\n+\n+  public void save(AcknowledgmentDto acknowledgmentsDto) throws PersistenceException {\n+    //To change body of implemented methods use File | Settings | File Templates.\n+  }\n+\n+  public void save(RMDSequenceDto rmdSequenceDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(rmdSequenceDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the RMD Sequence object with state ==> \" +\n+        rmdSequenceDto.getState() + \" Ackto address \" + rmdSequenceDto.getAcksTo(), e);\n+      throw new PersistenceException(\"Can not save the RMD Sequence object with state ==> \" +\n+        rmdSequenceDto.getState() + \" Ackto address \" + rmdSequenceDto.getAcksTo(), e);\n+    }\n+  }\n+\n+  public void save(InvokerBufferDto invokerBufferDto,\n+                   RMDSequenceDto rmdSequenceDto,\n+                   Axis2InfoDto axis2InfoDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(axis2InfoDto);\n+      // save the properties\n //            for (PropertyDto propertyDto : axis2InfoDto.getProperties()) {\n //                propertyDto.setAxis2InfoID(axis2InfoDto.getId());\n //                session.save(propertyDto);\n //            }\n \n-            rmdSequenceDto.setAxis2InfoID(axis2InfoDto.getId());\n-            session.save(rmdSequenceDto);\n-            invokerBufferDto.setRmdSequenceID(rmdSequenceDto.getId());\n-            session.save(invokerBufferDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the Invoker Buffer object with state ==> \" +\n-                    invokerBufferDto.getState(), e);\n-            throw new PersistenceException(\"Can not save the Invoker Buffer object with state ==> \" +\n-                    invokerBufferDto.getState(), e);\n-        }\n-    }\n-\n-    public void save(RMDMessageDto rmdMessageDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(rmdMessageDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the RMD Message object with message number ==> \" +\n-                    rmdMessageDto.getMessageNumber(), e);\n-            throw new PersistenceException(\"Can not save the RMD Message object with message number ==> \" +\n-                    rmdMessageDto.getMessageNumber(), e);\n-        }\n-    }\n-\n-    public void save(SequenceReceivedNumberDto sequenceReceivedNumberDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(sequenceReceivedNumberDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the sequence received number object with message number ==> \" +\n-                    sequenceReceivedNumberDto.getNumber(), e);\n-            throw new PersistenceException(\"Can not save the sequence received number object with message number ==> \" +\n-                    sequenceReceivedNumberDto.getNumber(), e);\n-        }\n-    }\n-\n-    public void save(BufferReceivedNumberDto bufferReceivedNumberDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.save(bufferReceivedNumberDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the buffer received number object with message number ==> \" +\n-                    bufferReceivedNumberDto.getNumber(), e);\n-            throw new PersistenceException(\"Can not save the buffer received number object with message number ==> \" +\n-                    bufferReceivedNumberDto.getNumber(), e);\n-        }\n-    }\n-\n-    public void updateMessageDetails(RMDSequenceDto rmdSequenceDto,\n-                                     InvokerBufferDto invokerBufferDto,\n-                                     SequenceReceivedNumberDto sequenceReceivedNumberDto,\n-                                     BufferReceivedNumberDto bufferReceivedNumberDto,\n-                                     RMDMessageDto rmdMessageDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.update(rmdSequenceDto);\n-            session.update(invokerBufferDto);\n-            session.save(sequenceReceivedNumberDto);\n-            session.save(bufferReceivedNumberDto);\n-            session.save(rmdMessageDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not add the new message ==> \" +\n-                    bufferReceivedNumberDto.getNumber(), e);\n-            throw new PersistenceException(\"Can not add the new message ==> \" +\n-                    bufferReceivedNumberDto.getNumber(), e);\n-        }\n-    }\n-\n-    public void update(InvokerBufferDto invokerBufferDto,\n-                       RMDSequenceDto rmdSequenceDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.update(rmdSequenceDto);\n-            session.update(invokerBufferDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the Invoker Buffer object with state ==> \" +\n-                    invokerBufferDto.getState(), e);\n-            throw new PersistenceException(\"Can not save the Invoker Buffer object with state ==> \" +\n-                    invokerBufferDto.getState(), e);\n-        }\n-    }\n-\n-     public void update(RMDMessageDto rmdMessageDto,\n-                       InvokerBufferDto invokerBufferDto) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            session.update(rmdMessageDto);\n-            session.update(invokerBufferDto);\n-            session.getTransaction().commit();\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not save the RMD Message object with message number ==> \" +\n-                    rmdMessageDto.getMessageNumber(), e);\n-            throw new PersistenceException(\"Can not save the RMD Message object with message number ==> \" +\n-                    rmdMessageDto.getMessageNumber(), e);\n-        }\n-    }\n-\n-    public RMDSequenceDto getRMDSequeceWithSequenceID(String sequenceID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List keys = session.createQuery(\"from RMDSequenceDto where sequenceID='\" + sequenceID + \"'\").list();\n-            session.getTransaction().commit();\n-            if (keys.size() != 1) {\n-                throw new PersistenceException(\"Either there are more than one RMD sequence for sequenceID \" +\n-                        \" ==> \" + sequenceID + \" or no sequences\");\n-            } else {\n-                return (RMDSequenceDto) keys.get(0);\n-            }\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the RMDSequenceDto objects with rmd Sequces key ==> \" +\n-                    sequenceID, e);\n-            throw new PersistenceException(\"Can not load the RMDSequenceDto objects with rmd Sequces key ==> \" +\n-                    sequenceID, e);\n-        }\n-    }\n-\n-    public List getSequenceReceivedNumbersWithRMDSequenceID(long rmdSequenceID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\" + rmdSequenceID).list();\n-            session.getTransaction().commit();\n-            return numbers;\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the SequenceReceivedNumberDto \" +\n-                    \"objects with rmd sequence id ==> \" + rmdSequenceID, e);\n-            throw new PersistenceException(\"Can not load the SequenceReceivedNumberDto \" +\n-                    \"objects with rmd sequence id ==> \" + rmdSequenceID, e);\n-        }\n-    }\n-\n-    public InvokerBufferDto getInvokerBufferWithRMDSequenceID(long rmdSequenceID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List invokerBufferObjects = session.createQuery(\"from InvokerBufferDto where rmdSequenceID=\"\n-                    + rmdSequenceID).list();\n-            session.getTransaction().commit();\n-            if (invokerBufferObjects.size() != 1) {\n-                throw new PersistenceException(\"Either there are more than one Invoker Buffer for rmdSequenceID \" +\n-                        \" ==> \" + rmdSequenceID + \" or no sequences\");\n-            } else {\n-                return (InvokerBufferDto) invokerBufferObjects.get(0);\n-            }\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the InvokerBufferDto objects with rms Sequces key id==> \" +\n-                    rmdSequenceID, e);\n-            throw new PersistenceException(\"Can not load the InvokerBufferDto objects with rms Sequces key id==> \" +\n-                    rmdSequenceID, e);\n-        }\n-    }\n-\n-    public List getBufferReceivedNumbersWithInvokerBufferID(long invokerBufferID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List numbers = session.createQuery(\"from BufferReceivedNumberDto where internalBufferID=\"\n-                    + invokerBufferID).list();\n-            session.getTransaction().commit();\n-            return numbers;\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the BufferReceivedNumberDto \" +\n-                    \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n-            throw new PersistenceException(\"Can not load the BufferReceivedNumberDto \" +\n-                    \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n-        }\n-    }\n-\n-    public List getRMDMessagesWithInvokerBufferID(long invokerBufferID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List numbers = session.createQuery(\"from RMDMessageDto where internalBufferID=\"\n-                    + invokerBufferID + \"and send=false\").list();\n-            session.getTransaction().commit();\n-            return numbers;\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the RMDMessageDto \" +\n-                    \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n-            throw new PersistenceException(\"Can not load the RMDMessageDto \" +\n-                    \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n-        }\n-    }\n-\n-    public List getNonTerminatedRMDSequences() throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List rmdSequences = session.createQuery(\"from RMDSequenceDto where state < 4\").list();\n-            session.getTransaction().commit();\n-            return rmdSequences;\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"from RMDSequenceDto where state < 4\", e);\n-            throw new PersistenceException(\"from RMDSequenceDto where state < 4\", e);\n-        }\n-    }\n-\n-    public List<RMSSequenceDto> getNonTerminatedRMSSequences() throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List<RMSSequenceDto> rmsSequences = session.createQuery(\"from RMSSequenceDto where state < 7\").list();\n-            session.getTransaction().commit();\n-            return rmsSequences;\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"from RMSSequenceDto where state < 7\", e);\n-            throw new PersistenceException(\"from RMSSequenceDto where state < 7\", e);\n-        }\n-    }\n-\n-    public Axis2InfoDto getAxis2InfoID(long id) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            Axis2InfoDto axis2InfoDto =\n-                    (Axis2InfoDto) session.load(Axis2InfoDto.class, id, LockMode.READ);\n-            session.getTransaction().commit();\n-            return axis2InfoDto;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the axis2InfoDto objects with id ==> \" + id, e);\n-            throw new PersistenceException(\"Can not load the axis2InfoDto objects with id ==> \" +\n-                    id, e);\n-        }\n-    }\n-\n-    public List<PropertyDto> getProperties(long axis2InfoID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List<PropertyDto> keys = session.createQuery(\"from PropertyDto where axis2InfoID=\" +\n-                    axis2InfoID ).list();\n-            session.getTransaction().commit();\n-            return keys;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the Property objects with axi2 Info ID ==> \" +\n-                    axis2InfoID, e);\n-            throw new PersistenceException(\"Can not load the Property objects with axis2 Info ID ==> \" +\n-                    axis2InfoID, e);\n-        }\n-    }\n-\n-    public List<EngagedModuleDto> getEngagedModules(long axis2InfoID) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            List<EngagedModuleDto> keys = session.createQuery(\"from EngagedModuleDto where axis2InfoID=\" +\n-                    axis2InfoID).list();\n-            session.getTransaction().commit();\n-            return keys;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the Engage Module objects with axi2 Info ID ==> \" +\n-                    axis2InfoID, e);\n-            throw new PersistenceException(\"Can not load the Engage Module objects with axis2 Info ID ==> \" +\n-                    axis2InfoID, e);\n-        }\n-    }\n-\n-    public InternalKeyDto getInternalKeyWithID(long id) throws PersistenceException {\n-        Session session = null;\n-        try {\n-            session = sessionFactory.getCurrentSession();\n-            session.beginTransaction();\n-            InternalKeyDto internalKeyDto =\n-                    (InternalKeyDto) session.load(InternalKeyDto.class, id, LockMode.READ);\n-            session.getTransaction().commit();\n-            return internalKeyDto;\n-\n-        } catch (HibernateException e) {\n-            if (session.getTransaction().isActive()) {\n-                session.getTransaction().rollback();\n-            }\n-            log.error(\"Can not load the InternalKey object with internal key id ==> \" +\n-                    id, e);\n-            throw new PersistenceException(\"Can not load the Internalkey object with internal key id==> \" +\n-                    id, e);\n-        }\n-    }\n+      rmdSequenceDto.setAxis2InfoID(axis2InfoDto.getId());\n+      session.save(rmdSequenceDto);\n+      invokerBufferDto.setRmdSequenceID(rmdSequenceDto.getId());\n+      session.save(invokerBufferDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the Invoker Buffer object with state ==> \" +\n+        invokerBufferDto.getState(), e);\n+      throw new PersistenceException(\"Can not save the Invoker Buffer object with state ==> \" +\n+        invokerBufferDto.getState(), e);\n+    }\n+  }\n+\n+  public void save(RMDMessageDto rmdMessageDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(rmdMessageDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the RMD Message object with message number ==> \" +\n+        rmdMessageDto.getMessageNumber(), e);\n+      throw new PersistenceException(\"Can not save the RMD Message object with message number ==> \" +\n+        rmdMessageDto.getMessageNumber(), e);\n+    }\n+  }\n+\n+  public void save(SequenceReceivedNumberDto sequenceReceivedNumberDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(sequenceReceivedNumberDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the sequence received number object with message number ==> \" +\n+        sequenceReceivedNumberDto.getNumber(), e);\n+      throw new PersistenceException(\"Can not save the sequence received number object with message number ==> \" +\n+        sequenceReceivedNumberDto.getNumber(), e);\n+    }\n+  }\n+\n+  public void save(BufferReceivedNumberDto bufferReceivedNumberDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.save(bufferReceivedNumberDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the buffer received number object with message number ==> \" +\n+        bufferReceivedNumberDto.getNumber(), e);\n+      throw new PersistenceException(\"Can not save the buffer received number object with message number ==> \" +\n+        bufferReceivedNumberDto.getNumber(), e);\n+    }\n+  }\n+\n+  public void updateMessageDetails(RMDSequenceDto rmdSequenceDto,\n+                                   InvokerBufferDto invokerBufferDto,\n+                                   SequenceReceivedNumberDto sequenceReceivedNumberDto,\n+                                   BufferReceivedNumberDto bufferReceivedNumberDto,\n+                                   RMDMessageDto rmdMessageDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.update(rmdSequenceDto);\n+      session.update(invokerBufferDto);\n+      session.save(sequenceReceivedNumberDto);\n+      session.save(bufferReceivedNumberDto);\n+      session.save(rmdMessageDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not add the new message ==> \" +\n+        bufferReceivedNumberDto.getNumber(), e);\n+      throw new PersistenceException(\"Can not add the new message ==> \" +\n+        bufferReceivedNumberDto.getNumber(), e);\n+    }\n+  }\n+\n+  public void update(InvokerBufferDto invokerBufferDto,\n+                     RMDSequenceDto rmdSequenceDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.update(rmdSequenceDto);\n+      session.update(invokerBufferDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the Invoker Buffer object with state ==> \" +\n+        invokerBufferDto.getState(), e);\n+      throw new PersistenceException(\"Can not save the Invoker Buffer object with state ==> \" +\n+        invokerBufferDto.getState(), e);\n+    }\n+  }\n+\n+  public void update(RMDMessageDto rmdMessageDto,\n+                     InvokerBufferDto invokerBufferDto) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      session.update(rmdMessageDto);\n+      session.update(invokerBufferDto);\n+      session.getTransaction().commit();\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not save the RMD Message object with message number ==> \" +\n+        rmdMessageDto.getMessageNumber(), e);\n+      throw new PersistenceException(\"Can not save the RMD Message object with message number ==> \" +\n+        rmdMessageDto.getMessageNumber(), e);\n+    }\n+  }\n+\n+  public RMDSequenceDto getRMDSequeceWithSequenceID(String sequenceID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List keys = session.createQuery(\"from RMDSequenceDto where sequenceID='\" + sequenceID + \"'\").list();\n+      session.getTransaction().commit();\n+      if (keys.size() != 1) {\n+        throw new PersistenceException(\"Either there are more than one RMD sequence for sequenceID \" +\n+          \" ==> \" + sequenceID + \" or no sequences\");\n+      } else {\n+        return (RMDSequenceDto) keys.get(0);\n+      }\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the RMDSequenceDto objects with rmd Sequces key ==> \" +\n+        sequenceID, e);\n+      throw new PersistenceException(\"Can not load the RMDSequenceDto objects with rmd Sequces key ==> \" +\n+        sequenceID, e);\n+    }\n+  }\n+\n+  public List getSequenceReceivedNumbersWithRMDSequenceID(long rmdSequenceID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\" + rmdSequenceID).list();\n+      session.getTransaction().commit();\n+      return numbers;\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the SequenceReceivedNumberDto \" +\n+        \"objects with rmd sequence id ==> \" + rmdSequenceID, e);\n+      throw new PersistenceException(\"Can not load the SequenceReceivedNumberDto \" +\n+        \"objects with rmd sequence id ==> \" + rmdSequenceID, e);\n+    }\n+  }\n+\n+  public InvokerBufferDto getInvokerBufferWithRMDSequenceID(long rmdSequenceID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List invokerBufferObjects = session.createQuery(\"from InvokerBufferDto where rmdSequenceID=\"\n+        + rmdSequenceID).list();\n+      session.getTransaction().commit();\n+      if (invokerBufferObjects.size() != 1) {\n+        throw new PersistenceException(\"Either there are more than one Invoker Buffer for rmdSequenceID \" +\n+          \" ==> \" + rmdSequenceID + \" or no sequences\");\n+      } else {\n+        return (InvokerBufferDto) invokerBufferObjects.get(0);\n+      }\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the InvokerBufferDto objects with rms Sequces key id==> \" +\n+        rmdSequenceID, e);\n+      throw new PersistenceException(\"Can not load the InvokerBufferDto objects with rms Sequces key id==> \" +\n+        rmdSequenceID, e);\n+    }\n+  }\n+\n+  public List getBufferReceivedNumbersWithInvokerBufferID(long invokerBufferID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List numbers = session.createQuery(\"from BufferReceivedNumberDto where internalBufferID=\"\n+        + invokerBufferID).list();\n+      session.getTransaction().commit();\n+      return numbers;\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the BufferReceivedNumberDto \" +\n+        \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n+      throw new PersistenceException(\"Can not load the BufferReceivedNumberDto \" +\n+        \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n+    }\n+  }\n+\n+  public List getRMDMessagesWithInvokerBufferID(long invokerBufferID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List numbers = session.createQuery(\"from RMDMessageDto where internalBufferID=\"\n+        + invokerBufferID + \"and send=false\").list();\n+      session.getTransaction().commit();\n+      return numbers;\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the RMDMessageDto \" +\n+        \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n+      throw new PersistenceException(\"Can not load the RMDMessageDto \" +\n+        \"objects with invoker buffer id ==> \" + invokerBufferID, e);\n+    }\n+  }\n+\n+  public List getNonTerminatedRMDSequences() throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List rmdSequences = session.createQuery(\"from RMDSequenceDto where state < 4\").list();\n+      session.getTransaction().commit();\n+      return rmdSequences;\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"from RMDSequenceDto where state < 4\", e);\n+      throw new PersistenceException(\"from RMDSequenceDto where state < 4\", e);\n+    }\n+  }\n+\n+  public List<RMSSequenceDto> getNonTerminatedRMSSequences() throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List<RMSSequenceDto> rmsSequences = session.createQuery(\"from RMSSequenceDto where state < 7\").list();\n+      session.getTransaction().commit();\n+      return rmsSequences;\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"from RMSSequenceDto where state < 7\", e);\n+      throw new PersistenceException(\"from RMSSequenceDto where state < 7\", e);\n+    }\n+  }\n+\n+  public Axis2InfoDto getAxis2InfoID(long id) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      Axis2InfoDto axis2InfoDto =\n+        (Axis2InfoDto) session.load(Axis2InfoDto.class, id, LockMode.READ);\n+      session.getTransaction().commit();\n+      return axis2InfoDto;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the axis2InfoDto objects with id ==> \" + id, e);\n+      throw new PersistenceException(\"Can not load the axis2InfoDto objects with id ==> \" +\n+        id, e);\n+    }\n+  }\n+\n+  public List<PropertyDto> getProperties(long axis2InfoID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List<PropertyDto> keys = session.createQuery(\"from PropertyDto where axis2InfoID=\" +\n+        axis2InfoID).list();\n+      session.getTransaction().commit();\n+      return keys;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the Property objects with axi2 Info ID ==> \" +\n+        axis2InfoID, e);\n+      throw new PersistenceException(\"Can not load the Property objects with axis2 Info ID ==> \" +\n+        axis2InfoID, e);\n+    }\n+  }\n+\n+  public List<EngagedModuleDto> getEngagedModules(long axis2InfoID) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      List<EngagedModuleDto> keys = session.createQuery(\"from EngagedModuleDto where axis2InfoID=\" +\n+        axis2InfoID).list();\n+      session.getTransaction().commit();\n+      return keys;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the Engage Module objects with axi2 Info ID ==> \" +\n+        axis2InfoID, e);\n+      throw new PersistenceException(\"Can not load the Engage Module objects with axis2 Info ID ==> \" +\n+        axis2InfoID, e);\n+    }\n+  }\n+\n+  public InternalKeyDto getInternalKeyWithID(long id) throws PersistenceException {\n+    Session session = null;\n+    try {\n+      session = sessionFactory.getCurrentSession();\n+      session.beginTransaction();\n+      InternalKeyDto internalKeyDto =\n+        (InternalKeyDto) session.load(InternalKeyDto.class, id, LockMode.READ);\n+      session.getTransaction().commit();\n+      return internalKeyDto;\n+\n+    } catch (HibernateException e) {\n+      if (session.getTransaction().isActive()) {\n+        session.getTransaction().rollback();\n+      }\n+      log.error(\"Can not load the InternalKey object with internal key id ==> \" +\n+        id, e);\n+      throw new PersistenceException(\"Can not load the Internalkey object with internal key id==> \" +\n+        id, e);\n+    }\n+  }\n \n }\n",
            "diff_size": 638
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "491",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/415/HibernatePersistenceManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/415/HibernatePersistenceManager.java\nindex 88cd74c692a..b5248fdb7cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/415/HibernatePersistenceManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/415/HibernatePersistenceManager.java\n@@ -488,8 +488,9 @@ public class HibernatePersistenceManager implements PersistenceManager {\n         try {\n             session = sessionFactory.getCurrentSession();\n             session.beginTransaction();\n-            List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\" + rmdSequenceID).list();\n-            session.getTransaction().commit();\n+            List numbers = session.createQuery(\"from SequenceReceivedNumberDto where rmdSequenceID=\"\n+            + rmdSequenceID).list();\n+             session.getTransaction().commit();\n             return numbers;\n         } catch (HibernateException e) {\n             if (session.getTransaction().isActive()) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}