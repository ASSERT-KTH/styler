{
    "project_name": "graphfoundation-ongdb",
    "error_id": "843",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/843/ClassByteCodeWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/843/ClassByteCodeWriter.java\nindex 35bec2c044c..45359c80376 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/843/ClassByteCodeWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/843/ClassByteCodeWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.objectweb.asm.ClassVisitor;\n@@ -50,91 +51,91 @@ import static org.objectweb.asm.Opcodes.V1_8;\n \n class ClassByteCodeWriter implements ClassEmitter\n {\n-    private final ClassWriter classWriter;\n-    private final ClassVisitor classVisitor;\n-    private final TypeReference type;\n-    private final Map<FieldReference,Expression> staticFields = new HashMap<>();\n-    private final TypeReference base;\n+  private final ClassWriter classWriter;\n+  private final ClassVisitor classVisitor;\n+  private final TypeReference type;\n+  private final Map<FieldReference, Expression> staticFields = new HashMap<>();\n+  private final TypeReference base;\n \n-    ClassByteCodeWriter( TypeReference type, TypeReference base, TypeReference[] interfaces )\n+  ClassByteCodeWriter(TypeReference type, TypeReference base, TypeReference[] interfaces)\n+  {\n+    this.classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);\n+    this.classVisitor = classWriter; // this separation is useful if we want to add intermediary visitors\n+    String[] iNames = new String[interfaces.length];\n+    for (int i = 0; i < interfaces.length; i++)\n     {\n-        this.classWriter = new ClassWriter( ClassWriter.COMPUTE_FRAMES );\n-        this.classVisitor = classWriter; // this separation is useful if we want to add intermediary visitors\n-        String[] iNames = new String[interfaces.length];\n-        for ( int i = 0; i < interfaces.length; i++ )\n-        {\n-            iNames[i] = byteCodeName( interfaces[i] );\n-        }\n-        classVisitor.visit( V1_8, ACC_PUBLIC + ACC_SUPER, byteCodeName( type ), signature( type ),\n-                byteCodeName( base ), iNames.length != 0 ? iNames : null );\n-        if ( base.isInnerClass() )\n-        {\n-            classVisitor.visitInnerClass( byteCodeName( base ), outerName( base ),\n-                    base.simpleName(), ACC_PUBLIC + ACC_STATIC );\n-        }\n-        this.type = type;\n-        this.base = base;\n+      iNames[i] = byteCodeName(interfaces[i]);\n     }\n-\n-    @Override\n-    public MethodEmitter method( MethodDeclaration signature )\n+    classVisitor.visit(V1_8, ACC_PUBLIC + ACC_SUPER, byteCodeName(type), signature(type),\n+        byteCodeName(base), iNames.length != 0 ? iNames : null);\n+    if (base.isInnerClass())\n     {\n-        return new MethodByteCodeEmitter( classVisitor, signature, base );\n+      classVisitor.visitInnerClass(byteCodeName(base), outerName(base),\n+          base.simpleName(), ACC_PUBLIC + ACC_STATIC);\n     }\n+    this.type = type;\n+    this.base = base;\n+  }\n \n-    @Override\n-    public void field( FieldReference field, Expression value )\n+  @Override\n+  public MethodEmitter method(MethodDeclaration signature)\n+  {\n+    return new MethodByteCodeEmitter(classVisitor, signature, base);\n+  }\n+\n+  @Override\n+  public void field(FieldReference field, Expression value)\n+  {\n+    //keep track of all static field->value, and initiate in <clinit> in done\n+    if (Modifier.isStatic(field.modifiers()) && value != null)\n     {\n-        //keep track of all static field->value, and initiate in <clinit> in done\n-        if ( Modifier.isStatic( field.modifiers() ) && value != null )\n-        {\n-            staticFields.put( field, value );\n-        }\n-        FieldVisitor fieldVisitor = classVisitor\n-                .visitField( field.modifiers(), field.name(), typeName( field.type() ), signature( field.type() ),\n-                        null );\n-        fieldVisitor.visitEnd();\n+      staticFields.put(field, value);\n     }\n+    FieldVisitor fieldVisitor = classVisitor\n+        .visitField(field.modifiers(), field.name(), typeName(field.type()), signature(field.type()),\n+            null);\n+    fieldVisitor.visitEnd();\n+  }\n \n-    @Override\n-    public void done()\n+  @Override\n+  public void done()\n+  {\n+    if (!staticFields.isEmpty())\n     {\n-        if ( !staticFields.isEmpty() )\n-        {\n-            MethodVisitor methodVisitor = classVisitor.visitMethod( ACC_STATIC, \"<clinit>\", \"()V\", null, null );\n-            ByteCodeExpressionVisitor expressionVisitor = new ByteCodeExpressionVisitor( methodVisitor );\n-            methodVisitor.visitCode();\n-            for ( Map.Entry<FieldReference,Expression> entry : staticFields.entrySet() )\n-            {\n-                FieldReference field = entry.getKey();\n-                Expression value = entry.getValue();\n-                value.accept( expressionVisitor );\n-                methodVisitor.visitFieldInsn( PUTSTATIC, byteCodeName( field.owner() ),\n-                        field.name(), typeName( field.type() ) );\n-            }\n-            methodVisitor.visitInsn( RETURN );\n-            methodVisitor.visitMaxs( 0, 0 );\n-            methodVisitor.visitEnd();\n-        }\n-        classVisitor.visitEnd();\n+      MethodVisitor methodVisitor = classVisitor.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n+      ByteCodeExpressionVisitor expressionVisitor = new ByteCodeExpressionVisitor(methodVisitor);\n+      methodVisitor.visitCode();\n+      for (Map.Entry<FieldReference, Expression> entry : staticFields.entrySet())\n+      {\n+        FieldReference field = entry.getKey();\n+        Expression value = entry.getValue();\n+        value.accept(expressionVisitor);\n+        methodVisitor.visitFieldInsn(PUTSTATIC, byteCodeName(field.owner()),\n+            field.name(), typeName(field.type()));\n+      }\n+      methodVisitor.visitInsn(RETURN);\n+      methodVisitor.visitMaxs(0, 0);\n+      methodVisitor.visitEnd();\n     }\n+    classVisitor.visitEnd();\n+  }\n \n-    ByteCodes toByteCodes()\n+  ByteCodes toByteCodes()\n+  {\n+    byte[] bytecode = classWriter.toByteArray();\n+    return new ByteCodes()\n     {\n-        byte[] bytecode = classWriter.toByteArray();\n-        return new ByteCodes()\n-        {\n-            @Override\n-            public String name()\n-            {\n-                return type.fullName();\n-            }\n+      @Override\n+      public String name()\n+      {\n+        return type.fullName();\n+      }\n \n-            @Override\n-            public ByteBuffer bytes()\n-            {\n-                return ByteBuffer.wrap( bytecode );\n-            }\n-        };\n-    }\n+      @Override\n+      public ByteBuffer bytes()\n+      {\n+        return ByteBuffer.wrap(bytecode);\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/843/ClassByteCodeWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/843/ClassByteCodeWriter.java\nindex 35bec2c044c..66f3d4d833f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/843/ClassByteCodeWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/843/ClassByteCodeWriter.java\n@@ -65,12 +65,10 @@ class ClassByteCodeWriter implements ClassEmitter\n         {\n             iNames[i] = byteCodeName( interfaces[i] );\n         }\n-        classVisitor.visit( V1_8, ACC_PUBLIC + ACC_SUPER, byteCodeName( type ), signature( type ),\n-                byteCodeName( base ), iNames.length != 0 ? iNames : null );\n-        if ( base.isInnerClass() )\n+        classVisitor.visit( V1_8, ACC_PUBLIC + ACC_SUPER, byteCodeName( type ), signature( type ), byteCodeName( base ), iNames.length != 0 ? iNames : null );\n+if ( base.isInnerClass() )\n         {\n-            classVisitor.visitInnerClass( byteCodeName( base ), outerName( base ),\n-                    base.simpleName(), ACC_PUBLIC + ACC_STATIC );\n+            classVisitor.visitInnerClass( byteCodeName( base ), outerName( base ), base.simpleName(), ACC_PUBLIC + ACC_STATIC );\n         }\n         this.type = type;\n         this.base = base;\n@@ -90,10 +88,9 @@ class ClassByteCodeWriter implements ClassEmitter\n         {\n             staticFields.put( field, value );\n         }\n-        FieldVisitor fieldVisitor = classVisitor\n-                .visitField( field.modifiers(), field.name(), typeName( field.type() ), signature( field.type() ),\n-                        null );\n-        fieldVisitor.visitEnd();\n+\n+FieldVisitor fieldVisitor = classVisitor.visitField( field.modifiers(), field.name(), typeName( field.type() ), signature( field.type() ), null );\n+fieldVisitor.visitEnd();\n     }\n \n     @Override\n@@ -109,8 +106,7 @@ class ClassByteCodeWriter implements ClassEmitter\n                 FieldReference field = entry.getKey();\n                 Expression value = entry.getValue();\n                 value.accept( expressionVisitor );\n-                methodVisitor.visitFieldInsn( PUTSTATIC, byteCodeName( field.owner() ),\n-                        field.name(), typeName( field.type() ) );\n+                methodVisitor.visitFieldInsn( PUTSTATIC, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n             }\n             methodVisitor.visitInsn( RETURN );\n             methodVisitor.visitMaxs( 0, 0 );\n@@ -137,4 +133,4 @@ class ClassByteCodeWriter implements ClassEmitter\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}