{
    "project_name": "neo4j-neo4j",
    "error_id": "650",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/650/IndexQueryHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/650/IndexQueryHelper.java\nindex adf5e348813..9575a6a7c45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/650/IndexQueryHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/650/IndexQueryHelper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import org.neo4j.internal.kernel.api.IndexQuery;\n@@ -32,47 +33,47 @@ public final class IndexQueryHelper\n     {\n     }\n \n-    public static IndexQuery exact( int propertyKeyId, Object value )\n+    public static IndexQuery exact(int propertyKeyId, Object value)\n     {\n-        return exact( propertyKeyId, Values.of( value ) );\n+        return exact(propertyKeyId, Values.of(value));\n     }\n \n-    public static IndexQuery exact( int propertyKeyId, Value value )\n+    public static IndexQuery exact(int propertyKeyId, Value value)\n     {\n-        return IndexQuery.exact( propertyKeyId, value );\n+        return IndexQuery.exact(propertyKeyId, value);\n     }\n \n     public static ValueIndexEntryUpdate<SchemaDescriptor> add(\n-            long nodeId, SchemaDescriptor schema, Object... objects )\n+      long nodeId, SchemaDescriptor schema, Object... objects)\n     {\n-        return IndexEntryUpdate.add( nodeId, schema, toValues( objects ) );\n+        return IndexEntryUpdate.add(nodeId, schema, toValues(objects));\n     }\n \n     public static ValueIndexEntryUpdate<SchemaDescriptor> remove(\n-            long nodeId, SchemaDescriptor schema, Object... objects )\n+      long nodeId, SchemaDescriptor schema, Object... objects)\n     {\n-        return IndexEntryUpdate.remove( nodeId, schema, toValues( objects ) );\n+        return IndexEntryUpdate.remove(nodeId, schema, toValues(objects));\n     }\n \n     public static ValueIndexEntryUpdate<SchemaDescriptor> change(\n-            long nodeId, SchemaDescriptor schema, Object o1, Object o2 )\n+      long nodeId, SchemaDescriptor schema, Object o1, Object o2)\n     {\n-        return IndexEntryUpdate.change( nodeId, schema, Values.of( o1 ), Values.of( o2 ) );\n+        return IndexEntryUpdate.change(nodeId, schema, Values.of(o1), Values.of(o2));\n     }\n \n     public static ValueIndexEntryUpdate<SchemaDescriptor> change(\n-            long nodeId, SchemaDescriptor schema, Object[] o1, Object[] o2 )\n+      long nodeId, SchemaDescriptor schema, Object[] o1, Object[] o2)\n     {\n-        return IndexEntryUpdate.change( nodeId, schema, toValues( o1 ), toValues( o2 ) );\n+        return IndexEntryUpdate.change(nodeId, schema, toValues(o1), toValues(o2));\n     }\n \n-    private static Value[] toValues( Object[] objects )\n+    private static Value[] toValues(Object[] objects)\n     {\n         Value[] values = new Value[objects.length];\n-        for ( int i = 0; i < objects.length; i++ )\n+        for (int i = 0; i < objects.length; i++)\n         {\n             Object object = objects[i];\n-            values[i] = object instanceof Value ? (Value)object : Values.of( object );\n+            values[i] = object instanceof Value ? (Value) object : Values.of(object);\n         }\n         return values;\n     }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/650/IndexQueryHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/650/IndexQueryHelper.java\nindex adf5e348813..f0f43804241 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/650/IndexQueryHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/650/IndexQueryHelper.java\n@@ -76,4 +76,4 @@ public final class IndexQueryHelper\n         }\n         return values;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}