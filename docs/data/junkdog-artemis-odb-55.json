{
    "project_name": "junkdog-artemis-odb",
    "error_id": "55",
    "information": {
        "errors": [
            {
                "line": "7",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "/** Delegate for system invocation.\n *\n * Maybe you want to more granular control over system invocations, feed certain systems different deltas,\n * or completely rewrite processing in favor of events. Extending this class allows you to write your own\n * logic for processing system invocation.\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/55/SystemInvocationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/55/SystemInvocationStrategy.java\nindex 2954bb8babc..ea19b6c02a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/55/SystemInvocationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/55/SystemInvocationStrategy.java\n@@ -2,36 +2,48 @@ package com.artemis;\n \n import com.artemis.utils.Bag;\n \n-/** Delegate for system invocation.\n- *\n+/**\n+ * Delegate for system invocation.\n+ * <p>\n  * Maybe you want to more granular control over system invocations, feed certain systems different deltas,\n  * or completely rewrite processing in favor of events. Extending this class allows you to write your own\n  * logic for processing system invocation.\n- *\n+ * <p>\n  * Register it with {@link WorldConfigurationBuilder#register(SystemInvocationStrategy)}\n- * \n+ * <p>\n  * Be sure to call {@link #updateEntityStates()} after the world dies.\n  *\n  * @see InvocationStrategy for the default strategy.\n  */\n public abstract class SystemInvocationStrategy {\n \n-\t/** World to operate on. */\n-\tprotected World world;\n+    /**\n+     * World to operate on.\n+     */\n+    protected World world;\n \n-\t/** World to operate on. */\n-\tprotected final void setWorld(World world) {\n-\t\tthis.world = world;\n-\t}\n+    /**\n+     * World to operate on.\n+     */\n+    protected final void setWorld(World world) {\n+        this.world = world;\n+    }\n \n-\t/** Called during world initialization phase. */\n-\tprotected void initialize() {}\n+    /**\n+     * Called during world initialization phase.\n+     */\n+    protected void initialize() {\n+    }\n \n-\t/** Call to inform all systems and subscription of world state changes. */\n-\tprotected final void updateEntityStates() {\n-\t\tworld.batchProcessor.update();\n-\t}\n+    /**\n+     * Call to inform all systems and subscription of world state changes.\n+     */\n+    protected final void updateEntityStates() {\n+        world.batchProcessor.update();\n+    }\n \n-\t/** Process all systems. */\n-\tprotected abstract void process(Bag<BaseSystem> systems);\n+    /**\n+     * Process all systems.\n+     */\n+    protected abstract void process(Bag<BaseSystem> systems);\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/55/SystemInvocationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/55/SystemInvocationStrategy.java\nindex 2954bb8babc..762164e0623 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/55/SystemInvocationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/55/SystemInvocationStrategy.java\n@@ -34,4 +34,4 @@ public abstract class SystemInvocationStrategy {\n \n \t/** Process all systems. */\n \tprotected abstract void process(Bag<BaseSystem> systems);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/55/SystemInvocationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/55/SystemInvocationStrategy.java\nindex 2954bb8babc..1cf95547e35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/55/SystemInvocationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/55/SystemInvocationStrategy.java\n@@ -14,24 +14,29 @@ import com.artemis.utils.Bag;\n  *\n  * @see InvocationStrategy for the default strategy.\n  */\n+\n public abstract class SystemInvocationStrategy {\n \n-\t/** World to operate on. */\n-\tprotected World world;\n+ /** World to operate on. */\n+ protected World world;\n+\n+ /** World to operate on. */\n+\n+ protected final void setWorld(World world) {\n+  this.world = world;\n+ }\n+\n+ /** Called during world initialization phase. */\n+\n+ protected void initialize() {}\n \n-\t/** World to operate on. */\n-\tprotected final void setWorld(World world) {\n-\t\tthis.world = world;\n-\t}\n+ /** Call to inform all systems and subscription of world state changes. */\n \n-\t/** Called during world initialization phase. */\n-\tprotected void initialize() {}\n+ protected final void updateEntityStates() {\n+  world.batchProcessor.update();\n+ }\n \n-\t/** Call to inform all systems and subscription of world state changes. */\n-\tprotected final void updateEntityStates() {\n-\t\tworld.batchProcessor.update();\n-\t}\n+ /** Process all systems. */\n \n-\t/** Process all systems. */\n-\tprotected abstract void process(Bag<BaseSystem> systems);\n-}\n+ protected abstract void process(Bag<BaseSystem> systems);\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}