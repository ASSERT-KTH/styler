{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "110",
    "information": {
        "errors": [
            {
                "line": "327",
                "column": "27",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n        return new InsertFieldOnlineResponse(\n            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n            apiClient.parseDocument(multipart.getBodyPart(1))\n        );\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/110/InsertFieldOnlineRequest.java\nindex e8697d6d3e0..0704e4766ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/110/InsertFieldOnlineRequest.java\n@@ -324,7 +324,7 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n     public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new InsertFieldOnlineResponse(\n-            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n+            (FieldResponse) apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/110/InsertFieldOnlineRequest.java\nindex e8697d6d3e0..b276f2148e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/110/InsertFieldOnlineRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -275,11 +277,13 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n+        if (getDocument() != null) {\n             localVarFormParams.put(\"Document\", getDocument());\n+        }\n \n-        if (getField() != null)\n+        if (getField() != null) {\n             localVarFormParams.put(\"Field\", getField());\n+        }\n \n         final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n@@ -299,8 +303,8 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -324,7 +328,7 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n     public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new InsertFieldOnlineResponse(\n-            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n+            (FieldResponse) apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "322",
                    "column": "60",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/110/InsertFieldOnlineRequest.java\nindex e8697d6d3e0..c8e367ce19b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/110/InsertFieldOnlineRequest.java\n@@ -235,10 +235,9 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n      */\n     public void setInsertBeforeNode(String value) {\n         this.insertBeforeNode = value;\n-    }\n-\n+  }\n \n-    /*\n+/*\n      * Creates the http request based on this request model.\n      *\n      * @param apiClient ApiClient instance\n@@ -275,13 +274,10 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n-            localVarFormParams.put(\"Document\", getDocument());\n-\n-        if (getField() != null)\n-            localVarFormParams.put(\"Field\", getField());\n+        if (getDocument() != null) localVarFormParams.put(\"Document\", getDocument());\n+if (getField() != null) localVarFormParams.put(\"Field\", getField());\n \n-        final String[] localVarAccepts = {\n+final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n         };\n         final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n@@ -323,9 +319,7 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n      */\n     public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n-        return new InsertFieldOnlineResponse(\n-            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n-            apiClient.parseDocument(multipart.getBodyPart(1))\n-        );\n+        return new InsertFieldOnlineResponse((FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n+            apiClient.parseDocument(multipart.getBodyPart(1)));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/110/InsertFieldOnlineRequest.java\nindex e8697d6d3e0..da32e900272 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/110/InsertFieldOnlineRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,51 +39,70 @@ import java.util.*;\n /*\n  * Request model for insertFieldOnline operation.\n  */\n+\n+\n public class InsertFieldOnlineRequest implements RequestIfc {\n     /*\n      * The document.\n      */\n-    private byte[] document;\n+\n+  private byte[] document;\n \n     /*\n      * Field data.\n      */\n-    private FieldInsert field;\n+\n+\n+  private FieldInsert field;\n \n     /*\n      * The path to the node in the document tree.\n      */\n-    private String nodePath;\n+\n+\n+  private String nodePath;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    private String destFileName;\n+\n+\n+  private String destFileName;\n \n     /*\n      * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    private String revisionAuthor;\n+\n+\n+  private String revisionAuthor;\n \n     /*\n      * The date and time to use for revisions.\n      */\n-    private String revisionDateTime;\n+\n+\n+  private String revisionDateTime;\n \n     /*\n      * The index of the node. A new field will be inserted before the node with the specified node Id.\n      */\n-    private String insertBeforeNode;\n+\n+\n+  private String insertBeforeNode;\n \n     /*\n      * Initializes a new instance of the InsertFieldOnlineRequest class.\n@@ -99,143 +117,164 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n      * @param String revisionDateTime The date and time to use for revisions.\n      * @param String insertBeforeNode The index of the node. A new field will be inserted before the node with the specified node Id.\n      */\n-    public InsertFieldOnlineRequest(byte[] document, FieldInsert field, String nodePath, String loadEncoding, String password, String destFileName, String revisionAuthor, String revisionDateTime, String insertBeforeNode) {\n-        this.document = document;\n-        this.field = field;\n-        this.nodePath = nodePath;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-        this.destFileName = destFileName;\n-        this.revisionAuthor = revisionAuthor;\n-        this.revisionDateTime = revisionDateTime;\n-        this.insertBeforeNode = insertBeforeNode;\n-    }\n+\n+\n+  public InsertFieldOnlineRequest(byte[] document,  FieldInsert field,  String nodePath,  String loadEncoding,  String password,  String destFileName,  String revisionAuthor,  String revisionDateTime,  String insertBeforeNode) {\n+    this.document = document;\n+    this.field = field;\n+    this.nodePath = nodePath;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+    this.destFileName = destFileName;\n+    this.revisionAuthor = revisionAuthor;\n+    this.revisionDateTime = revisionDateTime;\n+    this.insertBeforeNode = insertBeforeNode;\n+  }\n \n     /*\n      * Gets The document.\n      */\n-    public byte[] getDocument() {\n-        return this.document;\n-    }\n+\n+\n+  public byte[] getDocument() {\n+    return this.document;\n+  }\n \n     /*\n      * Sets The document.\n      */\n-    public void setDocument(byte[] value) {\n-        this.document = value;\n-    }\n+\n+  public void setDocument(byte[] value) {\n+    this.document = value;\n+  }\n \n     /*\n      * Gets Field data.\n      */\n-    public FieldInsert getField() {\n-        return this.field;\n-    }\n+\n+  public FieldInsert getField() {\n+    return this.field;\n+  }\n \n     /*\n      * Sets Field data.\n      */\n-    public void setField(FieldInsert value) {\n-        this.field = value;\n-    }\n+\n+  public void setField(FieldInsert value) {\n+    this.field = value;\n+  }\n \n     /*\n      * Gets The path to the node in the document tree.\n      */\n-    public String getNodePath() {\n-        return this.nodePath;\n-    }\n+\n+  public String getNodePath() {\n+    return this.nodePath;\n+  }\n \n     /*\n      * Sets The path to the node in the document tree.\n      */\n-    public void setNodePath(String value) {\n-        this.nodePath = value;\n-    }\n+\n+  public void setNodePath(String value) {\n+    this.nodePath = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n     /*\n      * Gets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public String getDestFileName() {\n-        return this.destFileName;\n-    }\n+\n+  public String getDestFileName() {\n+    return this.destFileName;\n+  }\n \n     /*\n      * Sets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public void setDestFileName(String value) {\n-        this.destFileName = value;\n-    }\n+\n+  public void setDestFileName(String value) {\n+    this.destFileName = value;\n+  }\n \n     /*\n      * Gets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public String getRevisionAuthor() {\n-        return this.revisionAuthor;\n-    }\n+\n+  public String getRevisionAuthor() {\n+    return this.revisionAuthor;\n+  }\n \n     /*\n      * Sets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public void setRevisionAuthor(String value) {\n-        this.revisionAuthor = value;\n-    }\n+\n+  public void setRevisionAuthor(String value) {\n+    this.revisionAuthor = value;\n+  }\n \n     /*\n      * Gets The date and time to use for revisions.\n      */\n-    public String getRevisionDateTime() {\n-        return this.revisionDateTime;\n-    }\n+\n+  public String getRevisionDateTime() {\n+    return this.revisionDateTime;\n+  }\n \n     /*\n      * Sets The date and time to use for revisions.\n      */\n-    public void setRevisionDateTime(String value) {\n-        this.revisionDateTime = value;\n-    }\n+\n+  public void setRevisionDateTime(String value) {\n+    this.revisionDateTime = value;\n+  }\n \n     /*\n      * Gets The index of the node. A new field will be inserted before the node with the specified node Id.\n      */\n-    public String getInsertBeforeNode() {\n-        return this.insertBeforeNode;\n-    }\n+\n+  public String getInsertBeforeNode() {\n+    return this.insertBeforeNode;\n+  }\n \n     /*\n      * Sets The index of the node. A new field will be inserted before the node with the specified node Id.\n      */\n-    public void setInsertBeforeNode(String value) {\n-        this.insertBeforeNode = value;\n-    }\n+\n+  public void setInsertBeforeNode(String value) {\n+    this.insertBeforeNode = value;\n+  }\n \n \n     /*\n@@ -245,75 +284,72 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n-        if (getDocument() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling insertFieldOnline\");\n-        }\n+    if (getDocument() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling insertFieldOnline\");\n+    }\n \n         // verify the required parameter 'Field' is set\n-        if (getField() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Field' when calling insertFieldOnline\");\n-        }\n+    if (getField() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Field' when calling insertFieldOnline\");\n+    }\n \n-        Object localVarPostBody = null;\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/online/post/{nodePath}/fields\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"nodePath\", getNodePath());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"insertBeforeNode\", getInsertBeforeNode());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n-            localVarFormParams.put(\"Document\", getDocument());\n-\n-        if (getField() != null)\n-            localVarFormParams.put(\"Field\", getField());\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"multipart/form-data\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/online/post/{nodePath}/fields\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"nodePath\", getNodePath());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"insertBeforeNode\", getInsertBeforeNode());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (getDocument() != null) localVarFormParams.put(\"Document\", getDocument());\n+\n+    if (getField() != null) localVarFormParams.put(\"Field\", getField());\n+\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"multipart/form-data\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return InsertFieldOnlineResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return InsertFieldOnlineResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -321,11 +357,9 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n-        return new InsertFieldOnlineResponse(\n-            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n-            apiClient.parseDocument(multipart.getBodyPart(1))\n-        );\n-    }\n-}\n+\n+  public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n+    return new InsertFieldOnlineResponse((FieldResponse) apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class), apiClient.parseDocument(multipart.getBodyPart(1)));\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 185
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/110/InsertFieldOnlineRequest.java\nindex e8697d6d3e0..0704e4766ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/110/InsertFieldOnlineRequest.java\n@@ -324,7 +324,7 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n     public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new InsertFieldOnlineResponse(\n-            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n+            (FieldResponse) apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/110/InsertFieldOnlineRequest.java\nindex e8697d6d3e0..0704e4766ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/110/InsertFieldOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/110/InsertFieldOnlineRequest.java\n@@ -324,7 +324,7 @@ public class InsertFieldOnlineRequest implements RequestIfc {\n     public InsertFieldOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new InsertFieldOnlineResponse(\n-            (FieldResponse)apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n+            (FieldResponse) apiClient.parseModel(multipart.getBodyPart(0), FieldResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}