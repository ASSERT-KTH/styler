{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2070",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "207",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2070/StoreProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2070/StoreProcessor.java\nindex e50839bd459..1352aa04d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2070/StoreProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2070/StoreProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import org.neo4j.consistency.RecordType;\n@@ -55,184 +56,181 @@ import static org.neo4j.kernel.impl.store.Scanner.scan;\n  */\n public class StoreProcessor extends AbstractStoreProcessor\n {\n-    private final int qSize = DEFAULT_QUEUE_SIZE;\n-    protected final CacheAccess cacheAccess;\n-    private final ConsistencyReport.Reporter report;\n-    private SchemaRecordCheck schemaRecordCheck;\n-    private final Stage stage;\n-\n-    public StoreProcessor( CheckDecorator decorator, ConsistencyReport.Reporter report,\n-            Stage stage, CacheAccess cacheAccess )\n-    {\n-        super( decorator );\n-        assert stage != null;\n-        this.report = report;\n-        this.stage = stage;\n-        this.cacheAccess = cacheAccess;\n-    }\n-\n-    public Stage getStage()\n-    {\n-        return stage;\n-    }\n-\n-    public int getStageIndex()\n-    {\n-        return stage.ordinal();\n-    }\n-\n-    @Override\n-    public void processNode( RecordStore<NodeRecord> store, NodeRecord node )\n-    {\n-        cacheAccess.client().incAndGetCount( node.isDense() ? Counts.Type.nodeDense : Counts.Type.nodeSparse );\n-        super.processNode( store, node );\n-    }\n-\n-    protected void checkSchema( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord schema,\n-            RecordCheck<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> checker )\n-    {\n-        report.forSchema( schema, checker );\n-    }\n-\n-    @Override\n-    protected void checkNode( RecordStore<NodeRecord> store, NodeRecord node,\n-            RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> checker )\n-    {\n-        report.forNode( node, checker );\n-    }\n-\n-    public void countLinks( long id1, long id2, CacheAccess.Client client )\n-    {\n-        Counts.Type type = null;\n-        if ( id2 == -1 )\n-        {\n-            type = Counts.Type.nullLinks;\n-        }\n-        else if ( id2 > id1 )\n-        {\n-            type = Counts.Type.forwardLinks;\n-        }\n-        else\n-        {\n-            type = Counts.Type.backLinks;\n-        }\n-        client.incAndGetCount( type );\n-    }\n-\n-    @Override\n-    protected void checkRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel,\n-                                      RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> checker )\n-    {\n-        if ( stage != null && (stage == CheckStage.Stage6_RS_Forward || stage == CheckStage.Stage7_RS_Backward) )\n-        {\n-            long id = rel.getId();\n-            CacheAccess.Client client = cacheAccess.client();\n-            countLinks( id, rel.getFirstNextRel(), client );\n-            countLinks( id, rel.getFirstPrevRel(), client );\n-            countLinks( id, rel.getSecondNextRel(), client );\n-            countLinks( id, rel.getSecondPrevRel(), client );\n-        }\n-        report.forRelationship( rel, checker );\n-    }\n-\n-    @Override\n-    protected void checkProperty( RecordStore<PropertyRecord> store, PropertyRecord property,\n-            RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> checker )\n-    {\n-        report.forProperty( property, checker );\n-    }\n-\n-    @Override\n-    protected void checkRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n-                                               RelationshipTypeTokenRecord relationshipType,\n-                                               RecordCheck<RelationshipTypeTokenRecord,\n-                                                       ConsistencyReport.RelationshipTypeConsistencyReport> checker )\n-    {\n-        report.forRelationshipTypeName( relationshipType, checker );\n-    }\n-\n-    @Override\n-    protected void checkLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord label,\n-                                    RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport>\n-                                            checker )\n-    {\n-        report.forLabelName( label, checker );\n-    }\n-\n-    @Override\n-    protected void checkPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord key,\n-                                          RecordCheck<PropertyKeyTokenRecord,\n-                                          ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n-    {\n-        report.forPropertyKey( key, checker );\n-    }\n-\n-    @Override\n-    protected void checkDynamic( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-                                 RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> checker )\n-    {\n-        report.forDynamicBlock( type, string, checker );\n-    }\n-\n-    @Override\n-    protected void checkDynamicLabel( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-                                      RecordCheck<DynamicRecord,DynamicLabelConsistencyReport> checker )\n-    {\n-        report.forDynamicLabelBlock( type, string, checker );\n-    }\n-\n-    @Override\n-    protected void checkRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n-    {\n-        report.forRelationshipGroup( record, checker );\n-    }\n-\n-    void setSchemaRecordCheck( SchemaRecordCheck schemaRecordCheck )\n-    {\n-        this.schemaRecordCheck = schemaRecordCheck;\n-    }\n-\n-    @Override\n-    public void processSchema( RecordStore<DynamicRecord> store, DynamicRecord schema )\n-    {\n-        if ( null == schemaRecordCheck )\n-        {\n-            super.processSchema( store, schema );\n-        }\n-        else\n-        {\n-            checkSchema( RecordType.SCHEMA, store, schema, schemaRecordCheck );\n-        }\n-    }\n-\n-    public <R extends AbstractBaseRecord> void applyFilteredParallel( final RecordStore<R> store,\n-            final ProgressListener progressListener, int numberOfThreads, long recordsPerCpu,\n-            final QueueDistributor<R> distributor )\n-    {\n-        cacheAccess.prepareForProcessingOfSingleStore( recordsPerCpu );\n-        RecordProcessor<R> processor = new RecordProcessor.Adapter<R>()\n-        {\n-            @Override\n-            public void init( int id )\n-            {\n-                // Thread id assignment happens here, so do this before processing. Calles to this init\n-                // method is ordered externally.\n-                cacheAccess.client();\n-            }\n-\n-            @Override\n-            public void process( R record )\n-            {\n-                store.accept( StoreProcessor.this, record );\n-            }\n-        };\n-\n-        ResourceIterable<R> scan = scan( store, stage.isForward() );\n-        try ( ResourceIterator<R> records = scan.iterator() )\n-        {\n-            distributeRecords( numberOfThreads, getClass().getSimpleName(), qSize,\n-                    cloned( records ), progressListener, processor, distributor );\n-        }\n-    }\n+  private final int qSize = DEFAULT_QUEUE_SIZE;\n+  protected final CacheAccess cacheAccess;\n+  private final ConsistencyReport.Reporter report;\n+  private SchemaRecordCheck schemaRecordCheck;\n+  private final Stage stage;\n+\n+  public StoreProcessor(CheckDecorator decorator, ConsistencyReport.Reporter report,\n+                        Stage stage, CacheAccess cacheAccess)\n+  {\n+    super(decorator);\n+    assert stage != null;\n+    this.report = report;\n+    this.stage = stage;\n+    this.cacheAccess = cacheAccess;\n+  }\n+\n+  public Stage getStage()\n+  {\n+    return stage;\n+  }\n+\n+  public int getStageIndex()\n+  {\n+    return stage.ordinal();\n+  }\n+\n+  @Override\n+  public void processNode(RecordStore<NodeRecord> store, NodeRecord node)\n+  {\n+    cacheAccess.client().incAndGetCount(node.isDense() ? Counts.Type.nodeDense : Counts.Type.nodeSparse);\n+    super.processNode(store, node);\n+  }\n+\n+  protected void checkSchema(RecordType type, RecordStore<DynamicRecord> store, DynamicRecord schema,\n+                             RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> checker)\n+  {\n+    report.forSchema(schema, checker);\n+  }\n+\n+  @Override\n+  protected void checkNode(RecordStore<NodeRecord> store, NodeRecord node,\n+                           RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker)\n+  {\n+    report.forNode(node, checker);\n+  }\n+\n+  public void countLinks(long id1, long id2, CacheAccess.Client client)\n+  {\n+    Counts.Type type = null;\n+    if (id2 == -1)\n+    {\n+      type = Counts.Type.nullLinks;\n+    } else if (id2 > id1)\n+    {\n+      type = Counts.Type.forwardLinks;\n+    } else\n+    {\n+      type = Counts.Type.backLinks;\n+    }\n+    client.incAndGetCount(type);\n+  }\n+\n+  @Override\n+  protected void checkRelationship(RecordStore<RelationshipRecord> store, RelationshipRecord rel,\n+                                   RecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> checker)\n+  {\n+    if (stage != null && (stage == CheckStage.Stage6_RS_Forward || stage == CheckStage.Stage7_RS_Backward))\n+    {\n+      long id = rel.getId();\n+      CacheAccess.Client client = cacheAccess.client();\n+      countLinks(id, rel.getFirstNextRel(), client);\n+      countLinks(id, rel.getFirstPrevRel(), client);\n+      countLinks(id, rel.getSecondNextRel(), client);\n+      countLinks(id, rel.getSecondPrevRel(), client);\n+    }\n+    report.forRelationship(rel, checker);\n+  }\n+\n+  @Override\n+  protected void checkProperty(RecordStore<PropertyRecord> store, PropertyRecord property,\n+                               RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> checker)\n+  {\n+    report.forProperty(property, checker);\n+  }\n+\n+  @Override\n+  protected void checkRelationshipTypeToken(RecordStore<RelationshipTypeTokenRecord> store,\n+                                            RelationshipTypeTokenRecord relationshipType,\n+                                            RecordCheck<RelationshipTypeTokenRecord,\n+                                                ConsistencyReport.RelationshipTypeConsistencyReport> checker)\n+  {\n+    report.forRelationshipTypeName(relationshipType, checker);\n+  }\n+\n+  @Override\n+  protected void checkLabelToken(RecordStore<LabelTokenRecord> store, LabelTokenRecord label,\n+                                 RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport>\n+                                     checker)\n+  {\n+    report.forLabelName(label, checker);\n+  }\n+\n+  @Override\n+  protected void checkPropertyKeyToken(RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord key,\n+                                       RecordCheck<PropertyKeyTokenRecord,\n+                                           ConsistencyReport.PropertyKeyTokenConsistencyReport> checker)\n+  {\n+    report.forPropertyKey(key, checker);\n+  }\n+\n+  @Override\n+  protected void checkDynamic(RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n+                              RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker)\n+  {\n+    report.forDynamicBlock(type, string, checker);\n+  }\n+\n+  @Override\n+  protected void checkDynamicLabel(RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n+                                   RecordCheck<DynamicRecord, DynamicLabelConsistencyReport> checker)\n+  {\n+    report.forDynamicLabelBlock(type, string, checker);\n+  }\n+\n+  @Override\n+  protected void checkRelationshipGroup(RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record,\n+                                        RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker)\n+  {\n+    report.forRelationshipGroup(record, checker);\n+  }\n+\n+  void setSchemaRecordCheck(SchemaRecordCheck schemaRecordCheck)\n+  {\n+    this.schemaRecordCheck = schemaRecordCheck;\n+  }\n+\n+  @Override\n+  public void processSchema(RecordStore<DynamicRecord> store, DynamicRecord schema)\n+  {\n+    if (null == schemaRecordCheck)\n+    {\n+      super.processSchema(store, schema);\n+    } else\n+    {\n+      checkSchema(RecordType.SCHEMA, store, schema, schemaRecordCheck);\n+    }\n+  }\n+\n+  public <R extends AbstractBaseRecord> void applyFilteredParallel(final RecordStore<R> store,\n+                                                                   final ProgressListener progressListener, int numberOfThreads, long recordsPerCpu,\n+                                                                   final QueueDistributor<R> distributor)\n+  {\n+    cacheAccess.prepareForProcessingOfSingleStore(recordsPerCpu);\n+    RecordProcessor<R> processor = new RecordProcessor.Adapter<R>()\n+    {\n+      @Override\n+      public void init(int id)\n+      {\n+        // Thread id assignment happens here, so do this before processing. Calles to this init\n+        // method is ordered externally.\n+        cacheAccess.client();\n+      }\n+\n+      @Override\n+      public void process(R record)\n+      {\n+        store.accept(StoreProcessor.this, record);\n+      }\n+    };\n+\n+    ResourceIterable<R> scan = scan(store, stage.isForward());\n+    try (ResourceIterator<R> records = scan.iterator())\n+    {\n+      distributeRecords(numberOfThreads, getClass().getSimpleName(), qSize,\n+          cloned(records), progressListener, processor, distributor);\n+    }\n+  }\n }\n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "column": "22",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2070/StoreProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2070/StoreProcessor.java\nindex e50839bd459..2bf3464f85c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2070/StoreProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2070/StoreProcessor.java\n@@ -88,15 +88,13 @@ public class StoreProcessor extends AbstractStoreProcessor\n         super.processNode( store, node );\n     }\n \n-    protected void checkSchema( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord schema,\n-            RecordCheck<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> checker )\n+    protected void checkSchema( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord schema, RecordCheck<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> checker )\n     {\n         report.forSchema( schema, checker );\n     }\n \n     @Override\n-    protected void checkNode( RecordStore<NodeRecord> store, NodeRecord node,\n-            RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> checker )\n+    protected void checkNode( RecordStore<NodeRecord> store, NodeRecord node, RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> checker )\n     {\n         report.forNode( node, checker );\n     }\n@@ -108,7 +106,7 @@ public class StoreProcessor extends AbstractStoreProcessor\n         {\n             type = Counts.Type.nullLinks;\n         }\n-        else if ( id2 > id1 )\n+        else if ( id2> id1 )\n         {\n             type = Counts.Type.forwardLinks;\n         }\n@@ -120,10 +118,9 @@ public class StoreProcessor extends AbstractStoreProcessor\n     }\n \n     @Override\n-    protected void checkRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel,\n-                                      RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> checker )\n-    {\n-        if ( stage != null && (stage == CheckStage.Stage6_RS_Forward || stage == CheckStage.Stage7_RS_Backward) )\n+    protected void checkRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel, RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> checker )\n+{\n+        if ( stage != null && ( stage == CheckStage.Stage6_RS_Forward || stage == CheckStage.Stage7_RS_Backward) )\n         {\n             long id = rel.getId();\n             CacheAccess.Client client = cacheAccess.client();\n@@ -136,54 +133,45 @@ public class StoreProcessor extends AbstractStoreProcessor\n     }\n \n     @Override\n-    protected void checkProperty( RecordStore<PropertyRecord> store, PropertyRecord property,\n-            RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> checker )\n+    protected void checkProperty( RecordStore<PropertyRecord> store, PropertyRecord property, RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> checker )\n     {\n         report.forProperty( property, checker );\n     }\n \n     @Override\n-    protected void checkRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n-                                               RelationshipTypeTokenRecord relationshipType,\n-                                               RecordCheck<RelationshipTypeTokenRecord,\n+    protected void checkRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store, RelationshipTypeTokenRecord relationshipType, RecordCheck<RelationshipTypeTokenRecord,\n                                                        ConsistencyReport.RelationshipTypeConsistencyReport> checker )\n-    {\n+{\n         report.forRelationshipTypeName( relationshipType, checker );\n     }\n \n     @Override\n-    protected void checkLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord label,\n-                                    RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport>\n-                                            checker )\n-    {\n+    protected void checkLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord label, RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport> checker )\n+{\n         report.forLabelName( label, checker );\n     }\n \n     @Override\n-    protected void checkPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord key,\n-                                          RecordCheck<PropertyKeyTokenRecord,\n+    protected void checkPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord key, RecordCheck<PropertyKeyTokenRecord,\n                                           ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n-    {\n+{\n         report.forPropertyKey( key, checker );\n     }\n \n     @Override\n-    protected void checkDynamic( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-                                 RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> checker )\n-    {\n+    protected void checkDynamic( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string, RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> checker )\n+{\n         report.forDynamicBlock( type, string, checker );\n     }\n \n     @Override\n-    protected void checkDynamicLabel( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string,\n-                                      RecordCheck<DynamicRecord,DynamicLabelConsistencyReport> checker )\n-    {\n+    protected void checkDynamicLabel( RecordType type, RecordStore<DynamicRecord> store, DynamicRecord string, RecordCheck<DynamicRecord,DynamicLabelConsistencyReport> checker )\n+{\n         report.forDynamicLabelBlock( type, string, checker );\n     }\n \n     @Override\n-    protected void checkRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n+    protected void checkRelationshipGroup( RecordStore<RelationshipGroupRecord> store, RelationshipGroupRecord record, RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n     {\n         report.forRelationshipGroup( record, checker );\n     }\n@@ -206,9 +194,7 @@ public class StoreProcessor extends AbstractStoreProcessor\n         }\n     }\n \n-    public <R extends AbstractBaseRecord> void applyFilteredParallel( final RecordStore<R> store,\n-            final ProgressListener progressListener, int numberOfThreads, long recordsPerCpu,\n-            final QueueDistributor<R> distributor )\n+    public <R extends AbstractBaseRecord> void applyFilteredParallel( final RecordStore<R> store, final ProgressListener progressListener, int numberOfThreads, long recordsPerCpu, final QueueDistributor<R> distributor )\n     {\n         cacheAccess.prepareForProcessingOfSingleStore( recordsPerCpu );\n         RecordProcessor<R> processor = new RecordProcessor.Adapter<R>()\n@@ -233,6 +219,6 @@ public class StoreProcessor extends AbstractStoreProcessor\n         {\n             distributeRecords( numberOfThreads, getClass().getSimpleName(), qSize,\n                     cloned( records ), progressListener, processor, distributor );\n-        }\n     }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}