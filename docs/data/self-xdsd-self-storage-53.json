{
    "project_name": "self-xdsd-self-storage",
    "error_id": "53",
    "information": {
        "errors": [
            {
                "line": "75",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n            .fetch();\n        if(!result.isEmpty()) {\n            return this.buildInvoice(result.get(0));\n        }\n        return null;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler/53/SelfInvoices.java\nindex e3096db2c06..ce9e2496802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler/53/SelfInvoices.java\n@@ -72,7 +72,7 @@ public final class SelfInvoices implements Invoices {\n             .from(SLF_INVOICES_XDSD)\n             .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n             .fetch();\n-        if(!result.isEmpty()) {\n+        if (!result.isEmpty()) {\n             return this.buildInvoice(result.get(0));\n         }\n         return null;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/intellij/53/SelfInvoices.java\nindex e3096db2c06..24d0c31385b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/intellij/53/SelfInvoices.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.storage;\n \n import com.selfxdsd.api.*;\n@@ -34,11 +35,12 @@ import static com.selfxdsd.storage.generated.jooq.Tables.SLF_INVOICES_XDSD;\n \n /**\n  * Invoices in Self.\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n- * @since 0.0.4\n  * @todo #75:30min Implement and write integration tests for\n- *  method ofContract(...) in this class.\n+ * method ofContract(...) in this class.\n+ * @since 0.0.4\n  */\n public final class SelfInvoices implements Invoices {\n \n@@ -54,7 +56,8 @@ public final class SelfInvoices implements Invoices {\n \n     /**\n      * Ctor.\n-     * @param storage Parent Storage.\n+     *\n+     * @param storage  Parent Storage.\n      * @param database Database.\n      */\n     public SelfInvoices(\n@@ -72,7 +75,7 @@ public final class SelfInvoices implements Invoices {\n             .from(SLF_INVOICES_XDSD)\n             .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n             .fetch();\n-        if(!result.isEmpty()) {\n+        if (!result.isEmpty()) {\n             return this.buildInvoice(result.get(0));\n         }\n         return null;\n@@ -82,7 +85,7 @@ public final class SelfInvoices implements Invoices {\n     public Invoice createNewInvoice(final Contract.Id contractId) {\n         throw new UnsupportedOperationException(\n             \"Cannot create an Invoice outside of a Contract. \"\n-          + \"Call #ofContract(...) first.\"\n+                + \"Call #ofContract(...) first.\"\n         );\n     }\n \n@@ -90,7 +93,7 @@ public final class SelfInvoices implements Invoices {\n     public Invoice active() {\n         throw new UnsupportedOperationException(\n             \"Cannot get the active Invoice out of all of them. \"\n-          + \"Call #ofContract(...) first.\"\n+                + \"Call #ofContract(...) first.\"\n         );\n     }\n \n@@ -103,20 +106,21 @@ public final class SelfInvoices implements Invoices {\n     public Iterator<Invoice> iterator() {\n         throw new UnsupportedOperationException(\n             \"You cannot iterate over all Invoices. \"\n-          + \"Call #ofContract(...) first.\"\n+                + \"Call #ofContract(...) first.\"\n         );\n     }\n \n     /**\n      * Builds an Invoice from a {@link Record}.\n+     *\n      * @param record Record.\n      * @return Invoice.\n      */\n-    private Invoice buildInvoice(final Record record){\n+    private Invoice buildInvoice(final Record record) {\n         return new StoredInvoice(\n             record.getValue(SLF_INVOICES_XDSD.INVOICEID),\n-                this.storage.contracts().findById(\n-                    new Contract.Id(\n+            this.storage.contracts().findById(\n+                new Contract.Id(\n                     record.getValue(SLF_INVOICES_XDSD.REPO_FULLNAME),\n                     record.getValue(SLF_INVOICES_XDSD.USERNAME),\n                     record.getValue(SLF_INVOICES_XDSD.PROVIDER),\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/naturalize/53/SelfInvoices.java\nindex e3096db2c06..49b3e44e057 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/naturalize/53/SelfInvoices.java\n@@ -57,23 +57,18 @@ public final class SelfInvoices implements Invoices {\n      * @param storage Parent Storage.\n      * @param database Database.\n      */\n-    public SelfInvoices(\n-        final Storage storage,\n-        final Database database\n-    ) {\n+    public SelfInvoices(final Storage storage,\n+        final Database database) {\n         this.storage = storage;\n         this.database = database;\n     }\n \n     @Override\n     public Invoice getById(final int id) {\n-        final Result<Record> result = this.database.jooq()\n-            .select()\n-            .from(SLF_INVOICES_XDSD)\n-            .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n-            .fetch();\n+        final Result<Record> result = this.database.jooq().select().from(SLF_INVOICES_XDSD).where(SLF_INVOICES_XDSD.INVOICEID.eq(id)).fetch();\n         if(!result.isEmpty()) {\n-            return this.buildInvoice(result.get(0));\n+            return this.buildInvoice(result.get(\n+    0));\n         }\n         return null;\n     }\n@@ -81,17 +76,15 @@ public final class SelfInvoices implements Invoices {\n     @Override\n     public Invoice createNewInvoice(final Contract.Id contractId) {\n         throw new UnsupportedOperationException(\n-            \"Cannot create an Invoice outside of a Contract. \"\n-          + \"Call #ofContract(...) first.\"\n-        );\n+            \"Cannot create an Invoice outside of a Contract. \"+ \"Call #ofContract(...) first.\"\n+    );\n     }\n \n     @Override\n     public Invoice active() {\n         throw new UnsupportedOperationException(\n-            \"Cannot get the active Invoice out of all of them. \"\n-          + \"Call #ofContract(...) first.\"\n-        );\n+            \"Cannot get the active Invoice out of all of them. \"+ \"Call #ofContract(...) first.\"\n+    );\n     }\n \n     @Override\n@@ -102,9 +95,8 @@ public final class SelfInvoices implements Invoices {\n     @Override\n     public Iterator<Invoice> iterator() {\n         throw new UnsupportedOperationException(\n-            \"You cannot iterate over all Invoices. \"\n-          + \"Call #ofContract(...) first.\"\n-        );\n+            \"You cannot iterate over all Invoices. \"+ \"Call #ofContract(...) first.\"\n+    );\n     }\n \n     /**\n@@ -112,12 +104,10 @@ public final class SelfInvoices implements Invoices {\n      * @param record Record.\n      * @return Invoice.\n      */\n-    private Invoice buildInvoice(final Record record){\n+    private Invoice buildInvoice(final Record record) {\n         return new StoredInvoice(\n-            record.getValue(SLF_INVOICES_XDSD.INVOICEID),\n-                this.storage.contracts().findById(\n-                    new Contract.Id(\n-                    record.getValue(SLF_INVOICES_XDSD.REPO_FULLNAME),\n+            record.getValue(SLF_INVOICES_XDSD.INVOICEID), this.storage.contracts().findById(\n+                    new Contract.Id(record.getValue(SLF_INVOICES_XDSD.REPO_FULLNAME),\n                     record.getValue(SLF_INVOICES_XDSD.USERNAME),\n                     record.getValue(SLF_INVOICES_XDSD.PROVIDER),\n                     record.getValue(SLF_INVOICES_XDSD.ROLE)\n@@ -125,9 +115,7 @@ public final class SelfInvoices implements Invoices {\n             ),\n             record.getValue(SLF_INVOICES_XDSD.CREATEDAT),\n             record.getValue(SLF_INVOICES_XDSD.PAYMENT_TIMESTAMP),\n-            record.getValue(SLF_INVOICES_XDSD.TRANSACTIONID),\n-            this.storage\n+            record.getValue(SLF_INVOICES_XDSD.TRANSACTIONID), this.storage\n         );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "'ctor def' child has incorrect indentation level 72, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "column": "21",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "76",
                    "column": "23",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "109",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "14",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "80",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 37, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 33, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "column": "20",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "107",
                    "column": "22",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/codebuff/53/SelfInvoices.java\nindex e3096db2c06..93d286c6496 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/codebuff/53/SelfInvoices.java\n@@ -27,9 +27,9 @@ import com.selfxdsd.api.storage.Storage;\n import com.selfxdsd.core.contracts.invoices.StoredInvoice;\n import org.jooq.Record;\n import org.jooq.Result;\n-\n import java.util.Iterator;\n \n+\n import static com.selfxdsd.storage.generated.jooq.Tables.SLF_INVOICES_XDSD;\n \n /**\n@@ -40,16 +40,21 @@ import static com.selfxdsd.storage.generated.jooq.Tables.SLF_INVOICES_XDSD;\n  * @todo #75:30min Implement and write integration tests for\n  *  method ofContract(...) in this class.\n  */\n+\n+\n public final class SelfInvoices implements Invoices {\n \n     /**\n      * Parent Storage.\n      */\n+\n+\n     private final Storage storage;\n \n     /**\n      * Database.\n      */\n+\n     private final Database database;\n \n     /**\n@@ -57,40 +62,39 @@ public final class SelfInvoices implements Invoices {\n      * @param storage Parent Storage.\n      * @param database Database.\n      */\n-    public SelfInvoices(\n-        final Storage storage,\n-        final Database database\n-    ) {\n+\n+\n+    public SelfInvoices(final Storage storage, final Database database) {\n         this.storage = storage;\n-        this.database = database;\n+\n+\n+                                                                        this.database = database;\n     }\n \n     @Override\n     public Invoice getById(final int id) {\n-        final Result<Record> result = this.database.jooq()\n-            .select()\n-            .from(SLF_INVOICES_XDSD)\n-            .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n-            .fetch();\n-        if(!result.isEmpty()) {\n-            return this.buildInvoice(result.get(0));\n-        }\n+        final Result < Record> result=\n+            this.database.jooq() .select() .from( SLF_INVOICES_XDSD) .where( SLF_INVOICES_XDSD.INVOICEID.eq( id) ) .fetch();\n+\n+\n+        if( ! result.isEmpty() ) {\n+                                     return this.buildInvoice( result.get( 0) );\n+                                 }\n+\n         return null;\n     }\n \n     @Override\n     public Invoice createNewInvoice(final Contract.Id contractId) {\n         throw new UnsupportedOperationException(\n-            \"Cannot create an Invoice outside of a Contract. \"\n-          + \"Call #ofContract(...) first.\"\n+                  \"Cannot create an Invoice outside of a Contract. \" + \"Call #ofContract(...) first.\"\n         );\n     }\n \n     @Override\n     public Invoice active() {\n         throw new UnsupportedOperationException(\n-            \"Cannot get the active Invoice out of all of them. \"\n-          + \"Call #ofContract(...) first.\"\n+                  \"Cannot get the active Invoice out of all of them. \" + \"Call #ofContract(...) first.\"\n         );\n     }\n \n@@ -100,10 +104,9 @@ public final class SelfInvoices implements Invoices {\n     }\n \n     @Override\n-    public Iterator<Invoice> iterator() {\n+    public Iterator < Invoice> iterator() {\n         throw new UnsupportedOperationException(\n-            \"You cannot iterate over all Invoices. \"\n-          + \"Call #ofContract(...) first.\"\n+                  \"You cannot iterate over all Invoices. \" + \"Call #ofContract(...) first.\"\n         );\n     }\n \n@@ -112,22 +115,20 @@ public final class SelfInvoices implements Invoices {\n      * @param record Record.\n      * @return Invoice.\n      */\n-    private Invoice buildInvoice(final Record record){\n+\n+    private Invoice buildInvoice(final Record record) {\n         return new StoredInvoice(\n-            record.getValue(SLF_INVOICES_XDSD.INVOICEID),\n-                this.storage.contracts().findById(\n-                    new Contract.Id(\n-                    record.getValue(SLF_INVOICES_XDSD.REPO_FULLNAME),\n-                    record.getValue(SLF_INVOICES_XDSD.USERNAME),\n-                    record.getValue(SLF_INVOICES_XDSD.PROVIDER),\n-                    record.getValue(SLF_INVOICES_XDSD.ROLE)\n-                )\n-            ),\n-            record.getValue(SLF_INVOICES_XDSD.CREATEDAT),\n-            record.getValue(SLF_INVOICES_XDSD.PAYMENT_TIMESTAMP),\n-            record.getValue(SLF_INVOICES_XDSD.TRANSACTIONID),\n-            this.storage\n-        );\n+                   record.getValue( SLF_INVOICES_XDSD.INVOICEID),\n+                   this.storage.contracts() .findById( new Contract.Id(\n+                                                           record.getValue( SLF_INVOICES_XDSD.REPO_FULLNAME),\n+                                                           record.getValue( SLF_INVOICES_XDSD.USERNAME),\n+                                                           record.getValue( SLF_INVOICES_XDSD.PROVIDER),\n+                                                           record.getValue( SLF_INVOICES_XDSD.ROLE)\n+                                                       ) ),\n+                   record.getValue( SLF_INVOICES_XDSD.CREATEDAT),\n+                   record.getValue( SLF_INVOICES_XDSD.PAYMENT_TIMESTAMP),\n+                   record.getValue( SLF_INVOICES_XDSD.TRANSACTIONID),\n+                   this.storage\n+               );\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler_random/53/SelfInvoices.java\nindex e3096db2c06..ce9e2496802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler_random/53/SelfInvoices.java\n@@ -72,7 +72,7 @@ public final class SelfInvoices implements Invoices {\n             .from(SLF_INVOICES_XDSD)\n             .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n             .fetch();\n-        if(!result.isEmpty()) {\n+        if (!result.isEmpty()) {\n             return this.buildInvoice(result.get(0));\n         }\n         return null;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler_three_grams/53/SelfInvoices.java\nindex e3096db2c06..ce9e2496802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/53/SelfInvoices.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler_three_grams/53/SelfInvoices.java\n@@ -72,7 +72,7 @@ public final class SelfInvoices implements Invoices {\n             .from(SLF_INVOICES_XDSD)\n             .where(SLF_INVOICES_XDSD.INVOICEID.eq(id))\n             .fetch();\n-        if(!result.isEmpty()) {\n+        if (!result.isEmpty()) {\n             return this.buildInvoice(result.get(0));\n         }\n         return null;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}