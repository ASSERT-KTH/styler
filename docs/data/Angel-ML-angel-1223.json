{
    "project_name": "Angel-ML-angel",
    "error_id": "1223",
    "information": {
        "errors": [
            {
                "line": "14",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 118).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class KryoUtils {\n  private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n\n  private static Kryo getKryo(){\n    Kryo kryo = kryos.get();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1223/KryoUtils.java\nindex affd28fb014..a412afe0c49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1223/KryoUtils.java\n@@ -11,11 +11,12 @@ import java.io.ByteArrayOutputStream;\n \n public class KryoUtils {\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n-  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n+  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs =\n+      new ThreadLocal<KryoReflectionFactorySupport>();\n \n-  private static Kryo getKryo(){\n+  private static Kryo getKryo() {\n     Kryo kryo = kryos.get();\n-    if(kryo == null) {\n+    if (kryo == null) {\n       kryo = new Kryo();\n       kryos.set(kryo);\n     }\n@@ -23,9 +24,9 @@ public class KryoUtils {\n     return kryo;\n   }\n \n-  private static KryoReflectionFactorySupport getKryoRef(){\n+  private static KryoReflectionFactorySupport getKryoRef() {\n     KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n-    if(kryoRef == null) {\n+    if (kryoRef == null) {\n       kryoRef = new KryoReflectionFactorySupport();\n       kryoRefs.set(kryoRef);\n     }\n@@ -43,10 +44,10 @@ public class KryoUtils {\n     return baos.toByteArray();\n   }\n \n-  public static Metric deserializeAlgoMetric(byte [] data) {\n+  public static Metric deserializeAlgoMetric(byte[] data) {\n     ByteArrayInputStream bais = new ByteArrayInputStream(data);\n     Input input = new Input(bais);\n     KryoReflectionFactorySupport kryoRef = getKryoRef();\n-    return ((Metric)kryoRef.readClassAndObject(input));\n+    return ((Metric) kryoRef.readClassAndObject(input));\n   }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1223/KryoUtils.java\nindex affd28fb014..60baaf4593b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1223/KryoUtils.java\n@@ -13,9 +13,9 @@ public class KryoUtils {\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n   private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n \n-  private static Kryo getKryo(){\n+  private static Kryo getKryo() {\n     Kryo kryo = kryos.get();\n-    if(kryo == null) {\n+    if (kryo == null) {\n       kryo = new Kryo();\n       kryos.set(kryo);\n     }\n@@ -23,9 +23,9 @@ public class KryoUtils {\n     return kryo;\n   }\n \n-  private static KryoReflectionFactorySupport getKryoRef(){\n+  private static KryoReflectionFactorySupport getKryoRef() {\n     KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n-    if(kryoRef == null) {\n+    if (kryoRef == null) {\n       kryoRef = new KryoReflectionFactorySupport();\n       kryoRefs.set(kryoRef);\n     }\n@@ -43,10 +43,10 @@ public class KryoUtils {\n     return baos.toByteArray();\n   }\n \n-  public static Metric deserializeAlgoMetric(byte [] data) {\n+  public static Metric deserializeAlgoMetric(byte[] data) {\n     ByteArrayInputStream bais = new ByteArrayInputStream(data);\n     Input input = new Input(bais);\n     KryoReflectionFactorySupport kryoRef = getKryoRef();\n     return ((Metric)kryoRef.readClassAndObject(input));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1223/KryoUtils.java\nindex affd28fb014..102a7196e3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1223/KryoUtils.java\n@@ -5,31 +5,28 @@ import com.esotericsoftware.kryo.io.Input;\n import com.esotericsoftware.kryo.io.Output;\n import com.tencent.angel.ml.metrics.Metric;\n import de.javakaffee.kryoserializers.KryoReflectionFactorySupport;\n-\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n \n public class KryoUtils {\n+\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n   private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n-\n-  private static Kryo getKryo(){\n+  private static Kryo getKryo() {\n     Kryo kryo = kryos.get();\n-    if(kryo == null) {\n+    if (kryo == null) {\n       kryo = new Kryo();\n       kryos.set(kryo);\n     }\n-\n     return kryo;\n   }\n \n-  private static KryoReflectionFactorySupport getKryoRef(){\n+  private static KryoReflectionFactorySupport getKryoRef() {\n     KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n-    if(kryoRef == null) {\n+    if (kryoRef == null) {\n       kryoRef = new KryoReflectionFactorySupport();\n       kryoRefs.set(kryoRef);\n     }\n-\n     return kryoRef;\n   }\n \n@@ -43,10 +40,11 @@ public class KryoUtils {\n     return baos.toByteArray();\n   }\n \n-  public static Metric deserializeAlgoMetric(byte [] data) {\n+  public static Metric deserializeAlgoMetric(byte[] data) {\n     ByteArrayInputStream bais = new ByteArrayInputStream(data);\n     Input input = new Input(bais);\n     KryoReflectionFactorySupport kryoRef = getKryoRef();\n-    return ((Metric)kryoRef.readClassAndObject(input));\n+    return ((Metric) kryoRef.readClassAndObject(input));\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/1223/KryoUtils.java\nindex affd28fb014..9277e3ee63c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1223/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/1223/KryoUtils.java\n@@ -11,9 +11,9 @@ import java.io.ByteArrayOutputStream;\n \n public class KryoUtils {\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n-  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n+  private staticThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n \n-  private static Kryo getKryo(){\n+  private static static Kryo getKryo(){\n     Kryo kryo = kryos.get();\n     if(kryo == null) {\n       kryo = new Kryo();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}