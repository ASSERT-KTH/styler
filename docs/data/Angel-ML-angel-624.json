{
    "project_name": "Angel-ML-angel",
    "error_id": "624",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/624/IntFloatVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/624/IntFloatVectorStorage.java\nindex e59e3a1d4b3..c90f07f49fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/624/IntFloatVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/624/IntFloatVectorStorage.java\n@@ -164,7 +164,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-       set(ByteBufSerdeUtils.deserializeInt(buf), ByteBufSerdeUtils.deserializeFloat(buf));\n+        set(ByteBufSerdeUtils.deserializeInt(buf), ByteBufSerdeUtils.deserializeFloat(buf));\n       }\n     }\n   }\n@@ -369,7 +369,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n \n   @Override\n   public IntFloatVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n+    if (isSparse()) {\n       return new IntFloatVectorStorage(VFactory\n           .sortedFloatVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "363",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/624/IntFloatVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/624/IntFloatVectorStorage.java\nindex e59e3a1d4b3..9bf83709811 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/624/IntFloatVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/624/IntFloatVectorStorage.java\n@@ -62,7 +62,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n     if (keyType != KeyType.INT) {\n       throw new UnsupportedOperationException(\n           this.getClass().getName() + \" only support int type index now\");\n-    }\n+  }\n \n     if (func != null) {\n       for (int i = 0; i < indexSize; i++) {\n@@ -81,30 +81,23 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n       case T_FLOAT_SPARSE:\n         updateUseIntFloatSparse(buf, op);\n         break;\n-\n-      case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n-      case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n-      case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         updateUseIntFloatDense(buf, op);\n         break;\n-\n-      case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n   }\n@@ -164,8 +157,8 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-       set(ByteBufSerdeUtils.deserializeInt(buf), ByteBufSerdeUtils.deserializeFloat(buf));\n-      }\n+  set(ByteBufSerdeUtils.deserializeInt(buf), ByteBufSerdeUtils.deserializeFloat(buf));\n+  }\n     }\n   }\n \n@@ -199,8 +192,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public float get(int index) {\n     return vector.get(index - (int) indexOffset);\n   }\n@@ -259,8 +251,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getFloatValue());\n         }\n-\n-        break;\n+break;\n       }\n \n       case SORTED: {\n@@ -269,8 +260,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n-        break;\n+break;\n       }\n \n       default:\n@@ -370,16 +360,14 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n   @Override\n   public IntFloatVectorStorage adaptiveClone() {\n     if(isSparse()) {\n-      return new IntFloatVectorStorage(VFactory\n-          .sortedFloatVector(vector.getDim(), vector.getStorage().getIndices(),\n+      return new IntFloatVectorStorage(VFactory.sortedFloatVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n     VectorStorageUtils.serialize(buf, vector);\n@@ -395,4 +383,4 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/624/IntFloatVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/624/IntFloatVectorStorage.java\nindex e59e3a1d4b3..02983fdf68c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/624/IntFloatVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/624/IntFloatVectorStorage.java\n@@ -32,11 +32,13 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A int key double value storage: use a IntFloatVector as storage\n  */\n+\n public class IntFloatVectorStorage extends IntFloatStorage {\n \n   /**\n    * A vector storage: it can use DENSE,SPARSE and SORTED storage type\n    */\n+\n   private IntFloatVector vector;\n \n   public IntFloatVectorStorage(IntFloatVector vector, long indexOffset) {\n@@ -48,7 +50,6 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n     this(null, 0L);\n   }\n \n-\n   public IntFloatVector getVector() {\n     return vector;\n   }\n@@ -58,10 +59,10 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n   }\n \n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (keyType != KeyType.INT) {\n-      throw new UnsupportedOperationException(\n-          this.getClass().getName() + \" only support int type index now\");\n+      throw new UnsupportedOperationException(this.getClass().getName() + \" only support int type index now\");\n     }\n \n     if (func != null) {\n@@ -76,35 +77,29 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_FLOAT_SPARSE:\n         updateUseIntFloatSparse(buf, op);\n         break;\n-\n       case T_LONG_SPARSE:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n       case T_INT_SPARSE:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n       case T_FLOAT_DENSE:\n         updateUseIntFloatDense(buf, op);\n         break;\n-\n       case T_LONG_DENSE:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n       case T_INT_DENSE:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n   }\n@@ -164,7 +159,7 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n       }\n     } else {\n       for (int i = 0; i < size; i++) {\n-       set(ByteBufSerdeUtils.deserializeInt(buf), ByteBufSerdeUtils.deserializeFloat(buf));\n+        set(ByteBufSerdeUtils.deserializeInt(buf), ByteBufSerdeUtils.deserializeFloat(buf));\n       }\n     }\n   }\n@@ -199,7 +194,6 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n     }\n   }\n \n-\n   @Override\n   public float get(int index) {\n     return vector.get(index - (int) indexOffset);\n@@ -259,7 +253,6 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getFloatValue());\n         }\n-\n         break;\n       }\n \n@@ -269,7 +262,6 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n         break;\n       }\n \n@@ -369,16 +361,13 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n \n   @Override\n   public IntFloatVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n-      return new IntFloatVectorStorage(VFactory\n-          .sortedFloatVector(vector.getDim(), vector.getStorage().getIndices(),\n-              vector.getStorage().getValues()), indexOffset);\n+    if (isSparse()) {\n+      return new IntFloatVectorStorage(VFactory.sortedFloatVector(vector.getDim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n   }\n \n-\n   @Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n@@ -395,4 +384,5 @@ public class IntFloatVectorStorage extends IntFloatStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}