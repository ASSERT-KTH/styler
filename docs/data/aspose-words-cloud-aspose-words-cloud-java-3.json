{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "39",
                "column": "29",
                "severity": "error",
                "message": "'}' at column 29 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    private String responseBody = null;\n\n    public ApiException() { }\n\n    public ApiException(Throwable throwable) {\n        super(throwable);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/3/ApiException.java\nindex 686c0abd642..20a75234e9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/3/ApiException.java\n@@ -36,8 +36,8 @@ public class ApiException extends Exception {\n     private Map<String, List<String>> responseHeaders = null;\n     private String responseBody = null;\n \n-    public ApiException() { }\n-\n+    public ApiException() {\n+}\n     public ApiException(Throwable throwable) {\n         super(throwable);\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/3/ApiException.java\nindex 686c0abd642..9bc4e25cae9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/3/ApiException.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -33,10 +33,13 @@ import java.util.List;\n \n public class ApiException extends Exception {\n     private int code = 0;\n+\n     private Map<String, List<String>> responseHeaders = null;\n+\n     private String responseBody = null;\n \n-    public ApiException() { }\n+    public ApiException() {\n+    }\n \n     public ApiException(Throwable throwable) {\n         super(throwable);\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "39",
                    "column": "29",
                    "severity": "error",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/3/ApiException.java\nindex 686c0abd642..1e8d9a1e357 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/3/ApiException.java\n@@ -102,4 +102,4 @@ public class ApiException extends Exception {\n     public String getResponseBody() {\n         return responseBody;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/3/ApiException.java\nindex 686c0abd642..884b17a3c25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/3/ApiException.java\n@@ -32,74 +32,86 @@ import java.util.List;\n \n \n public class ApiException extends Exception {\n-    private int code = 0;\n-    private Map<String, List<String>> responseHeaders = null;\n-    private String responseBody = null;\n-\n-    public ApiException() { }\n-\n-    public ApiException(Throwable throwable) {\n-        super(throwable);\n-    }\n-\n-    public ApiException(String message) {\n-        super(message);\n-    }\n-\n-    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders, String responseBody) {\n-        super(message, throwable);\n-        this.code = code;\n-        this.responseHeaders = responseHeaders;\n-        this.responseBody = responseBody;\n-    }\n-\n-    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, String responseBody) {\n-        this(message, (Throwable) null, code, responseHeaders, responseBody);\n-    }\n-\n-    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders) {\n-        this(message, throwable, code, responseHeaders, null);\n-    }\n-\n-    public ApiException(int code, Map<String, List<String>> responseHeaders, String responseBody) {\n-        this((String) null, (Throwable) null, code, responseHeaders, responseBody);\n-    }\n-\n-    public ApiException(int code, String message) {\n-        super(message);\n-        this.code = code;\n-    }\n-\n-    public ApiException(int code, String message, Map<String, List<String>> responseHeaders, String responseBody) {\n-        this(code, message);\n-        this.responseHeaders = responseHeaders;\n-        this.responseBody = responseBody;\n-    }\n+\n+  private int code = 0;\n+\n+\n+  private Map<String, List<String>> responseHeaders = null;\n+\n+\n+  private String responseBody = null;\n+\n+\n+  public ApiException() {\n+  }\n+\n+  public ApiException(Throwable throwable) {\n+    super(throwable);\n+  }\n+\n+  public ApiException(String message) {\n+    super(message);\n+  }\n+\n+  public ApiException(String message,  Throwable throwable, int code,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    super(message, throwable);\n+      this.code = code;\n+      this.responseHeaders = responseHeaders;\n+      this.responseBody = responseBody;\n+  }\n+\n+  public ApiException(String message, int code,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    this(message, (Throwable) null, code, responseHeaders, responseBody);\n+  }\n+\n+  public ApiException(String message,  Throwable throwable, int code,  Map<String, List<String>> responseHeaders) {\n+    this(message, throwable, code, responseHeaders, null);\n+  }\n+\n+  public ApiException(int code,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    this((String) null, (Throwable) null, code, responseHeaders, responseBody);\n+  }\n+\n+  public ApiException(int code,  String message) {\n+    super(message);\n+      this.code = code;\n+  }\n+\n+  public ApiException(int code,  String message,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    this(code, message);\n+      this.responseHeaders = responseHeaders;\n+      this.responseBody = responseBody;\n+  }\n \n     /**\n      * Get the HTTP status code.\n      *\n      * @return HTTP status code\n      */\n-    public int getCode() {\n-        return code;\n-    }\n+\n+\n+  public int getCode() {\n+    return code;\n+  }\n \n     /**\n      * Get the HTTP response headers.\n      *\n      * @return A map of list of string\n      */\n-    public Map<String, List<String>> getResponseHeaders() {\n-        return responseHeaders;\n-    }\n+\n+  public Map<String, List<String>> getResponseHeaders() {\n+    return responseHeaders;\n+  }\n \n     /**\n      * Get the HTTP response body.\n      *\n      * @return Response body in the form of string\n      */\n-    public String getResponseBody() {\n-        return responseBody;\n-    }\n-}\n+\n+  public String getResponseBody() {\n+    return responseBody;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/3/ApiException.java\nindex 686c0abd642..20a75234e9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/3/ApiException.java\n@@ -36,8 +36,8 @@ public class ApiException extends Exception {\n     private Map<String, List<String>> responseHeaders = null;\n     private String responseBody = null;\n \n-    public ApiException() { }\n-\n+    public ApiException() {\n+}\n     public ApiException(Throwable throwable) {\n         super(throwable);\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "41",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/3/ApiException.java\nindex 686c0abd642..2b355774671 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/3/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/3/ApiException.java\n@@ -36,9 +36,9 @@ public class ApiException extends Exception {\n     private Map<String, List<String>> responseHeaders = null;\n     private String responseBody = null;\n \n-    public ApiException() { }\n+    public ApiException() {\n \n-    public ApiException(Throwable throwable) {\n+        } public ApiException(Throwable throwable) {\n         super(throwable);\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}