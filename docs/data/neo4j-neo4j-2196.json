{
    "project_name": "neo4j-neo4j",
    "error_id": "2196",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "144",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "276",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "307",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "343",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2196/Util.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2196/Util.java\nindex 5340253042c..a8ed2b8499e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2196/Util.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2196/Util.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.HashMap;\n@@ -44,36 +45,33 @@ public class Util\n \n     /**\n      * Constructs a path to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n+     *\n+     * @param node         The start node\n+     * @param predecessors The predecessors set\n+     * @param includeNode  Boolean which determines if the start node should be included\n+     *                     in the paths\n+     * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+     *                     reversed\n      * @return A path as a list of nodes.\n      */\n-    public static List<Node> constructSinglePathToNodeAsNodes( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n-        boolean backwards )\n+    public static List<Node> constructSinglePathToNodeAsNodes(Node node,\n+                                                              Map<Node, List<Relationship>> predecessors, boolean includeNode,\n+                                                              boolean backwards)\n     {\n         List<Entity> singlePathToNode = constructSinglePathToNode(\n-            node, predecessors, includeNode, backwards );\n+          node, predecessors, includeNode, backwards);\n         Iterator<Entity> iterator = singlePathToNode.iterator();\n         // When going backwards and not including the node the first element is\n         // a relationship. Thus skip it.\n-        if ( backwards && !includeNode && iterator.hasNext() )\n+        if (backwards && !includeNode && iterator.hasNext())\n         {\n             iterator.next();\n         }\n         LinkedList<Node> path = new LinkedList<>();\n-        while ( iterator.hasNext() )\n+        while (iterator.hasNext())\n         {\n-            path.addLast( (Node) iterator.next() );\n-            if ( iterator.hasNext() )\n+            path.addLast((Node) iterator.next());\n+            if (iterator.hasNext())\n             {\n                 iterator.next();\n             }\n@@ -83,31 +81,29 @@ public class Util\n \n     /**\n      * Constructs a path to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n+     *\n+     * @param node         The start node\n+     * @param predecessors The predecessors set\n+     * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+     *                     reversed\n      * @return A path as a list of relationships.\n      */\n     public static List<Relationship> constructSinglePathToNodeAsRelationships(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+      Node node, Map<Node, List<Relationship>> predecessors, boolean backwards)\n     {\n         List<Entity> singlePathToNode = constructSinglePathToNode(\n-            node, predecessors, true, backwards );\n+          node, predecessors, true, backwards);\n         Iterator<Entity> iterator = singlePathToNode.iterator();\n         // Skip the first, it is a node\n-        if ( iterator.hasNext() )\n+        if (iterator.hasNext())\n         {\n             iterator.next();\n         }\n         LinkedList<Relationship> path = new LinkedList<>();\n-        while ( iterator.hasNext() )\n+        while (iterator.hasNext())\n         {\n-            path.addLast( (Relationship) iterator.next() );\n-            if ( iterator.hasNext() )\n+            path.addLast((Relationship) iterator.next());\n+            if (iterator.hasNext())\n             {\n                 iterator.next();\n             }\n@@ -118,117 +114,108 @@ public class Util\n     /**\n      * Constructs a path to a given node, for a given set of predecessors. The\n      * result is a list of alternating Node/Relationship.\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n+     *\n+     * @param node         The start node\n+     * @param predecessors The predecessors set\n+     * @param includeNode  Boolean which determines if the start node should be included\n+     *                     in the paths\n+     * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+     *                     reversed\n      * @return A path as a list of alternating Node/Relationship.\n      */\n-    public static List<Entity> constructSinglePathToNode( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n-        boolean backwards )\n+    public static List<Entity> constructSinglePathToNode(Node node,\n+                                                         Map<Node, List<Relationship>> predecessors, boolean includeNode,\n+                                                         boolean backwards)\n     {\n         LinkedList<Entity> path = new LinkedList<>();\n-        if ( includeNode )\n+        if (includeNode)\n         {\n-            if ( backwards )\n+            if (backwards)\n             {\n-                path.addLast( node );\n-            }\n-            else\n+                path.addLast(node);\n+            } else\n             {\n-                path.addFirst( node );\n+                path.addFirst(node);\n             }\n         }\n         Node currentNode = node;\n-        List<Relationship> currentPreds = predecessors.get( currentNode );\n+        List<Relationship> currentPreds = predecessors.get(currentNode);\n         // Traverse predecessors until we have added a node without predecessors\n-        while ( currentPreds != null && !currentPreds.isEmpty() )\n+        while (currentPreds != null && !currentPreds.isEmpty())\n         {\n             // Get next node\n-            Relationship currentRelationship = currentPreds.get( 0 );\n-            currentNode = currentRelationship.getOtherNode( currentNode );\n+            Relationship currentRelationship = currentPreds.get(0);\n+            currentNode = currentRelationship.getOtherNode(currentNode);\n             // Add current\n-            if ( backwards )\n+            if (backwards)\n             {\n-                path.addLast( currentRelationship );\n-                path.addLast( currentNode );\n-            }\n-            else\n+                path.addLast(currentRelationship);\n+                path.addLast(currentNode);\n+            } else\n             {\n-                path.addFirst( currentRelationship );\n-                path.addFirst( currentNode );\n+                path.addFirst(currentRelationship);\n+                path.addFirst(currentNode);\n             }\n             // Continue with the next node\n-            currentPreds = predecessors.get( currentNode );\n+            currentPreds = predecessors.get(currentNode);\n         }\n         return path;\n     }\n \n     /**\n      * Constructs all paths to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n+     *\n+     * @param node         The start node\n+     * @param predecessors The predecessors set\n+     * @param includeNode  Boolean which determines if the start node should be included\n+     *                     in the paths\n+     * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+     *                     reversed\n      * @return\n      */\n-    public static List<List<Node>> constructAllPathsToNodeAsNodes( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n-        boolean backwards )\n+    public static List<List<Node>> constructAllPathsToNodeAsNodes(Node node,\n+                                                                  Map<Node, List<Relationship>> predecessors, boolean includeNode,\n+                                                                  boolean backwards)\n     {\n-        return new LinkedList<>( constructAllPathsToNodeAsNodeLinkedLists( node, predecessors, includeNode, backwards ) );\n+        return new LinkedList<>(constructAllPathsToNodeAsNodeLinkedLists(node, predecessors, includeNode, backwards));\n     }\n \n     /**\n      * Same as constructAllPathsToNodeAsNodes, but different return type\n      */\n     protected static List<LinkedList<Node>> constructAllPathsToNodeAsNodeLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n-        boolean includeNode, boolean backwards )\n+      Node node, Map<Node, List<Relationship>> predecessors,\n+      boolean includeNode, boolean backwards)\n     {\n         List<LinkedList<Node>> paths = new LinkedList<>();\n-        List<Relationship> current = predecessors.get( node );\n+        List<Relationship> current = predecessors.get(node);\n         // First build all paths to this node's predecessors\n-        if ( current != null )\n+        if (current != null)\n         {\n-            for ( Relationship r : current )\n+            for (Relationship r : current)\n             {\n-                Node n = r.getOtherNode( node );\n-                paths.addAll( constructAllPathsToNodeAsNodeLinkedLists( n,\n-                    predecessors, true, backwards ) );\n+                Node n = r.getOtherNode(node);\n+                paths.addAll(constructAllPathsToNodeAsNodeLinkedLists(n,\n+                  predecessors, true, backwards));\n             }\n         }\n         // If no paths exists to this node, just create an empty one (which will\n         // have this node added to it)\n-        if ( paths.isEmpty() )\n+        if (paths.isEmpty())\n         {\n-            paths.add( new LinkedList<>() );\n+            paths.add(new LinkedList<>());\n         }\n         // Then add this node to all those paths\n-        if ( includeNode )\n+        if (includeNode)\n         {\n-            for ( LinkedList<Node> path : paths )\n+            for (LinkedList<Node> path : paths)\n             {\n-                if ( backwards )\n+                if (backwards)\n                 {\n-                    path.addFirst( node );\n-                }\n-                else\n+                    path.addFirst(node);\n+                } else\n                 {\n-                    path.addLast( node );\n+                    path.addLast(node);\n                 }\n             }\n         }\n@@ -237,75 +224,70 @@ public class Util\n \n     /**\n      * Constructs all paths to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n+     *\n+     * @param node         The start node\n+     * @param predecessors The predecessors set\n+     * @param includeNode  Boolean which determines if the start node should be included\n+     *                     in the paths\n+     * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+     *                     reversed\n      * @return List of lists of alternating Node/Relationship.\n      */\n     public static List<List<Entity>> constructAllPathsToNode(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n-        boolean includeNode, boolean backwards )\n+      Node node, Map<Node, List<Relationship>> predecessors,\n+      boolean includeNode, boolean backwards)\n     {\n-        return new LinkedList<>( constructAllPathsToNodeAsLinkedLists( node, predecessors, includeNode, backwards ) );\n+        return new LinkedList<>(constructAllPathsToNodeAsLinkedLists(node, predecessors, includeNode, backwards));\n     }\n \n     /**\n      * Same as constructAllPathsToNode, but different return type\n      */\n     protected static List<LinkedList<Entity>> constructAllPathsToNodeAsLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n-        boolean includeNode, boolean backwards )\n+      Node node, Map<Node, List<Relationship>> predecessors,\n+      boolean includeNode, boolean backwards)\n     {\n         List<LinkedList<Entity>> paths = new LinkedList<>();\n-        List<Relationship> current = predecessors.get( node );\n+        List<Relationship> current = predecessors.get(node);\n         // First build all paths to this node's predecessors\n-        if ( current != null )\n+        if (current != null)\n         {\n-            for ( Relationship r : current )\n+            for (Relationship r : current)\n             {\n-                Node n = r.getOtherNode( node );\n+                Node n = r.getOtherNode(node);\n                 List<LinkedList<Entity>> newPaths = constructAllPathsToNodeAsLinkedLists(\n-                    n, predecessors, true, backwards );\n-                paths.addAll( newPaths );\n+                  n, predecessors, true, backwards);\n+                paths.addAll(newPaths);\n                 // Add the relationship\n-                for ( LinkedList<Entity> path : newPaths )\n+                for (LinkedList<Entity> path : newPaths)\n                 {\n-                    if ( backwards )\n+                    if (backwards)\n                     {\n-                        path.addFirst( r );\n-                    }\n-                    else\n+                        path.addFirst(r);\n+                    } else\n                     {\n-                        path.addLast( r );\n+                        path.addLast(r);\n                     }\n                 }\n             }\n         }\n         // If no paths exists to this node, just create an empty one (which will\n         // have this node added to it)\n-        if ( paths.isEmpty() )\n+        if (paths.isEmpty())\n         {\n-            paths.add( new LinkedList<>() );\n+            paths.add(new LinkedList<>());\n         }\n         // Then add this node to all those paths\n-        if ( includeNode )\n+        if (includeNode)\n         {\n-            for ( LinkedList<Entity> path : paths )\n+            for (LinkedList<Entity> path : paths)\n             {\n-                if ( backwards )\n+                if (backwards)\n                 {\n-                    path.addFirst( node );\n-                }\n-                else\n+                    path.addFirst(node);\n+                } else\n                 {\n-                    path.addLast( node );\n+                    path.addLast(node);\n                 }\n             }\n         }\n@@ -314,56 +296,53 @@ public class Util\n \n     /**\n      * Constructs all paths to a given node, for a given set of predecessors.\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n+     *\n+     * @param node         The start node\n+     * @param predecessors The predecessors set\n+     * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+     *                     reversed\n      * @return List of lists of relationships.\n      */\n     public static List<List<Relationship>> constructAllPathsToNodeAsRelationships(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+      Node node, Map<Node, List<Relationship>> predecessors, boolean backwards)\n     {\n-        return new LinkedList<>( constructAllPathsToNodeAsRelationshipLinkedLists( node, predecessors, backwards ) );\n+        return new LinkedList<>(constructAllPathsToNodeAsRelationshipLinkedLists(node, predecessors, backwards));\n     }\n \n     /**\n      * Same as constructAllPathsToNodeAsRelationships, but different return type\n      */\n     protected static List<LinkedList<Relationship>> constructAllPathsToNodeAsRelationshipLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+      Node node, Map<Node, List<Relationship>> predecessors, boolean backwards)\n     {\n         List<LinkedList<Relationship>> paths = new LinkedList<>();\n-        List<Relationship> current = predecessors.get( node );\n+        List<Relationship> current = predecessors.get(node);\n         // First build all paths to this node's predecessors\n-        if ( current != null )\n+        if (current != null)\n         {\n-            for ( Relationship r : current )\n+            for (Relationship r : current)\n             {\n-                Node n = r.getOtherNode( node );\n+                Node n = r.getOtherNode(node);\n                 List<LinkedList<Relationship>> newPaths = constructAllPathsToNodeAsRelationshipLinkedLists(\n-                    n, predecessors, backwards );\n-                paths.addAll( newPaths );\n+                  n, predecessors, backwards);\n+                paths.addAll(newPaths);\n                 // Add the relationship\n-                for ( LinkedList<Relationship> path : newPaths )\n+                for (LinkedList<Relationship> path : newPaths)\n                 {\n-                    if ( backwards )\n+                    if (backwards)\n                     {\n-                        path.addFirst( r );\n-                    }\n-                    else\n+                        path.addFirst(r);\n+                    } else\n                     {\n-                        path.addLast( r );\n+                        path.addLast(r);\n                     }\n                 }\n             }\n         }\n         // If no paths exists to this node, just create an empty one\n-        if ( paths.isEmpty() )\n+        if (paths.isEmpty())\n         {\n-            paths.add( new LinkedList<>() );\n+            paths.add(new LinkedList<>());\n         }\n         return paths;\n     }\n@@ -374,34 +353,34 @@ public class Util\n      */\n     public static class PathCounter\n     {\n-        Map<Node,List<Relationship>> predecessors;\n-        Map<Node,Integer> pathCounts = new HashMap<>();\n+        Map<Node, List<Relationship>> predecessors;\n+        Map<Node, Integer> pathCounts = new HashMap<>();\n \n-        public PathCounter( Map<Node,List<Relationship>> predecessors )\n+        public PathCounter(Map<Node, List<Relationship>> predecessors)\n         {\n             super();\n             this.predecessors = predecessors;\n         }\n \n-        public int getNumberOfPathsToNode( Node node )\n+        public int getNumberOfPathsToNode(Node node)\n         {\n-            Integer i = pathCounts.get( node );\n-            if ( i != null )\n+            Integer i = pathCounts.get(node);\n+            if (i != null)\n             {\n                 return i;\n             }\n-            List<Relationship> preds = predecessors.get( node );\n-            if ( preds == null || preds.isEmpty() )\n+            List<Relationship> preds = predecessors.get(node);\n+            if (preds == null || preds.isEmpty())\n             {\n                 return 1;\n             }\n             int result = 0;\n-            for ( Relationship relationship : preds )\n+            for (Relationship relationship : preds)\n             {\n-                result += getNumberOfPathsToNode( relationship\n-                    .getOtherNode( node ) );\n+                result += getNumberOfPathsToNode(relationship\n+                  .getOtherNode(node));\n             }\n-            pathCounts.put( node, result );\n+            pathCounts.put(node, result);\n             return result;\n         }\n     }\n@@ -409,24 +388,25 @@ public class Util\n     /**\n      * This can be used to generate the inverse of a structure with\n      * predecessors, i.e. the successors.\n+     *\n      * @param predecessors\n      * @return\n      */\n-    public static Map<Node,List<Relationship>> reversedPredecessors(\n-        Map<Node,List<Relationship>> predecessors )\n+    public static Map<Node, List<Relationship>> reversedPredecessors(\n+      Map<Node, List<Relationship>> predecessors)\n     {\n-        Map<Node,List<Relationship>> result = new HashMap<>();\n+        Map<Node, List<Relationship>> result = new HashMap<>();\n         Set<Node> keys = predecessors.keySet();\n-        for ( Node node : keys )\n+        for (Node node : keys)\n         {\n-            List<Relationship> preds = predecessors.get( node );\n-            for ( Relationship relationship : preds )\n+            List<Relationship> preds = predecessors.get(node);\n+            for (Relationship relationship : preds)\n             {\n-                Node otherNode = relationship.getOtherNode( node );\n+                Node otherNode = relationship.getOtherNode(node);\n                 // We add node as a predecessor to otherNode, instead of the\n                 // other way around\n-                List<Relationship> otherPreds = result.computeIfAbsent( otherNode, k -> new LinkedList<>() );\n-                otherPreds.add( relationship );\n+                List<Relationship> otherPreds = result.computeIfAbsent(otherNode, k -> new LinkedList<>());\n+                otherPreds.add(relationship);\n             }\n         }\n         return result;\n",
            "diff_size": 176
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}