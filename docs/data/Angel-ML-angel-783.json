{
    "project_name": "Angel-ML-angel",
    "error_id": "783",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/783/DenseServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/783/DenseServerRowsStorage.java\nindex b910c046b84..9fbab5ba202 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/783/DenseServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/783/DenseServerRowsStorage.java\n@@ -42,7 +42,7 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n    * Create new DenseServerRowsStorage\n    *\n    * @param rowIdOffset row id offset\n-   * @param rowNum row number\n+   * @param rowNum      row number\n    */\n   public DenseServerRowsStorage(int rowIdOffset, int rowNum) {\n     super(rowIdOffset);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/783/DenseServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/783/DenseServerRowsStorage.java\nindex b910c046b84..8cc33aef249 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/783/DenseServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/783/DenseServerRowsStorage.java\n@@ -89,8 +89,7 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n \n   @Override\n   public Iterator<Entry<Integer, ServerRow>> iterator() {\n-\n-    return new Iterator<Map.Entry<Integer, ServerRow>>() {\n+  return new Iterator<Map.Entry<Integer, ServerRow>>() {\n       int currIndex = 0;\n \n       @Override\n@@ -100,9 +99,8 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n \n       @Override\n       public Map.Entry<Integer, ServerRow> next() {\n-        Map.Entry<Integer, ServerRow> entry = new AbstractMap.SimpleEntry(currIndex + rowIdOffset,\n-            data[currIndex]);\n-        currIndex++;\n+        Map.Entry<Integer, ServerRow> entry = new AbstractMap.SimpleEntry(currIndex + rowIdOffset, data[currIndex]);\n+currIndex++;\n         return entry;\n       }\n     };\n@@ -196,4 +194,4 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/783/DenseServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/783/DenseServerRowsStorage.java\nindex b910c046b84..a784bab9276 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/783/DenseServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/783/DenseServerRowsStorage.java\n@@ -31,11 +31,13 @@ import java.util.Map.Entry;\n /**\n  * Row-based matrix partition storage, it use a server row array as inner storage\n  */\n+\n public class DenseServerRowsStorage extends ServerRowsStorage {\n \n   /**\n    * Server rows\n    */\n+\n   private ServerRow[] data;\n \n   /**\n@@ -44,6 +46,7 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n    * @param rowIdOffset row id offset\n    * @param rowNum row number\n    */\n+\n   public DenseServerRowsStorage(int rowIdOffset, int rowNum) {\n     super(rowIdOffset);\n     this.data = new ServerRow[rowNum];\n@@ -71,6 +74,7 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n   @Override\n   public void putRows(List<Integer> rowIds, List<ServerRow> rows) {\n     assert rowIds.size() == rows.size();\n+\n     int size = rowIds.size();\n     for (int i = 0; i < size; i++) {\n       putRow(rowIds.get(i), rows.get(i));\n@@ -89,8 +93,8 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n \n   @Override\n   public Iterator<Entry<Integer, ServerRow>> iterator() {\n-\n     return new Iterator<Map.Entry<Integer, ServerRow>>() {\n+\n       int currIndex = 0;\n \n       @Override\n@@ -100,18 +104,16 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n \n       @Override\n       public Map.Entry<Integer, ServerRow> next() {\n-        Map.Entry<Integer, ServerRow> entry = new AbstractMap.SimpleEntry(currIndex + rowIdOffset,\n-            data[currIndex]);\n+        Map.Entry<Integer, ServerRow> entry = new AbstractMap.SimpleEntry(currIndex + rowIdOffset, data[currIndex]);\n         currIndex++;\n         return entry;\n       }\n+\n     };\n   }\n \n   @Override\n-  public void init() {\n-\n-  }\n+  public void init() {}\n \n   @Override\n   public void reset() {\n@@ -138,10 +140,12 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n     super.serialize(output);\n     // Array size\n     output.writeInt(data.length);\n+\n     int writeIndex = output.writerIndex();\n \n     // Actual write size\n     output.writeInt(0);\n+\n     int writeRowNum = 0;\n \n     // Rows data\n@@ -156,7 +160,6 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n         writeRowNum++;\n       }\n     }\n-\n     output.setInt(writeIndex, writeRowNum);\n   }\n \n@@ -164,10 +167,12 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n   public void deserialize(ByteBuf input) {\n     super.deserialize(input);\n     // Array size\n+\n     int len = input.readInt();\n     data = new ServerRow[len];\n \n     // Actual write row number\n+\n     int writeRowNum = input.readInt();\n \n     // Rows data\n@@ -196,4 +201,5 @@ public class DenseServerRowsStorage extends ServerRowsStorage {\n     }\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}