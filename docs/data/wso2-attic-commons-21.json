{
    "project_name": "wso2-attic-commons",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "87",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * Standard environment variable that represents the current date and time\n     */\n    public static final String ENVIRONMENT_CURRENT_DATETIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n\n    /**\n     * Returns true always because this module supports designators.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/21/CurrentEnvModule.java\nindex 6a74443a73c..f536e0d4329 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/21/CurrentEnvModule.java\n@@ -84,14 +84,15 @@ public class CurrentEnvModule extends AttributeFinderModule {\n     /**\n      * Standard environment variable that represents the current date and time\n      */\n-    public static final String ENVIRONMENT_CURRENT_DATETIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n+    public static final String ENVIRONMENT_CURRENT_DATETIME =\n+\t\t\t\t\t\"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n \n-    /**\n+     /**\n      * Returns true always because this module supports designators.\n      * \n      * @return true always\n      */\n-    public boolean isDesignatorSupported() {\n+     public boolean isDesignatorSupported() {\n         return true;\n     }\n \n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/21/CurrentEnvModule.java\nindex 6a74443a73c..7a2de597e50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/21/CurrentEnvModule.java\n@@ -8,7 +8,7 @@\n  *\n  *   1. Redistribution of source code must retain the above copyright notice,\n  *      this list of conditions and the following disclaimer.\n- * \n+ *\n  *   2. Redistribution in binary form must reproduce the above copyright\n  *      notice, this list of conditions and the following disclaimer in the\n  *      documentation and/or other materials provided with the distribution.\n@@ -16,7 +16,7 @@\n  * Neither the name of Sun Microsystems, Inc. or the names of contributors may\n  * be used to endorse or promote products derived from this software without\n  * specific prior written permission.\n- * \n+ *\n  * This software is provided \"AS IS,\" without a warranty of any kind. ALL\n  * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING\n  * ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\n@@ -65,139 +65,141 @@ import java.util.Set;\n  * evaluation), but does allow it. Any caching, as well as details of which time to use (time at the\n  * PEP, PDP, etc.) is taken care of by the <code>EvaluationCtx</code> which is used to supply the\n  * current values.\n- * \n- * @since 1.0\n+ *\n  * @author Seth Proctor\n+ * @since 1.0\n  */\n public class CurrentEnvModule extends AttributeFinderModule {\n \n-    /**\n-     * Standard environment variable that represents the current time\n-     */\n-    public static final String ENVIRONMENT_CURRENT_TIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-time\";\n-\n-    /**\n-     * Standard environment variable that represents the current date\n-     */\n-    public static final String ENVIRONMENT_CURRENT_DATE = \"urn:oasis:names:tc:xacml:1.0:environment:current-date\";\n-\n-    /**\n-     * Standard environment variable that represents the current date and time\n-     */\n-    public static final String ENVIRONMENT_CURRENT_DATETIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n-\n-    /**\n-     * Returns true always because this module supports designators.\n-     * \n-     * @return true always\n-     */\n-    public boolean isDesignatorSupported() {\n-        return true;\n-    }\n-\n-    /**\n-     * Returns a <code>Set</code> with a single <code>String</code> specifying that environment\n-     * attributes are supported by this module.\n-     * \n-     * @return a <code>Set</code> with <code>AttributeDesignator</code> included\n-     */\n-    public Set<String> getSupportedCategories() {\n-        HashSet<String> set = new HashSet<String>();\n-        set.add(XACMLConstants.ENT_CATEGORY);\n-        return set;\n-    }\n-\n-    /**\n-     * Used to get the current time, date, or dateTime. If one of those values isn't being asked\n-     * for, or if the types are wrong, then an empty bag is returned.\n-     * \n-     * @param attributeType the datatype of the attributes to find, which must be time, date, or\n-     *            dateTime for this module to resolve a value\n-     * @param attributeId the identifier of the attributes to find, which must be one of the three\n-     *            ENVIRONMENT_* fields for this module to resolve a value\n-     * @param issuer the issuer of the attributes, or null if unspecified\n-     * @param category the category of the attribute \n-     * @param context the representation of the request data\n-     * \n-     * @return the result of attribute retrieval, which will be a bag with a single attribute, an\n-     *         empty bag, or an error\n-     */\n-    public EvaluationResult findAttribute(URI attributeType, URI attributeId, String issuer,\n-            URI category, EvaluationCtx context) {\n-        // we only know about environment attributes\n-        if (!XACMLConstants.ENT_CATEGORY.equals(category.toString())){\n-            return new EvaluationResult(BagAttribute.createEmptyBag(attributeType));\n-        }\n-        // figure out which attribute we're looking for\n-        String attrName = attributeId.toString();\n-\n-        if (attrName.equals(ENVIRONMENT_CURRENT_TIME)) {\n-            return handleTime(attributeType, issuer, context);\n-        } else if (attrName.equals(ENVIRONMENT_CURRENT_DATE)) {\n-            return handleDate(attributeType, issuer, context);\n-        } else if (attrName.equals(ENVIRONMENT_CURRENT_DATETIME)) {\n-            return handleDateTime(attributeType, issuer, context);\n-        }\n-\n-        // if we got here, then it's an attribute that we don't know\n-        return new EvaluationResult(BagAttribute.createEmptyBag(attributeType));\n+  /**\n+   * Standard environment variable that represents the current time\n+   */\n+  public static final String ENVIRONMENT_CURRENT_TIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-time\";\n+\n+  /**\n+   * Standard environment variable that represents the current date\n+   */\n+  public static final String ENVIRONMENT_CURRENT_DATE = \"urn:oasis:names:tc:xacml:1.0:environment:current-date\";\n+\n+  /**\n+   * Standard environment variable that represents the current date and time\n+   */\n+  public static final String ENVIRONMENT_CURRENT_DATETIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n+\n+  /**\n+   * Returns true always because this module supports designators.\n+   *\n+   * @return true always\n+   */\n+  public boolean isDesignatorSupported() {\n+    return true;\n+  }\n+\n+  /**\n+   * Returns a <code>Set</code> with a single <code>String</code> specifying that environment\n+   * attributes are supported by this module.\n+   *\n+   * @return a <code>Set</code> with <code>AttributeDesignator</code> included\n+   */\n+  public Set<String> getSupportedCategories() {\n+    HashSet<String> set = new HashSet<String>();\n+    set.add(XACMLConstants.ENT_CATEGORY);\n+    return set;\n+  }\n+\n+  /**\n+   * Used to get the current time, date, or dateTime. If one of those values isn't being asked\n+   * for, or if the types are wrong, then an empty bag is returned.\n+   *\n+   * @param attributeType the datatype of the attributes to find, which must be time, date, or\n+   *                      dateTime for this module to resolve a value\n+   * @param attributeId   the identifier of the attributes to find, which must be one of the three\n+   *                      ENVIRONMENT_* fields for this module to resolve a value\n+   * @param issuer        the issuer of the attributes, or null if unspecified\n+   * @param category      the category of the attribute\n+   * @param context       the representation of the request data\n+   * @return the result of attribute retrieval, which will be a bag with a single attribute, an\n+   * empty bag, or an error\n+   */\n+  public EvaluationResult findAttribute(URI attributeType, URI attributeId, String issuer,\n+                                        URI category, EvaluationCtx context) {\n+    // we only know about environment attributes\n+    if (!XACMLConstants.ENT_CATEGORY.equals(category.toString())) {\n+      return new EvaluationResult(BagAttribute.createEmptyBag(attributeType));\n     }\n-\n-    /**\n-     * Handles requests for the current Time.\n-     */\n-    private EvaluationResult handleTime(URI type, String issuer, EvaluationCtx context) {\n-        // make sure they're asking for a time attribute\n-        if (!type.toString().equals(TimeAttribute.identifier))\n-            return new EvaluationResult(BagAttribute.createEmptyBag(type));\n-\n-        // get the value from the context\n-        return makeBag(context.getCurrentTime());\n+    // figure out which attribute we're looking for\n+    String attrName = attributeId.toString();\n+\n+    if (attrName.equals(ENVIRONMENT_CURRENT_TIME)) {\n+      return handleTime(attributeType, issuer, context);\n+    } else if (attrName.equals(ENVIRONMENT_CURRENT_DATE)) {\n+      return handleDate(attributeType, issuer, context);\n+    } else if (attrName.equals(ENVIRONMENT_CURRENT_DATETIME)) {\n+      return handleDateTime(attributeType, issuer, context);\n     }\n \n-    /**\n-     * Handles requests for the current Date.\n-     */\n-    private EvaluationResult handleDate(URI type, String issuer, EvaluationCtx context) {\n-        // make sure they're asking for a date attribute\n-        if (!type.toString().equals(DateAttribute.identifier))\n-            return new EvaluationResult(BagAttribute.createEmptyBag(type));\n-\n-        // get the value from the context\n-        return makeBag(context.getCurrentDate());\n+    // if we got here, then it's an attribute that we don't know\n+    return new EvaluationResult(BagAttribute.createEmptyBag(attributeType));\n+  }\n+\n+  /**\n+   * Handles requests for the current Time.\n+   */\n+  private EvaluationResult handleTime(URI type, String issuer, EvaluationCtx context) {\n+    // make sure they're asking for a time attribute\n+    if (!type.toString().equals(TimeAttribute.identifier)) {\n+      return new EvaluationResult(BagAttribute.createEmptyBag(type));\n     }\n \n-    /**\n-     * Handles requests for the current DateTime.\n-     */\n-    private EvaluationResult handleDateTime(URI type, String issuer, EvaluationCtx context) {\n-        // make sure they're asking for a dateTime attribute\n-        if (!type.toString().equals(DateTimeAttribute.identifier))\n-            return new EvaluationResult(BagAttribute.createEmptyBag(type));\n-\n-        // get the value from the context\n-        return makeBag(context.getCurrentDateTime());\n+    // get the value from the context\n+    return makeBag(context.getCurrentTime());\n+  }\n+\n+  /**\n+   * Handles requests for the current Date.\n+   */\n+  private EvaluationResult handleDate(URI type, String issuer, EvaluationCtx context) {\n+    // make sure they're asking for a date attribute\n+    if (!type.toString().equals(DateAttribute.identifier)) {\n+      return new EvaluationResult(BagAttribute.createEmptyBag(type));\n     }\n \n-    /**\n-     * Private helper that generates a new processing error status and includes the given string.\n-     */\n-    private EvaluationResult makeProcessingError(String message) {\n-        ArrayList code = new ArrayList();\n-        code.add(Status.STATUS_PROCESSING_ERROR);\n-        return new EvaluationResult(new Status(code, message));\n+    // get the value from the context\n+    return makeBag(context.getCurrentDate());\n+  }\n+\n+  /**\n+   * Handles requests for the current DateTime.\n+   */\n+  private EvaluationResult handleDateTime(URI type, String issuer, EvaluationCtx context) {\n+    // make sure they're asking for a dateTime attribute\n+    if (!type.toString().equals(DateTimeAttribute.identifier)) {\n+      return new EvaluationResult(BagAttribute.createEmptyBag(type));\n     }\n \n-    /**\n-     * Private helper that makes a bag containing only the given attribute.\n-     */\n-    private EvaluationResult makeBag(AttributeValue attribute) {\n-        Set set = new HashSet();\n-        set.add(attribute);\n-\n-        BagAttribute bag = new BagAttribute(attribute.getType(), set);\n-\n-        return new EvaluationResult(bag);\n-    }\n+    // get the value from the context\n+    return makeBag(context.getCurrentDateTime());\n+  }\n+\n+  /**\n+   * Private helper that generates a new processing error status and includes the given string.\n+   */\n+  private EvaluationResult makeProcessingError(String message) {\n+    ArrayList code = new ArrayList();\n+    code.add(Status.STATUS_PROCESSING_ERROR);\n+    return new EvaluationResult(new Status(code, message));\n+  }\n+\n+  /**\n+   * Private helper that makes a bag containing only the given attribute.\n+   */\n+  private EvaluationResult makeBag(AttributeValue attribute) {\n+    Set set = new HashSet();\n+    set.add(attribute);\n+\n+    BagAttribute bag = new BagAttribute(attribute.getType(), set);\n+\n+    return new EvaluationResult(bag);\n+  }\n \n }\n",
            "diff_size": 143
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/21/CurrentEnvModule.java\nindex 6a74443a73c..7a36f8593a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/21/CurrentEnvModule.java\n@@ -200,4 +200,4 @@ public class CurrentEnvModule extends AttributeFinderModule {\n         return new EvaluationResult(bag);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/21/CurrentEnvModule.java\nindex 6a74443a73c..f536e0d4329 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/21/CurrentEnvModule.java\n@@ -84,14 +84,15 @@ public class CurrentEnvModule extends AttributeFinderModule {\n     /**\n      * Standard environment variable that represents the current date and time\n      */\n-    public static final String ENVIRONMENT_CURRENT_DATETIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n+    public static final String ENVIRONMENT_CURRENT_DATETIME =\n+\t\t\t\t\t\"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n \n-    /**\n+     /**\n      * Returns true always because this module supports designators.\n      * \n      * @return true always\n      */\n-    public boolean isDesignatorSupported() {\n+     public boolean isDesignatorSupported() {\n         return true;\n     }\n \n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/21/CurrentEnvModule.java\nindex 6a74443a73c..ecad6b40455 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/21/CurrentEnvModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/21/CurrentEnvModule.java\n@@ -84,14 +84,15 @@ public class CurrentEnvModule extends AttributeFinderModule {\n     /**\n      * Standard environment variable that represents the current date and time\n      */\n-    public static final String ENVIRONMENT_CURRENT_DATETIME = \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n+    public static final String ENVIRONMENT_CURRENT_DATETIME =\n+                 \"urn:oasis:names:tc:xacml:1.0:environment:current-dateTime\";\n \n-    /**\n+     /**\n      * Returns true always because this module supports designators.\n      * \n      * @return true always\n      */\n-    public boolean isDesignatorSupported() {\n+     public boolean isDesignatorSupported() {\n         return true;\n     }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}