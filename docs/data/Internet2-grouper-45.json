{
    "project_name": "Internet2-grouper",
    "error_id": "45",
    "information": {
        "errors": [
            {
                "line": "782",
                "severity": "warning",
                "message": "Comment has incorrect indentation level 12, expected is 20, indentation should be the same level as line 784.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
            }
        ]
    },
    "source_code": "            // argument of parameterizedType is a type variable of cls\n            if (typeVarList.contains(typeArg)\n            // type variable of parameterizedType has an assignment in\n                    // the super type.\n                    && typeVarAssigns.containsKey(typeVar)) {\n                // map the assignment to the cls's type variable",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "783",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 12, expected is 20, indentation should be the same level as line 784.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/45/TypeUtils.java\nindex 2b7216a6adf..becfb7a9fb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/45/TypeUtils.java\n@@ -780,7 +780,7 @@ public class TypeUtils {\n             // argument of parameterizedType is a type variable of cls\r\n             if (typeVarList.contains(typeArg)\r\n             // type variable of parameterizedType has an assignment in\r\n-                    // the super type.\r\n+            // the super type.\r\n                     && typeVarAssigns.containsKey(typeVar)) {\r\n                 // map the assignment to the cls's type variable\r\n                 typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/45/TypeUtils.java\nindex 2b7216a6adf..f2fcc0db216 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/45/TypeUtils.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -29,6 +29,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.reflect;\r\n \r\n import java.lang.reflect.Array;\r\n@@ -55,1049 +56,1049 @@ import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassU\n  */\r\n public class TypeUtils {\r\n \r\n-    /**\r\n-     * <p> TypeUtils instances should NOT be constructed in standard\r\n-     * programming. Instead, the class should be used as\r\n-     * <code>TypeUtils.isAssignable(cls, toClass)</code>. </p> <p> This\r\n-     * constructor is public to permit tools that require a JavaBean instance to\r\n-     * operate. </p>\r\n-     */\r\n-    public TypeUtils() {\r\n-        super();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target type\r\n-     * following the Java generics rules. If both types are {@link Class}\r\n-     * objects, the method returns the result of\r\n-     * {@link ClassUtils#isAssignable(Class, Class)}. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toType the target type\r\n-     * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\r\n-     */\r\n-    public static boolean isAssignable(Type type, Type toType) {\r\n-        return isAssignable(type, toType, null);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target type\r\n-     * following the Java generics rules. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toType the target type\r\n-     * @param typeVarAssigns optional map of type variable assignments\r\n-     * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\r\n-     */\r\n-    private static boolean isAssignable(Type type, Type toType,\r\n-            Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        if (toType == null || toType instanceof Class<?>) {\r\n-            return isAssignable(type, (Class<?>) toType);\r\n-        }\r\n+  /**\r\n+   * <p> TypeUtils instances should NOT be constructed in standard\r\n+   * programming. Instead, the class should be used as\r\n+   * <code>TypeUtils.isAssignable(cls, toClass)</code>. </p> <p> This\r\n+   * constructor is public to permit tools that require a JavaBean instance to\r\n+   * operate. </p>\r\n+   */\r\n+  public TypeUtils() {\r\n+    super();\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target type\r\n+   * following the Java generics rules. If both types are {@link Class}\r\n+   * objects, the method returns the result of\r\n+   * {@link ClassUtils#isAssignable(Class, Class)}. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toType the target type\r\n+   * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\r\n+   */\r\n+  public static boolean isAssignable(Type type, Type toType) {\r\n+    return isAssignable(type, toType, null);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target type\r\n+   * following the Java generics rules. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toType the target type\r\n+   * @param typeVarAssigns optional map of type variable assignments\r\n+   * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\r\n+   */\r\n+  private static boolean isAssignable(Type type, Type toType,\r\n+                                      Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    if (toType == null || toType instanceof Class<?>) {\r\n+      return isAssignable(type, (Class<?>) toType);\r\n+    }\r\n \r\n-        if (toType instanceof ParameterizedType) {\r\n-            return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);\r\n-        }\r\n+    if (toType instanceof ParameterizedType) {\r\n+      return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);\r\n+    }\r\n \r\n-        if (toType instanceof GenericArrayType) {\r\n-            return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);\r\n-        }\r\n+    if (toType instanceof GenericArrayType) {\r\n+      return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);\r\n+    }\r\n \r\n-        if (toType instanceof WildcardType) {\r\n-            return isAssignable(type, (WildcardType) toType, typeVarAssigns);\r\n-        }\r\n+    if (toType instanceof WildcardType) {\r\n+      return isAssignable(type, (WildcardType) toType, typeVarAssigns);\r\n+    }\r\n \r\n-        // *\r\n-        if (toType instanceof TypeVariable<?>) {\r\n-            return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);\r\n-        }\r\n-        // */\r\n-\r\n-        throw new IllegalStateException(\"found an unhandled type: \" + toType);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target class\r\n-     * following the Java generics rules. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toClass the target class\r\n-     * @return true if <code>type</code> is assignable to <code>toClass</code>.\r\n-     */\r\n-    private static boolean isAssignable(Type type, Class<?> toClass) {\r\n-        if (type == null) {\r\n-            // consistency with ClassUtils.isAssignable() behavior\r\n-            return toClass == null || !toClass.isPrimitive();\r\n-        }\r\n+    // *\r\n+    if (toType instanceof TypeVariable<?>) {\r\n+      return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);\r\n+    }\r\n+    // */\r\n+\r\n+    throw new IllegalStateException(\"found an unhandled type: \" + toType);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target class\r\n+   * following the Java generics rules. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toClass the target class\r\n+   * @return true if <code>type</code> is assignable to <code>toClass</code>.\r\n+   */\r\n+  private static boolean isAssignable(Type type, Class<?> toClass) {\r\n+    if (type == null) {\r\n+      // consistency with ClassUtils.isAssignable() behavior\r\n+      return toClass == null || !toClass.isPrimitive();\r\n+    }\r\n \r\n-        // only a null type can be assigned to null type which\r\n-        // would have cause the previous to return true\r\n-        if (toClass == null) {\r\n-            return false;\r\n-        }\r\n+    // only a null type can be assigned to null type which\r\n+    // would have cause the previous to return true\r\n+    if (toClass == null) {\r\n+      return false;\r\n+    }\r\n \r\n-        // all types are assignable to themselves\r\n-        if (toClass.equals(type)) {\r\n-            return true;\r\n-        }\r\n+    // all types are assignable to themselves\r\n+    if (toClass.equals(type)) {\r\n+      return true;\r\n+    }\r\n \r\n-        if (type instanceof Class<?>) {\r\n-            // just comparing two classes\r\n-            return ClassUtils.isAssignable((Class<?>) type, toClass);\r\n-        }\r\n+    if (type instanceof Class<?>) {\r\n+      // just comparing two classes\r\n+      return ClassUtils.isAssignable((Class<?>) type, toClass);\r\n+    }\r\n+\r\n+    if (type instanceof ParameterizedType) {\r\n+      // only have to compare the raw type to the class\r\n+      return isAssignable(getRawType((ParameterizedType) type), toClass);\r\n+    }\r\n \r\n-        if (type instanceof ParameterizedType) {\r\n-            // only have to compare the raw type to the class\r\n-            return isAssignable(getRawType((ParameterizedType) type), toClass);\r\n+    // *\r\n+    if (type instanceof TypeVariable<?>) {\r\n+      // if any of the bounds are assignable to the class, then the\r\n+      // type is assignable to the class.\r\n+      for (Type bound : ((TypeVariable<?>) type).getBounds()) {\r\n+        if (isAssignable(bound, toClass)) {\r\n+          return true;\r\n         }\r\n+      }\r\n \r\n-        // *\r\n-        if (type instanceof TypeVariable<?>) {\r\n-            // if any of the bounds are assignable to the class, then the\r\n-            // type is assignable to the class.\r\n-            for (Type bound : ((TypeVariable<?>) type).getBounds()) {\r\n-                if (isAssignable(bound, toClass)) {\r\n-                    return true;\r\n-                }\r\n-            }\r\n+      return false;\r\n+    }\r\n \r\n-            return false;\r\n-        }\r\n+    // the only classes to which a generic array type can be assigned\r\n+    // are class Object and array classes\r\n+    if (type instanceof GenericArrayType) {\r\n+      return toClass.equals(Object.class)\r\n+        || toClass.isArray()\r\n+        && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\r\n+        .getComponentType());\r\n+    }\r\n \r\n-        // the only classes to which a generic array type can be assigned\r\n-        // are class Object and array classes\r\n-        if (type instanceof GenericArrayType) {\r\n-            return toClass.equals(Object.class)\r\n-                    || toClass.isArray()\r\n-                    && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\r\n-                            .getComponentType());\r\n-        }\r\n+    // wildcard types are not assignable to a class (though one would think\r\n+    // \"? super Object\" would be assignable to Object)\r\n+    if (type instanceof WildcardType) {\r\n+      return false;\r\n+    }\r\n \r\n-        // wildcard types are not assignable to a class (though one would think\r\n-        // \"? super Object\" would be assignable to Object)\r\n-        if (type instanceof WildcardType) {\r\n-            return false;\r\n-        }\r\n+    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target\r\n+   * parameterized type following the Java generics rules. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toParameterizedType the target parameterized type\r\n+   * @param typeVarAssigns a map with type variables\r\n+   * @return true if <code>type</code> is assignable to <code>toType</code>.\r\n+   */\r\n+  private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\r\n+                                      Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    if (type == null) {\r\n+      return true;\r\n+    }\r\n \r\n-        throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target\r\n-     * parameterized type following the Java generics rules. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toParameterizedType the target parameterized type\r\n-     * @param typeVarAssigns a map with type variables\r\n-     * @return true if <code>type</code> is assignable to <code>toType</code>.\r\n-     */\r\n-    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\r\n-            Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        if (type == null) {\r\n-            return true;\r\n-        }\r\n+    // only a null type can be assigned to null type which\r\n+    // would have cause the previous to return true\r\n+    if (toParameterizedType == null) {\r\n+      return false;\r\n+    }\r\n \r\n-        // only a null type can be assigned to null type which\r\n-        // would have cause the previous to return true\r\n-        if (toParameterizedType == null) {\r\n-            return false;\r\n-        }\r\n+    // all types are assignable to themselves\r\n+    if (toParameterizedType.equals(type)) {\r\n+      return true;\r\n+    }\r\n \r\n-        // all types are assignable to themselves\r\n-        if (toParameterizedType.equals(type)) {\r\n-            return true;\r\n-        }\r\n+    // get the target type's raw type\r\n+    Class<?> toClass = getRawType(toParameterizedType);\r\n+    // get the subject type's type arguments including owner type arguments\r\n+    // and supertype arguments up to and including the target class.\r\n+    Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\r\n \r\n-        // get the target type's raw type\r\n-        Class<?> toClass = getRawType(toParameterizedType);\r\n-        // get the subject type's type arguments including owner type arguments\r\n-        // and supertype arguments up to and including the target class.\r\n-        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\r\n+    // null means the two types are not compatible\r\n+    if (fromTypeVarAssigns == null) {\r\n+      return false;\r\n+    }\r\n \r\n-        // null means the two types are not compatible\r\n-        if (fromTypeVarAssigns == null) {\r\n-            return false;\r\n-        }\r\n+    // compatible types, but there's no type arguments. this is equivalent\r\n+    // to comparing Map< ?, ? > to Map, and raw types are always assignable\r\n+    // to parameterized types.\r\n+    if (fromTypeVarAssigns.isEmpty()) {\r\n+      return true;\r\n+    }\r\n \r\n-        // compatible types, but there's no type arguments. this is equivalent\r\n-        // to comparing Map< ?, ? > to Map, and raw types are always assignable\r\n-        // to parameterized types.\r\n-        if (fromTypeVarAssigns.isEmpty()) {\r\n-            return true;\r\n-        }\r\n+    // get the target type's type arguments including owner type arguments\r\n+    Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\r\n+      toClass, typeVarAssigns);\r\n+\r\n+    // now to check each type argument\r\n+    for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\r\n+      Type toTypeArg = entry.getValue();\r\n+      Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\r\n+\r\n+      // parameters must either be absent from the subject type, within\r\n+      // the bounds of the wildcard type, or be an exact match to the\r\n+      // parameters of the target type.\r\n+      if (fromTypeArg != null\r\n+        && !toTypeArg.equals(fromTypeArg)\r\n+        && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\r\n+        typeVarAssigns))) {\r\n+        return false;\r\n+      }\r\n+    }\r\n \r\n-        // get the target type's type arguments including owner type arguments\r\n-        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\r\n-                toClass, typeVarAssigns);\r\n-\r\n-        // now to check each type argument\r\n-        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\r\n-            Type toTypeArg = entry.getValue();\r\n-            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\r\n-\r\n-            // parameters must either be absent from the subject type, within\r\n-            // the bounds of the wildcard type, or be an exact match to the\r\n-            // parameters of the target type.\r\n-            if (fromTypeArg != null\r\n-                    && !toTypeArg.equals(fromTypeArg)\r\n-                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\r\n-                            typeVarAssigns))) {\r\n-                return false;\r\n-            }\r\n-        }\r\n+    return true;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target\r\n+   * generic array type following the Java generics rules. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toGenericArrayType the target generic array type\r\n+   * @param typeVarAssigns a map with type variables\r\n+   * @return true if <code>type</code> is assignable to\r\n+   * <code>toGenericArrayType</code>.\r\n+   */\r\n+  private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\r\n+                                      Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    if (type == null) {\r\n+      return true;\r\n+    }\r\n \r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target\r\n-     * generic array type following the Java generics rules. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toGenericArrayType the target generic array type\r\n-     * @param typeVarAssigns a map with type variables\r\n-     * @return true if <code>type</code> is assignable to\r\n-     * <code>toGenericArrayType</code>.\r\n-     */\r\n-    private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\r\n-            Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        if (type == null) {\r\n-            return true;\r\n-        }\r\n+    // only a null type can be assigned to null type which\r\n+    // would have cause the previous to return true\r\n+    if (toGenericArrayType == null) {\r\n+      return false;\r\n+    }\r\n \r\n-        // only a null type can be assigned to null type which\r\n-        // would have cause the previous to return true\r\n-        if (toGenericArrayType == null) {\r\n-            return false;\r\n-        }\r\n+    // all types are assignable to themselves\r\n+    if (toGenericArrayType.equals(type)) {\r\n+      return true;\r\n+    }\r\n \r\n-        // all types are assignable to themselves\r\n-        if (toGenericArrayType.equals(type)) {\r\n-            return true;\r\n-        }\r\n+    Type toComponentType = toGenericArrayType.getGenericComponentType();\r\n \r\n-        Type toComponentType = toGenericArrayType.getGenericComponentType();\r\n+    if (type instanceof Class<?>) {\r\n+      Class<?> cls = (Class<?>) type;\r\n \r\n-        if (type instanceof Class<?>) {\r\n-            Class<?> cls = (Class<?>) type;\r\n+      // compare the component types\r\n+      return cls.isArray()\r\n+        && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\r\n+    }\r\n \r\n-            // compare the component types\r\n-            return cls.isArray()\r\n-                    && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\r\n-        }\r\n+    if (type instanceof GenericArrayType) {\r\n+      // compare the component types\r\n+      return isAssignable(((GenericArrayType) type).getGenericComponentType(),\r\n+        toComponentType, typeVarAssigns);\r\n+    }\r\n \r\n-        if (type instanceof GenericArrayType) {\r\n-            // compare the component types\r\n-            return isAssignable(((GenericArrayType) type).getGenericComponentType(),\r\n-                    toComponentType, typeVarAssigns);\r\n+    if (type instanceof WildcardType) {\r\n+      // so long as one of the upper bounds is assignable, it's good\r\n+      for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n+        if (isAssignable(bound, toGenericArrayType)) {\r\n+          return true;\r\n         }\r\n+      }\r\n \r\n-        if (type instanceof WildcardType) {\r\n-            // so long as one of the upper bounds is assignable, it's good\r\n-            for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n-                if (isAssignable(bound, toGenericArrayType)) {\r\n-                    return true;\r\n-                }\r\n-            }\r\n+      return false;\r\n+    }\r\n \r\n-            return false;\r\n+    if (type instanceof TypeVariable<?>) {\r\n+      // probably should remove the following logic and just return false.\r\n+      // type variables cannot specify arrays as bounds.\r\n+      for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\r\n+        if (isAssignable(bound, toGenericArrayType)) {\r\n+          return true;\r\n         }\r\n+      }\r\n \r\n-        if (type instanceof TypeVariable<?>) {\r\n-            // probably should remove the following logic and just return false.\r\n-            // type variables cannot specify arrays as bounds.\r\n-            for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\r\n-                if (isAssignable(bound, toGenericArrayType)) {\r\n-                    return true;\r\n-                }\r\n-            }\r\n+      return false;\r\n+    }\r\n \r\n-            return false;\r\n-        }\r\n+    if (type instanceof ParameterizedType) {\r\n+      // the raw type of a parameterized type is never an array or\r\n+      // generic array, otherwise the declaration would look like this:\r\n+      // Collection[]< ? extends String > collection;\r\n+      return false;\r\n+    }\r\n \r\n-        if (type instanceof ParameterizedType) {\r\n-            // the raw type of a parameterized type is never an array or\r\n-            // generic array, otherwise the declaration would look like this:\r\n-            // Collection[]< ? extends String > collection;\r\n-            return false;\r\n-        }\r\n+    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target\r\n+   * wildcard type following the Java generics rules. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toWildcardType the target wildcard type\r\n+   * @param typeVarAssigns a map with type variables\r\n+   * @return true if <code>type</code> is assignable to\r\n+   * <code>toWildcardType</code>.\r\n+   */\r\n+  private static boolean isAssignable(Type type, WildcardType toWildcardType,\r\n+                                      Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    if (type == null) {\r\n+      return true;\r\n+    }\r\n \r\n-        throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target\r\n-     * wildcard type following the Java generics rules. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toWildcardType the target wildcard type\r\n-     * @param typeVarAssigns a map with type variables\r\n-     * @return true if <code>type</code> is assignable to\r\n-     * <code>toWildcardType</code>.\r\n-     */\r\n-    private static boolean isAssignable(Type type, WildcardType toWildcardType,\r\n-            Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        if (type == null) {\r\n-            return true;\r\n-        }\r\n+    // only a null type can be assigned to null type which\r\n+    // would have cause the previous to return true\r\n+    if (toWildcardType == null) {\r\n+      return false;\r\n+    }\r\n \r\n-        // only a null type can be assigned to null type which\r\n-        // would have cause the previous to return true\r\n-        if (toWildcardType == null) {\r\n-            return false;\r\n-        }\r\n+    // all types are assignable to themselves\r\n+    if (toWildcardType.equals(type)) {\r\n+      return true;\r\n+    }\r\n \r\n-        // all types are assignable to themselves\r\n-        if (toWildcardType.equals(type)) {\r\n-            return true;\r\n-        }\r\n+    Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);\r\n+    Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);\r\n \r\n-        Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);\r\n-        Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);\r\n-\r\n-        if (type instanceof WildcardType) {\r\n-            WildcardType wildcardType = (WildcardType) type;\r\n-            Type[] upperBounds = getImplicitUpperBounds(wildcardType);\r\n-            Type[] lowerBounds = getImplicitLowerBounds(wildcardType);\r\n-\r\n-            for (Type toBound : toUpperBounds) {\r\n-                // if there are assignments for unresolved type variables,\r\n-                // now's the time to substitute them.\r\n-                toBound = substituteTypeVariables(toBound, typeVarAssigns);\r\n-\r\n-                // each upper bound of the subject type has to be assignable to\r\n-                // each\r\n-                // upper bound of the target type\r\n-                for (Type bound : upperBounds) {\r\n-                    if (!isAssignable(bound, toBound, typeVarAssigns)) {\r\n-                        return false;\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-            for (Type toBound : toLowerBounds) {\r\n-                // if there are assignments for unresolved type variables,\r\n-                // now's the time to substitute them.\r\n-                toBound = substituteTypeVariables(toBound, typeVarAssigns);\r\n-\r\n-                // each lower bound of the target type has to be assignable to\r\n-                // each\r\n-                // lower bound of the subject type\r\n-                for (Type bound : lowerBounds) {\r\n-                    if (!isAssignable(toBound, bound, typeVarAssigns)) {\r\n-                        return false;\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-            return true;\r\n-        }\r\n+    if (type instanceof WildcardType) {\r\n+      WildcardType wildcardType = (WildcardType) type;\r\n+      Type[] upperBounds = getImplicitUpperBounds(wildcardType);\r\n+      Type[] lowerBounds = getImplicitLowerBounds(wildcardType);\r\n \r\n-        for (Type toBound : toUpperBounds) {\r\n-            // if there are assignments for unresolved type variables,\r\n-            // now's the time to substitute them.\r\n-            if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\r\n-                    typeVarAssigns)) {\r\n-                return false;\r\n-            }\r\n-        }\r\n+      for (Type toBound : toUpperBounds) {\r\n+        // if there are assignments for unresolved type variables,\r\n+        // now's the time to substitute them.\r\n+        toBound = substituteTypeVariables(toBound, typeVarAssigns);\r\n \r\n-        for (Type toBound : toLowerBounds) {\r\n-            // if there are assignments for unresolved type variables,\r\n-            // now's the time to substitute them.\r\n-            if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\r\n-                    typeVarAssigns)) {\r\n-                return false;\r\n-            }\r\n+        // each upper bound of the subject type has to be assignable to\r\n+        // each\r\n+        // upper bound of the target type\r\n+        for (Type bound : upperBounds) {\r\n+          if (!isAssignable(bound, toBound, typeVarAssigns)) {\r\n+            return false;\r\n+          }\r\n         }\r\n+      }\r\n \r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the subject type may be implicitly cast to the target type\r\n-     * variable following the Java generics rules. </p>\r\n-     *\r\n-     * @param type the subject type to be assigned to the target type\r\n-     * @param toTypeVariable the target type variable\r\n-     * @param typeVarAssigns a map with type variables\r\n-     * @return true if <code>type</code> is assignable to\r\n-     * <code>toTypeVariable</code>.\r\n-     */\r\n-    private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable,\r\n-            Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        if (type == null) {\r\n-            return true;\r\n-        }\r\n+      for (Type toBound : toLowerBounds) {\r\n+        // if there are assignments for unresolved type variables,\r\n+        // now's the time to substitute them.\r\n+        toBound = substituteTypeVariables(toBound, typeVarAssigns);\r\n \r\n-        // only a null type can be assigned to null type which\r\n-        // would have cause the previous to return true\r\n-        if (toTypeVariable == null) {\r\n+        // each lower bound of the target type has to be assignable to\r\n+        // each\r\n+        // lower bound of the subject type\r\n+        for (Type bound : lowerBounds) {\r\n+          if (!isAssignable(toBound, bound, typeVarAssigns)) {\r\n             return false;\r\n+          }\r\n         }\r\n+      }\r\n \r\n-        // all types are assignable to themselves\r\n-        if (toTypeVariable.equals(type)) {\r\n-            return true;\r\n-        }\r\n+      return true;\r\n+    }\r\n \r\n-        if (type instanceof TypeVariable<?>) {\r\n-            // a type variable is assignable to another type variable, if\r\n-            // and only if the former is the latter, extends the latter, or\r\n-            // is otherwise a descendant of the latter.\r\n-            Type[] bounds = getImplicitBounds((TypeVariable<?>) type);\r\n-\r\n-            for (Type bound : bounds) {\r\n-                if (isAssignable(bound, toTypeVariable, typeVarAssigns)) {\r\n-                    return true;\r\n-                }\r\n-            }\r\n-        }\r\n+    for (Type toBound : toUpperBounds) {\r\n+      // if there are assignments for unresolved type variables,\r\n+      // now's the time to substitute them.\r\n+      if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\r\n+        typeVarAssigns)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n \r\n-        if (type instanceof Class<?> || type instanceof ParameterizedType\r\n-                || type instanceof GenericArrayType || type instanceof WildcardType) {\r\n-            return false;\r\n-        }\r\n+    for (Type toBound : toLowerBounds) {\r\n+      // if there are assignments for unresolved type variables,\r\n+      // now's the time to substitute them.\r\n+      if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\r\n+        typeVarAssigns)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n \r\n-        throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n+    return true;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the subject type may be implicitly cast to the target type\r\n+   * variable following the Java generics rules. </p>\r\n+   *\r\n+   * @param type the subject type to be assigned to the target type\r\n+   * @param toTypeVariable the target type variable\r\n+   * @param typeVarAssigns a map with type variables\r\n+   * @return true if <code>type</code> is assignable to\r\n+   * <code>toTypeVariable</code>.\r\n+   */\r\n+  private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable,\r\n+                                      Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    if (type == null) {\r\n+      return true;\r\n     }\r\n \r\n-    /**\r\n-     * <p> </p>\r\n-     *\r\n-     * @param type the type to be replaced\r\n-     * @param typeVarAssigns the map with type variables\r\n-     * @return the replaced type\r\n-     * @throws IllegalArgumentException if the type cannot be substituted\r\n-     */\r\n-    private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        if (type instanceof TypeVariable<?> && typeVarAssigns != null) {\r\n-            Type replacementType = typeVarAssigns.get(type);\r\n+    // only a null type can be assigned to null type which\r\n+    // would have cause the previous to return true\r\n+    if (toTypeVariable == null) {\r\n+      return false;\r\n+    }\r\n \r\n-            if (replacementType == null) {\r\n-                throw new IllegalArgumentException(\"missing assignment type for type variable \"\r\n-                        + type);\r\n-            }\r\n+    // all types are assignable to themselves\r\n+    if (toTypeVariable.equals(type)) {\r\n+      return true;\r\n+    }\r\n \r\n-            return replacementType;\r\n-        }\r\n+    if (type instanceof TypeVariable<?>) {\r\n+      // a type variable is assignable to another type variable, if\r\n+      // and only if the former is the latter, extends the latter, or\r\n+      // is otherwise a descendant of the latter.\r\n+      Type[] bounds = getImplicitBounds((TypeVariable<?>) type);\r\n \r\n-        return type;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Retrieves all the type arguments for this parameterized type\r\n-     * including owner hierarchy arguments such as <code>\r\n-     * Outer<K,V>.Inner<T>.DeepInner<E></code> . The arguments are returned in a\r\n-     * {@link Map} specifying the argument type for each {@link TypeVariable}.\r\n-     * </p>\r\n-     *\r\n-     * @param type specifies the subject parameterized type from which to\r\n-     * harvest the parameters.\r\n-     * @return a map of the type arguments to their respective type variables.\r\n-     */\r\n-    public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type) {\r\n-        return getTypeArguments(type, getRawType(type), null);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Gets the type arguments of a class/interface based on a subtype. For\r\n-     * instance, this method will determine that both of the parameters for the\r\n-     * interface {@link Map} are {@link Object} for the subtype\r\n-     * {@link java.util.Properties Properties} even though the subtype does not\r\n-     * directly implement the <code>Map</code> interface. <p> </p> This method\r\n-     * returns <code>null</code> if <code>type</code> is not assignable to\r\n-     * <code>toClass</code>. It returns an empty map if none of the classes or\r\n-     * interfaces in its inheritance hierarchy specify any type arguments. </p>\r\n-     * <p> A side-effect of this method is that it also retrieves the type\r\n-     * arguments for the classes and interfaces that are part of the hierarchy\r\n-     * between <code>type</code> and <code>toClass</code>. So with the above\r\n-     * example, this method will also determine that the type arguments for\r\n-     * {@link java.util.Hashtable Hashtable} are also both <code>Object</code>.\r\n-     * In cases where the interface specified by <code>toClass</code> is\r\n-     * (indirectly) implemented more than once (e.g. where <code>toClass</code>\r\n-     * specifies the interface {@link java.lang.Iterable Iterable} and\r\n-     * <code>type</code> specifies a parameterized type that implements both\r\n-     * {@link java.util.Set Set} and {@link java.util.Collection Collection}),\r\n-     * this method will look at the inheritance hierarchy of only one of the\r\n-     * implementations/subclasses; the first interface encountered that isn't a\r\n-     * subinterface to one of the others in the <code>type</code> to\r\n-     * <code>toClass</code> hierarchy. </p>\r\n-     *\r\n-     * @param type the type from which to determine the type parameters of\r\n-     * <code>toClass</code>\r\n-     * @param toClass the class whose type parameters are to be determined based\r\n-     * on the subtype <code>type</code>\r\n-     * @return a map of the type assignments for the type variables in each type\r\n-     * in the inheritance hierarchy from <code>type</code> to\r\n-     * <code>toClass</code> inclusive.\r\n-     */\r\n-    public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass) {\r\n-        return getTypeArguments(type, toClass, null);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\r\n-     *\r\n-     * @param type the type in question\r\n-     * @param toClass the class\r\n-     * @param subtypeVarAssigns a map with type variables\r\n-     * @return the map with type arguments\r\n-     */\r\n-    private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\r\n-            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\r\n-        if (type instanceof Class<?>) {\r\n-            return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);\r\n+      for (Type bound : bounds) {\r\n+        if (isAssignable(bound, toTypeVariable, typeVarAssigns)) {\r\n+          return true;\r\n         }\r\n+      }\r\n+    }\r\n \r\n-        if (type instanceof ParameterizedType) {\r\n-            return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\r\n-        }\r\n+    if (type instanceof Class<?> || type instanceof ParameterizedType\r\n+      || type instanceof GenericArrayType || type instanceof WildcardType) {\r\n+      return false;\r\n+    }\r\n \r\n-        if (type instanceof GenericArrayType) {\r\n-            return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\r\n-                    .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);\r\n-        }\r\n+    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> </p>\r\n+   *\r\n+   * @param type the type to be replaced\r\n+   * @param typeVarAssigns the map with type variables\r\n+   * @return the replaced type\r\n+   * @throws IllegalArgumentException if the type cannot be substituted\r\n+   */\r\n+  private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    if (type instanceof TypeVariable<?> && typeVarAssigns != null) {\r\n+      Type replacementType = typeVarAssigns.get(type);\r\n+\r\n+      if (replacementType == null) {\r\n+        throw new IllegalArgumentException(\"missing assignment type for type variable \"\r\n+          + type);\r\n+      }\r\n+\r\n+      return replacementType;\r\n+    }\r\n \r\n-        // since wildcard types are not assignable to classes, should this just\r\n-        // return null?\r\n-        if (type instanceof WildcardType) {\r\n-            for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n-                // find the first bound that is assignable to the target class\r\n-                if (isAssignable(bound, toClass)) {\r\n-                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\r\n-                }\r\n-            }\r\n-\r\n-            return null;\r\n-        }\r\n+    return type;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Retrieves all the type arguments for this parameterized type\r\n+   * including owner hierarchy arguments such as <code>\r\n+   * Outer<K,V>.Inner<T>.DeepInner<E></code> . The arguments are returned in a\r\n+   * {@link Map} specifying the argument type for each {@link TypeVariable}.\r\n+   * </p>\r\n+   *\r\n+   * @param type specifies the subject parameterized type from which to\r\n+   * harvest the parameters.\r\n+   * @return a map of the type arguments to their respective type variables.\r\n+   */\r\n+  public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type) {\r\n+    return getTypeArguments(type, getRawType(type), null);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Gets the type arguments of a class/interface based on a subtype. For\r\n+   * instance, this method will determine that both of the parameters for the\r\n+   * interface {@link Map} are {@link Object} for the subtype\r\n+   * {@link java.util.Properties Properties} even though the subtype does not\r\n+   * directly implement the <code>Map</code> interface. <p> </p> This method\r\n+   * returns <code>null</code> if <code>type</code> is not assignable to\r\n+   * <code>toClass</code>. It returns an empty map if none of the classes or\r\n+   * interfaces in its inheritance hierarchy specify any type arguments. </p>\r\n+   * <p> A side-effect of this method is that it also retrieves the type\r\n+   * arguments for the classes and interfaces that are part of the hierarchy\r\n+   * between <code>type</code> and <code>toClass</code>. So with the above\r\n+   * example, this method will also determine that the type arguments for\r\n+   * {@link java.util.Hashtable Hashtable} are also both <code>Object</code>.\r\n+   * In cases where the interface specified by <code>toClass</code> is\r\n+   * (indirectly) implemented more than once (e.g. where <code>toClass</code>\r\n+   * specifies the interface {@link java.lang.Iterable Iterable} and\r\n+   * <code>type</code> specifies a parameterized type that implements both\r\n+   * {@link java.util.Set Set} and {@link java.util.Collection Collection}),\r\n+   * this method will look at the inheritance hierarchy of only one of the\r\n+   * implementations/subclasses; the first interface encountered that isn't a\r\n+   * subinterface to one of the others in the <code>type</code> to\r\n+   * <code>toClass</code> hierarchy. </p>\r\n+   *\r\n+   * @param type the type from which to determine the type parameters of\r\n+   * <code>toClass</code>\r\n+   * @param toClass the class whose type parameters are to be determined based\r\n+   * on the subtype <code>type</code>\r\n+   * @return a map of the type assignments for the type variables in each type\r\n+   * in the inheritance hierarchy from <code>type</code> to\r\n+   * <code>toClass</code> inclusive.\r\n+   */\r\n+  public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass) {\r\n+    return getTypeArguments(type, toClass, null);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\r\n+   *\r\n+   * @param type the type in question\r\n+   * @param toClass the class\r\n+   * @param subtypeVarAssigns a map with type variables\r\n+   * @return the map with type arguments\r\n+   */\r\n+  private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\r\n+                                                             Map<TypeVariable<?>, Type> subtypeVarAssigns) {\r\n+    if (type instanceof Class<?>) {\r\n+      return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);\r\n+    }\r\n \r\n-        // *\r\n-        if (type instanceof TypeVariable<?>) {\r\n-            for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\r\n-                // find the first bound that is assignable to the target class\r\n-                if (isAssignable(bound, toClass)) {\r\n-                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\r\n-                }\r\n-            }\r\n+    if (type instanceof ParameterizedType) {\r\n+      return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\r\n+    }\r\n \r\n-            return null;\r\n-        }\r\n-        // */\r\n-\r\n-        throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Return a map of the type arguments of a parameterized type in the context of <code>toClass</code>. </p>\r\n-     *\r\n-     * @param parameterizedType the parameterized type\r\n-     * @param toClass the class\r\n-     * @param subtypeVarAssigns a map with type variables\r\n-     * @return the map with type arguments\r\n-     */\r\n-    private static Map<TypeVariable<?>, Type> getTypeArguments(\r\n-            ParameterizedType parameterizedType, Class<?> toClass,\r\n-            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\r\n-        Class<?> cls = getRawType(parameterizedType);\r\n-\r\n-        // make sure they're assignable\r\n-        if (!isAssignable(cls, toClass)) {\r\n-            return null;\r\n+    if (type instanceof GenericArrayType) {\r\n+      return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\r\n+        .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);\r\n+    }\r\n+\r\n+    // since wildcard types are not assignable to classes, should this just\r\n+    // return null?\r\n+    if (type instanceof WildcardType) {\r\n+      for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\r\n+        // find the first bound that is assignable to the target class\r\n+        if (isAssignable(bound, toClass)) {\r\n+          return getTypeArguments(bound, toClass, subtypeVarAssigns);\r\n         }\r\n+      }\r\n \r\n-        Type ownerType = parameterizedType.getOwnerType();\r\n-        Map<TypeVariable<?>, Type> typeVarAssigns;\r\n+      return null;\r\n+    }\r\n \r\n-        if (ownerType instanceof ParameterizedType) {\r\n-            // get the owner type arguments first\r\n-            ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;\r\n-            typeVarAssigns = getTypeArguments(parameterizedOwnerType,\r\n-                    getRawType(parameterizedOwnerType), subtypeVarAssigns);\r\n-        } else {\r\n-            // no owner, prep the type variable assignments map\r\n-            typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\r\n-                    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\r\n+    // *\r\n+    if (type instanceof TypeVariable<?>) {\r\n+      for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\r\n+        // find the first bound that is assignable to the target class\r\n+        if (isAssignable(bound, toClass)) {\r\n+          return getTypeArguments(bound, toClass, subtypeVarAssigns);\r\n         }\r\n+      }\r\n \r\n-        // get the subject parameterized type's arguments\r\n-        Type[] typeArgs = parameterizedType.getActualTypeArguments();\r\n-        // and get the corresponding type variables from the raw class\r\n-        TypeVariable<?>[] typeParams = cls.getTypeParameters();\r\n+      return null;\r\n+    }\r\n+    // */\r\n+\r\n+    throw new IllegalStateException(\"found an unhandled type: \" + type);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Return a map of the type arguments of a parameterized type in the context of <code>toClass</code>. </p>\r\n+   *\r\n+   * @param parameterizedType the parameterized type\r\n+   * @param toClass the class\r\n+   * @param subtypeVarAssigns a map with type variables\r\n+   * @return the map with type arguments\r\n+   */\r\n+  private static Map<TypeVariable<?>, Type> getTypeArguments(\r\n+    ParameterizedType parameterizedType, Class<?> toClass,\r\n+    Map<TypeVariable<?>, Type> subtypeVarAssigns) {\r\n+    Class<?> cls = getRawType(parameterizedType);\r\n+\r\n+    // make sure they're assignable\r\n+    if (!isAssignable(cls, toClass)) {\r\n+      return null;\r\n+    }\r\n \r\n-        // map the arguments to their respective type variables\r\n-        for (int i = 0; i < typeParams.length; i++) {\r\n-            Type typeArg = typeArgs[i];\r\n-            typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\r\n-                    .get(typeArg) : typeArg);\r\n-        }\r\n+    Type ownerType = parameterizedType.getOwnerType();\r\n+    Map<TypeVariable<?>, Type> typeVarAssigns;\r\n+\r\n+    if (ownerType instanceof ParameterizedType) {\r\n+      // get the owner type arguments first\r\n+      ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;\r\n+      typeVarAssigns = getTypeArguments(parameterizedOwnerType,\r\n+        getRawType(parameterizedOwnerType), subtypeVarAssigns);\r\n+    } else {\r\n+      // no owner, prep the type variable assignments map\r\n+      typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\r\n+        : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\r\n+    }\r\n \r\n-        if (toClass.equals(cls)) {\r\n-            // target class has been reached. Done.\r\n-            return typeVarAssigns;\r\n-        }\r\n+    // get the subject parameterized type's arguments\r\n+    Type[] typeArgs = parameterizedType.getActualTypeArguments();\r\n+    // and get the corresponding type variables from the raw class\r\n+    TypeVariable<?>[] typeParams = cls.getTypeParameters();\r\n \r\n-        // walk the inheritance hierarchy until the target class is reached\r\n-        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\r\n-     *\r\n-     * @param cls the class in question\r\n-     * @param toClass the context class\r\n-     * @param subtypeVarAssigns a map with type variables\r\n-     * @return the map with type arguments\r\n-     */\r\n-    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\r\n-            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\r\n-        // make sure they're assignable\r\n-        if (!isAssignable(cls, toClass)) {\r\n-            return null;\r\n-        }\r\n+    // map the arguments to their respective type variables\r\n+    for (int i = 0; i < typeParams.length; i++) {\r\n+      Type typeArg = typeArgs[i];\r\n+      typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\r\n+        .get(typeArg) : typeArg);\r\n+    }\r\n \r\n-        // can't work with primitives\r\n-        if (cls.isPrimitive()) {\r\n-            // both classes are primitives?\r\n-            if (toClass.isPrimitive()) {\r\n-                // dealing with widening here. No type arguments to be\r\n-                // harvested with these two types.\r\n-                return new HashMap<TypeVariable<?>, Type>();\r\n-            }\r\n-\r\n-            // work with wrapper the wrapper class instead of the primitive\r\n-            cls = ClassUtils.primitiveToWrapper(cls);\r\n-        }\r\n+    if (toClass.equals(cls)) {\r\n+      // target class has been reached. Done.\r\n+      return typeVarAssigns;\r\n+    }\r\n \r\n-        // create a copy of the incoming map, or an empty one if it's null\r\n-        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\r\n-                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\r\n+    // walk the inheritance hierarchy until the target class is reached\r\n+    return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\r\n+   *\r\n+   * @param cls the class in question\r\n+   * @param toClass the context class\r\n+   * @param subtypeVarAssigns a map with type variables\r\n+   * @return the map with type arguments\r\n+   */\r\n+  private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\r\n+                                                             Map<TypeVariable<?>, Type> subtypeVarAssigns) {\r\n+    // make sure they're assignable\r\n+    if (!isAssignable(cls, toClass)) {\r\n+      return null;\r\n+    }\r\n \r\n-        // no arguments for the parameters, or target class has been reached\r\n-        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\r\n-            return typeVarAssigns;\r\n-        }\r\n+    // can't work with primitives\r\n+    if (cls.isPrimitive()) {\r\n+      // both classes are primitives?\r\n+      if (toClass.isPrimitive()) {\r\n+        // dealing with widening here. No type arguments to be\r\n+        // harvested with these two types.\r\n+        return new HashMap<TypeVariable<?>, Type>();\r\n+      }\r\n+\r\n+      // work with wrapper the wrapper class instead of the primitive\r\n+      cls = ClassUtils.primitiveToWrapper(cls);\r\n+    }\r\n \r\n-        // walk the inheritance hierarchy until the target class is reached\r\n-        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Tries to determine the type arguments of a class/interface based on a\r\n-     * super parameterized type's type arguments. This method is the inverse of\r\n-     * {@link #getTypeArguments(Type, Class)} which gets a class/interface's\r\n-     * type arguments based on a subtype. It is far more limited in determining\r\n-     * the type arguments for the subject class's type variables in that it can\r\n-     * only determine those parameters that map from the subject {@link Class}\r\n-     * object to the supertype. </p> <p> Example: {@link java.util.TreeSet\r\n-     * TreeSet} sets its parameter as the parameter for\r\n-     * {@link java.util.NavigableSet NavigableSet}, which in turn sets the\r\n-     * parameter of {@link java.util.SortedSet}, which in turn sets the\r\n-     * parameter of {@link Set}, which in turn sets the parameter of\r\n-     * {@link java.util.Collection}, which in turn sets the parameter of\r\n-     * {@link java.lang.Iterable}. Since <code>TreeSet</code>'s parameter maps\r\n-     * (indirectly) to <code>Iterable</code>'s parameter, it will be able to\r\n-     * determine that based on the super type <code>Iterable<? extends\r\n-     * Map<Integer,? extends Collection<?>>></code>, the parameter of\r\n-     * <code>TreeSet</code> is <code>? extends Map<Integer,? extends\r\n-     * Collection<?>></code>. </p>\r\n-     *\r\n-     * @param cls the class whose type parameters are to be determined\r\n-     * @param superType the super type from which <code>cls</code>'s type\r\n-     * arguments are to be determined\r\n-     * @return a map of the type assignments that could be determined for the\r\n-     * type variables in each type in the inheritance hierarchy from\r\n-     * <code>type</code> to <code>toClass</code> inclusive.\r\n-     */\r\n-    public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\r\n-            ParameterizedType superType) {\r\n-        Class<?> superClass = getRawType(superType);\r\n-\r\n-        // compatibility check\r\n-        if (!isAssignable(cls, superClass)) {\r\n-            return null;\r\n-        }\r\n+    // create a copy of the incoming map, or an empty one if it's null\r\n+    HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\r\n+      : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\r\n \r\n-        if (cls.equals(superClass)) {\r\n-            return getTypeArguments(superType, superClass, null);\r\n-        }\r\n+    // no arguments for the parameters, or target class has been reached\r\n+    if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\r\n+      return typeVarAssigns;\r\n+    }\r\n \r\n-        // get the next class in the inheritance hierarchy\r\n-        Type midType = getClosestParentType(cls, superClass);\r\n+    // walk the inheritance hierarchy until the target class is reached\r\n+    return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Tries to determine the type arguments of a class/interface based on a\r\n+   * super parameterized type's type arguments. This method is the inverse of\r\n+   * {@link #getTypeArguments(Type, Class)} which gets a class/interface's\r\n+   * type arguments based on a subtype. It is far more limited in determining\r\n+   * the type arguments for the subject class's type variables in that it can\r\n+   * only determine those parameters that map from the subject {@link Class}\r\n+   * object to the supertype. </p> <p> Example: {@link java.util.TreeSet\r\n+   * TreeSet} sets its parameter as the parameter for\r\n+   * {@link java.util.NavigableSet NavigableSet}, which in turn sets the\r\n+   * parameter of {@link java.util.SortedSet}, which in turn sets the\r\n+   * parameter of {@link Set}, which in turn sets the parameter of\r\n+   * {@link java.util.Collection}, which in turn sets the parameter of\r\n+   * {@link java.lang.Iterable}. Since <code>TreeSet</code>'s parameter maps\r\n+   * (indirectly) to <code>Iterable</code>'s parameter, it will be able to\r\n+   * determine that based on the super type <code>Iterable<? extends\r\n+   * Map<Integer,? extends Collection<?>>></code>, the parameter of\r\n+   * <code>TreeSet</code> is <code>? extends Map<Integer,? extends\r\n+   * Collection<?>></code>. </p>\r\n+   *\r\n+   * @param cls the class whose type parameters are to be determined\r\n+   * @param superType the super type from which <code>cls</code>'s type\r\n+   * arguments are to be determined\r\n+   * @return a map of the type assignments that could be determined for the\r\n+   * type variables in each type in the inheritance hierarchy from\r\n+   * <code>type</code> to <code>toClass</code> inclusive.\r\n+   */\r\n+  public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\r\n+                                                                  ParameterizedType superType) {\r\n+    Class<?> superClass = getRawType(superType);\r\n+\r\n+    // compatibility check\r\n+    if (!isAssignable(cls, superClass)) {\r\n+      return null;\r\n+    }\r\n \r\n-        // can only be a class or a parameterized type\r\n-        if (midType instanceof Class<?>) {\r\n-            return determineTypeArguments((Class<?>) midType, superType);\r\n-        }\r\n+    if (cls.equals(superClass)) {\r\n+      return getTypeArguments(superType, superClass, null);\r\n+    }\r\n \r\n-        ParameterizedType midParameterizedType = (ParameterizedType) midType;\r\n-        Class<?> midClass = getRawType(midParameterizedType);\r\n-        // get the type variables of the mid class that map to the type\r\n-        // arguments of the super class\r\n-        Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);\r\n-        // map the arguments of the mid type to the class type variables\r\n-        mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\r\n-\r\n-        return typeVarAssigns;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Performs a mapping of type variables.</p>\r\n-     *\r\n-     * @param <T> the generic type of the class in question\r\n-     * @param cls the class in question\r\n-     * @param parameterizedType the parameterized type\r\n-     * @param typeVarAssigns the map to be filled\r\n-     */\r\n-    private static <T> void mapTypeVariablesToArguments(Class<T> cls,\r\n-            ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        // capture the type variables from the owner type that have assignments\r\n-        Type ownerType = parameterizedType.getOwnerType();\r\n-\r\n-        if (ownerType instanceof ParameterizedType) {\r\n-            // recursion to make sure the owner's owner type gets processed\r\n-            mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);\r\n-        }\r\n+    // get the next class in the inheritance hierarchy\r\n+    Type midType = getClosestParentType(cls, superClass);\r\n \r\n-        // parameterizedType is a generic interface/class (or it's in the owner\r\n-        // hierarchy of said interface/class) implemented/extended by the class\r\n-        // cls. Find out which type variables of cls are type arguments of\r\n-        // parameterizedType:\r\n-        Type[] typeArgs = parameterizedType.getActualTypeArguments();\r\n-\r\n-        // of the cls's type variables that are arguments of parameterizedType,\r\n-        // find out which ones can be determined from the super type's arguments\r\n-        TypeVariable<?>[] typeVars = getRawType(parameterizedType).getTypeParameters();\r\n-\r\n-        // use List view of type parameters of cls so the contains() method can be used:\r\n-        List<TypeVariable<Class<T>>> typeVarList = Arrays.asList(cls\r\n-                .getTypeParameters());\r\n-\r\n-        for (int i = 0; i < typeArgs.length; i++) {\r\n-            TypeVariable<?> typeVar = typeVars[i];\r\n-            Type typeArg = typeArgs[i];\r\n-\r\n-            // argument of parameterizedType is a type variable of cls\r\n-            if (typeVarList.contains(typeArg)\r\n-            // type variable of parameterizedType has an assignment in\r\n-                    // the super type.\r\n-                    && typeVarAssigns.containsKey(typeVar)) {\r\n-                // map the assignment to the cls's type variable\r\n-                typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));\r\n-            }\r\n-        }\r\n+    // can only be a class or a parameterized type\r\n+    if (midType instanceof Class<?>) {\r\n+      return determineTypeArguments((Class<?>) midType, superType);\r\n     }\r\n \r\n-    /**\r\n-     * <p> Closest parent type? Closest to what? The closest parent type to the\r\n-     * super class specified by <code>superClass</code>. </p>\r\n-     *\r\n-     * @param cls the class in question\r\n-     * @param superClass the super class\r\n-     * @return the closes parent type\r\n-     */\r\n-    private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\r\n-        // only look at the interfaces if the super class is also an interface\r\n-        if (superClass.isInterface()) {\r\n-            // get the generic interfaces of the subject class\r\n-            Type[] interfaceTypes = cls.getGenericInterfaces();\r\n-            // will hold the best generic interface match found\r\n-            Type genericInterface = null;\r\n-\r\n-            // find the interface closest to the super class\r\n-            for (Type midType : interfaceTypes) {\r\n-                Class<?> midClass = null;\r\n-\r\n-                if (midType instanceof ParameterizedType) {\r\n-                    midClass = getRawType((ParameterizedType) midType);\r\n-                } else if (midType instanceof Class<?>) {\r\n-                    midClass = (Class<?>) midType;\r\n-                } else {\r\n-                    throw new IllegalStateException(\"Unexpected generic\"\r\n-                            + \" interface type found: \" + midType);\r\n-                }\r\n-\r\n-                // check if this interface is further up the inheritance chain\r\n-                // than the previously found match\r\n-                if (isAssignable(midClass, superClass)\r\n-                        && isAssignable(genericInterface, (Type) midClass)) {\r\n-                    genericInterface = midType;\r\n-                }\r\n-            }\r\n-\r\n-            // found a match?\r\n-            if (genericInterface != null) {\r\n-                return genericInterface;\r\n-            }\r\n-        }\r\n+    ParameterizedType midParameterizedType = (ParameterizedType) midType;\r\n+    Class<?> midClass = getRawType(midParameterizedType);\r\n+    // get the type variables of the mid class that map to the type\r\n+    // arguments of the super class\r\n+    Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);\r\n+    // map the arguments of the mid type to the class type variables\r\n+    mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\r\n+\r\n+    return typeVarAssigns;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Performs a mapping of type variables.</p>\r\n+   *\r\n+   * @param <T> the generic type of the class in question\r\n+   * @param cls the class in question\r\n+   * @param parameterizedType the parameterized type\r\n+   * @param typeVarAssigns the map to be filled\r\n+   */\r\n+  private static <T> void mapTypeVariablesToArguments(Class<T> cls,\r\n+                                                      ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    // capture the type variables from the owner type that have assignments\r\n+    Type ownerType = parameterizedType.getOwnerType();\r\n+\r\n+    if (ownerType instanceof ParameterizedType) {\r\n+      // recursion to make sure the owner's owner type gets processed\r\n+      mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);\r\n+    }\r\n \r\n-        // none of the interfaces were descendants of the target class, so the\r\n-        // super class has to be one, instead\r\n-        return cls.getGenericSuperclass();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Checks if the given value can be assigned to the target type\r\n-     * following the Java generics rules. </p>\r\n-     *\r\n-     * @param value the value to be checked\r\n-     * @param type the target type\r\n-     * @return true of <code>value</code> is an instance of <code>type</code>.\r\n-     */\r\n-    public static boolean isInstance(Object value, Type type) {\r\n-        if (type == null) {\r\n-            return false;\r\n+    // parameterizedType is a generic interface/class (or it's in the owner\r\n+    // hierarchy of said interface/class) implemented/extended by the class\r\n+    // cls. Find out which type variables of cls are type arguments of\r\n+    // parameterizedType:\r\n+    Type[] typeArgs = parameterizedType.getActualTypeArguments();\r\n+\r\n+    // of the cls's type variables that are arguments of parameterizedType,\r\n+    // find out which ones can be determined from the super type's arguments\r\n+    TypeVariable<?>[] typeVars = getRawType(parameterizedType).getTypeParameters();\r\n+\r\n+    // use List view of type parameters of cls so the contains() method can be used:\r\n+    List<TypeVariable<Class<T>>> typeVarList = Arrays.asList(cls\r\n+      .getTypeParameters());\r\n+\r\n+    for (int i = 0; i < typeArgs.length; i++) {\r\n+      TypeVariable<?> typeVar = typeVars[i];\r\n+      Type typeArg = typeArgs[i];\r\n+\r\n+      // argument of parameterizedType is a type variable of cls\r\n+      if (typeVarList.contains(typeArg)\r\n+        // type variable of parameterizedType has an assignment in\r\n+        // the super type.\r\n+        && typeVarAssigns.containsKey(typeVar)) {\r\n+        // map the assignment to the cls's type variable\r\n+        typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Closest parent type? Closest to what? The closest parent type to the\r\n+   * super class specified by <code>superClass</code>. </p>\r\n+   *\r\n+   * @param cls the class in question\r\n+   * @param superClass the super class\r\n+   * @return the closes parent type\r\n+   */\r\n+  private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\r\n+    // only look at the interfaces if the super class is also an interface\r\n+    if (superClass.isInterface()) {\r\n+      // get the generic interfaces of the subject class\r\n+      Type[] interfaceTypes = cls.getGenericInterfaces();\r\n+      // will hold the best generic interface match found\r\n+      Type genericInterface = null;\r\n+\r\n+      // find the interface closest to the super class\r\n+      for (Type midType : interfaceTypes) {\r\n+        Class<?> midClass = null;\r\n+\r\n+        if (midType instanceof ParameterizedType) {\r\n+          midClass = getRawType((ParameterizedType) midType);\r\n+        } else if (midType instanceof Class<?>) {\r\n+          midClass = (Class<?>) midType;\r\n+        } else {\r\n+          throw new IllegalStateException(\"Unexpected generic\"\r\n+            + \" interface type found: \" + midType);\r\n         }\r\n \r\n-        return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive()\r\n-                : isAssignable(value.getClass(), type, null);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> This method strips out the redundant upper bound types in type\r\n-     * variable types and wildcard types (or it would with wildcard types if\r\n-     * multiple upper bounds were allowed). </p> <p> Example: with the variable\r\n-     * type declaration:\r\n-     *\r\n-     * <pre> &lt;K extends java.util.Collection&lt;String&gt; &amp;\r\n-     * java.util.List&lt;String&gt;&gt; </pre>\r\n-     *\r\n-     * since <code>List</code> is a subinterface of <code>Collection</code>,\r\n-     * this method will return the bounds as if the declaration had been:\r\n-     *\r\n-     * <pre> &lt;K extends java.util.List&lt;String&gt;&gt; </pre>\r\n-     *\r\n-     * </p>\r\n-     *\r\n-     * @param bounds an array of types representing the upper bounds of either\r\n-     * <code>WildcardType</code> or <code>TypeVariable</code>.\r\n-     * @return an array containing the values from <code>bounds</code> minus the\r\n-     * redundant types.\r\n-     */\r\n-    public static Type[] normalizeUpperBounds(Type[] bounds) {\r\n-        // don't bother if there's only one (or none) type\r\n-        if (bounds.length < 2) {\r\n-            return bounds;\r\n+        // check if this interface is further up the inheritance chain\r\n+        // than the previously found match\r\n+        if (isAssignable(midClass, superClass)\r\n+          && isAssignable(genericInterface, (Type) midClass)) {\r\n+          genericInterface = midType;\r\n         }\r\n+      }\r\n \r\n-        Set<Type> types = new HashSet<Type>(bounds.length);\r\n+      // found a match?\r\n+      if (genericInterface != null) {\r\n+        return genericInterface;\r\n+      }\r\n+    }\r\n \r\n-        for (Type type1 : bounds) {\r\n-            boolean subtypeFound = false;\r\n+    // none of the interfaces were descendants of the target class, so the\r\n+    // super class has to be one, instead\r\n+    return cls.getGenericSuperclass();\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Checks if the given value can be assigned to the target type\r\n+   * following the Java generics rules. </p>\r\n+   *\r\n+   * @param value the value to be checked\r\n+   * @param type the target type\r\n+   * @return true of <code>value</code> is an instance of <code>type</code>.\r\n+   */\r\n+  public static boolean isInstance(Object value, Type type) {\r\n+    if (type == null) {\r\n+      return false;\r\n+    }\r\n \r\n-            for (Type type2 : bounds) {\r\n-                if (type1 != type2 && isAssignable(type2, type1, null)) {\r\n-                    subtypeFound = true;\r\n-                    break;\r\n-                }\r\n-            }\r\n+    return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive()\r\n+      : isAssignable(value.getClass(), type, null);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> This method strips out the redundant upper bound types in type\r\n+   * variable types and wildcard types (or it would with wildcard types if\r\n+   * multiple upper bounds were allowed). </p> <p> Example: with the variable\r\n+   * type declaration:\r\n+   *\r\n+   * <pre> &lt;K extends java.util.Collection&lt;String&gt; &amp;\r\n+   * java.util.List&lt;String&gt;&gt; </pre>\r\n+   *\r\n+   * since <code>List</code> is a subinterface of <code>Collection</code>,\r\n+   * this method will return the bounds as if the declaration had been:\r\n+   *\r\n+   * <pre> &lt;K extends java.util.List&lt;String&gt;&gt; </pre>\r\n+   *\r\n+   * </p>\r\n+   *\r\n+   * @param bounds an array of types representing the upper bounds of either\r\n+   * <code>WildcardType</code> or <code>TypeVariable</code>.\r\n+   * @return an array containing the values from <code>bounds</code> minus the\r\n+   * redundant types.\r\n+   */\r\n+  public static Type[] normalizeUpperBounds(Type[] bounds) {\r\n+    // don't bother if there's only one (or none) type\r\n+    if (bounds.length < 2) {\r\n+      return bounds;\r\n+    }\r\n \r\n-            if (!subtypeFound) {\r\n-                types.add(type1);\r\n-            }\r\n-        }\r\n+    Set<Type> types = new HashSet<Type>(bounds.length);\r\n \r\n-        return types.toArray(new Type[types.size()]);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Returns an array containing the sole type of {@link Object} if\r\n-     * {@link TypeVariable#getBounds()} returns an empty array. Otherwise, it\r\n-     * returns the result of <code>TypeVariable.getBounds()</code> passed into\r\n-     * {@link #normalizeUpperBounds}. </p>\r\n-     *\r\n-     * @param typeVariable the subject type variable\r\n-     * @return a non-empty array containing the bounds of the type variable.\r\n-     */\r\n-    public static Type[] getImplicitBounds(TypeVariable<?> typeVariable) {\r\n-        Type[] bounds = typeVariable.getBounds();\r\n-\r\n-        return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Returns an array containing the sole value of {@link Object} if\r\n-     * {@link WildcardType#getUpperBounds()} returns an empty array. Otherwise,\r\n-     * it returns the result of <code>WildcardType.getUpperBounds()</code>\r\n-     * passed into {@link #normalizeUpperBounds}. </p>\r\n-     *\r\n-     * @param wildcardType the subject wildcard type\r\n-     * @return a non-empty array containing the upper bounds of the wildcard\r\n-     * type.\r\n-     */\r\n-    public static Type[] getImplicitUpperBounds(WildcardType wildcardType) {\r\n-        Type[] bounds = wildcardType.getUpperBounds();\r\n-\r\n-        return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Returns an array containing a single value of <code>null</code> if\r\n-     * {@link WildcardType#getLowerBounds()} returns an empty array. Otherwise,\r\n-     * it returns the result of <code>WildcardType.getLowerBounds()</code>. </p>\r\n-     *\r\n-     * @param wildcardType the subject wildcard type\r\n-     * @return a non-empty array containing the lower bounds of the wildcard\r\n-     * type.\r\n-     */\r\n-    public static Type[] getImplicitLowerBounds(WildcardType wildcardType) {\r\n-        Type[] bounds = wildcardType.getLowerBounds();\r\n-\r\n-        return bounds.length == 0 ? new Type[] { null } : bounds;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Determines whether or not specified types satisfy the bounds of their\r\n-     * mapped type variables. When a type parameter extends another (such as\r\n-     * <code><T, S extends T></code>), uses another as a type parameter (such as\r\n-     * <code><T, S extends Comparable<T></code>), or otherwise depends on\r\n-     * another type variable to be specified, the dependencies must be included\r\n-     * in <code>typeVarAssigns</code>. </p>\r\n-     *\r\n-     * @param typeVarAssigns specifies the potential types to be assigned to the\r\n-     * type variables.\r\n-     * @return whether or not the types can be assigned to their respective type\r\n-     * variables.\r\n-     */\r\n-    public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n-        // all types must be assignable to all the bounds of the their mapped\r\n-        // type variable.\r\n-        for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet()) {\r\n-            TypeVariable<?> typeVar = entry.getKey();\r\n-            Type type = entry.getValue();\r\n-\r\n-            for (Type bound : getImplicitBounds(typeVar)) {\r\n-                if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),\r\n-                        typeVarAssigns)) {\r\n-                    return false;\r\n-                }\r\n-            }\r\n-        }\r\n+    for (Type type1 : bounds) {\r\n+      boolean subtypeFound = false;\r\n \r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Transforms the passed in type to a {@code Class} object. Type-checking method of convenience. </p>\r\n-     *\r\n-     * @param parameterizedType the type to be converted\r\n-     * @return the corresponding {@code Class} object\r\n-     * @throws IllegalStateException if the conversion fails\r\n-     */\r\n-    private static Class<?> getRawType(ParameterizedType parameterizedType) {\r\n-        Type rawType = parameterizedType.getRawType();\r\n-\r\n-        // check if raw type is a Class object\r\n-        // not currently necessary, but since the return type is Type instead of\r\n-        // Class, there's enough reason to believe that future versions of Java\r\n-        // may return other Type implementations. And type-safety checking is\r\n-        // rarely a bad idea.\r\n-        if (!(rawType instanceof Class<?>)) {\r\n-            throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\r\n+      for (Type type2 : bounds) {\r\n+        if (type1 != type2 && isAssignable(type2, type1, null)) {\r\n+          subtypeFound = true;\r\n+          break;\r\n         }\r\n+      }\r\n \r\n-        return (Class<?>) rawType;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p> Get the raw type of a Java type, given its context. Primarily for use\r\n-     * with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do\r\n-     * not know the runtime type of <code>type</code>: if you know you have a\r\n-     * {@link Class} instance, it is already raw; if you know you have a\r\n-     * {@link ParameterizedType}, its raw type is only a method call away. </p>\r\n-     *\r\n-     * @param type to resolve\r\n-     * @param assigningType type to be resolved against\r\n-     * @return the resolved <code>Class</code> object or <code>null</code> if\r\n-     * the type could not be resolved\r\n-     */\r\n-    public static Class<?> getRawType(Type type, Type assigningType) {\r\n-        if (type instanceof Class<?>) {\r\n-            // it is raw, no problem\r\n-            return (Class<?>) type;\r\n-        }\r\n+      if (!subtypeFound) {\r\n+        types.add(type1);\r\n+      }\r\n+    }\r\n \r\n-        if (type instanceof ParameterizedType) {\r\n-            // simple enough to get the raw type of a ParameterizedType\r\n-            return getRawType((ParameterizedType) type);\r\n-        }\r\n+    return types.toArray(new Type[types.size()]);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Returns an array containing the sole type of {@link Object} if\r\n+   * {@link TypeVariable#getBounds()} returns an empty array. Otherwise, it\r\n+   * returns the result of <code>TypeVariable.getBounds()</code> passed into\r\n+   * {@link #normalizeUpperBounds}. </p>\r\n+   *\r\n+   * @param typeVariable the subject type variable\r\n+   * @return a non-empty array containing the bounds of the type variable.\r\n+   */\r\n+  public static Type[] getImplicitBounds(TypeVariable<?> typeVariable) {\r\n+    Type[] bounds = typeVariable.getBounds();\r\n+\r\n+    return bounds.length == 0 ? new Type[] {Object.class} : normalizeUpperBounds(bounds);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Returns an array containing the sole value of {@link Object} if\r\n+   * {@link WildcardType#getUpperBounds()} returns an empty array. Otherwise,\r\n+   * it returns the result of <code>WildcardType.getUpperBounds()</code>\r\n+   * passed into {@link #normalizeUpperBounds}. </p>\r\n+   *\r\n+   * @param wildcardType the subject wildcard type\r\n+   * @return a non-empty array containing the upper bounds of the wildcard\r\n+   * type.\r\n+   */\r\n+  public static Type[] getImplicitUpperBounds(WildcardType wildcardType) {\r\n+    Type[] bounds = wildcardType.getUpperBounds();\r\n+\r\n+    return bounds.length == 0 ? new Type[] {Object.class} : normalizeUpperBounds(bounds);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Returns an array containing a single value of <code>null</code> if\r\n+   * {@link WildcardType#getLowerBounds()} returns an empty array. Otherwise,\r\n+   * it returns the result of <code>WildcardType.getLowerBounds()</code>. </p>\r\n+   *\r\n+   * @param wildcardType the subject wildcard type\r\n+   * @return a non-empty array containing the lower bounds of the wildcard\r\n+   * type.\r\n+   */\r\n+  public static Type[] getImplicitLowerBounds(WildcardType wildcardType) {\r\n+    Type[] bounds = wildcardType.getLowerBounds();\r\n+\r\n+    return bounds.length == 0 ? new Type[] {null} : bounds;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Determines whether or not specified types satisfy the bounds of their\r\n+   * mapped type variables. When a type parameter extends another (such as\r\n+   * <code><T, S extends T></code>), uses another as a type parameter (such as\r\n+   * <code><T, S extends Comparable<T></code>), or otherwise depends on\r\n+   * another type variable to be specified, the dependencies must be included\r\n+   * in <code>typeVarAssigns</code>. </p>\r\n+   *\r\n+   * @param typeVarAssigns specifies the potential types to be assigned to the\r\n+   * type variables.\r\n+   * @return whether or not the types can be assigned to their respective type\r\n+   * variables.\r\n+   */\r\n+  public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns) {\r\n+    // all types must be assignable to all the bounds of the their mapped\r\n+    // type variable.\r\n+    for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet()) {\r\n+      TypeVariable<?> typeVar = entry.getKey();\r\n+      Type type = entry.getValue();\r\n+\r\n+      for (Type bound : getImplicitBounds(typeVar)) {\r\n+        if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),\r\n+          typeVarAssigns)) {\r\n+          return false;\r\n+        }\r\n+      }\r\n+    }\r\n \r\n-        if (type instanceof TypeVariable<?>) {\r\n-            if (assigningType == null) {\r\n-                return null;\r\n-            }\r\n+    return true;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Transforms the passed in type to a {@code Class} object. Type-checking method of convenience. </p>\r\n+   *\r\n+   * @param parameterizedType the type to be converted\r\n+   * @return the corresponding {@code Class} object\r\n+   * @throws IllegalStateException if the conversion fails\r\n+   */\r\n+  private static Class<?> getRawType(ParameterizedType parameterizedType) {\r\n+    Type rawType = parameterizedType.getRawType();\r\n+\r\n+    // check if raw type is a Class object\r\n+    // not currently necessary, but since the return type is Type instead of\r\n+    // Class, there's enough reason to believe that future versions of Java\r\n+    // may return other Type implementations. And type-safety checking is\r\n+    // rarely a bad idea.\r\n+    if (!(rawType instanceof Class<?>)) {\r\n+      throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\r\n+    }\r\n \r\n-            // get the entity declaring this type variable\r\n-            Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();\r\n+    return (Class<?>) rawType;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p> Get the raw type of a Java type, given its context. Primarily for use\r\n+   * with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do\r\n+   * not know the runtime type of <code>type</code>: if you know you have a\r\n+   * {@link Class} instance, it is already raw; if you know you have a\r\n+   * {@link ParameterizedType}, its raw type is only a method call away. </p>\r\n+   *\r\n+   * @param type to resolve\r\n+   * @param assigningType type to be resolved against\r\n+   * @return the resolved <code>Class</code> object or <code>null</code> if\r\n+   * the type could not be resolved\r\n+   */\r\n+  public static Class<?> getRawType(Type type, Type assigningType) {\r\n+    if (type instanceof Class<?>) {\r\n+      // it is raw, no problem\r\n+      return (Class<?>) type;\r\n+    }\r\n \r\n-            // can't get the raw type of a method- or constructor-declared type\r\n-            // variable\r\n-            if (!(genericDeclaration instanceof Class<?>)) {\r\n-                return null;\r\n-            }\r\n+    if (type instanceof ParameterizedType) {\r\n+      // simple enough to get the raw type of a ParameterizedType\r\n+      return getRawType((ParameterizedType) type);\r\n+    }\r\n \r\n-            // get the type arguments for the declaring class/interface based\r\n-            // on the enclosing type\r\n-            Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,\r\n-                    (Class<?>) genericDeclaration);\r\n+    if (type instanceof TypeVariable<?>) {\r\n+      if (assigningType == null) {\r\n+        return null;\r\n+      }\r\n \r\n-            // enclosingType has to be a subclass (or subinterface) of the\r\n-            // declaring type\r\n-            if (typeVarAssigns == null) {\r\n-                return null;\r\n-            }\r\n+      // get the entity declaring this type variable\r\n+      Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();\r\n \r\n-            // get the argument assigned to this type variable\r\n-            Type typeArgument = typeVarAssigns.get(type);\r\n+      // can't get the raw type of a method- or constructor-declared type\r\n+      // variable\r\n+      if (!(genericDeclaration instanceof Class<?>)) {\r\n+        return null;\r\n+      }\r\n \r\n-            if (typeArgument == null) {\r\n-                return null;\r\n-            }\r\n+      // get the type arguments for the declaring class/interface based\r\n+      // on the enclosing type\r\n+      Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,\r\n+        (Class<?>) genericDeclaration);\r\n \r\n-            // get the argument for this type variable\r\n-            return getRawType(typeArgument, assigningType);\r\n-        }\r\n+      // enclosingType has to be a subclass (or subinterface) of the\r\n+      // declaring type\r\n+      if (typeVarAssigns == null) {\r\n+        return null;\r\n+      }\r\n \r\n-        if (type instanceof GenericArrayType) {\r\n-            // get raw component type\r\n-            Class<?> rawComponentType = getRawType(((GenericArrayType) type)\r\n-                    .getGenericComponentType(), assigningType);\r\n+      // get the argument assigned to this type variable\r\n+      Type typeArgument = typeVarAssigns.get(type);\r\n \r\n-            // create array type from raw component type and return its class\r\n-            return Array.newInstance(rawComponentType, 0).getClass();\r\n-        }\r\n+      if (typeArgument == null) {\r\n+        return null;\r\n+      }\r\n \r\n-        // (hand-waving) this is not the method you're looking for\r\n-        if (type instanceof WildcardType) {\r\n-            return null;\r\n-        }\r\n+      // get the argument for this type variable\r\n+      return getRawType(typeArgument, assigningType);\r\n+    }\r\n+\r\n+    if (type instanceof GenericArrayType) {\r\n+      // get raw component type\r\n+      Class<?> rawComponentType = getRawType(((GenericArrayType) type)\r\n+        .getGenericComponentType(), assigningType);\r\n \r\n-        throw new IllegalArgumentException(\"unknown type: \" + type);\r\n+      // create array type from raw component type and return its class\r\n+      return Array.newInstance(rawComponentType, 0).getClass();\r\n     }\r\n \r\n-    /**\r\n-     * Learn whether the specified type denotes an array type.\r\n-     * @param type the type to be checked\r\n-     * @return <code>true</code> if <code>type</code> is an array class or a {@link GenericArrayType}.\r\n-     */\r\n-    public static boolean isArrayType(Type type) {\r\n-        return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();\r\n+    // (hand-waving) this is not the method you're looking for\r\n+    if (type instanceof WildcardType) {\r\n+      return null;\r\n     }\r\n \r\n-    /**\r\n-     * Get the array component type of <code>type</code>.\r\n-     * @param type the type to be checked\r\n-     * @return component type or null if type is not an array type\r\n-     */\r\n-    public static Type getArrayComponentType(Type type) {\r\n-        if (type instanceof Class<?>) {\r\n-            Class<?> clazz = (Class<?>) type;\r\n-            return clazz.isArray() ? clazz.getComponentType() : null;\r\n-        }\r\n-        if (type instanceof GenericArrayType) {\r\n-            return ((GenericArrayType) type).getGenericComponentType();\r\n-        }\r\n-        return null;\r\n+    throw new IllegalArgumentException(\"unknown type: \" + type);\r\n+  }\r\n+\r\n+  /**\r\n+   * Learn whether the specified type denotes an array type.\r\n+   * @param type the type to be checked\r\n+   * @return <code>true</code> if <code>type</code> is an array class or a {@link GenericArrayType}.\r\n+   */\r\n+  public static boolean isArrayType(Type type) {\r\n+    return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();\r\n+  }\r\n+\r\n+  /**\r\n+   * Get the array component type of <code>type</code>.\r\n+   * @param type the type to be checked\r\n+   * @return component type or null if type is not an array type\r\n+   */\r\n+  public static Type getArrayComponentType(Type type) {\r\n+    if (type instanceof Class<?>) {\r\n+      Class<?> clazz = (Class<?>) type;\r\n+      return clazz.isArray() ? clazz.getComponentType() : null;\r\n+    }\r\n+    if (type instanceof GenericArrayType) {\r\n+      return ((GenericArrayType) type).getGenericComponentType();\r\n     }\r\n+    return null;\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 1421
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "783",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 12, expected is 20, indentation should be the same level as line 784.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/45/TypeUtils.java\nindex 2b7216a6adf..becfb7a9fb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/45/TypeUtils.java\n@@ -780,7 +780,7 @@ public class TypeUtils {\n             // argument of parameterizedType is a type variable of cls\r\n             if (typeVarList.contains(typeArg)\r\n             // type variable of parameterizedType has an assignment in\r\n-                    // the super type.\r\n+            // the super type.\r\n                     && typeVarAssigns.containsKey(typeVar)) {\r\n                 // map the assignment to the cls's type variable\r\n                 typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "782",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 12, expected is 20, indentation should be the same level as line 783.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/45/TypeUtils.java\nindex 2b7216a6adf..4b61c7adb00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/45/TypeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/45/TypeUtils.java\n@@ -778,9 +778,8 @@ public class TypeUtils {\n             Type typeArg = typeArgs[i];\r\n \r\n             // argument of parameterizedType is a type variable of cls\r\n-            if (typeVarList.contains(typeArg)\r\n-            // type variable of parameterizedType has an assignment in\r\n-                    // the super type.\r\n+            if (typeVarList.contains(typeArg)// type variable of parameterizedType has an assignment in\r\n+            // the super type.\r\n                     && typeVarAssigns.containsKey(typeVar)) {\r\n                 // map the assignment to the cls's type variable\r\n                 typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}