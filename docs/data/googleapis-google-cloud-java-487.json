{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "487",
    "information": {
        "errors": [
            {
                "line": "54",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n  private static final BaseListResult<BlobInfo> LIST_RESULT =\n      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n  private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n      Storage.BlobListOption.maxResults(100);\n  private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "column": "45",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/487/SerializationTest.java\nindex 2dd1b8cbf89..98cb2320ad2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/487/SerializationTest.java\n@@ -51,8 +51,8 @@ public class SerializationTest {\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList(),\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n   private static final BaseListResult<BlobInfo> LIST_RESULT =\n-      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n-  private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n+      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()))\n+  ; private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n       Storage.BlobListOption.maxResults(100);\n   private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =\n       Storage.BlobSourceOption.generationMatch(1);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/487/SerializationTest.java\nindex 2dd1b8cbf89..6ea8386c3ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/487/SerializationTest.java\n@@ -51,7 +51,8 @@ public class SerializationTest {\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList(),\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n   private static final BaseListResult<BlobInfo> LIST_RESULT =\n-      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n+      new BaseListResult<>(null, \"c\",\n+          Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n   private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n       Storage.BlobListOption.maxResults(100);\n   private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =\n@@ -108,7 +109,7 @@ public class SerializationTest {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-        new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+             new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "51",
                    "column": "51",
                    "severity": "warning",
                    "message": "GenericWhitespace '>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "52",
                    "column": "51",
                    "severity": "warning",
                    "message": "GenericWhitespace '>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/487/SerializationTest.java\nindex 2dd1b8cbf89..da3cf4eb77e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/487/SerializationTest.java\n@@ -48,8 +48,8 @@ public class SerializationTest {\n   private static final BatchRequest BATCH_REQUEST = BatchRequest.builder().delete(\"B\", \"N\").build();\n   private static final BatchResponse BATCH_RESPONSE = new BatchResponse(\n       Collections.singletonList(BatchResponse.Result.of(true)),\n-      Collections.<BatchResponse.Result<BlobInfo>>emptyList(),\n-      Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n+      Collections.<BatchResponse.Result<BlobInfo>> emptyList(),\n+      Collections.<BatchResponse.Result<BlobInfo>> emptyList());\n   private static final BaseListResult<BlobInfo> LIST_RESULT =\n       new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n   private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n@@ -65,7 +65,7 @@ public class SerializationTest {\n   private static final Storage.BucketTargetOption BUCKET_TARGET_OPTIONS =\n       Storage.BucketTargetOption.metagenerationNotMatch();\n \n-  @Test\n+@Test\n   public void testServiceOptions() throws Exception {\n     StorageOptions options = StorageOptions.builder()\n         .projectId(\"p1\")\n@@ -112,4 +112,4 @@ public class SerializationTest {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 244).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 296).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/487/SerializationTest.java\nindex 2dd1b8cbf89..9cf4fe578c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/487/SerializationTest.java\n@@ -22,9 +22,7 @@ import static org.junit.Assert.assertNotSame;\n import com.google.gcloud.AuthCredentials;\n import com.google.gcloud.RetryParams;\n import com.google.gcloud.storage.Acl.Project.ProjectRole;\n-\n import org.junit.Test;\n-\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -33,6 +31,7 @@ import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Collections;\n \n+\n public class SerializationTest {\n \n   private static final Acl.Domain ACL_DOMAIN = new Acl.Domain(\"domain\");\n@@ -43,54 +42,30 @@ public class SerializationTest {\n   private static final BlobInfo BLOB_INFO = BlobInfo.builder(\"b\", \"n\").build();\n   private static final BucketInfo BUCKET_INFO = BucketInfo.of(\"b\");\n   private static final Cors.Origin ORIGIN = Cors.Origin.any();\n-  private static final Cors CORS =\n-      Cors.builder().maxAgeSeconds(1).origins(Collections.singleton(ORIGIN)).build();\n+  private static final Cors CORS = Cors.builder().maxAgeSeconds(1).origins(Collections.singleton(ORIGIN)).build();\n   private static final BatchRequest BATCH_REQUEST = BatchRequest.builder().delete(\"B\", \"N\").build();\n-  private static final BatchResponse BATCH_RESPONSE = new BatchResponse(\n-      Collections.singletonList(BatchResponse.Result.of(true)),\n-      Collections.<BatchResponse.Result<BlobInfo>>emptyList(),\n-      Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n-  private static final BaseListResult<BlobInfo> LIST_RESULT =\n-      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n-  private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n-      Storage.BlobListOption.maxResults(100);\n-  private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =\n-      Storage.BlobSourceOption.generationMatch(1);\n-  private static final Storage.BlobTargetOption BLOB_TARGET_OPTIONS =\n-      Storage.BlobTargetOption.generationMatch();\n-  private static final Storage.BucketListOption BUCKET_LIST_OPTIONS =\n-      Storage.BucketListOption.prefix(\"bla\");\n-  private static final Storage.BucketSourceOption BUCKET_SOURCE_OPTIONS =\n-      Storage.BucketSourceOption.metagenerationMatch(1);\n-  private static final Storage.BucketTargetOption BUCKET_TARGET_OPTIONS =\n-      Storage.BucketTargetOption.metagenerationNotMatch();\n+  private static final BatchResponse BATCH_RESPONSE = new BatchResponse(Collections.singletonList(BatchResponse.Result.of(true)), Collections.<BatchResponse.Result<BlobInfo>>emptyList(), Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n+  private static final BaseListResult<BlobInfo> LIST_RESULT = new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n+  private static final Storage.BlobListOption BLOB_LIST_OPTIONS = Storage.BlobListOption.maxResults(100);\n+  private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS = Storage.BlobSourceOption.generationMatch(1);\n+  private static final Storage.BlobTargetOption BLOB_TARGET_OPTIONS = Storage.BlobTargetOption.generationMatch();\n+  private static final Storage.BucketListOption BUCKET_LIST_OPTIONS = Storage.BucketListOption.prefix(\"bla\");\n+  private static final Storage.BucketSourceOption BUCKET_SOURCE_OPTIONS = Storage.BucketSourceOption.metagenerationMatch(1);\n+  private static final Storage.BucketTargetOption BUCKET_TARGET_OPTIONS = Storage.BucketTargetOption.metagenerationNotMatch();\n \n   @Test\n   public void testServiceOptions() throws Exception {\n-    StorageOptions options = StorageOptions.builder()\n-        .projectId(\"p1\")\n-        .authCredentials(AuthCredentials.createForAppEngine())\n-        .build();\n+    StorageOptions options = StorageOptions.builder().projectId(\"p1\").authCredentials(AuthCredentials.createForAppEngine()).build();\n     StorageOptions serializedCopy = serializeAndDeserialize(options);\n     assertEquals(options, serializedCopy);\n-\n-    options = options.toBuilder()\n-        .projectId(\"p2\")\n-        .retryParams(RetryParams.getDefaultInstance())\n-        .authCredentials(AuthCredentials.noCredentials())\n-        .pathDelimiter(\":\")\n-        .build();\n+    options = options.toBuilder().projectId(\"p2\").retryParams(RetryParams.getDefaultInstance()).authCredentials(AuthCredentials.noCredentials()).pathDelimiter(\":\").build();\n     serializedCopy = serializeAndDeserialize(options);\n     assertEquals(options, serializedCopy);\n   }\n \n   @Test\n   public void testModelAndRequests() throws Exception {\n-    Serializable[] objects = {ACL_DOMAIN, ACL_GROUP, ACL_PROJECT_, ACL_USER, ACL_RAW, BLOB_INFO,\n-        BUCKET_INFO,\n-        ORIGIN, CORS, BATCH_REQUEST, BATCH_RESPONSE, LIST_RESULT, BLOB_LIST_OPTIONS,\n-        BLOB_SOURCE_OPTIONS, BLOB_TARGET_OPTIONS, BUCKET_LIST_OPTIONS, BUCKET_SOURCE_OPTIONS,\n-        BUCKET_TARGET_OPTIONS};\n+    Serializable[] objects = {ACL_DOMAIN, ACL_GROUP, ACL_PROJECT_, ACL_USER, ACL_RAW, BLOB_INFO, BUCKET_INFO, ORIGIN, CORS, BATCH_REQUEST, BATCH_RESPONSE, LIST_RESULT, BLOB_LIST_OPTIONS, BLOB_SOURCE_OPTIONS, BLOB_TARGET_OPTIONS, BUCKET_LIST_OPTIONS, BUCKET_SOURCE_OPTIONS, BUCKET_TARGET_OPTIONS};\n     for (Serializable obj : objects) {\n       Object copy = serializeAndDeserialize(obj);\n       assertEquals(obj, obj);\n@@ -101,15 +76,15 @@ public class SerializationTest {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private <T extends java.io.Serializable> T serializeAndDeserialize(T obj)\n-      throws IOException, ClassNotFoundException {\n+  private <T extends java.io.Serializable> T serializeAndDeserialize(T obj) throws IOException, ClassNotFoundException {\n     ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-    try (ObjectOutputStream output = new ObjectOutputStream(bytes)) {\n+    try (ObjectOutputStream output =\n+      new ObjectOutputStream(bytes)) {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-        new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+      new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "column": "45",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/487/SerializationTest.java\nindex 2dd1b8cbf89..98cb2320ad2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/487/SerializationTest.java\n@@ -51,8 +51,8 @@ public class SerializationTest {\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList(),\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n   private static final BaseListResult<BlobInfo> LIST_RESULT =\n-      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n-  private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n+      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()))\n+  ; private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n       Storage.BlobListOption.maxResults(100);\n   private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =\n       Storage.BlobSourceOption.generationMatch(1);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/487/SerializationTest.java\nindex 2dd1b8cbf89..ab38440d425 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/487/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/487/SerializationTest.java\n@@ -51,7 +51,8 @@ public class SerializationTest {\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList(),\n       Collections.<BatchResponse.Result<BlobInfo>>emptyList());\n   private static final BaseListResult<BlobInfo> LIST_RESULT =\n-      new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n+\n+    new BaseListResult<>(null, \"c\", Collections.singletonList(BlobInfo.builder(\"b\", \"n\").build()));\n   private static final Storage.BlobListOption BLOB_LIST_OPTIONS =\n       Storage.BlobListOption.maxResults(100);\n   private static final Storage.BlobSourceOption BLOB_SOURCE_OPTIONS =\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}