{
    "project_name": "Angel-ML-angel",
    "error_id": "1095",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1095/ParameterServersBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1095/ParameterServersBlock.java\nindex 6ce41a2ad95..54816f1e162 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1095/ParameterServersBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1095/ParameterServersBlock.java\n@@ -93,8 +93,7 @@ public class ParameterServersBlock extends HtmlBlock {\n \n     for (AMParameterServer ps : amContext.getParameterServerManager().getParameterServerMap()\n         .values()) {\n-\n-      Map<PSAttemptId, PSAttempt> psAttempts = ps.getPSAttempts();\n+  Map<PSAttemptId, PSAttempt> psAttempts = ps.getPSAttempts();\n       for (PSAttempt psAttempt : psAttempts.values()) {\n         if (stateSet.contains(psAttempt.getInternalState())) {\n           TR<TBODY<TABLE<Hamlet>>> tr = tbody.tr();\n@@ -110,34 +109,27 @@ public class ParameterServersBlock extends HtmlBlock {\n                 .td($(PARAMETERSERVER_STATE))\n                 .td(\"N/A\")\n                 .td(psAttempt.getLaunchTime() == 0 ? \"N/A\" : new Date(psAttempt.getLaunchTime())\n-                    .toString())\n-                .td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime())\n-                    .toString()).td(elaspedTs == 0 ? \"N/A\" : new Date(elaspedTs).toString())\n-                .td(\"N/A\").td(\"N/A\");\n+                    .toString()).td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime())\n+                    .toString()).td(elaspedTs == 0 ? \"N/A\" : new Date(elaspedTs).toString()).td(\"N/A\").td(\"N/A\");\n             tr._();\n           } else {\n             tr.td(psAttempt.getId().toString())\n                 .td($(PARAMETERSERVER_STATE))\n                 .td()\n                 .a(url(MRWebAppUtil.getYARNWebappScheme(), psAttempt.getNodeHttpAddr()),\n-                    psAttempt.getNodeHttpAddr())\n-                ._()\n+                    psAttempt.getNodeHttpAddr())._()\n                 .td(psAttempt.getLaunchTime() == 0 ? \"N/A\" : new Date(psAttempt.getLaunchTime())\n-                    .toString())\n-                .td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime())\n-                    .toString())\n-                .td(elaspedTs == 0 ? \"N/A\" : StringUtils.formatTime(elaspedTs))\n+                    .toString()).td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime())\n+                    .toString()).td(elaspedTs == 0 ? \"N/A\" : StringUtils.formatTime(elaspedTs))\n                 .td()\n                 .a(url(MRWebAppUtil.getYARNWebappScheme(), psAttempt.getNodeHttpAddr(), \"node\",\n                     \"containerlogs\", psAttempt.getContainerIdStr(), amContext.getUser().toString()),\n-                    \"log\")\n+    \"log\")\n                 ._()\n                 .td()\n                 .a(url(\"/angel/parameterServerThreadStackPage/\", psAttempt.getId().toString()),\n                     \"psthreadstack\")._();\n-\n-\n-            tr._();\n+tr._();\n           }\n         }\n \n@@ -145,4 +137,4 @@ public class ParameterServersBlock extends HtmlBlock {\n     }\n     tbody._()._();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 715).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1095/ParameterServersBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1095/ParameterServersBlock.java\nindex 6ce41a2ad95..47d379dcc10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1095/ParameterServersBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1095/ParameterServersBlock.java\n@@ -22,7 +22,6 @@ import com.tencent.angel.master.ps.attempt.PSAttempt;\n import com.tencent.angel.master.ps.attempt.PSAttemptStateInternal;\n import com.tencent.angel.master.ps.ps.AMParameterServer;\n import com.tencent.angel.ps.PSAttemptId;\n-\n import org.apache.hadoop.mapreduce.v2.util.MRWebAppUtil;\n import org.apache.hadoop.util.StringUtils;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet;\n@@ -31,17 +30,16 @@ import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TBODY;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.THEAD;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TR;\n import org.apache.hadoop.yarn.webapp.view.HtmlBlock;\n-\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n-\n import static com.tencent.angel.webapp.AngelParams.PARAMETERSERVER_STATE;\n import static org.apache.hadoop.yarn.util.StringHelper.join;\n import static org.apache.hadoop.yarn.webapp.view.JQueryUI._TH;\n \n public class ParameterServersBlock extends HtmlBlock {\n+\n   final AMContext amContext;\n \n   @Inject\n@@ -79,21 +77,13 @@ public class ParameterServersBlock extends HtmlBlock {\n   @Override\n   protected void render(Block html) {\n     set(TITLE, join(\"Angel ParameterServers\"));\n-\n     TABLE<Hamlet> table = html.table(\"#job\");\n     TR<THEAD<TABLE<Hamlet>>> headTr = table.thead().tr();\n-\n-    headTr.th(_TH, \"id\").th(_TH, \"state\").th(_TH, \"node address\").th(_TH, \"start time\")\n-        .th(_TH, \"end time\").th(_TH, \"elapsed time\").th(_TH, \"log\").th(_TH, \"threadstack\");\n+    headTr.th(_TH, \"id\").th(_TH, \"state\").th(_TH, \"node address\").th(_TH, \"start time\").th(_TH, \"end time\").th(_TH, \"elapsed time\").th(_TH, \"log\").th(_TH, \"threadstack\");\n     headTr._()._();\n-\n     Set<PSAttemptStateInternal> stateSet = transformToInternalState($(PARAMETERSERVER_STATE));\n-\n     TBODY<TABLE<Hamlet>> tbody = table.tbody();\n-\n-    for (AMParameterServer ps : amContext.getParameterServerManager().getParameterServerMap()\n-        .values()) {\n-\n+    for (AMParameterServer ps : amContext.getParameterServerManager().getParameterServerMap().values()) {\n       Map<PSAttemptId, PSAttempt> psAttempts = ps.getPSAttempts();\n       for (PSAttempt psAttempt : psAttempts.values()) {\n         if (stateSet.contains(psAttempt.getInternalState())) {\n@@ -102,47 +92,20 @@ public class ParameterServersBlock extends HtmlBlock {\n           if (psAttempt.getLaunchTime() != 0 && psAttempt.getFinishTime() != 0) {\n             elaspedTs = psAttempt.getFinishTime() - psAttempt.getLaunchTime();\n           } else if (psAttempt.getLaunchTime() != 0 && psAttempt.getFinishTime() == 0) {\n-            elaspedTs = System.currentTimeMillis() - psAttempt.getLaunchTime();\n-          }\n+                   elaspedTs = System.currentTimeMillis() - psAttempt.getLaunchTime();\n+                 }\n \n           if (psAttempt.getNodeHttpAddr() == null) {\n-            tr.td(psAttempt.getId().toString())\n-                .td($(PARAMETERSERVER_STATE))\n-                .td(\"N/A\")\n-                .td(psAttempt.getLaunchTime() == 0 ? \"N/A\" : new Date(psAttempt.getLaunchTime())\n-                    .toString())\n-                .td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime())\n-                    .toString()).td(elaspedTs == 0 ? \"N/A\" : new Date(elaspedTs).toString())\n-                .td(\"N/A\").td(\"N/A\");\n+            tr.td(psAttempt.getId().toString()).td($(PARAMETERSERVER_STATE)).td(\"N/A\").td(psAttempt.getLaunchTime() == 0 ? \"N/A\" : new Date(psAttempt.getLaunchTime()).toString()).td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime()).toString()).td(elaspedTs == 0 ? \"N/A\" : new Date(elaspedTs).toString()).td(\"N/A\").td(\"N/A\");\n             tr._();\n           } else {\n-            tr.td(psAttempt.getId().toString())\n-                .td($(PARAMETERSERVER_STATE))\n-                .td()\n-                .a(url(MRWebAppUtil.getYARNWebappScheme(), psAttempt.getNodeHttpAddr()),\n-                    psAttempt.getNodeHttpAddr())\n-                ._()\n-                .td(psAttempt.getLaunchTime() == 0 ? \"N/A\" : new Date(psAttempt.getLaunchTime())\n-                    .toString())\n-                .td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime())\n-                    .toString())\n-                .td(elaspedTs == 0 ? \"N/A\" : StringUtils.formatTime(elaspedTs))\n-                .td()\n-                .a(url(MRWebAppUtil.getYARNWebappScheme(), psAttempt.getNodeHttpAddr(), \"node\",\n-                    \"containerlogs\", psAttempt.getContainerIdStr(), amContext.getUser().toString()),\n-                    \"log\")\n-                ._()\n-                .td()\n-                .a(url(\"/angel/parameterServerThreadStackPage/\", psAttempt.getId().toString()),\n-                    \"psthreadstack\")._();\n-\n-\n+            tr.td(psAttempt.getId().toString()).td($(PARAMETERSERVER_STATE)).td().a(url(MRWebAppUtil.getYARNWebappScheme(), psAttempt.getNodeHttpAddr()), psAttempt.getNodeHttpAddr())._().td(psAttempt.getLaunchTime() == 0 ? \"N/A\" : new Date(psAttempt.getLaunchTime()).toString()).td(psAttempt.getFinishTime() == 0 ? \"N/A\" : new Date(psAttempt.getFinishTime()).toString()).td(elaspedTs == 0 ? \"N/A\" : StringUtils.formatTime(elaspedTs)).td().a(url(MRWebAppUtil.getYARNWebappScheme(), psAttempt.getNodeHttpAddr(), \"node\", \"containerlogs\", psAttempt.getContainerIdStr(), amContext.getUser().toString()), \"log\")._().td().a(url(\"/angel/parameterServerThreadStackPage/\", psAttempt.getId().toString()), \"psthreadstack\")._();\n             tr._();\n           }\n         }\n-\n       }\n     }\n     tbody._()._();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}