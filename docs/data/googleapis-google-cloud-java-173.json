{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "173",
    "information": {
        "errors": [
            {
                "line": "300",
                "column": "5",
                "severity": "warning",
                "message": "'}' at column 5 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "      }\n      mark = index + 1;\n    } while (index != -1);\n    if (!mutated) {\n      return this;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/173/UnixPath.java\nindex 3d8c6ae7729..68e3b945606 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/173/UnixPath.java\n@@ -297,7 +297,8 @@ final class UnixPath implements CharSequence {\n           }\n       }\n       mark = index + 1;\n-    } while (index != -1);\n+    }\n+    while (index != -1);\n     if (!mutated) {\n       return this;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "300",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/173/UnixPath.java\nindex 3d8c6ae7729..0e4636ff2a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/173/UnixPath.java\n@@ -527,7 +527,7 @@ final class UnixPath implements CharSequence {\n     return result != null\n         ? result\n         : (lazyStringParts =\n-            path.isEmpty() || isRoot() ? Collections.<String>emptyList() : createParts());\n+        path.isEmpty() || isRoot() ? Collections.<String>emptyList() : createParts());\n   }\n \n   private List<String> createParts() {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "295",
                    "severity": "warning",
                    "message": "'switch rcurly' has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "533",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/173/UnixPath.java\nindex 3d8c6ae7729..fc1436940b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/173/UnixPath.java\n@@ -156,9 +156,7 @@ final class UnixPath implements CharSequence {\n   public boolean seemsLikeADirectory() {\n     int length = path.length();\n     return path.isEmpty()\n-        || path.charAt(length - 1) == SEPARATOR\n-        || path.endsWith(\".\") && (length == 1 || path.charAt(length - 2) == SEPARATOR)\n-        || path.endsWith(\"..\") && (length == 2 || path.charAt(length - 3) == SEPARATOR);\n+        || path.charAt(length - 1) == SEPARATOR || path.endsWith(\".\") && (length == 1 || path.charAt(length - 2) == SEPARATOR) || path.endsWith(\"..\") && (length == 2 || path.charAt(length - 3) == SEPARATOR);\n   }\n \n   /**\n@@ -192,10 +190,9 @@ final class UnixPath implements CharSequence {\n       return null;\n     }\n     int index =\n-        hasTrailingSeparator()\n-            ? path.lastIndexOf(SEPARATOR, path.length() - 2)\n+        hasTrailingSeparator() ? path.lastIndexOf(SEPARATOR, path.length() - 2)\n             : path.lastIndexOf(SEPARATOR);\n-    if (index == -1) {\n+if (index == -1) {\n       return isAbsolute() ? ROOT_PATH : null;\n     } else {\n       return new UnixPath(permitEmptyComponents, path.substring(0, index + 1));\n@@ -295,9 +292,10 @@ final class UnixPath implements CharSequence {\n           } else {\n             mutated = true;\n           }\n-      }\n+  }\n       mark = index + 1;\n-    } while (index != -1);\n+    }\n+while (index != -1);\n     if (!mutated) {\n       return this;\n     }\n@@ -524,9 +522,7 @@ final class UnixPath implements CharSequence {\n    */\n   private List<String> getParts() {\n     List<String> result = lazyStringParts;\n-    return result != null\n-        ? result\n-        : (lazyStringParts =\n+    return result != null ? result : (lazyStringParts =\n             path.isEmpty() || isRoot() ? Collections.<String>emptyList() : createParts());\n   }\n \n@@ -534,8 +530,8 @@ final class UnixPath implements CharSequence {\n     if (permitEmptyComponents) {\n       return SPLITTER_PERMIT_EMPTY_COMPONENTS.splitToList(\n           path.charAt(0) == SEPARATOR ? path.substring(1) : path);\n-    } else {\n+  } else {\n       return SPLITTER.splitToList(path);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "230",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "253",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "254",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "255",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "291",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "294",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "296",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "297",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "299",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "302",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "303",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "304",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "305",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "307",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 21, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "307",
                    "column": "22",
                    "severity": "warning",
                    "message": "'}' at column 22 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "307",
                    "column": "23",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "307",
                    "column": "23",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "310",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "310",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "331",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "332",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "333",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "334",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 18, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "335",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "336",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "400",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "401",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "402",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 13, expected level should be 15.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "403",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "404",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 18, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "429",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "430",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "431",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "432",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "434",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 18, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "487",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "558",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "563",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/173/UnixPath.java\nindex 3d8c6ae7729..00afc9c9047 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/173/UnixPath.java\n@@ -25,12 +25,10 @@ import com.google.common.collect.Iterators;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Ordering;\n import com.google.common.collect.PeekingIterator;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n@@ -48,22 +46,27 @@ import javax.annotation.concurrent.Immutable;\n  * <a href=\"http://docs.oracle.com/javase/tutorial/i18n/text/supplementaryChars.html\">Supplementary\n  * Characters as Surrogates</a>.\n  */\n-@Immutable\n-final class UnixPath implements CharSequence {\n+\n+\n+@Immutable final class UnixPath implements CharSequence {\n \n   public static final char DOT = '.';\n+\n   public static final char SEPARATOR = '/';\n+\n   public static final String ROOT = \"\" + SEPARATOR;\n+\n   public static final String CURRENT_DIR = \"\" + DOT;\n+\n   public static final String PARENT_DIR = \"\" + DOT + DOT;\n+\n   public static final UnixPath EMPTY_PATH = new UnixPath(false, \"\");\n-  public static final UnixPath ROOT_PATH = new UnixPath(false, ROOT);\n \n+  public static final UnixPath ROOT_PATH = new UnixPath(false, ROOT);\n   private static final Splitter SPLITTER = Splitter.on(SEPARATOR).omitEmptyStrings();\n   private static final Splitter SPLITTER_PERMIT_EMPTY_COMPONENTS = Splitter.on(SEPARATOR);\n   private static final Joiner JOINER = Joiner.on(SEPARATOR);\n   private static final Ordering<Iterable<String>> ORDERING = Ordering.natural().lexicographical();\n-\n   private final String path;\n   private List<String> lazyStringParts;\n   private final boolean permitEmptyComponents;\n@@ -76,13 +79,14 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns new path of {@code first}.\n    */\n+\n   public static UnixPath getPath(boolean permitEmptyComponents, String path) {\n     if (path.isEmpty()) {\n       return EMPTY_PATH;\n     } else if (isRootInternal(path)) {\n-      return ROOT_PATH;\n-    } else {\n-      return new UnixPath(permitEmptyComponents, path);\n+             return ROOT_PATH;\n+           } else {\n+             return new UnixPath(permitEmptyComponents, path);\n     }\n   }\n \n@@ -92,6 +96,7 @@ final class UnixPath implements CharSequence {\n    * @see #resolve(UnixPath)\n    * @see java.nio.file.FileSystem#getPath(String, String...)\n    */\n+\n   public static UnixPath getPath(boolean permitEmptyComponents, String first, String... more) {\n     if (more.length == 0) {\n       return getPath(permitEmptyComponents, first);\n@@ -102,17 +107,17 @@ final class UnixPath implements CharSequence {\n       if (part.isEmpty()) {\n         continue;\n       } else if (isAbsoluteInternal(part)) {\n-        if (i == more.length - 1) {\n-          return new UnixPath(permitEmptyComponents, part);\n-        } else {\n-          builder.replace(0, builder.length(), part);\n-        }\n-      } else if (hasTrailingSeparatorInternal(builder)) {\n-        builder.append(part);\n-      } else {\n-        builder.append(SEPARATOR);\n-        builder.append(part);\n-      }\n+               if (i == more.length - 1) {\n+                 return new UnixPath(permitEmptyComponents, part);\n+               } else {\n+                 builder.replace(0, builder.length(), part);\n+               }\n+             } else if (hasTrailingSeparatorInternal(builder)) {\n+                      builder.append(part);\n+                    } else {\n+                      builder.append(SEPARATOR);\n+                      builder.append(part);\n+             }\n     }\n     return new UnixPath(permitEmptyComponents, builder.toString());\n   }\n@@ -120,6 +125,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns {@code true} consists only of {@code separator}.\n    */\n+\n   public boolean isRoot() {\n     return isRootInternal(path);\n   }\n@@ -131,17 +137,20 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns {@code true} if path starts with {@code separator}.\n    */\n+\n   public boolean isAbsolute() {\n     return isAbsoluteInternal(path);\n   }\n \n   private static boolean isAbsoluteInternal(String path) {\n-    return !path.isEmpty() && path.charAt(0) == SEPARATOR;\n+    return !path.isEmpty()\n+      && path.charAt(0) == SEPARATOR;\n   }\n \n   /**\n    * Returns {@code true} if path ends with {@code separator}.\n    */\n+\n   public boolean hasTrailingSeparator() {\n     return hasTrailingSeparatorInternal(path);\n   }\n@@ -153,12 +162,12 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns {@code true} if path ends with a trailing slash, or would after normalization.\n    */\n+\n   public boolean seemsLikeADirectory() {\n     int length = path.length();\n-    return path.isEmpty()\n-        || path.charAt(length - 1) == SEPARATOR\n-        || path.endsWith(\".\") && (length == 1 || path.charAt(length - 2) == SEPARATOR)\n-        || path.endsWith(\"..\") && (length == 2 || path.charAt(length - 3) == SEPARATOR);\n+    return path.isEmpty() || path.charAt(length - 1) == SEPARATOR || path.endsWith(\".\")\n+      && (length == 1 || path.charAt(length - 2) == SEPARATOR) || path.endsWith(\"..\")\n+        && (length == 2 || path.charAt(length - 3) == SEPARATOR);\n   }\n \n   /**\n@@ -166,18 +175,17 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#getFileName()\n    */\n+\n   @Nullable\n   public UnixPath getFileName() {\n     if (path.isEmpty()) {\n       return EMPTY_PATH;\n     } else if (isRoot()) {\n-      return null;\n-    } else {\n-      List<String> parts = getParts();\n-      String last = parts.get(parts.size() - 1);\n-      return parts.size() == 1 && path.equals(last)\n-          ? this\n-          : new UnixPath(permitEmptyComponents, last);\n+             return null;\n+           } else {\n+             List<String> parts = getParts();\n+             String last = parts.get(parts.size() - 1);\n+             return parts.size() == 1 && path.equals(last) ? this : new UnixPath(permitEmptyComponents, last);\n     }\n   }\n \n@@ -186,15 +194,13 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#getParent()\n    */\n+\n   @Nullable\n   public UnixPath getParent() {\n     if (path.isEmpty() || isRoot()) {\n       return null;\n     }\n-    int index =\n-        hasTrailingSeparator()\n-            ? path.lastIndexOf(SEPARATOR, path.length() - 2)\n-            : path.lastIndexOf(SEPARATOR);\n+    int index = hasTrailingSeparator() ? path.lastIndexOf(SEPARATOR, path.length() - 2) : path.lastIndexOf(SEPARATOR);\n     if (index == -1) {\n       return isAbsolute() ? ROOT_PATH : null;\n     } else {\n@@ -207,6 +213,7 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#getRoot()\n    */\n+\n   @Nullable\n   public UnixPath getRoot() {\n     return isAbsolute() ? ROOT_PATH : null;\n@@ -217,8 +224,10 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#subpath(int, int)\n    */\n+\n   public UnixPath subpath(int beginIndex, int endIndex) {\n-    if (path.isEmpty() && beginIndex == 0 && endIndex == 1) {\n+    if (path.isEmpty()\n+    && beginIndex == 0 && endIndex == 1) {\n       return this;\n     }\n     checkArgument(beginIndex >= 0 && endIndex > beginIndex);\n@@ -236,13 +245,14 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#getNameCount()\n    */\n+\n   public int getNameCount() {\n     if (path.isEmpty()) {\n       return 1;\n     } else if (isRoot()) {\n-      return 0;\n-    } else {\n-      return getParts().size();\n+             return 0;\n+           } else {\n+             return getParts().size();\n     }\n   }\n \n@@ -251,6 +261,7 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#getName(int)\n    */\n+\n   public UnixPath getName(int index) {\n     if (path.isEmpty()) {\n       return this;\n@@ -267,6 +278,7 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#normalize()\n    */\n+\n   public UnixPath normalize() {\n     List<String> parts = new ArrayList<>();\n     boolean mutated = false;\n@@ -276,28 +288,26 @@ final class UnixPath implements CharSequence {\n     do {\n       index = path.indexOf(SEPARATOR, mark);\n       String part = path.substring(mark, index == -1 ? path.length() : index + 1);\n-      switch (part) {\n-        case CURRENT_DIR:\n-        case CURRENT_DIR + SEPARATOR:\n-          mutated = true;\n-          break;\n-        case PARENT_DIR:\n-        case PARENT_DIR + SEPARATOR:\n-          mutated = true;\n-          if (!parts.isEmpty()) {\n-            resultLength -= parts.remove(parts.size() - 1).length();\n-          }\n-          break;\n+      switch(part) {\n+        case CURRENT_DIR: case CURRENT_DIR + SEPARATOR:\n+                     mutated = true;\n+                     break;\n+        case PARENT_DIR: case PARENT_DIR + SEPARATOR:\n+                     mutated = true;\n+                     if (!parts.isEmpty()) {\n+                       resultLength -= parts.remove(parts.size() - 1).length();\n+                     }\n+                     break;\n         default:\n-          if (index != mark || index == 0) {\n-            parts.add(part);\n-            resultLength = part.length();\n-          } else {\n-            mutated = true;\n-          }\n-      }\n+                     if (index != mark || index == 0) {\n+                       parts.add(part);\n+                       resultLength = part.length();\n+                     } else {\n+                       mutated = true;\n+                     }}\n       mark = index + 1;\n-    } while (index != -1);\n+    }\n+while(index != -1);\n     if (!mutated) {\n       return this;\n     }\n@@ -313,16 +323,17 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#resolve(java.nio.file.Path)\n    */\n+\n   public UnixPath resolve(UnixPath other) {\n     if (other.path.isEmpty()) {\n       return this;\n     } else if (other.isAbsolute()) {\n-      return other;\n-    } else if (hasTrailingSeparator()) {\n-      return new UnixPath(permitEmptyComponents, path + other.path);\n-    } else {\n-      return new UnixPath(permitEmptyComponents, path + SEPARATOR + other.path);\n-    }\n+             return other;\n+           } else if (hasTrailingSeparator()) {\n+                    return new UnixPath(permitEmptyComponents, path + other.path);\n+                  } else {\n+                    return new UnixPath(permitEmptyComponents, path + SEPARATOR + other.path);\n+           }\n   }\n \n   /**\n@@ -330,6 +341,7 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#resolveSibling(java.nio.file.Path)\n    */\n+\n   public UnixPath resolveSibling(UnixPath other) {\n     checkNotNull(other);\n     UnixPath parent = getParent();\n@@ -341,6 +353,7 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#relativize(java.nio.file.Path)\n    */\n+\n   public UnixPath relativize(UnixPath other) {\n     checkArgument(isAbsolute() == other.isAbsolute(), \"'other' is different type of Path\");\n     if (path.isEmpty()) {\n@@ -348,7 +361,8 @@ final class UnixPath implements CharSequence {\n     }\n     PeekingIterator<String> left = Iterators.peekingIterator(split());\n     PeekingIterator<String> right = Iterators.peekingIterator(other.split());\n-    while (left.hasNext() && right.hasNext()) {\n+    while (left.hasNext()\n+      && right.hasNext()) {\n       if (!left.peek().equals(right.peek())) {\n         break;\n       }\n@@ -376,16 +390,18 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#startsWith(java.nio.file.Path)\n    */\n+\n   public boolean startsWith(UnixPath other) {\n     UnixPath me = removeTrailingSeparator();\n     other = other.removeTrailingSeparator();\n     if (other.path.length() > me.path.length()) {\n       return false;\n     } else if (me.isAbsolute() != other.isAbsolute()) {\n-      return false;\n-    } else if (!me.path.isEmpty() && other.path.isEmpty()) {\n-      return false;\n-    }\n+             return false;\n+           } else if (!me.path.isEmpty()\n+             && other.path.isEmpty()) {\n+                    return false;\n+                  }\n     return startsWith(split(), other.split());\n   }\n \n@@ -403,16 +419,19 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#endsWith(java.nio.file.Path)\n    */\n+\n   public boolean endsWith(UnixPath other) {\n     UnixPath me = removeTrailingSeparator();\n     other = other.removeTrailingSeparator();\n     if (other.path.length() > me.path.length()) {\n       return false;\n-    } else if (!me.path.isEmpty() && other.path.isEmpty()) {\n-      return false;\n-    } else if (other.isAbsolute()) {\n-      return me.isAbsolute() && me.path.equals(other.path);\n-    }\n+    } else if (!me.path.isEmpty()\n+      && other.path.isEmpty()) {\n+             return false;\n+           } else if (other.isAbsolute()) {\n+                    return me.isAbsolute()\n+                      && me.path.equals(other.path);\n+                  }\n     return startsWith(me.splitReverse(), other.splitReverse());\n   }\n \n@@ -421,6 +440,7 @@ final class UnixPath implements CharSequence {\n    *\n    * @see java.nio.file.Path#compareTo(java.nio.file.Path)\n    */\n+\n   public int compareTo(UnixPath other) {\n     return ORDERING.compare(getParts(), other.getParts());\n   }\n@@ -428,6 +448,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Converts relative path to an absolute path.\n    */\n+\n   public UnixPath toAbsolutePath(UnixPath currentWorkingDirectory) {\n     checkArgument(currentWorkingDirectory.isAbsolute());\n     return isAbsolute() ? this : currentWorkingDirectory.resolve(this);\n@@ -436,6 +457,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns {@code toAbsolutePath(ROOT_PATH)}.\n    */\n+\n   public UnixPath toAbsolutePath() {\n     return toAbsolutePath(ROOT_PATH);\n   }\n@@ -443,6 +465,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Removes beginning separator from path, if an absolute path.\n    */\n+\n   public UnixPath removeBeginningSeparator() {\n     return isAbsolute() ? new UnixPath(permitEmptyComponents, path.substring(1)) : this;\n   }\n@@ -450,6 +473,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Adds trailing separator to path, if it isn't present.\n    */\n+\n   public UnixPath addTrailingSeparator() {\n     return hasTrailingSeparator() ? this : new UnixPath(permitEmptyComponents, path + SEPARATOR);\n   }\n@@ -457,8 +481,10 @@ final class UnixPath implements CharSequence {\n   /**\n    * Removes trailing separator from path, unless it's root.\n    */\n+\n   public UnixPath removeTrailingSeparator() {\n-    if (!isRoot() && hasTrailingSeparator()) {\n+    if (!isRoot()\n+      && hasTrailingSeparator()) {\n       return new UnixPath(permitEmptyComponents, path.substring(0, path.length() - 1));\n     } else {\n       return this;\n@@ -468,6 +494,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Splits path into components, excluding separators and empty strings.\n    */\n+\n   public Iterator<String> split() {\n     return getParts().iterator();\n   }\n@@ -475,6 +502,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Splits path into components in reverse, excluding separators and empty strings.\n    */\n+\n   public Iterator<String> splitReverse() {\n     return Lists.reverse(getParts()).iterator();\n   }\n@@ -492,6 +520,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns path as a string.\n    */\n+\n   @Override\n   public String toString() {\n     return path;\n@@ -515,6 +544,7 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns {@code true} if this path is an empty string.\n    */\n+\n   public boolean isEmpty() {\n     return path.isEmpty();\n   }\n@@ -522,20 +552,17 @@ final class UnixPath implements CharSequence {\n   /**\n    * Returns list of path components, excluding slashes.\n    */\n+\n   private List<String> getParts() {\n     List<String> result = lazyStringParts;\n-    return result != null\n-        ? result\n-        : (lazyStringParts =\n-            path.isEmpty() || isRoot() ? Collections.<String>emptyList() : createParts());\n+    return result != null ? result : (lazyStringParts = path.isEmpty() || isRoot() ? Collections.<String>emptyList() : createParts());\n   }\n \n   private List<String> createParts() {\n     if (permitEmptyComponents) {\n-      return SPLITTER_PERMIT_EMPTY_COMPONENTS.splitToList(\n-          path.charAt(0) == SEPARATOR ? path.substring(1) : path);\n+      return SPLITTER_PERMIT_EMPTY_COMPONENTS.splitToList(path.charAt(0) == SEPARATOR ? path.substring(1) : path);\n     } else {\n       return SPLITTER.splitToList(path);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 128
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/173/UnixPath.java\nindex 3d8c6ae7729..68e3b945606 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/173/UnixPath.java\n@@ -297,7 +297,8 @@ final class UnixPath implements CharSequence {\n           }\n       }\n       mark = index + 1;\n-    } while (index != -1);\n+    }\n+    while (index != -1);\n     if (!mutated) {\n       return this;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "299",
                    "column": "24",
                    "severity": "warning",
                    "message": "'}' at column 24 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "24",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/173/UnixPath.java\nindex 3d8c6ae7729..4120287d955 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/173/UnixPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/173/UnixPath.java\n@@ -296,8 +296,8 @@ final class UnixPath implements CharSequence {\n             mutated = true;\n           }\n       }\n-      mark = index + 1;\n-    } while (index != -1);\n+      mark = index + 1;}\n+    while (index != -1);\n     if (!mutated) {\n       return this;\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}