{
    "project_name": "EMResearch-EMB",
    "error_id": "79",
    "information": {
        "errors": [
            {
                "line": "11",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public interface ContributorRepositoryCustom {\n\n\t/**\n\t * @param organizationName\n\t *            must not be null EXAMPLE: \"zalando\"\n\t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "12",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/79/ContributorRepositoryCustom.java\nindex 7b17caf46c8..ca4b7db26da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/79/ContributorRepositoryCustom.java\n@@ -8,7 +8,7 @@ import java.util.List;\n \n public interface ContributorRepositoryCustom {\n \n-\t/**\n+  /**\n \t * @param organizationName\n \t *            must not be null EXAMPLE: \"zalando\"\n \t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/79/ContributorRepositoryCustom.java\nindex 7b17caf46c8..65094af2d72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/79/ContributorRepositoryCustom.java\n@@ -8,71 +8,60 @@ import java.util.List;\n \n public interface ContributorRepositoryCustom {\n \n-\t/**\n-\t * @param organizationName\n-\t *            must not be null EXAMPLE: \"zalando\"\n-\t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n-\t *         organization.\n-\t */\n-\tLong findOrganizationId(String organizationName);\n+    /**\n+     * @param organizationName must not be null EXAMPLE: \"zalando\"\n+     * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n+     * organization.\n+     */\n+    Long findOrganizationId(String organizationName);\n \n-\t/**\n-\t * @param date\n-\t *            must not be null\n-\t * @return Returns the snapshot data is that before the given date. If there\n-\t *         are more than one, the latest is chosen. Returns null if there is\n-\t *         none.\n-\t */\n-\tDate findPreviousSnapShotDate(Date date);\n+    /**\n+     * @param date must not be null\n+     * @return Returns the snapshot data is that before the given date. If there\n+     * are more than one, the latest is chosen. Returns null if there is\n+     * none.\n+     */\n+    Date findPreviousSnapShotDate(Date date);\n \n-\t/**\n-\t * Used to find the top contributors (always sorted by all-time number of\n-\t * commits).\n-\t * <p>\n-\t * It is possible to fetch more data (for infinite scrolling).\n-\t * \n-\t * @param organizationId\n-\t * @param snapshotDate\n-\t *            Must not be null.\n-\t * @param namePrefix\n-\t *            the prefix is used to filter by contributor name.\n-\t *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n-\t *            \"John\".\n-\t * @param offset\n-\t *            the rows to skip\n-\t * @param limit\n-\t *            the maximum number of returned results\n-\t * @param namePrefix\n-\t *            the prefix is used to filter by contributor name.\n-\t *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n-\t *            \"John\".\n-\t * @return Returns the contributors.\n-\t */\n-\tList<Contributor> findAllTimeTopContributors(Long organizationId, Date snapshotDate, String namePrefix,\n-\t\t\tInteger offset, Integer limit);\n+    /**\n+     * Used to find the top contributors (always sorted by all-time number of\n+     * commits).\n+     * <p>\n+     * It is possible to fetch more data (for infinite scrolling).\n+     *\n+     * @param organizationId\n+     * @param snapshotDate   Must not be null.\n+     * @param namePrefix     the prefix is used to filter by contributor name.\n+     *                       Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n+     *                       \"John\".\n+     * @param offset         the rows to skip\n+     * @param limit          the maximum number of returned results\n+     * @param namePrefix     the prefix is used to filter by contributor name.\n+     *                       Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n+     *                       \"John\".\n+     * @return Returns the contributors.\n+     */\n+    List<Contributor> findAllTimeTopContributors(Long organizationId, Date snapshotDate, String namePrefix,\n+                                                 Integer offset, Integer limit);\n \n-\t/**\n-\t * Returns all contributor data that are found for the given time span. The\n-\t * returned data is \"two-dimensional\", i.e. for each contributor and each\n-\t * snapshot date a row is returned.\n-\t * <p>\n-\t * The returned data is sorted by time descendingly, then by contributor key\n-\t * ID.\n-\t * \n-\t * @param organizationId\n-\t *            EXAMPLE: 123\n-\t * @param startDate\n-\t *            this date is used to exclude rows that have an earlier\n-\t *            snapshot date (including this date)\n-\t * @param endDate\n-\t *            this date is used to exclude rows that have a later snapshot\n-\t *            date (including this date)\n-\t * @param namePrefix\n-\t *            the prefix is used to filter by contributor name.\n-\t *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n-\t *            \"John\".\n-\t * @return Returns the contributors.\n-\t */\n-\tList<Contributor> findContributorsTimeSeries(Long organizationId, Date startDate, Date endDate, String namePrefix);\n+    /**\n+     * Returns all contributor data that are found for the given time span. The\n+     * returned data is \"two-dimensional\", i.e. for each contributor and each\n+     * snapshot date a row is returned.\n+     * <p>\n+     * The returned data is sorted by time descendingly, then by contributor key\n+     * ID.\n+     *\n+     * @param organizationId EXAMPLE: 123\n+     * @param startDate      this date is used to exclude rows that have an earlier\n+     *                       snapshot date (including this date)\n+     * @param endDate        this date is used to exclude rows that have a later snapshot\n+     *                       date (including this date)\n+     * @param namePrefix     the prefix is used to filter by contributor name.\n+     *                       Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n+     *                       \"John\".\n+     * @return Returns the contributors.\n+     */\n+    List<Contributor> findContributorsTimeSeries(Long organizationId, Date startDate, Date endDate, String namePrefix);\n \n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/79/ContributorRepositoryCustom.java\nindex 7b17caf46c8..5c73881350e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/79/ContributorRepositoryCustom.java\n@@ -7,8 +7,7 @@ import java.util.Date;\n import java.util.List;\n \n public interface ContributorRepositoryCustom {\n-\n-\t/**\n+    /**\n \t * @param organizationName\n \t *            must not be null EXAMPLE: \"zalando\"\n \t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n@@ -48,10 +47,9 @@ public interface ContributorRepositoryCustom {\n \t *            \"John\".\n \t * @return Returns the contributors.\n \t */\n-\tList<Contributor> findAllTimeTopContributors(Long organizationId, Date snapshotDate, String namePrefix,\n-\t\t\tInteger offset, Integer limit);\n+\tList<Contributor> findAllTimeTopContributors(Long organizationId, Date snapshotDate, String namePrefix, Integer offset, Integer limit);\n \n-\t/**\n+/**\n \t * Returns all contributor data that are found for the given time span. The\n \t * returned data is \"two-dimensional\", i.e. for each contributor and each\n \t * snapshot date a row is returned.\n@@ -74,5 +72,4 @@ public interface ContributorRepositoryCustom {\n \t * @return Returns the contributors.\n \t */\n \tList<Contributor> findContributorsTimeSeries(Long organizationId, Date startDate, Date endDate, String namePrefix);\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/79/ContributorRepositoryCustom.java\nindex 7b17caf46c8..2dbdd89c787 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/79/ContributorRepositoryCustom.java\n@@ -2,77 +2,85 @@ package org.zalando.catwatch.backend.repo;\n \n import org.zalando.catwatch.backend.model.Contributor;\n import org.zalando.catwatch.backend.model.ContributorKey;\n-\n import java.util.Date;\n import java.util.List;\n \n+\n public interface ContributorRepositoryCustom {\n \n-\t/**\n-\t * @param organizationName\n-\t *            must not be null EXAMPLE: \"zalando\"\n-\t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n-\t *         organization.\n-\t */\n-\tLong findOrganizationId(String organizationName);\n+    /**\n+     * @param organizationName\n+     *            must not be null EXAMPLE: \"zalando\"\n+     * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n+     *         organization.\n+     */\n+\n+    Long findOrganizationId(String organizationName);\n+\n+    /**\n+     * @param date\n+     *            must not be null\n+     * @return Returns the snapshot data is that before the given date. If there\n+     *         are more than one, the latest is chosen. Returns null if there is\n+     *         none.\n+     */\n+\n+\n+    Date findPreviousSnapShotDate(Date date);\n+\n+    /**\n+     * Used to find the top contributors (always sorted by all-time number of\n+     * commits).\n+     * <p>\n+     * It is possible to fetch more data (for infinite scrolling).\n+     * \n+     * @param organizationId\n+     * @param snapshotDate\n+     *            Must not be null.\n+     * @param namePrefix\n+     *            the prefix is used to filter by contributor name.\n+     *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n+     *            \"John\".\n+     * @param offset\n+     *            the rows to skip\n+     * @param limit\n+     *            the maximum number of returned results\n+     * @param namePrefix\n+     *            the prefix is used to filter by contributor name.\n+     *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n+     *            \"John\".\n+     * @return Returns the contributors.\n+     */\n+\n \n-\t/**\n-\t * @param date\n-\t *            must not be null\n-\t * @return Returns the snapshot data is that before the given date. If there\n-\t *         are more than one, the latest is chosen. Returns null if there is\n-\t *         none.\n-\t */\n-\tDate findPreviousSnapShotDate(Date date);\n+    List<Contributor> findAllTimeTopContributors(Long organizationId,\n+                                                 Date snapshotDate,\n+                                                 String namePrefix,\n+                                                 Integer offset, Integer limit);\n \n-\t/**\n-\t * Used to find the top contributors (always sorted by all-time number of\n-\t * commits).\n-\t * <p>\n-\t * It is possible to fetch more data (for infinite scrolling).\n-\t * \n-\t * @param organizationId\n-\t * @param snapshotDate\n-\t *            Must not be null.\n-\t * @param namePrefix\n-\t *            the prefix is used to filter by contributor name.\n-\t *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n-\t *            \"John\".\n-\t * @param offset\n-\t *            the rows to skip\n-\t * @param limit\n-\t *            the maximum number of returned results\n-\t * @param namePrefix\n-\t *            the prefix is used to filter by contributor name.\n-\t *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n-\t *            \"John\".\n-\t * @return Returns the contributors.\n-\t */\n-\tList<Contributor> findAllTimeTopContributors(Long organizationId, Date snapshotDate, String namePrefix,\n-\t\t\tInteger offset, Integer limit);\n+    /**\n+     * Returns all contributor data that are found for the given time span. The\n+     * returned data is \"two-dimensional\", i.e. for each contributor and each\n+     * snapshot date a row is returned.\n+     * <p>\n+     * The returned data is sorted by time descendingly, then by contributor key\n+     * ID.\n+     * \n+     * @param organizationId\n+     *            EXAMPLE: 123\n+     * @param startDate\n+     *            this date is used to exclude rows that have an earlier\n+     *            snapshot date (including this date)\n+     * @param endDate\n+     *            this date is used to exclude rows that have a later snapshot\n+     *            date (including this date)\n+     * @param namePrefix\n+     *            the prefix is used to filter by contributor name.\n+     *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n+     *            \"John\".\n+     * @return Returns the contributors.\n+     */\n \n-\t/**\n-\t * Returns all contributor data that are found for the given time span. The\n-\t * returned data is \"two-dimensional\", i.e. for each contributor and each\n-\t * snapshot date a row is returned.\n-\t * <p>\n-\t * The returned data is sorted by time descendingly, then by contributor key\n-\t * ID.\n-\t * \n-\t * @param organizationId\n-\t *            EXAMPLE: 123\n-\t * @param startDate\n-\t *            this date is used to exclude rows that have an earlier\n-\t *            snapshot date (including this date)\n-\t * @param endDate\n-\t *            this date is used to exclude rows that have a later snapshot\n-\t *            date (including this date)\n-\t * @param namePrefix\n-\t *            the prefix is used to filter by contributor name.\n-\t *            Case-sensitive. EXAMPLE: prefix \"joh\" will match the name\n-\t *            \"John\".\n-\t * @return Returns the contributors.\n-\t */\n-\tList<Contributor> findContributorsTimeSeries(Long organizationId, Date startDate, Date endDate, String namePrefix);\n \n-}\n+    List<Contributor> findContributorsTimeSeries(Long organizationId, Date startDate, Date endDate, String namePrefix);\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "12",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/79/ContributorRepositoryCustom.java\nindex 7b17caf46c8..ca4b7db26da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/79/ContributorRepositoryCustom.java\n@@ -8,7 +8,7 @@ import java.util.List;\n \n public interface ContributorRepositoryCustom {\n \n-\t/**\n+  /**\n \t * @param organizationName\n \t *            must not be null EXAMPLE: \"zalando\"\n \t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "12",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/79/ContributorRepositoryCustom.java\nindex 7b17caf46c8..312b51b354c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/79/ContributorRepositoryCustom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/79/ContributorRepositoryCustom.java\n@@ -8,13 +8,13 @@ import java.util.List;\n \n public interface ContributorRepositoryCustom {\n \n-\t/**\n+  /**\n \t * @param organizationName\n \t *            must not be null EXAMPLE: \"zalando\"\n \t * @return Returns the {@link ContributorKey#getOrganizationId() ID} of the\n \t *         organization.\n \t */\n-\tLong findOrganizationId(String organizationName);\n+ Long findOrganizationId(String organizationName);\n \n \t/**\n \t * @param date\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}