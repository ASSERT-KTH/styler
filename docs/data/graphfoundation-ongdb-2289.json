{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2289",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2289/DurationFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2289/DurationFunction.java\nindex d56ab06a5ab..441a18b95eb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2289/DurationFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2289/DurationFunction.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc.temporal;\n \n import java.time.temporal.ChronoUnit;\n@@ -45,124 +46,120 @@ import org.neo4j.values.virtual.MapValue;\n import static org.neo4j.internal.kernel.api.procs.FieldSignature.inputField;\n import static org.neo4j.values.storable.Values.NO_VALUE;\n \n-@Description( \"Construct a Duration value.\" )\n+@Description(\"Construct a Duration value.\")\n class DurationFunction implements CallableUserFunction\n {\n-    private static final UserFunctionSignature DURATION =\n-            new UserFunctionSignature(\n-                    new QualifiedName( new String[0], \"duration\" ),\n-                    Collections.singletonList( inputField( \"input\", Neo4jTypes.NTAny ) ),\n-                    Neo4jTypes.NTDuration, null, new String[0],\n-                    DurationFunction.class.getAnnotation( Description.class ).value(),\n-                    true );\n+  private static final UserFunctionSignature DURATION =\n+      new UserFunctionSignature(\n+          new QualifiedName(new String[0], \"duration\"),\n+          Collections.singletonList(inputField(\"input\", Neo4jTypes.NTAny)),\n+          Neo4jTypes.NTDuration, null, new String[0],\n+          DurationFunction.class.getAnnotation(Description.class).value(),\n+          true);\n+\n+  static void register(Procedures procedures) throws ProcedureException\n+  {\n+    procedures.register(new DurationFunction());\n+    procedures.register(new Between(\"between\"));\n+    procedures.register(new Between(\"inMonths\"));\n+    procedures.register(new Between(\"inDays\"));\n+    procedures.register(new Between(\"inSeconds\"));\n+  }\n+\n+  @Override\n+  public UserFunctionSignature signature()\n+  {\n+    return DURATION;\n+  }\n \n-    static void register( Procedures procedures ) throws ProcedureException\n+  @Override\n+  public AnyValue apply(Context ctx, AnyValue[] input) throws ProcedureException\n+  {\n+    if (input == null)\n     {\n-        procedures.register( new DurationFunction() );\n-        procedures.register( new Between( \"between\" ) );\n-        procedures.register( new Between( \"inMonths\" ) );\n-        procedures.register( new Between( \"inDays\" ) );\n-        procedures.register( new Between( \"inSeconds\" ) );\n+      return NO_VALUE;\n+    } else if (input.length == 1)\n+    {\n+      if (input[0] == NO_VALUE || input[0] == null)\n+      {\n+        return NO_VALUE;\n+      } else if (input[0] instanceof TextValue)\n+      {\n+        return DurationValue.parse((TextValue) input[0]);\n+      } else if (input[0] instanceof MapValue)\n+      {\n+        MapValue map = (MapValue) input[0];\n+        return DurationValue.build(map);\n+      }\n     }\n+    throw new ProcedureException(Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() +\n+        \": Provided input was \" + Arrays.toString(input));\n+  }\n \n-    @Override\n-    public UserFunctionSignature signature()\n+  private static class Between implements CallableUserFunction\n+  {\n+    private static final String DESCRIPTION =\n+        \"Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in %s.\";\n+    private static final List<FieldSignature> SIGNATURE = Arrays.asList(\n+        inputField(\"from\", Neo4jTypes.NTAny),\n+        inputField(\"to\", Neo4jTypes.NTAny));\n+    private final UserFunctionSignature signature;\n+    private final TemporalUnit unit;\n+\n+    private Between(String unit)\n     {\n-        return DURATION;\n+      String unitString;\n+      switch (unit)\n+      {\n+        case \"between\":\n+          this.unit = null;\n+          unitString = \"logical units\";\n+          break;\n+        case \"inMonths\":\n+          this.unit = ChronoUnit.MONTHS;\n+          unitString = \"months\";\n+          break;\n+        case \"inDays\":\n+          this.unit = ChronoUnit.DAYS;\n+          unitString = \"days\";\n+          break;\n+        case \"inSeconds\":\n+          this.unit = ChronoUnit.SECONDS;\n+          unitString = \"seconds\";\n+          break;\n+        default:\n+          throw new IllegalStateException(\"Unsupported unit: \" + unit);\n+      }\n+      this.signature = new UserFunctionSignature(\n+          new QualifiedName(new String[] {\"duration\"}, unit),\n+          SIGNATURE, Neo4jTypes.NTDuration, null, new String[0],\n+          String.format(\n+              DESCRIPTION, unitString), true);\n     }\n \n     @Override\n-    public AnyValue apply( Context ctx, AnyValue[] input ) throws ProcedureException\n+    public UserFunctionSignature signature()\n     {\n-        if ( input == null )\n-        {\n-            return NO_VALUE;\n-        }\n-        else if ( input.length == 1 )\n-        {\n-            if ( input[0] == NO_VALUE || input[0] == null )\n-            {\n-                return NO_VALUE;\n-            }\n-            else if ( input[0] instanceof TextValue )\n-            {\n-                return DurationValue.parse( (TextValue) input[0] );\n-            }\n-            else if ( input[0] instanceof MapValue )\n-            {\n-                MapValue map = (MapValue) input[0];\n-                return DurationValue.build( map );\n-            }\n-        }\n-        throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() +\n-                \": Provided input was \" + Arrays.toString( input ) );\n+      return signature;\n     }\n \n-    private static class Between implements CallableUserFunction\n+    @Override\n+    public AnyValue apply(Context ctx, AnyValue[] input) throws ProcedureException\n     {\n-        private static final String DESCRIPTION =\n-                \"Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in %s.\";\n-        private static final List<FieldSignature> SIGNATURE = Arrays.asList(\n-                inputField( \"from\", Neo4jTypes.NTAny ),\n-                inputField( \"to\", Neo4jTypes.NTAny ) );\n-        private final UserFunctionSignature signature;\n-        private final TemporalUnit unit;\n-\n-        private Between( String unit )\n-        {\n-            String unitString;\n-            switch ( unit )\n-            {\n-            case \"between\":\n-                this.unit = null;\n-                unitString = \"logical units\";\n-                break;\n-            case \"inMonths\":\n-                this.unit = ChronoUnit.MONTHS;\n-                unitString = \"months\";\n-                break;\n-            case \"inDays\":\n-                this.unit = ChronoUnit.DAYS;\n-                unitString = \"days\";\n-                break;\n-            case \"inSeconds\":\n-                this.unit = ChronoUnit.SECONDS;\n-                unitString = \"seconds\";\n-                break;\n-            default:\n-                throw new IllegalStateException( \"Unsupported unit: \" + unit );\n-            }\n-            this.signature = new UserFunctionSignature(\n-                    new QualifiedName( new String[] {\"duration\"}, unit ),\n-                    SIGNATURE, Neo4jTypes.NTDuration, null, new String[0],\n-                    String.format(\n-                            DESCRIPTION, unitString ), true );\n-        }\n-\n-        @Override\n-        public UserFunctionSignature signature()\n-        {\n-            return signature;\n-        }\n-\n-        @Override\n-        public AnyValue apply( Context ctx, AnyValue[] input ) throws ProcedureException\n+      if (input == null || (input.length == 2 && (input[0] == NO_VALUE || input[0] == null) || input[1] == NO_VALUE || input[1] == null))\n+      {\n+        return NO_VALUE;\n+      } else if (input.length == 2)\n+      {\n+        if (input[0] instanceof TemporalValue && input[1] instanceof TemporalValue)\n         {\n-            if ( input == null || (input.length == 2 && (input[0] == NO_VALUE || input[0] == null) || input[1] == NO_VALUE || input[1] == null) )\n-            {\n-                return NO_VALUE;\n-            }\n-            else if ( input.length == 2 )\n-            {\n-                if ( input[0] instanceof TemporalValue && input[1] instanceof TemporalValue )\n-                {\n-                    TemporalValue from = (TemporalValue) input[0];\n-                    TemporalValue to = (TemporalValue) input[1];\n-                    return DurationValue.between( unit, from, to );\n-                }\n-            }\n-            throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() +\n-                \": Provided input was \" + Arrays.toString( input ) );\n+          TemporalValue from = (TemporalValue) input[0];\n+          TemporalValue to = (TemporalValue) input[1];\n+          return DurationValue.between(unit, from, to);\n         }\n+      }\n+      throw new ProcedureException(Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() +\n+          \": Provided input was \" + Arrays.toString(input));\n     }\n+  }\n }\n",
            "diff_size": 174
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 246).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2289/DurationFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2289/DurationFunction.java\nindex d56ab06a5ab..4fd61b297dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2289/DurationFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2289/DurationFunction.java\n@@ -48,15 +48,9 @@ import static org.neo4j.values.storable.Values.NO_VALUE;\n @Description( \"Construct a Duration value.\" )\n class DurationFunction implements CallableUserFunction\n {\n-    private static final UserFunctionSignature DURATION =\n-            new UserFunctionSignature(\n-                    new QualifiedName( new String[0], \"duration\" ),\n-                    Collections.singletonList( inputField( \"input\", Neo4jTypes.NTAny ) ),\n-                    Neo4jTypes.NTDuration, null, new String[0],\n+    private static final UserFunctionSignature DURATION = new UserFunctionSignature( new QualifiedName( new String[0], \"duration\" ), Collections.singletonList( inputField( \"input\", Neo4jTypes.NTAny ) ), Neo4jTypes.NTDuration, null, new String[0],\n                     DurationFunction.class.getAnnotation( Description.class ).value(),\n-                    true );\n-\n-    static void register( Procedures procedures ) throws ProcedureException\n+                    true ); static void register( Procedures procedures ) throws ProcedureException\n     {\n         procedures.register( new DurationFunction() );\n         procedures.register( new Between( \"between\" ) );\n@@ -94,18 +88,14 @@ class DurationFunction implements CallableUserFunction\n                 return DurationValue.build( map );\n             }\n         }\n-        throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() +\n-                \": Provided input was \" + Arrays.toString( input ) );\n+        throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() + \": Provided input was \" + Arrays.toString( input ) );\n     }\n \n     private static class Between implements CallableUserFunction\n     {\n-        private static final String DESCRIPTION =\n-                \"Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in %s.\";\n-        private static final List<FieldSignature> SIGNATURE = Arrays.asList(\n-                inputField( \"from\", Neo4jTypes.NTAny ),\n-                inputField( \"to\", Neo4jTypes.NTAny ) );\n-        private final UserFunctionSignature signature;\n+        private static final String DESCRIPTION = \"Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in %s.\";\n+private static final List<FieldSignature> SIGNATURE = Arrays.asList( inputField( \"from\", Neo4jTypes.NTAny ), inputField( \"to\", Neo4jTypes.NTAny ) );\n+private final UserFunctionSignature signature;\n         private final TemporalUnit unit;\n \n         private Between( String unit )\n@@ -132,12 +122,9 @@ class DurationFunction implements CallableUserFunction\n             default:\n                 throw new IllegalStateException( \"Unsupported unit: \" + unit );\n             }\n-            this.signature = new UserFunctionSignature(\n-                    new QualifiedName( new String[] {\"duration\"}, unit ),\n-                    SIGNATURE, Neo4jTypes.NTDuration, null, new String[0],\n-                    String.format(\n-                            DESCRIPTION, unitString ), true );\n-        }\n+            this.signature = new UserFunctionSignature( new QualifiedName( new String[]{\"duration\"}, unit ), SIGNATURE, Neo4jTypes.NTDuration, null, new String[0],\n+                    String.format( DESCRIPTION, unitString ), true );\n+    }\n \n         @Override\n         public UserFunctionSignature signature()\n@@ -148,7 +135,7 @@ class DurationFunction implements CallableUserFunction\n         @Override\n         public AnyValue apply( Context ctx, AnyValue[] input ) throws ProcedureException\n         {\n-            if ( input == null || (input.length == 2 && (input[0] == NO_VALUE || input[0] == null) || input[1] == NO_VALUE || input[1] == null) )\n+            if ( input == null || (input.length == 2 && (input[0] == NO_VALUE || input[0] == null ) || input[1] == NO_VALUE || input[1] == null) )\n             {\n                 return NO_VALUE;\n             }\n@@ -161,8 +148,7 @@ class DurationFunction implements CallableUserFunction\n                     return DurationValue.between( unit, from, to );\n                 }\n             }\n-            throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() +\n-                \": Provided input was \" + Arrays.toString( input ) );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Invalid call signature for \" + getClass().getSimpleName() + \": Provided input was \" + Arrays.toString( input ) );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}