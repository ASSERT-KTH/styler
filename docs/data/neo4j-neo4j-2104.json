{
    "project_name": "neo4j-neo4j",
    "error_id": "2104",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2104/InvocationTracer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2104/InvocationTracer.java\nindex 5e55d7694aa..f59d1c8be5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2104/InvocationTracer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2104/InvocationTracer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.io.IOException;\n@@ -39,24 +40,24 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n \n     private boolean open = true;\n \n-    public InvocationTracer( String generatorInfo,\n-                             String generatedClassPackage,\n-                             String generatedClassName,\n-                             Class<C> interfaceClass,\n-                             ArgumentFormatter argumentFormatter,\n-                             Appendable output )\n-            throws IOException\n+    public InvocationTracer(String generatorInfo,\n+                            String generatedClassPackage,\n+                            String generatedClassName,\n+                            Class<C> interfaceClass,\n+                            ArgumentFormatter argumentFormatter,\n+                            Appendable output)\n+      throws IOException\n     {\n         this.generatorInfo = generatorInfo;\n \n-        if ( generatedClassName.contains( \".\" ) || generatedClassName.contains( \"%\" ) )\n+        if (generatedClassName.contains(\".\") || generatedClassName.contains(\"%\"))\n         {\n-            throw new IllegalArgumentException( \"Invalid class name: \" + generatedClassName );\n+            throw new IllegalArgumentException(\"Invalid class name: \" + generatedClassName);\n         }\n \n-        if ( generatedClassPackage.contains( \"%\" ) )\n+        if (generatedClassPackage.contains(\"%\"))\n         {\n-            throw new IllegalArgumentException( \"Invalid class package: \" + generatedClassPackage );\n+            throw new IllegalArgumentException(\"Invalid class package: \" + generatedClassPackage);\n         }\n \n         this.generatedClassPackage = generatedClassPackage;\n@@ -65,152 +66,146 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n         this.argumentFormatter = argumentFormatter;\n         this.output = output;\n \n-        formatPreamble( output );\n+        formatPreamble(output);\n     }\n \n     public C newProxy()\n     {\n-        return newProxy( interfaceClass );\n+        return newProxy(interfaceClass);\n     }\n \n-    public <P extends C> P newProxy( Class<P> proxyClass )\n+    public <P extends C> P newProxy(Class<P> proxyClass)\n     {\n         ClassLoader classLoader = proxyClass.getClassLoader();\n         return proxyClass.cast(\n-            Proxy.newProxyInstance( classLoader, new Class[]{proxyClass}, this )\n+          Proxy.newProxyInstance(classLoader, new Class[] {proxyClass}, this)\n         );\n     }\n \n     @Override\n     public void close() throws IOException\n     {\n-        if ( open )\n+        if (open)\n         {\n-            formatAppendix( output );\n+            formatAppendix(output);\n             open = false;\n-        }\n-        else\n+        } else\n         {\n-            throw new IllegalStateException( \"Already closed\" );\n+            throw new IllegalStateException(\"Already closed\");\n         }\n     }\n \n-    private void formatPreamble( Appendable builder ) throws IOException\n+    private void formatPreamble(Appendable builder) throws IOException\n     {\n         String interfaceSimpleName = interfaceClass.getSimpleName();\n         String interfaceClassName =\n-            interfaceSimpleName.isEmpty() ? interfaceClass.getCanonicalName() : interfaceSimpleName;\n-        if ( !generatedClassPackage.isEmpty() )\n+          interfaceSimpleName.isEmpty() ? interfaceClass.getCanonicalName() : interfaceSimpleName;\n+        if (!generatedClassPackage.isEmpty())\n         {\n-            formatln( builder, \"package %s;\", generatedClassPackage );\n-            formatln( builder );\n+            formatln(builder, \"package %s;\", generatedClassPackage);\n+            formatln(builder);\n         }\n-        formatln( builder, \"import %s;\", Visitable.class.getCanonicalName() );\n-        formatln( builder, \"import %s;\", interfaceClass.getCanonicalName() );\n-        formatln( builder );\n-        for ( String importExpr : argumentFormatter.imports() )\n+        formatln(builder, \"import %s;\", Visitable.class.getCanonicalName());\n+        formatln(builder, \"import %s;\", interfaceClass.getCanonicalName());\n+        formatln(builder);\n+        for (String importExpr : argumentFormatter.imports())\n         {\n-            formatln( builder, \"import %s;\", importExpr );\n+            formatln(builder, \"import %s;\", importExpr);\n         }\n-        formatln( builder );\n-        formatln( builder, \"//\" );\n-        formatln( builder, \"// GENERATED FILE. DO NOT EDIT.\" );\n-        formatln( builder, \"//\" );\n-        formatln( builder, \"// This has been generated by:\" );\n-        formatln( builder, \"//\" );\n-        if ( !generatorInfo.isEmpty() )\n+        formatln(builder);\n+        formatln(builder, \"//\");\n+        formatln(builder, \"// GENERATED FILE. DO NOT EDIT.\");\n+        formatln(builder, \"//\");\n+        formatln(builder, \"// This has been generated by:\");\n+        formatln(builder, \"//\");\n+        if (!generatorInfo.isEmpty())\n         {\n-            formatln( builder, \"//   %s\", generatorInfo );\n-            formatln( builder, \"//\" );\n-            formatln( builder, \"// (using %s)\", getClass().getCanonicalName() );\n-            formatln( builder, \"//\" );\n-        }\n-        else\n+            formatln(builder, \"//   %s\", generatorInfo);\n+            formatln(builder, \"//\");\n+            formatln(builder, \"// (using %s)\", getClass().getCanonicalName());\n+            formatln(builder, \"//\");\n+        } else\n         {\n-            formatln( builder, \"//   %s\", getClass().getCanonicalName() );\n-            formatln( builder, \"//\" );\n+            formatln(builder, \"//   %s\", getClass().getCanonicalName());\n+            formatln(builder, \"//\");\n         }\n-        formatln( builder );\n-        formatln( builder, \"public enum %s\", generatedClassName );\n-        formatln( builder, \"implements %s<%s>\", Visitable.class.getSimpleName(), interfaceClassName );\n-        formatln( builder, \"{\" );\n-        formatln( builder, \"    INSTANCE;\" );\n-        formatln( builder );\n-        formatln( builder, \"    public void accept( %s visitor )\", interfaceClassName );\n-        formatln( builder, \"    {\" );\n+        formatln(builder);\n+        formatln(builder, \"public enum %s\", generatedClassName);\n+        formatln(builder, \"implements %s<%s>\", Visitable.class.getSimpleName(), interfaceClassName);\n+        formatln(builder, \"{\");\n+        formatln(builder, \"    INSTANCE;\");\n+        formatln(builder);\n+        formatln(builder, \"    public void accept( %s visitor )\", interfaceClassName);\n+        formatln(builder, \"    {\");\n     }\n \n     @Override\n-    public Object invoke( Object proxy, Method method, Object[] args ) throws Throwable\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n     {\n-        if ( open )\n+        if (open)\n         {\n-            if ( method.getReturnType().equals( Void.TYPE ) )\n+            if (method.getReturnType().equals(Void.TYPE))\n             {\n                 // formatln invocation start\n-                format( output, \"        visitor.%s(\", method.getName() );\n+                format(output, \"        visitor.%s(\", method.getName());\n \n                 // formatln arguments\n-                for ( int i = 0; i < args.length; i++ )\n+                for (int i = 0; i < args.length; i++)\n                 {\n                     Object arg = args[i];\n \n-                    if ( i > 0 )\n+                    if (i > 0)\n                     {\n-                        format( output, \", \" );\n-                    }\n-                    else\n+                        format(output, \", \");\n+                    } else\n                     {\n-                        format( output, \" \" );\n+                        format(output, \" \");\n                     }\n \n-                    argumentFormatter.formatArgument( output, arg );\n+                    argumentFormatter.formatArgument(output, arg);\n                 }\n \n                 // formatln invocation end\n-                if ( args.length == 0 )\n+                if (args.length == 0)\n                 {\n-                    formatln( output, \");\" );\n-                }\n-                else\n+                    formatln(output, \");\");\n+                } else\n                 {\n-                    formatln( output, \" );\" );\n+                    formatln(output, \" );\");\n                 }\n \n                 return null;\n-            }\n-            else\n+            } else\n             {\n-                throw new IllegalArgumentException( \"InvocationTraceGenerator only works with void methods\" );\n+                throw new IllegalArgumentException(\"InvocationTraceGenerator only works with void methods\");\n             }\n-        }\n-        else\n+        } else\n         {\n-            throw new IllegalStateException( \"Tracer already closed\" );\n+            throw new IllegalStateException(\"Tracer already closed\");\n         }\n     }\n \n-    private static void formatAppendix( Appendable builder ) throws IOException\n+    private static void formatAppendix(Appendable builder) throws IOException\n     {\n-        formatln( builder, \"   }\" );\n-        formatln( builder, \"}\" );\n-        formatln( builder );\n-        formatln( builder, \"/* END OF GENERATED CONTENT */\" );\n+        formatln(builder, \"   }\");\n+        formatln(builder, \"}\");\n+        formatln(builder);\n+        formatln(builder, \"/* END OF GENERATED CONTENT */\");\n     }\n \n-    private static void formatln( Appendable output, String format, Object... args ) throws IOException\n+    private static void formatln(Appendable output, String format, Object... args) throws IOException\n     {\n-        format( output, format, args );\n-        formatln( output );\n+        format(output, format, args);\n+        formatln(output);\n     }\n \n-    private static void format( Appendable output, String format, Object... args ) throws IOException\n+    private static void format(Appendable output, String format, Object... args) throws IOException\n     {\n-        output.append( String.format( format, args ) );\n+        output.append(String.format(format, args));\n     }\n \n-    private static void formatln( Appendable output ) throws IOException\n+    private static void formatln(Appendable output) throws IOException\n     {\n-        output.append( System.lineSeparator() );\n+        output.append(System.lineSeparator());\n     }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}