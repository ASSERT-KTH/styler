{
    "project_name": "wayshall-onetwo",
    "error_id": "37",
    "information": {
        "errors": [
            {
                "line": "135",
                "column": "40",
                "severity": "error",
                "message": "';' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\t\t\tList<InBoundClientProps> inbounds = activeMQTTProperties.getInbounds();\n\t\t\tif (inbounds.isEmpty()) {\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\t\n\t\t\tfor (InBoundClientProps props : inbounds) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler/37/ActiveMQTTConfiguration.java\nindex 139cce75e07..e56bd263403 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler/37/ActiveMQTTConfiguration.java\n@@ -132,7 +132,7 @@ public class ActiveMQTTConfiguration {\n \t\tpublic void afterPropertiesSet() throws Exception {\n \t\t\tList<InBoundClientProps> inbounds = activeMQTTProperties.getInbounds();\n \t\t\tif (inbounds.isEmpty()) {\n-\t\t\t\treturn ;\n+\t\t\t\treturn;\n \t\t\t}\n \t\t\t\n \t\t\tfor (InBoundClientProps props : inbounds) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/37/ActiveMQTTConfiguration.java\nindex 139cce75e07..32dd1843892 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/37/ActiveMQTTConfiguration.java\n@@ -33,120 +33,120 @@ import org.springframework.util.Assert;\n @ConditionalOnProperty(value = ActiveMQTTProperties.SERVER_URLS_KEY)\n @EnableConfigurationProperties(ActiveMQTTProperties.class)\n public class ActiveMQTTConfiguration {\n-\t\n-\tpublic static final String BEAN_MQTT_PAHO_CLIENT_FACTORY = \"mqttPahoClientFactory\";\n-\t\n-\t@Autowired\n-\tprivate ActiveMQTTProperties activeMQTTProperties;\n-\t\n-\t@Bean(name = BEAN_MQTT_PAHO_CLIENT_FACTORY)\n-\tpublic MqttPahoClientFactory mqttPahoClientFactory() {\n-\t\tDefaultMqttPahoClientFactory clientFactory = new DefaultMqttPahoClientFactory();\n-\t\tclientFactory.setServerURIs(activeMQTTProperties.getServerUrls());\n-\t\tclientFactory.setUserName(activeMQTTProperties.getUsername());\n-\t\tclientFactory.setPassword(activeMQTTProperties.getPassword());\n-\t\tclientFactory.setCleanSession(activeMQTTProperties.isCleanSession());\n-\t\tclientFactory.setConnectionTimeout(activeMQTTProperties.getConnectionTimeout());\n-\t\tclientFactory.setKeepAliveInterval(activeMQTTProperties.getKeepAliveInterval());\n-\t\tclientFactory.setSslProperties(activeMQTTProperties.getSsl());\n-\t\tclientFactory.setConsumerStopAction(activeMQTTProperties.getConsumerStopAction());\n-\t\treturn clientFactory;\n-\t}\n-\n-//\t@ConditionalOnMissingBean(MqttMessageConverter.class)\n+\n+  public static final String BEAN_MQTT_PAHO_CLIENT_FACTORY = \"mqttPahoClientFactory\";\n+\n+  @Autowired\n+  private ActiveMQTTProperties activeMQTTProperties;\n+\n+  @Bean(name = BEAN_MQTT_PAHO_CLIENT_FACTORY)\n+  public MqttPahoClientFactory mqttPahoClientFactory() {\n+    DefaultMqttPahoClientFactory clientFactory = new DefaultMqttPahoClientFactory();\n+    clientFactory.setServerURIs(activeMQTTProperties.getServerUrls());\n+    clientFactory.setUserName(activeMQTTProperties.getUsername());\n+    clientFactory.setPassword(activeMQTTProperties.getPassword());\n+    clientFactory.setCleanSession(activeMQTTProperties.isCleanSession());\n+    clientFactory.setConnectionTimeout(activeMQTTProperties.getConnectionTimeout());\n+    clientFactory.setKeepAliveInterval(activeMQTTProperties.getKeepAliveInterval());\n+    clientFactory.setSslProperties(activeMQTTProperties.getSsl());\n+    clientFactory.setConsumerStopAction(activeMQTTProperties.getConsumerStopAction());\n+    return clientFactory;\n+  }\n+\n+  //\t@ConditionalOnMissingBean(MqttMessageConverter.class)\n //\t@ConditionalOnProperty(value = ActiveMQTTProperties.MESSAGE_CONVERTER_KEY, havingValue = \"json\")\n-\t@Bean\n-\tpublic JsonPahoMessageConverter jsonPahoMessageConverter() {\n-\t\tOutBoundClientProps client = activeMQTTProperties.getOutbound();\n-\t\treturn new JsonPahoMessageConverter(client.getDefaultQos(), client.isDefaultRetained());\n-\t}\n-\n-\tstatic JsonPahoMessageConverter jsonPahoMessageConverter(int defaultQos, boolean defaultRetain) {\n-\t\tJsonPahoMessageConverter converter = new JsonPahoMessageConverter(defaultQos, defaultRetain);\n-\t\ttry {\n-\t\t\tconverter.afterPropertiesSet();\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new BaseException(\"JsonPahoMessageConverter init error: \" + e.getMessage(), e);\n-\t\t}\n-\t\treturn converter;\n-\t}\n-\t\n-\t@Configuration\n-\t@ConditionalOnProperty(value = OutBoundClientProps.CLIENT_ID_KEY)\n-\tprotected static class OutboundConfiguration {\n-\t\t@Autowired\n-\t\tprivate ActiveMQTTProperties activeMQTTProperties;\n-\t\t@Autowired\n-\t\tApplicationContext context;\n+  @Bean\n+  public JsonPahoMessageConverter jsonPahoMessageConverter() {\n+    OutBoundClientProps client = activeMQTTProperties.getOutbound();\n+    return new JsonPahoMessageConverter(client.getDefaultQos(), client.isDefaultRetained());\n+  }\n+\n+  static JsonPahoMessageConverter jsonPahoMessageConverter(int defaultQos, boolean defaultRetain) {\n+    JsonPahoMessageConverter converter = new JsonPahoMessageConverter(defaultQos, defaultRetain);\n+    try {\n+      converter.afterPropertiesSet();\n+    } catch (Exception e) {\n+      throw new BaseException(\"JsonPahoMessageConverter init error: \" + e.getMessage(), e);\n+    }\n+    return converter;\n+  }\n+\n+  @Configuration\n+  @ConditionalOnProperty(value = OutBoundClientProps.CLIENT_ID_KEY)\n+  protected static class OutboundConfiguration {\n+    @Autowired\n+    private ActiveMQTTProperties activeMQTTProperties;\n+    @Autowired\n+    ApplicationContext context;\n //\t\t@Value(\"${spring.application.name:''}\")\n //\t\tprivate String defaultClientId;\n-\t\t\n-\t\t@Bean(name = Mqtts.OUTBOUND_CHANNEL)\n-\t\t@ConditionalOnMissingBean(name = Mqtts.OUTBOUND_CHANNEL)\n-\t\tpublic MessageChannel mqttOutboundChannel() {\n-\t\t\treturn new DirectChannel();\n-\t\t}\n-\t\t\n-\t\t@Bean\n-\t\t@ServiceActivator(inputChannel = Mqtts.OUTBOUND_CHANNEL)\n-\t\tpublic MqttPahoMessageHandler mqttOutbound(MqttPahoClientFactory clientFactory, JsonPahoMessageConverter jsonPahoMessageConverter) {\n-\t\t\tOutBoundClientProps client = activeMQTTProperties.getOutbound();\n-\t\t\tString clientId = client.getClientId();\n-\t\t\tAssert.hasText(clientId, \"Outbound clientId can not be blank!\");\n-\t\t\t\n-\t\t\tMqttPahoMessageHandler handler = new MqttPahoMessageHandler(clientId, clientFactory);\n-\t\t\thandler.setAsync(client.isAsync());\n-\t\t\thandler.setAsyncEvents(client.isAsyncEvents());\n-\t\t\thandler.setDefaultQos(client.getDefaultQos());\n-\t\t\thandler.setDefaultRetained(client.isDefaultRetained());\n-\t\t\thandler.setCompletionTimeout(client.getCompletionTimeout());\n-\t\t\t\n-\t\t\tif (MessageConverters.JSON.equals(client.getConverter())) {\n-\t\t\t\tJsonPahoMessageConverter converter = jsonPahoMessageConverter; //sonPahoMessageConverter(client.getDefaultQos(), client.isDefaultRetained());\n-\t\t\t\thandler.setConverter(converter);\n-\t\t\t}\n-\t\t\t\n-\t\t\treturn handler;\n-\t\t}\n-\t\t\n-\t}\n-\t\n-\n-\t@Configuration\n+\n+    @Bean(name = Mqtts.OUTBOUND_CHANNEL)\n+    @ConditionalOnMissingBean(name = Mqtts.OUTBOUND_CHANNEL)\n+    public MessageChannel mqttOutboundChannel() {\n+      return new DirectChannel();\n+    }\n+\n+    @Bean\n+    @ServiceActivator(inputChannel = Mqtts.OUTBOUND_CHANNEL)\n+    public MqttPahoMessageHandler mqttOutbound(MqttPahoClientFactory clientFactory, JsonPahoMessageConverter jsonPahoMessageConverter) {\n+      OutBoundClientProps client = activeMQTTProperties.getOutbound();\n+      String clientId = client.getClientId();\n+      Assert.hasText(clientId, \"Outbound clientId can not be blank!\");\n+\n+      MqttPahoMessageHandler handler = new MqttPahoMessageHandler(clientId, clientFactory);\n+      handler.setAsync(client.isAsync());\n+      handler.setAsyncEvents(client.isAsyncEvents());\n+      handler.setDefaultQos(client.getDefaultQos());\n+      handler.setDefaultRetained(client.isDefaultRetained());\n+      handler.setCompletionTimeout(client.getCompletionTimeout());\n+\n+      if (MessageConverters.JSON.equals(client.getConverter())) {\n+        JsonPahoMessageConverter converter = jsonPahoMessageConverter; //sonPahoMessageConverter(client.getDefaultQos(), client.isDefaultRetained());\n+        handler.setConverter(converter);\n+      }\n+\n+      return handler;\n+    }\n+\n+  }\n+\n+\n+  @Configuration\n //\t@ConditionalOnProperty(value = InBoundClientProps.ENABLED_KEY)\n-\tprotected static class InboundRegistarConfiguration implements InitializingBean {\n-\t\t@Autowired\n-\t\tprivate ActiveMQTTProperties activeMQTTProperties;\n-\t\t@Autowired\n-\t\tMqttPahoClientFactory clientFactory;\n-\t\t\n-\t\t@Autowired\n-\t\tJsonPahoMessageConverter jsonPahoMessageConverter;\n-\t\t\n-\t\t@Autowired\n-\t\tApplicationContext context;\n-\t\t@Autowired\n-\t\tAsyncTaskExecutor asyncTaskExecutor;\n-\n-\t\t@Override\n-\t\tpublic void afterPropertiesSet() throws Exception {\n-\t\t\tList<InBoundClientProps> inbounds = activeMQTTProperties.getInbounds();\n-\t\t\tif (inbounds.isEmpty()) {\n-\t\t\t\treturn ;\n-\t\t\t}\n-\t\t\t\n-\t\t\tfor (InBoundClientProps props : inbounds) {\n-\t\t\t\tString channelName = props.getChannelName();\n-\t\t\t\tif (StringUtils.isBlank(channelName)) {\n-\t\t\t\t\tthrow new BaseException(\"inbound output channel name can not blank!\");\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tMqttPahoMessageDrivenChannel drivenChannel = new MqttPahoMessageDrivenChannel(props, clientFactory);\n-\n-\t\t\t\tif (MessageConverters.JSON.equals(props.getConverter())) {\n-\t\t\t\t\tJsonPahoMessageConverter converter = jsonPahoMessageConverter;\n-\t\t\t\t\tdrivenChannel.setConverter(converter);\n-\t\t\t\t}\n+  protected static class InboundRegistarConfiguration implements InitializingBean {\n+    @Autowired\n+    private ActiveMQTTProperties activeMQTTProperties;\n+    @Autowired\n+    MqttPahoClientFactory clientFactory;\n+\n+    @Autowired\n+    JsonPahoMessageConverter jsonPahoMessageConverter;\n+\n+    @Autowired\n+    ApplicationContext context;\n+    @Autowired\n+    AsyncTaskExecutor asyncTaskExecutor;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+      List<InBoundClientProps> inbounds = activeMQTTProperties.getInbounds();\n+      if (inbounds.isEmpty()) {\n+        return;\n+      }\n+\n+      for (InBoundClientProps props : inbounds) {\n+        String channelName = props.getChannelName();\n+        if (StringUtils.isBlank(channelName)) {\n+          throw new BaseException(\"inbound output channel name can not blank!\");\n+        }\n+\n+        MqttPahoMessageDrivenChannel drivenChannel = new MqttPahoMessageDrivenChannel(props, clientFactory);\n+\n+        if (MessageConverters.JSON.equals(props.getConverter())) {\n+          JsonPahoMessageConverter converter = jsonPahoMessageConverter;\n+          drivenChannel.setConverter(converter);\n+        }\n //\t\t\t\tMessageChannel channel = null;\n //\t\t\t\tif (!context.containsBean(channelName)) {\n //\t\t\t\t\tchannel = SpringUtils.registerBean(context, channelName, DirectChannel.class);\n@@ -154,22 +154,22 @@ public class ActiveMQTTConfiguration {\n //\t\t\t\t\tchannel = SpringUtils.getBean(context, channelName);\n //\t\t\t\t}\n //\t\t\t\tdrivenChannel.setOutputChannel(channel);\n-\t\t\t\tdrivenChannel.setOutputChannelName(channelName);\n-\t\t\t\tString beanName = channelName + \"Adapter\";\n-\t\t\t\tSpringUtils.registerSingleton(context, beanName, drivenChannel);\n-\t\t\t\tSpringUtils.initializeBean(context, drivenChannel);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t}\n-\t\n-\t\n-\t/****\n-\t * \u5982\u679c\u9700\u8981\u914d\u7f6e\u4e0d\u540c\u7684\u6d88\u8d39\u8005\uff0c\u590d\u5236\u53c2\u8003\u6b64\u914d\u7f6e\n-\t * \n-\t * @author way\n-\t *\n-\t */\n+        drivenChannel.setOutputChannelName(channelName);\n+        String beanName = channelName + \"Adapter\";\n+        SpringUtils.registerSingleton(context, beanName, drivenChannel);\n+        SpringUtils.initializeBean(context, drivenChannel);\n+      }\n+    }\n+\n+  }\n+\n+\n+  /****\n+   * \u5982\u679c\u9700\u8981\u914d\u7f6e\u4e0d\u540c\u7684\u6d88\u8d39\u8005\uff0c\u590d\u5236\u53c2\u8003\u6b64\u914d\u7f6e\n+   *\n+   * @author way\n+   *\n+   */\n //\t@Configuration\n //\t@ConditionalOnProperty(value = InBoundClientProps.CLIENT_ID_KEY)\n //\tprotected static class InboundConfiguration {\n@@ -202,9 +202,9 @@ public class ActiveMQTTConfiguration {\n //\t\t\treturn adapter;\n //\t\t}\n //\t}\n-\t\t\n-\t\t// \u914d\u7f6e\u591a\u4e2a mqttInbound \u76f8\u5f53\u4e8e\u542f\u52a8\u4e86\u4e0d\u540c\u7684client\u5b9e\u4f8b\uff0c\u5e76\u4e14\u628a\u63a5\u6536\u5230\u7684\u6d88\u606f\u5199\u5230\u4e86\u540c\u4e00\u4e2amqttInputChannel\uff0c\n-\t\t// \u56e0\u6b64\u76d1\u542c\u8fd9\u4e2amqttInputChannel\u7684handler\u4f1a\u63a5\u6536\u5230\u4e24\u6b21\u6d88\u606f\n+\n+  // \u914d\u7f6e\u591a\u4e2a mqttInbound \u76f8\u5f53\u4e8e\u542f\u52a8\u4e86\u4e0d\u540c\u7684client\u5b9e\u4f8b\uff0c\u5e76\u4e14\u628a\u63a5\u6536\u5230\u7684\u6d88\u606f\u5199\u5230\u4e86\u540c\u4e00\u4e2amqttInputChannel\uff0c\n+  // \u56e0\u6b64\u76d1\u542c\u8fd9\u4e2amqttInputChannel\u7684handler\u4f1a\u63a5\u6536\u5230\u4e24\u6b21\u6d88\u606f\n //\t\t@Bean\n //\t\tpublic MessageProducerSupport mqttInbound2(MqttPahoClientFactory clientFactory, MqttMessageConverter converter) {\n //\t\t\tInBoundClientProps client = activeMQTTProperties.getInbound();\n@@ -223,8 +223,8 @@ public class ActiveMQTTConfiguration {\n //\t\t\t\n //\t\t\treturn adapter;\n //\t\t}\n-\t\t\n-\t\t\n+\n+\n //\t\t@Bean\n //\t\t@ServiceActivator(inputChannel = Mqtts.INBOUND_CHANNEL) // \u7ed1\u5b9a\u6d88\u8d39\u8005\n //\t\tpublic MessageHandler handler() {\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_random/37/ActiveMQTTConfiguration.java\nindex 139cce75e07..e56bd263403 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_random/37/ActiveMQTTConfiguration.java\n@@ -132,7 +132,7 @@ public class ActiveMQTTConfiguration {\n \t\tpublic void afterPropertiesSet() throws Exception {\n \t\t\tList<InBoundClientProps> inbounds = activeMQTTProperties.getInbounds();\n \t\t\tif (inbounds.isEmpty()) {\n-\t\t\t\treturn ;\n+\t\t\t\treturn;\n \t\t\t}\n \t\t\t\n \t\t\tfor (InBoundClientProps props : inbounds) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_three_grams/37/ActiveMQTTConfiguration.java\nindex 139cce75e07..e56bd263403 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/37/ActiveMQTTConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_three_grams/37/ActiveMQTTConfiguration.java\n@@ -132,7 +132,7 @@ public class ActiveMQTTConfiguration {\n \t\tpublic void afterPropertiesSet() throws Exception {\n \t\t\tList<InBoundClientProps> inbounds = activeMQTTProperties.getInbounds();\n \t\t\tif (inbounds.isEmpty()) {\n-\t\t\t\treturn ;\n+\t\t\t\treturn;\n \t\t\t}\n \t\t\t\n \t\t\tfor (InBoundClientProps props : inbounds) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}