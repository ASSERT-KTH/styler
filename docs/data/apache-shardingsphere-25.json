{
    "project_name": "apache-shardingsphere",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "137",
                "severity": "warning",
                "message": "Line is longer than 200 characters (found 202).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        refreshTableMetaData(getSchemaContexts().getDefaultMetaData(), sqlStatementContext.getSqlStatement(), routeUnits);\n        if (isNeedAccumulate(\n                getSchemaContexts().getDefaultMetaData().getRuleMetaData().getRules().stream().filter(rule -> rule instanceof DataNodeContainedRule).collect(Collectors.toList()), sqlStatementContext)) {\n            return accumulate(results);\n        }\n        return null == results.get(0) ? 0 : results.get(0);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/25/StatementExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/25/StatementExecutor.java\nindex 514326f7bec..0bd78b0be79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/25/StatementExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/25/StatementExecutor.java\n@@ -46,21 +46,21 @@ import java.util.stream.Collectors;\n  * Statement executor.\n  */\n public final class StatementExecutor extends AbstractStatementExecutor {\n-    \n+\n     public StatementExecutor(final Map<String, DataSource> dataSourceMap, final SchemaContexts schemaContexts, final SQLExecutor sqlExecutor) {\n         super(dataSourceMap, schemaContexts, sqlExecutor);\n     }\n-    \n+\n     @Override\n     public List<QueryResult> executeQuery(final Collection<InputGroup<StatementExecuteUnit>> inputGroups) throws SQLException {\n         boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback<QueryResult> sqlExecutorCallback = new DefaultSQLExecutorCallback<QueryResult>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n-            \n+\n             @Override\n             protected QueryResult executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return createQueryResult(sql, statement, connectionMode);\n             }\n-            \n+\n             private QueryResult createQueryResult(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 ResultSet resultSet = statement.executeQuery(sql);\n                 return ConnectionMode.MEMORY_STRICTLY == connectionMode ? new StreamQueryResult(resultSet) : new MemoryQueryResult(resultSet);\n@@ -68,20 +68,20 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         };\n         return getSqlExecutor().execute(inputGroups, sqlExecutorCallback);\n     }\n-    \n+\n     @Override\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, \n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups,\n                              final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n         return executeUpdate(inputGroups, Statement::executeUpdate, sqlStatementContext, routeUnits);\n     }\n-    \n+\n     /**\n      * Execute update with auto generated keys.\n-     * \n-     * @param inputGroups input groups\n+     *\n+     * @param inputGroups         input groups\n      * @param sqlStatementContext SQL statement context\n-     * @param routeUnits route units\n-     * @param autoGeneratedKeys auto generated keys' flag\n+     * @param routeUnits          route units\n+     * @param autoGeneratedKeys   auto generated keys' flag\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n@@ -89,14 +89,14 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n                              final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n         return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, autoGeneratedKeys), sqlStatementContext, routeUnits);\n     }\n-    \n+\n     /**\n      * Execute update with column indexes.\n      *\n-     * @param inputGroups input groups\n+     * @param inputGroups         input groups\n      * @param sqlStatementContext SQL statement context\n-     * @param routeUnits route units\n-     * @param columnIndexes column indexes\n+     * @param routeUnits          route units\n+     * @param columnIndexes       column indexes\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n@@ -104,14 +104,14 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n                              final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n         return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnIndexes), sqlStatementContext, routeUnits);\n     }\n-    \n+\n     /**\n      * Execute update with column names.\n      *\n-     * @param inputGroups input groups\n+     * @param inputGroups         input groups\n      * @param sqlStatementContext SQL statement context\n-     * @param routeUnits route units\n-     * @param columnNames column names\n+     * @param routeUnits          route units\n+     * @param columnNames         column names\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n@@ -119,13 +119,13 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n                              final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n         return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnNames), sqlStatementContext, routeUnits);\n     }\n-    \n+\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    private int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Updater updater, \n+    private int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Updater updater,\n                               final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n         boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback sqlExecutorCallback = new DefaultSQLExecutorCallback<Integer>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n-            \n+\n             @Override\n             protected Integer executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return updater.executeUpdate(statement, sql);\n@@ -134,23 +134,23 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         List<Integer> results = getSqlExecutor().execute(inputGroups, sqlExecutorCallback);\n         refreshTableMetaData(getSchemaContexts().getDefaultMetaData(), sqlStatementContext.getSqlStatement(), routeUnits);\n         if (isNeedAccumulate(\n-                getSchemaContexts().getDefaultMetaData().getRuleMetaData().getRules().stream().filter(rule -> rule instanceof DataNodeContainedRule).collect(Collectors.toList()), sqlStatementContext)) {\n+            getSchemaContexts().getDefaultMetaData().getRuleMetaData().getRules().stream().filter(rule -> rule instanceof DataNodeContainedRule).collect(Collectors.toList()), sqlStatementContext)) {\n             return accumulate(results);\n         }\n         return null == results.get(0) ? 0 : results.get(0);\n     }\n-    \n+\n     @Override\n     public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n         return execute(inputGroups, Statement::execute, sqlStatement, routeUnits);\n     }\n-    \n+\n     /**\n      * Execute SQL with auto generated keys.\n      *\n-     * @param inputGroups input groups\n-     * @param sqlStatement SQL statement\n-     * @param routeUnits route units\n+     * @param inputGroups       input groups\n+     * @param sqlStatement      SQL statement\n+     * @param routeUnits        route units\n      * @param autoGeneratedKeys auto generated keys' flag\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n@@ -159,13 +159,13 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n                            final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n         return execute(inputGroups, (statement, sql) -> statement.execute(sql, autoGeneratedKeys), sqlStatement, routeUnits);\n     }\n-    \n+\n     /**\n      * Execute SQL with column indexes.\n      *\n-     * @param inputGroups input groups\n-     * @param sqlStatement SQL statement\n-     * @param routeUnits route units\n+     * @param inputGroups   input groups\n+     * @param sqlStatement  SQL statement\n+     * @param routeUnits    route units\n      * @param columnIndexes column indexes\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n@@ -174,14 +174,14 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n                            final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n         return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnIndexes), sqlStatement, routeUnits);\n     }\n-    \n+\n     /**\n      * Execute SQL with column names.\n      *\n-     * @param inputGroups input groups\n+     * @param inputGroups  input groups\n      * @param sqlStatement SQL statement\n-     * @param routeUnits route units\n-     * @param columnNames column names\n+     * @param routeUnits   route units\n+     * @param columnNames  column names\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n@@ -189,13 +189,13 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n                            final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n         return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnNames), sqlStatement, routeUnits);\n     }\n-    \n+\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    private boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Executor executor, \n+    private boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Executor executor,\n                             final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n         boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback sqlExecutorCallback = new DefaultSQLExecutorCallback<Boolean>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n-            \n+\n             @Override\n             protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return executor.execute(statement, sql);\n@@ -203,14 +203,14 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         };\n         return executeAndRefreshMetaData(inputGroups, sqlStatement, routeUnits, sqlExecutorCallback);\n     }\n-    \n+\n     private interface Updater {\n-        \n+\n         int executeUpdate(Statement statement, String sql) throws SQLException;\n     }\n-    \n+\n     private interface Executor {\n-        \n+\n         boolean execute(Statement statement, String sql) throws SQLException;\n     }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/25/StatementExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/25/StatementExecutor.java\nindex 514326f7bec..4b2113ccafd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/25/StatementExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/25/StatementExecutor.java\n@@ -60,9 +60,9 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n             protected QueryResult executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return createQueryResult(sql, statement, connectionMode);\n             }\n-            \n-            private QueryResult createQueryResult(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n-                ResultSet resultSet = statement.executeQuery(sql);\n+\n+    private QueryResult createQueryResult(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n+    ResultSet resultSet = statement.executeQuery(sql);\n                 return ConnectionMode.MEMORY_STRICTLY == connectionMode ? new StreamQueryResult(resultSet) : new MemoryQueryResult(resultSet);\n             }\n         };\n@@ -70,9 +70,8 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n     }\n     \n     @Override\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, \n-                             final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n-        return executeUpdate(inputGroups, Statement::executeUpdate, sqlStatementContext, routeUnits);\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n+    return executeUpdate(inputGroups, Statement::executeUpdate, sqlStatementContext, routeUnits);\n     }\n     \n     /**\n@@ -85,9 +84,8 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext,\n-                             final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n-        return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, autoGeneratedKeys), sqlStatementContext, routeUnits);\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n+    return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, autoGeneratedKeys), sqlStatementContext, routeUnits);\n     }\n     \n     /**\n@@ -100,9 +98,8 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext,\n-                             final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n-        return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnIndexes), sqlStatementContext, routeUnits);\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n+    return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnIndexes), sqlStatementContext, routeUnits);\n     }\n     \n     /**\n@@ -115,15 +112,14 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext,\n-                             final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n-        return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnNames), sqlStatementContext, routeUnits);\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n+    return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnNames), sqlStatementContext, routeUnits);\n     }\n     \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     private int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Updater updater, \n                               final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n-        boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n+    boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback sqlExecutorCallback = new DefaultSQLExecutorCallback<Integer>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n             \n             @Override\n@@ -135,7 +131,7 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         refreshTableMetaData(getSchemaContexts().getDefaultMetaData(), sqlStatementContext.getSqlStatement(), routeUnits);\n         if (isNeedAccumulate(\n                 getSchemaContexts().getDefaultMetaData().getRuleMetaData().getRules().stream().filter(rule -> rule instanceof DataNodeContainedRule).collect(Collectors.toList()), sqlStatementContext)) {\n-            return accumulate(results);\n+    return accumulate(results);\n         }\n         return null == results.get(0) ? 0 : results.get(0);\n     }\n@@ -155,9 +151,8 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement,\n-                           final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n-        return execute(inputGroups, (statement, sql) -> statement.execute(sql, autoGeneratedKeys), sqlStatement, routeUnits);\n+    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n+    return execute(inputGroups, (statement, sql) -> statement.execute(sql, autoGeneratedKeys), sqlStatement, routeUnits);\n     }\n     \n     /**\n@@ -170,9 +165,8 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement,\n-                           final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n-        return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnIndexes), sqlStatement, routeUnits);\n+    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n+    return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnIndexes), sqlStatement, routeUnits);\n     }\n     \n     /**\n@@ -185,15 +179,13 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement,\n-                           final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n-        return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnNames), sqlStatement, routeUnits);\n+    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n+    return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnNames), sqlStatement, routeUnits);\n     }\n     \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    private boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Executor executor, \n-                            final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n-        boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n+    private boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Executor executor, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n+    boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback sqlExecutorCallback = new DefaultSQLExecutorCallback<Boolean>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n             \n             @Override\n@@ -213,4 +205,4 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         \n         boolean execute(Statement statement, String sql) throws SQLException;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "92",
                    "column": "58",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "53",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "108",
                    "column": "58",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "column": "53",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "124",
                    "column": "58",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "column": "120",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "column": "47",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "163",
                    "column": "52",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "column": "47",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "179",
                    "column": "52",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "47",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "195",
                    "column": "52",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "216",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "222",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/25/StatementExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/25/StatementExecutor.java\nindex 514326f7bec..88e5e4f38dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/25/StatementExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/25/StatementExecutor.java\n@@ -32,7 +32,6 @@ import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.S\n import org.apache.shardingsphere.infra.route.context.RouteUnit;\n import org.apache.shardingsphere.infra.rule.type.DataNodeContainedRule;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n-\n import javax.sql.DataSource;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -45,22 +44,24 @@ import java.util.stream.Collectors;\n /**\n  * Statement executor.\n  */\n+\n+\n public final class StatementExecutor extends AbstractStatementExecutor {\n-    \n+\n     public StatementExecutor(final Map<String, DataSource> dataSourceMap, final SchemaContexts schemaContexts, final SQLExecutor sqlExecutor) {\n         super(dataSourceMap, schemaContexts, sqlExecutor);\n     }\n-    \n+\n     @Override\n     public List<QueryResult> executeQuery(final Collection<InputGroup<StatementExecuteUnit>> inputGroups) throws SQLException {\n         boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback<QueryResult> sqlExecutorCallback = new DefaultSQLExecutorCallback<QueryResult>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n-            \n+\n             @Override\n             protected QueryResult executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return createQueryResult(sql, statement, connectionMode);\n             }\n-            \n+\n             private QueryResult createQueryResult(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 ResultSet resultSet = statement.executeQuery(sql);\n                 return ConnectionMode.MEMORY_STRICTLY == connectionMode ? new StreamQueryResult(resultSet) : new MemoryQueryResult(resultSet);\n@@ -68,9 +69,9 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         };\n         return getSqlExecutor().execute(inputGroups, sqlExecutorCallback);\n     }\n-    \n+\n     @Override\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, \n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups,\n                              final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n         return executeUpdate(inputGroups, Statement::executeUpdate, sqlStatementContext, routeUnits);\n     }\n@@ -85,9 +86,10 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext,\n-                             final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n-        return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, autoGeneratedKeys), sqlStatementContext, routeUnits);\n+\n+\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n+        return executeUpdate(inputGroups, (statement,sql)-> statement.executeUpdate(sql, autoGeneratedKeys), sqlStatementContext, routeUnits);\n     }\n     \n     /**\n@@ -100,9 +102,10 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext,\n-                             final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n-        return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnIndexes), sqlStatementContext, routeUnits);\n+\n+\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n+        return executeUpdate(inputGroups, (statement,sql)-> statement.executeUpdate(sql, columnIndexes), sqlStatementContext, routeUnits);\n     }\n     \n     /**\n@@ -115,17 +118,17 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext,\n-                             final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n-        return executeUpdate(inputGroups, (statement, sql) -> statement.executeUpdate(sql, columnNames), sqlStatementContext, routeUnits);\n+\n+\n+    public int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n+        return executeUpdate(inputGroups, (statement,sql)-> statement.executeUpdate(sql, columnNames), sqlStatementContext, routeUnits);\n     }\n-    \n+\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    private int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Updater updater, \n-                              final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n+    private int executeUpdate(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Updater updater, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits) throws SQLException {\n         boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback sqlExecutorCallback = new DefaultSQLExecutorCallback<Integer>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n-            \n+\n             @Override\n             protected Integer executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return updater.executeUpdate(statement, sql);\n@@ -133,13 +136,12 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         };\n         List<Integer> results = getSqlExecutor().execute(inputGroups, sqlExecutorCallback);\n         refreshTableMetaData(getSchemaContexts().getDefaultMetaData(), sqlStatementContext.getSqlStatement(), routeUnits);\n-        if (isNeedAccumulate(\n-                getSchemaContexts().getDefaultMetaData().getRuleMetaData().getRules().stream().filter(rule -> rule instanceof DataNodeContainedRule).collect(Collectors.toList()), sqlStatementContext)) {\n+        if (isNeedAccumulate(getSchemaContexts().getDefaultMetaData().getRuleMetaData().getRules().stream().filter(rule-> rule instanceof DataNodeContainedRule).collect(Collectors.toList()), sqlStatementContext)) {\n             return accumulate(results);\n         }\n         return null == results.get(0) ? 0 : results.get(0);\n     }\n-    \n+\n     @Override\n     public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n         return execute(inputGroups, Statement::execute, sqlStatement, routeUnits);\n@@ -155,9 +157,10 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement,\n-                           final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n-        return execute(inputGroups, (statement, sql) -> statement.execute(sql, autoGeneratedKeys), sqlStatement, routeUnits);\n+\n+\n+    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits, final int autoGeneratedKeys) throws SQLException {\n+        return execute(inputGroups, (statement,sql)-> statement.execute(sql, autoGeneratedKeys), sqlStatement, routeUnits);\n     }\n     \n     /**\n@@ -170,9 +173,10 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement,\n-                           final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n-        return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnIndexes), sqlStatement, routeUnits);\n+\n+\n+    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits, final int[] columnIndexes) throws SQLException {\n+        return execute(inputGroups, (statement,sql)-> statement.execute(sql, columnIndexes), sqlStatement, routeUnits);\n     }\n     \n     /**\n@@ -185,17 +189,19 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement,\n-                           final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n-        return execute(inputGroups, (statement, sql) -> statement.execute(sql, columnNames), sqlStatement, routeUnits);\n+\n+\n+    public boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits, final String[] columnNames) throws SQLException {\n+        return execute(inputGroups, (statement,sql)-> statement.execute(sql, columnNames), sqlStatement, routeUnits);\n     }\n-    \n+\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    private boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups, final Executor executor, \n+    private boolean execute(final Collection<InputGroup<StatementExecuteUnit>> inputGroups,\n+                            final Executor executor,\n                             final SQLStatement sqlStatement, final Collection<RouteUnit> routeUnits) throws SQLException {\n         boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();\n         SQLExecutorCallback sqlExecutorCallback = new DefaultSQLExecutorCallback<Boolean>(getSchemaContexts().getDatabaseType(), isExceptionThrown) {\n-            \n+\n             @Override\n             protected Boolean executeSQL(final String sql, final Statement statement, final ConnectionMode connectionMode) throws SQLException {\n                 return executor.execute(statement, sql);\n@@ -203,14 +209,16 @@ public final class StatementExecutor extends AbstractStatementExecutor {\n         };\n         return executeAndRefreshMetaData(inputGroups, sqlStatement, routeUnits, sqlExecutorCallback);\n     }\n-    \n+\n     private interface Updater {\n-        \n+\n+\n         int executeUpdate(Statement statement, String sql) throws SQLException;\n     }\n-    \n+\n     private interface Executor {\n-        \n+\n+\n         boolean execute(Statement statement, String sql) throws SQLException;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}