{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4345",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4345/IndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4345/IndexAccessor.java\nindex ebd854497b3..b1c14d3ec3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4345/IndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4345/IndexAccessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import java.io.Closeable;\n@@ -42,250 +43,250 @@ import static org.neo4j.helpers.collection.Iterators.emptyResourceIterator;\n  */\n public interface IndexAccessor extends Closeable\n {\n-    IndexAccessor EMPTY = new Adapter();\n-\n-    /**\n-     * Deletes this index as well as closes all used external resources.\n-     * There will not be any interactions after this call.\n-     *\n-     * @throws IOException if unable to drop index.\n-     */\n-    void drop() throws IOException;\n-\n-    /**\n-     * Return an updater for applying a set of changes to this index.\n-     * Updates must be visible in {@link #newReader() readers} created after this update.\n-     * <p>\n-     * This is called with IndexUpdateMode.RECOVERY when starting up after\n-     * a crash or similar. Updates given then may have already been applied to this index, so\n-     * additional checks must be in place so that data doesn't get duplicated, but is idempotent.\n-     */\n-    IndexUpdater newUpdater( IndexUpdateMode mode );\n-\n-    /**\n-     * Forces this index to disk. Called at certain points from within Neo4j for example when\n-     * rotating the logical log. After completion of this call there cannot be any essential state that\n-     * hasn't been forced to disk.\n-     *\n-     * @param ioLimiter The {@link IOLimiter} to use for implementations living on top of {@link org.neo4j.io.pagecache.PageCache}.\n-     * @throws IOException if there was a problem forcing the state to persistent storage.\n-     */\n-    void force( IOLimiter ioLimiter ) throws IOException;\n-\n-    /**\n-     * Refreshes this index, so that {@link #newReader() readers} created after completion of this call\n-     * will see the latest updates. This happens automatically on closing {@link #newUpdater(IndexUpdateMode)}\n-     * w/ {@link IndexUpdateMode#ONLINE}, but not guaranteed for {@link IndexUpdateMode#RECOVERY}.\n-     * Therefore this call is complementary for updates that has taken place with {@link IndexUpdateMode#RECOVERY}.\n-     *\n-     * @throws IOException if there was a problem refreshing the index.\n-     */\n-    void refresh() throws IOException;\n-\n-    /**\n-     * Closes this index accessor. There will not be any interactions after this call.\n-     * After completion of this call there cannot be any essential state that hasn't been forced to disk.\n-     *\n-     * @throws IOException if unable to close index.\n-     */\n+  IndexAccessor EMPTY = new Adapter();\n+\n+  /**\n+   * Deletes this index as well as closes all used external resources.\n+   * There will not be any interactions after this call.\n+   *\n+   * @throws IOException if unable to drop index.\n+   */\n+  void drop() throws IOException;\n+\n+  /**\n+   * Return an updater for applying a set of changes to this index.\n+   * Updates must be visible in {@link #newReader() readers} created after this update.\n+   * <p>\n+   * This is called with IndexUpdateMode.RECOVERY when starting up after\n+   * a crash or similar. Updates given then may have already been applied to this index, so\n+   * additional checks must be in place so that data doesn't get duplicated, but is idempotent.\n+   */\n+  IndexUpdater newUpdater(IndexUpdateMode mode);\n+\n+  /**\n+   * Forces this index to disk. Called at certain points from within Neo4j for example when\n+   * rotating the logical log. After completion of this call there cannot be any essential state that\n+   * hasn't been forced to disk.\n+   *\n+   * @param ioLimiter The {@link IOLimiter} to use for implementations living on top of {@link org.neo4j.io.pagecache.PageCache}.\n+   * @throws IOException if there was a problem forcing the state to persistent storage.\n+   */\n+  void force(IOLimiter ioLimiter) throws IOException;\n+\n+  /**\n+   * Refreshes this index, so that {@link #newReader() readers} created after completion of this call\n+   * will see the latest updates. This happens automatically on closing {@link #newUpdater(IndexUpdateMode)}\n+   * w/ {@link IndexUpdateMode#ONLINE}, but not guaranteed for {@link IndexUpdateMode#RECOVERY}.\n+   * Therefore this call is complementary for updates that has taken place with {@link IndexUpdateMode#RECOVERY}.\n+   *\n+   * @throws IOException if there was a problem refreshing the index.\n+   */\n+  void refresh() throws IOException;\n+\n+  /**\n+   * Closes this index accessor. There will not be any interactions after this call.\n+   * After completion of this call there cannot be any essential state that hasn't been forced to disk.\n+   *\n+   * @throws IOException if unable to close index.\n+   */\n+  @Override\n+  void close() throws IOException;\n+\n+  /**\n+   * @return a new {@link IndexReader} responsible for looking up results in the index. The returned\n+   * reader must honor repeatable reads.\n+   */\n+  IndexReader newReader();\n+\n+  BoundedIterable<Long> newAllEntriesReader();\n+\n+  /**\n+   * Should return a full listing of all files needed by this index accessor to work with the index. The files\n+   * need to remain available until the resource iterator returned here is closed. This is used to duplicate created\n+   * indexes across clusters, among other things.\n+   */\n+  ResourceIterator<File> snapshotFiles() throws IOException;\n+\n+  /**\n+   * Verifies that each value in this index is unique.\n+   * Index is guaranteed to not change while this call executes.\n+   *\n+   * @param propertyAccessor {@link PropertyAccessor} for accessing properties from database storage\n+   *                         in the event of conflicting values.\n+   * @throws IndexEntryConflictException for first detected uniqueness conflict, if any.\n+   * @throws IOException                 on error reading from source files.\n+   */\n+  void verifyDeferredConstraints(PropertyAccessor propertyAccessor) throws IndexEntryConflictException, IOException;\n+\n+  /**\n+   * @return true if index was not shutdown properly and its internal state is dirty, false otherwise\n+   */\n+  boolean isDirty();\n+\n+  /**\n+   * Validates the {@link Value value tuple} before transaction determines that it can commit.\n+   */\n+  default void validateBeforeCommit(Value[] tuple)\n+  {\n+    // For most value types there are no specific validations to be made.\n+  }\n+\n+  class Adapter implements IndexAccessor\n+  {\n     @Override\n-    void close() throws IOException;\n-\n-    /**\n-     * @return a new {@link IndexReader} responsible for looking up results in the index. The returned\n-     * reader must honor repeatable reads.\n-     */\n-    IndexReader newReader();\n-\n-    BoundedIterable<Long> newAllEntriesReader();\n-\n-    /**\n-     * Should return a full listing of all files needed by this index accessor to work with the index. The files\n-     * need to remain available until the resource iterator returned here is closed. This is used to duplicate created\n-     * indexes across clusters, among other things.\n-     */\n-    ResourceIterator<File> snapshotFiles() throws IOException;\n-\n-    /**\n-     * Verifies that each value in this index is unique.\n-     * Index is guaranteed to not change while this call executes.\n-     *\n-     * @param propertyAccessor {@link PropertyAccessor} for accessing properties from database storage\n-     * in the event of conflicting values.\n-     * @throws IndexEntryConflictException for first detected uniqueness conflict, if any.\n-     * @throws IOException on error reading from source files.\n-     */\n-    void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException;\n-\n-    /**\n-     * @return true if index was not shutdown properly and its internal state is dirty, false otherwise\n-     */\n-    boolean isDirty();\n-\n-    /**\n-     * Validates the {@link Value value tuple} before transaction determines that it can commit.\n-     */\n-    default void validateBeforeCommit( Value[] tuple )\n+    public void drop()\n     {\n-        // For most value types there are no specific validations to be made.\n     }\n \n-    class Adapter implements IndexAccessor\n+    @Override\n+    public IndexUpdater newUpdater(IndexUpdateMode mode)\n     {\n-        @Override\n-        public void drop()\n-        {\n-        }\n+      return SwallowingIndexUpdater.INSTANCE;\n+    }\n \n-        @Override\n-        public IndexUpdater newUpdater( IndexUpdateMode mode )\n-        {\n-            return SwallowingIndexUpdater.INSTANCE;\n-        }\n+    @Override\n+    public void force(IOLimiter ioLimiter)\n+    {\n+    }\n \n-        @Override\n-        public void force( IOLimiter ioLimiter )\n-        {\n-        }\n+    @Override\n+    public void refresh()\n+    {\n+    }\n \n-        @Override\n-        public void refresh()\n-        {\n-        }\n+    @Override\n+    public void close()\n+    {\n+    }\n \n-        @Override\n-        public void close()\n-        {\n-        }\n+    @Override\n+    public IndexReader newReader()\n+    {\n+      return IndexReader.EMPTY;\n+    }\n \n+    @Override\n+    public BoundedIterable<Long> newAllEntriesReader()\n+    {\n+      return new BoundedIterable<Long>()\n+      {\n         @Override\n-        public IndexReader newReader()\n+        public long maxCount()\n         {\n-            return IndexReader.EMPTY;\n+          return 0;\n         }\n \n         @Override\n-        public BoundedIterable<Long> newAllEntriesReader()\n+        public void close()\n         {\n-            return new BoundedIterable<Long>()\n-            {\n-                @Override\n-                public long maxCount()\n-                {\n-                    return 0;\n-                }\n-\n-                @Override\n-                public void close()\n-                {\n-                }\n-\n-                @Override\n-                public Iterator<Long> iterator()\n-                {\n-                    return emptyIterator();\n-                }\n-            };\n         }\n \n         @Override\n-        public ResourceIterator<File> snapshotFiles()\n+        public Iterator<Long> iterator()\n         {\n-            return emptyResourceIterator();\n+          return emptyIterator();\n         }\n+      };\n+    }\n \n-        @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-        {\n-        }\n+    @Override\n+    public ResourceIterator<File> snapshotFiles()\n+    {\n+      return emptyResourceIterator();\n+    }\n \n-        @Override\n-        public boolean isDirty()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+    {\n     }\n \n-    class Delegator implements IndexAccessor\n+    @Override\n+    public boolean isDirty()\n     {\n-        private final IndexAccessor delegate;\n+      return false;\n+    }\n+  }\n \n-        public Delegator( IndexAccessor delegate )\n-        {\n-            this.delegate = delegate;\n-        }\n+  class Delegator implements IndexAccessor\n+  {\n+    private final IndexAccessor delegate;\n \n-        @Override\n-        public void drop() throws IOException\n-        {\n-            delegate.drop();\n-        }\n+    public Delegator(IndexAccessor delegate)\n+    {\n+      this.delegate = delegate;\n+    }\n \n-        @Override\n-        public IndexUpdater newUpdater( IndexUpdateMode mode )\n-        {\n-            return delegate.newUpdater( mode );\n-        }\n+    @Override\n+    public void drop() throws IOException\n+    {\n+      delegate.drop();\n+    }\n \n-        @Override\n-        public void force( IOLimiter ioLimiter ) throws IOException\n-        {\n-            delegate.force( ioLimiter );\n-        }\n+    @Override\n+    public IndexUpdater newUpdater(IndexUpdateMode mode)\n+    {\n+      return delegate.newUpdater(mode);\n+    }\n \n-        @Override\n-        public void refresh() throws IOException\n-        {\n-            delegate.refresh();\n-        }\n+    @Override\n+    public void force(IOLimiter ioLimiter) throws IOException\n+    {\n+      delegate.force(ioLimiter);\n+    }\n \n-        @Override\n-        public void close() throws IOException\n-        {\n-            delegate.close();\n-        }\n+    @Override\n+    public void refresh() throws IOException\n+    {\n+      delegate.refresh();\n+    }\n \n-        @Override\n-        public IndexReader newReader()\n-        {\n-            return delegate.newReader();\n-        }\n+    @Override\n+    public void close() throws IOException\n+    {\n+      delegate.close();\n+    }\n \n-        @Override\n-        public BoundedIterable<Long> newAllEntriesReader()\n-        {\n-            return delegate.newAllEntriesReader();\n-        }\n+    @Override\n+    public IndexReader newReader()\n+    {\n+      return delegate.newReader();\n+    }\n \n-        @Override\n-        public ResourceIterator<File> snapshotFiles() throws IOException\n-        {\n-            return delegate.snapshotFiles();\n-        }\n+    @Override\n+    public BoundedIterable<Long> newAllEntriesReader()\n+    {\n+      return delegate.newAllEntriesReader();\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return delegate.toString();\n-        }\n+    @Override\n+    public ResourceIterator<File> snapshotFiles() throws IOException\n+    {\n+      return delegate.snapshotFiles();\n+    }\n \n-        @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n-        {\n-            delegate.verifyDeferredConstraints( propertyAccessor );\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return delegate.toString();\n+    }\n \n-        @Override\n-        public boolean isDirty()\n-        {\n-            return delegate.isDirty();\n-        }\n+    @Override\n+    public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+        throws IndexEntryConflictException, IOException\n+    {\n+      delegate.verifyDeferredConstraints(propertyAccessor);\n+    }\n \n-        @Override\n-        public void validateBeforeCommit( Value[] tuple )\n-        {\n-            delegate.validateBeforeCommit( tuple );\n-        }\n+    @Override\n+    public boolean isDirty()\n+    {\n+      return delegate.isDirty();\n+    }\n+\n+    @Override\n+    public void validateBeforeCommit(Value[] tuple)\n+    {\n+      delegate.validateBeforeCommit(tuple);\n     }\n+  }\n }\n",
            "diff_size": 271
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4345/IndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4345/IndexAccessor.java\nindex ebd854497b3..d1f680f87fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4345/IndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4345/IndexAccessor.java\n@@ -270,9 +270,8 @@ public interface IndexAccessor extends Closeable\n         }\n \n         @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n-        {\n+        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n+{\n             delegate.verifyDeferredConstraints( propertyAccessor );\n         }\n \n@@ -288,4 +287,4 @@ public interface IndexAccessor extends Closeable\n             delegate.validateBeforeCommit( tuple );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "99",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4345/IndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4345/IndexAccessor.java\nindex ebd854497b3..a47e92be833 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4345/IndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4345/IndexAccessor.java\n@@ -23,7 +23,6 @@ import java.io.Closeable;\n import java.io.File;\n import java.io.IOException;\n import java.util.Iterator;\n-\n import org.neo4j.graphdb.ResourceIterator;\n import org.neo4j.helpers.collection.BoundedIterable;\n import org.neo4j.io.pagecache.IOLimiter;\n@@ -33,13 +32,14 @@ import org.neo4j.kernel.impl.api.index.updater.SwallowingIndexUpdater;\n import org.neo4j.kernel.impl.util.Validator;\n import org.neo4j.storageengine.api.schema.IndexReader;\n import org.neo4j.values.storable.Value;\n-\n import static java.util.Collections.emptyIterator;\n+\n import static org.neo4j.helpers.collection.Iterators.emptyResourceIterator;\n \n /**\n  * Used for online operation of an index.\n  */\n+\n public interface IndexAccessor extends Closeable\n {\n     IndexAccessor EMPTY = new Adapter();\n@@ -50,7 +50,7 @@ public interface IndexAccessor extends Closeable\n      *\n      * @throws IOException if unable to drop index.\n      */\n-    void drop() throws IOException;\n+    void drop() throws IOException ;\n \n     /**\n      * Return an updater for applying a set of changes to this index.\n@@ -60,7 +60,8 @@ public interface IndexAccessor extends Closeable\n      * a crash or similar. Updates given then may have already been applied to this index, so\n      * additional checks must be in place so that data doesn't get duplicated, but is idempotent.\n      */\n-    IndexUpdater newUpdater( IndexUpdateMode mode );\n+    IndexUpdater newUpdater( IndexUpdateMode mode )\n+    ;\n \n     /**\n      * Forces this index to disk. Called at certain points from within Neo4j for example when\n@@ -69,8 +70,7 @@ public interface IndexAccessor extends Closeable\n      *\n      * @param ioLimiter The {@link IOLimiter} to use for implementations living on top of {@link org.neo4j.io.pagecache.PageCache}.\n      * @throws IOException if there was a problem forcing the state to persistent storage.\n-     */\n-    void force( IOLimiter ioLimiter ) throws IOException;\n+     */ void force( IOLimiter ioLimiter ) throws IOException ;\n \n     /**\n      * Refreshes this index, so that {@link #newReader() readers} created after completion of this call\n@@ -80,7 +80,7 @@ public interface IndexAccessor extends Closeable\n      *\n      * @throws IOException if there was a problem refreshing the index.\n      */\n-    void refresh() throws IOException;\n+    void refresh() throws IOException ;\n \n     /**\n      * Closes this index accessor. There will not be any interactions after this call.\n@@ -88,23 +88,21 @@ public interface IndexAccessor extends Closeable\n      *\n      * @throws IOException if unable to close index.\n      */\n-    @Override\n-    void close() throws IOException;\n+    @Override void close() throws IOException ;\n \n     /**\n      * @return a new {@link IndexReader} responsible for looking up results in the index. The returned\n      * reader must honor repeatable reads.\n      */\n-    IndexReader newReader();\n-\n-    BoundedIterable<Long> newAllEntriesReader();\n+    IndexReader newReader()\n+    ; BoundedIterable<Long> newAllEntriesReader()\n+      ;\n \n     /**\n      * Should return a full listing of all files needed by this index accessor to work with the index. The files\n      * need to remain available until the resource iterator returned here is closed. This is used to duplicate created\n      * indexes across clusters, among other things.\n-     */\n-    ResourceIterator<File> snapshotFiles() throws IOException;\n+     */ ResourceIterator<File> snapshotFiles() throws IOException ;\n \n     /**\n      * Verifies that each value in this index is unique.\n@@ -115,12 +113,13 @@ public interface IndexAccessor extends Closeable\n      * @throws IndexEntryConflictException for first detected uniqueness conflict, if any.\n      * @throws IOException on error reading from source files.\n      */\n-    void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException;\n+    void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException ;\n \n     /**\n      * @return true if index was not shutdown properly and its internal state is dirty, false otherwise\n      */\n-    boolean isDirty();\n+    boolean isDirty()\n+    ;\n \n     /**\n      * Validates the {@link Value value tuple} before transaction determines that it can commit.\n@@ -168,24 +167,24 @@ public interface IndexAccessor extends Closeable\n         public BoundedIterable<Long> newAllEntriesReader()\n         {\n             return new BoundedIterable<Long>()\n-            {\n-                @Override\n-                public long maxCount()\n-                {\n-                    return 0;\n-                }\n-\n-                @Override\n-                public void close()\n-                {\n-                }\n-\n-                @Override\n-                public Iterator<Long> iterator()\n-                {\n-                    return emptyIterator();\n-                }\n-            };\n+{\n+    @Override\n+    public long maxCount()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+    }\n+\n+    @Override\n+    public Iterator<Long> iterator()\n+    {\n+        return emptyIterator();\n+    }\n+};\n         }\n \n         @Override\n@@ -270,8 +269,7 @@ public interface IndexAccessor extends Closeable\n         }\n \n         @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n+        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n         {\n             delegate.verifyDeferredConstraints( propertyAccessor );\n         }\n@@ -288,4 +286,5 @@ public interface IndexAccessor extends Closeable\n             delegate.validateBeforeCommit( tuple );\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}