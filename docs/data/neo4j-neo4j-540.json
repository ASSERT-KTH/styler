{
    "project_name": "neo4j-neo4j",
    "error_id": "540",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/540/PageSwapperFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/540/PageSwapperFactory.java\nindex 78819fc8d8d..3b73eb88576 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/540/PageSwapperFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/540/PageSwapperFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.IOException;\n@@ -41,27 +42,27 @@ public interface PageSwapperFactory\n     /**\n      * Create a PageSwapper for the given file.\n      *\n-     * @param path The file that the PageSwapper will move file pages in and\n-     * out of.\n-     * @param filePageSize The size of the pages in the file. Presumably a\n-     * multiple of some record size.\n-     * @param onEviction The PageSwapper will be told about evictions, and has\n-     * the responsibility of informing the PagedFile via this callback.\n+     * @param path             The file that the PageSwapper will move file pages in and\n+     *                         out of.\n+     * @param filePageSize     The size of the pages in the file. Presumably a\n+     *                         multiple of some record size.\n+     * @param onEviction       The PageSwapper will be told about evictions, and has\n+     *                         the responsibility of informing the PagedFile via this callback.\n      * @param createIfNotExist When true, creates the given file if it does not exist, instead of throwing an\n-     * exception.\n-     * @param useDirectIO When true, direct io open open will gonna be used for underlying channel.\n-     * Option supported only on Linux with certain limitations.\n+     *                         exception.\n+     * @param useDirectIO      When true, direct io open open will gonna be used for underlying channel.\n+     *                         Option supported only on Linux with certain limitations.\n      * @return A working PageSwapper instance for the given file.\n      * @throws IOException If the PageSwapper could not be created, for\n-     * instance if the underlying file could not be opened, or the given file does not exist and createIfNotExist is\n-     * false.\n+     *                     instance if the underlying file could not be opened, or the given file does not exist and createIfNotExist is\n+     *                     false.\n      */\n     PageSwapper createPageSwapper(\n-            Path path,\n-            int filePageSize,\n-            PageEvictionCallback onEviction,\n-            boolean createIfNotExist,\n-            boolean useDirectIO ) throws IOException;\n+      Path path,\n+      int filePageSize,\n+      PageEvictionCallback onEviction,\n+      boolean createIfNotExist,\n+      boolean useDirectIO) throws IOException;\n \n     /**\n      * Close and release any resources associated with this PageSwapperFactory, that it may have opened or acquired\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}