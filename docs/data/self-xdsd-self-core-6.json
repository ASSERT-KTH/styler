{
    "project_name": "self-xdsd-self-core",
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        final String issueUriStr = issueUri.toString();\n        String slash = \"/\";\n        if(issueUriStr.endsWith(\"/\")){\n            slash = \"\";\n        }\n        this.commentsUri = URI.create(issueUriStr + slash + \"comments\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/6/GithubIssueComments.java\nindex d30a53e62ec..f4569eda0a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/6/GithubIssueComments.java\n@@ -55,7 +55,7 @@ final class GithubIssueComments implements Comments {\n     ) {\n         final String issueUriStr = issueUri.toString();\n         String slash = \"/\";\n-        if(issueUriStr.endsWith(\"/\")){\n+        if (issueUriStr.endsWith(\"/\")){\n             slash = \"\";\n         }\n         this.commentsUri = URI.create(issueUriStr + slash + \"comments\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/6/GithubIssueComments.java\nindex d30a53e62ec..eaaed0a4eb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/6/GithubIssueComments.java\n@@ -19,10 +19,10 @@ import java.util.stream.Collectors;\n  *\n  * @author criske\n  * @version $Id$\n- * @since 0.0.8\n  * @todo #100:30min Provide a pagination solution in iterator() using\n- *  Github response headers, when {@link Resource} API has access to http\n- *  response headers (issue #241).\n+ * Github response headers, when {@link Resource} API has access to http\n+ * response headers (issue #241).\n+ * @since 0.0.8\n  */\n final class GithubIssueComments implements Comments {\n \n@@ -46,7 +46,7 @@ final class GithubIssueComments implements Comments {\n     /**\n      * Ctor.\n      *\n-     * @param issueUri Comments Issue URI.\n+     * @param issueUri  Comments Issue URI.\n      * @param resources Github's JSON Resources.\n      */\n     GithubIssueComments(\n@@ -55,7 +55,7 @@ final class GithubIssueComments implements Comments {\n     ) {\n         final String issueUriStr = issueUri.toString();\n         String slash = \"/\";\n-        if(issueUriStr.endsWith(\"/\")){\n+        if (issueUriStr.endsWith(\"/\")) {\n             slash = \"\";\n         }\n         this.commentsUri = URI.create(issueUriStr + slash + \"comments\");\n@@ -74,11 +74,11 @@ final class GithubIssueComments implements Comments {\n         } else {\n             LOG.error(\n                 \"Expected status 201 CREATED, but got: [\"\n-                + resource.statusCode() + \"].\"\n+                    + resource.statusCode() + \"].\"\n             );\n             throw new IllegalStateException(\n                 \"Github Issue Comment was not created. Status is \"\n-              + resource.statusCode()\n+                    + resource.statusCode()\n             );\n         }\n     }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/6/GithubIssueComments.java\nindex d30a53e62ec..48010cd34f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/6/GithubIssueComments.java\n@@ -55,7 +55,7 @@ final class GithubIssueComments implements Comments {\n     ) {\n         final String issueUriStr = issueUri.toString();\n         String slash = \"/\";\n-        if(issueUriStr.endsWith(\"/\")){\n+        if (issueUriStr.endsWith(\"/\")){\n             slash = \"\";\n         }\n         this.commentsUri = URI.create(issueUriStr + slash + \"comments\");\n@@ -78,8 +78,8 @@ final class GithubIssueComments implements Comments {\n             );\n             throw new IllegalStateException(\n                 \"Github Issue Comment was not created. Status is \"\n-              + resource.statusCode()\n-            );\n++ resource.statusCode()\n+    );\n         }\n     }\n \n@@ -103,4 +103,4 @@ final class GithubIssueComments implements Comments {\n         }\n         return comments.iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 90).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/6/GithubIssueComments.java\nindex d30a53e62ec..bf486fe143c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/6/GithubIssueComments.java\n@@ -5,7 +5,6 @@ import com.selfxdsd.api.Comments;\n import com.selfxdsd.api.Resource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import javax.json.Json;\n import javax.json.JsonObject;\n import java.net.HttpURLConnection;\n@@ -24,23 +23,29 @@ import java.util.stream.Collectors;\n  *  Github response headers, when {@link Resource} API has access to http\n  *  response headers (issue #241).\n  */\n+\n+\n final class GithubIssueComments implements Comments {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-        GithubIssueComments.class\n-    );\n+\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GithubIssueComments.class);\n \n     /**\n      * Base Comments uri.\n      */\n+\n+\n     private final URI commentsUri;\n \n     /**\n      * Github's JSON Resources.\n      */\n+\n+\n     private final JsonResources resources;\n \n     /**\n@@ -49,13 +54,13 @@ final class GithubIssueComments implements Comments {\n      * @param issueUri Comments Issue URI.\n      * @param resources Github's JSON Resources.\n      */\n-    GithubIssueComments(\n-        final URI issueUri,\n-        final JsonResources resources\n-    ) {\n+\n+\n+    GithubIssueComments(final URI issueUri,\n+                        final JsonResources resources) {\n         final String issueUriStr = issueUri.toString();\n         String slash = \"/\";\n-        if(issueUriStr.endsWith(\"/\")){\n+        if (issueUriStr.endsWith(\"/\")) {\n             slash = \"\";\n         }\n         this.commentsUri = URI.create(issueUriStr + slash + \"comments\");\n@@ -64,22 +69,19 @@ final class GithubIssueComments implements Comments {\n \n     @Override\n     public Comment post(final String body) {\n-        LOG.debug(\"Posting Comment to: [\" + this.commentsUri + \"].\");\n+        LOG.debug(\"Posting Comment to: [\"\n+                      + this.commentsUri + \"].\");\n         final Resource resource = resources.post(\n-            this.commentsUri,\n-            Json.createObjectBuilder().add(\"body\", body).build()\n-        );\n+                                      this.commentsUri,\n+                                      Json.createObjectBuilder().add(\"body\", body).build()\n+                                  );\n         if (resource.statusCode() == HttpURLConnection.HTTP_CREATED) {\n             return new GithubComment(resource.asJsonObject());\n         } else {\n-            LOG.error(\n-                \"Expected status 201 CREATED, but got: [\"\n-                + resource.statusCode() + \"].\"\n-            );\n-            throw new IllegalStateException(\n-                \"Github Issue Comment was not created. Status is \"\n-              + resource.statusCode()\n-            );\n+            LOG.error(\"Expected status 201 CREATED, but got: [\"\n+                          + resource.statusCode() + \"].\");\n+            throw new IllegalStateException(\"Github Issue Comment was not created. Status is \"\n+                                                + resource.statusCode());\n         }\n     }\n \n@@ -93,14 +95,10 @@ final class GithubIssueComments implements Comments {\n         final Resource resource = resources.get(this.commentsUri);\n         final List<Comment> comments;\n         if (resource.statusCode() == HttpURLConnection.HTTP_OK) {\n-            comments = resource.asJsonArray()\n-                .stream()\n-                .map(JsonObject.class::cast)\n-                .map(GithubComment::new)\n-                .collect(Collectors.toList());\n+            comments = resource.asJsonArray().stream().map(JsonObject.class::cast).map(GithubComment::new).collect(Collectors.toList());\n         } else {\n             comments = List.of();\n         }\n         return comments.iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/6/GithubIssueComments.java\nindex d30a53e62ec..f4569eda0a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/6/GithubIssueComments.java\n@@ -55,7 +55,7 @@ final class GithubIssueComments implements Comments {\n     ) {\n         final String issueUriStr = issueUri.toString();\n         String slash = \"/\";\n-        if(issueUriStr.endsWith(\"/\")){\n+        if (issueUriStr.endsWith(\"/\")){\n             slash = \"\";\n         }\n         this.commentsUri = URI.create(issueUriStr + slash + \"comments\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/6/GithubIssueComments.java\nindex d30a53e62ec..f4569eda0a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/6/GithubIssueComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/6/GithubIssueComments.java\n@@ -55,7 +55,7 @@ final class GithubIssueComments implements Comments {\n     ) {\n         final String issueUriStr = issueUri.toString();\n         String slash = \"/\";\n-        if(issueUriStr.endsWith(\"/\")){\n+        if (issueUriStr.endsWith(\"/\")){\n             slash = \"\";\n         }\n         this.commentsUri = URI.create(issueUriStr + slash + \"comments\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}