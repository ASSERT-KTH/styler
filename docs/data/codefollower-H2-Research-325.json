{
    "project_name": "codefollower-H2-Research",
    "error_id": "325",
    "information": {
        "errors": [
            {
                "line": "78",
                "column": "41",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "         * 1 to 4 UTF-16 chars: 96 bytes\n         */\n        return value.length() * 2 + 94; //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/325/ValueString.java\nindex 6324e05b3f7..cb418aad5c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/325/ValueString.java\n@@ -75,8 +75,9 @@ public class ValueString extends Value {\n          * Empty string: 88 bytes\n          * 1 to 4 UTF-16 chars: 96 bytes\n          */\n-        return value.length() * 2 + 94; //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-    }\n+        return value.length() * 2 + 94;\n+    //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+     }\n \n     @Override\n     public Value convertPrecision(long precision) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "79",
                    "column": "37",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/325/ValueString.java\nindex 6324e05b3f7..13003a57db9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/325/ValueString.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.value;\n \n import java.sql.PreparedStatement;\n@@ -19,81 +20,81 @@ import org.h2.util.StringUtils;\n  */\n public class ValueString extends Value {\n \n-    /**\n-     * Empty string. Should not be used in places where empty string can be\n-     * treated as {@code NULL} depending on database mode.\n-     */\n-    public static final ValueString EMPTY = new ValueString(\"\");\n-\n-    /**\n-     * The string data.\n+  /**\n+   * Empty string. Should not be used in places where empty string can be\n+   * treated as {@code NULL} depending on database mode.\n+   */\n+  public static final ValueString EMPTY = new ValueString(\"\");\n+\n+  /**\n+   * The string data.\n+   */\n+  protected final String value;\n+\n+  private TypeInfo type;\n+\n+  protected ValueString(String value) {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public StringBuilder getSQL(StringBuilder builder) {\n+    return StringUtils.quoteStringSQL(builder, value);\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    return other instanceof ValueString\n+        && value.equals(((ValueString) other).value);\n+  }\n+\n+  @Override\n+  public int compareTypeSafe(Value o, CompareMode mode, CastDataProvider provider) {\n+    return mode.compareString(value, ((ValueString) o).value, false);\n+  }\n+\n+  @Override\n+  public String getString() {\n+    return value;\n+  }\n+\n+  @Override\n+  public Object getObject() {\n+    return value;\n+  }\n+\n+  @Override\n+  public void set(PreparedStatement prep, int parameterIndex)\n+      throws SQLException {\n+    prep.setString(parameterIndex, value);\n+  }\n+\n+  @Override\n+  public int getMemory() {\n+    /*\n+     * Java 11 with -XX:-UseCompressedOops\n+     * Empty string: 88 bytes\n+     * 1 to 4 UTF-16 chars: 96 bytes\n      */\n-    protected final String value;\n-\n-    private TypeInfo type;\n-\n-    protected ValueString(String value) {\n-        this.value = value;\n-    }\n-\n-    @Override\n-    public StringBuilder getSQL(StringBuilder builder) {\n-        return StringUtils.quoteStringSQL(builder, value);\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other instanceof ValueString\n-                && value.equals(((ValueString) other).value);\n-    }\n-\n-    @Override\n-    public int compareTypeSafe(Value o, CompareMode mode, CastDataProvider provider) {\n-        return mode.compareString(value, ((ValueString) o).value, false);\n-    }\n-\n-    @Override\n-    public String getString() {\n-        return value;\n-    }\n-\n-    @Override\n-    public Object getObject() {\n-        return value;\n+    return value.length() * 2 + 94; //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+  }\n+\n+  @Override\n+  public Value convertPrecision(long precision) {\n+    int p = MathUtils.convertLongToInt(precision);\n+    if (value.length() <= p) {\n+      return this;\n     }\n+    return getNew(value.substring(0, p));\n+  }\n \n-    @Override\n-    public void set(PreparedStatement prep, int parameterIndex)\n-            throws SQLException {\n-        prep.setString(parameterIndex, value);\n-    }\n+  @Override\n+  public int hashCode() {\n+    // TODO hash performance: could build a quicker hash\n+    // by hashing the size and a few characters\n+    return value.hashCode();\n \n-    @Override\n-    public int getMemory() {\n-        /*\n-         * Java 11 with -XX:-UseCompressedOops\n-         * Empty string: 88 bytes\n-         * 1 to 4 UTF-16 chars: 96 bytes\n-         */\n-        return value.length() * 2 + 94; //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-    }\n-\n-    @Override\n-    public Value convertPrecision(long precision) {\n-        int p = MathUtils.convertLongToInt(precision);\n-        if (value.length() <= p) {\n-            return this;\n-        }\n-        return getNew(value.substring(0, p));\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        // TODO hash performance: could build a quicker hash\n-        // by hashing the size and a few characters\n-        return value.hashCode();\n-\n-        // proposed code:\n+    // proposed code:\n //        private int hash = 0;\n //\n //        public int hashCode() {\n@@ -117,63 +118,63 @@ public class ValueString extends Value {\n //            return h;\n //        }\n \n-    }\n+  }\n \n-    @Override\n-    public final TypeInfo getType() {\n-        TypeInfo type = this.type;\n-        if (type == null) {\n-            int length = value.length();\n-            this.type = type = new TypeInfo(getValueType(), length, 0, length, null);\n-        }\n-        return type;\n+  @Override\n+  public final TypeInfo getType() {\n+    TypeInfo type = this.type;\n+    if (type == null) {\n+      int length = value.length();\n+      this.type = type = new TypeInfo(getValueType(), length, 0, length, null);\n     }\n-\n-    @Override\n-    public int getValueType() {\n-        return VARCHAR;\n+    return type;\n+  }\n+\n+  @Override\n+  public int getValueType() {\n+    return VARCHAR;\n+  }\n+\n+  /**\n+   * Get or create a string value for the given string.\n+   *\n+   * @param s the string\n+   * @return the value\n+   */\n+  public static Value get(String s) {\n+    return get(s, null);\n+  }\n+\n+  /**\n+   * Get or create a string value for the given string.\n+   *\n+   * @param s        the string\n+   * @param provider the cast information provider, or {@code null}\n+   * @return the value\n+   */\n+  public static Value get(String s, CastDataProvider provider) {\n+    if (s.isEmpty()) {\n+      return provider != null && provider.getMode().treatEmptyStringsAsNull ? ValueNull.INSTANCE : EMPTY;\n     }\n-\n-    /**\n-     * Get or create a string value for the given string.\n-     *\n-     * @param s the string\n-     * @return the value\n-     */\n-    public static Value get(String s) {\n-        return get(s, null);\n-    }\n-\n-    /**\n-     * Get or create a string value for the given string.\n-     *\n-     * @param s the string\n-     * @param provider the cast information provider, or {@code null}\n-     * @return the value\n-     */\n-    public static Value get(String s, CastDataProvider provider) {\n-        if (s.isEmpty()) {\n-            return provider != null && provider.getMode().treatEmptyStringsAsNull ? ValueNull.INSTANCE : EMPTY;\n-        }\n-        ValueString obj = new ValueString(StringUtils.cache(s));\n-        //\u5b57\u7b26\u4e32\u957f\u5ea6\u592a\u5927\u65f6\u5c31\u4e0d\u7f13\u5b58\u4e86\n-        if (s.length() > SysProperties.OBJECT_CACHE_MAX_PER_ELEMENT_SIZE) {\n-            return obj;\n-        }\n-        return Value.cache(obj);\n-        // this saves memory, but is really slow\n-        // return new ValueString(s.intern());\n-    }\n-\n-    /**\n-     * Create a new String value of the current class.\n-     * This method is meant to be overridden by subclasses.\n-     *\n-     * @param s the string\n-     * @return the value\n-     */\n-    protected Value getNew(String s) {\n-        return ValueString.get(s);\n+    ValueString obj = new ValueString(StringUtils.cache(s));\n+    //\u5b57\u7b26\u4e32\u957f\u5ea6\u592a\u5927\u65f6\u5c31\u4e0d\u7f13\u5b58\u4e86\n+    if (s.length() > SysProperties.OBJECT_CACHE_MAX_PER_ELEMENT_SIZE) {\n+      return obj;\n     }\n+    return Value.cache(obj);\n+    // this saves memory, but is really slow\n+    // return new ValueString(s.intern());\n+  }\n+\n+  /**\n+   * Create a new String value of the current class.\n+   * This method is meant to be overridden by subclasses.\n+   *\n+   * @param s the string\n+   * @return the value\n+   */\n+  protected Value getNew(String s) {\n+    return ValueString.get(s);\n+  }\n \n }\n",
            "diff_size": 214
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/325/ValueString.java\nindex 6324e05b3f7..514dedca28d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/325/ValueString.java\n@@ -75,7 +75,8 @@ public class ValueString extends Value {\n          * Empty string: 88 bytes\n          * 1 to 4 UTF-16 chars: 96 bytes\n          */\n-        return value.length() * 2 + 94; //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+        return value.length() * 2 + 94;\n+//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n     }\n \n     @Override\n@@ -176,4 +177,4 @@ public class ValueString extends Value {\n         return ValueString.get(s);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "80",
                    "column": "41",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/325/ValueString.java\nindex 6324e05b3f7..2a972b2aff3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/325/ValueString.java\n@@ -7,7 +7,6 @@ package org.h2.value;\n \n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n-\n import org.h2.engine.CastDataProvider;\n import org.h2.engine.SysProperties;\n import org.h2.util.MathUtils;\n@@ -17,19 +16,24 @@ import org.h2.util.StringUtils;\n  * Implementation of the VARCHAR data type.\n  * It is also the base class for other ValueString* classes.\n  */\n+\n+\n public class ValueString extends Value {\n \n     /**\n      * Empty string. Should not be used in places where empty string can be\n      * treated as {@code NULL} depending on database mode.\n      */\n+\n+\n     public static final ValueString EMPTY = new ValueString(\"\");\n \n     /**\n      * The string data.\n      */\n-    protected final String value;\n \n+\n+    protected final String value;\n     private TypeInfo type;\n \n     protected ValueString(String value) {\n@@ -43,8 +47,7 @@ public class ValueString extends Value {\n \n     @Override\n     public boolean equals(Object other) {\n-        return other instanceof ValueString\n-                && value.equals(((ValueString) other).value);\n+        return other instanceof ValueString && value.equals(((ValueString) other).value);\n     }\n \n     @Override\n@@ -63,8 +66,7 @@ public class ValueString extends Value {\n     }\n \n     @Override\n-    public void set(PreparedStatement prep, int parameterIndex)\n-            throws SQLException {\n+    public void set(PreparedStatement prep, int parameterIndex) throws SQLException {\n         prep.setString(parameterIndex, value);\n     }\n \n@@ -116,7 +118,6 @@ public class ValueString extends Value {\n //            }\n //            return h;\n //        }\n-\n     }\n \n     @Override\n@@ -140,6 +141,8 @@ public class ValueString extends Value {\n      * @param s the string\n      * @return the value\n      */\n+\n+\n     public static Value get(String s) {\n         return get(s, null);\n     }\n@@ -151,6 +154,8 @@ public class ValueString extends Value {\n      * @param provider the cast information provider, or {@code null}\n      * @return the value\n      */\n+\n+\n     public static Value get(String s, CastDataProvider provider) {\n         if (s.isEmpty()) {\n             return provider != null && provider.getMode().treatEmptyStringsAsNull ? ValueNull.INSTANCE : EMPTY;\n@@ -172,8 +177,10 @@ public class ValueString extends Value {\n      * @param s the string\n      * @return the value\n      */\n+\n+\n     protected Value getNew(String s) {\n         return ValueString.get(s);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "78",
                    "column": "41",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/325/ValueString.java\nindex 6324e05b3f7..cb418aad5c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/325/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/325/ValueString.java\n@@ -75,8 +75,9 @@ public class ValueString extends Value {\n          * Empty string: 88 bytes\n          * 1 to 4 UTF-16 chars: 96 bytes\n          */\n-        return value.length() * 2 + 94; //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-    }\n+        return value.length() * 2 + 94;\n+    //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+     }\n \n     @Override\n     public Value convertPrecision(long precision) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}