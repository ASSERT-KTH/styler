{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "246",
    "information": {
        "errors": [
            {
                "line": "36",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class ModelAnalyzerImpl implements ModelAnalyzer\n{\n\tprivate ModelPSVI m_currentPSVI;\n\tprivate final ModelPSVI m_documentPSVI;\n\tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/246/ModelAnalyzerImpl.java\nindex ffd9c25628e..3e1d703cd97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/246/ModelAnalyzerImpl.java\n@@ -33,7 +33,7 @@ import org.genxdm.xs.types.Type;\n \n final class ModelAnalyzerImpl implements ModelAnalyzer\n {\n-\tprivate ModelPSVI m_currentPSVI;\n+private ModelPSVI m_currentPSVI;\n \tprivate final ModelPSVI m_documentPSVI;\n \tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/246/ModelAnalyzerImpl.java\nindex ffd9c25628e..1d2b52d22a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/246/ModelAnalyzerImpl.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import javax.xml.namespace.QName;\n@@ -31,121 +32,100 @@ import org.genxdm.xs.types.ComplexType;\n import org.genxdm.xs.types.Type;\n \n \n-final class ModelAnalyzerImpl implements ModelAnalyzer\n-{\n-\tprivate ModelPSVI m_currentPSVI;\n-\tprivate final ModelPSVI m_documentPSVI;\n-\tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n-\n-\t// Document state flag. Have we received the document element?\n-\tprivate boolean m_rootStartDone;\n-\n-\tpublic ModelAnalyzerImpl(final ComponentProvider metaBridge, final ValidationCache cache)\n-\t{\n-\t\tthis.m_currentPSVI = this.m_documentPSVI = new ModelPSVI(ProcessContentsMode.Strict, metaBridge, cache);\n-\t}\n-\n-\tpublic void endDocument() throws AbortException\n-\t{\n-\t\tif (!m_rootStartDone)\n-\t\t{\n-\t\t\tm_errors.error(new CvcNoRootElementException(new SrcFrozenLocation(-1, -1, -1, null, null)));\n-\t\t}\n-\t}\n-\n-\tpublic VxPSVI endElement() throws AbortException\n-\t{\n-\t\tfinal ModelPSVI elementItem = m_currentPSVI;\n-\t\ttry\n-\t\t{\n-\t\t\tm_currentPSVI.checkForUnexpectedEndOfContent(m_errors);\n-\t\t}\n-\t\tfinally\n-\t\t{\n-\t\t\tm_currentPSVI = m_currentPSVI.pop();\n-\t\t}\n-\t\treturn elementItem;\n-\t}\n-\n-\tpublic void setExceptionHandler(SchemaExceptionHandler handler)\n-\t{\n-\t\tm_errors = PreCondition.assertArgumentNotNull(handler, \"handler\");\n-\t}\n-\n-\tpublic void startDocument()\n-\t{\n-\t\tm_currentPSVI = m_documentPSVI;\n-\n-\t\t// So we know that a root object was found.\n-\t\tm_rootStartDone = false;\n-\t}\n-\n-\tpublic ModelPSVI startElement(final QName elementName, final Type localType, final Boolean explicitNil) throws AbortException\n-\t{\n-\t\tfinal ModelPSVI parentItem = m_currentPSVI;\n-\t\tm_currentPSVI = parentItem.push(elementName);\n-\n-\t\t// Figure out the appropriate decl and type for this element.\n-\t\tif (!m_rootStartDone)\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tm_currentPSVI.recoverPSVI(localType, m_errors);\n-\t\t\t}\n-\t\t\tcatch (final SchemaException e)\n-\t\t\t{\n-\t\t\t\tm_errors.error(e);\n-\t\t\t}\n-\n-\t\t\tm_rootStartDone = true;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfinal ElementDefinition declaration = parentItem.getDeclaration();\n-\t\t\tif (null != declaration)\n-\t\t\t{\n-\t\t\t\tValidationRules.checkValueConstraintAllowsElementChild(declaration, m_currentPSVI.getName(), m_currentPSVI, m_errors);\n-\t\t\t}\n-\n-\t\t\t// Validate the child element in the context of the parent and make annotation.\n-\t\t\tif (parentItem.step(elementName, m_currentPSVI, m_errors))\n-\t\t\t{\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\t// This assignment includes parts of the Validation Rule: Element Locally Valid (Element).\n-\t\t\t\t\tModelPSVI.assignPSVI(m_currentPSVI, localType, m_errors);\n-\t\t\t\t}\n-\t\t\t\tcatch (final SchemaException e)\n-\t\t\t\t{\n-\t\t\t\t\tm_errors.error(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// We got no matches, possibly because we are a descendant under a wildcard.\n-\t\t\t\tif (!parentItem.declExists())\n-\t\t\t\t{\n-\t\t\t\t\ttry\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_currentPSVI.recoverPSVI(localType, m_errors);\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (final SchemaException e)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_errors.error(e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// More of the Validation Rule: Element Locally Valid (Element).\n-\t\tm_currentPSVI.setNilled(m_currentPSVI.computeNilled(explicitNil, m_errors));\n-\n-\t\tfinal Type elementType = m_currentPSVI.getType();\n-\t\tif (elementType instanceof ComplexType)\n-\t\t{\n-\t\t\tValidationRules.checkComplexTypeNotAbstract((ComplexType)elementType, elementName, m_errors);\n-\t\t}\n-\n-\t\treturn m_currentPSVI;\n-\t}\n+final class ModelAnalyzerImpl implements ModelAnalyzer {\n+    private ModelPSVI m_currentPSVI;\n+\n+    private final ModelPSVI m_documentPSVI;\n+\n+    private SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n+\n+    // Document state flag. Have we received the document element?\n+    private boolean m_rootStartDone;\n+\n+    public ModelAnalyzerImpl(final ComponentProvider metaBridge, final ValidationCache cache) {\n+        this.m_currentPSVI =\n+            this.m_documentPSVI = new ModelPSVI(ProcessContentsMode.Strict, metaBridge, cache);\n+    }\n+\n+    public void endDocument() throws AbortException {\n+        if (!m_rootStartDone) {\n+            m_errors.error(\n+                new CvcNoRootElementException(new SrcFrozenLocation(-1, -1, -1, null, null)));\n+        }\n+    }\n+\n+    public VxPSVI endElement() throws AbortException {\n+        final ModelPSVI elementItem = m_currentPSVI;\n+        try {\n+            m_currentPSVI.checkForUnexpectedEndOfContent(m_errors);\n+        } finally {\n+            m_currentPSVI = m_currentPSVI.pop();\n+        }\n+        return elementItem;\n+    }\n+\n+    public void setExceptionHandler(SchemaExceptionHandler handler) {\n+        m_errors = PreCondition.assertArgumentNotNull(handler, \"handler\");\n+    }\n+\n+    public void startDocument() {\n+        m_currentPSVI = m_documentPSVI;\n+\n+        // So we know that a root object was found.\n+        m_rootStartDone = false;\n+    }\n+\n+    public ModelPSVI startElement(final QName elementName, final Type localType,\n+                                  final Boolean explicitNil) throws AbortException {\n+        final ModelPSVI parentItem = m_currentPSVI;\n+        m_currentPSVI = parentItem.push(elementName);\n+\n+        // Figure out the appropriate decl and type for this element.\n+        if (!m_rootStartDone) {\n+            try {\n+                m_currentPSVI.recoverPSVI(localType, m_errors);\n+            } catch (final SchemaException e) {\n+                m_errors.error(e);\n+            }\n+\n+            m_rootStartDone = true;\n+        } else {\n+            final ElementDefinition declaration = parentItem.getDeclaration();\n+            if (null != declaration) {\n+                ValidationRules\n+                    .checkValueConstraintAllowsElementChild(declaration, m_currentPSVI.getName(),\n+                        m_currentPSVI, m_errors);\n+            }\n+\n+            // Validate the child element in the context of the parent and make annotation.\n+            if (parentItem.step(elementName, m_currentPSVI, m_errors)) {\n+                try {\n+                    // This assignment includes parts of the Validation Rule: Element Locally Valid (Element).\n+                    ModelPSVI.assignPSVI(m_currentPSVI, localType, m_errors);\n+                } catch (final SchemaException e) {\n+                    m_errors.error(e);\n+                }\n+            } else {\n+                // We got no matches, possibly because we are a descendant under a wildcard.\n+                if (!parentItem.declExists()) {\n+                    try {\n+                        m_currentPSVI.recoverPSVI(localType, m_errors);\n+                    } catch (final SchemaException e) {\n+                        m_errors.error(e);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // More of the Validation Rule: Element Locally Valid (Element).\n+        m_currentPSVI.setNilled(m_currentPSVI.computeNilled(explicitNil, m_errors));\n+\n+        final Type elementType = m_currentPSVI.getType();\n+        if (elementType instanceof ComplexType) {\n+            ValidationRules\n+                .checkComplexTypeNotAbstract((ComplexType) elementType, elementName, m_errors);\n+        }\n+\n+        return m_currentPSVI;\n+    }\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/246/ModelAnalyzerImpl.java\nindex ffd9c25628e..4a830283bc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/246/ModelAnalyzerImpl.java\n@@ -33,7 +33,7 @@ import org.genxdm.xs.types.Type;\n \n final class ModelAnalyzerImpl implements ModelAnalyzer\n {\n-\tprivate ModelPSVI m_currentPSVI;\n+    private ModelPSVI m_currentPSVI;\n \tprivate final ModelPSVI m_documentPSVI;\n \tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n \n@@ -42,100 +42,100 @@ final class ModelAnalyzerImpl implements ModelAnalyzer\n \n \tpublic ModelAnalyzerImpl(final ComponentProvider metaBridge, final ValidationCache cache)\n \t{\n-\t\tthis.m_currentPSVI = this.m_documentPSVI = new ModelPSVI(ProcessContentsMode.Strict, metaBridge, cache);\n-\t}\n+    this.m_currentPSVI = this.m_documentPSVI = new ModelPSVI(ProcessContentsMode.Strict, metaBridge, cache);\n+    }\n \n \tpublic void endDocument() throws AbortException\n \t{\n-\t\tif (!m_rootStartDone)\n+    if (!m_rootStartDone)\n \t\t{\n-\t\t\tm_errors.error(new CvcNoRootElementException(new SrcFrozenLocation(-1, -1, -1, null, null)));\n-\t\t}\n-\t}\n+    m_errors.error(new CvcNoRootElementException(new SrcFrozenLocation(-1, -1, -1, null, null)));\n+    }\n+    }\n \n \tpublic VxPSVI endElement() throws AbortException\n \t{\n-\t\tfinal ModelPSVI elementItem = m_currentPSVI;\n+    final ModelPSVI elementItem = m_currentPSVI;\n \t\ttry\n \t\t{\n-\t\t\tm_currentPSVI.checkForUnexpectedEndOfContent(m_errors);\n-\t\t}\n+    m_currentPSVI.checkForUnexpectedEndOfContent(m_errors);\n+    }\n \t\tfinally\n \t\t{\n-\t\t\tm_currentPSVI = m_currentPSVI.pop();\n-\t\t}\n+    m_currentPSVI = m_currentPSVI.pop();\n+    }\n \t\treturn elementItem;\n-\t}\n+    }\n \n \tpublic void setExceptionHandler(SchemaExceptionHandler handler)\n \t{\n-\t\tm_errors = PreCondition.assertArgumentNotNull(handler, \"handler\");\n-\t}\n+    m_errors = PreCondition.assertArgumentNotNull(handler, \"handler\");\n+    }\n \n \tpublic void startDocument()\n \t{\n-\t\tm_currentPSVI = m_documentPSVI;\n+    m_currentPSVI = m_documentPSVI;\n \n \t\t// So we know that a root object was found.\n \t\tm_rootStartDone = false;\n-\t}\n+    }\n \n \tpublic ModelPSVI startElement(final QName elementName, final Type localType, final Boolean explicitNil) throws AbortException\n \t{\n-\t\tfinal ModelPSVI parentItem = m_currentPSVI;\n+    final ModelPSVI parentItem = m_currentPSVI;\n \t\tm_currentPSVI = parentItem.push(elementName);\n \n \t\t// Figure out the appropriate decl and type for this element.\n \t\tif (!m_rootStartDone)\n \t\t{\n-\t\t\ttry\n+    try\n \t\t\t{\n-\t\t\t\tm_currentPSVI.recoverPSVI(localType, m_errors);\n-\t\t\t}\n+    m_currentPSVI.recoverPSVI(localType, m_errors);\n+    }\n \t\t\tcatch (final SchemaException e)\n \t\t\t{\n-\t\t\t\tm_errors.error(e);\n-\t\t\t}\n+    m_errors.error(e);\n+    }\n \n \t\t\tm_rootStartDone = true;\n-\t\t}\n+    }\n \t\telse\n \t\t{\n-\t\t\tfinal ElementDefinition declaration = parentItem.getDeclaration();\n+    final ElementDefinition declaration = parentItem.getDeclaration();\n \t\t\tif (null != declaration)\n \t\t\t{\n-\t\t\t\tValidationRules.checkValueConstraintAllowsElementChild(declaration, m_currentPSVI.getName(), m_currentPSVI, m_errors);\n-\t\t\t}\n+    ValidationRules.checkValueConstraintAllowsElementChild(declaration, m_currentPSVI.getName(), m_currentPSVI, m_errors);\n+    }\n \n \t\t\t// Validate the child element in the context of the parent and make annotation.\n \t\t\tif (parentItem.step(elementName, m_currentPSVI, m_errors))\n \t\t\t{\n-\t\t\t\ttry\n+    try\n \t\t\t\t{\n-\t\t\t\t\t// This assignment includes parts of the Validation Rule: Element Locally Valid (Element).\n+    // This assignment includes parts of the Validation Rule: Element Locally Valid (Element).\n \t\t\t\t\tModelPSVI.assignPSVI(m_currentPSVI, localType, m_errors);\n-\t\t\t\t}\n+    }\n \t\t\t\tcatch (final SchemaException e)\n \t\t\t\t{\n-\t\t\t\t\tm_errors.error(e);\n-\t\t\t\t}\n-\t\t\t}\n+    m_errors.error(e);\n+    }\n+    }\n \t\t\telse\n \t\t\t{\n-\t\t\t\t// We got no matches, possibly because we are a descendant under a wildcard.\n+    // We got no matches, possibly because we are a descendant under a wildcard.\n \t\t\t\tif (!parentItem.declExists())\n \t\t\t\t{\n-\t\t\t\t\ttry\n+    try\n \t\t\t\t\t{\n-\t\t\t\t\t\tm_currentPSVI.recoverPSVI(localType, m_errors);\n-\t\t\t\t\t}\n+    m_currentPSVI.recoverPSVI(localType, m_errors);\n+    }\n \t\t\t\t\tcatch (final SchemaException e)\n \t\t\t\t\t{\n-\t\t\t\t\t\tm_errors.error(e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    m_errors.error(e);\n+    }\n+    }\n+    }\n+    }\n \n \t\t// More of the Validation Rule: Element Locally Valid (Element).\n \t\tm_currentPSVI.setNilled(m_currentPSVI.computeNilled(explicitNil, m_errors));\n@@ -143,9 +143,9 @@ final class ModelAnalyzerImpl implements ModelAnalyzer\n \t\tfinal Type elementType = m_currentPSVI.getType();\n \t\tif (elementType instanceof ComplexType)\n \t\t{\n-\t\t\tValidationRules.checkComplexTypeNotAbstract((ComplexType)elementType, elementName, m_errors);\n-\t\t}\n+    ValidationRules.checkComplexTypeNotAbstract((ComplexType)elementType, elementName, m_errors);\n+    }\n \n \t\treturn m_currentPSVI;\n-\t}\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/246/ModelAnalyzerImpl.java\nindex ffd9c25628e..9742a459f64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/246/ModelAnalyzerImpl.java\n@@ -16,7 +16,6 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.processor.w3c.xs.exception.cvc.CvcNoRootElementException;\n import org.genxdm.processor.w3c.xs.exception.src.SrcFrozenLocation;\n@@ -30,122 +29,122 @@ import org.genxdm.xs.exceptions.SchemaExceptionHandler;\n import org.genxdm.xs.types.ComplexType;\n import org.genxdm.xs.types.Type;\n \n-\n final class ModelAnalyzerImpl implements ModelAnalyzer\n {\n-\tprivate ModelPSVI m_currentPSVI;\n-\tprivate final ModelPSVI m_documentPSVI;\n-\tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n-\n-\t// Document state flag. Have we received the document element?\n-\tprivate boolean m_rootStartDone;\n-\n-\tpublic ModelAnalyzerImpl(final ComponentProvider metaBridge, final ValidationCache cache)\n-\t{\n-\t\tthis.m_currentPSVI = this.m_documentPSVI = new ModelPSVI(ProcessContentsMode.Strict, metaBridge, cache);\n-\t}\n-\n-\tpublic void endDocument() throws AbortException\n-\t{\n-\t\tif (!m_rootStartDone)\n-\t\t{\n-\t\t\tm_errors.error(new CvcNoRootElementException(new SrcFrozenLocation(-1, -1, -1, null, null)));\n-\t\t}\n-\t}\n-\n-\tpublic VxPSVI endElement() throws AbortException\n-\t{\n-\t\tfinal ModelPSVI elementItem = m_currentPSVI;\n-\t\ttry\n-\t\t{\n-\t\t\tm_currentPSVI.checkForUnexpectedEndOfContent(m_errors);\n-\t\t}\n-\t\tfinally\n-\t\t{\n-\t\t\tm_currentPSVI = m_currentPSVI.pop();\n-\t\t}\n-\t\treturn elementItem;\n-\t}\n-\n-\tpublic void setExceptionHandler(SchemaExceptionHandler handler)\n-\t{\n-\t\tm_errors = PreCondition.assertArgumentNotNull(handler, \"handler\");\n-\t}\n-\n-\tpublic void startDocument()\n-\t{\n-\t\tm_currentPSVI = m_documentPSVI;\n-\n-\t\t// So we know that a root object was found.\n-\t\tm_rootStartDone = false;\n-\t}\n-\n-\tpublic ModelPSVI startElement(final QName elementName, final Type localType, final Boolean explicitNil) throws AbortException\n-\t{\n-\t\tfinal ModelPSVI parentItem = m_currentPSVI;\n-\t\tm_currentPSVI = parentItem.push(elementName);\n-\n-\t\t// Figure out the appropriate decl and type for this element.\n-\t\tif (!m_rootStartDone)\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tm_currentPSVI.recoverPSVI(localType, m_errors);\n-\t\t\t}\n-\t\t\tcatch (final SchemaException e)\n-\t\t\t{\n-\t\t\t\tm_errors.error(e);\n-\t\t\t}\n-\n-\t\t\tm_rootStartDone = true;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfinal ElementDefinition declaration = parentItem.getDeclaration();\n-\t\t\tif (null != declaration)\n-\t\t\t{\n-\t\t\t\tValidationRules.checkValueConstraintAllowsElementChild(declaration, m_currentPSVI.getName(), m_currentPSVI, m_errors);\n-\t\t\t}\n-\n-\t\t\t// Validate the child element in the context of the parent and make annotation.\n-\t\t\tif (parentItem.step(elementName, m_currentPSVI, m_errors))\n-\t\t\t{\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\t// This assignment includes parts of the Validation Rule: Element Locally Valid (Element).\n-\t\t\t\t\tModelPSVI.assignPSVI(m_currentPSVI, localType, m_errors);\n-\t\t\t\t}\n-\t\t\t\tcatch (final SchemaException e)\n-\t\t\t\t{\n-\t\t\t\t\tm_errors.error(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// We got no matches, possibly because we are a descendant under a wildcard.\n-\t\t\t\tif (!parentItem.declExists())\n-\t\t\t\t{\n-\t\t\t\t\ttry\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_currentPSVI.recoverPSVI(localType, m_errors);\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (final SchemaException e)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_errors.error(e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// More of the Validation Rule: Element Locally Valid (Element).\n-\t\tm_currentPSVI.setNilled(m_currentPSVI.computeNilled(explicitNil, m_errors));\n-\n-\t\tfinal Type elementType = m_currentPSVI.getType();\n-\t\tif (elementType instanceof ComplexType)\n-\t\t{\n-\t\t\tValidationRules.checkComplexTypeNotAbstract((ComplexType)elementType, elementName, m_errors);\n-\t\t}\n-\n-\t\treturn m_currentPSVI;\n-\t}\n-}\n+    private ModelPSVI m_currentPSVI;\n+    private final ModelPSVI m_documentPSVI;\n+    private SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n+\n+    // Document state flag. Have we received the document element?\n+    private boolean m_rootStartDone;\n+\n+    public ModelAnalyzerImpl(final ComponentProvider metaBridge, final ValidationCache cache)\n+    {\n+        this.m_currentPSVI = this.m_documentPSVI = new ModelPSVI(ProcessContentsMode.Strict, metaBridge, cache);\n+    }\n+\n+    public void endDocument()\n+        throws AbortException\n+    {\n+        if (!m_rootStartDone)\n+        {\n+            m_errors.error(new CvcNoRootElementException(new SrcFrozenLocation(-1, -1, -1, null, null)));\n+        }\n+    }\n+\n+    public VxPSVI endElement()\n+        throws AbortException\n+    {\n+        final ModelPSVI elementItem = m_currentPSVI;\n+        try\n+        {\n+            m_currentPSVI.checkForUnexpectedEndOfContent(m_errors);\n+        }\n+        finally\n+        {\n+            m_currentPSVI = m_currentPSVI.pop();\n+        }\n+        return elementItem;\n+    }\n+\n+    public void setExceptionHandler(SchemaExceptionHandler handler)\n+    {\n+        m_errors = PreCondition.assertArgumentNotNull(handler, \"handler\");\n+    }\n+\n+    public void startDocument()\n+    {\n+        m_currentPSVI = m_documentPSVI;\n+\n+        // So we know that a root object was found.\n+        m_rootStartDone = false;\n+    }\n+\n+    public ModelPSVI startElement(final QName elementName, final Type localType, final Boolean explicitNil)\n+        throws AbortException\n+    {\n+        final ModelPSVI parentItem = m_currentPSVI;\n+        m_currentPSVI = parentItem.push(elementName);\n+\n+        // Figure out the appropriate decl and type for this element.\n+        if (!m_rootStartDone)\n+        {\n+            try\n+            {\n+                m_currentPSVI.recoverPSVI(localType, m_errors);\n+            }\n+            catch (final SchemaException e)\n+            {\n+                m_errors.error(e);\n+            }\n+            m_rootStartDone = true;\n+        }\n+        else\n+        {\n+            final ElementDefinition declaration = parentItem.getDeclaration();\n+            if (null != declaration)\n+            {\n+                ValidationRules.checkValueConstraintAllowsElementChild(declaration, m_currentPSVI.getName(), m_currentPSVI, m_errors);\n+            }\n+\n+            // Validate the child element in the context of the parent and make annotation.\n+            if (parentItem.step(elementName, m_currentPSVI, m_errors))\n+            {\n+                try\n+                {\n+                    // This assignment includes parts of the Validation Rule: Element Locally Valid (Element).\n+                    ModelPSVI.assignPSVI(m_currentPSVI, localType, m_errors);\n+                }\n+                catch (final SchemaException e)\n+                {\n+                    m_errors.error(e);\n+                }\n+            }\n+            else\n+            {\n+                // We got no matches, possibly because we are a descendant under a wildcard.\n+                if (!parentItem.declExists())\n+                {\n+                    try\n+                    {\n+                        m_currentPSVI.recoverPSVI(localType, m_errors);\n+                    }\n+                    catch (final SchemaException e)\n+                    {\n+                        m_errors.error(e);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // More of the Validation Rule: Element Locally Valid (Element).\n+        m_currentPSVI.setNilled(m_currentPSVI.computeNilled(explicitNil, m_errors));\n+\n+        final Type elementType = m_currentPSVI.getType();\n+        if (elementType instanceof ComplexType)\n+        {\n+            ValidationRules.checkComplexTypeNotAbstract((ComplexType)elementType, elementName, m_errors);\n+        }\n+        return m_currentPSVI;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 119
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/246/ModelAnalyzerImpl.java\nindex ffd9c25628e..3e1d703cd97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/246/ModelAnalyzerImpl.java\n@@ -33,7 +33,7 @@ import org.genxdm.xs.types.Type;\n \n final class ModelAnalyzerImpl implements ModelAnalyzer\n {\n-\tprivate ModelPSVI m_currentPSVI;\n+private ModelPSVI m_currentPSVI;\n \tprivate final ModelPSVI m_documentPSVI;\n \tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/246/ModelAnalyzerImpl.java\nindex ffd9c25628e..d3656be173c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/246/ModelAnalyzerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/246/ModelAnalyzerImpl.java\n@@ -33,7 +33,7 @@ import org.genxdm.xs.types.Type;\n \n final class ModelAnalyzerImpl implements ModelAnalyzer\n {\n-\tprivate ModelPSVI m_currentPSVI;\n+    private ModelPSVI m_currentPSVI;\n \tprivate final ModelPSVI m_documentPSVI;\n \tprivate SchemaExceptionHandler m_errors = SmExceptionThrower.SINGLETON;\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}