{
    "project_name": "neo4j-neo4j",
    "error_id": "2595",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2595/Node.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2595/Node.java\nindex b3fbca7bfba..fa661a6955f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2595/Node.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2595/Node.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import org.neo4j.annotations.api.PublicApi;\n@@ -79,7 +80,7 @@ public interface Node extends Entity\n      * node, <code>false</code> otherwise.\n      *\n      * @return <code>true</code> if there are any relationships attached to this\n-     *         node, <code>false</code> otherwise\n+     * node, <code>false</code> otherwise\n      */\n     boolean hasRelationship();\n \n@@ -91,9 +92,9 @@ public interface Node extends Entity\n      *\n      * @param types the given relationship type(s)\n      * @return all relationships of the given type(s) that are attached to this\n-     *         node\n+     * node\n      */\n-    Iterable<Relationship> getRelationships( RelationshipType... types );\n+    Iterable<Relationship> getRelationships(RelationshipType... types);\n \n     /**\n      * Returns all the relationships of any of the types in <code>types</code>\n@@ -101,12 +102,12 @@ public interface Node extends Entity\n      * If no relationships of the given types are attached to this node, an empty\n      * iterable will be returned.\n      *\n-     * @param types the given relationship type(s)\n+     * @param types     the given relationship type(s)\n      * @param direction the direction of the relationships to return.\n      * @return all relationships of the given type(s) that are attached to this\n-     *         node\n+     * node\n      */\n-    Iterable<Relationship> getRelationships( Direction direction, RelationshipType... types );\n+    Iterable<Relationship> getRelationships(Direction direction, RelationshipType... types);\n \n     /**\n      * Returns <code>true</code> if there are any relationships of any of the\n@@ -115,23 +116,23 @@ public interface Node extends Entity\n      *\n      * @param types the given relationship type(s)\n      * @return <code>true</code> if there are any relationships of any of the\n-     *         types in <code>types</code> attached to this node,\n-     *         <code>false</code> otherwise\n+     * types in <code>types</code> attached to this node,\n+     * <code>false</code> otherwise\n      */\n-    boolean hasRelationship( RelationshipType... types );\n+    boolean hasRelationship(RelationshipType... types);\n \n     /**\n      * Returns <code>true</code> if there are any relationships of any of the\n      * types in <code>types</code> attached to this node (for the given\n      * <code>direction</code>), <code>false</code> otherwise.\n      *\n-     * @param types the given relationship type(s)\n+     * @param types     the given relationship type(s)\n      * @param direction the direction to check relationships for\n      * @return <code>true</code> if there are any relationships of any of the\n-     *         types in <code>types</code> attached to this node,\n-     *         <code>false</code> otherwise\n+     * types in <code>types</code> attached to this node,\n+     * <code>false</code> otherwise\n      */\n-    boolean hasRelationship( Direction direction, RelationshipType... types );\n+    boolean hasRelationship(Direction direction, RelationshipType... types);\n \n     /**\n      * Returns all {@link Direction#OUTGOING OUTGOING} or\n@@ -144,13 +145,13 @@ public interface Node extends Entity\n      * @param dir the given direction, where <code>Direction.OUTGOING</code>\n      *            means all relationships that have this node as\n      *            {@link Relationship#getStartNode() start node} and <code>\n-     * Direction.INCOMING</code>\n+     *            Direction.INCOMING</code>\n      *            means all relationships that have this node as\n      *            {@link Relationship#getEndNode() end node}\n      * @return all relationships with the given direction that are attached to\n-     *         this node\n+     * this node\n      */\n-    Iterable<Relationship> getRelationships( Direction dir );\n+    Iterable<Relationship> getRelationships(Direction dir);\n \n     /**\n      * Returns <code>true</code> if there are any relationships in the given\n@@ -162,13 +163,13 @@ public interface Node extends Entity\n      * @param dir the given direction, where <code>Direction.OUTGOING</code>\n      *            means all relationships that have this node as\n      *            {@link Relationship#getStartNode() start node} and <code>\n-     * Direction.INCOMING</code>\n+     *            Direction.INCOMING</code>\n      *            means all relationships that have this node as\n      *            {@link Relationship#getEndNode() end node}\n      * @return <code>true</code> if there are any relationships in the given\n-     *         direction attached to this node, <code>false</code> otherwise\n+     * direction attached to this node, <code>false</code> otherwise\n      */\n-    boolean hasRelationship( Direction dir );\n+    boolean hasRelationship(Direction dir);\n \n     /**\n      * Returns the only relationship of a given type and direction that is\n@@ -192,20 +193,20 @@ public interface Node extends Entity\n      * method behaves correctly \"out of the box.\"\n      *\n      * @param type the type of the wanted relationship\n-     * @param dir the direction of the wanted relationship (where\n-     *            <code>Direction.OUTGOING</code> means a relationship that has\n-     *            this node as {@link Relationship#getStartNode() start node}\n-     *            and <code>\n-     * Direction.INCOMING</code> means a relationship that has\n-     *            this node as {@link Relationship#getEndNode() end node}) or\n-     *            {@link Direction#BOTH} if direction is irrelevant\n+     * @param dir  the direction of the wanted relationship (where\n+     *             <code>Direction.OUTGOING</code> means a relationship that has\n+     *             this node as {@link Relationship#getStartNode() start node}\n+     *             and <code>\n+     *             Direction.INCOMING</code> means a relationship that has\n+     *             this node as {@link Relationship#getEndNode() end node}) or\n+     *             {@link Direction#BOTH} if direction is irrelevant\n      * @return the single relationship matching the given type and direction if\n-     *         exactly one such relationship exists, or <code>null</code> if\n-     *         exactly zero such relationships exists\n+     * exactly one such relationship exists, or <code>null</code> if\n+     * exactly zero such relationships exists\n      * @throws RuntimeException if more than one relationship matches the given\n-     *             type and direction\n+     *                          type and direction\n      */\n-    Relationship getSingleRelationship( RelationshipType type, Direction dir );\n+    Relationship getSingleRelationship(RelationshipType type, Direction dir);\n \n     /**\n      * Creates a relationship between this node and another node. The\n@@ -217,15 +218,16 @@ public interface Node extends Entity\n      * to traversal or performance).\n      *\n      * @param otherNode the end node of the new relationship\n-     * @param type the type of the new relationship\n+     * @param type      the type of the new relationship\n      * @return the newly created relationship\n      */\n-    Relationship createRelationshipTo( Node otherNode, RelationshipType type );\n+    Relationship createRelationshipTo(Node otherNode, RelationshipType type);\n \n     /**\n      * Returns relationship types which this node has one more relationships\n      * for. If this node doesn't have any relationships an empty {@link Iterable}\n      * will be returned.\n+     *\n      * @return relationship types which this node has one more relationships for.\n      */\n     Iterable<RelationshipType> getRelationshipTypes();\n@@ -233,6 +235,7 @@ public interface Node extends Entity\n     /**\n      * Returns the number of relationships connected to this node regardless of\n      * direction or type. This operation is always O(1).\n+     *\n      * @return the number of relationships connected to this node.\n      */\n     int getDegree();\n@@ -243,7 +246,7 @@ public interface Node extends Entity\n      * @param type the type of relationships to get the degree for\n      * @return the number of relationships of a given {@code type} connected to this node.\n      */\n-    int getDegree( RelationshipType type );\n+    int getDegree(RelationshipType type);\n \n     /**\n      * Returns the number of relationships of a given {@code direction} connected to this node.\n@@ -251,18 +254,18 @@ public interface Node extends Entity\n      * @param direction the direction of the relationships\n      * @return the number of relationships of a given {@code direction} for this node.\n      */\n-    int getDegree( Direction direction );\n+    int getDegree(Direction direction);\n \n     /**\n      * Returns the number of relationships of a given {@code type} and {@code direction}\n      * connected to this node.\n      *\n-     * @param type the type of relationships to get the degree for\n+     * @param type      the type of relationships to get the degree for\n      * @param direction the direction of the relationships\n      * @return the number of relationships of a given {@code type} and {@code direction}\n      * for this node.\n      */\n-    int getDegree( RelationshipType type, Direction direction );\n+    int getDegree(RelationshipType type, Direction direction);\n \n     /**\n      * Adds a {@link Label} to this node. If this node doesn't already have\n@@ -270,7 +273,7 @@ public interface Node extends Entity\n      *\n      * @param label the label to add to this node.\n      */\n-    void addLabel( Label label );\n+    void addLabel(Label label);\n \n     /**\n      * Removes a {@link Label} from this node. If this node doesn't have this label,\n@@ -278,7 +281,7 @@ public interface Node extends Entity\n      *\n      * @param label the label to remove from this node.\n      */\n-    void removeLabel( Label label );\n+    void removeLabel(Label label);\n \n     /**\n      * Checks whether or not this node has the given label.\n@@ -286,7 +289,7 @@ public interface Node extends Entity\n      * @param label the label to check for.\n      * @return {@code true} if this node has the given label, otherwise {@code false}.\n      */\n-    boolean hasLabel( Label label );\n+    boolean hasLabel(Label label);\n \n     /**\n      * Lists all labels attached to this node. If this node has no\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}