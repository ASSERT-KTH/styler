{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4157",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "148",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "158",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4157/DynamicLoggingQueryExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4157/DynamicLoggingQueryExecutionMonitor.java\nindex e6509c925c1..c310f8e83b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4157/DynamicLoggingQueryExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4157/DynamicLoggingQueryExecutionMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query;\n \n import java.io.Closeable;\n@@ -41,181 +42,176 @@ import static org.neo4j.kernel.impl.query.QueryLogger.NO_LOG;\n \n class DynamicLoggingQueryExecutionMonitor extends LifecycleAdapter implements QueryExecutionMonitor\n {\n-    private final Config config;\n-    private final FileSystemAbstraction fileSystem;\n-    private final JobScheduler scheduler;\n-    private final Log debugLog;\n-\n-    /**\n-     * The currently configured QueryLogger.\n-     * This may be accessed concurrently by any thread, even while the logger is being reconfigured.\n-     */\n-    private volatile QueryLogger currentLog = NO_LOG;\n-\n-    // These fields are only accessed during (re-) configuration, and are protected from concurrent access\n-    // by the monitor lock on DynamicQueryLogger.\n-    private ZoneId currentLogTimeZone;\n-    private FormattedLog.Builder logBuilder;\n-    private File currentQueryLogFile;\n-    private long currentRotationThreshold;\n-    private int currentMaxArchives;\n-    private Log log;\n-    private Closeable closable;\n-\n-    DynamicLoggingQueryExecutionMonitor( Config config, FileSystemAbstraction fileSystem, JobScheduler scheduler,\n-                                         Log debugLog )\n-    {\n-        this.config = config;\n-        this.fileSystem = fileSystem;\n-        this.scheduler = scheduler;\n-        this.debugLog = debugLog;\n-    }\n-\n-    @Override\n-    public synchronized void init()\n-    {\n-        // This set of settings are currently not dynamic:\n-        currentLogTimeZone = config.get( GraphDatabaseSettings.db_timezone ).getZoneId();\n-        logBuilder = FormattedLog.withZoneId( currentLogTimeZone );\n-        currentQueryLogFile = config.get( GraphDatabaseSettings.log_queries_filename );\n-\n-        updateSettings();\n-\n-        registerDynamicSettingUpdater( GraphDatabaseSettings.log_queries );\n-        registerDynamicSettingUpdater( GraphDatabaseSettings.log_queries_threshold );\n-        registerDynamicSettingUpdater( GraphDatabaseSettings.log_queries_rotation_threshold );\n-        registerDynamicSettingUpdater( GraphDatabaseSettings.log_queries_max_archives );\n-    }\n-\n-    private <T> void registerDynamicSettingUpdater( Setting<T> setting )\n+  private final Config config;\n+  private final FileSystemAbstraction fileSystem;\n+  private final JobScheduler scheduler;\n+  private final Log debugLog;\n+\n+  /**\n+   * The currently configured QueryLogger.\n+   * This may be accessed concurrently by any thread, even while the logger is being reconfigured.\n+   */\n+  private volatile QueryLogger currentLog = NO_LOG;\n+\n+  // These fields are only accessed during (re-) configuration, and are protected from concurrent access\n+  // by the monitor lock on DynamicQueryLogger.\n+  private ZoneId currentLogTimeZone;\n+  private FormattedLog.Builder logBuilder;\n+  private File currentQueryLogFile;\n+  private long currentRotationThreshold;\n+  private int currentMaxArchives;\n+  private Log log;\n+  private Closeable closable;\n+\n+  DynamicLoggingQueryExecutionMonitor(Config config, FileSystemAbstraction fileSystem, JobScheduler scheduler,\n+                                      Log debugLog)\n+  {\n+    this.config = config;\n+    this.fileSystem = fileSystem;\n+    this.scheduler = scheduler;\n+    this.debugLog = debugLog;\n+  }\n+\n+  @Override\n+  public synchronized void init()\n+  {\n+    // This set of settings are currently not dynamic:\n+    currentLogTimeZone = config.get(GraphDatabaseSettings.db_timezone).getZoneId();\n+    logBuilder = FormattedLog.withZoneId(currentLogTimeZone);\n+    currentQueryLogFile = config.get(GraphDatabaseSettings.log_queries_filename);\n+\n+    updateSettings();\n+\n+    registerDynamicSettingUpdater(GraphDatabaseSettings.log_queries);\n+    registerDynamicSettingUpdater(GraphDatabaseSettings.log_queries_threshold);\n+    registerDynamicSettingUpdater(GraphDatabaseSettings.log_queries_rotation_threshold);\n+    registerDynamicSettingUpdater(GraphDatabaseSettings.log_queries_max_archives);\n+  }\n+\n+  private <T> void registerDynamicSettingUpdater(Setting<T> setting)\n+  {\n+    config.registerDynamicUpdateListener(setting, (a, b) -> updateSettings());\n+  }\n+\n+  private synchronized void updateSettings()\n+  {\n+    updateLogSettings();\n+    updateQueryLoggerSettings();\n+  }\n+\n+  private void updateQueryLoggerSettings()\n+  {\n+    // This method depends on any log settings having been updated before hand, via updateLogSettings.\n+    // The only dynamic settings here are log_queries, and log_queries_threshold which is read by the\n+    // ConfiguredQueryLogger constructor. We can add more in the future, though. The various content settings\n+    // are prime candidates.\n+    if (config.get(GraphDatabaseSettings.log_queries))\n     {\n-        config.registerDynamicUpdateListener( setting, ( a,b ) -> updateSettings() );\n-    }\n-\n-    private synchronized void updateSettings()\n+      currentLog = new ConfiguredQueryLogger(log, config);\n+    } else\n     {\n-        updateLogSettings();\n-        updateQueryLoggerSettings();\n+      currentLog = NO_LOG;\n     }\n-\n-    private void updateQueryLoggerSettings()\n+  }\n+\n+  private void updateLogSettings()\n+  {\n+    // The dynamic setting here is log_queries, log_queries_rotation_threshold, and log_queries_max_archives.\n+    // NOTE: We can't register this method as a settings update callback, because we don't update the `currentLog`\n+    // field in this method. Settings updates must always go via the `updateQueryLoggerSettings` method.\n+    if (config.get(GraphDatabaseSettings.log_queries))\n     {\n-        // This method depends on any log settings having been updated before hand, via updateLogSettings.\n-        // The only dynamic settings here are log_queries, and log_queries_threshold which is read by the\n-        // ConfiguredQueryLogger constructor. We can add more in the future, though. The various content settings\n-        // are prime candidates.\n-        if ( config.get( GraphDatabaseSettings.log_queries ) )\n-        {\n-            currentLog = new ConfiguredQueryLogger( log, config );\n-        }\n-        else\n-        {\n-            currentLog = NO_LOG;\n-        }\n-    }\n+      long rotationThreshold = config.get(GraphDatabaseSettings.log_queries_rotation_threshold);\n+      int maxArchives = config.get(GraphDatabaseSettings.log_queries_max_archives);\n \n-    private void updateLogSettings()\n-    {\n-        // The dynamic setting here is log_queries, log_queries_rotation_threshold, and log_queries_max_archives.\n-        // NOTE: We can't register this method as a settings update callback, because we don't update the `currentLog`\n-        // field in this method. Settings updates must always go via the `updateQueryLoggerSettings` method.\n-        if ( config.get( GraphDatabaseSettings.log_queries ) )\n-        {\n-            long rotationThreshold = config.get( GraphDatabaseSettings.log_queries_rotation_threshold );\n-            int maxArchives = config.get( GraphDatabaseSettings.log_queries_max_archives );\n-\n-            try\n-            {\n-                if ( logRotationIsEnabled( rotationThreshold ) )\n-                {\n-                    boolean needsRebuild = closable == null; // We need to rebuild the log if we currently don't have any,\n-                    needsRebuild |= currentRotationThreshold != rotationThreshold; // or if rotation threshold has changed,\n-                    needsRebuild |= currentMaxArchives != maxArchives; // or if the max archives setting has changed.\n-                    if ( needsRebuild )\n-                    {\n-                        closeCurrentLogIfAny();\n-                        buildRotatingLog( rotationThreshold, maxArchives );\n-                    }\n-                }\n-                else if ( currentRotationThreshold != rotationThreshold || closable == null )\n-                {\n-                    // We go from rotating (or uninitialised) log to non-rotating. Always rebuild.\n-                    closeCurrentLogIfAny();\n-                    buildNonRotatingLog();\n-                }\n-\n-                currentRotationThreshold = rotationThreshold;\n-                currentMaxArchives = maxArchives;\n-            }\n-            catch ( IOException exception )\n-            {\n-                debugLog.warn( \"Failed to build query log\", exception );\n-            }\n-        }\n-        else\n+      try\n+      {\n+        if (logRotationIsEnabled(rotationThreshold))\n         {\n+          boolean needsRebuild = closable == null; // We need to rebuild the log if we currently don't have any,\n+          needsRebuild |= currentRotationThreshold != rotationThreshold; // or if rotation threshold has changed,\n+          needsRebuild |= currentMaxArchives != maxArchives; // or if the max archives setting has changed.\n+          if (needsRebuild)\n+          {\n             closeCurrentLogIfAny();\n-        }\n-    }\n-\n-    private boolean logRotationIsEnabled( long threshold )\n-    {\n-        return threshold > 0;\n-    }\n-\n-    private void closeCurrentLogIfAny()\n-    {\n-        if ( closable != null )\n+            buildRotatingLog(rotationThreshold, maxArchives);\n+          }\n+        } else if (currentRotationThreshold != rotationThreshold || closable == null)\n         {\n-            try\n-            {\n-                closable.close();\n-            }\n-            catch ( IOException exception )\n-            {\n-                debugLog.warn( \"Failed to close current log: \" + closable, exception );\n-            }\n-            closable = null;\n+          // We go from rotating (or uninitialised) log to non-rotating. Always rebuild.\n+          closeCurrentLogIfAny();\n+          buildNonRotatingLog();\n         }\n-    }\n \n-    private void buildRotatingLog( long rotationThreshold, int maxArchives ) throws IOException\n+        currentRotationThreshold = rotationThreshold;\n+        currentMaxArchives = maxArchives;\n+      } catch (IOException exception)\n+      {\n+        debugLog.warn(\"Failed to build query log\", exception);\n+      }\n+    } else\n     {\n-        RotatingFileOutputStreamSupplier rotatingSupplier = new RotatingFileOutputStreamSupplier(\n-                fileSystem, currentQueryLogFile,\n-                rotationThreshold, 0, maxArchives,\n-                scheduler.executor( JobScheduler.Groups.queryLogRotation ) );\n-        log = logBuilder.toOutputStream( rotatingSupplier );\n-        closable = rotatingSupplier;\n+      closeCurrentLogIfAny();\n     }\n+  }\n \n-    private void buildNonRotatingLog() throws IOException\n-    {\n-        OutputStream logOutputStream = createOrOpenAsOutputStream( fileSystem, currentQueryLogFile, true );\n-        log = logBuilder.toOutputStream( logOutputStream );\n-        closable = logOutputStream;\n-    }\n-\n-    @Override\n-    public synchronized void shutdown()\n-    {\n-        closeCurrentLogIfAny();\n-    }\n-\n-    @Override\n-    public void startQueryExecution( ExecutingQuery query )\n-    {\n-    }\n-\n-    @Override\n-    public void endFailure( ExecutingQuery query, Throwable failure )\n-    {\n-        currentLog.failure( query, failure );\n-    }\n+  private boolean logRotationIsEnabled(long threshold)\n+  {\n+    return threshold > 0;\n+  }\n \n-    @Override\n-    public void endSuccess( ExecutingQuery query )\n+  private void closeCurrentLogIfAny()\n+  {\n+    if (closable != null)\n     {\n-        currentLog.success( query );\n+      try\n+      {\n+        closable.close();\n+      } catch (IOException exception)\n+      {\n+        debugLog.warn(\"Failed to close current log: \" + closable, exception);\n+      }\n+      closable = null;\n     }\n+  }\n+\n+  private void buildRotatingLog(long rotationThreshold, int maxArchives) throws IOException\n+  {\n+    RotatingFileOutputStreamSupplier rotatingSupplier = new RotatingFileOutputStreamSupplier(\n+        fileSystem, currentQueryLogFile,\n+        rotationThreshold, 0, maxArchives,\n+        scheduler.executor(JobScheduler.Groups.queryLogRotation));\n+    log = logBuilder.toOutputStream(rotatingSupplier);\n+    closable = rotatingSupplier;\n+  }\n+\n+  private void buildNonRotatingLog() throws IOException\n+  {\n+    OutputStream logOutputStream = createOrOpenAsOutputStream(fileSystem, currentQueryLogFile, true);\n+    log = logBuilder.toOutputStream(logOutputStream);\n+    closable = logOutputStream;\n+  }\n+\n+  @Override\n+  public synchronized void shutdown()\n+  {\n+    closeCurrentLogIfAny();\n+  }\n+\n+  @Override\n+  public void startQueryExecution(ExecutingQuery query)\n+  {\n+  }\n+\n+  @Override\n+  public void endFailure(ExecutingQuery query, Throwable failure)\n+  {\n+    currentLog.failure(query, failure);\n+  }\n+\n+  @Override\n+  public void endSuccess(ExecutingQuery query)\n+  {\n+    currentLog.success(query);\n+  }\n }\n",
            "diff_size": 246
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "162",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4157/DynamicLoggingQueryExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4157/DynamicLoggingQueryExecutionMonitor.java\nindex e6509c925c1..d0f71f65f1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4157/DynamicLoggingQueryExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4157/DynamicLoggingQueryExecutionMonitor.java\n@@ -62,9 +62,8 @@ class DynamicLoggingQueryExecutionMonitor extends LifecycleAdapter implements Qu\n     private Log log;\n     private Closeable closable;\n \n-    DynamicLoggingQueryExecutionMonitor( Config config, FileSystemAbstraction fileSystem, JobScheduler scheduler,\n-                                         Log debugLog )\n-    {\n+    DynamicLoggingQueryExecutionMonitor( Config config, FileSystemAbstraction fileSystem, JobScheduler scheduler, Log debugLog )\n+{\n         this.config = config;\n         this.fileSystem = fileSystem;\n         this.scheduler = scheduler;\n@@ -89,7 +88,7 @@ class DynamicLoggingQueryExecutionMonitor extends LifecycleAdapter implements Qu\n \n     private <T> void registerDynamicSettingUpdater( Setting<T> setting )\n     {\n-        config.registerDynamicUpdateListener( setting, ( a,b ) -> updateSettings() );\n+        config.registerDynamicUpdateListener( setting, ( a, b ) -> updateSettings() );\n     }\n \n     private synchronized void updateSettings()\n@@ -160,7 +159,7 @@ class DynamicLoggingQueryExecutionMonitor extends LifecycleAdapter implements Qu\n \n     private boolean logRotationIsEnabled( long threshold )\n     {\n-        return threshold > 0;\n+        return threshold> 0;\n     }\n \n     private void closeCurrentLogIfAny()\n@@ -175,17 +174,16 @@ class DynamicLoggingQueryExecutionMonitor extends LifecycleAdapter implements Qu\n             {\n                 debugLog.warn( \"Failed to close current log: \" + closable, exception );\n             }\n-            closable = null;\n+\n+closable = null;\n         }\n     }\n \n     private void buildRotatingLog( long rotationThreshold, int maxArchives ) throws IOException\n     {\n-        RotatingFileOutputStreamSupplier rotatingSupplier = new RotatingFileOutputStreamSupplier(\n-                fileSystem, currentQueryLogFile,\n-                rotationThreshold, 0, maxArchives,\n+        RotatingFileOutputStreamSupplier rotatingSupplier = new RotatingFileOutputStreamSupplier( fileSystem, currentQueryLogFile, rotationThreshold, 0, maxArchives,\n                 scheduler.executor( JobScheduler.Groups.queryLogRotation ) );\n-        log = logBuilder.toOutputStream( rotatingSupplier );\n+log = logBuilder.toOutputStream( rotatingSupplier );\n         closable = rotatingSupplier;\n     }\n \n@@ -218,4 +216,4 @@ class DynamicLoggingQueryExecutionMonitor extends LifecycleAdapter implements Qu\n     {\n         currentLog.success( query );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}