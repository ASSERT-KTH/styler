{
    "project_name": "wso2-attic-commons",
    "error_id": "403",
    "information": {
        "errors": [
            {
                "line": "101",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    public EventQueue getWindow(String streamId) throws InvalidEventStreamIdException {\n        for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n            if (inputStreamHandler.getStreamId().equals(streamId) && inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n                return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n            }\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/403/InputEventStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/403/InputEventStream.java\nindex 393c485692b..e5aaba22f69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/403/InputEventStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/403/InputEventStream.java\n@@ -98,8 +98,9 @@ public class InputEventStream {\n \n     public EventQueue getWindow(String streamId) throws InvalidEventStreamIdException {\n         for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n-            if (inputStreamHandler.getStreamId().equals(streamId) && inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n-                return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n+            if (inputStreamHandler.getStreamId().equals(streamId)\n+                && inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n+                 return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n             }\n         }\n         throw new InvalidEventStreamIdException(streamId + \" is not present in \" +\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/403/InputEventStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/403/InputEventStream.java\nindex 393c485692b..74964db17bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/403/InputEventStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/403/InputEventStream.java\n@@ -2,9 +2,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -32,26 +32,26 @@ import java.util.concurrent.CopyOnWriteArrayList;\n \n public class InputEventStream {\n \n-    private EventQueue eventQueue = new EventQueueImpl();\n-    // private List<EventQueue> windowQueueList = new CopyOnWriteArrayList<EventQueue>();\n-    private List<InputStreamHandler> inputStreamHandlerList = new CopyOnWriteArrayList<InputStreamHandler>();\n-    //    private volatile int windowNumber = 0;\n+  private EventQueue eventQueue = new EventQueueImpl();\n+  // private List<EventQueue> windowQueueList = new CopyOnWriteArrayList<EventQueue>();\n+  private List<InputStreamHandler> inputStreamHandlerList = new CopyOnWriteArrayList<InputStreamHandler>();\n+  //    private volatile int windowNumber = 0;\n //    private volatile long windowMinExpireTime = -1;\n //    private volatile boolean windowEventExist = false;\n //    private int windowQueueListSize; //todo\n-    private EventSink eventSink;\n+  private EventSink eventSink;\n \n-    public InputEventStream(EventSink eventSink) {\n-        this.eventSink = eventSink;\n-    }\n+  public InputEventStream(EventSink eventSink) {\n+    this.eventSink = eventSink;\n+  }\n \n-    public Event takeEvent() throws InterruptedException {\n-        return eventQueue.take();\n-    }\n+  public Event takeEvent() throws InterruptedException {\n+    return eventQueue.take();\n+  }\n \n-    public boolean removeEvent(Event event) throws InterruptedException {\n-        return eventQueue.remove(event);\n-    }\n+  public boolean removeEvent(Event event) throws InterruptedException {\n+    return eventQueue.remove(event);\n+  }\n //    public Event takeEvent() throws InterruptedException {\n //        int round = 0;\n //        while (true) {\n@@ -96,69 +96,70 @@ public class InputEventStream {\n //        }\n //    }\n \n-    public EventQueue getWindow(String streamId) throws InvalidEventStreamIdException {\n-        for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n-            if (inputStreamHandler.getStreamId().equals(streamId) && inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n-                return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n-            }\n-        }\n-        throw new InvalidEventStreamIdException(streamId + \" is not present in \" +\n-                                                eventSink.getStreamId() + \" head \");\n+  public EventQueue getWindow(String streamId) throws InvalidEventStreamIdException {\n+    for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n+      if (inputStreamHandler.getStreamId().equals(streamId) &&\n+        inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n+        return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n+      }\n     }\n+    throw new InvalidEventStreamIdException(streamId + \" is not present in \" +\n+      eventSink.getStreamId() + \" head \");\n+  }\n \n-    public void assignInputStreamHandler(InputStreamHandler inputStreamHandler) {\n+  public void assignInputStreamHandler(InputStreamHandler inputStreamHandler) {\n //        InputStreamHandler inputStreamHandler =\n-        inputStreamHandler.assignEventQueue(eventQueue);\n-        inputStreamHandlerList.add(inputStreamHandler);\n-        // return inputStreamHandler;\n-    }\n-\n-    public InputStreamHandler getQueryInputStreamHandler(String sourceStreamId) {\n-        for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n-            if (inputStreamHandler.getStreamId().equals(sourceStreamId)) {\n-                return inputStreamHandler;\n-            }\n-        }\n-        return null;\n+    inputStreamHandler.assignEventQueue(eventQueue);\n+    inputStreamHandlerList.add(inputStreamHandler);\n+    // return inputStreamHandler;\n+  }\n+\n+  public InputStreamHandler getQueryInputStreamHandler(String sourceStreamId) {\n+    for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n+      if (inputStreamHandler.getStreamId().equals(sourceStreamId)) {\n+        return inputStreamHandler;\n+      }\n     }\n+    return null;\n+  }\n \n \n-    public void removeInputStream(String streamId) {\n-\n-        for (Iterator<InputStreamHandler> iterator = inputStreamHandlerList.iterator(); iterator.hasNext(); ) {\n-            InputStreamHandler aInputStreamHandler = iterator.next();\n-            if (aInputStreamHandler.getStreamId().equals(streamId)) {\n-                if (aInputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n-                    ((AbstractWindowQueryInputStreamHandler) aInputStreamHandler).getWindow().clear();\n-                }\n-                iterator.remove();\n-                break;\n-            }\n+  public void removeInputStream(String streamId) {\n \n+    for (Iterator<InputStreamHandler> iterator = inputStreamHandlerList.iterator(); iterator.hasNext(); ) {\n+      InputStreamHandler aInputStreamHandler = iterator.next();\n+      if (aInputStreamHandler.getStreamId().equals(streamId)) {\n+        if (aInputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n+          ((AbstractWindowQueryInputStreamHandler) aInputStreamHandler).getWindow().clear();\n         }\n+        iterator.remove();\n+        break;\n+      }\n+\n     }\n+  }\n \n-    public void startRunnable(SiddhiThreadPool siddhiThreadPool) {\n-        for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n-            if (inputStreamHandler instanceof AbstractTimeWindowQueryInputHandler) {\n-                ((AbstractTimeWindowQueryInputHandler) inputStreamHandler).startRunnable(siddhiThreadPool);\n-            }\n-        }\n+  public void startRunnable(SiddhiThreadPool siddhiThreadPool) {\n+    for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n+      if (inputStreamHandler instanceof AbstractTimeWindowQueryInputHandler) {\n+        ((AbstractTimeWindowQueryInputHandler) inputStreamHandler).startRunnable(siddhiThreadPool);\n+      }\n     }\n+  }\n \n-    public void stopRunnable() throws InterruptedException {\n-        for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n+  public void stopRunnable() throws InterruptedException {\n+    for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n //            if (inputStreamHandler instanceof AbstractTimeWindowQueryInputHandler) {\n-                inputStreamHandler.put(SiddhiManager.generateKillEvent());\n+      inputStreamHandler.put(SiddhiManager.generateKillEvent());\n //            }\n-        }\n     }\n+  }\n \n-    public void resetRunnable() throws InterruptedException {\n-        for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n+  public void resetRunnable() throws InterruptedException {\n+    for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n //            if (inputStreamHandler instanceof AbstractTimeWindowQueryInputHandler) {\n-                inputStreamHandler.put(SiddhiManager.generateResetEvent());\n+      inputStreamHandler.put(SiddhiManager.generateResetEvent());\n //            }\n-        }\n     }\n+  }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/403/InputEventStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/403/InputEventStream.java\nindex 393c485692b..e5aaba22f69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/403/InputEventStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/403/InputEventStream.java\n@@ -98,8 +98,9 @@ public class InputEventStream {\n \n     public EventQueue getWindow(String streamId) throws InvalidEventStreamIdException {\n         for (InputStreamHandler inputStreamHandler : inputStreamHandlerList) {\n-            if (inputStreamHandler.getStreamId().equals(streamId) && inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n-                return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n+            if (inputStreamHandler.getStreamId().equals(streamId)\n+                && inputStreamHandler instanceof AbstractWindowQueryInputStreamHandler) {\n+                 return ((AbstractWindowQueryInputStreamHandler) inputStreamHandler).getWindow();\n             }\n         }\n         throw new InvalidEventStreamIdException(streamId + \" is not present in \" +\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}