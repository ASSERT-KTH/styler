{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3326",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3326/BatchRelationshipIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3326/BatchRelationshipIterable.java\nindex 1aae8e546e8..f3ee376b3a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3326/BatchRelationshipIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3326/BatchRelationshipIterable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.batchinsert.internal;\n \n import java.util.Iterator;\n@@ -41,50 +42,50 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n abstract class BatchRelationshipIterable<T> implements Iterable<T>\n {\n-    private final StoreNodeRelationshipCursor relationshipCursor;\n+  private final StoreNodeRelationshipCursor relationshipCursor;\n \n-    BatchRelationshipIterable( NeoStores neoStores, long nodeId, RecordCursors cursors )\n-    {\n-        RelationshipStore relationshipStore = neoStores.getRelationshipStore();\n-        RecordStore<RelationshipGroupRecord> relationshipGroupStore = neoStores.getRelationshipGroupStore();\n-        RelationshipRecord relationshipRecord = relationshipStore.newRecord();\n-        RelationshipGroupRecord relationshipGroupRecord = relationshipGroupStore.newRecord();\n-        this.relationshipCursor = new StoreNodeRelationshipCursor( relationshipRecord, relationshipGroupRecord,\n-                cursor -> {}, cursors, NO_LOCK_SERVICE );\n+  BatchRelationshipIterable(NeoStores neoStores, long nodeId, RecordCursors cursors)\n+  {\n+    RelationshipStore relationshipStore = neoStores.getRelationshipStore();\n+    RecordStore<RelationshipGroupRecord> relationshipGroupStore = neoStores.getRelationshipGroupStore();\n+    RelationshipRecord relationshipRecord = relationshipStore.newRecord();\n+    RelationshipGroupRecord relationshipGroupRecord = relationshipGroupStore.newRecord();\n+    this.relationshipCursor = new StoreNodeRelationshipCursor(relationshipRecord, relationshipGroupRecord,\n+        cursor -> {\n+        }, cursors, NO_LOCK_SERVICE);\n \n-        // TODO There's an opportunity to reuse lots of instances created here, but this isn't a\n-        // critical path instance so perhaps not necessary a.t.m.\n-        try\n-        {\n-            NodeStore nodeStore = neoStores.getNodeStore();\n-            NodeRecord nodeRecord = nodeStore.getRecord( nodeId, nodeStore.newRecord(), NORMAL );\n-            relationshipCursor\n-                    .init( nodeRecord.isDense(), nodeRecord.getNextRel(), nodeId, Direction.BOTH, ALWAYS_TRUE_INT );\n-        }\n-        catch ( InvalidRecordException e )\n-        {\n-            throw new NotFoundException( \"Node \" + nodeId + \" not found\" );\n-        }\n+    // TODO There's an opportunity to reuse lots of instances created here, but this isn't a\n+    // critical path instance so perhaps not necessary a.t.m.\n+    try\n+    {\n+      NodeStore nodeStore = neoStores.getNodeStore();\n+      NodeRecord nodeRecord = nodeStore.getRecord(nodeId, nodeStore.newRecord(), NORMAL);\n+      relationshipCursor\n+          .init(nodeRecord.isDense(), nodeRecord.getNextRel(), nodeId, Direction.BOTH, ALWAYS_TRUE_INT);\n+    } catch (InvalidRecordException e)\n+    {\n+      throw new NotFoundException(\"Node \" + nodeId + \" not found\");\n     }\n+  }\n \n-    @Override\n-    public Iterator<T> iterator()\n+  @Override\n+  public Iterator<T> iterator()\n+  {\n+    return new PrefetchingIterator<T>()\n     {\n-        return new PrefetchingIterator<T>()\n+      @Override\n+      protected T fetchNextOrNull()\n+      {\n+        if (!relationshipCursor.next())\n         {\n-            @Override\n-            protected T fetchNextOrNull()\n-            {\n-                if ( !relationshipCursor.next() )\n-                {\n-                    return null;\n-                }\n+          return null;\n+        }\n \n-                return nextFrom( relationshipCursor.id(), relationshipCursor.type(),\n-                        relationshipCursor.startNode(), relationshipCursor.endNode() );\n-            }\n-        };\n-    }\n+        return nextFrom(relationshipCursor.id(), relationshipCursor.type(),\n+            relationshipCursor.startNode(), relationshipCursor.endNode());\n+      }\n+    };\n+  }\n \n-    protected abstract T nextFrom( long relId, int type, long startNode, long endNode );\n+  protected abstract T nextFrom(long relId, int type, long startNode, long endNode);\n }\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3326/BatchRelationshipIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3326/BatchRelationshipIterable.java\nindex 1aae8e546e8..4f39fb04a57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3326/BatchRelationshipIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3326/BatchRelationshipIterable.java\n@@ -50,17 +50,16 @@ abstract class BatchRelationshipIterable<T> implements Iterable<T>\n         RelationshipRecord relationshipRecord = relationshipStore.newRecord();\n         RelationshipGroupRecord relationshipGroupRecord = relationshipGroupStore.newRecord();\n         this.relationshipCursor = new StoreNodeRelationshipCursor( relationshipRecord, relationshipGroupRecord,\n-                cursor -> {}, cursors, NO_LOCK_SERVICE );\n-\n-        // TODO There's an opportunity to reuse lots of instances created here, but this isn't a\n+                cursor -> {\n+}, cursors, NO_LOCK_SERVICE );\n+    // TODO There's an opportunity to reuse lots of instances created here, but this isn't a\n         // critical path instance so perhaps not necessary a.t.m.\n         try\n         {\n             NodeStore nodeStore = neoStores.getNodeStore();\n             NodeRecord nodeRecord = nodeStore.getRecord( nodeId, nodeStore.newRecord(), NORMAL );\n-            relationshipCursor\n-                    .init( nodeRecord.isDense(), nodeRecord.getNextRel(), nodeId, Direction.BOTH, ALWAYS_TRUE_INT );\n-        }\n+            relationshipCursor.init( nodeRecord.isDense(), nodeRecord.getNextRel(), nodeId, Direction.BOTH, ALWAYS_TRUE_INT );\n+    }\n         catch ( InvalidRecordException e )\n         {\n             throw new NotFoundException( \"Node \" + nodeId + \" not found\" );\n@@ -80,11 +79,10 @@ abstract class BatchRelationshipIterable<T> implements Iterable<T>\n                     return null;\n                 }\n \n-                return nextFrom( relationshipCursor.id(), relationshipCursor.type(),\n-                        relationshipCursor.startNode(), relationshipCursor.endNode() );\n-            }\n+                return nextFrom( relationshipCursor.id(), relationshipCursor.type(), relationshipCursor.startNode(), relationshipCursor.endNode() );\n+    }\n         };\n     }\n \n     protected abstract T nextFrom( long relId, int type, long startNode, long endNode );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}