{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3972",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "75",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3972/ServerPoliciesPlugin.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3972/ServerPoliciesPlugin.java\nindex 40f44d66d37..a2163dd314a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3972/ServerPoliciesPlugin.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3972/ServerPoliciesPlugin.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.routing.load_balancing.plugins.server_policies;\n \n import java.util.List;\n@@ -51,119 +52,116 @@ import static org.neo4j.causalclustering.routing.load_balancing.plugins.server_p\n /**\n  * The server policies plugin defines policies on the server-side which\n  * can be bound to by a client by supplying a appropriately formed context.\n- *\n+ * <p>\n  * An example would be to define different policies for different regions.\n  */\n-@Service.Implementation( LoadBalancingPlugin.class )\n+@Service.Implementation(LoadBalancingPlugin.class)\n public class ServerPoliciesPlugin implements LoadBalancingPlugin\n {\n-    public static final String PLUGIN_NAME = \"server_policies\";\n-\n-    private TopologyService topologyService;\n-    private LeaderLocator leaderLocator;\n-    private Long timeToLive;\n-    private boolean allowReadsOnFollowers;\n-    private Policies policies;\n-\n-    @Override\n-    public void validate( Config config, Log log ) throws InvalidSettingException\n+  public static final String PLUGIN_NAME = \"server_policies\";\n+\n+  private TopologyService topologyService;\n+  private LeaderLocator leaderLocator;\n+  private Long timeToLive;\n+  private boolean allowReadsOnFollowers;\n+  private Policies policies;\n+\n+  @Override\n+  public void validate(Config config, Log log) throws InvalidSettingException\n+  {\n+    try\n     {\n-        try\n-        {\n-            load( config, PLUGIN_NAME, log );\n-        }\n-        catch ( InvalidFilterSpecification e )\n-        {\n-            throw new InvalidSettingException( \"Invalid filter specification\", e );\n-        }\n-    }\n-\n-    @Override\n-    public void init( TopologyService topologyService, LeaderLocator leaderLocator,\n-            LogProvider logProvider, Config config ) throws InvalidFilterSpecification\n+      load(config, PLUGIN_NAME, log);\n+    } catch (InvalidFilterSpecification e)\n     {\n-        this.topologyService = topologyService;\n-        this.leaderLocator = leaderLocator;\n-        this.timeToLive = config.get( CausalClusteringSettings.cluster_routing_ttl ).toMillis();\n-        this.allowReadsOnFollowers = config.get( CausalClusteringSettings.cluster_allow_reads_on_followers );\n-        this.policies = load( config, PLUGIN_NAME, logProvider.getLog( getClass() ) );\n+      throw new InvalidSettingException(\"Invalid filter specification\", e);\n     }\n-\n-    @Override\n-    public String pluginName()\n+  }\n+\n+  @Override\n+  public void init(TopologyService topologyService, LeaderLocator leaderLocator,\n+                   LogProvider logProvider, Config config) throws InvalidFilterSpecification\n+  {\n+    this.topologyService = topologyService;\n+    this.leaderLocator = leaderLocator;\n+    this.timeToLive = config.get(CausalClusteringSettings.cluster_routing_ttl).toMillis();\n+    this.allowReadsOnFollowers = config.get(CausalClusteringSettings.cluster_allow_reads_on_followers);\n+    this.policies = load(config, PLUGIN_NAME, logProvider.getLog(getClass()));\n+  }\n+\n+  @Override\n+  public String pluginName()\n+  {\n+    return PLUGIN_NAME;\n+  }\n+\n+  @Override\n+  public Result run(Map<String, String> context) throws ProcedureException\n+  {\n+    Policy policy = policies.selectFor(context);\n+\n+    CoreTopology coreTopology = topologyService.localCoreServers();\n+    ReadReplicaTopology rrTopology = topologyService.localReadReplicas();\n+\n+    return new LoadBalancingResult(routeEndpoints(coreTopology), writeEndpoints(coreTopology),\n+        readEndpoints(coreTopology, rrTopology, policy), timeToLive);\n+  }\n+\n+  private List<Endpoint> routeEndpoints(CoreTopology cores)\n+  {\n+    return cores.members().values().stream().map(extractBoltAddress())\n+        .map(Endpoint::route).collect(Collectors.toList());\n+  }\n+\n+  private List<Endpoint> writeEndpoints(CoreTopology cores)\n+  {\n+\n+    MemberId leader;\n+    try\n+    {\n+      leader = leaderLocator.getLeader();\n+    } catch (NoLeaderFoundException e)\n     {\n-        return PLUGIN_NAME;\n+      return emptyList();\n     }\n \n-    @Override\n-    public Result run( Map<String,String> context ) throws ProcedureException\n-    {\n-        Policy policy = policies.selectFor( context );\n+    Optional<Endpoint> endPoint = cores.find(leader)\n+        .map(extractBoltAddress())\n+        .map(Endpoint::write);\n \n-        CoreTopology coreTopology = topologyService.localCoreServers();\n-        ReadReplicaTopology rrTopology = topologyService.localReadReplicas();\n+    return asList(endPoint);\n+  }\n \n-        return new LoadBalancingResult( routeEndpoints( coreTopology ), writeEndpoints( coreTopology ),\n-                readEndpoints( coreTopology, rrTopology, policy ), timeToLive );\n-    }\n+  private List<Endpoint> readEndpoints(CoreTopology coreTopology, ReadReplicaTopology rrTopology, Policy policy)\n+  {\n \n-    private List<Endpoint> routeEndpoints( CoreTopology cores )\n-    {\n-        return cores.members().values().stream().map( extractBoltAddress() )\n-                .map( Endpoint::route ).collect( Collectors.toList() );\n-    }\n+    Set<ServerInfo> possibleReaders = rrTopology.members().entrySet().stream()\n+        .map(entry -> new ServerInfo(entry.getValue().connectors().boltAddress(), entry.getKey(),\n+            entry.getValue().groups()))\n+        .collect(Collectors.toSet());\n \n-    private List<Endpoint> writeEndpoints( CoreTopology cores )\n+    if (allowReadsOnFollowers || possibleReaders.size() == 0)\n     {\n-\n-        MemberId leader;\n-        try\n-        {\n-            leader = leaderLocator.getLeader();\n-        }\n-        catch ( NoLeaderFoundException e )\n-        {\n-            return emptyList();\n-        }\n-\n-        Optional<Endpoint> endPoint = cores.find( leader )\n-                .map( extractBoltAddress() )\n-                .map( Endpoint::write );\n-\n-        return asList( endPoint );\n+      Set<MemberId> validCores = coreTopology.members().keySet();\n+      try\n+      {\n+        MemberId leader = leaderLocator.getLeader();\n+        validCores = validCores.stream().filter(memberId -> !memberId.equals(leader)).collect(Collectors.toSet());\n+      } catch (NoLeaderFoundException ignored)\n+      {\n+        // we might end up using the leader for reading during this ttl, should be fine in general\n+      }\n+\n+      for (MemberId validCore : validCores)\n+      {\n+        Optional<CoreServerInfo> coreServerInfo = coreTopology.find(validCore);\n+        coreServerInfo.ifPresent(\n+            coreServerInfo1 -> possibleReaders.add(\n+                new ServerInfo(coreServerInfo1.connectors().boltAddress(), validCore, coreServerInfo1.groups())));\n+      }\n     }\n \n-    private List<Endpoint> readEndpoints( CoreTopology coreTopology, ReadReplicaTopology rrTopology, Policy policy )\n-    {\n-\n-        Set<ServerInfo> possibleReaders = rrTopology.members().entrySet().stream()\n-                .map( entry -> new ServerInfo( entry.getValue().connectors().boltAddress(), entry.getKey(),\n-                        entry.getValue().groups() ) )\n-                .collect( Collectors.toSet() );\n-\n-        if ( allowReadsOnFollowers || possibleReaders.size() == 0 )\n-        {\n-            Set<MemberId> validCores = coreTopology.members().keySet();\n-            try\n-            {\n-                MemberId leader = leaderLocator.getLeader();\n-                validCores = validCores.stream().filter( memberId -> !memberId.equals( leader ) ).collect( Collectors.toSet() );\n-            }\n-            catch ( NoLeaderFoundException ignored )\n-            {\n-                // we might end up using the leader for reading during this ttl, should be fine in general\n-            }\n-\n-            for ( MemberId validCore : validCores )\n-            {\n-                Optional<CoreServerInfo> coreServerInfo = coreTopology.find( validCore );\n-                coreServerInfo.ifPresent(\n-                        coreServerInfo1 -> possibleReaders.add(\n-                                new ServerInfo( coreServerInfo1.connectors().boltAddress(), validCore, coreServerInfo1.groups() ) ) );\n-            }\n-        }\n-\n-        Set<ServerInfo> readers = policy.apply( possibleReaders );\n-        return readers.stream().map( r -> Endpoint.read( r.boltAddress() ) ).collect( Collectors.toList() );\n-    }\n+    Set<ServerInfo> readers = policy.apply(possibleReaders);\n+    return readers.stream().map(r -> Endpoint.read(r.boltAddress())).collect(Collectors.toList());\n+  }\n }\n",
            "diff_size": 144
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3972/ServerPoliciesPlugin.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3972/ServerPoliciesPlugin.java\nindex 40f44d66d37..448f81b9940 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3972/ServerPoliciesPlugin.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3972/ServerPoliciesPlugin.java\n@@ -81,7 +81,7 @@ public class ServerPoliciesPlugin implements LoadBalancingPlugin\n     @Override\n     public void init( TopologyService topologyService, LeaderLocator leaderLocator,\n             LogProvider logProvider, Config config ) throws InvalidFilterSpecification\n-    {\n+{\n         this.topologyService = topologyService;\n         this.leaderLocator = leaderLocator;\n         this.timeToLive = config.get( CausalClusteringSettings.cluster_routing_ttl ).toMillis();\n@@ -99,24 +99,19 @@ public class ServerPoliciesPlugin implements LoadBalancingPlugin\n     public Result run( Map<String,String> context ) throws ProcedureException\n     {\n         Policy policy = policies.selectFor( context );\n-\n-        CoreTopology coreTopology = topologyService.localCoreServers();\n+CoreTopology coreTopology = topologyService.localCoreServers();\n         ReadReplicaTopology rrTopology = topologyService.localReadReplicas();\n-\n-        return new LoadBalancingResult( routeEndpoints( coreTopology ), writeEndpoints( coreTopology ),\n-                readEndpoints( coreTopology, rrTopology, policy ), timeToLive );\n+return new LoadBalancingResult( routeEndpoints( coreTopology ), writeEndpoints( coreTopology ), readEndpoints( coreTopology, rrTopology, policy ), timeToLive );\n     }\n \n     private List<Endpoint> routeEndpoints( CoreTopology cores )\n     {\n-        return cores.members().values().stream().map( extractBoltAddress() )\n-                .map( Endpoint::route ).collect( Collectors.toList() );\n+        return cores.members().values().stream().map( extractBoltAddress() ).map( Endpoint::route ).collect( Collectors.toList() );\n     }\n \n     private List<Endpoint> writeEndpoints( CoreTopology cores )\n     {\n-\n-        MemberId leader;\n+    MemberId leader;\n         try\n         {\n             leader = leaderLocator.getLeader();\n@@ -126,22 +121,14 @@ public class ServerPoliciesPlugin implements LoadBalancingPlugin\n             return emptyList();\n         }\n \n-        Optional<Endpoint> endPoint = cores.find( leader )\n-                .map( extractBoltAddress() )\n-                .map( Endpoint::write );\n-\n-        return asList( endPoint );\n+        Optional<Endpoint> endPoint = cores.find( leader ).map( extractBoltAddress() ).map( Endpoint::write );\n+return asList( endPoint );\n     }\n \n     private List<Endpoint> readEndpoints( CoreTopology coreTopology, ReadReplicaTopology rrTopology, Policy policy )\n     {\n-\n-        Set<ServerInfo> possibleReaders = rrTopology.members().entrySet().stream()\n-                .map( entry -> new ServerInfo( entry.getValue().connectors().boltAddress(), entry.getKey(),\n-                        entry.getValue().groups() ) )\n-                .collect( Collectors.toSet() );\n-\n-        if ( allowReadsOnFollowers || possibleReaders.size() == 0 )\n+    Set<ServerInfo> possibleReaders = rrTopology.members().entrySet().stream().map( entry -> new ServerInfo( entry.getValue().connectors().boltAddress(), entry.getKey(), entry.getValue().groups() ) ).collect( Collectors.toSet() );\n+if ( allowReadsOnFollowers || possibleReaders.size() == 0 )\n         {\n             Set<MemberId> validCores = coreTopology.members().keySet();\n             try\n@@ -157,13 +144,11 @@ public class ServerPoliciesPlugin implements LoadBalancingPlugin\n             for ( MemberId validCore : validCores )\n             {\n                 Optional<CoreServerInfo> coreServerInfo = coreTopology.find( validCore );\n-                coreServerInfo.ifPresent(\n-                        coreServerInfo1 -> possibleReaders.add(\n-                                new ServerInfo( coreServerInfo1.connectors().boltAddress(), validCore, coreServerInfo1.groups() ) ) );\n-            }\n+                coreServerInfo.ifPresent( coreServerInfo1 -> possibleReaders.add( new ServerInfo( coreServerInfo1.connectors().boltAddress(), validCore, coreServerInfo1.groups() ) ) );\n+    }\n         }\n \n         Set<ServerInfo> readers = policy.apply( possibleReaders );\n         return readers.stream().map( r -> Endpoint.read( r.boltAddress() ) ).collect( Collectors.toList() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}