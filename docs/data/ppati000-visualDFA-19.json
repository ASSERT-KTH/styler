{
    "project_name": "ppati000-visualDFA",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "92",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        BlockState<ConstantFoldingElement> defaultState = new BlockState<ConstantFoldingElement>(defaultIn, defaultIn);\n\n        Map<Block, BlockState<ConstantFoldingElement>> initialMap = new HashMap<Block, BlockState<ConstantFoldingElement>>();\n\n        for (Block b : blocks) {\n            if (b == head) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/19/ConstantFoldingInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/19/ConstantFoldingInitializer.java\nindex d968efaf49b..6ee93c1efc4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/19/ConstantFoldingInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/19/ConstantFoldingInitializer.java\n@@ -26,80 +26,79 @@ import soot.util.Chain;\n /**\n  * @author Nils Jessen\n  * @author Sebastian Rauch\n- * \n- *         A {@code ConstantFoldingTransition} performs the initialization for a {@code ConstantFoldingAnalysis}.\n+ * <p>\n+ * A {@code ConstantFoldingTransition} performs the initialization for a {@code ConstantFoldingAnalysis}.\n  */\n public class ConstantFoldingInitializer implements Initializer<ConstantFoldingElement> {\n \n-    private SimpleBlockGraph blockGraph;\n+  private SimpleBlockGraph blockGraph;\n+\n+  /**\n+   * Creates a {@code ConstantFoldingInitializer} for the given {@code SimpleBlockGraph}.\n+   *\n+   * @param blockGraph the {@code SimpleBlockGraph} the analysis to initialize is executed on\n+   */\n+  public ConstantFoldingInitializer(SimpleBlockGraph blockGraph) {\n+    this.blockGraph = blockGraph;\n+  }\n+\n+  @Override\n+  public Map<Block, BlockState<ConstantFoldingElement>> getInitialStates() {\n+    List<Block> heads = blockGraph.getHeads();\n+    if (heads.size() < 1) {\n+      throw new IllegalStateException(\"no entry point found\");\n+    } else if (heads.size() > 1) {\n+      throw new IllegalStateException(\"multiply entry points found\");\n+    }\n \n-    /**\n-     * Creates a {@code ConstantFoldingInitializer} for the given {@code SimpleBlockGraph}.\n-     * \n-     * @param blockGraph\n-     *        the {@code SimpleBlockGraph} the analysis to initialize is executed on\n-     */\n-    public ConstantFoldingInitializer(SimpleBlockGraph blockGraph) {\n-        this.blockGraph = blockGraph;\n+    Chain<Local> locals = blockGraph.getBody().getLocals();\n+\n+    Map<JimpleLocal, ConstantFoldingElement.Value> initialBottomMap = new TreeMap<>(\n+        ConstantFoldingElement.COMPARATOR);\n+    Map<JimpleLocal, ConstantFoldingElement.Value> initialHeadMap = new TreeMap<>(\n+        ConstantFoldingElement.COMPARATOR);\n+\n+    ConstantFoldingElement.Value nullInt = new ConstantFoldingElement.Value(IntConstant.v(0));\n+    ConstantFoldingElement.Value nullLong = new ConstantFoldingElement.Value(LongConstant.v(0));\n+\n+    for (Local l : locals) {\n+      if (!(l instanceof JimpleLocal)) {\n+        throw new IllegalStateException(\"no jimple local\");\n+      }\n+      Type t = l.getType();\n+      if (!(t instanceof PrimType)) {\n+        continue;\n+      }\n+      if (t instanceof BooleanType || t instanceof ByteType || t instanceof CharType || t instanceof ShortType\n+          || t instanceof IntType) {\n+        initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n+        initialHeadMap.put((JimpleLocal) l, nullInt);\n+      } else if (t instanceof LongType) {\n+        initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n+        initialHeadMap.put((JimpleLocal) l, nullLong);\n+      }\n     }\n \n-    @Override\n-    public Map<Block, BlockState<ConstantFoldingElement>> getInitialStates() {\n-        List<Block> heads = blockGraph.getHeads();\n-        if (heads.size() < 1) {\n-            throw new IllegalStateException(\"no entry point found\");\n-        } else if (heads.size() > 1) {\n-            throw new IllegalStateException(\"multiply entry points found\");\n-        }\n-\n-        Chain<Local> locals = blockGraph.getBody().getLocals();\n-\n-        Map<JimpleLocal, ConstantFoldingElement.Value> initialBottomMap = new TreeMap<>(\n-                ConstantFoldingElement.COMPARATOR);\n-        Map<JimpleLocal, ConstantFoldingElement.Value> initialHeadMap = new TreeMap<>(\n-                ConstantFoldingElement.COMPARATOR);\n-\n-        ConstantFoldingElement.Value nullInt = new ConstantFoldingElement.Value(IntConstant.v(0));\n-        ConstantFoldingElement.Value nullLong = new ConstantFoldingElement.Value(LongConstant.v(0));\n-\n-        for (Local l : locals) {\n-            if (!(l instanceof JimpleLocal)) {\n-                throw new IllegalStateException(\"no jimple local\");\n-            }\n-            Type t = l.getType();\n-            if (!(t instanceof PrimType)) {\n-                continue;\n-            }\n-            if (t instanceof BooleanType || t instanceof ByteType || t instanceof CharType || t instanceof ShortType\n-                    || t instanceof IntType) {\n-                initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n-                initialHeadMap.put((JimpleLocal) l, nullInt);\n-            } else if (t instanceof LongType) {\n-                initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n-                initialHeadMap.put((JimpleLocal) l, nullLong);\n-            }\n-        }\n-\n-        Block head = heads.get(0);\n-        List<Block> blocks = blockGraph.getBlocks();\n-\n-        ConstantFoldingElement headIn = new ConstantFoldingElement(initialHeadMap);\n-        ConstantFoldingElement defaultIn = new ConstantFoldingElement(initialBottomMap);\n-\n-        BlockState<ConstantFoldingElement> headState = new BlockState<ConstantFoldingElement>(headIn, defaultIn);\n-        BlockState<ConstantFoldingElement> defaultState = new BlockState<ConstantFoldingElement>(defaultIn, defaultIn);\n-\n-        Map<Block, BlockState<ConstantFoldingElement>> initialMap = new HashMap<Block, BlockState<ConstantFoldingElement>>();\n-\n-        for (Block b : blocks) {\n-            if (b == head) {\n-                initialMap.put(b, headState);\n-            } else {\n-                initialMap.put(b, defaultState);\n-            }\n-        }\n-\n-        return initialMap;\n+    Block head = heads.get(0);\n+    List<Block> blocks = blockGraph.getBlocks();\n+\n+    ConstantFoldingElement headIn = new ConstantFoldingElement(initialHeadMap);\n+    ConstantFoldingElement defaultIn = new ConstantFoldingElement(initialBottomMap);\n+\n+    BlockState<ConstantFoldingElement> headState = new BlockState<ConstantFoldingElement>(headIn, defaultIn);\n+    BlockState<ConstantFoldingElement> defaultState = new BlockState<ConstantFoldingElement>(defaultIn, defaultIn);\n+\n+    Map<Block, BlockState<ConstantFoldingElement>> initialMap = new HashMap<Block, BlockState<ConstantFoldingElement>>();\n+\n+    for (Block b : blocks) {\n+      if (b == head) {\n+        initialMap.put(b, headState);\n+      } else {\n+        initialMap.put(b, defaultState);\n+      }\n     }\n \n+    return initialMap;\n+  }\n+\n }\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "column": "105",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/19/ConstantFoldingInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/19/ConstantFoldingInitializer.java\nindex d968efaf49b..5bee7991bde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/19/ConstantFoldingInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/19/ConstantFoldingInitializer.java\n@@ -54,12 +54,10 @@ public class ConstantFoldingInitializer implements Initializer<ConstantFoldingEl\n \n         Chain<Local> locals = blockGraph.getBody().getLocals();\n \n-        Map<JimpleLocal, ConstantFoldingElement.Value> initialBottomMap = new TreeMap<>(\n-                ConstantFoldingElement.COMPARATOR);\n-        Map<JimpleLocal, ConstantFoldingElement.Value> initialHeadMap = new TreeMap<>(\n-                ConstantFoldingElement.COMPARATOR);\n+        Map<JimpleLocal, ConstantFoldingElement.Value> initialBottomMap = new TreeMap<>(ConstantFoldingElement.COMPARATOR);\n \n-        ConstantFoldingElement.Value nullInt = new ConstantFoldingElement.Value(IntConstant.v(0));\n+Map<JimpleLocal, ConstantFoldingElement.Value> initialHeadMap = new TreeMap<>(ConstantFoldingElement.COMPARATOR);\n+ConstantFoldingElement.Value nullInt = new ConstantFoldingElement.Value(IntConstant.v(0));\n         ConstantFoldingElement.Value nullLong = new ConstantFoldingElement.Value(LongConstant.v(0));\n \n         for (Local l : locals) {\n@@ -70,8 +68,8 @@ public class ConstantFoldingInitializer implements Initializer<ConstantFoldingEl\n             if (!(t instanceof PrimType)) {\n                 continue;\n             }\n-            if (t instanceof BooleanType || t instanceof ByteType || t instanceof CharType || t instanceof ShortType\n-                    || t instanceof IntType) {\n+\n+if (t instanceof BooleanType || t instanceof ByteType || t instanceof CharType || t instanceof ShortType|| t instanceof IntType) {\n                 initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n                 initialHeadMap.put((JimpleLocal) l, nullInt);\n             } else if (t instanceof LongType) {\n@@ -102,4 +100,4 @@ public class ConstantFoldingInitializer implements Initializer<ConstantFoldingEl\n         return initialMap;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "column": "11",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "column": "76",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "67",
                    "column": "77",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "column": "15",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "40",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "64",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "88",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "113",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "column": "15",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/19/ConstantFoldingInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/19/ConstantFoldingInitializer.java\nindex d968efaf49b..5ff303ccd56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/19/ConstantFoldingInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/19/ConstantFoldingInitializer.java\n@@ -4,7 +4,6 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n-\n import dfa.framework.BlockState;\n import dfa.framework.Initializer;\n import dfa.framework.SimpleBlockGraph;\n@@ -29,6 +28,8 @@ import soot.util.Chain;\n  * \n  *         A {@code ConstantFoldingTransition} performs the initialization for a {@code ConstantFoldingAnalysis}.\n  */\n+\n+\n public class ConstantFoldingInitializer implements Initializer<ConstantFoldingElement> {\n \n     private SimpleBlockGraph blockGraph;\n@@ -39,6 +40,8 @@ public class ConstantFoldingInitializer implements Initializer<ConstantFoldingEl\n      * @param blockGraph\n      *        the {@code SimpleBlockGraph} the analysis to initialize is executed on\n      */\n+\n+\n     public ConstantFoldingInitializer(SimpleBlockGraph blockGraph) {\n         this.blockGraph = blockGraph;\n     }\n@@ -46,55 +49,60 @@ public class ConstantFoldingInitializer implements Initializer<ConstantFoldingEl\n     @Override\n     public Map<Block, BlockState<ConstantFoldingElement>> getInitialStates() {\n         List<Block> heads = blockGraph.getHeads();\n-        if (heads.size() < 1) {\n+        if(heads.size() < 1) {\n             throw new IllegalStateException(\"no entry point found\");\n-        } else if (heads.size() > 1) {\n-            throw new IllegalStateException(\"multiply entry points found\");\n         }\n \n-        Chain<Local> locals = blockGraph.getBody().getLocals();\n \n-        Map<JimpleLocal, ConstantFoldingElement.Value> initialBottomMap = new TreeMap<>(\n-                ConstantFoldingElement.COMPARATOR);\n-        Map<JimpleLocal, ConstantFoldingElement.Value> initialHeadMap = new TreeMap<>(\n-                ConstantFoldingElement.COMPARATOR);\n+else\n \n-        ConstantFoldingElement.Value nullInt = new ConstantFoldingElement.Value(IntConstant.v(0));\n-        ConstantFoldingElement.Value nullLong = new ConstantFoldingElement.Value(LongConstant.v(0));\n+if (heads.size() > 1) {\n+    throw new IllegalStateException(\"multiply entry points found\");\n+}\n \n+        Chain<Local> locals = blockGraph.getBody().getLocals();\n+        Map<JimpleLocal, ConstantFoldingElement.Value> initialBottomMap = new TreeMap<>(ConstantFoldingElement.COMPARATOR);\n+        Map<JimpleLocal, ConstantFoldingElement.Value> initialHeadMap = new TreeMap<>(ConstantFoldingElement.COMPARATOR);\n+        ConstantFoldingElement.Value nullInt = new ConstantFoldingElement . Value(IntConstant.v(0));\n+        ConstantFoldingElement.Value nullLong = new ConstantFoldingElement . Value(LongConstant.v(0));\n         for (Local l : locals) {\n             if (!(l instanceof JimpleLocal)) {\n                 throw new IllegalStateException(\"no jimple local\");\n             }\n+\n             Type t = l.getType();\n             if (!(t instanceof PrimType)) {\n                 continue;\n             }\n-            if (t instanceof BooleanType || t instanceof ByteType || t instanceof CharType || t instanceof ShortType\n-                    || t instanceof IntType) {\n+\n+            if(t instanceof BooleanType|| t instanceof ByteType|| t instanceof CharType|| t instanceof ShortType|| t instanceof IntType) {\n                 initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n                 initialHeadMap.put((JimpleLocal) l, nullInt);\n-            } else if (t instanceof LongType) {\n-                initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n-                initialHeadMap.put((JimpleLocal) l, nullLong);\n             }\n+\n+\n+else\n+\n+if (t instanceof LongType) {\n+    initialBottomMap.put((JimpleLocal) l, ConstantFoldingElement.Value.getBottom());\n+    initialHeadMap.put((JimpleLocal) l, nullLong);\n+}\n         }\n \n         Block head = heads.get(0);\n         List<Block> blocks = blockGraph.getBlocks();\n-\n         ConstantFoldingElement headIn = new ConstantFoldingElement(initialHeadMap);\n         ConstantFoldingElement defaultIn = new ConstantFoldingElement(initialBottomMap);\n-\n         BlockState<ConstantFoldingElement> headState = new BlockState<ConstantFoldingElement>(headIn, defaultIn);\n         BlockState<ConstantFoldingElement> defaultState = new BlockState<ConstantFoldingElement>(defaultIn, defaultIn);\n-\n         Map<Block, BlockState<ConstantFoldingElement>> initialMap = new HashMap<Block, BlockState<ConstantFoldingElement>>();\n-\n         for (Block b : blocks) {\n-            if (b == head) {\n+            if(b == head) {\n                 initialMap.put(b, headState);\n-            } else {\n+            }\n+\n+\n+else {\n                 initialMap.put(b, defaultState);\n             }\n         }\n@@ -102,4 +110,4 @@ public class ConstantFoldingInitializer implements Initializer<ConstantFoldingEl\n         return initialMap;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}