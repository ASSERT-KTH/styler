{
    "project_name": "graphfoundation-ongdb",
    "error_id": "355",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/355/StandardBranchCollisionDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/355/StandardBranchCollisionDetector.java\nindex aff0acad8c2..041e648e66e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/355/StandardBranchCollisionDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/355/StandardBranchCollisionDetector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.impl.traversal;\n \n import java.util.ArrayList;\n@@ -38,82 +39,82 @@ import org.neo4j.graphdb.traversal.TraversalBranch;\n \n public class StandardBranchCollisionDetector implements BranchCollisionDetector\n {\n-    private final Map<Node,Collection<TraversalBranch>[]> paths = new HashMap<>( 1000 );\n-    private final Evaluator evaluator;\n-    private final Set<Path> returnedPaths = new HashSet<>();\n-    private Predicate<Path> pathPredicate = Predicates.alwaysTrue();\n+  private final Map<Node, Collection<TraversalBranch>[]> paths = new HashMap<>(1000);\n+  private final Evaluator evaluator;\n+  private final Set<Path> returnedPaths = new HashSet<>();\n+  private Predicate<Path> pathPredicate = Predicates.alwaysTrue();\n+\n+  @Deprecated\n+  public StandardBranchCollisionDetector(Evaluator evaluator)\n+  {\n+    this.evaluator = evaluator;\n+  }\n \n-    @Deprecated\n-    public StandardBranchCollisionDetector( Evaluator evaluator )\n+  public StandardBranchCollisionDetector(Evaluator evaluator, Predicate<Path> pathPredicate)\n+  {\n+    this.evaluator = evaluator;\n+    if (pathPredicate != null)\n     {\n-        this.evaluator = evaluator;\n+      this.pathPredicate = pathPredicate;\n     }\n+  }\n \n-    public StandardBranchCollisionDetector( Evaluator evaluator, Predicate<Path> pathPredicate )\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public Collection<Path> evaluate(TraversalBranch branch, Direction direction)\n+  {\n+    // [0] for paths from start, [1] for paths from end\n+    Collection<TraversalBranch>[] pathsHere = paths.get(branch.endNode());\n+    int index = direction.ordinal();\n+    if (pathsHere == null)\n     {\n-        this.evaluator = evaluator;\n-        if ( pathPredicate != null )\n-        {\n-            this.pathPredicate = pathPredicate;\n-        }\n+      pathsHere = new Collection[] {new ArrayList<>(), new ArrayList<>()};\n+      paths.put(branch.endNode(), pathsHere);\n     }\n+    pathsHere[index].add(branch);\n \n-    @Override\n-    @SuppressWarnings( \"unchecked\" )\n-    public Collection<Path> evaluate( TraversalBranch branch, Direction direction )\n+    // If there are paths from the other side then include all the\n+    // combined paths\n+    Collection<TraversalBranch> otherCollections = pathsHere[index == 0 ? 1 : 0];\n+    if (!otherCollections.isEmpty())\n     {\n-        // [0] for paths from start, [1] for paths from end\n-        Collection<TraversalBranch>[] pathsHere = paths.get( branch.endNode() );\n-        int index = direction.ordinal();\n-        if ( pathsHere == null )\n+      Collection<Path> foundPaths = new ArrayList<>();\n+      for (TraversalBranch otherBranch : otherCollections)\n+      {\n+        TraversalBranch startPath = index == 0 ? branch : otherBranch;\n+        TraversalBranch endPath = index == 0 ? otherBranch : branch;\n+        BidirectionalTraversalBranchPath path = new BidirectionalTraversalBranchPath(\n+            startPath, endPath);\n+        if (isAcceptablePath(path))\n         {\n-            pathsHere = new Collection[] {new ArrayList<>(), new ArrayList<>() };\n-            paths.put( branch.endNode(), pathsHere );\n+          if (returnedPaths.add(path) && includePath(path, startPath, endPath))\n+          {\n+            foundPaths.add(path);\n+          }\n         }\n-        pathsHere[index].add( branch );\n-\n-        // If there are paths from the other side then include all the\n-        // combined paths\n-        Collection<TraversalBranch> otherCollections = pathsHere[index == 0 ? 1 : 0];\n-        if ( !otherCollections.isEmpty() )\n-        {\n-            Collection<Path> foundPaths = new ArrayList<>();\n-            for ( TraversalBranch otherBranch : otherCollections )\n-            {\n-                TraversalBranch startPath = index == 0 ? branch : otherBranch;\n-                TraversalBranch endPath = index == 0 ? otherBranch : branch;\n-                BidirectionalTraversalBranchPath path = new BidirectionalTraversalBranchPath(\n-                        startPath, endPath );\n-                if ( isAcceptablePath( path ) )\n-                {\n-                    if ( returnedPaths.add( path ) && includePath( path, startPath, endPath ) )\n-                    {\n-                        foundPaths.add( path );\n-                    }\n-                }\n-            }\n+      }\n \n-            if ( !foundPaths.isEmpty() )\n-            {\n-                return foundPaths;\n-            }\n-        }\n-        return null;\n+      if (!foundPaths.isEmpty())\n+      {\n+        return foundPaths;\n+      }\n     }\n+    return null;\n+  }\n \n-    private boolean isAcceptablePath( BidirectionalTraversalBranchPath path )\n-    {\n-        return pathPredicate.test( path );\n-    }\n+  private boolean isAcceptablePath(BidirectionalTraversalBranchPath path)\n+  {\n+    return pathPredicate.test(path);\n+  }\n \n-    protected boolean includePath( Path path, TraversalBranch startPath, TraversalBranch endPath )\n+  protected boolean includePath(Path path, TraversalBranch startPath, TraversalBranch endPath)\n+  {\n+    Evaluation eval = evaluator.evaluate(path);\n+    if (!eval.continues())\n     {\n-        Evaluation eval = evaluator.evaluate( path );\n-        if ( !eval.continues() )\n-        {\n-            startPath.evaluation( eval );\n-            endPath.evaluation( eval );\n-        }\n-        return eval.includes();\n+      startPath.evaluation(eval);\n+      endPath.evaluation(eval);\n     }\n+    return eval.includes();\n+  }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/355/StandardBranchCollisionDetector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/355/StandardBranchCollisionDetector.java\nindex aff0acad8c2..ee78c5f21f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/355/StandardBranchCollisionDetector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/355/StandardBranchCollisionDetector.java\n@@ -67,10 +67,11 @@ public class StandardBranchCollisionDetector implements BranchCollisionDetector\n         int index = direction.ordinal();\n         if ( pathsHere == null )\n         {\n-            pathsHere = new Collection[] {new ArrayList<>(), new ArrayList<>() };\n+            pathsHere = new Collection[]{new ArrayList<>(), new ArrayList<>() };\n             paths.put( branch.endNode(), pathsHere );\n         }\n-        pathsHere[index].add( branch );\n+\n+pathsHere[index].add( branch );\n \n         // If there are paths from the other side then include all the\n         // combined paths\n@@ -82,9 +83,8 @@ public class StandardBranchCollisionDetector implements BranchCollisionDetector\n             {\n                 TraversalBranch startPath = index == 0 ? branch : otherBranch;\n                 TraversalBranch endPath = index == 0 ? otherBranch : branch;\n-                BidirectionalTraversalBranchPath path = new BidirectionalTraversalBranchPath(\n-                        startPath, endPath );\n-                if ( isAcceptablePath( path ) )\n+                BidirectionalTraversalBranchPath path = new BidirectionalTraversalBranchPath( startPath, endPath );\n+if ( isAcceptablePath( path ) )\n                 {\n                     if ( returnedPaths.add( path ) && includePath( path, startPath, endPath ) )\n                     {\n@@ -114,6 +114,7 @@ public class StandardBranchCollisionDetector implements BranchCollisionDetector\n             startPath.evaluation( eval );\n             endPath.evaluation( eval );\n         }\n-        return eval.includes();\n+\n+return eval.includes();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}