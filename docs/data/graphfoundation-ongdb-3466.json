{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3466",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3466/MapValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3466/MapValue.java\nindex eb63937ede3..d1f85110320 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3466/MapValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3466/MapValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import java.util.Arrays;\n@@ -36,200 +37,198 @@ import static org.neo4j.values.storable.Values.NO_VALUE;\n \n public final class MapValue extends VirtualValue\n {\n-    private final Map<String,AnyValue> map;\n-\n-    MapValue( Map<String,AnyValue> map )\n-    {\n-        this.map = map;\n-    }\n-\n-    @Override\n-    public boolean equals( VirtualValue other )\n-    {\n-        if ( other == null || other.getClass() != MapValue.class )\n-        {\n-            return false;\n-        }\n-        MapValue that = (MapValue) other;\n-        return map.equals( that.map );\n-    }\n-\n-    @Override\n-    public int computeHash()\n-    {\n-        return map.hashCode();\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-    {\n-        writer.beginMap( map.size() );\n-        for ( Map.Entry<String,AnyValue> entry : map.entrySet() )\n-        {\n-            writer.writeString( entry.getKey() );\n-            entry.getValue().writeTo( writer );\n-        }\n-        writer.endMap();\n-    }\n-\n-    public ListValue keys()\n-    {\n-        String[] strings = keySet().toArray( new String[map.size()] );\n-        return VirtualValues.fromArray( Values.stringArray( strings ) );\n-    }\n-\n-    public Set<String> keySet()\n-    {\n-        return map.keySet();\n-    }\n-\n-    @Override\n-    public VirtualValueGroup valueGroup()\n-    {\n-        return VirtualValueGroup.MAP;\n-    }\n-\n-    @Override\n-    public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n-    {\n-        if ( other == null || other.getClass() != MapValue.class )\n-        {\n-            throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n-        }\n-        Map<String,AnyValue> otherMap = ((MapValue) other).map;\n-        int size = map.size();\n-        int compare = Integer.compare( size(), otherMap.size() );\n-        if ( compare == 0 )\n-        {\n-            String[] thisKeys = keySet().toArray( new String[size] );\n-            Arrays.sort( thisKeys, String::compareTo );\n-            String[] thatKeys = otherMap.keySet().toArray( new String[size] );\n-            Arrays.sort( thatKeys, String::compareTo );\n-            for ( int i = 0; i < size; i++ )\n-            {\n-                compare = thisKeys[i].compareTo( thatKeys[i] );\n-                if ( compare != 0 )\n-                {\n-                    return compare;\n-                }\n-            }\n-\n-            for ( int i = 0; i < size; i++ )\n-            {\n-                String key = thisKeys[i];\n-                compare = comparator.compare( map.get( key ), otherMap.get( key ) );\n-                if ( compare != 0 )\n-                {\n-                    return compare;\n-                }\n-            }\n-        }\n-        return compare;\n-    }\n-\n-    @Override\n-    public Boolean ternaryEquals( AnyValue other )\n-    {\n-        if ( other == null || other == NO_VALUE )\n-        {\n-            return null;\n-        }\n-        else if ( !(other instanceof MapValue) )\n-        {\n-            return Boolean.FALSE;\n-        }\n-        Map<String,AnyValue> otherMap = ((MapValue) other).map;\n-        int size = map.size();\n-        if ( size != otherMap.size() )\n-        {\n-            return Boolean.FALSE;\n-        }\n-        String[] thisKeys = keySet().toArray( new String[size] );\n-        Arrays.sort( thisKeys, String::compareTo );\n-        String[] thatKeys = otherMap.keySet().toArray( new String[size] );\n-        Arrays.sort( thatKeys, String::compareTo );\n-        for ( int i = 0; i < size; i++ )\n+  private final Map<String, AnyValue> map;\n+\n+  MapValue(Map<String, AnyValue> map)\n+  {\n+    this.map = map;\n+  }\n+\n+  @Override\n+  public boolean equals(VirtualValue other)\n+  {\n+    if (other == null || other.getClass() != MapValue.class)\n+    {\n+      return false;\n+    }\n+    MapValue that = (MapValue) other;\n+    return map.equals(that.map);\n+  }\n+\n+  @Override\n+  public int computeHash()\n+  {\n+    return map.hashCode();\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+  {\n+    writer.beginMap(map.size());\n+    for (Map.Entry<String, AnyValue> entry : map.entrySet())\n+    {\n+      writer.writeString(entry.getKey());\n+      entry.getValue().writeTo(writer);\n+    }\n+    writer.endMap();\n+  }\n+\n+  public ListValue keys()\n+  {\n+    String[] strings = keySet().toArray(new String[map.size()]);\n+    return VirtualValues.fromArray(Values.stringArray(strings));\n+  }\n+\n+  public Set<String> keySet()\n+  {\n+    return map.keySet();\n+  }\n+\n+  @Override\n+  public VirtualValueGroup valueGroup()\n+  {\n+    return VirtualValueGroup.MAP;\n+  }\n+\n+  @Override\n+  public int compareTo(VirtualValue other, Comparator<AnyValue> comparator)\n+  {\n+    if (other == null || other.getClass() != MapValue.class)\n+    {\n+      throw new IllegalArgumentException(\"Cannot compare different virtual values\");\n+    }\n+    Map<String, AnyValue> otherMap = ((MapValue) other).map;\n+    int size = map.size();\n+    int compare = Integer.compare(size(), otherMap.size());\n+    if (compare == 0)\n+    {\n+      String[] thisKeys = keySet().toArray(new String[size]);\n+      Arrays.sort(thisKeys, String::compareTo);\n+      String[] thatKeys = otherMap.keySet().toArray(new String[size]);\n+      Arrays.sort(thatKeys, String::compareTo);\n+      for (int i = 0; i < size; i++)\n+      {\n+        compare = thisKeys[i].compareTo(thatKeys[i]);\n+        if (compare != 0)\n         {\n-            if ( thisKeys[i].compareTo( thatKeys[i] ) != 0 )\n-            {\n-                return Boolean.FALSE;\n-            }\n+          return compare;\n         }\n-        Boolean equalityResult = Boolean.TRUE;\n-\n-        for ( int i = 0; i < size; i++ )\n-        {\n-            String key = thisKeys[i];\n-            Boolean s = map.get( key ).ternaryEquals( otherMap.get( key ) );\n-            if ( s == null )\n-            {\n-                equalityResult = null;\n-            }\n-            else if ( !s )\n-            {\n-                return Boolean.FALSE;\n-            }\n-        }\n-        return equalityResult;\n-    }\n-\n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n-    {\n-        return mapper.mapMap( this );\n-    }\n-\n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"Map\";\n-    }\n-\n-    public void foreach( BiConsumer<String,AnyValue> f )\n-    {\n-        map.forEach( f );\n-    }\n+      }\n \n-    public Set<Map.Entry<String,AnyValue>> entrySet()\n-    {\n-        return map.entrySet();\n-    }\n-\n-    public boolean containsKey( String key )\n-    {\n-        return map.containsKey( key );\n-    }\n-\n-    public AnyValue get( String key )\n-    {\n-      return map.getOrDefault( key, NO_VALUE );\n-    }\n-\n-    public Map<String,AnyValue> getMapCopy()\n-    {\n-        return new HashMap<>( map );\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder sb = new StringBuilder( getTypeName() + \"{\" );\n-        String sep = \"\";\n-        for ( Map.Entry<String,AnyValue> entry : map.entrySet() )\n+      for (int i = 0; i < size; i++)\n+      {\n+        String key = thisKeys[i];\n+        compare = comparator.compare(map.get(key), otherMap.get(key));\n+        if (compare != 0)\n         {\n-            sb.append( sep );\n-            sb.append( entry.getKey() );\n-            sb.append( \" -> \" );\n-            sb.append( entry.getValue() );\n-            sep = \", \";\n+          return compare;\n         }\n-\n-        sb.append( '}' );\n-        return sb.toString();\n-    }\n-\n-    public int size()\n-    {\n-        return map.size();\n-    }\n+      }\n+    }\n+    return compare;\n+  }\n+\n+  @Override\n+  public Boolean ternaryEquals(AnyValue other)\n+  {\n+    if (other == null || other == NO_VALUE)\n+    {\n+      return null;\n+    } else if (!(other instanceof MapValue))\n+    {\n+      return Boolean.FALSE;\n+    }\n+    Map<String, AnyValue> otherMap = ((MapValue) other).map;\n+    int size = map.size();\n+    if (size != otherMap.size())\n+    {\n+      return Boolean.FALSE;\n+    }\n+    String[] thisKeys = keySet().toArray(new String[size]);\n+    Arrays.sort(thisKeys, String::compareTo);\n+    String[] thatKeys = otherMap.keySet().toArray(new String[size]);\n+    Arrays.sort(thatKeys, String::compareTo);\n+    for (int i = 0; i < size; i++)\n+    {\n+      if (thisKeys[i].compareTo(thatKeys[i]) != 0)\n+      {\n+        return Boolean.FALSE;\n+      }\n+    }\n+    Boolean equalityResult = Boolean.TRUE;\n+\n+    for (int i = 0; i < size; i++)\n+    {\n+      String key = thisKeys[i];\n+      Boolean s = map.get(key).ternaryEquals(otherMap.get(key));\n+      if (s == null)\n+      {\n+        equalityResult = null;\n+      } else if (!s)\n+      {\n+        return Boolean.FALSE;\n+      }\n+    }\n+    return equalityResult;\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapMap(this);\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Map\";\n+  }\n+\n+  public void foreach(BiConsumer<String, AnyValue> f)\n+  {\n+    map.forEach(f);\n+  }\n+\n+  public Set<Map.Entry<String, AnyValue>> entrySet()\n+  {\n+    return map.entrySet();\n+  }\n+\n+  public boolean containsKey(String key)\n+  {\n+    return map.containsKey(key);\n+  }\n+\n+  public AnyValue get(String key)\n+  {\n+    return map.getOrDefault(key, NO_VALUE);\n+  }\n+\n+  public Map<String, AnyValue> getMapCopy()\n+  {\n+    return new HashMap<>(map);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder sb = new StringBuilder(getTypeName() + \"{\");\n+    String sep = \"\";\n+    for (Map.Entry<String, AnyValue> entry : map.entrySet())\n+    {\n+      sb.append(sep);\n+      sb.append(entry.getKey());\n+      sb.append(\" -> \");\n+      sb.append(entry.getValue());\n+      sep = \", \";\n+    }\n+\n+    sb.append('}');\n+    return sb.toString();\n+  }\n+\n+  public int size()\n+  {\n+    return map.size();\n+  }\n }\n",
            "diff_size": 291
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3466/MapValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3466/MapValue.java\nindex eb63937ede3..301224358d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3466/MapValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3466/MapValue.java\n@@ -50,7 +50,8 @@ public final class MapValue extends VirtualValue\n         {\n             return false;\n         }\n-        MapValue that = (MapValue) other;\n+\n+MapValue that = (MapValue) other;\n         return map.equals( that.map );\n     }\n \n@@ -134,7 +135,7 @@ public final class MapValue extends VirtualValue\n         {\n             return null;\n         }\n-        else if ( !(other instanceof MapValue) )\n+        else if ( !( other instanceof MapValue) )\n         {\n             return Boolean.FALSE;\n         }\n@@ -144,7 +145,8 @@ public final class MapValue extends VirtualValue\n         {\n             return Boolean.FALSE;\n         }\n-        String[] thisKeys = keySet().toArray( new String[size] );\n+\n+String[] thisKeys = keySet().toArray( new String[size] );\n         Arrays.sort( thisKeys, String::compareTo );\n         String[] thatKeys = otherMap.keySet().toArray( new String[size] );\n         Arrays.sort( thatKeys, String::compareTo );\n@@ -156,8 +158,7 @@ public final class MapValue extends VirtualValue\n             }\n         }\n         Boolean equalityResult = Boolean.TRUE;\n-\n-        for ( int i = 0; i < size; i++ )\n+for ( int i = 0; i < size; i++ )\n         {\n             String key = thisKeys[i];\n             Boolean s = map.get( key ).ternaryEquals( otherMap.get( key ) );\n@@ -202,7 +203,7 @@ public final class MapValue extends VirtualValue\n \n     public AnyValue get( String key )\n     {\n-      return map.getOrDefault( key, NO_VALUE );\n+    return map.getOrDefault( key, NO_VALUE );\n     }\n \n     public Map<String,AnyValue> getMapCopy()\n@@ -232,4 +233,4 @@ public final class MapValue extends VirtualValue\n     {\n         return map.size();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}