{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "485",
    "information": {
        "errors": [
            {
                "line": "76",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public void testWithContentDisposition() throws IOException {\n    Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n    Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withContentDisposition(\"bubbly fun\"));\n    assertThat(\n            Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get())\n        .isEqualTo(\"bubbly fun\");",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/485/CloudStorageOptionsTest.java\nindex 146270484f8..6c6f23a1000 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/485/CloudStorageOptionsTest.java\n@@ -73,9 +73,10 @@ public class CloudStorageOptionsTest {\n   @Test\n   public void testWithContentDisposition() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n-    Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withContentDisposition(\"bubbly fun\"));\n+    Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n+        CloudStorageOptions.withContentDisposition(\"bubbly fun\"));\n     assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get())\n+        Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get())\n         .isEqualTo(\"bubbly fun\");\n   }\n \n@@ -96,12 +97,12 @@ public class CloudStorageOptionsTest {\n         CloudStorageOptions.withUserMetadata(\"nolo\", \"contendere\"),\n         CloudStorageOptions.withUserMetadata(\"eternal\", \"sadness\"));\n     assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"nolo\"))\n+        Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"nolo\"))\n         .isEqualTo(\"contendere\");\n     assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class)\n-                .userMetadata()\n-                .get(\"eternal\"))\n+        Files.readAttributes(path, CloudStorageFileAttributes.class)\n+            .userMetadata()\n+            .get(\"eternal\"))\n         .isEqualTo(\"sadness\");\n   }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/485/CloudStorageOptionsTest.java\nindex 146270484f8..89d6b2c8b5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/485/CloudStorageOptionsTest.java\n@@ -74,9 +74,7 @@ public class CloudStorageOptionsTest {\n   public void testWithContentDisposition() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withContentDisposition(\"bubbly fun\"));\n-    assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get())\n-        .isEqualTo(\"bubbly fun\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get()).isEqualTo(\"bubbly fun\");\n   }\n \n   @Test\n@@ -90,19 +88,13 @@ public class CloudStorageOptionsTest {\n   @Test\n   public void testWithUserMetadata() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n-    Files.write(\n-        path,\n+    Files.write(path,\n         \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n         CloudStorageOptions.withUserMetadata(\"nolo\", \"contendere\"),\n         CloudStorageOptions.withUserMetadata(\"eternal\", \"sadness\"));\n-    assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"nolo\"))\n-        .isEqualTo(\"contendere\");\n-    assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class)\n-                .userMetadata()\n-                .get(\"eternal\"))\n-        .isEqualTo(\"sadness\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"nolo\")).isEqualTo(\"contendere\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class)\n+                .userMetadata().get(\"eternal\")).isEqualTo(\"sadness\");\n   }\n \n   @Test\n@@ -118,4 +110,4 @@ public class CloudStorageOptionsTest {\n     NullPointerTester tester = new NullPointerTester();\n     tester.testAllPublicStaticMethods(CloudStorageOptions.class);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/485/CloudStorageOptionsTest.java\nindex 146270484f8..d90ce70f9a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/485/CloudStorageOptionsTest.java\n@@ -22,12 +22,10 @@ import static java.nio.charset.StandardCharsets.UTF_8;\n import com.google.cloud.storage.Acl;\n import com.google.cloud.storage.contrib.nio.testing.LocalStorageHelper;\n import com.google.common.testing.NullPointerTester;\n-\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n-\n import java.io.IOException;\n import java.net.URI;\n import java.nio.file.Files;\n@@ -37,9 +35,10 @@ import java.nio.file.Paths;\n /**\n  * Unit tests for {@link CloudStorageOptions}.\n  */\n+\n+\n @RunWith(JUnit4.class)\n public class CloudStorageOptionsTest {\n-\n   @Before\n   public void before() {\n     CloudStorageFileSystemProvider.setStorageOptions(LocalStorageHelper.getOptions());\n@@ -49,16 +48,14 @@ public class CloudStorageOptionsTest {\n   public void testWithoutCaching() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withoutCaching());\n-    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).cacheControl().get())\n-        .isEqualTo(\"no-cache\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).cacheControl().get()).isEqualTo(\"no-cache\");\n   }\n \n   @Test\n   public void testCacheControl() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withCacheControl(\"potato\"));\n-    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).cacheControl().get())\n-        .isEqualTo(\"potato\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).cacheControl().get()).isEqualTo(\"potato\");\n   }\n \n   @Test\n@@ -66,51 +63,36 @@ public class CloudStorageOptionsTest {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Acl acl = Acl.of(new Acl.User(\"king@example.com\"), Acl.Role.OWNER);\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withAcl(acl));\n-    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).acl().get())\n-        .contains(acl);\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).acl().get()).contains(acl);\n   }\n \n   @Test\n   public void testWithContentDisposition() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withContentDisposition(\"bubbly fun\"));\n-    assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get())\n-        .isEqualTo(\"bubbly fun\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get()).isEqualTo(\"bubbly fun\");\n   }\n \n   @Test\n   public void testWithContentEncoding() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withContentEncoding(\"gzip\"));\n-    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).contentEncoding().get())\n-        .isEqualTo(\"gzip\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).contentEncoding().get()).isEqualTo(\"gzip\");\n   }\n \n   @Test\n   public void testWithUserMetadata() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n-    Files.write(\n-        path,\n-        \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n-        CloudStorageOptions.withUserMetadata(\"nolo\", \"contendere\"),\n-        CloudStorageOptions.withUserMetadata(\"eternal\", \"sadness\"));\n-    assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"nolo\"))\n-        .isEqualTo(\"contendere\");\n-    assertThat(\n-            Files.readAttributes(path, CloudStorageFileAttributes.class)\n-                .userMetadata()\n-                .get(\"eternal\"))\n-        .isEqualTo(\"sadness\");\n+    Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withUserMetadata(\"nolo\", \"contendere\"), CloudStorageOptions.withUserMetadata(\"eternal\", \"sadness\"));\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"nolo\")).isEqualTo(\"contendere\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).userMetadata().get(\"eternal\")).isEqualTo(\"sadness\");\n   }\n \n   @Test\n   public void testWithMimeType_string() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n     Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withMimeType(\"text/plain\"));\n-    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).mimeType().get())\n-        .isEqualTo(\"text/plain\");\n+    assertThat(Files.readAttributes(path, CloudStorageFileAttributes.class).mimeType().get()).isEqualTo(\"text/plain\");\n   }\n \n   @Test\n@@ -118,4 +100,4 @@ public class CloudStorageOptionsTest {\n     NullPointerTester tester = new NullPointerTester();\n     tester.testAllPublicStaticMethods(CloudStorageOptions.class);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/485/CloudStorageOptionsTest.java\nindex 146270484f8..02c2f96077c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/485/CloudStorageOptionsTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/485/CloudStorageOptionsTest.java\n@@ -73,7 +73,8 @@ public class CloudStorageOptionsTest {\n   @Test\n   public void testWithContentDisposition() throws IOException {\n     Path path = Paths.get(URI.create(\"gs://bucket/path\"));\n-    Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withContentDisposition(\"bubbly fun\"));\n+Files.write(path, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),CloudStorageOptions\n+    .withContentDisposition(\"bubbly fun\"));\n     assertThat(\n             Files.readAttributes(path, CloudStorageFileAttributes.class).contentDisposition().get())\n         .isEqualTo(\"bubbly fun\");\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}