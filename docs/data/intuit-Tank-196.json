{
    "project_name": "intuit-Tank",
    "error_id": "196",
    "information": {
        "errors": [
            {
                "line": "146",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @TypeHint(ScriptStepContainer.class)\n    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n\n    /**\n     * Gets a single Script Description.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "column": "72",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/196/ScriptService.java\nindex 47807010bb6..331e696a33e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/196/ScriptService.java\n@@ -142,17 +142,16 @@ public interface ScriptService {\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Nonnull\n     @TypeHint(ScriptStepContainer.class)\n-    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n-            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n+    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,@DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n \n-    /**\n+/**\n      * Gets a single Script Description.\n      * \n      * @param id\n      *            the id of the script description to fetch.\n      * @return the ScriptDescription\n      */\n-    @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n+@Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Nullable\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/196/ScriptService.java\nindex 47807010bb6..aa72e4a1999 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/196/ScriptService.java\n@@ -46,267 +46,251 @@ import com.webcohesion.enunciate.metadata.rs.TypeHint;\n \n /**\n  * ProjectService\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @Path(ScriptService.SERVICE_RELATIVE_PATH)\n public interface ScriptService {\n \n-    public static final String SERVICE_RELATIVE_PATH = \"/v1/script-service\";\n+  public static final String SERVICE_RELATIVE_PATH = \"/v1/script-service\";\n \n-    public static final String METHOD_PING = \"/ping\";\n+  public static final String METHOD_PING = \"/ping\";\n \n-    public static final String METHOD_CONVERT_SCRIPT = \"/convert/script\";\n-    public static final String METHOD_SCRIPT_DESCRIPTION = \"/script/description\";\n-    public static final String METHOD_SCRIPT_STEPS = \"/script/steps\";\n-    public static final String METHOD_SCRIPT = \"/script\";\n-    public static final String METHOD_FILTER = \"/filter\";\n-    public static final String METHOD_SCRIPT_UPDATE = \"/script/update\";\n-    public static final String METHOD_SCRIPT_FILTER = \"/script/filter\";\n-    public static final String METHOD_EXTERNAL_SCRIPT = \"/external/script\";\n-    public static final String METHOD_EXTERNAL_SCRIPTS = \"/external/scripts\";\n-    public static final String METHOD_SCRIPT_DOWNLOAD = \"/download/script\";\n-    public static final String METHOD_HARNESS_DOWNLOAD = \"/download/harness/script\";\n+  public static final String METHOD_CONVERT_SCRIPT = \"/convert/script\";\n+  public static final String METHOD_SCRIPT_DESCRIPTION = \"/script/description\";\n+  public static final String METHOD_SCRIPT_STEPS = \"/script/steps\";\n+  public static final String METHOD_SCRIPT = \"/script\";\n+  public static final String METHOD_FILTER = \"/filter\";\n+  public static final String METHOD_SCRIPT_UPDATE = \"/script/update\";\n+  public static final String METHOD_SCRIPT_FILTER = \"/script/filter\";\n+  public static final String METHOD_EXTERNAL_SCRIPT = \"/external/script\";\n+  public static final String METHOD_EXTERNAL_SCRIPTS = \"/external/scripts\";\n+  public static final String METHOD_SCRIPT_DOWNLOAD = \"/download/script\";\n+  public static final String METHOD_HARNESS_DOWNLOAD = \"/download/harness/script\";\n \n-    /**\n-     * Test method to test if the service is up.\n-     * \n-     * @return non-null String value.\n-     */\n-    @Path(ScriptService.METHOD_PING)\n-    @Produces({ MediaType.TEXT_PLAIN })\n-    @GET\n-    @Nonnull\n-    public String ping();\n+  /**\n+   * Test method to test if the service is up.\n+   *\n+   * @return non-null String value.\n+   */\n+  @Path(ScriptService.METHOD_PING)\n+  @Produces({MediaType.TEXT_PLAIN})\n+  @GET\n+  @Nonnull\n+  public String ping();\n \n-    /**\n-     * Convert a script from a recorder to Tank steps.\n-     * \n-     * @param formData\n-     *            FormDataMultiPart should contain a ScriptUploadRequest with the formKey of xmlString and an\n-     *            octetStream of the recorded script\n-     * @return created no content response with location field set to url of newly created object\n-     */\n-    @Path(ScriptService.METHOD_CONVERT_SCRIPT)\n-    @Consumes({ MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @POST\n-    @Nonnull\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    @StatusCodes({ @ResponseCode(code = 201, condition = \"Normal Exit Code\") })\n-    public Response convertScript(@Nonnull FormDataMultiPart formData);\n+  /**\n+   * Convert a script from a recorder to Tank steps.\n+   *\n+   * @param formData FormDataMultiPart should contain a ScriptUploadRequest with the formKey of xmlString and an\n+   *                 octetStream of the recorded script\n+   * @return created no content response with location field set to url of newly created object\n+   */\n+  @Path(ScriptService.METHOD_CONVERT_SCRIPT)\n+  @Consumes({MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @POST\n+  @Nonnull\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  @StatusCodes({@ResponseCode(code = 201, condition = \"Normal Exit Code\")})\n+  public Response convertScript(@Nonnull FormDataMultiPart formData);\n \n-    /**\n-     * Gets the harness representation of a script.\n-     * \n-     * @param scriptId\n-     *            the id of the script to fetch\n-     * @return the script in xml form\n-     */\n-    @Path(ScriptService.METHOD_HARNESS_DOWNLOAD + \"/{scriptId}\")\n-    @Produces({ MediaType.APPLICATION_OCTET_STREAM })\n-    @GET\n-    @TypeHint(String.class)\n-    public Response downloadHarnessScript(\n-            @PathParam(\"scriptId\") Integer scriptId);\n+  /**\n+   * Gets the harness representation of a script.\n+   *\n+   * @param scriptId the id of the script to fetch\n+   * @return the script in xml form\n+   */\n+  @Path(ScriptService.METHOD_HARNESS_DOWNLOAD + \"/{scriptId}\")\n+  @Produces({MediaType.APPLICATION_OCTET_STREAM})\n+  @GET\n+  @TypeHint(String.class)\n+  public Response downloadHarnessScript(\n+    @PathParam(\"scriptId\") Integer scriptId);\n \n-    /**\n-     * Gets all the ScriptDescriptions in the system.\n-     * \n-     * @return List of ScriptDescriptions\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION)\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Nonnull\n-    @TypeHint(ScriptDescriptionContainer.class)\n-    public Response getScriptDescriptions();\n+  /**\n+   * Gets all the ScriptDescriptions in the system.\n+   *\n+   * @return List of ScriptDescriptions\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION)\n+  @GET\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @Nonnull\n+  @TypeHint(ScriptDescriptionContainer.class)\n+  public Response getScriptDescriptions();\n \n-    /*\n-     * \n-     */\n-    /**\n-     * Gets a ScriptStepContainer for the given script.\n-     * \n-     * @param id\n-     *            the id of the script to get the steps for\n-     * @param start\n-     *            the starting index of the steps.\n-     * @param numSteps\n-     *            the number of steps to return\n-     * @return ScriptStepContainer for the given script\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT_STEPS + \"/{id}\")\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Nonnull\n-    @TypeHint(ScriptStepContainer.class)\n-    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n-            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n+  /*\n+   *\n+   */\n \n-    /**\n-     * Gets a single Script Description.\n-     * \n-     * @param id\n-     *            the id of the script description to fetch.\n-     * @return the ScriptDescription\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Nullable\n-    @TypeHint(ScriptDescription.class)\n-    public Response getScriptDescription(@Nonnull @PathParam(\"id\") Integer id);\n+  /**\n+   * Gets a ScriptStepContainer for the given script.\n+   *\n+   * @param id       the id of the script to get the steps for\n+   * @param start    the starting index of the steps.\n+   * @param numSteps the number of steps to return\n+   * @return ScriptStepContainer for the given script\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT_STEPS + \"/{id}\")\n+  @GET\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @Nonnull\n+  @TypeHint(ScriptStepContainer.class)\n+  public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n+                                 @DefaultValue(\"0\") @QueryParam(\"start\") int start,\n+                                 @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n \n-    /**\n-     * Gets a single ScriptTO which will include the steps.\n-     * \n-     * @param id\n-     *            the id of the script to fetch\n-     * @return the ScriptTO\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @GET\n-    @Nullable\n-    @TypeHint(ScriptTO.class)\n-    public Response getScript(@Nonnull @PathParam(\"id\") Integer id);\n+  /**\n+   * Gets a single Script Description.\n+   *\n+   * @param id the id of the script description to fetch.\n+   * @return the ScriptDescription\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n+  @GET\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @Nullable\n+  @TypeHint(ScriptDescription.class)\n+  public Response getScriptDescription(@Nonnull @PathParam(\"id\") Integer id);\n \n-    /**\n-     * Gets a single ScriptTO which will include the steps as a Streamed output for download.\n-     * \n-     * @param id\n-     *            the id of the script to fetch\n-     * @return the ScriptTO\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT_DOWNLOAD + \"/{id}\")\n-    @Produces({ MediaType.APPLICATION_OCTET_STREAM })\n-    @GET\n-    @Nullable\n-    @TypeHint(ScriptTO.class)\n-    public Response downloadScript(@Nonnull @PathParam(\"id\") Integer id);\n+  /**\n+   * Gets a single ScriptTO which will include the steps.\n+   *\n+   * @param id the id of the script to fetch\n+   * @return the ScriptTO\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @GET\n+  @Nullable\n+  @TypeHint(ScriptTO.class)\n+  public Response getScript(@Nonnull @PathParam(\"id\") Integer id);\n \n-    /**\n-     * Deletes the script and all steps from the system.\n-     * \n-     * @param id\n-     *            the id of the script to delete\n-     * @return http status. Response containing a status code 204(no content) if successful and 400(bad request) if id\n-     *         cannot be found on the system.\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n-    @DELETE\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    public Response deleteScript(@Nonnull @PathParam(\"id\") Integer id);\n+  /**\n+   * Gets a single ScriptTO which will include the steps as a Streamed output for download.\n+   *\n+   * @param id the id of the script to fetch\n+   * @return the ScriptTO\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT_DOWNLOAD + \"/{id}\")\n+  @Produces({MediaType.APPLICATION_OCTET_STREAM})\n+  @GET\n+  @Nullable\n+  @TypeHint(ScriptTO.class)\n+  public Response downloadScript(@Nonnull @PathParam(\"id\") Integer id);\n \n-    /**\n-     * Deletes the filter group from the system.\n-     * \n-     * @param id\n-     *            the id of the filter to delete\n-     * @return Response containing a status code 204(no content) if successful and 400(bad request) if id cannot be\n-     *         found on the system.\n-     * \n-     */\n-    @Path(ScriptService.METHOD_FILTER + \"/{id}\")\n-    @DELETE\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    public Response deleteFilter(@Nonnull @PathParam(\"id\") Integer id);\n+  /**\n+   * Deletes the script and all steps from the system.\n+   *\n+   * @param id the id of the script to delete\n+   * @return http status. Response containing a status code 204(no content) if successful and 400(bad request) if id\n+   * cannot be found on the system.\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n+  @DELETE\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  public Response deleteScript(@Nonnull @PathParam(\"id\") Integer id);\n \n-    /**\n-     * Updates the script.\n-     * \n-     * @param id\n-     *            the id of the script to update\n-     * @return created status code (201) with uri to new resource.\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n-    @PUT\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    public Response updateScript(@Nonnull @PathParam(\"id\") Integer id, @Nonnull ScriptTO script);\n+  /**\n+   * Deletes the filter group from the system.\n+   *\n+   * @param id the id of the filter to delete\n+   * @return Response containing a status code 204(no content) if successful and 400(bad request) if id cannot be\n+   * found on the system.\n+   */\n+  @Path(ScriptService.METHOD_FILTER + \"/{id}\")\n+  @DELETE\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  public Response deleteFilter(@Nonnull @PathParam(\"id\") Integer id);\n \n-    /**\n-     * Updates a script in Tank xml format.\n-     * \n-     * @param formData\n-     *            Formdata should contain a ScriptTO with the formKey of xmlString\n-     * @return Response String indicating the id of the script that was updated\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT_UPDATE)\n-    @Consumes({ MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Produces({ MediaType.TEXT_PLAIN })\n-    @POST\n-    @Nonnull\n-    @TypeHint(String.class)\n-    public Response updateTankScript(@Nonnull FormDataMultiPart formData);\n+  /**\n+   * Updates the script.\n+   *\n+   * @param id the id of the script to update\n+   * @return created status code (201) with uri to new resource.\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n+  @PUT\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  public Response updateScript(@Nonnull @PathParam(\"id\") Integer id, @Nonnull ScriptTO script);\n \n-    /**\n-     * Creates a new Script from the given ScriptTO. will nullify id and reset all uuids of steps\n-     * \n-     * @param script\n-     *            the script to store\n-     * @return created status code (201) with uri to new resource.\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT)\n-    @POST\n-    @Nonnull\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    public Response newScript(@Nonnull ScriptTO script);\n+  /**\n+   * Updates a script in Tank xml format.\n+   *\n+   * @param formData Formdata should contain a ScriptTO with the formKey of xmlString\n+   * @return Response String indicating the id of the script that was updated\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT_UPDATE)\n+  @Consumes({MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @Produces({MediaType.TEXT_PLAIN})\n+  @POST\n+  @Nonnull\n+  @TypeHint(String.class)\n+  public Response updateTankScript(@Nonnull FormDataMultiPart formData);\n \n-    /**\n-     * Filters the script using the supplied filter ids.\n-     * \n-     * @param filterRequest\n-     *            the filter request\n-     * @return created status code (201) with uri to script resource.\n-     */\n-    @Path(ScriptService.METHOD_SCRIPT_FILTER)\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @POST\n-    @Nonnull\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    public Response scriptFilterRequest(@Nonnull ScriptFilterRequest filterRequest);\n+  /**\n+   * Creates a new Script from the given ScriptTO. will nullify id and reset all uuids of steps\n+   *\n+   * @param script the script to store\n+   * @return created status code (201) with uri to new resource.\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT)\n+  @POST\n+  @Nonnull\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  public Response newScript(@Nonnull ScriptTO script);\n \n-    /**\n-     * Gets a single ExternalScriptTO object.\n-     * \n-     * @param id\n-     *            the id of the script to fetch\n-     * @return the ExternalScriptTO\n-     */\n-    @Path(ScriptService.METHOD_EXTERNAL_SCRIPT + \"/{id}\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @GET\n-    @Nonnull\n-    @TypeHint(ExternalScriptTO.class)\n-    public Response getExternalScript(@Nonnull @PathParam(\"id\") Integer id);\n+  /**\n+   * Filters the script using the supplied filter ids.\n+   *\n+   * @param filterRequest the filter request\n+   * @return created status code (201) with uri to script resource.\n+   */\n+  @Path(ScriptService.METHOD_SCRIPT_FILTER)\n+  @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @POST\n+  @Nonnull\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  public Response scriptFilterRequest(@Nonnull ScriptFilterRequest filterRequest);\n \n-    /**\n-     * Gets all ExternalScriptTO objects.\n-     * \n-     * @return the ExternalScriptContainer\n-     */\n-    @Path(ScriptService.METHOD_EXTERNAL_SCRIPTS)\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @GET\n-    @Nonnull\n-    @TypeHint(ExternalScriptContainer.class)\n-    public Response getExternalScripts();\n+  /**\n+   * Gets a single ExternalScriptTO object.\n+   *\n+   * @param id the id of the script to fetch\n+   * @return the ExternalScriptTO\n+   */\n+  @Path(ScriptService.METHOD_EXTERNAL_SCRIPT + \"/{id}\")\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @GET\n+  @Nonnull\n+  @TypeHint(ExternalScriptTO.class)\n+  public Response getExternalScript(@Nonnull @PathParam(\"id\") Integer id);\n \n-    /**\n-     * Saves or updates the External Script.\n-     * \n-     * @param script\n-     *            the script to store or update\n-     * @return created status code (201) with uri to script resource.\n-     */\n-    @Path(ScriptService.METHOD_EXTERNAL_SCRIPT)\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @POST\n-    @Nonnull\n-    @TypeHint(TypeHint.NO_CONTENT.class)\n-    public Response saveOrUpdateExternalScript(ExternalScriptTO script);\n+  /**\n+   * Gets all ExternalScriptTO objects.\n+   *\n+   * @return the ExternalScriptContainer\n+   */\n+  @Path(ScriptService.METHOD_EXTERNAL_SCRIPTS)\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @GET\n+  @Nonnull\n+  @TypeHint(ExternalScriptContainer.class)\n+  public Response getExternalScripts();\n+\n+  /**\n+   * Saves or updates the External Script.\n+   *\n+   * @param script the script to store or update\n+   * @return created status code (201) with uri to script resource.\n+   */\n+  @Path(ScriptService.METHOD_EXTERNAL_SCRIPT)\n+  @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+  @POST\n+  @Nonnull\n+  @TypeHint(TypeHint.NO_CONTENT.class)\n+  public Response saveOrUpdateExternalScript(ExternalScriptTO script);\n \n }\n",
            "diff_size": 254
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/196/ScriptService.java\nindex 47807010bb6..6d332de9bad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/196/ScriptService.java\n@@ -126,7 +126,8 @@ public interface ScriptService {\n     /*\n      * \n      */\n-    /**\n+\n+/**\n      * Gets a ScriptStepContainer for the given script.\n      * \n      * @param id\n@@ -309,4 +310,4 @@ public interface ScriptService {\n     @TypeHint(TypeHint.NO_CONTENT.class)\n     public Response saveOrUpdateExternalScript(ExternalScriptTO script);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/196/ScriptService.java\nindex 47807010bb6..6598d6e63ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/196/ScriptService.java\n@@ -13,6 +13,8 @@ package com.intuit.tank.api.service.v1.script;\n  * #L%\n  */\n \n+\n+\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import javax.ws.rs.Consumes;\n@@ -27,7 +29,6 @@ import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import com.intuit.tank.api.model.v1.script.ExternalScriptContainer;\n import com.intuit.tank.api.model.v1.script.ExternalScriptTO;\n import com.intuit.tank.api.model.v1.script.ScriptDescription;\n@@ -50,23 +51,49 @@ import com.webcohesion.enunciate.metadata.rs.TypeHint;\n  * @author dangleton\n  * \n  */\n+\n+\n+\n+\n @Path(ScriptService.SERVICE_RELATIVE_PATH)\n public interface ScriptService {\n \n     public static final String SERVICE_RELATIVE_PATH = \"/v1/script-service\";\n \n+\n     public static final String METHOD_PING = \"/ping\";\n \n+\n     public static final String METHOD_CONVERT_SCRIPT = \"/convert/script\";\n+\n+\n     public static final String METHOD_SCRIPT_DESCRIPTION = \"/script/description\";\n+\n+\n     public static final String METHOD_SCRIPT_STEPS = \"/script/steps\";\n+\n+\n     public static final String METHOD_SCRIPT = \"/script\";\n+\n+\n     public static final String METHOD_FILTER = \"/filter\";\n+\n+\n     public static final String METHOD_SCRIPT_UPDATE = \"/script/update\";\n+\n+\n     public static final String METHOD_SCRIPT_FILTER = \"/script/filter\";\n+\n+\n     public static final String METHOD_EXTERNAL_SCRIPT = \"/external/script\";\n+\n+\n     public static final String METHOD_EXTERNAL_SCRIPTS = \"/external/scripts\";\n+\n+\n     public static final String METHOD_SCRIPT_DOWNLOAD = \"/download/script\";\n+\n+\n     public static final String METHOD_HARNESS_DOWNLOAD = \"/download/harness/script\";\n \n     /**\n@@ -74,6 +101,8 @@ public interface ScriptService {\n      * \n      * @return non-null String value.\n      */\n+\n+\n     @Path(ScriptService.METHOD_PING)\n     @Produces({ MediaType.TEXT_PLAIN })\n     @GET\n@@ -88,6 +117,8 @@ public interface ScriptService {\n      *            octetStream of the recorded script\n      * @return created no content response with location field set to url of newly created object\n      */\n+\n+\n     @Path(ScriptService.METHOD_CONVERT_SCRIPT)\n     @Consumes({ MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -104,18 +135,21 @@ public interface ScriptService {\n      *            the id of the script to fetch\n      * @return the script in xml form\n      */\n+\n+\n     @Path(ScriptService.METHOD_HARNESS_DOWNLOAD + \"/{scriptId}\")\n     @Produces({ MediaType.APPLICATION_OCTET_STREAM })\n     @GET\n     @TypeHint(String.class)\n-    public Response downloadHarnessScript(\n-            @PathParam(\"scriptId\") Integer scriptId);\n+    public Response downloadHarnessScript(@PathParam(\"scriptId\") Integer scriptId);\n \n     /**\n      * Gets all the ScriptDescriptions in the system.\n      * \n      * @return List of ScriptDescriptions\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION)\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -137,13 +171,14 @@ public interface ScriptService {\n      *            the number of steps to return\n      * @return ScriptStepContainer for the given script\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT_STEPS + \"/{id}\")\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Nonnull\n     @TypeHint(ScriptStepContainer.class)\n-    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n-            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n+    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id, @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n \n     /**\n      * Gets a single Script Description.\n@@ -152,6 +187,8 @@ public interface ScriptService {\n      *            the id of the script description to fetch.\n      * @return the ScriptDescription\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -166,6 +203,8 @@ public interface ScriptService {\n      *            the id of the script to fetch\n      * @return the ScriptTO\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @GET\n@@ -180,6 +219,8 @@ public interface ScriptService {\n      *            the id of the script to fetch\n      * @return the ScriptTO\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT_DOWNLOAD + \"/{id}\")\n     @Produces({ MediaType.APPLICATION_OCTET_STREAM })\n     @GET\n@@ -195,6 +236,8 @@ public interface ScriptService {\n      * @return http status. Response containing a status code 204(no content) if successful and 400(bad request) if id\n      *         cannot be found on the system.\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n     @DELETE\n     @TypeHint(TypeHint.NO_CONTENT.class)\n@@ -209,6 +252,8 @@ public interface ScriptService {\n      *         found on the system.\n      * \n      */\n+\n+\n     @Path(ScriptService.METHOD_FILTER + \"/{id}\")\n     @DELETE\n     @TypeHint(TypeHint.NO_CONTENT.class)\n@@ -221,6 +266,8 @@ public interface ScriptService {\n      *            the id of the script to update\n      * @return created status code (201) with uri to new resource.\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT + \"/{id}\")\n     @PUT\n     @TypeHint(TypeHint.NO_CONTENT.class)\n@@ -233,6 +280,8 @@ public interface ScriptService {\n      *            Formdata should contain a ScriptTO with the formKey of xmlString\n      * @return Response String indicating the id of the script that was updated\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT_UPDATE)\n     @Consumes({ MediaType.MULTIPART_FORM_DATA, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.TEXT_PLAIN })\n@@ -248,6 +297,8 @@ public interface ScriptService {\n      *            the script to store\n      * @return created status code (201) with uri to new resource.\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT)\n     @POST\n     @Nonnull\n@@ -261,6 +312,8 @@ public interface ScriptService {\n      *            the filter request\n      * @return created status code (201) with uri to script resource.\n      */\n+\n+\n     @Path(ScriptService.METHOD_SCRIPT_FILTER)\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @POST\n@@ -275,6 +328,8 @@ public interface ScriptService {\n      *            the id of the script to fetch\n      * @return the ExternalScriptTO\n      */\n+\n+\n     @Path(ScriptService.METHOD_EXTERNAL_SCRIPT + \"/{id}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @GET\n@@ -287,6 +342,8 @@ public interface ScriptService {\n      * \n      * @return the ExternalScriptContainer\n      */\n+\n+\n     @Path(ScriptService.METHOD_EXTERNAL_SCRIPTS)\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @GET\n@@ -301,6 +358,8 @@ public interface ScriptService {\n      *            the script to store or update\n      * @return created status code (201) with uri to script resource.\n      */\n+\n+\n     @Path(ScriptService.METHOD_EXTERNAL_SCRIPT)\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -309,4 +368,4 @@ public interface ScriptService {\n     @TypeHint(TypeHint.NO_CONTENT.class)\n     public Response saveOrUpdateExternalScript(ExternalScriptTO script);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "146",
                    "column": "64",
                    "severity": "warning",
                    "message": "'@' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "146",
                    "column": "88",
                    "severity": "warning",
                    "message": "'@' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/196/ScriptService.java\nindex 47807010bb6..dfbe8707c6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/196/ScriptService.java\n@@ -143,16 +143,19 @@ public interface ScriptService {\n     @Nonnull\n     @TypeHint(ScriptStepContainer.class)\n     public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n-            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n+            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @ QueryParam(\"numSteps\")@ DefaultValue (\"-1\")\n \n-    /**\n+            int\n+            numSteps);\n+\n+      /**\n      * Gets a single Script Description.\n      * \n      * @param id\n      *            the id of the script description to fetch.\n      * @return the ScriptDescription\n      */\n-    @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n+      @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Nullable\n",
            "diff_size": 6
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "column": "72",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/196/ScriptService.java\nindex 47807010bb6..331e696a33e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/196/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/196/ScriptService.java\n@@ -142,17 +142,16 @@ public interface ScriptService {\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Nonnull\n     @TypeHint(ScriptStepContainer.class)\n-    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,\n-            @DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n+    public Response getScriptSteps(@Nonnull @PathParam(\"id\") Integer id,@DefaultValue(\"0\") @QueryParam(\"start\") int start, @QueryParam(\"numSteps\") @DefaultValue(\"-1\") int numSteps);\n \n-    /**\n+/**\n      * Gets a single Script Description.\n      * \n      * @param id\n      *            the id of the script description to fetch.\n      * @return the ScriptDescription\n      */\n-    @Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n+@Path(ScriptService.METHOD_SCRIPT_DESCRIPTION + \"/{id}\")\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Nullable\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}