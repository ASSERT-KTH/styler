{
    "project_name": "codefollower-H2-Research",
    "error_id": "458",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " */\npublic class TraceSystem implements TraceWriter {\n\t//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n    /**\n     * The parent trace level should be used.\n     */",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/458/TraceSystem.java\nindex 771c707c80f..e4a1cf4e0d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/458/TraceSystem.java\n@@ -25,8 +25,8 @@ import org.h2.util.IOUtils;\n  * the file will be opened and closed again (which is slower).\n  */\n public class TraceSystem implements TraceWriter {\n-\t//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n-    /**\n+//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n+/**\n      * The parent trace level should be used.\n      */\n     public static final int PARENT = -1;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/458/TraceSystem.java\nindex 771c707c80f..e8698ea2a35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/458/TraceSystem.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.message;\n \n import java.io.IOException;\n@@ -11,6 +12,7 @@ import java.io.PrintWriter;\n import java.io.Writer;\n import java.text.SimpleDateFormat;\n import java.util.concurrent.atomic.AtomicReferenceArray;\n+\n import org.h2.api.ErrorCode;\n import org.h2.engine.Constants;\n import org.h2.jdbc.JdbcException;\n@@ -25,331 +27,331 @@ import org.h2.util.IOUtils;\n  * the file will be opened and closed again (which is slower).\n  */\n public class TraceSystem implements TraceWriter {\n-\t//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n-    /**\n-     * The parent trace level should be used.\n-     */\n-    public static final int PARENT = -1;\n-\n-    /**\n-     * This trace level means nothing should be written.\n-     */\n-    public static final int OFF = 0;\n-\n-    /**\n-     * This trace level means only errors should be written.\n-     */\n-    public static final int ERROR = 1;\n-\n-    /**\n-     * This trace level means errors and informational messages should be\n-     * written.\n-     */\n-    public static final int INFO = 2;\n-\n-    /**\n-     * This trace level means all type of messages should be written.\n-     */\n-    public static final int DEBUG = 3;\n-\n-    /**\n-     * This trace level means all type of messages should be written, but\n-     * instead of using the trace file the messages should be written to SLF4J.\n-     */\n-    public static final int ADAPTER = 4;\n-\n-    /**\n-     * The default level for system out trace messages.\n-     */\n-    public static final int DEFAULT_TRACE_LEVEL_SYSTEM_OUT = OFF;\n-\n-    /**\n-     * The default level for file trace messages.\n-     */\n-    public static final int DEFAULT_TRACE_LEVEL_FILE = ERROR;\n-\n-    /**\n-     * The default maximum trace file size. It is currently 64 MB. Additionally,\n-     * there could be a .old file of the same size.\n-     */\n-    private static final int DEFAULT_MAX_FILE_SIZE = 64 * 1024 * 1024;\n-\n-    //\u7528\u4e8eSystemOut\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4\u5173\u95ed\n-    private static final int CHECK_SIZE_EACH_WRITES = 4096;\n-\n-    private int levelSystemOut = DEFAULT_TRACE_LEVEL_SYSTEM_OUT;\n-    //\u7528\u4e8e\u5199\u5165\u6587\u4ef6\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4ERROR\n-    private int levelFile = DEFAULT_TRACE_LEVEL_FILE;\n-    private int levelMax;\n-    private int maxFileSize = DEFAULT_MAX_FILE_SIZE;\n-    private String fileName;\n-    private final AtomicReferenceArray<Trace> traces =\n-            new AtomicReferenceArray<>(Trace.MODULE_NAMES.length);\n-    private SimpleDateFormat dateFormat;\n-    private Writer fileWriter;\n-    private PrintWriter printWriter;\n-    /**\n-     * Starts at -1 so that we check the file size immediately upon open. This\n-     * Can be important if we open and close the trace file without managing to\n-     * have written CHECK_SIZE_EACH_WRITES bytes each time.\n-     */\n-    private int checkSize = -1;\n-    private boolean closed;\n-    private boolean writingErrorLogged;\n-    private TraceWriter writer = this;\n-    private PrintStream sysOut = System.out;\n-\n-    /**\n-     * Create a new trace system object.\n-     *\n-     * @param fileName the file name\n-     */\n-    public TraceSystem(String fileName) {\n-        this.fileName = fileName;\n-        updateLevel();\n+  //\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n+  /**\n+   * The parent trace level should be used.\n+   */\n+  public static final int PARENT = -1;\n+\n+  /**\n+   * This trace level means nothing should be written.\n+   */\n+  public static final int OFF = 0;\n+\n+  /**\n+   * This trace level means only errors should be written.\n+   */\n+  public static final int ERROR = 1;\n+\n+  /**\n+   * This trace level means errors and informational messages should be\n+   * written.\n+   */\n+  public static final int INFO = 2;\n+\n+  /**\n+   * This trace level means all type of messages should be written.\n+   */\n+  public static final int DEBUG = 3;\n+\n+  /**\n+   * This trace level means all type of messages should be written, but\n+   * instead of using the trace file the messages should be written to SLF4J.\n+   */\n+  public static final int ADAPTER = 4;\n+\n+  /**\n+   * The default level for system out trace messages.\n+   */\n+  public static final int DEFAULT_TRACE_LEVEL_SYSTEM_OUT = OFF;\n+\n+  /**\n+   * The default level for file trace messages.\n+   */\n+  public static final int DEFAULT_TRACE_LEVEL_FILE = ERROR;\n+\n+  /**\n+   * The default maximum trace file size. It is currently 64 MB. Additionally,\n+   * there could be a .old file of the same size.\n+   */\n+  private static final int DEFAULT_MAX_FILE_SIZE = 64 * 1024 * 1024;\n+\n+  //\u7528\u4e8eSystemOut\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4\u5173\u95ed\n+  private static final int CHECK_SIZE_EACH_WRITES = 4096;\n+\n+  private int levelSystemOut = DEFAULT_TRACE_LEVEL_SYSTEM_OUT;\n+  //\u7528\u4e8e\u5199\u5165\u6587\u4ef6\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4ERROR\n+  private int levelFile = DEFAULT_TRACE_LEVEL_FILE;\n+  private int levelMax;\n+  private int maxFileSize = DEFAULT_MAX_FILE_SIZE;\n+  private String fileName;\n+  private final AtomicReferenceArray<Trace> traces =\n+      new AtomicReferenceArray<>(Trace.MODULE_NAMES.length);\n+  private SimpleDateFormat dateFormat;\n+  private Writer fileWriter;\n+  private PrintWriter printWriter;\n+  /**\n+   * Starts at -1 so that we check the file size immediately upon open. This\n+   * Can be important if we open and close the trace file without managing to\n+   * have written CHECK_SIZE_EACH_WRITES bytes each time.\n+   */\n+  private int checkSize = -1;\n+  private boolean closed;\n+  private boolean writingErrorLogged;\n+  private TraceWriter writer = this;\n+  private PrintStream sysOut = System.out;\n+\n+  /**\n+   * Create a new trace system object.\n+   *\n+   * @param fileName the file name\n+   */\n+  public TraceSystem(String fileName) {\n+    this.fileName = fileName;\n+    updateLevel();\n+  }\n+\n+  private void updateLevel() {\n+    levelMax = Math.max(levelSystemOut, levelFile);\n+  }\n+\n+  /**\n+   * Set the print stream to use instead of System.out.\n+   *\n+   * @param out the new print stream\n+   */\n+  public void setSysOut(PrintStream out) {\n+    this.sysOut = out;\n+  }\n+\n+  /**\n+   * Get or create a trace object for this module id. Trace modules with id\n+   * are cached.\n+   *\n+   * @param moduleId module id\n+   * @return the trace object\n+   */\n+  public Trace getTrace(int moduleId) {\n+    Trace t = traces.get(moduleId);\n+    if (t == null) {\n+      t = new Trace(writer, moduleId);\n+      if (!traces.compareAndSet(moduleId, null, t)) {\n+        t = traces.get(moduleId);\n+      }\n     }\n-\n-    private void updateLevel() {\n-        levelMax = Math.max(levelSystemOut, levelFile);\n-    }\n-\n-    /**\n-     * Set the print stream to use instead of System.out.\n-     *\n-     * @param out the new print stream\n-     */\n-    public void setSysOut(PrintStream out) {\n-        this.sysOut = out;\n+    return t;\n+  }\n+\n+  /**\n+   * Create a trace object for this module. Trace modules with names are not\n+   * cached.\n+   *\n+   * @param module the module name\n+   * @return the trace object\n+   */\n+  public Trace getTrace(String module) {\n+    return new Trace(writer, module);\n+  }\n+\n+  @Override\n+  public boolean isEnabled(int level) {\n+    if (levelMax == ADAPTER) {\n+      return writer.isEnabled(level);\n     }\n-\n-    /**\n-     * Get or create a trace object for this module id. Trace modules with id\n-     * are cached.\n-     *\n-     * @param moduleId module id\n-     * @return the trace object\n-     */\n-    public Trace getTrace(int moduleId) {\n-        Trace t = traces.get(moduleId);\n-        if (t == null) {\n-            t = new Trace(writer, moduleId);\n-            if (!traces.compareAndSet(moduleId, null, t)) {\n-                t = traces.get(moduleId);\n-            }\n+    return level <= this.levelMax;\n+  }\n+\n+  /**\n+   * Set the trace file name.\n+   *\n+   * @param name the file name\n+   */\n+  public void setFileName(String name) {\n+    this.fileName = name;\n+  }\n+\n+  /**\n+   * Set the maximum trace file size in bytes.\n+   *\n+   * @param max the maximum size\n+   */\n+  public void setMaxFileSize(int max) {\n+    this.maxFileSize = max;\n+  }\n+\n+  /**\n+   * Set the trace level to use for System.out\n+   *\n+   * @param level the new level\n+   */\n+  public void setLevelSystemOut(int level) {\n+    levelSystemOut = level;\n+    updateLevel();\n+  }\n+\n+  /**\n+   * Set the file trace level.\n+   *\n+   * @param level the new level\n+   */\n+  public void setLevelFile(int level) {\n+    if (level == ADAPTER) {\n+      String adapterClass = \"org.h2.message.TraceWriterAdapter\";\n+      try {\n+        writer = (TraceWriter) Class.forName(adapterClass).getDeclaredConstructor().newInstance();\n+      } catch (Throwable e) {\n+        e = DbException.get(ErrorCode.CLASS_NOT_FOUND_1, e, adapterClass);\n+        write(ERROR, Trace.DATABASE, adapterClass, e);\n+        return;\n+      }\n+      String name = fileName;\n+      if (name != null) {\n+        if (name.endsWith(Constants.SUFFIX_TRACE_FILE)) {\n+          name = name.substring(0, name.length() - Constants.SUFFIX_TRACE_FILE.length());\n         }\n-        return t;\n-    }\n-\n-    /**\n-     * Create a trace object for this module. Trace modules with names are not\n-     * cached.\n-     *\n-     * @param module the module name\n-     * @return the trace object\n-     */\n-    public Trace getTrace(String module) {\n-        return new Trace(writer, module);\n-    }\n-\n-    @Override\n-    public boolean isEnabled(int level) {\n-        if (levelMax == ADAPTER) {\n-            return writer.isEnabled(level);\n+        int idx = Math.max(name.lastIndexOf('/'), name.lastIndexOf('\\\\'));\n+        if (idx >= 0) {\n+          name = name.substring(idx + 1);\n         }\n-        return level <= this.levelMax;\n+        writer.setName(name);\n+      }\n     }\n+    levelFile = level;\n+    updateLevel();\n+  }\n \n-    /**\n-     * Set the trace file name.\n-     *\n-     * @param name the file name\n-     */\n-    public void setFileName(String name) {\n-        this.fileName = name;\n-    }\n+  public int getLevelFile() {\n+    return levelFile;\n+  }\n \n-    /**\n-     * Set the maximum trace file size in bytes.\n-     *\n-     * @param max the maximum size\n-     */\n-    public void setMaxFileSize(int max) {\n-        this.maxFileSize = max;\n+  private synchronized String format(String module, String s) {\n+    if (dateFormat == null) {\n+      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss \");\n     }\n-\n-    /**\n-     * Set the trace level to use for System.out\n-     *\n-     * @param level the new level\n-     */\n-    public void setLevelSystemOut(int level) {\n-        levelSystemOut = level;\n-        updateLevel();\n+    return dateFormat.format(System.currentTimeMillis()) + module + \": \" + s;\n+  }\n+\n+  @Override\n+  public void write(int level, int moduleId, String s, Throwable t) {\n+    write(level, Trace.MODULE_NAMES[moduleId], s, t);\n+  }\n+\n+  @Override\n+  public void write(int level, String module, String s, Throwable t) {\n+    if (level <= levelSystemOut || level > this.levelMax) {\n+      // level <= levelSystemOut: the system out level is set higher\n+      // level > this.level: the level for this module is set higher\n+      sysOut.println(format(module, s));\n+      if (t != null && levelSystemOut == DEBUG) {\n+        t.printStackTrace(sysOut);\n+      }\n     }\n-\n-    /**\n-     * Set the file trace level.\n-     *\n-     * @param level the new level\n-     */\n-    public void setLevelFile(int level) {\n-        if (level == ADAPTER) {\n-            String adapterClass = \"org.h2.message.TraceWriterAdapter\";\n-            try {\n-                writer = (TraceWriter) Class.forName(adapterClass).getDeclaredConstructor().newInstance();\n-            } catch (Throwable e) {\n-                e = DbException.get(ErrorCode.CLASS_NOT_FOUND_1, e, adapterClass);\n-                write(ERROR, Trace.DATABASE, adapterClass, e);\n-                return;\n-            }\n-            String name = fileName;\n-            if (name != null) {\n-                if (name.endsWith(Constants.SUFFIX_TRACE_FILE)) {\n-                    name = name.substring(0, name.length() - Constants.SUFFIX_TRACE_FILE.length());\n-                }\n-                int idx = Math.max(name.lastIndexOf('/'), name.lastIndexOf('\\\\'));\n-                if (idx >= 0) {\n-                    name = name.substring(idx + 1);\n-                }\n-                writer.setName(name);\n-            }\n-        }\n-        levelFile = level;\n-        updateLevel();\n+    if (fileName != null) {\n+      if (level <= levelFile) {\n+        writeFile(format(module, s), t);\n+      }\n     }\n+  }\n \n-    public int getLevelFile() {\n-        return levelFile;\n-    }\n-\n-    private synchronized String format(String module, String s) {\n-        if (dateFormat == null) {\n-            dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss \");\n-        }\n-        return dateFormat.format(System.currentTimeMillis()) + module + \": \" + s;\n-    }\n-\n-    @Override\n-    public void write(int level, int moduleId, String s, Throwable t) {\n-        write(level, Trace.MODULE_NAMES[moduleId], s, t);\n-    }\n-\n-    @Override\n-    public void write(int level, String module, String s, Throwable t) {\n-        if (level <= levelSystemOut || level > this.levelMax) {\n-            // level <= levelSystemOut: the system out level is set higher\n-            // level > this.level: the level for this module is set higher\n-            sysOut.println(format(module, s));\n-            if (t != null && levelSystemOut == DEBUG) {\n-                t.printStackTrace(sysOut);\n-            }\n+  private synchronized void writeFile(String s, Throwable t) {\n+    try {\n+      checkSize = (checkSize + 1) % CHECK_SIZE_EACH_WRITES;\n+      if (checkSize == 0) {\n+        closeWriter();\n+        if (maxFileSize > 0 && FileUtils.size(fileName) > maxFileSize) {\n+          String old = fileName + \".old\";\n+          FileUtils.delete(old);\n+          FileUtils.move(fileName, old);\n         }\n-        if (fileName != null) {\n-            if (level <= levelFile) {\n-                writeFile(format(module, s), t);\n-            }\n+      }\n+      if (!openWriter()) {\n+        return;\n+      }\n+      printWriter.println(s);\n+      if (t != null) {\n+        if (levelFile == ERROR && t instanceof JdbcException) {\n+          JdbcException se = (JdbcException) t;\n+          int code = se.getErrorCode();\n+          if (ErrorCode.isCommon(code)) {\n+            printWriter.println(t.toString());\n+          } else {\n+            t.printStackTrace(printWriter);\n+          }\n+        } else {\n+          t.printStackTrace(printWriter);\n         }\n+      }\n+      printWriter.flush();\n+      if (closed) {\n+        closeWriter();\n+      }\n+    } catch (Exception e) {\n+      logWritingError(e);\n     }\n+  }\n \n-    private synchronized void writeFile(String s, Throwable t) {\n-        try {\n-            checkSize = (checkSize + 1) % CHECK_SIZE_EACH_WRITES;\n-            if (checkSize == 0) {\n-                closeWriter();\n-                if (maxFileSize > 0 && FileUtils.size(fileName) > maxFileSize) {\n-                    String old = fileName + \".old\";\n-                    FileUtils.delete(old);\n-                    FileUtils.move(fileName, old);\n-                }\n-            }\n-            if (!openWriter()) {\n-                return;\n-            }\n-            printWriter.println(s);\n-            if (t != null) {\n-                if (levelFile == ERROR && t instanceof JdbcException) {\n-                    JdbcException se = (JdbcException) t;\n-                    int code = se.getErrorCode();\n-                    if (ErrorCode.isCommon(code)) {\n-                        printWriter.println(t.toString());\n-                    } else {\n-                        t.printStackTrace(printWriter);\n-                    }\n-                } else {\n-                    t.printStackTrace(printWriter);\n-                }\n-            }\n-            printWriter.flush();\n-            if (closed) {\n-                closeWriter();\n-            }\n-        } catch (Exception e) {\n-            logWritingError(e);\n-        }\n-    }\n-\n-    private void logWritingError(Exception e) {\n-        if (writingErrorLogged) {\n-            return;\n-        }\n-        writingErrorLogged = true;\n-        Exception se = DbException.get(\n-                ErrorCode.TRACE_FILE_ERROR_2, e, fileName, e.toString());\n-        // print this error only once\n-        fileName = null;\n-        sysOut.println(se);\n-        se.printStackTrace();\n-    }\n-\n-    private boolean openWriter() {\n-        if (printWriter == null) {\n-            try {\n-                FileUtils.createDirectories(FileUtils.getParent(fileName));\n-                if (FileUtils.exists(fileName) && !FileUtils.canWrite(fileName)) {\n-                    // read only database: don't log error if the trace file\n-                    // can't be opened\n-                    return false;\n-                }\n-                fileWriter = IOUtils.getBufferedWriter(\n-                        FileUtils.newOutputStream(fileName, true));\n-                printWriter = new PrintWriter(fileWriter, true);\n-            } catch (Exception e) {\n-                logWritingError(e);\n-                return false;\n-            }\n-        }\n-        return true;\n+  private void logWritingError(Exception e) {\n+    if (writingErrorLogged) {\n+      return;\n     }\n-\n-    private synchronized void closeWriter() {\n-        if (printWriter != null) {\n-            printWriter.flush();\n-            printWriter.close();\n-            printWriter = null;\n-        }\n-        if (fileWriter != null) {\n-            try {\n-                fileWriter.close();\n-            } catch (IOException e) {\n-                // ignore\n-            }\n-            fileWriter = null;\n+    writingErrorLogged = true;\n+    Exception se = DbException.get(\n+        ErrorCode.TRACE_FILE_ERROR_2, e, fileName, e.toString());\n+    // print this error only once\n+    fileName = null;\n+    sysOut.println(se);\n+    se.printStackTrace();\n+  }\n+\n+  private boolean openWriter() {\n+    if (printWriter == null) {\n+      try {\n+        FileUtils.createDirectories(FileUtils.getParent(fileName));\n+        if (FileUtils.exists(fileName) && !FileUtils.canWrite(fileName)) {\n+          // read only database: don't log error if the trace file\n+          // can't be opened\n+          return false;\n         }\n+        fileWriter = IOUtils.getBufferedWriter(\n+            FileUtils.newOutputStream(fileName, true));\n+        printWriter = new PrintWriter(fileWriter, true);\n+      } catch (Exception e) {\n+        logWritingError(e);\n+        return false;\n+      }\n     }\n-\n-    /**\n-     * Close the writers, and the files if required. It is still possible to\n-     * write after closing, however after each write the file is closed again\n-     * (slowing down tracing).\n-     */\n-    public void close() {\n-        closeWriter();\n-        closed = true;\n+    return true;\n+  }\n+\n+  private synchronized void closeWriter() {\n+    if (printWriter != null) {\n+      printWriter.flush();\n+      printWriter.close();\n+      printWriter = null;\n     }\n-\n-    @Override\n-    public void setName(String name) {\n-        // nothing to do (the file name is already set)\n+    if (fileWriter != null) {\n+      try {\n+        fileWriter.close();\n+      } catch (IOException e) {\n+        // ignore\n+      }\n+      fileWriter = null;\n     }\n+  }\n+\n+  /**\n+   * Close the writers, and the files if required. It is still possible to\n+   * write after closing, however after each write the file is closed again\n+   * (slowing down tracing).\n+   */\n+  public void close() {\n+    closeWriter();\n+    closed = true;\n+  }\n+\n+  @Override\n+  public void setName(String name) {\n+    // nothing to do (the file name is already set)\n+  }\n \n }\n",
            "diff_size": 440
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/458/TraceSystem.java\nindex 771c707c80f..b93cbd3ba06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/458/TraceSystem.java\n@@ -24,48 +24,66 @@ import org.h2.util.IOUtils;\n  * is possible to write after close was called, but that means for each write\n  * the file will be opened and closed again (which is slower).\n  */\n+\n+\n public class TraceSystem implements TraceWriter {\n-\t//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n+    //\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n     /**\n      * The parent trace level should be used.\n      */\n+\n+\n     public static final int PARENT = -1;\n \n     /**\n      * This trace level means nothing should be written.\n      */\n+\n+\n     public static final int OFF = 0;\n \n     /**\n      * This trace level means only errors should be written.\n      */\n+\n+\n     public static final int ERROR = 1;\n \n     /**\n      * This trace level means errors and informational messages should be\n      * written.\n      */\n+\n+\n     public static final int INFO = 2;\n \n     /**\n      * This trace level means all type of messages should be written.\n      */\n+\n+\n     public static final int DEBUG = 3;\n \n     /**\n      * This trace level means all type of messages should be written, but\n      * instead of using the trace file the messages should be written to SLF4J.\n      */\n+\n+\n     public static final int ADAPTER = 4;\n \n     /**\n      * The default level for system out trace messages.\n      */\n+\n+\n     public static final int DEFAULT_TRACE_LEVEL_SYSTEM_OUT = OFF;\n \n     /**\n      * The default level for file trace messages.\n      */\n+\n+\n     public static final int DEFAULT_TRACE_LEVEL_FILE = ERROR;\n \n     /**\n@@ -76,15 +94,13 @@ public class TraceSystem implements TraceWriter {\n \n     //\u7528\u4e8eSystemOut\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4\u5173\u95ed\n     private static final int CHECK_SIZE_EACH_WRITES = 4096;\n-\n     private int levelSystemOut = DEFAULT_TRACE_LEVEL_SYSTEM_OUT;\n     //\u7528\u4e8e\u5199\u5165\u6587\u4ef6\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4ERROR\n     private int levelFile = DEFAULT_TRACE_LEVEL_FILE;\n     private int levelMax;\n     private int maxFileSize = DEFAULT_MAX_FILE_SIZE;\n     private String fileName;\n-    private final AtomicReferenceArray<Trace> traces =\n-            new AtomicReferenceArray<>(Trace.MODULE_NAMES.length);\n+    private final AtomicReferenceArray<Trace> traces = new AtomicReferenceArray< >(Trace.MODULE_NAMES.length);\n     private SimpleDateFormat dateFormat;\n     private Writer fileWriter;\n     private PrintWriter printWriter;\n@@ -104,6 +120,7 @@ public class TraceSystem implements TraceWriter {\n      *\n      * @param fileName the file name\n      */\n+\n     public TraceSystem(String fileName) {\n         this.fileName = fileName;\n         updateLevel();\n@@ -118,6 +135,8 @@ public class TraceSystem implements TraceWriter {\n      *\n      * @param out the new print stream\n      */\n+\n+\n     public void setSysOut(PrintStream out) {\n         this.sysOut = out;\n     }\n@@ -129,6 +148,8 @@ public class TraceSystem implements TraceWriter {\n      * @param moduleId module id\n      * @return the trace object\n      */\n+\n+\n     public Trace getTrace(int moduleId) {\n         Trace t = traces.get(moduleId);\n         if (t == null) {\n@@ -147,6 +168,8 @@ public class TraceSystem implements TraceWriter {\n      * @param module the module name\n      * @return the trace object\n      */\n+\n+\n     public Trace getTrace(String module) {\n         return new Trace(writer, module);\n     }\n@@ -164,6 +187,8 @@ public class TraceSystem implements TraceWriter {\n      *\n      * @param name the file name\n      */\n+\n+\n     public void setFileName(String name) {\n         this.fileName = name;\n     }\n@@ -173,6 +198,8 @@ public class TraceSystem implements TraceWriter {\n      *\n      * @param max the maximum size\n      */\n+\n+\n     public void setMaxFileSize(int max) {\n         this.maxFileSize = max;\n     }\n@@ -182,6 +209,8 @@ public class TraceSystem implements TraceWriter {\n      *\n      * @param level the new level\n      */\n+\n+\n     public void setLevelSystemOut(int level) {\n         levelSystemOut = level;\n         updateLevel();\n@@ -192,6 +221,8 @@ public class TraceSystem implements TraceWriter {\n      *\n      * @param level the new level\n      */\n+\n+\n     public void setLevelFile(int level) {\n         if (level == ADAPTER) {\n             String adapterClass = \"org.h2.message.TraceWriterAdapter\";\n@@ -218,6 +249,7 @@ public class TraceSystem implements TraceWriter {\n         updateLevel();\n     }\n \n+\n     public int getLevelFile() {\n         return levelFile;\n     }\n@@ -293,8 +325,7 @@ public class TraceSystem implements TraceWriter {\n             return;\n         }\n         writingErrorLogged = true;\n-        Exception se = DbException.get(\n-                ErrorCode.TRACE_FILE_ERROR_2, e, fileName, e.toString());\n+        Exception se = DbException.get(ErrorCode.TRACE_FILE_ERROR_2, e, fileName, e.toString());\n         // print this error only once\n         fileName = null;\n         sysOut.println(se);\n@@ -310,8 +341,7 @@ public class TraceSystem implements TraceWriter {\n                     // can't be opened\n                     return false;\n                 }\n-                fileWriter = IOUtils.getBufferedWriter(\n-                        FileUtils.newOutputStream(fileName, true));\n+                fileWriter = IOUtils.getBufferedWriter(FileUtils.newOutputStream(fileName, true));\n                 printWriter = new PrintWriter(fileWriter, true);\n             } catch (Exception e) {\n                 logWritingError(e);\n@@ -332,6 +362,7 @@ public class TraceSystem implements TraceWriter {\n                 fileWriter.close();\n             } catch (IOException e) {\n                 // ignore\n+\n             }\n             fileWriter = null;\n         }\n@@ -342,6 +373,8 @@ public class TraceSystem implements TraceWriter {\n      * write after closing, however after each write the file is closed again\n      * (slowing down tracing).\n      */\n+\n+\n     public void close() {\n         closeWriter();\n         closed = true;\n@@ -350,6 +383,7 @@ public class TraceSystem implements TraceWriter {\n     @Override\n     public void setName(String name) {\n         // nothing to do (the file name is already set)\n+\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/458/TraceSystem.java\nindex 771c707c80f..e4a1cf4e0d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/458/TraceSystem.java\n@@ -25,8 +25,8 @@ import org.h2.util.IOUtils;\n  * the file will be opened and closed again (which is slower).\n  */\n public class TraceSystem implements TraceWriter {\n-\t//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n-    /**\n+//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n+/**\n      * The parent trace level should be used.\n      */\n     public static final int PARENT = -1;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/458/TraceSystem.java\nindex 771c707c80f..1c407dfe14f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/458/TraceSystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/458/TraceSystem.java\n@@ -25,8 +25,8 @@ import org.h2.util.IOUtils;\n  * the file will be opened and closed again (which is slower).\n  */\n public class TraceSystem implements TraceWriter {\n-\t//\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n-    /**\n+    //\u8ddf\u8e2a\u7ea7\u522b\u6570\u5b57\u8d8a\u5927\uff0c\u8868\u793a\u8f93\u5165\u7684\u4fe1\u606f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u6bd4\u5982\u8bbe\u4e3aDEBUG(3)\u65f6\uff0c\u5982\u679c\u8c03\u7528info\u65b9\u6cd5\u8f93\u51fa\uff0c\u663e\u7136INFO\u4e3a2<=3\uff0c\u6240\u4ee5\u8f93\u51fainof\u4fe1\u606f\n+/**\n      * The parent trace level should be used.\n      */\n     public static final int PARENT = -1;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}