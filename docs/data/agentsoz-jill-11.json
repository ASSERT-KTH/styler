{
    "project_name": "agentsoz-jill",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "228",
                "column": "5",
                "severity": "warning",
                "message": "'}' at column 5 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "        }\n      }\n    } while (true);\n    logger.debug(\"Pool {} is exiting\", poolid);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler/11/IntentionSelector.java\nindex b85c1f86f39..4e193f0a8b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler/11/IntentionSelector.java\n@@ -225,7 +225,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+    while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "228",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/intellij/11/IntentionSelector.java\nindex b85c1f86f39..ad9dc6bf856 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/intellij/11/IntentionSelector.java\n@@ -5,11 +5,11 @@ package io.github.agentsoz.jill.core;\n  * %% This program is free software: you can redistribute it and/or modify it under the terms of the\n  * GNU Lesser General Public License as published by the Free Software Foundation, either version 3\n  * of the License, or (at your option) any later version.\n- * \n+ *\n  * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n  * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  * General Lesser Public License for more details.\n- * \n+ *\n  * You should have received a copy of the GNU General Lesser Public License along with this program.\n  * If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>. #L%\n  */\n@@ -52,9 +52,9 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Constructs a new intention selector to manage a set of agents.\n-   * \n+   *\n    * @param poolid ID of this pool (must follow the sequence 0,1,2,3,...).\n-   * @param seed to initialise the random number generator\n+   * @param seed   to initialise the random number generator\n    */\n   public IntentionSelector(int poolid, long seed) {\n     this.poolid = poolid;\n@@ -243,7 +243,7 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Checks if this intention selector is idle.\n-   * \n+   *\n    * @return true if idle, false otherwise\n    */\n   public boolean isIdle() {\n@@ -264,10 +264,9 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Sets the idle status of the given agent managed by this intention selector.\n-   * \n-   * \n+   *\n    * @param agentId ID of the agent whose idle status is being set\n-   * @param idle the new idle status of this agent\n+   * @param idle    the new idle status of this agent\n    */\n   // FIXME: Threading issue when external threads changes activeagents\n   // and this thread is still iterating over activeagents\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'synchronized' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'synchronized' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 14, indentation should be the same level as line 162.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'synchronized' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "200",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/naturalize/11/IntentionSelector.java\nindex b85c1f86f39..19f85d83bb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/naturalize/11/IntentionSelector.java\n@@ -75,7 +75,8 @@ public class IntentionSelector implements Runnable {\n     HashSet<Integer> toRemove = new HashSet<Integer>();\n     do {\n       boolean idle = true;\n-      synchronized (extToRemove) {\n+\n+synchronized (extToRemove) {\n         if (!extToRemove.isEmpty()) {\n           for (int i : extToRemove) {\n             activeAgents.remove(i);\n@@ -91,15 +92,13 @@ public class IntentionSelector implements Runnable {\n           extToAdd.clear();\n         }\n       }\n-\n-      for (Integer i : activeAgents) {\n+for (Integer i : activeAgents) {\n \n         Agent agent = (Agent) GlobalState.agents.get(i);\n         Stack255 agentExecutionStack = (Stack255) (agent).getExecutionStack();\n         int esSize = agentExecutionStack.size();\n-        logger\n-            .trace(Log.logPrefix(agent.getId()) + \"'s execution stack is \" + esSize + \"/255 full\");\n-        if (agentExecutionStack == null || esSize == 0) {\n+        logger.trace(Log.logPrefix(agent.getId()) + \"'s execution stack is \" + esSize + \"/255 full\");\n+if (agentExecutionStack == null || esSize == 0) {\n           // Mark this agent as idle\n           // Main.setAgentIdle(i, true);\n           toRemove.add(i);\n@@ -123,7 +122,8 @@ public class IntentionSelector implements Runnable {\n           if (((Plan) node).hasfinished()) {\n             logger.debug(Log.logPrefix(agent.getId()) + \" finished executing plan \"\n                 + node.getClass().getSimpleName());\n-            synchronized (agentExecutionStack) {\n+\n+synchronized (agentExecutionStack) {\n               // Pop the plan off the stack\n               agentExecutionStack.pop();\n               // Pop the goal off the stack\n@@ -153,22 +153,19 @@ public class IntentionSelector implements Runnable {\n           bindings.clear();\n           for (int p = 0; p < ptypes.length; p++) {\n             PlanType ptype = (PlanType) GlobalState.planTypes.get(ptypes[p]);\n-\n-            try {\n+try {\n               // Create an object on this Plan type, so we can\n               // access its context condition\n-              Plan planInstance =\n-                  (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class)\n-                      .newInstance(GlobalState.agents.get(i), node, \"p\"));\n-              // Clear previously buffered context results if any\n+              Plan planInstance = (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class).newInstance(GlobalState.agents.get(i), node, \"p\"));\n+\n+// Clear previously buffered context results if any\n               agent.clearLastResults();\n               // Evaluate the context condition\n               if (planInstance.context()) {\n                 // Get the results of context query just performed\n                 Set<Belief> results = agent.getLastResults();\n                 // Add the results to the bindings\n-                bindings.add(planInstance,\n-                    (results == null) ? null : new LinkedHashSet<Belief>(results));\n+                bindings.add(planInstance, (results == null) ? null : new LinkedHashSet<Belief>(results));\n               }\n             } catch (NoSuchMethodException | SecurityException | InstantiationException\n                 | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n@@ -189,21 +186,18 @@ public class IntentionSelector implements Runnable {\n           // Now push the plan on to the intention stack\n           synchronized (agentExecutionStack) {\n             logger.debug(Log.logPrefix(agent.getId()) + \" choose an instance of plan \"\n-                + planInstance.getClass().getSimpleName() + \" to handle goal \"\n-                + gtype.getClass().getSimpleName());\n-            agentExecutionStack.push(planInstance);\n+                + planInstance.getClass().getSimpleName() + \" to handle goal \" + gtype.getClass().getSimpleName());\n+agentExecutionStack.push(planInstance);\n           }\n         }\n       }\n-\n-      if (!toRemove.isEmpty()) {\n+if (!toRemove.isEmpty()) {\n         for (int i : toRemove) {\n           activeAgents.remove(i);\n         }\n         toRemove.clear();\n       }\n-\n-      if (idle) {\n+if (idle) {\n         synchronized (lock) {\n           while (idle && !hasMessage) {\n             try {\n@@ -225,7 +219,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n@@ -285,4 +280,4 @@ public class IntentionSelector implements Runnable {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "column": "43",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "44",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "61",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "85",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "109",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "135",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "212",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/codebuff/11/IntentionSelector.java\nindex b85c1f86f39..ce9fae1866f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/codebuff/11/IntentionSelector.java\n@@ -14,6 +14,8 @@ package io.github.agentsoz.jill.core;\n  * If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>. #L%\n  */\n \n+\n+\n import io.github.agentsoz.jill.Main;\n import io.github.agentsoz.jill.config.GlobalConstant;\n import io.github.agentsoz.jill.core.beliefbase.Belief;\n@@ -25,10 +27,8 @@ import io.github.agentsoz.jill.struct.GoalType;\n import io.github.agentsoz.jill.struct.PlanType;\n import io.github.agentsoz.jill.util.Log;\n import io.github.agentsoz.jill.util.Stack255;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.lang.reflect.InvocationTargetException;\n import java.util.HashSet;\n import java.util.LinkedHashSet;\n@@ -38,12 +38,10 @@ import java.util.Set;\n public class IntentionSelector implements Runnable {\n \n   private final Logger logger = LoggerFactory.getLogger(Main.LOGGER_NAME);\n-\n   private final int poolid;\n   private final HashSet<Integer> activeAgents;\n   HashSet<Integer> extToRemove;\n   HashSet<Integer> extToAdd;\n-\n   private final Object lock;\n   private boolean hasMessage;\n   private boolean isIdle;\n@@ -56,6 +54,7 @@ public class IntentionSelector implements Runnable {\n    * @param poolid ID of this pool (must follow the sequence 0,1,2,3,...).\n    * @param seed to initialise the random number generator\n    */\n+\n   public IntentionSelector(int poolid, long seed) {\n     this.poolid = poolid;\n     this.lock = new Object();\n@@ -71,6 +70,7 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Runs this intentions selction thread.\n    */\n+\n   public void run() {\n     HashSet<Integer> toRemove = new HashSet<Integer>();\n     do {\n@@ -91,14 +91,11 @@ public class IntentionSelector implements Runnable {\n           extToAdd.clear();\n         }\n       }\n-\n       for (Integer i : activeAgents) {\n-\n         Agent agent = (Agent) GlobalState.agents.get(i);\n         Stack255 agentExecutionStack = (Stack255) (agent).getExecutionStack();\n         int esSize = agentExecutionStack.size();\n-        logger\n-            .trace(Log.logPrefix(agent.getId()) + \"'s execution stack is \" + esSize + \"/255 full\");\n+        logger.trace(Log.logPrefix(agent.getId()) + \"'s execution stack is \" + esSize + \"/255 full\");\n         if (agentExecutionStack == null || esSize == 0) {\n           // Mark this agent as idle\n           // Main.setAgentIdle(i, true);\n@@ -106,8 +103,7 @@ public class IntentionSelector implements Runnable {\n           continue;\n         }\n         if (esSize >= 255) {\n-          logger.error(Log.logPrefix(agent.getId())\n-              + \"'s execution stack has reached the maximum size of 255. Cannot continue.\");\n+          logger.error(Log.logPrefix(agent.getId()) + \"'s execution stack has reached the maximum size of 255. Cannot continue.\");\n           continue;\n         }\n \n@@ -121,8 +117,7 @@ public class IntentionSelector implements Runnable {\n         if (node instanceof Plan) {\n           // If done then pop this plan/goal\n           if (((Plan) node).hasfinished()) {\n-            logger.debug(Log.logPrefix(agent.getId()) + \" finished executing plan \"\n-                + node.getClass().getSimpleName());\n+            logger.debug(Log.logPrefix(agent.getId()) + \" finished executing plan \" + node.getClass().getSimpleName());\n             synchronized (agentExecutionStack) {\n               // Pop the plan off the stack\n               agentExecutionStack.pop();\n@@ -135,11 +130,9 @@ public class IntentionSelector implements Runnable {\n               }\n             }\n           } else {\n-            logger.debug(Log.logPrefix(agent.getId()) + \" is executing a step of plan \"\n-                + node.getClass().getSimpleName());\n+            logger.debug(Log.logPrefix(agent.getId()) + \" is executing a step of plan \" + node.getClass().getSimpleName());\n             ((Plan) node).step();\n           }\n-\n           continue;\n         }\n \n@@ -153,13 +146,10 @@ public class IntentionSelector implements Runnable {\n           bindings.clear();\n           for (int p = 0; p < ptypes.length; p++) {\n             PlanType ptype = (PlanType) GlobalState.planTypes.get(ptypes[p]);\n-\n             try {\n               // Create an object on this Plan type, so we can\n               // access its context condition\n-              Plan planInstance =\n-                  (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class)\n-                      .newInstance(GlobalState.agents.get(i), node, \"p\"));\n+              Plan planInstance = (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class).newInstance(GlobalState.agents.get(i), node, \"p\"));\n               // Clear previously buffered context results if any\n               agent.clearLastResults();\n               // Evaluate the context condition\n@@ -167,19 +157,16 @@ public class IntentionSelector implements Runnable {\n                 // Get the results of context query just performed\n                 Set<Belief> results = agent.getLastResults();\n                 // Add the results to the bindings\n-                bindings.add(planInstance,\n-                    (results == null) ? null : new LinkedHashSet<Belief>(results));\n+                bindings.add(planInstance, (results == null) ? null : new LinkedHashSet<Belief>(results));\n               }\n-            } catch (NoSuchMethodException | SecurityException | InstantiationException\n-                | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+            } catch (NoSuchMethodException|SecurityException| InstantiationException| IllegalAccessException| IllegalArgumentException| InvocationTargetException e) {\n               logger.error(\"Could not create plan object of type \" + ptype.getClass().getName(), e);\n             }\n           }\n           int numBindings = bindings.size();\n           if (numBindings == 0) {\n             // No plan options for this goal at this point in time, so move to the next agent\n-            logger.debug(Log.logPrefix(agent.getId()) + \" has no applicable plans for goal \"\n-                + gtype + \" and will continue to wait indefinitely\");\n+            logger.debug(Log.logPrefix(agent.getId()) + \" has no applicable plans for goal \" + gtype + \" and will continue to wait indefinitely\");\n             continue;\n           }\n           // Call the meta-level planning prior to plan selection\n@@ -188,21 +175,17 @@ public class IntentionSelector implements Runnable {\n           Plan planInstance = bindings.get(GlobalConstant.PLAN_SELECTION_POLICY);\n           // Now push the plan on to the intention stack\n           synchronized (agentExecutionStack) {\n-            logger.debug(Log.logPrefix(agent.getId()) + \" choose an instance of plan \"\n-                + planInstance.getClass().getSimpleName() + \" to handle goal \"\n-                + gtype.getClass().getSimpleName());\n+            logger.debug(Log.logPrefix(agent.getId()) + \" choose an instance of plan \" + planInstance.getClass().getSimpleName() + \" to handle goal \" + gtype.getClass().getSimpleName());\n             agentExecutionStack.push(planInstance);\n           }\n         }\n       }\n-\n       if (!toRemove.isEmpty()) {\n         for (int i : toRemove) {\n           activeAgents.remove(i);\n         }\n         toRemove.clear();\n       }\n-\n       if (idle) {\n         synchronized (lock) {\n           while (idle && !hasMessage) {\n@@ -225,7 +208,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+while(true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n@@ -233,6 +217,8 @@ public class IntentionSelector implements Runnable {\n    * Flags to this intention selection thread that an external message, to an agent managed by this\n    * thread, is waiting to be processed.\n    */\n+\n+\n   public void flagMessage() {\n     synchronized (lock) {\n       logger.debug(\"Pool {} received a new message\", poolid);\n@@ -246,6 +232,8 @@ public class IntentionSelector implements Runnable {\n    * \n    * @return true if idle, false otherwise\n    */\n+\n+\n   public boolean isIdle() {\n     return isIdle && !hasMessage;\n   }\n@@ -253,6 +241,8 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Terminates this intention selector thread.\n    */\n+\n+\n   public void shutdown() {\n     synchronized (lock) {\n       logger.debug(\"Pool {} received shutdown message\", poolid);\n@@ -271,6 +261,8 @@ public class IntentionSelector implements Runnable {\n    */\n   // FIXME: Threading issue when external threads changes activeagents\n   // and this thread is still iterating over activeagents\n+\n+\n   public void setAgentIdle(int agentId, boolean idle) {\n     // If agent is becoming active, and not already active\n     if (!idle /* && !activeAgents.contains(agentId) */) {\n@@ -285,4 +277,4 @@ public class IntentionSelector implements Runnable {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_random/11/IntentionSelector.java\nindex b85c1f86f39..4e193f0a8b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_random/11/IntentionSelector.java\n@@ -225,7 +225,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+    while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "227",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "227",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_three_grams/11/IntentionSelector.java\nindex b85c1f86f39..2a1f8c84540 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/11/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_three_grams/11/IntentionSelector.java\n@@ -224,8 +224,8 @@ public class IntentionSelector implements Runnable {\n         if (shutdown) {\n           break;\n         }\n-      }\n-    } while (true);\n+      } }\n+    while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}