{
    "project_name": "cloudera-director-sdk",
    "error_id": "254",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/254/Eula.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/254/Eula.java\nindex 753d529478e..aba84389582 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/254/Eula.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/254/Eula.java\n@@ -22,28 +22,38 @@ package com.cloudera.director.client.v11.model;\n public class Eula {\n   /* If the Eula is accepted */\n   private Boolean accepted;\n-  public Eula() { }\n+\n+  public Eula() {\n+  }\n \n   public Eula(Boolean accepted) {\n     this.accepted = accepted;\n   }\n-public Boolean getAccepted() {\n+\n+  public Boolean getAccepted() {\n     return accepted;\n   }\n+\n   public void setAccepted(Boolean accepted) {\n     this.accepted = accepted;\n   }\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n \n     Eula other = (Eula) o; // NOPMD\n \n     if (accepted != null ?\n         !accepted.equals(other.accepted) :\n-        other.accepted != null) return false;\n+        other.accepted != null) {\n+      return false;\n+    }\n     return true;\n   }\n \n@@ -55,7 +65,7 @@ public Boolean getAccepted() {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Eula {\" + newLine);\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "34",
                    "column": "26",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/254/Eula.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/254/Eula.java\nindex 753d529478e..460d43f3527 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/254/Eula.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/254/Eula.java\n@@ -1,34 +1,21 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v11.model;\n \n-\n public class Eula {\n   /* If the Eula is accepted */\n   private Boolean accepted;\n-  public Eula() { }\n+\n+public Eula() {\n+  }\n \n   public Eula(Boolean accepted) {\n     this.accepted = accepted;\n   }\n+\n public Boolean getAccepted() {\n-    return accepted;\n+  return accepted;\n   }\n   public void setAccepted(Boolean accepted) {\n     this.accepted = accepted;\n@@ -37,13 +24,14 @@ public Boolean getAccepted() {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    Eula other = (Eula) o;\n \n-    Eula other = (Eula) o; // NOPMD\n+// NOPMD\n \n-    if (accepted != null ?\n-        !accepted.equals(other.accepted) :\n-        other.accepted != null) return false;\n+    if (accepted != null ?!accepted.equals(other.accepted) : other.accepted != null) return false;\n     return true;\n   }\n \n@@ -55,7 +43,7 @@ public Boolean getAccepted() {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Eula {\" + newLine);\n@@ -63,5 +51,4 @@ public Boolean getAccepted() {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "27",
                    "column": "17",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "27",
                    "column": "18",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "45",
                    "column": "18",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "48",
                    "column": "23",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "50",
                    "column": "25",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "50",
                    "column": "25",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "50",
                    "column": "58",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "58",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "58",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "58",
                    "column": "43",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "58",
                    "column": "64",
                    "severity": "warning",
                    "message": "':' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "58",
                    "column": "64",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/254/Eula.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/254/Eula.java\nindex 753d529478e..597d7ff4962 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/254/Eula.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/254/Eula.java\n@@ -18,50 +18,57 @@\n \n package com.cloudera.director.client.v11.model;\n \n-\n public class Eula {\n   /* If the Eula is accepted */\n+\n   private Boolean accepted;\n-  public Eula() { }\n+\n+\n+  public Eula() {}\n \n   public Eula(Boolean accepted) {\n-    this.accepted = accepted;\n-  }\n-public Boolean getAccepted() {\n+                                this.accepted = accepted;\n+                  }\n+\n+  public Boolean getAccepted() {\n     return accepted;\n   }\n+\n   public void setAccepted(Boolean accepted) {\n     this.accepted = accepted;\n   }\n \n+\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null||\n+        getClass() != o.getClass()) return false;\n \n-    Eula other = (Eula) o; // NOPMD\n+    Eula other = (Eula)o; // NOPMD\n \n-    if (accepted != null ?\n-        !accepted.equals(other.accepted) :\n-        other.accepted != null) return false;\n+    if (accepted != null?!accepted.equals(other.accepted): other.accepted != null) return false;\n     return true;\n   }\n \n+\n   @Override\n   public int hashCode() {\n     int result = 0;\n-    result = 31 * result + (accepted != null ? accepted.hashCode() : 0);\n+    result = 31*result + (accepted != null? accepted.hashCode():0);\n     return result;\n   }\n \n+\n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n+\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Eula {\" + newLine);\n-    sb.append(\"  accepted: \").append(accepted).append(newLine);\n+    sb.append(\"  accepted: \")\n+      .append(accepted).append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}