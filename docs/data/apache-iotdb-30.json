{
    "project_name": "apache-iotdb",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.qp.strategy.optimizer;\n\nimport org.apache.iotdb.db.exception.query.LogicalOptimizeException;\nimport org.apache.iotdb.db.qp.constant.FilterConstant.FilterType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/30/DnfFilterOptimizer.java\nindex fdb59106a72..a5a924770ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/30/DnfFilterOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.query.LogicalOptimizeException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/30/DnfFilterOptimizer.java\nindex fdb59106a72..089621e68ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/30/DnfFilterOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.query.LogicalOptimizeException;\n@@ -130,7 +131,7 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * If operator is leaf, add it in newChildrenList. If operator is And, add its children to\n    * newChildrenList.\n    *\n-   * @param operator which children should be added in new children list\n+   * @param operator        which children should be added in new children list\n    * @param newChildrenList new children list\n    * @throws LogicalOptimizeException exception in DNF optimizing\n    */\n@@ -150,7 +151,7 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * used by getDnf. If operator is leaf or And, add operator to newChildrenList. Else add\n    * operator's children to newChildrenList\n    *\n-   * @param operator to be added in new children list\n+   * @param operator        to be added in new children list\n    * @param newChildrenList new children list\n    */\n   private void addChildOpInOr(FilterOperator operator, List<FilterOperator> newChildrenList) {\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/30/DnfFilterOptimizer.java\nindex fdb59106a72..e4cc72787ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/30/DnfFilterOptimizer.java\n@@ -21,7 +21,6 @@ package org.apache.iotdb.db.qp.strategy.optimizer;\n import org.apache.iotdb.db.exception.query.LogicalOptimizeException;\n import org.apache.iotdb.db.qp.constant.FilterConstant.FilterType;\n import org.apache.iotdb.db.qp.logical.crud.FilterOperator;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -34,16 +33,15 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * @return FilterOperator optimized operator\n    * @throws LogicalOptimizeException exception in DNF optimize\n    */\n+\n   @Override\n   public FilterOperator optimize(FilterOperator filter) throws LogicalOptimizeException {\n     return getDnf(filter);\n   }\n \n   private void dealWithLeftAndRightAndChildren(\n-      List<FilterOperator> leftAndChildren,\n-      List<FilterOperator> rightAndChildren,\n-      List<FilterOperator> newChildrenList)\n-      throws LogicalOptimizeException {\n+    List<FilterOperator> leftAndChildren,\n+    List<FilterOperator> rightAndChildren, List<FilterOperator> newChildrenList) throws LogicalOptimizeException {\n     for (FilterOperator leftAndChild : leftAndChildren) {\n       for (FilterOperator rightAndChild : rightAndChildren) {\n         FilterOperator r = mergeToConjunction(leftAndChild.copy(), rightAndChild.copy());\n@@ -58,8 +56,10 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n     }\n     List<FilterOperator> childOperators = filter.getChildren();\n     if (childOperators.size() != 2) {\n-      throw new LogicalOptimizeException(\n-          \"node :\" + filter.getFilterName() + \" has \" + childOperators.size() + \" children\");\n+      throw new LogicalOptimizeException(\"node :\" + filter.getFilterName()\n+      + \" has \"\n+      + childOperators.size()\n+      + \" children\");\n     }\n     FilterOperator left = getDnf(childOperators.get(0));\n     FilterOperator right = getDnf(childOperators.get(1));\n@@ -79,8 +79,7 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n         }\n         break;\n       default:\n-        throw new LogicalOptimizeException(\n-            \"get DNF failed, this tokenType is:\" + filter.getFilterType());\n+        throw new LogicalOptimizeException(\"get DNF failed, this tokenType is:\" + filter.getFilterType());\n     }\n     filter.setChildren(newChildrenList);\n     return filter;\n@@ -97,8 +96,8 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * @return merged operator\n    * @throws LogicalOptimizeException exception in DNF optimizing\n    */\n-  private FilterOperator mergeToConjunction(FilterOperator operator1, FilterOperator operator2)\n-      throws LogicalOptimizeException {\n+\n+  private FilterOperator mergeToConjunction(FilterOperator operator1, FilterOperator operator2) throws LogicalOptimizeException {\n     List<FilterOperator> retChildrenList = new ArrayList<>();\n     addChildOpInAnd(operator1, retChildrenList);\n     addChildOpInAnd(operator2, retChildrenList);\n@@ -115,6 +114,7 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * @param child operator\n    * @return children operator\n    */\n+\n   private List<FilterOperator> getAndChild(FilterOperator child) {\n     if (child.getFilterType() == FilterType.KW_OR) {\n       return child.getChildren();\n@@ -134,15 +134,14 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * @param newChildrenList new children list\n    * @throws LogicalOptimizeException exception in DNF optimizing\n    */\n-  private void addChildOpInAnd(FilterOperator operator, List<FilterOperator> newChildrenList)\n-      throws LogicalOptimizeException {\n+\n+  private void addChildOpInAnd(FilterOperator operator, List<FilterOperator> newChildrenList) throws LogicalOptimizeException {\n     if (operator.isLeaf()) {\n       newChildrenList.add(operator);\n     } else if (operator.getFilterType() == FilterType.KW_AND) {\n       newChildrenList.addAll(operator.getChildren());\n     } else {\n-      throw new LogicalOptimizeException(\n-          \"add all children of an OR operator to newChildrenList in AND\");\n+      throw new LogicalOptimizeException(\"add all children of an OR operator to newChildrenList in AND\");\n     }\n   }\n \n@@ -153,6 +152,7 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n    * @param operator to be added in new children list\n    * @param newChildrenList new children list\n    */\n+\n   private void addChildOpInOr(FilterOperator operator, List<FilterOperator> newChildrenList) {\n     if (operator.isLeaf() || operator.getFilterType() == FilterType.KW_AND) {\n       newChildrenList.add(operator);\n@@ -160,4 +160,4 @@ public class DnfFilterOptimizer implements IFilterOptimizer {\n       newChildrenList.addAll(operator.getChildren());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/30/DnfFilterOptimizer.java\nindex fdb59106a72..a5a924770ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/30/DnfFilterOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.query.LogicalOptimizeException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/30/DnfFilterOptimizer.java\nindex fdb59106a72..a5a924770ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/30/DnfFilterOptimizer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/30/DnfFilterOptimizer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.strategy.optimizer;\n \n import org.apache.iotdb.db.exception.query.LogicalOptimizeException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}