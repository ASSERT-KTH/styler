{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "657",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.direct.event;\n\nimport com.google.common.collect.ImmutableList;\nimport gov.hhs.fha.nhinc.direct.messagemonitoring.util.MessageMonitoringUtil;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/657/DirectEvent.java\nindex e0b0d470e72..65ae875e045 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/657/DirectEvent.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.direct.event;\n-\n import com.google.common.collect.ImmutableList;\n import gov.hhs.fha.nhinc.direct.messagemonitoring.util.MessageMonitoringUtil;\n import gov.hhs.fha.nhinc.event.BaseEvent;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/657/DirectEvent.java\nindex e0b0d470e72..436c818c8d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/657/DirectEvent.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.event;\n \n import com.google.common.collect.ImmutableList;\n@@ -49,146 +50,146 @@ import org.slf4j.LoggerFactory;\n  */\n public class DirectEvent extends BaseEvent {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DirectEvent.class);\n-\n-    private static final String XML_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n-\n-    /*\n-     * JSON fields and values. (should use a standard enum here? )\n-     */\n-    private static final String ACTION = \"action\";\n-    private static final String MESSAGE_ID = \"message_id\";\n-    private static final String PARENT_MESSAGE_ID = \"parent_message_id\";\n-    private static final String TIMESTAMP = \"timestamp\";\n-    private static final String STATUSES = \"statuses\";\n-    private static final String ERROR_MSG = \"error_msg\";\n-    private static final String SENDER = \"sender\";\n-    private static final String RECIPIENT = \"recipient\";\n-    private static final String SERVICE_TYPE = \"Direct\";\n-    private static final String PROPERTY_FILE_NAME = \"gateway\";\n-    private static final String PROPERTY_NAME = \"localHomeCommunityId\";\n-    private static final List<String> STATUS_SUCCESS = ImmutableList.of(\"success\");\n-    private static final List<String> STATUS_ERROR = ImmutableList.of(\"error\");\n-\n-    private final String name;\n+  private static final Logger LOG = LoggerFactory.getLogger(DirectEvent.class);\n+\n+  private static final String XML_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n+\n+  /*\n+   * JSON fields and values. (should use a standard enum here? )\n+   */\n+  private static final String ACTION = \"action\";\n+  private static final String MESSAGE_ID = \"message_id\";\n+  private static final String PARENT_MESSAGE_ID = \"parent_message_id\";\n+  private static final String TIMESTAMP = \"timestamp\";\n+  private static final String STATUSES = \"statuses\";\n+  private static final String ERROR_MSG = \"error_msg\";\n+  private static final String SENDER = \"sender\";\n+  private static final String RECIPIENT = \"recipient\";\n+  private static final String SERVICE_TYPE = \"Direct\";\n+  private static final String PROPERTY_FILE_NAME = \"gateway\";\n+  private static final String PROPERTY_NAME = \"localHomeCommunityId\";\n+  private static final List<String> STATUS_SUCCESS = ImmutableList.of(\"success\");\n+  private static final List<String> STATUS_ERROR = ImmutableList.of(\"error\");\n+\n+  private final String name;\n+\n+  /**\n+   * @param name of the triggered event.\n+   */\n+  public DirectEvent(String name) {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public String getEventName() {\n+    return name;\n+  }\n+\n+  /**\n+   * Builder for the Direct Event.\n+   */\n+  public static final class Builder {\n+\n+    private MimeMessage message;\n+    private String errorMsg;\n \n     /**\n-     * @param name of the triggered event.\n+     * @param mimeMessage source for messageid, sender, recips, etc\n+     * @return this builder.\n      */\n-    public DirectEvent(String name) {\n-        this.name = name;\n+    public Builder mimeMessage(MimeMessage mimeMessage) {\n+      this.message = mimeMessage;\n+      return this;\n     }\n \n     /**\n-     * {@inheritDoc}\n+     * Create an event with an error status.\n+     *\n+     * @param str error message encountered.\n+     * @return this builder.\n      */\n-    @Override\n-    public String getEventName() {\n-        return name;\n+    public Builder errorMsg(String str) {\n+      this.errorMsg = str;\n+      return this;\n     }\n \n     /**\n-     * Builder for the Direct Event.\n+     * Build a direct event.\n+     *\n+     * @param type - {@link DirectEventType} to build.\n+     * @return the created event.\n      */\n-    public static final class Builder {\n-\n-        private MimeMessage message;\n-        private String errorMsg;\n-\n-        /**\n-         * @param mimeMessage source for messageid, sender, recips, etc\n-         * @return this builder.\n-         */\n-        public Builder mimeMessage(MimeMessage mimeMessage) {\n-            this.message = mimeMessage;\n-            return this;\n-        }\n-\n-        /**\n-         * Create an event with an error status.\n-         *\n-         * @param str error message encountered.\n-         * @return this builder.\n-         */\n-        public Builder errorMsg(String str) {\n-            this.errorMsg = str;\n-            return this;\n+    public DirectEvent build(DirectEventType type) {\n+\n+      String eventName = type.toString();\n+      final DirectEvent event = new DirectEvent(eventName);\n+      event.setTransactionID(\"\");\n+      event.setServiceType(SERVICE_TYPE);\n+      try {\n+        event.setInitiatorHcid(PropertyAccessor.getInstance().getProperty(PROPERTY_FILE_NAME, PROPERTY_NAME));\n+        event.setRespondingHcid(PropertyAccessor.getInstance().getProperty(PROPERTY_FILE_NAME, PROPERTY_NAME));\n+      } catch (PropertyAccessException e) {\n+        LOG.error(\"Error reading local home community from gateway properties file.\", e);\n+      }\n+      JSONObject jsonDescription = new JSONObject();\n+      addToJSON(jsonDescription, TIMESTAMP, formatDateForXml(new Date()));\n+      addToJSON(jsonDescription, ACTION, eventName);\n+      addToJSON(jsonDescription, ERROR_MSG, errorMsg);\n+      if (message != null) {\n+        try {\n+          addToJSON(jsonDescription, SENDER, message.getSender());\n+          addToJSON(jsonDescription, RECIPIENT, message.getAllRecipients());\n+          String parentMessageID = getParentMessageId(message);\n+          //set the parent message ID in the JSON string if its\n+          //also set it in the transaction id\n+          if (NullChecker.isNotNullish(parentMessageID)) {\n+            addToJSON(jsonDescription, PARENT_MESSAGE_ID, parentMessageID);\n+            event.setTransactionID(parentMessageID);\n+          } else {\n+            event.setTransactionID(message.getMessageID());\n+          }\n+\n+          String messageId = message.getMessageID();\n+          event.setMessageID(messageId);\n+          addToJSON(jsonDescription, MESSAGE_ID, messageId);\n+\n+        } catch (MessagingException e) {\n+          LOG.error(\"Error building JSON (Messaging Exception)\", e);\n         }\n+      }\n \n-        /**\n-         * Build a direct event.\n-         *\n-         * @param type - {@link DirectEventType} to build.\n-         * @return the created event.\n-         */\n-        public DirectEvent build(DirectEventType type) {\n-\n-            String eventName = type.toString();\n-            final DirectEvent event = new DirectEvent(eventName);\n-            event.setTransactionID(\"\");\n-            event.setServiceType(SERVICE_TYPE);\n-            try {\n-                event.setInitiatorHcid(PropertyAccessor.getInstance().getProperty(PROPERTY_FILE_NAME, PROPERTY_NAME));\n-                event.setRespondingHcid(PropertyAccessor.getInstance().getProperty(PROPERTY_FILE_NAME, PROPERTY_NAME));\n-            } catch (PropertyAccessException e) {\n-                LOG.error(\"Error reading local home community from gateway properties file.\", e);\n-            }\n-            JSONObject jsonDescription = new JSONObject();\n-            addToJSON(jsonDescription, TIMESTAMP, formatDateForXml(new Date()));\n-            addToJSON(jsonDescription, ACTION, eventName);\n-            addToJSON(jsonDescription, ERROR_MSG, errorMsg);\n-            if (message != null) {\n-                try {\n-                    addToJSON(jsonDescription, SENDER, message.getSender());\n-                    addToJSON(jsonDescription, RECIPIENT, message.getAllRecipients());\n-                    String parentMessageID = getParentMessageId(message);\n-                    //set the parent message ID in the JSON string if its\n-                    //also set it in the transaction id\n-                    if (NullChecker.isNotNullish(parentMessageID)) {\n-                        addToJSON(jsonDescription, PARENT_MESSAGE_ID, parentMessageID);\n-                        event.setTransactionID(parentMessageID);\n-                    } else {\n-                        event.setTransactionID(message.getMessageID());\n-                    }\n-\n-                    String messageId = message.getMessageID();\n-                    event.setMessageID(messageId);\n-                    addToJSON(jsonDescription, MESSAGE_ID, messageId);\n-\n-                } catch (MessagingException e) {\n-                    LOG.error(\"Error building JSON (Messaging Exception)\", e);\n-                }\n-            }\n-\n-            if (errorMsg == null) {\n-                addToJSON(jsonDescription, STATUSES, STATUS_SUCCESS);\n-            } else {\n-                addToJSON(jsonDescription, STATUSES, STATUS_ERROR);\n-            }\n-\n-            event.setDescription(jsonDescription.toString());\n-            return event;\n-        }\n+      if (errorMsg == null) {\n+        addToJSON(jsonDescription, STATUSES, STATUS_SUCCESS);\n+      } else {\n+        addToJSON(jsonDescription, STATUSES, STATUS_ERROR);\n+      }\n \n-        private void addToJSON(JSONObject jsonObject, String key, Object value) {\n-            try {\n-                jsonObject.put(key, value);\n-            } catch (JSONException e) {\n-                LOG.error(\"Exception while building JSON description for direct event.\", e);\n-            }\n-        }\n+      event.setDescription(jsonDescription.toString());\n+      return event;\n     }\n \n-    private static String formatDateForXml(Date date) {\n-        return new SimpleDateFormat(XML_DATE_FORMAT, Locale.getDefault()).format(date);\n+    private void addToJSON(JSONObject jsonObject, String key, Object value) {\n+      try {\n+        jsonObject.put(key, value);\n+      } catch (JSONException e) {\n+        LOG.error(\"Exception while building JSON description for direct event.\", e);\n+      }\n     }\n+  }\n \n-    private static String getParentMessageId(MimeMessage msg) {\n-        try {\n-            return MessageMonitoringUtil.getParentMessageId(msg);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+  private static String formatDateForXml(Date date) {\n+    return new SimpleDateFormat(XML_DATE_FORMAT, Locale.getDefault()).format(date);\n+  }\n \n+  private static String getParentMessageId(MimeMessage msg) {\n+    try {\n+      return MessageMonitoringUtil.getParentMessageId(msg);\n+    } catch (Exception e) {\n+      return null;\n     }\n+\n+  }\n }\n",
            "diff_size": 180
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/657/DirectEvent.java\nindex e0b0d470e72..e6c0744de8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/657/DirectEvent.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.event;\n \n import com.google.common.collect.ImmutableList;\n@@ -159,15 +160,15 @@ public class DirectEvent extends BaseEvent {\n                     LOG.error(\"Error building JSON (Messaging Exception)\", e);\n                 }\n             }\n-\n-            if (errorMsg == null) {\n+if (errorMsg == null) {\n                 addToJSON(jsonDescription, STATUSES, STATUS_SUCCESS);\n             } else {\n                 addToJSON(jsonDescription, STATUSES, STATUS_ERROR);\n             }\n \n             event.setDescription(jsonDescription.toString());\n-            return event;\n+\n+return event;\n         }\n \n         private void addToJSON(JSONObject jsonObject, String key, Object value) {\n@@ -191,4 +192,4 @@ public class DirectEvent extends BaseEvent {\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "159",
                    "column": "23",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "175",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "177",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/657/DirectEvent.java\nindex e0b0d470e72..fc07312685e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/657/DirectEvent.java\n@@ -47,10 +47,12 @@ import org.slf4j.LoggerFactory;\n /**\n  * {@link Event} Implementation for Direct.\n  */\n-public class DirectEvent extends BaseEvent {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DirectEvent.class);\n \n+public class DirectEvent extends\n+    BaseEvent {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DirectEvent.class);\n     private static final String XML_DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";\n \n     /*\n@@ -69,12 +71,12 @@ public class DirectEvent extends BaseEvent {\n     private static final String PROPERTY_NAME = \"localHomeCommunityId\";\n     private static final List<String> STATUS_SUCCESS = ImmutableList.of(\"success\");\n     private static final List<String> STATUS_ERROR = ImmutableList.of(\"error\");\n-\n     private final String name;\n \n     /**\n      * @param name of the triggered event.\n      */\n+\n     public DirectEvent(String name) {\n         this.name = name;\n     }\n@@ -82,6 +84,8 @@ public class DirectEvent extends BaseEvent {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     @Override\n     public String getEventName() {\n         return name;\n@@ -90,6 +94,8 @@ public class DirectEvent extends BaseEvent {\n     /**\n      * Builder for the Direct Event.\n      */\n+\n+\n     public static final class Builder {\n \n         private MimeMessage message;\n@@ -99,6 +105,8 @@ public class DirectEvent extends BaseEvent {\n          * @param mimeMessage source for messageid, sender, recips, etc\n          * @return this builder.\n          */\n+\n+\n         public Builder mimeMessage(MimeMessage mimeMessage) {\n             this.message = mimeMessage;\n             return this;\n@@ -110,6 +118,8 @@ public class DirectEvent extends BaseEvent {\n          * @param str error message encountered.\n          * @return this builder.\n          */\n+\n+\n         public Builder errorMsg(String str) {\n             this.errorMsg = str;\n             return this;\n@@ -121,9 +131,11 @@ public class DirectEvent extends BaseEvent {\n          * @param type - {@link DirectEventType} to build.\n          * @return the created event.\n          */\n-        public DirectEvent build(DirectEventType type) {\n \n+\n+        public DirectEvent build(DirectEventType type) {\n             String eventName = type.toString();\n+\n             final DirectEvent event = new DirectEvent(eventName);\n             event.setTransactionID(\"\");\n             event.setServiceType(SERVICE_TYPE);\n@@ -144,39 +156,43 @@ public class DirectEvent extends BaseEvent {\n                     String parentMessageID = getParentMessageId(message);\n                     //set the parent message ID in the JSON string if its\n                     //also set it in the transaction id\n-                    if (NullChecker.isNotNullish(parentMessageID)) {\n+                    if(NullChecker.isNotNullish(parentMessageID)) {\n                         addToJSON(jsonDescription, PARENT_MESSAGE_ID, parentMessageID);\n                         event.setTransactionID(parentMessageID);\n-                    } else {\n-                        event.setTransactionID(message.getMessageID());\n                     }\n \n+\n+else {\n+                        event.setTransactionID(message.getMessageID());\n+                    }\n                     String messageId = message.getMessageID();\n                     event.setMessageID(messageId);\n                     addToJSON(jsonDescription, MESSAGE_ID, messageId);\n-\n                 } catch (MessagingException e) {\n                     LOG.error(\"Error building JSON (Messaging Exception)\", e);\n                 }\n             }\n-\n-            if (errorMsg == null) {\n+            if(errorMsg == null) {\n                 addToJSON(jsonDescription, STATUSES, STATUS_SUCCESS);\n-            } else {\n-                addToJSON(jsonDescription, STATUSES, STATUS_ERROR);\n             }\n \n+\n+else {\n+                addToJSON(jsonDescription, STATUSES, STATUS_ERROR);\n+            }\n             event.setDescription(jsonDescription.toString());\n             return event;\n         }\n \n-        private void addToJSON(JSONObject jsonObject, String key, Object value) {\n+        private void addToJSON(JSONObject jsonObject,\n+            String key, Object value) {\n             try {\n                 jsonObject.put(key, value);\n             } catch (JSONException e) {\n                 LOG.error(\"Exception while building JSON description for direct event.\", e);\n             }\n         }\n+\n     }\n \n     private static String formatDateForXml(Date date) {\n@@ -189,6 +205,6 @@ public class DirectEvent extends BaseEvent {\n         } catch (Exception e) {\n             return null;\n         }\n-\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/657/DirectEvent.java\nindex e0b0d470e72..65ae875e045 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/657/DirectEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/657/DirectEvent.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.direct.event;\n-\n import com.google.common.collect.ImmutableList;\n import gov.hhs.fha.nhinc.direct.messagemonitoring.util.MessageMonitoringUtil;\n import gov.hhs.fha.nhinc.event.BaseEvent;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}