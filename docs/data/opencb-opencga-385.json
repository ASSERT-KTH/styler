{
    "project_name": "opencb-opencga",
    "error_id": "385",
    "information": {
        "errors": [
            {
                "line": "94",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Trailing whitespace'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "    @Override\n    protected void run() throws ToolException {\n        \n        setUpStorageEngineExecutor(study);\n\n        Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/385/AlignmentFlagStatsAnalysis.java\nindex db7dfc518f4..ac0ed8954e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/385/AlignmentFlagStatsAnalysis.java\n@@ -91,7 +91,7 @@ public class AlignmentFlagStatsAnalysis extends OpenCgaToolScopeStudy {\n \n     @Override\n     protected void run() throws ToolException {\n-        \n+\n         setUpStorageEngineExecutor(study);\n \n         Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/385/AlignmentFlagStatsAnalysis.java\nindex db7dfc518f4..c465efa8610 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/385/AlignmentFlagStatsAnalysis.java\n@@ -48,85 +48,85 @@ import static org.opencb.opencga.core.tools.OpenCgaToolExecutor.EXECUTOR_ID;\n @Tool(id = AlignmentFlagStatsAnalysis.ID, resource = Enums.Resource.ALIGNMENT)\n public class AlignmentFlagStatsAnalysis extends OpenCgaToolScopeStudy {\n \n-    public static final String ID = \"alignment-flagstats\";\n-    public static final String DESCRIPTION = ALIGNMENT_FLAG_STATS_DESCRIPTION;\n+  public static final String ID = \"alignment-flagstats\";\n+  public static final String DESCRIPTION = ALIGNMENT_FLAG_STATS_DESCRIPTION;\n \n-    private static final String SAMTOOLS_FLAG_STATS_STEP = \"samtools-flagstat\";\n-    private static final String SAVE_ALIGNMENT_FLAG_STATS_STEP = \"save-alignment-flagstats\";\n+  private static final String SAMTOOLS_FLAG_STATS_STEP = \"samtools-flagstat\";\n+  private static final String SAVE_ALIGNMENT_FLAG_STATS_STEP = \"save-alignment-flagstats\";\n \n-    @ToolParams\n-    protected final AlignmentFlagStatsParams analysisParams = new AlignmentFlagStatsParams();\n+  @ToolParams\n+  protected final AlignmentFlagStatsParams analysisParams = new AlignmentFlagStatsParams();\n \n-    private File catalogBamFile;\n+  private File catalogBamFile;\n \n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n \n-        if (StringUtils.isEmpty(getStudy())) {\n-            throw new ToolException(\"Missing study\");\n-        }\n-\n-        if (StringUtils.isEmpty(analysisParams.getFile())) {\n-            throw new ToolException(\"Missing file\");\n-        }\n-\n-        Query query = new Query(FileDBAdaptor.QueryParams.ID.key(), analysisParams.getFile());\n-        query.put(FileDBAdaptor.QueryParams.FORMAT.key(), File.Format.BAM);\n-        OpenCGAResult<File> fileResult = catalogManager.getFileManager().search(getStudy(), query, QueryOptions.empty(), token);\n-        if (fileResult.getNumResults() != 1) {\n-            throw new ToolException(\"File \" + analysisParams.getFile() + \" must be a BAM file in study \" + getStudy());\n-        }\n-\n-        catalogBamFile = fileResult.getResults().get(0);\n+    if (StringUtils.isEmpty(getStudy())) {\n+      throw new ToolException(\"Missing study\");\n     }\n \n-    @Override\n-    protected List<String> getSteps() {\n-        List<String> steps = new ArrayList<>();\n-        steps.add(SAMTOOLS_FLAG_STATS_STEP);\n-        steps.add(SAVE_ALIGNMENT_FLAG_STATS_STEP);\n-        return steps;\n+    if (StringUtils.isEmpty(analysisParams.getFile())) {\n+      throw new ToolException(\"Missing file\");\n     }\n \n-    @Override\n-    protected void run() throws ToolException {\n-        \n-        setUpStorageEngineExecutor(study);\n-\n-        Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");\n-\n-        step(SAMTOOLS_FLAG_STATS_STEP, () -> {\n-            executorParams.put(EXECUTOR_ID, SamtoolsWrapperAnalysisExecutor.ID);\n-            getToolExecutor(SamtoolsWrapperAnalysisExecutor.class)\n-                    .setCommand(\"flagstat\")\n-                    .setInputFile(catalogBamFile.getUri().getPath())\n-                    .execute();\n-\n-            // Check results\n-            java.io.File stdoutFile = getOutDir().resolve(DockerWrapperAnalysisExecutor.STDOUT_FILENAME).toFile();\n-            List<String> lines = readLines(stdoutFile, Charset.defaultCharset());\n-            if (lines.size() > 0 && lines.get(0).contains(\"QC-passed\")) {\n-                FileUtils.copyFile(stdoutFile, flagStatsFile.toFile());\n-            } else {\n-                throw new ToolException(\"Something wrong happened running samtools-flagstat.\");\n-            }\n-        });\n-\n-        step(SAVE_ALIGNMENT_FLAG_STATS_STEP, () -> {\n-\n-            SamtoolsFlagstats flagStats = SamtoolsFlagstatsParser.parse(flagStatsFile);\n-\n-            // Update quality control for the catalog file\n-            FileQualityControl qc = catalogBamFile.getQualityControl();\n-            // Sanity check\n-            if (qc == null) {\n-                qc = new FileQualityControl();\n-            }\n-            qc.getAlignmentQualityControl().setSamtoolsFlagStats(flagStats);\n-\n-            catalogManager.getFileManager().update(getStudy(), catalogBamFile.getId(), new FileUpdateParams().setQualityControl(qc),\n-                    QueryOptions.empty(), getToken());\n-        });\n+    Query query = new Query(FileDBAdaptor.QueryParams.ID.key(), analysisParams.getFile());\n+    query.put(FileDBAdaptor.QueryParams.FORMAT.key(), File.Format.BAM);\n+    OpenCGAResult<File> fileResult = catalogManager.getFileManager().search(getStudy(), query, QueryOptions.empty(), token);\n+    if (fileResult.getNumResults() != 1) {\n+      throw new ToolException(\"File \" + analysisParams.getFile() + \" must be a BAM file in study \" + getStudy());\n     }\n+\n+    catalogBamFile = fileResult.getResults().get(0);\n+  }\n+\n+  @Override\n+  protected List<String> getSteps() {\n+    List<String> steps = new ArrayList<>();\n+    steps.add(SAMTOOLS_FLAG_STATS_STEP);\n+    steps.add(SAVE_ALIGNMENT_FLAG_STATS_STEP);\n+    return steps;\n+  }\n+\n+  @Override\n+  protected void run() throws ToolException {\n+\n+    setUpStorageEngineExecutor(study);\n+\n+    Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");\n+\n+    step(SAMTOOLS_FLAG_STATS_STEP, () -> {\n+      executorParams.put(EXECUTOR_ID, SamtoolsWrapperAnalysisExecutor.ID);\n+      getToolExecutor(SamtoolsWrapperAnalysisExecutor.class)\n+          .setCommand(\"flagstat\")\n+          .setInputFile(catalogBamFile.getUri().getPath())\n+          .execute();\n+\n+      // Check results\n+      java.io.File stdoutFile = getOutDir().resolve(DockerWrapperAnalysisExecutor.STDOUT_FILENAME).toFile();\n+      List<String> lines = readLines(stdoutFile, Charset.defaultCharset());\n+      if (lines.size() > 0 && lines.get(0).contains(\"QC-passed\")) {\n+        FileUtils.copyFile(stdoutFile, flagStatsFile.toFile());\n+      } else {\n+        throw new ToolException(\"Something wrong happened running samtools-flagstat.\");\n+      }\n+    });\n+\n+    step(SAVE_ALIGNMENT_FLAG_STATS_STEP, () -> {\n+\n+      SamtoolsFlagstats flagStats = SamtoolsFlagstatsParser.parse(flagStatsFile);\n+\n+      // Update quality control for the catalog file\n+      FileQualityControl qc = catalogBamFile.getQualityControl();\n+      // Sanity check\n+      if (qc == null) {\n+        qc = new FileQualityControl();\n+      }\n+      qc.getAlignmentQualityControl().setSamtoolsFlagStats(flagStats);\n+\n+      catalogManager.getFileManager().update(getStudy(), catalogBamFile.getId(), new FileUpdateParams().setQualityControl(qc),\n+          QueryOptions.empty(), getToken());\n+    });\n+  }\n }\n",
            "diff_size": 123
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/385/AlignmentFlagStatsAnalysis.java\nindex db7dfc518f4..69d3fb8ad04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/385/AlignmentFlagStatsAnalysis.java\n@@ -91,8 +91,7 @@ public class AlignmentFlagStatsAnalysis extends OpenCgaToolScopeStudy {\n \n     @Override\n     protected void run() throws ToolException {\n-        \n-        setUpStorageEngineExecutor(study);\n+    setUpStorageEngineExecutor(study);\n \n         Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");\n \n@@ -129,4 +128,4 @@ public class AlignmentFlagStatsAnalysis extends OpenCgaToolScopeStudy {\n                     QueryOptions.empty(), getToken());\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/385/AlignmentFlagStatsAnalysis.java\nindex db7dfc518f4..ac0ed8954e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/385/AlignmentFlagStatsAnalysis.java\n@@ -91,7 +91,7 @@ public class AlignmentFlagStatsAnalysis extends OpenCgaToolScopeStudy {\n \n     @Override\n     protected void run() throws ToolException {\n-        \n+\n         setUpStorageEngineExecutor(study);\n \n         Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "93",
                    "column": "47",
                    "severity": "error",
                    "message": "'{' at column 47 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "48",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/385/AlignmentFlagStatsAnalysis.java\nindex db7dfc518f4..f1de6a12e16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/385/AlignmentFlagStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/385/AlignmentFlagStatsAnalysis.java\n@@ -90,9 +90,7 @@ public class AlignmentFlagStatsAnalysis extends OpenCgaToolScopeStudy {\n     }\n \n     @Override\n-    protected void run() throws ToolException {\n-        \n-        setUpStorageEngineExecutor(study);\n+    protected void run() throws ToolException {setUpStorageEngineExecutor(study);\n \n         Path flagStatsFile = getOutDir().resolve(new java.io.File(catalogBamFile.getUri().getPath()).getName() + \".flagstats.txt\");\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_three_grams"
    ]
}