{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2875",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "240",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "794",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "794",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "829",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "829",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "861",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "877",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "877",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "888",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "888",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "902",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "902",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2875/EncodingIdMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2875/EncodingIdMapper.java\nindex b85d10ccd06..0ba2b4069be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2875/EncodingIdMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2875/EncodingIdMapper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache.idmapping.string;\n \n import java.util.Arrays;\n@@ -53,861 +54,861 @@ import static org.neo4j.unsafe.impl.batchimport.cache.idmapping.string.ParallelS\n /**\n  * Maps arbitrary values to long ids. The values can be {@link #put(Object, long, Group) added} in any order,\n  * but {@link #needsPreparation() needs} {@link #prepare(LongFunction, Collector, ProgressListener) preparation}\n- *\n+ * <p>\n  * in order to {@link #get(Object, Group) get} ids back later.\n- *\n+ * <p>\n  * In the {@link #prepare(LongFunction, Collector, ProgressListener) preparation phase} the added entries are\n  * sorted according to a number representation of each input value and {@link #get(Object, Group)} does simple\n  * binary search to find the correct one.\n- *\n+ * <p>\n  * The implementation is space-efficient, much more so than using, say, a {@link HashMap}.\n- *\n+ * <p>\n  * Terminology... there's a lot going on in here, and to help you understand the code here's a list\n  * of terms used in comments and variable names and some description what each generally means\n  * (also applies to {@link ParallelSort} btw):\n  * - input id:\n- *       An id coming from the user that is associated with a neo4j id by calling {@link #put(Object, long, Group)}.\n- *       the first argument is the id that the user specified, the second is the neo4j id that user id will\n- *       be associated with.\n+ * An id coming from the user that is associated with a neo4j id by calling {@link #put(Object, long, Group)}.\n+ * the first argument is the id that the user specified, the second is the neo4j id that user id will\n+ * be associated with.\n  * - encoder:\n- *       Encodes an input id into an internal, more space efficient representation (a {@code long}) of that input id.\n+ * Encodes an input id into an internal, more space efficient representation (a {@code long}) of that input id.\n  * - eId:\n- *       The internal representation of an input id, generated by an encoder.\n+ * The internal representation of an input id, generated by an encoder.\n  * - data cache:\n- *       An array of eIds. eIds are added in the order of neo4j ids, i.e. in the order in which they are put.\n+ * An array of eIds. eIds are added in the order of neo4j ids, i.e. in the order in which they are put.\n  * - tracker cache:\n- *       An array where every array item is a pointer to an index into the data cache it's set to track.\n- *       After the data cache has been filled the eIds are sorted. This is done by _not_ sorting the data cache,\n- *       but instead sorting the tracker cache as a proxy to its data cache. The reason it's done like this\n- *       is that id spaces ({@link Group}) are kept as data cache ranges, since all ids for any given id space\n- *       must be added together before adding any id for another id space.\n+ * An array where every array item is a pointer to an index into the data cache it's set to track.\n+ * After the data cache has been filled the eIds are sorted. This is done by _not_ sorting the data cache,\n+ * but instead sorting the tracker cache as a proxy to its data cache. The reason it's done like this\n+ * is that id spaces ({@link Group}) are kept as data cache ranges, since all ids for any given id space\n+ * must be added together before adding any id for another id space.\n  * - collision:\n- *       Since eId has potentially fewer bits than an input id there's a chance multiple different (or equal)\n- *       input ids will be encoded into the same eId. These are called collisions.\n+ * Since eId has potentially fewer bits than an input id there's a chance multiple different (or equal)\n+ * input ids will be encoded into the same eId. These are called collisions.\n  */\n public class EncodingIdMapper implements IdMapper\n {\n-    public interface Monitor\n-    {\n-        /**\n-         * @param count Number of eIds that have been marked as collisions.\n-         */\n-        void numberOfCollisions( long count );\n-    }\n-\n-    public static final Monitor NO_MONITOR = count ->\n-    {   // Do nothing.\n-    };\n-\n-    // Bit in encoded String --> long values that marks that the particular item has a collision,\n-    // i.e. that there's at least one other string that encodes into the same long value.\n-    // This bit is the least significant in the most significant byte of the encoded values,\n-    // where the 7 most significant bits in that byte denotes length of original string.\n-    // See StringEncoder.\n-    private static final LongBitsManipulator COLLISION_BIT = new LongBitsManipulator( 56, 1 );\n-    private static final int DEFAULT_CACHE_CHUNK_SIZE = 1_000_000; // 8MB a piece\n-    private static final int COLLISION_ENTRY_SIZE = 5/*nodeId*/ + 6/*offset*/;\n-    // Using 0 as gap value, i.e. value for a node not having an id, i.e. not present in dataCache is safe\n-    // because the current set of Encoder implementations will always set some amount of bits higher up in\n-    // the long value representing the length of the id.\n-    private static final long GAP_VALUE = 0;\n-\n-    private final Factory<Radix> radixFactory;\n-    private final NumberArrayFactory cacheFactory;\n-    private final TrackerFactory trackerFactory;\n-    // Encoded values added in #put, in the order in which they are put. Indexes in the array are the actual node ids,\n-    // values are the encoded versions of the input ids.\n-    private final LongArray dataCache;\n-    private final GroupCache groupCache;\n-    private final HighestId candidateHighestSetIndex = new HighestId( -1 );\n-    private long highestSetIndex;\n-\n-    // Ordering information about values in dataCache; the ordering of values in dataCache remains unchanged.\n-    // in prepare() this array is populated and changed along with how dataCache items \"move around\" so that\n-    // they end up sorted. Again, dataCache remains unchanged, only the ordering information is kept here.\n-    // Each index in trackerCache points to a dataCache index, where the value in dataCache contains the\n-    // encoded input id, used to match against the input id that is looked up during binary search.\n-    private Tracker trackerCache;\n-    private final Encoder encoder;\n-    private final Radix radix;\n-    private final int processorsForParallelWork;\n-    private final Comparator comparator;\n-\n-    private ByteArray collisionNodeIdCache;\n-    // These 3 caches below are needed only during duplicate input id detection, but referenced here so\n-    // that the memory visitor can see them when they are active.\n-    private Tracker collisionTrackerCache;\n-\n-    private boolean readyForUse;\n-    private long[][] sortBuckets;\n-\n-    private final Monitor monitor;\n-    private final Groups groups;\n-\n-    private long numberOfCollisions;\n-    private final LongFunction<CollisionValues> collisionValuesFactory;\n-    private CollisionValues collisionValues;\n-\n-    public EncodingIdMapper( NumberArrayFactory cacheFactory, Encoder encoder, Factory<Radix> radixFactory,\n-            Monitor monitor, TrackerFactory trackerFactory, Groups groups, LongFunction<CollisionValues> collisionValuesFactory )\n-    {\n-        this( cacheFactory, encoder, radixFactory, monitor, trackerFactory, groups, collisionValuesFactory, DEFAULT_CACHE_CHUNK_SIZE,\n-                Runtime.getRuntime().availableProcessors() - 1, DEFAULT );\n-    }\n-\n-    EncodingIdMapper( NumberArrayFactory cacheFactory, Encoder encoder, Factory<Radix> radixFactory,\n-            Monitor monitor, TrackerFactory trackerFactory, Groups groups, LongFunction<CollisionValues> collisionValuesFactory,\n-            int chunkSize, int processorsForParallelWork, Comparator comparator )\n-    {\n-        this.radixFactory = radixFactory;\n-        this.monitor = monitor;\n-        this.cacheFactory = cacheFactory;\n-        this.trackerFactory = trackerFactory;\n-        this.collisionValuesFactory = collisionValuesFactory;\n-        this.comparator = comparator;\n-        this.processorsForParallelWork = max( processorsForParallelWork, 1 );\n-        this.dataCache = cacheFactory.newDynamicLongArray( chunkSize, GAP_VALUE );\n-        this.groupCache = GroupCache.select( cacheFactory, chunkSize, groups.size() );\n-        this.groups = groups;\n-        this.encoder = encoder;\n-        this.radix = radixFactory.newInstance();\n-    }\n-\n+  public interface Monitor\n+  {\n     /**\n-     * Returns the data index (i.e. node id) if found, or {@code -1} if not found.\n+     * @param count Number of eIds that have been marked as collisions.\n      */\n-    @Override\n-    public long get( Object inputId, Group group )\n-    {\n-        assert readyForUse;\n-        return binarySearch( inputId, group.id() );\n-    }\n-\n-    @Override\n-    public void put( Object inputId, long nodeId, Group group )\n-    {\n-        // Encode and add the input id\n-        long eId = encode( inputId );\n-        dataCache.set( nodeId, eId );\n-        groupCache.set( nodeId, group.id() );\n-        candidateHighestSetIndex.offer( nodeId );\n-    }\n-\n-    private long encode( Object inputId )\n-    {\n-        long eId = encoder.encode( inputId );\n-        if ( eId == GAP_VALUE )\n-        {\n-            throw new IllegalStateException( \"Encoder \" + encoder + \" returned an illegal encoded value \" + GAP_VALUE );\n-        }\n-        return eId;\n+    void numberOfCollisions(long count);\n+  }\n+\n+  public static final Monitor NO_MONITOR = count ->\n+  {   // Do nothing.\n+  };\n+\n+  // Bit in encoded String --> long values that marks that the particular item has a collision,\n+  // i.e. that there's at least one other string that encodes into the same long value.\n+  // This bit is the least significant in the most significant byte of the encoded values,\n+  // where the 7 most significant bits in that byte denotes length of original string.\n+  // See StringEncoder.\n+  private static final LongBitsManipulator COLLISION_BIT = new LongBitsManipulator(56, 1);\n+  private static final int DEFAULT_CACHE_CHUNK_SIZE = 1_000_000; // 8MB a piece\n+  private static final int COLLISION_ENTRY_SIZE = 5/*nodeId*/ + 6/*offset*/;\n+  // Using 0 as gap value, i.e. value for a node not having an id, i.e. not present in dataCache is safe\n+  // because the current set of Encoder implementations will always set some amount of bits higher up in\n+  // the long value representing the length of the id.\n+  private static final long GAP_VALUE = 0;\n+\n+  private final Factory<Radix> radixFactory;\n+  private final NumberArrayFactory cacheFactory;\n+  private final TrackerFactory trackerFactory;\n+  // Encoded values added in #put, in the order in which they are put. Indexes in the array are the actual node ids,\n+  // values are the encoded versions of the input ids.\n+  private final LongArray dataCache;\n+  private final GroupCache groupCache;\n+  private final HighestId candidateHighestSetIndex = new HighestId(-1);\n+  private long highestSetIndex;\n+\n+  // Ordering information about values in dataCache; the ordering of values in dataCache remains unchanged.\n+  // in prepare() this array is populated and changed along with how dataCache items \"move around\" so that\n+  // they end up sorted. Again, dataCache remains unchanged, only the ordering information is kept here.\n+  // Each index in trackerCache points to a dataCache index, where the value in dataCache contains the\n+  // encoded input id, used to match against the input id that is looked up during binary search.\n+  private Tracker trackerCache;\n+  private final Encoder encoder;\n+  private final Radix radix;\n+  private final int processorsForParallelWork;\n+  private final Comparator comparator;\n+\n+  private ByteArray collisionNodeIdCache;\n+  // These 3 caches below are needed only during duplicate input id detection, but referenced here so\n+  // that the memory visitor can see them when they are active.\n+  private Tracker collisionTrackerCache;\n+\n+  private boolean readyForUse;\n+  private long[][] sortBuckets;\n+\n+  private final Monitor monitor;\n+  private final Groups groups;\n+\n+  private long numberOfCollisions;\n+  private final LongFunction<CollisionValues> collisionValuesFactory;\n+  private CollisionValues collisionValues;\n+\n+  public EncodingIdMapper(NumberArrayFactory cacheFactory, Encoder encoder, Factory<Radix> radixFactory,\n+                          Monitor monitor, TrackerFactory trackerFactory, Groups groups, LongFunction<CollisionValues> collisionValuesFactory)\n+  {\n+    this(cacheFactory, encoder, radixFactory, monitor, trackerFactory, groups, collisionValuesFactory, DEFAULT_CACHE_CHUNK_SIZE,\n+        Runtime.getRuntime().availableProcessors() - 1, DEFAULT);\n+  }\n+\n+  EncodingIdMapper(NumberArrayFactory cacheFactory, Encoder encoder, Factory<Radix> radixFactory,\n+                   Monitor monitor, TrackerFactory trackerFactory, Groups groups, LongFunction<CollisionValues> collisionValuesFactory,\n+                   int chunkSize, int processorsForParallelWork, Comparator comparator)\n+  {\n+    this.radixFactory = radixFactory;\n+    this.monitor = monitor;\n+    this.cacheFactory = cacheFactory;\n+    this.trackerFactory = trackerFactory;\n+    this.collisionValuesFactory = collisionValuesFactory;\n+    this.comparator = comparator;\n+    this.processorsForParallelWork = max(processorsForParallelWork, 1);\n+    this.dataCache = cacheFactory.newDynamicLongArray(chunkSize, GAP_VALUE);\n+    this.groupCache = GroupCache.select(cacheFactory, chunkSize, groups.size());\n+    this.groups = groups;\n+    this.encoder = encoder;\n+    this.radix = radixFactory.newInstance();\n+  }\n+\n+  /**\n+   * Returns the data index (i.e. node id) if found, or {@code -1} if not found.\n+   */\n+  @Override\n+  public long get(Object inputId, Group group)\n+  {\n+    assert readyForUse;\n+    return binarySearch(inputId, group.id());\n+  }\n+\n+  @Override\n+  public void put(Object inputId, long nodeId, Group group)\n+  {\n+    // Encode and add the input id\n+    long eId = encode(inputId);\n+    dataCache.set(nodeId, eId);\n+    groupCache.set(nodeId, group.id());\n+    candidateHighestSetIndex.offer(nodeId);\n+  }\n+\n+  private long encode(Object inputId)\n+  {\n+    long eId = encoder.encode(inputId);\n+    if (eId == GAP_VALUE)\n+    {\n+      throw new IllegalStateException(\"Encoder \" + encoder + \" returned an illegal encoded value \" + GAP_VALUE);\n+    }\n+    return eId;\n+  }\n+\n+  @Override\n+  public boolean needsPreparation()\n+  {\n+    return true;\n+  }\n+\n+  /**\n+   * There's an assumption that the progress listener supplied here can support multiple calls\n+   * to started/done, and that it knows about what stages the processor preparing goes through, namely:\n+   * <ol>\n+   * <li>Split by radix</li>\n+   * <li>Sorting</li>\n+   * <li>Collision detection</li>\n+   * <li>(potentially) Collision resolving</li>\n+   * </ol>\n+   */\n+  @Override\n+  public void prepare(LongFunction<Object> inputIdLookup, Collector collector, ProgressListener progress)\n+  {\n+    highestSetIndex = candidateHighestSetIndex.get();\n+    updateRadix(dataCache, radix, highestSetIndex);\n+    trackerCache = trackerFactory.create(cacheFactory, highestSetIndex + 1);\n+\n+    try\n+    {\n+      sortBuckets = new ParallelSort(radix, dataCache, highestSetIndex, trackerCache,\n+          processorsForParallelWork, progress, comparator).run();\n+\n+      long pessimisticNumberOfCollisions = detectAndMarkCollisions(progress);\n+      if (pessimisticNumberOfCollisions > 0)\n+      {\n+        buildCollisionInfo(inputIdLookup, pessimisticNumberOfCollisions, collector, progress);\n+      }\n+    } catch (InterruptedException e)\n+    {\n+      Thread.interrupted();\n+      throw new RuntimeException(\"Got interrupted while preparing the index. Throwing this exception \"\n+          + \"onwards will cause a chain reaction which will cause a panic in the whole import, \"\n+          + \"so mission accomplished\");\n+    }\n+    readyForUse = true;\n+  }\n+\n+  private static void updateRadix(LongArray values, Radix radix, long highestSetIndex)\n+  {\n+    for (long dataIndex = 0; dataIndex <= highestSetIndex; dataIndex++)\n+    {\n+      radix.registerRadixOf(values.get(dataIndex));\n+    }\n+  }\n+\n+  private int radixOf(long value)\n+  {\n+    return radix.calculator().radixOf(value);\n+  }\n+\n+  private long binarySearch(Object inputId, int groupId)\n+  {\n+    long low = 0;\n+    long high = highestSetIndex;\n+    long x = encode(inputId);\n+    int rIndex = radixOf(x);\n+    for (int k = 0; k < sortBuckets.length; k++)\n+    {\n+      if (rIndex <= sortBuckets[k][0])//bucketRange[k] > rIndex )\n+      {\n+        low = sortBuckets[k][1];\n+        high = (k == sortBuckets.length - 1) ? highestSetIndex : sortBuckets[k + 1][1];\n+        break;\n+      }\n+    }\n+\n+    long returnVal = binarySearch(x, inputId, low, high, groupId);\n+    if (returnVal == ID_NOT_FOUND)\n+    {\n+      low = 0;\n+      high = highestSetIndex;\n+      returnVal = binarySearch(x, inputId, low, high, groupId);\n+    }\n+    return returnVal;\n+  }\n+\n+  private static long setCollision(long eId)\n+  {\n+    return COLLISION_BIT.set(eId, 1, 1);\n+  }\n+\n+  static long clearCollision(long eId)\n+  {\n+    return COLLISION_BIT.clear(eId, 1, false);\n+  }\n+\n+  private static boolean isCollision(long eId)\n+  {\n+    return COLLISION_BIT.get(eId, 1) != 0;\n+  }\n+\n+  private class DetectWorker implements Runnable\n+  {\n+    private final long fromInclusive;\n+    private final long toExclusive;\n+    private final boolean last;\n+    private final ProgressListener progress;\n+\n+    private int numberOfCollisions;\n+    private int localProgress;\n+\n+    DetectWorker(long fromInclusive, long toExclusive, boolean last, ProgressListener progress)\n+    {\n+      this.fromInclusive = fromInclusive;\n+      this.toExclusive = toExclusive;\n+      this.last = last;\n+      this.progress = progress;\n     }\n \n     @Override\n-    public boolean needsPreparation()\n-    {\n-        return true;\n-    }\n-\n-    /**\n-     * There's an assumption that the progress listener supplied here can support multiple calls\n-     * to started/done, and that it knows about what stages the processor preparing goes through, namely:\n-     * <ol>\n-     * <li>Split by radix</li>\n-     * <li>Sorting</li>\n-     * <li>Collision detection</li>\n-     * <li>(potentially) Collision resolving</li>\n-     * </ol>\n-     */\n-    @Override\n-    public void prepare( LongFunction<Object> inputIdLookup, Collector collector, ProgressListener progress )\n-    {\n-        highestSetIndex = candidateHighestSetIndex.get();\n-        updateRadix( dataCache, radix, highestSetIndex );\n-        trackerCache = trackerFactory.create( cacheFactory, highestSetIndex + 1 );\n-\n-        try\n-        {\n-            sortBuckets = new ParallelSort( radix, dataCache, highestSetIndex, trackerCache,\n-                    processorsForParallelWork, progress, comparator ).run();\n-\n-            long pessimisticNumberOfCollisions = detectAndMarkCollisions( progress );\n-            if ( pessimisticNumberOfCollisions > 0 )\n-            {\n-                buildCollisionInfo( inputIdLookup, pessimisticNumberOfCollisions, collector, progress );\n-            }\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            Thread.interrupted();\n-            throw new RuntimeException( \"Got interrupted while preparing the index. Throwing this exception \"\n-                    + \"onwards will cause a chain reaction which will cause a panic in the whole import, \"\n-                    + \"so mission accomplished\" );\n-        }\n-        readyForUse = true;\n-    }\n-\n-    private static void updateRadix( LongArray values, Radix radix, long highestSetIndex )\n-    {\n-        for ( long dataIndex = 0; dataIndex <= highestSetIndex; dataIndex++ )\n-        {\n-            radix.registerRadixOf( values.get( dataIndex ) );\n-        }\n-    }\n-\n-    private int radixOf( long value )\n-    {\n-        return radix.calculator().radixOf( value );\n-    }\n-\n-    private long binarySearch( Object inputId, int groupId )\n-    {\n-        long low = 0;\n-        long high = highestSetIndex;\n-        long x = encode( inputId );\n-        int rIndex = radixOf( x );\n-        for ( int k = 0; k < sortBuckets.length; k++ )\n-        {\n-            if ( rIndex <= sortBuckets[k][0] )//bucketRange[k] > rIndex )\n-            {\n-                low = sortBuckets[k][1];\n-                high = (k == sortBuckets.length - 1) ? highestSetIndex : sortBuckets[k + 1][1];\n-                break;\n-            }\n-        }\n-\n-        long returnVal = binarySearch( x, inputId, low, high, groupId );\n-        if ( returnVal == ID_NOT_FOUND )\n-        {\n-            low = 0;\n-            high = highestSetIndex;\n-            returnVal = binarySearch( x, inputId, low, high, groupId );\n-        }\n-        return returnVal;\n-    }\n-\n-    private static long setCollision( long eId )\n-    {\n-        return COLLISION_BIT.set( eId, 1, 1 );\n-    }\n-\n-    static long clearCollision( long eId )\n-    {\n-        return COLLISION_BIT.clear( eId, 1, false );\n-    }\n-\n-    private static boolean isCollision( long eId )\n-    {\n-        return COLLISION_BIT.get( eId, 1 ) != 0;\n-    }\n-\n-    private class DetectWorker implements Runnable\n+    public void run()\n     {\n-        private final long fromInclusive;\n-        private final long toExclusive;\n-        private final boolean last;\n-        private final ProgressListener progress;\n+      SameGroupDetector sameGroupDetector = new SameGroupDetector();\n \n-        private int numberOfCollisions;\n-        private int localProgress;\n+      // In all chunks except the last this chunk also takes care of the detection in the seam,\n+      // but for the last one there's no seam at the end.\n+      long end = last ? toExclusive - 1 : toExclusive;\n \n-        DetectWorker( long fromInclusive, long toExclusive, boolean last, ProgressListener progress )\n+      for (long i = fromInclusive; i < end; i++)\n+      {\n+        detect(sameGroupDetector, i);\n+        if (++localProgress == 1000)\n         {\n-            this.fromInclusive = fromInclusive;\n-            this.toExclusive = toExclusive;\n-            this.last = last;\n-            this.progress = progress;\n+          progress.add(localProgress);\n+          localProgress = 0;\n         }\n-\n-        @Override\n-        public void run()\n-        {\n-            SameGroupDetector sameGroupDetector = new SameGroupDetector();\n-\n-            // In all chunks except the last this chunk also takes care of the detection in the seam,\n-            // but for the last one there's no seam at the end.\n-            long end = last ? toExclusive - 1 : toExclusive;\n-\n-            for ( long i = fromInclusive; i < end; i++ )\n-            {\n-                detect( sameGroupDetector, i );\n-                if ( ++localProgress == 1000 )\n-                {\n-                    progress.add( localProgress );\n-                    localProgress = 0;\n-                }\n-            }\n-            progress.add( localProgress );\n-        }\n-\n-        private void detect( SameGroupDetector sameGroupDetector, long i )\n-        {\n-            long dataIndexA = trackerCache.get( i );\n-            long dataIndexB = trackerCache.get( i + 1 );\n-            if ( dataIndexA == ID_NOT_FOUND || dataIndexB == ID_NOT_FOUND )\n+      }\n+      progress.add(localProgress);\n+    }\n+\n+    private void detect(SameGroupDetector sameGroupDetector, long i)\n+    {\n+      long dataIndexA = trackerCache.get(i);\n+      long dataIndexB = trackerCache.get(i + 1);\n+      if (dataIndexA == ID_NOT_FOUND || dataIndexB == ID_NOT_FOUND)\n+      {\n+        sameGroupDetector.reset();\n+        return;\n+      }\n+\n+      long eIdA = clearCollision(dataCache.get(dataIndexA));\n+      long eIdB = clearCollision(dataCache.get(dataIndexB));\n+      if (eIdA == GAP_VALUE || eIdB == GAP_VALUE)\n+      {\n+        sameGroupDetector.reset();\n+        return;\n+      }\n+\n+      switch (unsignedDifference(eIdA, eIdB))\n+      {\n+        case GT:\n+          throw new IllegalStateException(\"Unsorted data, a > b Failure:[\" + i + \"] \" +\n+              Long.toHexString(eIdA) + \" > \" + Long.toHexString(eIdB) + \" | \" +\n+              radixOf(eIdA) + \":\" + radixOf(eIdB));\n+        case EQ:\n+          // Here we have two equal encoded values. First let's check if they are in the same id space.\n+          long collision = sameGroupDetector.collisionWithinSameGroup(\n+              dataIndexA, groupOf(dataIndexA),\n+              dataIndexB, groupOf(dataIndexB));\n+\n+          if (dataIndexA > dataIndexB)\n+          {\n+            // Swap so that lower tracker index means lower data index. TODO Why do we do this?\n+            trackerCache.swap(i, i + 1);\n+          }\n+\n+          if (collision != ID_NOT_FOUND)\n+          {\n+            if (markAsCollision(collision))\n             {\n-                sameGroupDetector.reset();\n-                return;\n+              numberOfCollisions++;\n             }\n-\n-            long eIdA = clearCollision( dataCache.get( dataIndexA ) );\n-            long eIdB = clearCollision( dataCache.get( dataIndexB ) );\n-            if ( eIdA == GAP_VALUE || eIdB == GAP_VALUE )\n+            if (markAsCollision(dataIndexB))\n             {\n-                sameGroupDetector.reset();\n-                return;\n-            }\n-\n-            switch ( unsignedDifference( eIdA, eIdB ) )\n-            {\n-            case GT: throw new IllegalStateException( \"Unsorted data, a > b Failure:[\" + i + \"] \" +\n-                    Long.toHexString( eIdA ) + \" > \" + Long.toHexString( eIdB ) + \" | \" +\n-                    radixOf( eIdA ) + \":\" + radixOf( eIdB ) );\n-            case EQ:\n-                // Here we have two equal encoded values. First let's check if they are in the same id space.\n-                long collision = sameGroupDetector.collisionWithinSameGroup(\n-                        dataIndexA, groupOf( dataIndexA ),\n-                        dataIndexB, groupOf( dataIndexB ) );\n-\n-                if ( dataIndexA > dataIndexB )\n-                {\n-                    // Swap so that lower tracker index means lower data index. TODO Why do we do this?\n-                    trackerCache.swap( i, i + 1 );\n-                }\n-\n-                if ( collision != ID_NOT_FOUND )\n-                {\n-                    if ( markAsCollision( collision ) )\n-                    {\n-                        numberOfCollisions++;\n-                    }\n-                    if ( markAsCollision( dataIndexB ) )\n-                    {\n-                        numberOfCollisions++;\n-                    }\n-                }\n-                break;\n-            default:\n-                sameGroupDetector.reset();\n+              numberOfCollisions++;\n             }\n+          }\n+          break;\n+        default:\n+          sameGroupDetector.reset();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * There are two types of collisions:\n+   * - actual: collisions coming from equal input value. These might however not impose\n+   * keeping original input value since the colliding values might be for separate id groups,\n+   * just as long as there's at most one per id space.\n+   * - accidental: collisions coming from different input values that happens to coerce into\n+   * the same encoded value internally.\n+   * <p>\n+   * For any encoded value there might be a mix of actual and accidental collisions. As long as there's\n+   * only one such value (accidental or actual) per id space the original input id doesn't need to be kept.\n+   * For scenarios where there are multiple per for any given id space:\n+   * - actual: there are two equal input values in the same id space\n+   * ==> fail, not allowed\n+   * - accidental: there are two different input values coerced into the same encoded value\n+   * in the same id space\n+   * ==> original input values needs to be kept\n+   *\n+   * @return rough number of collisions. The number can be slightly more than it actually is due to benign\n+   * races between detector workers. This is not a problem though, this value serves as a pessimistic value\n+   * for allocating arrays to hold collision data to later sort and use to discover duplicates.\n+   */\n+  private long detectAndMarkCollisions(ProgressListener progress)\n+  {\n+    progress.started(\"DETECT\");\n+    long totalCount = highestSetIndex + 1;\n+\n+    Workers<DetectWorker> workers = new Workers<>(\"DETECT\");\n+    int processors = processorsForParallelWork;\n+    long stride = totalCount / processorsForParallelWork;\n+    if (stride < 10)\n+    {\n+      // Multi-threading would be overhead\n+      processors = 1;\n+      stride = totalCount;\n+    }\n+    long fromInclusive = 0;\n+    long toExclusive = 0;\n+    for (int i = 0; i < processors; i++)\n+    {\n+      boolean last = i == processors - 1;\n+      fromInclusive = toExclusive;\n+      toExclusive = last ? totalCount : toExclusive + stride;\n+      workers.start(new DetectWorker(fromInclusive, toExclusive, last, progress));\n+    }\n+    workers.awaitAndThrowOnErrorStrict();\n+\n+    long numberOfCollisions = 0;\n+    for (DetectWorker detectWorker : workers)\n+    {\n+      numberOfCollisions += detectWorker.numberOfCollisions;\n+    }\n+\n+    progress.done();\n+    if (numberOfCollisions > Integer.MAX_VALUE)\n+    {\n+      throw new InputException(\"Too many collisions: \" + numberOfCollisions);\n+    }\n+\n+    int intNumberOfCollisions = toIntExact(numberOfCollisions);\n+    monitor.numberOfCollisions(intNumberOfCollisions);\n+    return intNumberOfCollisions;\n+  }\n+\n+  /**\n+   * @return {@code true} if marked as collision in this call, {@code false} if it was already marked as collision.\n+   */\n+  private boolean markAsCollision(long nodeId)\n+  {\n+    long eId = dataCache.get(nodeId);\n+    boolean isAlreadyMarked = isCollision(eId);\n+    if (isAlreadyMarked)\n+    {\n+      return false;\n+    }\n+\n+    dataCache.set(nodeId, setCollision(eId));\n+    return true;\n+  }\n+\n+  private void unmarkAsCollision(long dataIndex)\n+  {\n+    long eId = dataCache.get(dataIndex);\n+    boolean isMarked = isCollision(eId);\n+    if (isMarked)\n+    {\n+      dataCache.set(dataIndex, clearCollision(eId));\n+    }\n+  }\n+\n+  private void buildCollisionInfo(LongFunction<Object> inputIdLookup, long pessimisticNumberOfCollisions,\n+                                  Collector collector, ProgressListener progress)\n+      throws InterruptedException\n+  {\n+    progress.started(\"RESOLVE (~\" + pessimisticNumberOfCollisions + \" collisions)\");\n+    Radix radix = radixFactory.newInstance();\n+    collisionNodeIdCache = cacheFactory.newByteArray(pessimisticNumberOfCollisions, new byte[COLLISION_ENTRY_SIZE]);\n+    collisionTrackerCache = trackerFactory.create(cacheFactory, pessimisticNumberOfCollisions);\n+    collisionValues = collisionValuesFactory.apply(pessimisticNumberOfCollisions);\n+    for (long nodeId = 0; nodeId <= highestSetIndex; nodeId++)\n+    {\n+      long eId = dataCache.get(nodeId);\n+      if (isCollision(eId))\n+      {\n+        // Store this collision input id for matching later in get()\n+        long collisionIndex = numberOfCollisions++;\n+        Object id = inputIdLookup.apply(nodeId);\n+        long eIdFromInputId = encode(id);\n+        long eIdWithoutCollisionBit = clearCollision(eId);\n+        assert eIdFromInputId == eIdWithoutCollisionBit : format(\"Encoding mismatch during building of \" +\n+                \"collision info. input id %s (a %s) marked as collision where this id was encoded into \" +\n+                \"%d when put, but was now encoded into %d\",\n+            id, id.getClass().getSimpleName(), eIdWithoutCollisionBit, eIdFromInputId);\n+        long offset = collisionValues.add(id);\n+        collisionNodeIdCache.set5ByteLong(collisionIndex, 0, nodeId);\n+        collisionNodeIdCache.set6ByteLong(collisionIndex, 5, offset);\n+\n+        // The base of our sorting this time is going to be node id, so register that in the radix\n+        radix.registerRadixOf(eIdWithoutCollisionBit);\n+      }\n+      progress.add(1);\n+    }\n+    progress.done();\n+\n+    // Detect input id duplicates within the same group, with source information, line number and the works\n+    detectDuplicateInputIds(radix, collector, progress);\n+\n+    // We won't be needing these anymore\n+    collisionTrackerCache.close();\n+    collisionTrackerCache = null;\n+  }\n+\n+  private void detectDuplicateInputIds(Radix radix, Collector collector, ProgressListener progress)\n+      throws InterruptedException\n+  {\n+    // We do this collision sort using ParallelSort which has the data cache and the tracker cache,\n+    // the tracker cache gets sorted, data cache stays intact. In the collision data case we actually\n+    // have one more layer in here so we have tracker cache pointing to collisionNodeIdCache\n+    // pointing to dataCache. This can be done using the ParallelSort.Comparator abstraction.\n+    //\n+    // The Comparator below takes into account dataIndex for each eId its comparing so that an extra\n+    // comparison based on dataIndex is done if it's comparing two equal eIds. We do this so that\n+    // stretches of multiple equal eIds are sorted by dataIndex (i.e. node id) order,\n+    // to be able to write an efficient duplication scanning below and to have deterministic duplication reporting.\n+    Comparator duplicateComparator = new Comparator()\n+    {\n+      @Override\n+      public boolean lt(long left, long pivot)\n+      {\n+        long leftEId = dataCache.get(left);\n+        long pivotEId = dataCache.get(pivot);\n+        if (comparator.lt(leftEId, pivotEId))\n+        {\n+          return true;\n         }\n-    }\n-\n-    /**\n-     * There are two types of collisions:\n-     * - actual: collisions coming from equal input value. These might however not impose\n-     *   keeping original input value since the colliding values might be for separate id groups,\n-     *   just as long as there's at most one per id space.\n-     * - accidental: collisions coming from different input values that happens to coerce into\n-     *   the same encoded value internally.\n-     *\n-     * For any encoded value there might be a mix of actual and accidental collisions. As long as there's\n-     * only one such value (accidental or actual) per id space the original input id doesn't need to be kept.\n-     * For scenarios where there are multiple per for any given id space:\n-     * - actual: there are two equal input values in the same id space\n-     *     ==> fail, not allowed\n-     * - accidental: there are two different input values coerced into the same encoded value\n-     *   in the same id space\n-     *     ==> original input values needs to be kept\n-     *\n-     * @return rough number of collisions. The number can be slightly more than it actually is due to benign\n-     * races between detector workers. This is not a problem though, this value serves as a pessimistic value\n-     * for allocating arrays to hold collision data to later sort and use to discover duplicates.\n-     */\n-    private long detectAndMarkCollisions( ProgressListener progress )\n-    {\n-        progress.started( \"DETECT\" );\n-        long totalCount = highestSetIndex + 1;\n-\n-        Workers<DetectWorker> workers = new Workers<>( \"DETECT\" );\n-        int processors = processorsForParallelWork;\n-        long stride = totalCount / processorsForParallelWork;\n-        if ( stride < 10 )\n-        {\n-            // Multi-threading would be overhead\n-            processors = 1;\n-            stride = totalCount;\n-        }\n-        long fromInclusive = 0;\n-        long toExclusive = 0;\n-        for ( int i = 0; i < processors; i++ )\n+        if (leftEId == pivotEId)\n         {\n-            boolean last = i == processors - 1;\n-            fromInclusive = toExclusive;\n-            toExclusive = last ? totalCount : toExclusive + stride;\n-            workers.start( new DetectWorker( fromInclusive, toExclusive, last, progress ) );\n+          return left < pivot;\n         }\n-        workers.awaitAndThrowOnErrorStrict();\n+        return false;\n+      }\n \n-        long numberOfCollisions = 0;\n-        for ( DetectWorker detectWorker : workers )\n+      @Override\n+      public boolean ge(long right, long pivot)\n+      {\n+        long rightEId = dataCache.get(right);\n+        long pivotEId = dataCache.get(pivot);\n+        if (comparator.ge(rightEId, pivotEId))\n         {\n-            numberOfCollisions += detectWorker.numberOfCollisions;\n+          return rightEId != pivotEId || right > pivot;\n         }\n+        return false;\n+      }\n+\n+      @Override\n+      public long dataValue(long nodeId)\n+      {\n+        return dataCache.get(nodeId);\n+      }\n+    };\n \n-        progress.done();\n-        if ( numberOfCollisions > Integer.MAX_VALUE )\n-        {\n-            throw new InputException( \"Too many collisions: \" + numberOfCollisions );\n-        }\n+    new ParallelSort(radix, as5ByteLongArray(collisionNodeIdCache), numberOfCollisions - 1,\n+        collisionTrackerCache, processorsForParallelWork, progress, duplicateComparator).run();\n+\n+    // Here we have a populated C\n+    // We want to detect duplicate input ids within it\n+    long previousEid = 0;\n+    int previousGroupId = -1;\n+    SameInputIdDetector detector = new SameInputIdDetector();\n+    progress.started(\"DEDUPLICATE\");\n+    for (int i = 0; i < numberOfCollisions; i++)\n+    {\n+      long collisionIndex = collisionTrackerCache.get(i);\n+      long nodeId = collisionNodeIdCache.get5ByteLong(collisionIndex, 0);\n+      long offset = collisionNodeIdCache.get6ByteLong(collisionIndex, 5);\n+      long eid = dataCache.get(nodeId);\n+      int groupId = groupOf(nodeId);\n+      // collisions of same eId AND groupId are always together\n+      boolean same = eid == previousEid && previousGroupId == groupId;\n+      if (!same)\n+      {\n+        detector.clear();\n+      }\n+\n+      // Potential duplicate\n+      Object inputId = collisionValues.get(offset);\n+      long nonDuplicateNodeId = detector.add(nodeId, inputId);\n+      if (nonDuplicateNodeId != -1)\n+      {   // Duplicate\n+        collector.collectDuplicateNode(inputId, nodeId, groups.get(groupId).name());\n+        trackerCache.markAsDuplicate(nodeId);\n+        unmarkAsCollision(nonDuplicateNodeId);\n+      }\n+\n+      previousEid = eid;\n+      previousGroupId = groupId;\n+      progress.add(1);\n+    }\n+    progress.done();\n+  }\n+\n+  private LongArray as5ByteLongArray(ByteArray byteArray)\n+  {\n+    return new LongArray()\n+    {\n+      @Override\n+      public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+      {\n+        byteArray.acceptMemoryStatsVisitor(visitor);\n+      }\n+\n+      @Override\n+      public long length()\n+      {\n+        return byteArray.length();\n+      }\n+\n+      @Override\n+      public void close()\n+      {\n+        byteArray.close();\n+      }\n+\n+      @Override\n+      public void clear()\n+      {\n+        byteArray.clear();\n+      }\n+\n+      @Override\n+      public LongArray at(long index)\n+      {\n+        return null;\n+      }\n+\n+      @Override\n+      public void set(long index, long value)\n+      {\n+        throw new UnsupportedOperationException();\n+      }\n+\n+      @Override\n+      public long get(long index)\n+      {\n+        return byteArray.get5ByteLong(index, 0);\n+      }\n+    };\n+  }\n \n-        int intNumberOfCollisions = toIntExact( numberOfCollisions );\n-        monitor.numberOfCollisions( intNumberOfCollisions );\n-        return intNumberOfCollisions;\n-    }\n+  private static class SameInputIdDetector\n+  {\n+    private long[] nodeIdArray = new long[10]; // grows on demand\n+    private Object[] inputIdArray = new Object[10]; // grows on demand\n+    private int cursor;\n \n-    /**\n-     * @return {@code true} if marked as collision in this call, {@code false} if it was already marked as collision.\n-     */\n-    private boolean markAsCollision( long nodeId )\n+    long add(long nodeId, Object inputId)\n     {\n-        long eId = dataCache.get( nodeId );\n-        boolean isAlreadyMarked = isCollision( eId );\n-        if ( isAlreadyMarked )\n+      for (int i = 0; i < cursor; i++)\n+      {\n+        if (inputIdArray[i].equals(inputId))\n         {\n-            return false;\n+          return nodeIdArray[i];\n         }\n+      }\n \n-        dataCache.set( nodeId, setCollision( eId ) );\n-        return true;\n+      if (cursor == inputIdArray.length)\n+      {\n+        inputIdArray = Arrays.copyOf(inputIdArray, cursor * 2);\n+        nodeIdArray = Arrays.copyOf(nodeIdArray, cursor * 2);\n+      }\n+      inputIdArray[cursor] = inputId;\n+      nodeIdArray[cursor] = nodeId;\n+      cursor++;\n+      return -1;\n     }\n \n-    private void unmarkAsCollision( long dataIndex )\n+    void clear()\n     {\n-        long eId = dataCache.get( dataIndex );\n-        boolean isMarked = isCollision( eId );\n-        if ( isMarked )\n-        {\n-            dataCache.set( dataIndex, clearCollision( eId ) );\n-        }\n+      cursor = 0;\n     }\n+  }\n \n-    private void buildCollisionInfo( LongFunction<Object> inputIdLookup, long pessimisticNumberOfCollisions,\n-            Collector collector, ProgressListener progress )\n-            throws InterruptedException\n-    {\n-        progress.started( \"RESOLVE (~\" + pessimisticNumberOfCollisions + \" collisions)\" );\n-        Radix radix = radixFactory.newInstance();\n-        collisionNodeIdCache = cacheFactory.newByteArray( pessimisticNumberOfCollisions, new byte[COLLISION_ENTRY_SIZE] );\n-        collisionTrackerCache = trackerFactory.create( cacheFactory, pessimisticNumberOfCollisions );\n-        collisionValues = collisionValuesFactory.apply( pessimisticNumberOfCollisions );\n-        for ( long nodeId = 0; nodeId <= highestSetIndex; nodeId++ )\n-        {\n-            long eId = dataCache.get( nodeId );\n-            if ( isCollision( eId ) )\n-            {\n-                // Store this collision input id for matching later in get()\n-                long collisionIndex = numberOfCollisions++;\n-                Object id = inputIdLookup.apply( nodeId );\n-                long eIdFromInputId = encode( id );\n-                long eIdWithoutCollisionBit = clearCollision( eId );\n-                assert eIdFromInputId == eIdWithoutCollisionBit : format( \"Encoding mismatch during building of \" +\n-                        \"collision info. input id %s (a %s) marked as collision where this id was encoded into \" +\n-                        \"%d when put, but was now encoded into %d\",\n-                        id, id.getClass().getSimpleName(), eIdWithoutCollisionBit, eIdFromInputId );\n-                long offset = collisionValues.add( id );\n-                collisionNodeIdCache.set5ByteLong( collisionIndex, 0, nodeId );\n-                collisionNodeIdCache.set6ByteLong( collisionIndex, 5, offset );\n-\n-                // The base of our sorting this time is going to be node id, so register that in the radix\n-                radix.registerRadixOf( eIdWithoutCollisionBit );\n-            }\n-            progress.add( 1 );\n-        }\n-        progress.done();\n+  private int groupOf(long dataIndex)\n+  {\n+    return groupCache.get(dataIndex);\n+  }\n \n-        // Detect input id duplicates within the same group, with source information, line number and the works\n-        detectDuplicateInputIds( radix, collector, progress );\n-\n-        // We won't be needing these anymore\n-        collisionTrackerCache.close();\n-        collisionTrackerCache = null;\n-    }\n-\n-    private void detectDuplicateInputIds( Radix radix, Collector collector, ProgressListener progress )\n-            throws InterruptedException\n-    {\n-        // We do this collision sort using ParallelSort which has the data cache and the tracker cache,\n-        // the tracker cache gets sorted, data cache stays intact. In the collision data case we actually\n-        // have one more layer in here so we have tracker cache pointing to collisionNodeIdCache\n-        // pointing to dataCache. This can be done using the ParallelSort.Comparator abstraction.\n-        //\n-        // The Comparator below takes into account dataIndex for each eId its comparing so that an extra\n-        // comparison based on dataIndex is done if it's comparing two equal eIds. We do this so that\n-        // stretches of multiple equal eIds are sorted by dataIndex (i.e. node id) order,\n-        // to be able to write an efficient duplication scanning below and to have deterministic duplication reporting.\n-        Comparator duplicateComparator = new Comparator()\n-        {\n-            @Override\n-            public boolean lt( long left, long pivot )\n-            {\n-                long leftEId = dataCache.get( left );\n-                long pivotEId = dataCache.get( pivot );\n-                if ( comparator.lt( leftEId, pivotEId ) )\n-                {\n-                    return true;\n-                }\n-                if ( leftEId == pivotEId )\n-                {\n-                    return left < pivot;\n-                }\n-                return false;\n-            }\n-\n-            @Override\n-            public boolean ge( long right, long pivot )\n-            {\n-                long rightEId = dataCache.get( right );\n-                long pivotEId = dataCache.get( pivot );\n-                if ( comparator.ge( rightEId, pivotEId ) )\n-                {\n-                    return rightEId != pivotEId || right > pivot;\n-                }\n-                return false;\n-            }\n-\n-            @Override\n-            public long dataValue( long nodeId )\n-            {\n-                return dataCache.get( nodeId );\n-            }\n-        };\n-\n-        new ParallelSort( radix, as5ByteLongArray( collisionNodeIdCache ), numberOfCollisions - 1,\n-                collisionTrackerCache, processorsForParallelWork, progress, duplicateComparator ).run();\n-\n-        // Here we have a populated C\n-        // We want to detect duplicate input ids within it\n-        long previousEid = 0;\n-        int previousGroupId = -1;\n-        SameInputIdDetector detector = new SameInputIdDetector();\n-        progress.started( \"DEDUPLICATE\" );\n-        for ( int i = 0; i < numberOfCollisions; i++ )\n-        {\n-            long collisionIndex = collisionTrackerCache.get( i );\n-            long nodeId = collisionNodeIdCache.get5ByteLong( collisionIndex, 0 );\n-            long offset = collisionNodeIdCache.get6ByteLong( collisionIndex, 5 );\n-            long eid = dataCache.get( nodeId );\n-            int groupId = groupOf( nodeId );\n-            // collisions of same eId AND groupId are always together\n-            boolean same = eid == previousEid && previousGroupId == groupId;\n-            if ( !same )\n-            {\n-                detector.clear();\n-            }\n-\n-            // Potential duplicate\n-            Object inputId = collisionValues.get( offset );\n-            long nonDuplicateNodeId = detector.add( nodeId, inputId );\n-            if ( nonDuplicateNodeId != -1 )\n-            {   // Duplicate\n-                collector.collectDuplicateNode( inputId, nodeId, groups.get( groupId ).name() );\n-                trackerCache.markAsDuplicate( nodeId );\n-                unmarkAsCollision( nonDuplicateNodeId );\n-            }\n-\n-            previousEid = eid;\n-            previousGroupId = groupId;\n-            progress.add( 1 );\n-        }\n-        progress.done();\n-    }\n-\n-    private LongArray as5ByteLongArray( ByteArray byteArray )\n+  private long binarySearch(long x, Object inputId, long low, long high, int groupId)\n+  {\n+    while (low <= high)\n     {\n-        return new LongArray()\n-        {\n-            @Override\n-            public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-            {\n-                byteArray.acceptMemoryStatsVisitor( visitor );\n-            }\n-\n-            @Override\n-            public long length()\n-            {\n-                return byteArray.length();\n-            }\n-\n-            @Override\n-            public void close()\n-            {\n-                byteArray.close();\n-            }\n-\n-            @Override\n-            public void clear()\n-            {\n-                byteArray.clear();\n-            }\n-\n-            @Override\n-            public LongArray at( long index )\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public void set( long index, long value )\n-            {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public long get( long index )\n-            {\n-                return byteArray.get5ByteLong( index, 0 );\n-            }\n-        };\n-    }\n-\n-    private static class SameInputIdDetector\n-    {\n-        private long[] nodeIdArray = new long[10]; // grows on demand\n-        private Object[] inputIdArray = new Object[10]; // grows on demand\n-        private int cursor;\n-\n-        long add( long nodeId, Object inputId )\n-        {\n-            for ( int i = 0; i < cursor; i++ )\n-            {\n-                if ( inputIdArray[i].equals( inputId ) )\n-                {\n-                    return nodeIdArray[i];\n-                }\n-            }\n-\n-            if ( cursor == inputIdArray.length )\n-            {\n-                inputIdArray = Arrays.copyOf( inputIdArray, cursor * 2 );\n-                nodeIdArray = Arrays.copyOf( nodeIdArray, cursor * 2 );\n-            }\n-            inputIdArray[cursor] = inputId;\n-            nodeIdArray[cursor] = nodeId;\n-            cursor++;\n-            return -1;\n-        }\n-\n-        void clear()\n-        {\n-            cursor = 0;\n-        }\n-    }\n-\n-    private int groupOf( long dataIndex )\n-    {\n-        return groupCache.get( dataIndex );\n-    }\n-\n-    private long binarySearch( long x, Object inputId, long low, long high, int groupId )\n-    {\n-        while ( low <= high )\n-        {\n-            long mid = low + (high - low) / 2;//(low + high) / 2;\n-            long dataIndex = trackerCache.get( mid );\n-            if ( dataIndex == ID_NOT_FOUND )\n-            {\n-                return ID_NOT_FOUND;\n-            }\n-            long midValue = dataCache.get( dataIndex );\n-            switch ( unsignedDifference( clearCollision( midValue ), x ) )\n+      long mid = low + (high - low) / 2;//(low + high) / 2;\n+      long dataIndex = trackerCache.get(mid);\n+      if (dataIndex == ID_NOT_FOUND)\n+      {\n+        return ID_NOT_FOUND;\n+      }\n+      long midValue = dataCache.get(dataIndex);\n+      switch (unsignedDifference(clearCollision(midValue), x))\n+      {\n+        case EQ:\n+          // We found the value we were looking for. Question now is whether or not it's the only\n+          // of its kind. Not all values that there are duplicates of are considered collisions,\n+          // read more in detectAndMarkCollisions(). So regardless we need to check previous/next\n+          // if they are the same value.\n+          boolean leftEq = mid > 0 && unsignedCompare(x, dataValue(mid - 1), CompareType.EQ);\n+          boolean rightEq = mid < highestSetIndex && unsignedCompare(x, dataValue(mid + 1), CompareType.EQ);\n+          if (leftEq || rightEq)\n+          {   // OK so there are actually multiple equal data values here, we need to go through them all\n+            // to be sure we find the correct one.\n+            return findFromEIdRange(leftEq ? mid - 1 : mid, rightEq ? mid + 1 : mid, midValue, inputId, x, groupId);\n+          }\n+          // This is the only value here, let's do a simple comparison with correct group id and return\n+          return groupOf(dataIndex) == groupId ? dataIndex : ID_NOT_FOUND;\n+        case LT:\n+          low = mid + 1;\n+          break;\n+        default:\n+          high = mid - 1;\n+          break;\n+      }\n+    }\n+    return ID_NOT_FOUND;\n+  }\n+\n+  private long dataValue(long index)\n+  {\n+    return clearCollision(dataCache.get(trackerCache.get(index)));\n+  }\n+\n+  private long findCollisionIndex(long value)\n+  {\n+    // can't be done on unsorted data\n+    long low = 0;\n+    long high = numberOfCollisions - 1;\n+    while (low <= high)\n+    {\n+      long mid = (low + high) / 2;\n+      long midValue = collisionNodeIdCache.get5ByteLong(mid, 0);\n+      switch (unsignedDifference(midValue, value))\n+      {\n+        case EQ:\n+          return mid;\n+        case LT:\n+          low = mid + 1;\n+          break;\n+        default:\n+          high = mid - 1;\n+          break;\n+      }\n+    }\n+    return ID_NOT_FOUND;\n+  }\n+\n+  private long findFromEIdRange(long fromIndex, long toIndex, long val, Object inputId, long x, int groupId)\n+  {\n+    val = clearCollision(val);\n+    assert val == x;\n+\n+    while (fromIndex > 0 && unsignedCompare(val, dataValue(fromIndex - 1), CompareType.EQ))\n+    {\n+      fromIndex--;\n+    }\n+    while (toIndex < highestSetIndex && unsignedCompare(val, dataValue(toIndex + 1), CompareType.EQ))\n+    {\n+      toIndex++;\n+    }\n+\n+    return findFromEIdRange(fromIndex, toIndex, groupId, inputId);\n+  }\n+\n+  private long findFromEIdRange(long fromIndex, long toIndex, int groupId, Object inputId)\n+  {\n+    long lowestFound = ID_NOT_FOUND; // lowest data index means \"first put\"\n+    for (long index = fromIndex; index <= toIndex; index++)\n+    {\n+      long nodeId = trackerCache.get(index);\n+      int group = groupOf(nodeId);\n+      if (groupId == group)\n+      {\n+        long eId = dataCache.get(nodeId);\n+        if (isCollision(eId))\n+        {\n+          if (!trackerCache.isMarkedAsDuplicate(nodeId))\n+          {   // We found a data value for our group, but there are collisions within this group.\n+            // We need to consult the collision cache and original input id\n+            long collisionIndex = findCollisionIndex(nodeId);\n+            long offset = collisionNodeIdCache.get6ByteLong(collisionIndex, 5);\n+            Object value = collisionValues.get(offset);\n+            if (inputId.equals(value))\n             {\n-            case EQ:\n-                // We found the value we were looking for. Question now is whether or not it's the only\n-                // of its kind. Not all values that there are duplicates of are considered collisions,\n-                // read more in detectAndMarkCollisions(). So regardless we need to check previous/next\n-                // if they are the same value.\n-                boolean leftEq = mid > 0 && unsignedCompare( x, dataValue( mid - 1 ), CompareType.EQ );\n-                boolean rightEq = mid < highestSetIndex && unsignedCompare( x, dataValue( mid + 1 ), CompareType.EQ );\n-                if ( leftEq || rightEq )\n-                {   // OK so there are actually multiple equal data values here, we need to go through them all\n-                    // to be sure we find the correct one.\n-                    return findFromEIdRange( leftEq ? mid - 1 : mid, rightEq ? mid + 1 : mid, midValue, inputId, x, groupId );\n-                }\n-                // This is the only value here, let's do a simple comparison with correct group id and return\n-                return groupOf( dataIndex ) == groupId ? dataIndex : ID_NOT_FOUND;\n-            case LT:\n-                low = mid + 1;\n-                break;\n-            default:\n-                high = mid - 1;\n-                break;\n+              // :)\n+              lowestFound = lowestFound == ID_NOT_FOUND ? nodeId : min(lowestFound, nodeId);\n+              // continue checking so that we can find the lowest one. It's not up to us here to\n+              // consider multiple equal ids in this group an error or not. That should have been\n+              // decided in #prepare.\n             }\n+          }\n+        } else\n+        {   // We found a data value that is alone in its group. Just return it\n+          // :D\n+          lowestFound = nodeId;\n+\n+          // We don't need to look no further because this value wasn't a collision,\n+          // i.e. there are more like it for this group\n+          break;\n         }\n-        return ID_NOT_FOUND;\n+      }\n     }\n+    return lowestFound;\n+  }\n \n-    private long dataValue( long index )\n-    {\n-        return clearCollision( dataCache.get( trackerCache.get( index ) ) );\n-    }\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    nullSafeAcceptMemoryStatsVisitor(visitor, dataCache);\n+    nullSafeAcceptMemoryStatsVisitor(visitor, trackerCache);\n+    nullSafeAcceptMemoryStatsVisitor(visitor, collisionTrackerCache);\n+    nullSafeAcceptMemoryStatsVisitor(visitor, collisionNodeIdCache);\n+    nullSafeAcceptMemoryStatsVisitor(visitor, collisionValues);\n+  }\n \n-    private long findCollisionIndex( long value )\n+  private void nullSafeAcceptMemoryStatsVisitor(MemoryStatsVisitor visitor, MemoryStatsVisitor.Visitable mem)\n+  {\n+    if (mem != null)\n     {\n-        // can't be done on unsorted data\n-        long low = 0;\n-        long high = numberOfCollisions - 1;\n-        while ( low <= high )\n-        {\n-            long mid = (low + high) / 2;\n-            long midValue = collisionNodeIdCache.get5ByteLong( mid, 0 );\n-            switch ( unsignedDifference( midValue, value ) )\n-            {\n-            case EQ: return mid;\n-            case LT:\n-                low = mid + 1;\n-                break;\n-            default:\n-                high = mid - 1;\n-                break;\n-            }\n-        }\n-        return ID_NOT_FOUND;\n+      mem.acceptMemoryStatsVisitor(visitor);\n     }\n+  }\n \n-    private long findFromEIdRange( long fromIndex, long toIndex, long val, Object inputId, long x, int groupId )\n-    {\n-        val = clearCollision( val );\n-        assert val == x;\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[\" + encoder + \",\" + radix + \"]\";\n+  }\n \n-        while ( fromIndex > 0 && unsignedCompare( val, dataValue( fromIndex - 1 ), CompareType.EQ ) )\n-        {\n-            fromIndex--;\n-        }\n-        while ( toIndex < highestSetIndex && unsignedCompare( val, dataValue( toIndex + 1 ), CompareType.EQ ) )\n-        {\n-            toIndex++;\n-        }\n-\n-        return findFromEIdRange( fromIndex, toIndex, groupId, inputId );\n-    }\n-\n-    private long findFromEIdRange( long fromIndex, long toIndex, int groupId, Object inputId )\n+  @Override\n+  public void close()\n+  {\n+    dataCache.close();\n+    groupCache.close();\n+    if (trackerCache != null)\n     {\n-        long lowestFound = ID_NOT_FOUND; // lowest data index means \"first put\"\n-        for ( long index = fromIndex; index <= toIndex; index++ )\n-        {\n-            long nodeId = trackerCache.get( index );\n-            int group = groupOf( nodeId );\n-            if ( groupId == group )\n-            {\n-                long eId = dataCache.get( nodeId );\n-                if ( isCollision( eId ) )\n-                {\n-                    if ( !trackerCache.isMarkedAsDuplicate( nodeId ) )\n-                    {   // We found a data value for our group, but there are collisions within this group.\n-                        // We need to consult the collision cache and original input id\n-                        long collisionIndex = findCollisionIndex( nodeId );\n-                        long offset = collisionNodeIdCache.get6ByteLong( collisionIndex, 5 );\n-                        Object value = collisionValues.get( offset );\n-                        if ( inputId.equals( value ) )\n-                        {\n-                            // :)\n-                            lowestFound = lowestFound == ID_NOT_FOUND ? nodeId : min( lowestFound, nodeId );\n-                            // continue checking so that we can find the lowest one. It's not up to us here to\n-                            // consider multiple equal ids in this group an error or not. That should have been\n-                            // decided in #prepare.\n-                        }\n-                    }\n-                }\n-                else\n-                {   // We found a data value that is alone in its group. Just return it\n-                    // :D\n-                    lowestFound = nodeId;\n-\n-                    // We don't need to look no further because this value wasn't a collision,\n-                    // i.e. there are more like it for this group\n-                    break;\n-                }\n-            }\n-        }\n-        return lowestFound;\n+      trackerCache.close();\n     }\n-\n-    @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n+    if (collisionNodeIdCache != null)\n     {\n-        nullSafeAcceptMemoryStatsVisitor( visitor, dataCache );\n-        nullSafeAcceptMemoryStatsVisitor( visitor, trackerCache );\n-        nullSafeAcceptMemoryStatsVisitor( visitor, collisionTrackerCache );\n-        nullSafeAcceptMemoryStatsVisitor( visitor, collisionNodeIdCache );\n-        nullSafeAcceptMemoryStatsVisitor( visitor, collisionValues );\n+      collisionNodeIdCache.close();\n     }\n-\n-    private void nullSafeAcceptMemoryStatsVisitor( MemoryStatsVisitor visitor, MemoryStatsVisitor.Visitable mem )\n+    if (collisionValues != null)\n     {\n-        if ( mem != null )\n-        {\n-            mem.acceptMemoryStatsVisitor( visitor );\n-        }\n+      collisionValues.close();\n     }\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public Visitable memoryEstimation(long numberOfNodes)\n+  {\n+    return new Visitable()\n     {\n-        return getClass().getSimpleName() + \"[\" + encoder + \",\" + radix + \"]\";\n-    }\n+      @Override\n+      public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+      {\n+        int trackerSize = numberOfNodes > IntTracker.MAX_ID ? BigIdTracker.SIZE : IntTracker.SIZE;\n+        visitor.offHeapUsage(numberOfNodes * (Long.BYTES /*data*/ + trackerSize /*tracker*/));\n+      }\n+    };\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public PrimitiveLongIterator leftOverDuplicateNodesIds()\n+  {\n+    if (numberOfCollisions == 0)\n     {\n-        dataCache.close();\n-        groupCache.close();\n-        if ( trackerCache != null )\n-        {\n-            trackerCache.close();\n-        }\n-        if ( collisionNodeIdCache != null )\n-        {\n-            collisionNodeIdCache.close();\n-        }\n-        if ( collisionValues != null )\n-        {\n-            collisionValues.close();\n-        }\n+      return PrimitiveLongCollections.emptyIterator();\n     }\n \n-    @Override\n-    public Visitable memoryEstimation( long numberOfNodes )\n+    // Scans duplicate marks in tracker cache. There is no bit left in dataCache to store this bit so we use\n+    // the tracker cache as if each index into it was the node id.\n+    return new PrimitiveLongCollections.PrimitiveLongBaseIterator()\n     {\n-        return new Visitable()\n-        {\n-            @Override\n-            public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-            {\n-                int trackerSize = numberOfNodes > IntTracker.MAX_ID ? BigIdTracker.SIZE : IntTracker.SIZE;\n-                visitor.offHeapUsage( numberOfNodes * (Long.BYTES /*data*/ + trackerSize /*tracker*/) );\n-            }\n-        };\n-    }\n+      private long nodeId;\n \n-    @Override\n-    public PrimitiveLongIterator leftOverDuplicateNodesIds()\n-    {\n-        if ( numberOfCollisions == 0 )\n+      @Override\n+      protected boolean fetchNext()\n+      {\n+        while (nodeId <= highestSetIndex)\n         {\n-            return PrimitiveLongCollections.emptyIterator();\n+          long candidate = nodeId++;\n+          if (trackerCache.isMarkedAsDuplicate(candidate))\n+          {\n+            return next(candidate);\n+          }\n         }\n-\n-        // Scans duplicate marks in tracker cache. There is no bit left in dataCache to store this bit so we use\n-        // the tracker cache as if each index into it was the node id.\n-        return new PrimitiveLongCollections.PrimitiveLongBaseIterator()\n-        {\n-            private long nodeId;\n-\n-            @Override\n-            protected boolean fetchNext()\n-            {\n-                while ( nodeId <= highestSetIndex )\n-                {\n-                    long candidate = nodeId++;\n-                    if ( trackerCache.isMarkedAsDuplicate( candidate ) )\n-                    {\n-                        return next( candidate );\n-                    }\n-                }\n-                return false;\n-            }\n-        };\n-    }\n+        return false;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 1306
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "362",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "366",
                    "column": "16",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "444",
                    "column": "32",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "498",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 327).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "555",
                    "column": "57",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "678",
                    "column": "51",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "711",
                    "column": "37",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "875",
                    "column": "48",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2875/EncodingIdMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2875/EncodingIdMapper.java\nindex b85d10ccd06..3d3cf56abf7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2875/EncodingIdMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2875/EncodingIdMapper.java\n@@ -96,7 +96,8 @@ public class EncodingIdMapper implements IdMapper\n     }\n \n     public static final Monitor NO_MONITOR = count ->\n-    {   // Do nothing.\n+    {\n+    // Do nothing.\n     };\n \n     // Bit in encoded String --> long values that marks that the particular item has a collision,\n@@ -111,8 +112,7 @@ public class EncodingIdMapper implements IdMapper\n     // because the current set of Encoder implementations will always set some amount of bits higher up in\n     // the long value representing the length of the id.\n     private static final long GAP_VALUE = 0;\n-\n-    private final Factory<Radix> radixFactory;\n+private final Factory<Radix> radixFactory;\n     private final NumberArrayFactory cacheFactory;\n     private final TrackerFactory trackerFactory;\n     // Encoded values added in #put, in the order in which they are put. Indexes in the array are the actual node ids,\n@@ -156,8 +156,7 @@ public class EncodingIdMapper implements IdMapper\n     }\n \n     EncodingIdMapper( NumberArrayFactory cacheFactory, Encoder encoder, Factory<Radix> radixFactory,\n-            Monitor monitor, TrackerFactory trackerFactory, Groups groups, LongFunction<CollisionValues> collisionValuesFactory,\n-            int chunkSize, int processorsForParallelWork, Comparator comparator )\n+            Monitor monitor, TrackerFactory trackerFactory, Groups groups, LongFunction<CollisionValues> collisionValuesFactory, int chunkSize, int processorsForParallelWork, Comparator comparator )\n     {\n         this.radixFactory = radixFactory;\n         this.monitor = monitor;\n@@ -200,7 +199,8 @@ public class EncodingIdMapper implements IdMapper\n         {\n             throw new IllegalStateException( \"Encoder \" + encoder + \" returned an illegal encoded value \" + GAP_VALUE );\n         }\n-        return eId;\n+\n+return eId;\n     }\n \n     @Override\n@@ -230,8 +230,7 @@ public class EncodingIdMapper implements IdMapper\n         {\n             sortBuckets = new ParallelSort( radix, dataCache, highestSetIndex, trackerCache,\n                     processorsForParallelWork, progress, comparator ).run();\n-\n-            long pessimisticNumberOfCollisions = detectAndMarkCollisions( progress );\n+    long pessimisticNumberOfCollisions = detectAndMarkCollisions( progress );\n             if ( pessimisticNumberOfCollisions > 0 )\n             {\n                 buildCollisionInfo( inputIdLookup, pessimisticNumberOfCollisions, collector, progress );\n@@ -240,11 +239,10 @@ public class EncodingIdMapper implements IdMapper\n         catch ( InterruptedException e )\n         {\n             Thread.interrupted();\n-            throw new RuntimeException( \"Got interrupted while preparing the index. Throwing this exception \"\n-                    + \"onwards will cause a chain reaction which will cause a panic in the whole import, \"\n-                    + \"so mission accomplished\" );\n+            throw new RuntimeException( \"Got interrupted while preparing the index. Throwing this exception \" + \"onwards will cause a chain reaction which will cause a panic in the whole import, \" + \"so mission accomplished\" );\n         }\n-        readyForUse = true;\n+\n+readyForUse = true;\n     }\n \n     private static void updateRadix( LongArray values, Radix radix, long highestSetIndex )\n@@ -283,7 +281,8 @@ public class EncodingIdMapper implements IdMapper\n             high = highestSetIndex;\n             returnVal = binarySearch( x, inputId, low, high, groupId );\n         }\n-        return returnVal;\n+\n+return returnVal;\n     }\n \n     private static long setCollision( long eId )\n@@ -327,8 +326,7 @@ public class EncodingIdMapper implements IdMapper\n             // In all chunks except the last this chunk also takes care of the detection in the seam,\n             // but for the last one there's no seam at the end.\n             long end = last ? toExclusive - 1 : toExclusive;\n-\n-            for ( long i = fromInclusive; i < end; i++ )\n+for ( long i = fromInclusive; i < end; i++ )\n             {\n                 detect( sameGroupDetector, i );\n                 if ( ++localProgress == 1000 )\n@@ -360,16 +358,12 @@ public class EncodingIdMapper implements IdMapper\n \n             switch ( unsignedDifference( eIdA, eIdB ) )\n             {\n-            case GT: throw new IllegalStateException( \"Unsorted data, a > b Failure:[\" + i + \"] \" +\n-                    Long.toHexString( eIdA ) + \" > \" + Long.toHexString( eIdB ) + \" | \" +\n-                    radixOf( eIdA ) + \":\" + radixOf( eIdB ) );\n-            case EQ:\n+            case GT:\n+    throw new IllegalStateException( \"Unsorted data, a > b Failure:[\" + i + \"] \" + Long.toHexString( eIdA ) + \" > \" + Long.toHexString( eIdB ) + \" | \" + radixOf( eIdA ) + \":\" + radixOf( eIdB ) );\n+    case EQ:\n                 // Here we have two equal encoded values. First let's check if they are in the same id space.\n-                long collision = sameGroupDetector.collisionWithinSameGroup(\n-                        dataIndexA, groupOf( dataIndexA ),\n-                        dataIndexB, groupOf( dataIndexB ) );\n-\n-                if ( dataIndexA > dataIndexB )\n+                long collision = sameGroupDetector.collisionWithinSameGroup( dataIndexA, groupOf( dataIndexA ), dataIndexB, groupOf( dataIndexB ) );\n+if ( dataIndexA> dataIndexB )\n                 {\n                     // Swap so that lower tracker index means lower data index. TODO Why do we do this?\n                     trackerCache.swap( i, i + 1 );\n@@ -381,7 +375,8 @@ public class EncodingIdMapper implements IdMapper\n                     {\n                         numberOfCollisions++;\n                     }\n-                    if ( markAsCollision( dataIndexB ) )\n+\n+if ( markAsCollision( dataIndexB ) )\n                     {\n                         numberOfCollisions++;\n                     }\n@@ -446,7 +441,7 @@ public class EncodingIdMapper implements IdMapper\n         }\n \n         progress.done();\n-        if ( numberOfCollisions > Integer.MAX_VALUE )\n+        if ( numberOfCollisions> Integer.MAX_VALUE )\n         {\n             throw new InputException( \"Too many collisions: \" + numberOfCollisions );\n         }\n@@ -483,9 +478,8 @@ public class EncodingIdMapper implements IdMapper\n     }\n \n     private void buildCollisionInfo( LongFunction<Object> inputIdLookup, long pessimisticNumberOfCollisions,\n-            Collector collector, ProgressListener progress )\n-            throws InterruptedException\n-    {\n+            Collector collector, ProgressListener progress ) throws InterruptedException\n+{\n         progress.started( \"RESOLVE (~\" + pessimisticNumberOfCollisions + \" collisions)\" );\n         Radix radix = radixFactory.newInstance();\n         collisionNodeIdCache = cacheFactory.newByteArray( pessimisticNumberOfCollisions, new byte[COLLISION_ENTRY_SIZE] );\n@@ -501,11 +495,8 @@ public class EncodingIdMapper implements IdMapper\n                 Object id = inputIdLookup.apply( nodeId );\n                 long eIdFromInputId = encode( id );\n                 long eIdWithoutCollisionBit = clearCollision( eId );\n-                assert eIdFromInputId == eIdWithoutCollisionBit : format( \"Encoding mismatch during building of \" +\n-                        \"collision info. input id %s (a %s) marked as collision where this id was encoded into \" +\n-                        \"%d when put, but was now encoded into %d\",\n-                        id, id.getClass().getSimpleName(), eIdWithoutCollisionBit, eIdFromInputId );\n-                long offset = collisionValues.add( id );\n+                assert eIdFromInputId == eIdWithoutCollisionBit : format( \"Encoding mismatch during building of \" + \"collision info. input id %s (a %s) marked as collision where this id was encoded into \" + \"%d when put, but was now encoded into %d\", id, id.getClass().getSimpleName(), eIdWithoutCollisionBit, eIdFromInputId );\n+    long offset = collisionValues.add( id );\n                 collisionNodeIdCache.set5ByteLong( collisionIndex, 0, nodeId );\n                 collisionNodeIdCache.set6ByteLong( collisionIndex, 5, offset );\n \n@@ -524,9 +515,8 @@ public class EncodingIdMapper implements IdMapper\n         collisionTrackerCache = null;\n     }\n \n-    private void detectDuplicateInputIds( Radix radix, Collector collector, ProgressListener progress )\n-            throws InterruptedException\n-    {\n+    private void detectDuplicateInputIds( Radix radix, Collector collector, ProgressListener progress ) throws InterruptedException\n+{\n         // We do this collision sort using ParallelSort which has the data cache and the tracker cache,\n         // the tracker cache gets sorted, data cache stays intact. In the collision data case we actually\n         // have one more layer in here so we have tracker cache pointing to collisionNodeIdCache\n@@ -547,7 +537,8 @@ public class EncodingIdMapper implements IdMapper\n                 {\n                     return true;\n                 }\n-                if ( leftEId == pivotEId )\n+\n+if ( leftEId == pivotEId )\n                 {\n                     return left < pivot;\n                 }\n@@ -561,7 +552,7 @@ public class EncodingIdMapper implements IdMapper\n                 long pivotEId = dataCache.get( pivot );\n                 if ( comparator.ge( rightEId, pivotEId ) )\n                 {\n-                    return rightEId != pivotEId || right > pivot;\n+                    return rightEId != pivotEId || right> pivot;\n                 }\n                 return false;\n             }\n@@ -575,8 +566,7 @@ public class EncodingIdMapper implements IdMapper\n \n         new ParallelSort( radix, as5ByteLongArray( collisionNodeIdCache ), numberOfCollisions - 1,\n                 collisionTrackerCache, processorsForParallelWork, progress, duplicateComparator ).run();\n-\n-        // Here we have a populated C\n+    // Here we have a populated C\n         // We want to detect duplicate input ids within it\n         long previousEid = 0;\n         int previousGroupId = -1;\n@@ -600,7 +590,8 @@ public class EncodingIdMapper implements IdMapper\n             Object inputId = collisionValues.get( offset );\n             long nonDuplicateNodeId = detector.add( nodeId, inputId );\n             if ( nonDuplicateNodeId != -1 )\n-            {   // Duplicate\n+            {\n+    // Duplicate\n                 collector.collectDuplicateNode( inputId, nodeId, groups.get( groupId ).name() );\n                 trackerCache.markAsDuplicate( nodeId );\n                 unmarkAsCollision( nonDuplicateNodeId );\n@@ -682,9 +673,9 @@ public class EncodingIdMapper implements IdMapper\n                 inputIdArray = Arrays.copyOf( inputIdArray, cursor * 2 );\n                 nodeIdArray = Arrays.copyOf( nodeIdArray, cursor * 2 );\n             }\n-            inputIdArray[cursor] = inputId;\n-            nodeIdArray[cursor] = nodeId;\n-            cursor++;\n+\n+inputIdArray[cursor] = inputId;\n+            nodeIdArray[cursor] = nodeId; cursor++;\n             return -1;\n         }\n \n@@ -703,7 +694,7 @@ public class EncodingIdMapper implements IdMapper\n     {\n         while ( low <= high )\n         {\n-            long mid = low + (high - low) / 2;//(low + high) / 2;\n+            long mid = low + ( high - low) / 2;//(low + high) / 2;\n             long dataIndex = trackerCache.get( mid );\n             if ( dataIndex == ID_NOT_FOUND )\n             {\n@@ -717,10 +708,11 @@ public class EncodingIdMapper implements IdMapper\n                 // of its kind. Not all values that there are duplicates of are considered collisions,\n                 // read more in detectAndMarkCollisions(). So regardless we need to check previous/next\n                 // if they are the same value.\n-                boolean leftEq = mid > 0 && unsignedCompare( x, dataValue( mid - 1 ), CompareType.EQ );\n+                boolean leftEq = mid> 0 && unsignedCompare( x, dataValue( mid - 1 ), CompareType.EQ );\n                 boolean rightEq = mid < highestSetIndex && unsignedCompare( x, dataValue( mid + 1 ), CompareType.EQ );\n                 if ( leftEq || rightEq )\n-                {   // OK so there are actually multiple equal data values here, we need to go through them all\n+                {\n+    // OK so there are actually multiple equal data values here, we need to go through them all\n                     // to be sure we find the correct one.\n                     return findFromEIdRange( leftEq ? mid - 1 : mid, rightEq ? mid + 1 : mid, midValue, inputId, x, groupId );\n                 }\n@@ -753,8 +745,9 @@ public class EncodingIdMapper implements IdMapper\n             long midValue = collisionNodeIdCache.get5ByteLong( mid, 0 );\n             switch ( unsignedDifference( midValue, value ) )\n             {\n-            case EQ: return mid;\n-            case LT:\n+            case EQ:\n+    return mid;\n+    case LT:\n                 low = mid + 1;\n                 break;\n             default:\n@@ -795,7 +788,8 @@ public class EncodingIdMapper implements IdMapper\n                 if ( isCollision( eId ) )\n                 {\n                     if ( !trackerCache.isMarkedAsDuplicate( nodeId ) )\n-                    {   // We found a data value for our group, but there are collisions within this group.\n+                    {\n+    // We found a data value for our group, but there are collisions within this group.\n                         // We need to consult the collision cache and original input id\n                         long collisionIndex = findCollisionIndex( nodeId );\n                         long offset = collisionNodeIdCache.get6ByteLong( collisionIndex, 5 );\n@@ -811,7 +805,8 @@ public class EncodingIdMapper implements IdMapper\n                     }\n                 }\n                 else\n-                {   // We found a data value that is alone in its group. Just return it\n+                {\n+    // We found a data value that is alone in its group. Just return it\n                     // :D\n                     lowestFound = nodeId;\n \n@@ -857,11 +852,13 @@ public class EncodingIdMapper implements IdMapper\n         {\n             trackerCache.close();\n         }\n-        if ( collisionNodeIdCache != null )\n+\n+if ( collisionNodeIdCache != null )\n         {\n             collisionNodeIdCache.close();\n         }\n-        if ( collisionValues != null )\n+\n+if ( collisionValues != null )\n         {\n             collisionValues.close();\n         }\n@@ -875,7 +872,7 @@ public class EncodingIdMapper implements IdMapper\n             @Override\n             public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n             {\n-                int trackerSize = numberOfNodes > IntTracker.MAX_ID ? BigIdTracker.SIZE : IntTracker.SIZE;\n+                int trackerSize = numberOfNodes> IntTracker.MAX_ID ? BigIdTracker.SIZE : IntTracker.SIZE;\n                 visitor.offHeapUsage( numberOfNodes * (Long.BYTES /*data*/ + trackerSize /*tracker*/) );\n             }\n         };\n@@ -910,4 +907,4 @@ public class EncodingIdMapper implements IdMapper\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}