{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "74",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 97).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n    List<StreamElement> elements =\n        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n    assertTrue(elements.isEmpty());\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/24/BinaryBlobFormatTest.java\nindex 3314d71c56a..ce1e333803a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/24/BinaryBlobFormatTest.java\n@@ -70,8 +70,7 @@ public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n   @Test\n   public void testEmptyStream() throws IOException {\n     ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n-    List<StreamElement> elements =\n-        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n+    List<StreamElement> elements = Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n     assertTrue(elements.isEmpty());\n   }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/24/BinaryBlobFormatTest.java\nindex 3314d71c56a..c78f03ff4c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/24/BinaryBlobFormatTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.bulk;\n \n import static org.junit.Assert.assertThrows;\n@@ -37,9 +38,11 @@ import org.junit.runners.Parameterized;\n @RunWith(Parameterized.class)\n public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n \n-  @Parameterized.Parameter public boolean gzip;\n+  @Parameterized.Parameter\n+  public boolean gzip;\n \n-  public BinaryBlobFormatTest() throws URISyntaxException {}\n+  public BinaryBlobFormatTest() throws URISyntaxException {\n+  }\n \n   @Parameterized.Parameters\n   public static Collection<Boolean> params() {\n@@ -71,7 +74,8 @@ public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n   public void testEmptyStream() throws IOException {\n     ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n     List<StreamElement> elements =\n-        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n+        Lists.newArrayList(\n+            new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n     assertTrue(elements.isEmpty());\n   }\n }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/24/BinaryBlobFormatTest.java\nindex 3314d71c56a..fb52d1c8a25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/24/BinaryBlobFormatTest.java\n@@ -37,7 +37,8 @@ import org.junit.runners.Parameterized;\n @RunWith(Parameterized.class)\n public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n \n-  @Parameterized.Parameter public boolean gzip;\n+  @Parameterized.Parameter\n+public boolean gzip;\n \n   public BinaryBlobFormatTest() throws URISyntaxException {}\n \n@@ -70,8 +71,7 @@ public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n   @Test\n   public void testEmptyStream() throws IOException {\n     ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n-    List<StreamElement> elements =\n-        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n+    List<StreamElement> elements = Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n     assertTrue(elements.isEmpty());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "67",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 51, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 49, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/24/BinaryBlobFormatTest.java\nindex 3314d71c56a..4bbee5431ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/24/BinaryBlobFormatTest.java\n@@ -17,7 +17,6 @@ package cz.o2.proxima.direct.bulk;\n \n import static org.junit.Assert.assertThrows;\n import static org.junit.Assert.assertTrue;\n-\n import com.google.common.collect.Lists;\n import cz.o2.proxima.gcloud.storage.proto.Serialization.Header;\n import cz.o2.proxima.storage.StreamElement;\n@@ -34,6 +33,8 @@ import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n /** Test suite for {@link BinaryBlobFormat} for reading and writing. */\n+\n+\n @RunWith(Parameterized.class)\n public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n \n@@ -53,25 +54,24 @@ public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n \n   @Test\n   public void testReadInvalidMagic() throws IOException {\n-    byte[] bytes = Header.newBuilder().setMagic(\"INVALID\").build().toByteArray();\n+    byte[] bytes = Header.newBuilder().setMagic(\"INVALID\")\n+                                      .build()\n+                                      .toByteArray();\n     ByteArrayOutputStream baos = new ByteArrayOutputStream();\n     DataOutputStream dos = new DataOutputStream(baos);\n     dos.writeInt(bytes.length);\n     dos.write(bytes);\n     dos.flush();\n     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n-    assertThrows(\n-        IllegalArgumentException.class,\n-        () -> {\n-          new BinaryBlobFormat.BinaryBlobReader(file, entity, bais);\n-        });\n+    assertThrows(IllegalArgumentException.class, () -> {\n+                                                   new BinaryBlobFormat.BinaryBlobReader(file, entity, bais);\n+                                                 });\n   }\n \n   @Test\n   public void testEmptyStream() throws IOException {\n     ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n-    List<StreamElement> elements =\n-        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n+    List<StreamElement> elements = Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n     assertTrue(elements.isEmpty());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/24/BinaryBlobFormatTest.java\nindex 3314d71c56a..ce1e333803a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/24/BinaryBlobFormatTest.java\n@@ -70,8 +70,7 @@ public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n   @Test\n   public void testEmptyStream() throws IOException {\n     ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n-    List<StreamElement> elements =\n-        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n+    List<StreamElement> elements = Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n     assertTrue(elements.isEmpty());\n   }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "column": "36",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/24/BinaryBlobFormatTest.java\nindex 3314d71c56a..3dd490cbda3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/24/BinaryBlobFormatTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/24/BinaryBlobFormatTest.java\n@@ -70,8 +70,7 @@ public class BinaryBlobFormatTest extends AbstractFileFormatTest {\n   @Test\n   public void testEmptyStream() throws IOException {\n     ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {});\n-    List<StreamElement> elements =\n-        Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity, bais).iterator());\n-    assertTrue(elements.isEmpty());\n+    List<StreamElement> elements = Lists.newArrayList(new BinaryBlobFormat.BinaryBlobReader(file, entity,bais).iterator())\n+    ;assertTrue(elements.isEmpty());\n   }\n }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}