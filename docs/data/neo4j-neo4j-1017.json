{
    "project_name": "neo4j-neo4j",
    "error_id": "1017",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1017/DependencyResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1017/DependencyResolver.java\nindex 43f92e11c40..0e4186344ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1017/DependencyResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1017/DependencyResolver.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.common;\n \n import java.util.Iterator;\n@@ -37,51 +38,51 @@ public interface DependencyResolver\n      * Tries to resolve a dependency that matches a given class. {@link SelectionStrategy#SINGLE Single} selection strategy is used to select dependencies\n      * among available candidates.\n      *\n-     *\n      * @param type the type of {@link Class} that the returned instance must implement.\n-     * @param <T> the type that the returned instance must implement\n+     * @param <T>  the type that the returned instance must implement\n      * @return the resolved dependency for the given type.\n-     * @throws IllegalArgumentException if no matching dependency was found.\n+     * @throws IllegalArgumentException       if no matching dependency was found.\n      * @throws UnsatisfiedDependencyException if no matching dependency was found.\n      */\n-    <T> T resolveDependency( Class<T> type );\n+    <T> T resolveDependency(Class<T> type);\n \n     /**\n      * Tries to resolve a dependency that matches a given class. All candidates are fed to the\n      * {@code selector} which ultimately becomes responsible for making the choice between all available candidates.\n      *\n-     * @param type the type of {@link Class} that the returned instance must implement.\n+     * @param type     the type of {@link Class} that the returned instance must implement.\n      * @param selector {@link SelectionStrategy} which will make the choice of which one to return among\n-     * matching candidates.\n-     * @param <T> the type that the returned instance must implement\n+     *                 matching candidates.\n+     * @param <T>      the type that the returned instance must implement\n      * @return the resolved dependency for the given type.\n-     * @throws IllegalArgumentException if no matching dependency was found.\n+     * @throws IllegalArgumentException       if no matching dependency was found.\n      * @throws UnsatisfiedDependencyException if no matching dependency was found.\n      */\n-    <T> T resolveDependency( Class<T> type, SelectionStrategy selector );\n+    <T> T resolveDependency(Class<T> type, SelectionStrategy selector);\n \n     /**\n      * Tries to resolve a dependencies that matches a given class.\n      *\n      * @param type the type of {@link Class} that the returned instances must implement.\n-     * @param <T> the type that the returned instance must implement\n+     * @param <T>  the type that the returned instance must implement\n      * @return the iterables with resolved dependencies for the given type.\n      */\n-    default <T> Iterable<T> resolveTypeDependencies( Class<T> type )\n+    default <T> Iterable<T> resolveTypeDependencies(Class<T> type)\n     {\n-        throw new UnsupportedOperationException( \"not implemented\" );\n+        throw new UnsupportedOperationException(\"not implemented\");\n     }\n \n-    <T> Supplier<T> provideDependency( Class<T> type, SelectionStrategy selector );\n+    <T> Supplier<T> provideDependency(Class<T> type, SelectionStrategy selector);\n \n-    <T> Supplier<T> provideDependency( Class<T> type );\n+    <T> Supplier<T> provideDependency(Class<T> type);\n \n     /**\n      * Check if dependency resolver contains dependencies of provided type\n+     *\n      * @param type dependency type to lookup\n      * @return true if dependency resolver contains dependency of requested type, false otherwise\n      */\n-    boolean containsDependency( Class<?> type );\n+    boolean containsDependency(Class<?> type);\n \n     /**\n      * Responsible for making the choice between available candidates.\n@@ -92,24 +93,24 @@ public interface DependencyResolver\n          * Given a set of candidates, select an appropriate one. Even if there are candidates this\n          * method may throw {@link IllegalArgumentException} if there was no suitable candidate.\n          *\n-         * @param type the type of items.\n+         * @param type       the type of items.\n          * @param candidates candidates up for selection, where one should be picked. There might\n-         * also be no suitable candidate, in which case an exception should be thrown.\n-         * @param <T> the type of items\n+         *                   also be no suitable candidate, in which case an exception should be thrown.\n+         * @param <T>        the type of items\n          * @return a suitable candidate among all available.\n          * @throws IllegalArgumentException if no suitable candidate was found.\n          */\n-        <T> T select( Class<T> type, Iterable<? extends T> candidates ) throws IllegalArgumentException;\n+        <T> T select(Class<T> type, Iterable<? extends T> candidates) throws IllegalArgumentException;\n \n         SelectionStrategy FIRST = new SelectionStrategy()\n         {\n             @Override\n-            public <T> T select( Class<T> type, Iterable<? extends T> candidates ) throws IllegalArgumentException\n+            public <T> T select(Class<T> type, Iterable<? extends T> candidates) throws IllegalArgumentException\n             {\n                 Iterator<? extends T> iterator = candidates.iterator();\n-                if ( !iterator.hasNext() )\n+                if (!iterator.hasNext())\n                 {\n-                    throw new IllegalArgumentException( \"Could not resolve dependency of type:\" + type.getName() );\n+                    throw new IllegalArgumentException(\"Could not resolve dependency of type:\" + type.getName());\n                 }\n                 return iterator.next();\n             }\n@@ -121,21 +122,20 @@ public interface DependencyResolver\n         SelectionStrategy SINGLE = new SelectionStrategy()\n         {\n             @Override\n-            public <T> T select( Class<T> type, Iterable<? extends T> candidates ) throws IllegalArgumentException\n+            public <T> T select(Class<T> type, Iterable<? extends T> candidates) throws IllegalArgumentException\n             {\n                 Iterator<? extends T> iterator = candidates.iterator();\n-                if ( !iterator.hasNext() )\n+                if (!iterator.hasNext())\n                 {\n-                    throw new IllegalArgumentException( \"Could not resolve dependency of type:\" + type.getName() );\n+                    throw new IllegalArgumentException(\"Could not resolve dependency of type:\" + type.getName());\n                 }\n \n                 T only = iterator.next();\n \n-                if ( iterator.hasNext() )\n+                if (iterator.hasNext())\n                 {\n-                    throw new IllegalArgumentException( \"Multiple dependencies of type:\" + type.getName() );\n-                }\n-                else\n+                    throw new IllegalArgumentException(\"Multiple dependencies of type:\" + type.getName());\n+                } else\n                 {\n                     return only;\n                 }\n@@ -150,21 +150,21 @@ public interface DependencyResolver\n     abstract class Adapter implements DependencyResolver\n     {\n         @Override\n-        public <T> T resolveDependency( Class<T> type )\n+        public <T> T resolveDependency(Class<T> type)\n         {\n-            return resolveDependency( type, SINGLE );\n+            return resolveDependency(type, SINGLE);\n         }\n \n         @Override\n-        public <T> Supplier<T> provideDependency( final Class<T> type, final SelectionStrategy selector )\n+        public <T> Supplier<T> provideDependency(final Class<T> type, final SelectionStrategy selector)\n         {\n-            return () -> resolveDependency( type, selector );\n+            return () -> resolveDependency(type, selector);\n         }\n \n         @Override\n-        public <T> Supplier<T> provideDependency( final Class<T> type )\n+        public <T> Supplier<T> provideDependency(final Class<T> type)\n         {\n-            return () -> resolveDependency( type );\n+            return () -> resolveDependency(type);\n         }\n     }\n }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1017/DependencyResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1017/DependencyResolver.java\nindex 43f92e11c40..7894b0e5038 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1017/DependencyResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1017/DependencyResolver.java\n@@ -167,4 +167,4 @@ public interface DependencyResolver\n             return () -> resolveDependency( type );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}