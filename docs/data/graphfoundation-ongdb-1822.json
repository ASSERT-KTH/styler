{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1822",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1822/PageCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1822/PageCache.java\nindex c1f33c0ad40..3bb8f451a03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1822/PageCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1822/PageCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.File;\n@@ -38,122 +39,122 @@ import org.neo4j.io.fs.FileSystemAbstraction;\n  */\n public interface PageCache extends AutoCloseable\n {\n-    /**\n-     * The default {@link #pageSize()}.\n-     */\n-    int PAGE_SIZE = 8192;\n+  /**\n+   * The default {@link #pageSize()}.\n+   */\n+  int PAGE_SIZE = 8192;\n \n-    /**\n-     * Ask for a handle to a paged file, backed by this page cache.\n-     * <p>\n-     * Note that this currently asks for the pageSize to use, which is an artifact or records being\n-     * of varying size in the stores. This should be consolidated to use a standard page size for the\n-     * whole cache, with records aligning on those page boundaries.\n-     *\n-     * @param file The file to map.\n-     * @param pageSize The file page size to use for this mapping. If the file is already mapped with a different page\n-     * size, an exception will be thrown.\n-     * @param openOptions The set of open options to use for mapping this file.\n-     * The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n-     * The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n-     * the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n-     * been mapped.\n-     * The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n-     * All other options are either silently ignored, or will cause an exception to be thrown.\n-     * @throws java.nio.file.NoSuchFileException if the given file does not exist, and the\n-     * {@link StandardOpenOption#CREATE} option was not specified.\n-     * @throws IOException if the file could otherwise not be mapped. Causes include the file being locked.\n-     */\n-    PagedFile map( File file, int pageSize, OpenOption... openOptions ) throws IOException;\n+  /**\n+   * Ask for a handle to a paged file, backed by this page cache.\n+   * <p>\n+   * Note that this currently asks for the pageSize to use, which is an artifact or records being\n+   * of varying size in the stores. This should be consolidated to use a standard page size for the\n+   * whole cache, with records aligning on those page boundaries.\n+   *\n+   * @param file        The file to map.\n+   * @param pageSize    The file page size to use for this mapping. If the file is already mapped with a different page\n+   *                    size, an exception will be thrown.\n+   * @param openOptions The set of open options to use for mapping this file.\n+   *                    The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n+   *                    The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n+   *                    the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n+   *                    been mapped.\n+   *                    The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n+   *                    All other options are either silently ignored, or will cause an exception to be thrown.\n+   * @throws java.nio.file.NoSuchFileException if the given file does not exist, and the\n+   *                                           {@link StandardOpenOption#CREATE} option was not specified.\n+   * @throws IOException                       if the file could otherwise not be mapped. Causes include the file being locked.\n+   */\n+  PagedFile map(File file, int pageSize, OpenOption... openOptions) throws IOException;\n \n-    /**\n-     * Ask for an already mapped paged file, backed by this page cache.\n-     * <p>\n-     * If mapping exist, the returned {@link Optional} will report {@link Optional#isPresent()} true and\n-     * {@link Optional#get()} will return the same {@link PagedFile} instance that was initially returned my\n-     * {@link #map(File, int, OpenOption...)}.\n-     * If no mapping exist for this file, then returned {@link Optional} will report {@link Optional#isPresent()}\n-     * false.\n-     * <p>\n-     * <strong>NOTE:</strong> The calling code is responsible for closing the returned paged file, if any.\n-     *\n-     * @param file The file to try to get the mapped paged file for.\n-     * @return {@link Optional} containing the {@link PagedFile} mapped by this {@link PageCache} for given file, or an\n-     * empty {@link Optional} if no mapping exist.\n-     * @throws IOException if page cache has been closed or page eviction problems occur.\n-     */\n-    Optional<PagedFile> getExistingMapping( File file ) throws IOException;\n+  /**\n+   * Ask for an already mapped paged file, backed by this page cache.\n+   * <p>\n+   * If mapping exist, the returned {@link Optional} will report {@link Optional#isPresent()} true and\n+   * {@link Optional#get()} will return the same {@link PagedFile} instance that was initially returned my\n+   * {@link #map(File, int, OpenOption...)}.\n+   * If no mapping exist for this file, then returned {@link Optional} will report {@link Optional#isPresent()}\n+   * false.\n+   * <p>\n+   * <strong>NOTE:</strong> The calling code is responsible for closing the returned paged file, if any.\n+   *\n+   * @param file The file to try to get the mapped paged file for.\n+   * @return {@link Optional} containing the {@link PagedFile} mapped by this {@link PageCache} for given file, or an\n+   * empty {@link Optional} if no mapping exist.\n+   * @throws IOException if page cache has been closed or page eviction problems occur.\n+   */\n+  Optional<PagedFile> getExistingMapping(File file) throws IOException;\n \n-    /**\n-     * List a snapshot of the current file mappings.\n-     * <p>\n-     * The mappings can change as soon as this method returns.\n-     * <p>\n-     * <strong>NOTE:</strong> The calling code should <em>not</em> close the returned paged files, unless it does so\n-     * in collaboration with the code that originally mapped the file. Any reference count in the mapping will\n-     * <em>not</em> be incremented by this method, so calling code must be prepared for that the returned\n-     * {@link PagedFile}s can be asynchronously closed elsewhere.\n-     *\n-     * @throws IOException if page cache has been closed or page eviction problems occur.\n-     */\n-    List<PagedFile> listExistingMappings() throws IOException;\n+  /**\n+   * List a snapshot of the current file mappings.\n+   * <p>\n+   * The mappings can change as soon as this method returns.\n+   * <p>\n+   * <strong>NOTE:</strong> The calling code should <em>not</em> close the returned paged files, unless it does so\n+   * in collaboration with the code that originally mapped the file. Any reference count in the mapping will\n+   * <em>not</em> be incremented by this method, so calling code must be prepared for that the returned\n+   * {@link PagedFile}s can be asynchronously closed elsewhere.\n+   *\n+   * @throws IOException if page cache has been closed or page eviction problems occur.\n+   */\n+  List<PagedFile> listExistingMappings() throws IOException;\n \n-    /**\n-     * Flush all dirty pages.\n-     */\n-    void flushAndForce() throws IOException;\n+  /**\n+   * Flush all dirty pages.\n+   */\n+  void flushAndForce() throws IOException;\n \n-    /**\n-     * Flush all dirty pages, but limit the rate of IO as advised by the given IOPSLimiter.\n-     *\n-     * @param limiter The {@link IOLimiter} that determines if pauses or sleeps should be injected into the flushing\n-     * process to keep the IO rate down.\n-     */\n-    void flushAndForce( IOLimiter limiter ) throws IOException;\n+  /**\n+   * Flush all dirty pages, but limit the rate of IO as advised by the given IOPSLimiter.\n+   *\n+   * @param limiter The {@link IOLimiter} that determines if pauses or sleeps should be injected into the flushing\n+   *                process to keep the IO rate down.\n+   */\n+  void flushAndForce(IOLimiter limiter) throws IOException;\n \n-    /**\n-     * Close the page cache to prevent any future mapping of files.\n-     * This also releases any internal resources, including the {@link PageSwapperFactory} through its\n-     * {@link PageSwapperFactory#close() close} method.\n-     *\n-     * @throws IllegalStateException if not all files have been unmapped, with {@link PagedFile#close()}, prior to\n-     * closing the page cache. In this case, the page cache <em>WILL NOT</em> be considered to be successfully closed.\n-     * @throws RuntimeException if the {@link PageSwapperFactory#close()} method throws. In this case the page cache\n-     * <em>WILL BE</em> considered to have been closed successfully.\n-     */\n-    @Override\n-    void close() throws IllegalStateException;\n+  /**\n+   * Close the page cache to prevent any future mapping of files.\n+   * This also releases any internal resources, including the {@link PageSwapperFactory} through its\n+   * {@link PageSwapperFactory#close() close} method.\n+   *\n+   * @throws IllegalStateException if not all files have been unmapped, with {@link PagedFile#close()}, prior to\n+   *                               closing the page cache. In this case, the page cache <em>WILL NOT</em> be considered to be successfully closed.\n+   * @throws RuntimeException      if the {@link PageSwapperFactory#close()} method throws. In this case the page cache\n+   *                               <em>WILL BE</em> considered to have been closed successfully.\n+   */\n+  @Override\n+  void close() throws IllegalStateException;\n \n-    /**\n-     * The size in bytes of the pages managed by this cache.\n-     */\n-    int pageSize();\n+  /**\n+   * The size in bytes of the pages managed by this cache.\n+   */\n+  int pageSize();\n \n-    /**\n-     * The max number of cached pages.\n-     */\n-    long maxCachedPages();\n+  /**\n+   * The max number of cached pages.\n+   */\n+  long maxCachedPages();\n \n-    /**\n-     * Get the {@link FileSystemAbstraction} that represents the filesystem where the paged files reside.\n-     *\n-     * @return the filesystem that the page cache is using.\n-     */\n-    FileSystemAbstraction getCachedFileSystem();\n+  /**\n+   * Get the {@link FileSystemAbstraction} that represents the filesystem where the paged files reside.\n+   *\n+   * @return the filesystem that the page cache is using.\n+   */\n+  FileSystemAbstraction getCachedFileSystem();\n \n-    /**\n-     * Report any thread-local events to the global page cache tracer, as if acquiring a thread-specific page cursor\n-     * tracer, and reporting the events collected within it.\n-     */\n-    void reportEvents();\n+  /**\n+   * Report any thread-local events to the global page cache tracer, as if acquiring a thread-specific page cursor\n+   * tracer, and reporting the events collected within it.\n+   */\n+  void reportEvents();\n \n-    /**\n-     * Check if the backing {@link FileSystemAbstraction file system} supports regular file operations or not.\n-     * <p>\n-     * E.g. the file system for block device will not work with generic open and read/write calls and all operations\n-     * needs to be done through the page cache.\n-     *\n-     * @return {@code true} if the backing file system supports regular file operations.\n-     */\n-    boolean fileSystemSupportsFileOperations();\n+  /**\n+   * Check if the backing {@link FileSystemAbstraction file system} supports regular file operations or not.\n+   * <p>\n+   * E.g. the file system for block device will not work with generic open and read/write calls and all operations\n+   * needs to be done through the page cache.\n+   *\n+   * @return {@code true} if the backing file system supports regular file operations.\n+   */\n+  boolean fileSystemSupportsFileOperations();\n }\n",
            "diff_size": 108
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1822/PageCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1822/PageCache.java\nindex c1f33c0ad40..c19133a7f07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1822/PageCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1822/PageCache.java\n@@ -156,4 +156,4 @@ public interface PageCache extends AutoCloseable\n      * @return {@code true} if the backing file system supports regular file operations.\n      */\n     boolean fileSystemSupportsFileOperations();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}