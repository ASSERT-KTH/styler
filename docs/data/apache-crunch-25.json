{
    "project_name": "apache-crunch",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "44",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n/**\n * A {@link org.apache.crunch.Target} that wraps {@link org.apache.crunch.types.avro.AvroPathPerKeyOutputFormat} to allow one file\n * per key to be written as the output of a {@code PTable<String, T>}.\n *\n * <p>Note the restrictions that apply to the {@code AvroPathPerKeyOutputFormat}; in particular, it's a good",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/25/AvroPathPerKeyTarget.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/25/AvroPathPerKeyTarget.java\nindex d17e5d76cbc..104a5b768b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/25/AvroPathPerKeyTarget.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/25/AvroPathPerKeyTarget.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch.io.avro;\n \n import org.apache.avro.mapred.AvroWrapper;\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/25/AvroPathPerKeyTarget.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/25/AvroPathPerKeyTarget.java\nindex d17e5d76cbc..16f8667ae04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/25/AvroPathPerKeyTarget.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/25/AvroPathPerKeyTarget.java\n@@ -103,7 +103,7 @@ public class AvroPathPerKeyTarget extends FileTargetImpl {\n \n   private void move(Configuration conf, Path srcBase, FileSystem srcFs, Path dstBase, FileSystem dstFs, boolean sameFs)\n       throws IOException {\n-    Path[] keys = FileUtil.stat2Paths(srcFs.listStatus(srcBase));\n+  Path[] keys = FileUtil.stat2Paths(srcFs.listStatus(srcBase));\n     if (!dstFs.exists(dstBase)) {\n       dstFs.mkdirs(dstBase);\n     }\n@@ -132,4 +132,4 @@ public class AvroPathPerKeyTarget extends FileTargetImpl {\n   public String toString() {\n     return \"AvroFilePerKey(\" + path + \")\";\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'Configuration' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'Path' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'FileSystem' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'Path' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'FileSystem' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/25/AvroPathPerKeyTarget.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/25/AvroPathPerKeyTarget.java\nindex d17e5d76cbc..68d3083e803 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/25/AvroPathPerKeyTarget.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/25/AvroPathPerKeyTarget.java\n@@ -37,7 +37,6 @@ import org.apache.hadoop.io.NullWritable;\n import org.apache.hadoop.mapreduce.Job;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.IOException;\n \n /**\n@@ -47,6 +46,7 @@ import java.io.IOException;\n  * <p>Note the restrictions that apply to the {@code AvroPathPerKeyOutputFormat}; in particular, it's a good\n  * idea to write out all of the records for the same key together within each partition of the data.\n  */\n+\n public class AvroPathPerKeyTarget extends FileTargetImpl {\n \n   private static final Logger LOG = LoggerFactory.getLogger(AvroPathPerKeyTarget.class);\n@@ -96,13 +96,18 @@ public class AvroPathPerKeyTarget extends FileTargetImpl {\n     if (!dstFs.exists(path)) {\n       dstFs.mkdirs(path);\n     }\n+\n     boolean sameFs = isCompatible(srcFs, path);\n     move(conf, base, srcFs, path, dstFs, sameFs);\n     dstFs.create(getSuccessIndicator(), true).close();\n   }\n \n-  private void move(Configuration conf, Path srcBase, FileSystem srcFs, Path dstBase, FileSystem dstFs, boolean sameFs)\n-      throws IOException {\n+  private void move(\n+    Configuration conf,\n+    Path srcBase,\n+    FileSystem srcFs,\n+    Path dstBase,\n+    FileSystem dstFs, boolean sameFs) throws IOException {\n     Path[] keys = FileUtil.stat2Paths(srcFs.listStatus(srcBase));\n     if (!dstFs.exists(dstBase)) {\n       dstFs.mkdirs(dstBase);\n@@ -132,4 +137,4 @@ public class AvroPathPerKeyTarget extends FileTargetImpl {\n   public String toString() {\n     return \"AvroFilePerKey(\" + path + \")\";\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}