{
    "project_name": "neo4j-neo4j",
    "error_id": "539",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "104",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/539/DatabaseConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/539/DatabaseConfig.java\nindex c9cedb6b28c..d06fdfdd270 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/539/DatabaseConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/539/DatabaseConfig.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.dbms.database;\n \n import java.util.Collection;\n@@ -41,89 +42,89 @@ public class DatabaseConfig extends Config implements Lifecycle\n {\n     private final Config globalConfig;\n     private final NamedDatabaseId namedDatabaseId;\n-    private Map<Setting<Object>,Collection<SettingChangeListener<Object>>> registeredListeners = new ConcurrentHashMap<>();\n+    private Map<Setting<Object>, Collection<SettingChangeListener<Object>>> registeredListeners = new ConcurrentHashMap<>();\n \n-    public DatabaseConfig( Config globalConfig, NamedDatabaseId namedDatabaseId )\n+    public DatabaseConfig(Config globalConfig, NamedDatabaseId namedDatabaseId)\n     {\n         this.globalConfig = globalConfig;\n         this.namedDatabaseId = namedDatabaseId;\n     }\n \n     @Override\n-    public <T> T get( Setting<T> setting )\n+    public <T> T get(Setting<T> setting)\n     {\n-        if ( read_only.equals( setting ) && namedDatabaseId.isSystemDatabase() )\n+        if (read_only.equals(setting) && namedDatabaseId.isSystemDatabase())\n         {\n             return (T) FALSE;\n         }\n-        return globalConfig.get( setting );\n+        return globalConfig.get(setting);\n     }\n \n     @Override\n-    public <T> void addListener( Setting<T> setting, SettingChangeListener<T> listener )\n+    public <T> void addListener(Setting<T> setting, SettingChangeListener<T> listener)\n     {\n-        registeredListeners.computeIfAbsent( (SettingImpl<Object>) setting, v -> new ConcurrentLinkedQueue<>() ).add(\n-                (SettingChangeListener<Object>) listener );\n-        globalConfig.addListener( setting, listener );\n+        registeredListeners.computeIfAbsent((SettingImpl<Object>) setting, v -> new ConcurrentLinkedQueue<>()).add(\n+          (SettingChangeListener<Object>) listener);\n+        globalConfig.addListener(setting, listener);\n     }\n \n     @Override\n-    public <T> void removeListener( Setting<T> setting, SettingChangeListener<T> listener )\n+    public <T> void removeListener(Setting<T> setting, SettingChangeListener<T> listener)\n     {\n-        Collection<SettingChangeListener<Object>> listeners = registeredListeners.get( setting );\n-        if ( listeners != null )\n+        Collection<SettingChangeListener<Object>> listeners = registeredListeners.get(setting);\n+        if (listeners != null)\n         {\n-            listeners.remove( listener );\n+            listeners.remove(listener);\n         }\n-        globalConfig.removeListener( setting, listener );\n+        globalConfig.removeListener(setting, listener);\n     }\n \n     @Override\n-    public void setLogger( Log internalLog )\n+    public void setLogger(Log internalLog)\n     {\n-        globalConfig.setLogger( internalLog );\n+        globalConfig.setLogger(internalLog);\n     }\n \n     @Override\n-    public <T extends GroupSetting> Map<String,T> getGroups( Class<T> group )\n+    public <T extends GroupSetting> Map<String, T> getGroups(Class<T> group)\n     {\n-        return globalConfig.getGroups( group );\n+        return globalConfig.getGroups(group);\n     }\n \n     @Override\n-    public <T extends GroupSetting, U extends T> Map<Class<U>,Map<String,U>> getGroupsFromInheritance( Class<T> parentClass )\n+    public <T extends GroupSetting, U extends T> Map<Class<U>, Map<String, U>> getGroupsFromInheritance(Class<T> parentClass)\n     {\n-        return globalConfig.getGroupsFromInheritance( parentClass );\n+        return globalConfig.getGroupsFromInheritance(parentClass);\n     }\n \n     @Override\n-    public <T> SettingObserver<T> getObserver( Setting<T> setting )\n+    public <T> SettingObserver<T> getObserver(Setting<T> setting)\n     {\n-        return globalConfig.getObserver( setting );\n+        return globalConfig.getObserver(setting);\n     }\n \n     @Override\n-    public <T> void setDynamic( Setting<T> setting, T value, String scope )\n+    public <T> void setDynamic(Setting<T> setting, T value, String scope)\n     {\n-        globalConfig.setDynamic( setting, value, scope );\n+        globalConfig.setDynamic(setting, value, scope);\n     }\n \n     @Override\n-    public <T> void set( Setting<T> setting, T value )\n+    public <T> void set(Setting<T> setting, T value)\n     {\n-        globalConfig.set( setting, value );\n+        globalConfig.set(setting, value);\n     }\n \n     @Override\n-    public <T> void setIfNotSet( Setting<T> setting, T value )\n+    public <T> void setIfNotSet(Setting<T> setting, T value)\n     {\n-        globalConfig.setIfNotSet( setting, value );\n+        globalConfig.setIfNotSet(setting, value);\n     }\n \n     @Override\n-    public boolean isExplicitlySet( Setting<?> setting )\n+    public boolean isExplicitlySet(Setting<?> setting)\n     {\n-        return globalConfig.isExplicitlySet( setting );\n+        return globalConfig.isExplicitlySet(setting);\n     }\n \n     @Override\n@@ -133,27 +134,27 @@ public class DatabaseConfig extends Config implements Lifecycle\n     }\n \n     @Override\n-    public Map<Setting<Object>,Object> getValues()\n+    public Map<Setting<Object>, Object> getValues()\n     {\n         return globalConfig.getValues();\n     }\n \n     @Override\n-    public Map<String,Setting<Object>> getDeclaredSettings()\n+    public Map<String, Setting<Object>> getDeclaredSettings()\n     {\n         return globalConfig.getDeclaredSettings();\n     }\n \n     @Override\n-    public String toString( boolean includeNullValues )\n+    public String toString(boolean includeNullValues)\n     {\n-        return globalConfig.toString( includeNullValues );\n+        return globalConfig.toString(includeNullValues);\n     }\n \n     @Override\n-    public Setting<Object> getSetting( String name )\n+    public Setting<Object> getSetting(String name)\n     {\n-        return globalConfig.getSetting( name );\n+        return globalConfig.getSetting(name);\n     }\n \n     @Override\n@@ -171,13 +172,13 @@ public class DatabaseConfig extends Config implements Lifecycle\n     @Override\n     public void stop() throws Exception\n     {\n-        for ( var settingListeners : registeredListeners.entrySet() )\n+        for (var settingListeners : registeredListeners.entrySet())\n         {\n             Setting<Object> setting = settingListeners.getKey();\n             Collection<SettingChangeListener<Object>> listeners = settingListeners.getValue();\n-            for ( SettingChangeListener<Object> listener : listeners )\n+            for (SettingChangeListener<Object> listener : listeners)\n             {\n-                globalConfig.removeListener( setting, listener );\n+                globalConfig.removeListener(setting, listener);\n             }\n         }\n         registeredListeners = new ConcurrentHashMap<>();\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}