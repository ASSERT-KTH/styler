{
    "project_name": "wso2-attic-commons",
    "error_id": "247",
    "information": {
        "errors": [
            {
                "line": "149",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n            if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // If cache is full\n                cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n                if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // recheck if there is space\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"In-memory cache is full. Unable to cache\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/247/CachingInHandler.java\nindex b5be4275ed3..fcd87c1b388 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/247/CachingInHandler.java\n@@ -146,7 +146,7 @@ public class CachingInHandler extends CachingHandler {\n             }\n \n             if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // If cache is full\n-                cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n+            cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n                 if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // recheck if there is space\n                     if (log.isDebugEnabled()) {\n                         log.debug(\"In-memory cache is full. Unable to cache\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/247/CachingInHandler.java\nindex b5be4275ed3..e6363675fc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/247/CachingInHandler.java\n@@ -32,165 +32,165 @@ import javax.xml.stream.XMLStreamException;\n \n public class CachingInHandler extends CachingHandler {\n \n-    /**\n-     * This method will be invoked in the inflow to do the caching related in flow handling over\n-     * the message\n-     *\n-     * @param msgContext - MessageContext including the message to be processed\n-     * @return InvocationResponse.CONTINUE in order to continue after the handling\n-     * @throws AxisFault if any errors occured during the processing\n-     */\n-    public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Starting the execution of the CachingInHandler\");\n-        }\n-        if (!msgContext.isServerSide()) {\n-            throw new UnsupportedOperationException(\"Client side caching is not supported\");\n-        }\n-        OperationContext opCtx = msgContext.getOperationContext();\n-        if (opCtx == null) {\n-            handleException(\"Unable to perform caching : OperationContext not found to store \" +\n-                                    \"cache details\");\n-        }\n-        ConfigurationContext cfgCtx = msgContext.getConfigurationContext();\n-        if (cfgCtx == null) {\n-            handleException(\"Unable to perform caching : ConfigurationContext not \" +\n-                                    \"found to process cache\");\n-        }\n+  /**\n+   * This method will be invoked in the inflow to do the caching related in flow handling over\n+   * the message\n+   *\n+   * @param msgContext - MessageContext including the message to be processed\n+   * @return InvocationResponse.CONTINUE in order to continue after the handling\n+   * @throws AxisFault if any errors occured during the processing\n+   */\n+  public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Starting the execution of the CachingInHandler\");\n+    }\n+    if (!msgContext.isServerSide()) {\n+      throw new UnsupportedOperationException(\"Client side caching is not supported\");\n+    }\n+    OperationContext opCtx = msgContext.getOperationContext();\n+    if (opCtx == null) {\n+      handleException(\"Unable to perform caching : OperationContext not found to store \" +\n+        \"cache details\");\n+    }\n+    ConfigurationContext cfgCtx = msgContext.getConfigurationContext();\n+    if (cfgCtx == null) {\n+      handleException(\"Unable to perform caching : ConfigurationContext not \" +\n+        \"found to process cache\");\n+    }\n \n-        CacheConfiguration cacheCfg = null;\n-        Parameter ccfgParam\n-                = msgContext.getAxisMessage().getParameter(CachingConstants.CACHE_CONFIGURATION);\n+    CacheConfiguration cacheCfg = null;\n+    Parameter ccfgParam\n+      = msgContext.getAxisMessage().getParameter(CachingConstants.CACHE_CONFIGURATION);\n \n-        if (ccfgParam != null && ccfgParam.getValue() instanceof CacheConfiguration) {\n-            cacheCfg = (CacheConfiguration) ccfgParam.getValue();\n-        } else {\n-            handleException(\"Unable to perform \" +\n-                                    \"caching : Could not find the CacheConfiguration\");\n-        }\n+    if (ccfgParam != null && ccfgParam.getValue() instanceof CacheConfiguration) {\n+      cacheCfg = (CacheConfiguration) ccfgParam.getValue();\n+    } else {\n+      handleException(\"Unable to perform \" +\n+        \"caching : Could not find the CacheConfiguration\");\n+    }\n \n-        // even though we found a cache config, if the timeout is <= 0, caching is disabled\n-        if (cacheCfg.getTimeout() <= 0) {\n-            return InvocationResponse.CONTINUE;\n-        }\n+    // even though we found a cache config, if the timeout is <= 0, caching is disabled\n+    if (cacheCfg.getTimeout() <= 0) {\n+      return InvocationResponse.CONTINUE;\n+    }\n \n-        // if maxMessageSize is specified check for the message size before processing\n-        FixedByteArrayOutputStream fbaos;\n-        if (cacheCfg.getMaxMessageSize() > 0) {\n-            fbaos = new FixedByteArrayOutputStream(cacheCfg.getMaxMessageSize());\n-            try {\n-                msgContext.getEnvelope().serialize(fbaos);\n-            } catch (XMLStreamException e) {\n-                handleException(\"Error in checking the message size\", e);\n-            } catch (CachingException che) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Message size exceeds the upper bound for caching, \" +\n-                                      \"request will not be cached\");\n-                    return InvocationResponse.CONTINUE;\n-                }\n-            }\n+    // if maxMessageSize is specified check for the message size before processing\n+    FixedByteArrayOutputStream fbaos;\n+    if (cacheCfg.getMaxMessageSize() > 0) {\n+      fbaos = new FixedByteArrayOutputStream(cacheCfg.getMaxMessageSize());\n+      try {\n+        msgContext.getEnvelope().serialize(fbaos);\n+      } catch (XMLStreamException e) {\n+        handleException(\"Error in checking the message size\", e);\n+      } catch (CachingException che) {\n+        if (log.isDebugEnabled()) {\n+          log.debug(\"Message size exceeds the upper bound for caching, \" +\n+            \"request will not be cached\");\n+          return InvocationResponse.CONTINUE;\n         }\n+      }\n+    }\n \n-        String requestHash = getRequestHash(msgContext, cacheCfg);\n-\n-        CacheManager cacheManager =\n-                (CacheManager) cfgCtx.getPropertyNonReplicable(CachingConstants.CACHE_MANAGER);\n-        String serviceName = msgContext.getAxisService().getName();\n+    String requestHash = getRequestHash(msgContext, cacheCfg);\n \n-        opCtx.setNonReplicableProperty(CachingConstants.REQUEST_HASH, requestHash);\n-        ServiceName service = new ServiceName(serviceName);\n-        RequestHash hash = new RequestHash(requestHash);\n-        CachableResponse cachedResponse =\n-                cacheManager.getCachedResponse(service, hash);\n-        CacheReplicationCommand cacheReplicationCommand = new CacheReplicationCommand();\n-        if (cachedResponse != null) { // Response is available in the cache\n-            if (!cachedResponse.isExpired()) { // Cache hit & fresh. No state replication needed\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Cache-hit for message-ID : \" + msgContext.getMessageID());\n-                }\n-                //mark CachedObject as in use to prevent cleanup\n-                cachedResponse.setInUse(true);\n-                opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n-                // Forcefully dispatch the request to the CachedOperation,\n-                // bypassing the dispatching to the requested operation.\n-                // So, the CacheMessageReceiver will be invoked once we CONTINUE\n-                AxisService axisService = msgContext.getAxisService();\n-                if (axisService != null) {\n-                    AxisOperation cachedOperation =\n-                            axisService.getOperation(CachingConstants.CACHED_OPERATION_QNAME);\n-                    if (cachedOperation != null) {\n-                        cachedOperation.setControlOperation(true);\n-                        msgContext.setAxisOperation(cachedOperation);\n-                    } else {\n-                        handleException(\"Unable to perform \" +\n-                                                \"caching : Could not find the cached operation\");\n-                    }\n-                }\n-                return InvocationResponse.CONTINUE;\n-            } else {  // Cache hit but stale. Need to replicate state\n-                cachedResponse.reincarnate(cacheCfg.getTimeout());\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Existing cached response has expired. Reset cache element\");\n-                }\n-                cacheManager.cacheResponse(service, hash, cachedResponse, cacheReplicationCommand);\n-                opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n-                opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n-                                               cacheReplicationCommand);\n-                // Request needs to continue to reach the service since the response envelope\n-                // needs to be recreated by the service\n-                return InvocationResponse.CONTINUE;\n-            }\n-        } else { // Brand new request. No cached response found\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"There is no cached response for the request. Trying to cache...\");\n-            }\n+    CacheManager cacheManager =\n+      (CacheManager) cfgCtx.getPropertyNonReplicable(CachingConstants.CACHE_MANAGER);\n+    String serviceName = msgContext.getAxisService().getName();\n \n-            if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // If cache is full\n-                cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n-                if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // recheck if there is space\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"In-memory cache is full. Unable to cache\");\n-                    }\n-                } else { // if we managed to free up some space in the cache. Need state replication\n-                    cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg,\n-                                     cacheReplicationCommand);\n-                }\n-            } else { // if there is more space in the cache. Need state replication\n-                cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg,\n-                                 cacheReplicationCommand);\n-            }\n-            return InvocationResponse.CONTINUE;\n+    opCtx.setNonReplicableProperty(CachingConstants.REQUEST_HASH, requestHash);\n+    ServiceName service = new ServiceName(serviceName);\n+    RequestHash hash = new RequestHash(requestHash);\n+    CachableResponse cachedResponse =\n+      cacheManager.getCachedResponse(service, hash);\n+    CacheReplicationCommand cacheReplicationCommand = new CacheReplicationCommand();\n+    if (cachedResponse != null) { // Response is available in the cache\n+      if (!cachedResponse.isExpired()) { // Cache hit & fresh. No state replication needed\n+        if (log.isDebugEnabled()) {\n+          log.debug(\"Cache-hit for message-ID : \" + msgContext.getMessageID());\n         }\n-    }\n-\n-    private String getRequestHash(MessageContext msgContext,\n-                                  CacheConfiguration cacheCfg) throws AxisFault {\n-        String requestHash = null;\n-        try {\n-            DigestGenerator digestGenerator = cacheCfg.getDigestGenerator();\n-            if (digestGenerator != null) {\n-                requestHash = digestGenerator.getDigest(msgContext);\n-            } else {\n-                handleException(\"Unable to retrieve the DigestGenerator from the CacheManager\");\n-            }\n-        } catch (CachingException ce) {\n+        //mark CachedObject as in use to prevent cleanup\n+        cachedResponse.setInUse(true);\n+        opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n+        // Forcefully dispatch the request to the CachedOperation,\n+        // bypassing the dispatching to the requested operation.\n+        // So, the CacheMessageReceiver will be invoked once we CONTINUE\n+        AxisService axisService = msgContext.getAxisService();\n+        if (axisService != null) {\n+          AxisOperation cachedOperation =\n+            axisService.getOperation(CachingConstants.CACHED_OPERATION_QNAME);\n+          if (cachedOperation != null) {\n+            cachedOperation.setControlOperation(true);\n+            msgContext.setAxisOperation(cachedOperation);\n+          } else {\n             handleException(\"Unable to perform \" +\n-                                    \"caching : Error in generating the request hash\");\n+              \"caching : Could not find the cached operation\");\n+          }\n         }\n-        return requestHash;\n+        return InvocationResponse.CONTINUE;\n+      } else {  // Cache hit but stale. Need to replicate state\n+        cachedResponse.reincarnate(cacheCfg.getTimeout());\n+        if (log.isDebugEnabled()) {\n+          log.debug(\"Existing cached response has expired. Reset cache element\");\n+        }\n+        cacheManager.cacheResponse(service, hash, cachedResponse, cacheReplicationCommand);\n+        opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n+        opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n+          cacheReplicationCommand);\n+        // Request needs to continue to reach the service since the response envelope\n+        // needs to be recreated by the service\n+        return InvocationResponse.CONTINUE;\n+      }\n+    } else { // Brand new request. No cached response found\n+      if (log.isDebugEnabled()) {\n+        log.debug(\"There is no cached response for the request. Trying to cache...\");\n+      }\n+\n+      if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // If cache is full\n+        cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n+        if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // recheck if there is space\n+          if (log.isDebugEnabled()) {\n+            log.debug(\"In-memory cache is full. Unable to cache\");\n+          }\n+        } else { // if we managed to free up some space in the cache. Need state replication\n+          cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg,\n+            cacheReplicationCommand);\n+        }\n+      } else { // if there is more space in the cache. Need state replication\n+        cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg,\n+          cacheReplicationCommand);\n+      }\n+      return InvocationResponse.CONTINUE;\n     }\n+  }\n \n-    private void cacheNewResponse(MessageContext msgContext,\n-                                  ServiceName serviceName, RequestHash requestHash,\n-                                  CacheManager cacheManager, CacheConfiguration chCfg,\n-                                  CacheReplicationCommand cacheReplicationCommand) {\n-        CachableResponse response = new CachableResponse();\n-        response.setRequestHash(requestHash.getRequestHash());\n-        response.setTimeout(chCfg.getTimeout());\n-        cacheManager.cacheResponse(serviceName, requestHash, response, cacheReplicationCommand);\n-        OperationContext opCtx = msgContext.getOperationContext();\n-        opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, response);\n-        opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n-                                       cacheReplicationCommand);\n+  private String getRequestHash(MessageContext msgContext,\n+                                CacheConfiguration cacheCfg) throws AxisFault {\n+    String requestHash = null;\n+    try {\n+      DigestGenerator digestGenerator = cacheCfg.getDigestGenerator();\n+      if (digestGenerator != null) {\n+        requestHash = digestGenerator.getDigest(msgContext);\n+      } else {\n+        handleException(\"Unable to retrieve the DigestGenerator from the CacheManager\");\n+      }\n+    } catch (CachingException ce) {\n+      handleException(\"Unable to perform \" +\n+        \"caching : Error in generating the request hash\");\n     }\n+    return requestHash;\n+  }\n+\n+  private void cacheNewResponse(MessageContext msgContext,\n+                                ServiceName serviceName, RequestHash requestHash,\n+                                CacheManager cacheManager, CacheConfiguration chCfg,\n+                                CacheReplicationCommand cacheReplicationCommand) {\n+    CachableResponse response = new CachableResponse();\n+    response.setRequestHash(requestHash.getRequestHash());\n+    response.setTimeout(chCfg.getTimeout());\n+    cacheManager.cacheResponse(serviceName, requestHash, response, cacheReplicationCommand);\n+    OperationContext opCtx = msgContext.getOperationContext();\n+    opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, response);\n+    opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n+      cacheReplicationCommand);\n+  }\n }\n",
            "diff_size": 202
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/247/CachingInHandler.java\nindex b5be4275ed3..ac738616464 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/247/CachingInHandler.java\n@@ -56,18 +56,17 @@ public class CachingInHandler extends CachingHandler {\n         if (cfgCtx == null) {\n             handleException(\"Unable to perform caching : ConfigurationContext not \" +\n                                     \"found to process cache\");\n-        }\n+    }\n \n         CacheConfiguration cacheCfg = null;\n-        Parameter ccfgParam\n-                = msgContext.getAxisMessage().getParameter(CachingConstants.CACHE_CONFIGURATION);\n+        Parameter ccfgParam = msgContext.getAxisMessage().getParameter(CachingConstants.CACHE_CONFIGURATION);\n \n         if (ccfgParam != null && ccfgParam.getValue() instanceof CacheConfiguration) {\n             cacheCfg = (CacheConfiguration) ccfgParam.getValue();\n         } else {\n             handleException(\"Unable to perform \" +\n                                     \"caching : Could not find the CacheConfiguration\");\n-        }\n+    }\n \n         // even though we found a cache config, if the timeout is <= 0, caching is disabled\n         if (cacheCfg.getTimeout() <= 0) {\n@@ -85,8 +84,8 @@ public class CachingInHandler extends CachingHandler {\n             } catch (CachingException che) {\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Message size exceeds the upper bound for caching, \" +\n-                                      \"request will not be cached\");\n-                    return InvocationResponse.CONTINUE;\n+        \"request will not be cached\");\n+return InvocationResponse.CONTINUE;\n                 }\n             }\n         }\n@@ -124,7 +123,7 @@ public class CachingInHandler extends CachingHandler {\n                     } else {\n                         handleException(\"Unable to perform \" +\n                                                 \"caching : Could not find the cached operation\");\n-                    }\n+    }\n                 }\n                 return InvocationResponse.CONTINUE;\n             } else {  // Cache hit but stale. Need to replicate state\n@@ -134,9 +133,9 @@ public class CachingInHandler extends CachingHandler {\n                 }\n                 cacheManager.cacheResponse(service, hash, cachedResponse, cacheReplicationCommand);\n                 opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, cachedResponse);\n-                opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n-                                               cacheReplicationCommand);\n-                // Request needs to continue to reach the service since the response envelope\n+                opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT, cacheReplicationCommand);\n+\n+// Request needs to continue to reach the service since the response envelope\n                 // needs to be recreated by the service\n                 return InvocationResponse.CONTINUE;\n             }\n@@ -152,20 +151,17 @@ public class CachingInHandler extends CachingHandler {\n                         log.debug(\"In-memory cache is full. Unable to cache\");\n                     }\n                 } else { // if we managed to free up some space in the cache. Need state replication\n-                    cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg,\n-                                     cacheReplicationCommand);\n-                }\n+                    cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg, cacheReplicationCommand);\n+    }\n             } else { // if there is more space in the cache. Need state replication\n-                cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg,\n-                                 cacheReplicationCommand);\n-            }\n+                cacheNewResponse(msgContext, service, hash, cacheManager, cacheCfg, cacheReplicationCommand);\n+    }\n             return InvocationResponse.CONTINUE;\n         }\n     }\n \n-    private String getRequestHash(MessageContext msgContext,\n-                                  CacheConfiguration cacheCfg) throws AxisFault {\n-        String requestHash = null;\n+    private String getRequestHash(MessageContext msgContext, CacheConfiguration cacheCfg) throws AxisFault {\n+String requestHash = null;\n         try {\n             DigestGenerator digestGenerator = cacheCfg.getDigestGenerator();\n             if (digestGenerator != null) {\n@@ -176,21 +172,19 @@ public class CachingInHandler extends CachingHandler {\n         } catch (CachingException ce) {\n             handleException(\"Unable to perform \" +\n                                     \"caching : Error in generating the request hash\");\n-        }\n+    }\n         return requestHash;\n     }\n \n-    private void cacheNewResponse(MessageContext msgContext,\n-                                  ServiceName serviceName, RequestHash requestHash,\n+    private void cacheNewResponse(MessageContext msgContext, ServiceName serviceName, RequestHash requestHash,\n                                   CacheManager cacheManager, CacheConfiguration chCfg,\n                                   CacheReplicationCommand cacheReplicationCommand) {\n-        CachableResponse response = new CachableResponse();\n+    CachableResponse response = new CachableResponse();\n         response.setRequestHash(requestHash.getRequestHash());\n         response.setTimeout(chCfg.getTimeout());\n         cacheManager.cacheResponse(serviceName, requestHash, response, cacheReplicationCommand);\n         OperationContext opCtx = msgContext.getOperationContext();\n         opCtx.setNonReplicableProperty(CachingConstants.CACHED_OBJECT, response);\n-        opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT,\n-                                       cacheReplicationCommand);\n+        opCtx.setNonReplicableProperty(CachingConstants.STATE_REPLICATION_OBJECT, cacheReplicationCommand);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/247/CachingInHandler.java\nindex b5be4275ed3..fcd87c1b388 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/247/CachingInHandler.java\n@@ -146,7 +146,7 @@ public class CachingInHandler extends CachingHandler {\n             }\n \n             if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // If cache is full\n-                cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n+            cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n                 if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // recheck if there is space\n                     if (log.isDebugEnabled()) {\n                         log.debug(\"In-memory cache is full. Unable to cache\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/247/CachingInHandler.java\nindex b5be4275ed3..fcd87c1b388 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/247/CachingInHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/247/CachingInHandler.java\n@@ -146,7 +146,7 @@ public class CachingInHandler extends CachingHandler {\n             }\n \n             if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // If cache is full\n-                cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n+            cacheManager.removeExpiredResponses(service, cacheReplicationCommand); // try to remove expired responses\n                 if (cacheManager.getCacheSize(service) >= cacheCfg.getMaxCacheSize()) { // recheck if there is space\n                     if (log.isDebugEnabled()) {\n                         log.debug(\"In-memory cache is full. Unable to cache\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}