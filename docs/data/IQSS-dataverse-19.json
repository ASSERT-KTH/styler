{
    "project_name": "IQSS-dataverse",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @EJB\n    SettingsServiceBean settingsService;\n\t@EJB\n\tSystemConfig systemConfig;\n\n    HttpServletRequest request;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "59",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/19/Shib.java\nindex b71fe3cd566..a8d65b755dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/19/Shib.java\n@@ -55,7 +55,7 @@ public class Shib implements java.io.Serializable {\n     UserNotificationServiceBean userNotificationService;\n     @EJB\n     SettingsServiceBean settingsService;\n-\t@EJB\n+@EJB\n \tSystemConfig systemConfig;\n \n     HttpServletRequest request;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/19/Shib.java\nindex b71fe3cd566..569f2e69fb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/19/Shib.java\n@@ -38,540 +38,556 @@ import javax.servlet.http.HttpServletRequest;\n @Named(\"Shib\")\n public class Shib implements java.io.Serializable {\n \n-    private static final Logger logger = Logger.getLogger(Shib.class.getCanonicalName());\n-\n-    @Inject\n-    DataverseSession session;\n-\n-    @EJB\n-    AuthenticationServiceBean authSvc;\n-    @EJB\n-    ShibServiceBean shibService;\n-    @EJB\n-    DataverseServiceBean dataverseService;\n-    @EJB\n-    GroupServiceBean groupService;\n-    @EJB\n-    UserNotificationServiceBean userNotificationService;\n-    @EJB\n-    SettingsServiceBean settingsService;\n-\t@EJB\n-\tSystemConfig systemConfig;\n-\n-    HttpServletRequest request;\n-\n-    private String userPersistentId;\n-    private String internalUserIdentifer;\n-    AuthenticatedUserDisplayInfo displayInfo;\n-    /**\n-     * @todo Remove this boolean some day? Now the mockups show a popup. Should\n-     * be re-worked. See also the comment about the lack of a Cancel button.\n-     */\n-    private boolean visibleTermsOfUse;\n-    private final String loginpage = \"/loginpage.xhtml\";\n-    private final String identityProviderProblem = \"Problem with Identity Provider\";\n+  private static final Logger logger = Logger.getLogger(Shib.class.getCanonicalName());\n+\n+  @Inject\n+  DataverseSession session;\n+\n+  @EJB\n+  AuthenticationServiceBean authSvc;\n+  @EJB\n+  ShibServiceBean shibService;\n+  @EJB\n+  DataverseServiceBean dataverseService;\n+  @EJB\n+  GroupServiceBean groupService;\n+  @EJB\n+  UserNotificationServiceBean userNotificationService;\n+  @EJB\n+  SettingsServiceBean settingsService;\n+  @EJB\n+  SystemConfig systemConfig;\n+\n+  HttpServletRequest request;\n+\n+  private String userPersistentId;\n+  private String internalUserIdentifer;\n+  AuthenticatedUserDisplayInfo displayInfo;\n+  /**\n+   * @todo Remove this boolean some day? Now the mockups show a popup. Should\n+   * be re-worked. See also the comment about the lack of a Cancel button.\n+   */\n+  private boolean visibleTermsOfUse;\n+  private final String loginpage = \"/loginpage.xhtml\";\n+  private final String identityProviderProblem = \"Problem with Identity Provider\";\n+\n+  /**\n+   * We only have one field in which to store a unique\n+   * useridentifier/persistentuserid so we have to jam the the \"entityId\" for\n+   * a Shibboleth Identity Provider (IdP) and the unique persistent identifier\n+   * per user into the same field and a separator between these two would be\n+   * nice, in case we ever want to answer questions like \"How many users\n+   * logged in from Harvard's Identity Provider?\".\n+   * <p>\n+   * A pipe (\"|\") is used as a separator because it's considered \"unwise\" to\n+   * use in a URL and the \"entityId\" for a Shibboleth Identity Provider (IdP)\n+   * looks like a URL:\n+   * http://stackoverflow.com/questions/1547899/which-characters-make-a-url-invalid\n+   */\n+  private String persistentUserIdSeparator = \"|\";\n+\n+  /**\n+   * The Shibboleth Identity Provider (IdP), an \"entityId\" which often but not\n+   * always looks like a URL.\n+   */\n+  String shibIdp;\n+  private String builtinUsername;\n+  private String builtinPassword;\n+  private String existingEmail;\n+  private String existingDisplayName;\n+  private boolean passwordRejected;\n+  private String displayNameToPersist;\n+  private String emailToPersist;\n+  private String affiliationToDisplayAtConfirmation = null;\n+  private String friendlyNameForInstitution =\n+    BundleUtil.getStringFromBundle(\"shib.welcomeExistingUserMessageDefaultInstitution\");\n+  private State state;\n+  private String debugSummary;\n+  /**\n+   * After a successful login, we will redirect users to this page (unless\n+   * it's a new account).\n+   */\n+  private String redirectPage;\n+  //    private boolean debug = false;\n+  private String emailAddress;\n+\n+  public enum State {\n+\n+    INIT,\n+    REGULAR_LOGIN_INTO_EXISTING_SHIB_ACCOUNT,\n+    PROMPT_TO_CREATE_NEW_ACCOUNT,\n+    PROMPT_TO_CONVERT_EXISTING_ACCOUNT,\n+  }\n+\n+  ;\n+\n+  public void init() {\n+    state = State.INIT;\n+    ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();\n+    request = (HttpServletRequest) context.getRequest();\n+    ShibUtil.printAttributes(request);\n \n     /**\n-     * We only have one field in which to store a unique\n-     * useridentifier/persistentuserid so we have to jam the the \"entityId\" for\n-     * a Shibboleth Identity Provider (IdP) and the unique persistent identifier\n-     * per user into the same field and a separator between these two would be\n-     * nice, in case we ever want to answer questions like \"How many users\n-     * logged in from Harvard's Identity Provider?\".\n-     *\n-     * A pipe (\"|\") is used as a separator because it's considered \"unwise\" to\n-     * use in a URL and the \"entityId\" for a Shibboleth Identity Provider (IdP)\n-     * looks like a URL:\n-     * http://stackoverflow.com/questions/1547899/which-characters-make-a-url-invalid\n-     */\n-    private String persistentUserIdSeparator = \"|\";\n-\n-    /**\n-     * The Shibboleth Identity Provider (IdP), an \"entityId\" which often but not\n-     * always looks like a URL.\n-     */\n-    String shibIdp;\n-    private String builtinUsername;\n-    private String builtinPassword;\n-    private String existingEmail;\n-    private String existingDisplayName;\n-    private boolean passwordRejected;\n-    private String displayNameToPersist;\n-    private String emailToPersist;\n-    private String affiliationToDisplayAtConfirmation = null;\n-    private String friendlyNameForInstitution = BundleUtil.getStringFromBundle(\"shib.welcomeExistingUserMessageDefaultInstitution\");\n-    private State state;\n-    private String debugSummary;\n-    /**\n-     * After a successful login, we will redirect users to this page (unless\n-     * it's a new account).\n+     * @todo Investigate why JkEnvVar is null since it may be useful for\n+     * debugging per https://github.com/IQSS/dataverse/issues/2916 . See\n+     * also\n+     * http://stackoverflow.com/questions/30193117/iterate-through-all-servletrequest-attributes#comment49933342_30193117\n+     * and\n+     * http://shibboleth.1660669.n2.nabble.com/Why-doesn-t-Java-s-request-getAttributeNames-show-Shibboleth-attributes-tp7616427p7616591.html\n      */\n-    private String redirectPage;\n-//    private boolean debug = false;\n-    private String emailAddress;\n-\n-    public enum State {\n-\n-        INIT,\n-        REGULAR_LOGIN_INTO_EXISTING_SHIB_ACCOUNT,\n-        PROMPT_TO_CREATE_NEW_ACCOUNT,\n-        PROMPT_TO_CONVERT_EXISTING_ACCOUNT,\n-    };\n-\n-    public void init() {\n-        state = State.INIT;\n-        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();\n-        request = (HttpServletRequest) context.getRequest();\n-        ShibUtil.printAttributes(request);\n-\n-        /**\n-         * @todo Investigate why JkEnvVar is null since it may be useful for\n-         * debugging per https://github.com/IQSS/dataverse/issues/2916 . See\n-         * also\n-         * http://stackoverflow.com/questions/30193117/iterate-through-all-servletrequest-attributes#comment49933342_30193117\n-         * and\n-         * http://shibboleth.1660669.n2.nabble.com/Why-doesn-t-Java-s-request-getAttributeNames-show-Shibboleth-attributes-tp7616427p7616591.html\n-         */\n-        logger.fine(\"JkEnvVar: \" + System.getenv(\"JkEnvVar\"));\n-\n-        shibService.possiblyMutateRequestInDev(request);\n-\n-        try {\n-            shibIdp = getRequiredValueFromAssertion(ShibUtil.shibIdpAttribute);\n-        } catch (Exception ex) {\n-            /**\n-             * @todo is in an antipattern to throw exceptions to control flow?\n-             * http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl\n-             *\n-             * All this exception handling should be handled in the new\n-             * ShibServiceBean so it's consistently handled by the API as well.\n-             */\n-            return;\n-        }\n-        String shibUserIdentifier;\n-        try {\n-            shibUserIdentifier = getRequiredValueFromAssertion(ShibUtil.uniquePersistentIdentifier);\n-        } catch (Exception ex) {\n-            return;\n-        }\n-        String firstName;\n-        try {\n-            firstName = getRequiredValueFromAssertion(ShibUtil.firstNameAttribute);\n-        } catch (Exception ex) {\n-            return;\n-        }\n-        String lastName;\n-        try {\n-            lastName = getRequiredValueFromAssertion(ShibUtil.lastNameAttribute);\n-        } catch (Exception ex) {\n-            return;\n-        }\n-        ShibUserNameFields shibUserNameFields = ShibUtil.findBestFirstAndLastName(firstName, lastName, null);\n-        if (shibUserNameFields != null) {\n-            String betterFirstName = shibUserNameFields.getFirstName();\n-            if (betterFirstName != null) {\n-                firstName = betterFirstName;\n-            }\n-            String betterLastName = shibUserNameFields.getLastName();\n-            if (betterLastName != null) {\n-                lastName = betterLastName;\n-            }\n-        }\n-        String emailAddressInAssertion = null;\n-        try {\n-            emailAddressInAssertion = getRequiredValueFromAssertion(ShibUtil.emailAttribute);\n-        } catch (Exception ex) {\n-            if (shibIdp.equals(ShibUtil.testShibIdpEntityId)) {\n-                logger.info(\"For \" + shibIdp + \" (which as of this writing doesn't provide the \" + ShibUtil.emailAttribute + \" attribute) setting email address to value of eppn: \" + shibUserIdentifier);\n-                emailAddressInAssertion = shibUserIdentifier;\n-            } else {\n-                // forcing all other IdPs to send us an an email\n-                return;\n-            }\n-        }\n-\n-        if (!EMailValidator.isEmailValid(emailAddressInAssertion, null)) {\n-            String msg = \"The SAML assertion contained an invalid email address: \\\"\" + emailAddressInAssertion + \"\\\".\";\n-            logger.info(msg);\n-            msg=BundleUtil.getStringFromBundle(\"shib.invalidEmailAddress\",   Arrays.asList(emailAddressInAssertion));\n-            String singleEmailAddress = ShibUtil.findSingleValue(emailAddressInAssertion);\n-            if (EMailValidator.isEmailValid(singleEmailAddress, null)) {\n-                msg = \"Multiple email addresses were asserted by the Identity Provider (\" + emailAddressInAssertion + \" ). These were sorted and the first was chosen: \" + singleEmailAddress;\n-                logger.info(msg);\n-                emailAddress = singleEmailAddress;\n-            } else {\n-                msg += BundleUtil.getStringFromBundle(\"shib.emailAddress.error\");\n-                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, identityProviderProblem, msg));\n-                return;\n-            }\n-        } else {\n-            emailAddress = emailAddressInAssertion;\n-        }\n-\n-        String usernameAssertion = getValueFromAssertion(ShibUtil.usernameAttribute);\n-        internalUserIdentifer = ShibUtil.generateFriendlyLookingUserIdentifer(usernameAssertion, emailAddress);\n-        logger.fine(\"friendly looking identifer (backend will enforce uniqueness):\" + internalUserIdentifer);\n-\n-        String shibAffiliationAttribute = settingsService.getValueForKey(SettingsServiceBean.Key.ShibAffiliationAttribute);\n-        String affiliation = (StringUtils.isNotBlank(shibAffiliationAttribute))\n-            ? getValueFromAssertion(shibAffiliationAttribute)\n-            : shibService.getAffiliation(shibIdp, shibService.getDevShibAccountType());\n-\n-        if (affiliation != null) {\n-            affiliationToDisplayAtConfirmation = affiliation;\n-            friendlyNameForInstitution = affiliation;\n-        }\n+    logger.fine(\"JkEnvVar: \" + System.getenv(\"JkEnvVar\"));\n+\n+    shibService.possiblyMutateRequestInDev(request);\n+\n+    try {\n+      shibIdp = getRequiredValueFromAssertion(ShibUtil.shibIdpAttribute);\n+    } catch (Exception ex) {\n+      /**\n+       * @todo is in an antipattern to throw exceptions to control flow?\n+       * http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl\n+       *\n+       * All this exception handling should be handled in the new\n+       * ShibServiceBean so it's consistently handled by the API as well.\n+       */\n+      return;\n+    }\n+    String shibUserIdentifier;\n+    try {\n+      shibUserIdentifier = getRequiredValueFromAssertion(ShibUtil.uniquePersistentIdentifier);\n+    } catch (Exception ex) {\n+      return;\n+    }\n+    String firstName;\n+    try {\n+      firstName = getRequiredValueFromAssertion(ShibUtil.firstNameAttribute);\n+    } catch (Exception ex) {\n+      return;\n+    }\n+    String lastName;\n+    try {\n+      lastName = getRequiredValueFromAssertion(ShibUtil.lastNameAttribute);\n+    } catch (Exception ex) {\n+      return;\n+    }\n+    ShibUserNameFields shibUserNameFields = ShibUtil.findBestFirstAndLastName(firstName, lastName, null);\n+    if (shibUserNameFields != null) {\n+      String betterFirstName = shibUserNameFields.getFirstName();\n+      if (betterFirstName != null) {\n+        firstName = betterFirstName;\n+      }\n+      String betterLastName = shibUserNameFields.getLastName();\n+      if (betterLastName != null) {\n+        lastName = betterLastName;\n+      }\n+    }\n+    String emailAddressInAssertion = null;\n+    try {\n+      emailAddressInAssertion = getRequiredValueFromAssertion(ShibUtil.emailAttribute);\n+    } catch (Exception ex) {\n+      if (shibIdp.equals(ShibUtil.testShibIdpEntityId)) {\n+        logger.info(\"For \" + shibIdp + \" (which as of this writing doesn't provide the \" + ShibUtil.emailAttribute +\n+          \" attribute) setting email address to value of eppn: \" + shibUserIdentifier);\n+        emailAddressInAssertion = shibUserIdentifier;\n+      } else {\n+        // forcing all other IdPs to send us an an email\n+        return;\n+      }\n+    }\n+\n+    if (!EMailValidator.isEmailValid(emailAddressInAssertion, null)) {\n+      String msg = \"The SAML assertion contained an invalid email address: \\\"\" + emailAddressInAssertion + \"\\\".\";\n+      logger.info(msg);\n+      msg = BundleUtil.getStringFromBundle(\"shib.invalidEmailAddress\", Arrays.asList(emailAddressInAssertion));\n+      String singleEmailAddress = ShibUtil.findSingleValue(emailAddressInAssertion);\n+      if (EMailValidator.isEmailValid(singleEmailAddress, null)) {\n+        msg = \"Multiple email addresses were asserted by the Identity Provider (\" + emailAddressInAssertion +\n+          \" ). These were sorted and the first was chosen: \" + singleEmailAddress;\n+        logger.info(msg);\n+        emailAddress = singleEmailAddress;\n+      } else {\n+        msg += BundleUtil.getStringFromBundle(\"shib.emailAddress.error\");\n+        FacesContext.getCurrentInstance()\n+          .addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, identityProviderProblem, msg));\n+        return;\n+      }\n+    } else {\n+      emailAddress = emailAddressInAssertion;\n+    }\n+\n+    String usernameAssertion = getValueFromAssertion(ShibUtil.usernameAttribute);\n+    internalUserIdentifer = ShibUtil.generateFriendlyLookingUserIdentifer(usernameAssertion, emailAddress);\n+    logger.fine(\"friendly looking identifer (backend will enforce uniqueness):\" + internalUserIdentifer);\n+\n+    String shibAffiliationAttribute = settingsService.getValueForKey(SettingsServiceBean.Key.ShibAffiliationAttribute);\n+    String affiliation = (StringUtils.isNotBlank(shibAffiliationAttribute))\n+      ? getValueFromAssertion(shibAffiliationAttribute)\n+      : shibService.getAffiliation(shibIdp, shibService.getDevShibAccountType());\n+\n+    if (affiliation != null) {\n+      affiliationToDisplayAtConfirmation = affiliation;\n+      friendlyNameForInstitution = affiliation;\n+    }\n //        emailAddress = \"willFailBeanValidation\"; // for testing createAuthenticatedUser exceptions\n-        displayInfo = new AuthenticatedUserDisplayInfo(firstName, lastName, emailAddress, affiliation, null);\n-\n-        userPersistentId = shibIdp + persistentUserIdSeparator + shibUserIdentifier;\n-        ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n-        AuthenticatedUser au = authSvc.lookupUser(shibAuthProvider.getId(), userPersistentId);\n-        if (au != null) {\n-            //See if there's another account with this email\n-            AuthenticatedUser auEmail = authSvc.getAuthenticatedUserByEmail(emailAddress);\n-            if (auEmail!= null && !auEmail.equals(au)){   \n-                //If this email already belongs to another account throw a message for user to contact support\n-                JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.duplicate.email.error\"));\n-                return;\n-            }\n-            state = State.REGULAR_LOGIN_INTO_EXISTING_SHIB_ACCOUNT;\n-            logger.fine(\"Found user based on \" + userPersistentId + \". Logging in.\");\n-            logger.fine(\"Updating display info for \" + au.getName());\n-            authSvc.updateAuthenticatedUser(au, displayInfo);\n-            logInUserAndSetShibAttributes(au);\n-            String prettyFacesHomePageString = getPrettyFacesHomePageString(false);\n-            try {\n-                FacesContext.getCurrentInstance().getExternalContext().redirect(prettyFacesHomePageString);\n-            } catch (IOException ex) {\n-                logger.info(\"Unable to redirect user to homepage at \" + prettyFacesHomePageString);\n-            }\n-        } else {\n-            state = State.PROMPT_TO_CREATE_NEW_ACCOUNT;\n-            displayNameToPersist = displayInfo.getTitle();\n-            emailToPersist = emailAddress;\n-            /**\n-             * @todo for Harvard we plan to use the value(s) from\n-             * eduPersonScopedAffiliation which\n-             * http://iam.harvard.edu/resources/saml-shibboleth-attributes says\n-             * can be One or more of the following values: faculty, staff,\n-             * student, affiliate, and member.\n-             *\n-             * http://dataverse.nl plans to use\n-             * urn:mace:dir:attribute-def:eduPersonAffiliation per\n-             * http://irclog.iq.harvard.edu/dataverse/2015-02-13#i_16265 . Can\n-             * they configure shibd to map eduPersonAffiliation to\n-             * eduPersonScopedAffiliation?\n-             */\n+    displayInfo = new AuthenticatedUserDisplayInfo(firstName, lastName, emailAddress, affiliation, null);\n+\n+    userPersistentId = shibIdp + persistentUserIdSeparator + shibUserIdentifier;\n+    ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n+    AuthenticatedUser au = authSvc.lookupUser(shibAuthProvider.getId(), userPersistentId);\n+    if (au != null) {\n+      //See if there's another account with this email\n+      AuthenticatedUser auEmail = authSvc.getAuthenticatedUserByEmail(emailAddress);\n+      if (auEmail != null && !auEmail.equals(au)) {\n+        //If this email already belongs to another account throw a message for user to contact support\n+        JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.duplicate.email.error\"));\n+        return;\n+      }\n+      state = State.REGULAR_LOGIN_INTO_EXISTING_SHIB_ACCOUNT;\n+      logger.fine(\"Found user based on \" + userPersistentId + \". Logging in.\");\n+      logger.fine(\"Updating display info for \" + au.getName());\n+      authSvc.updateAuthenticatedUser(au, displayInfo);\n+      logInUserAndSetShibAttributes(au);\n+      String prettyFacesHomePageString = getPrettyFacesHomePageString(false);\n+      try {\n+        FacesContext.getCurrentInstance().getExternalContext().redirect(prettyFacesHomePageString);\n+      } catch (IOException ex) {\n+        logger.info(\"Unable to redirect user to homepage at \" + prettyFacesHomePageString);\n+      }\n+    } else {\n+      state = State.PROMPT_TO_CREATE_NEW_ACCOUNT;\n+      displayNameToPersist = displayInfo.getTitle();\n+      emailToPersist = emailAddress;\n+      /**\n+       * @todo for Harvard we plan to use the value(s) from\n+       * eduPersonScopedAffiliation which\n+       * http://iam.harvard.edu/resources/saml-shibboleth-attributes says\n+       * can be One or more of the following values: faculty, staff,\n+       * student, affiliate, and member.\n+       *\n+       * http://dataverse.nl plans to use\n+       * urn:mace:dir:attribute-def:eduPersonAffiliation per\n+       * http://irclog.iq.harvard.edu/dataverse/2015-02-13#i_16265 . Can\n+       * they configure shibd to map eduPersonAffiliation to\n+       * eduPersonScopedAffiliation?\n+       */\n //            positionToPersist = \"FIXME\";\n-            logger.fine(\"Couldn't find authenticated user based on \" + userPersistentId);\n-            visibleTermsOfUse = true;\n-            /**\n-             * Using the email address from the IdP, try to find an existing\n-             * user. For TestShib we convert the \"eppn\" to an email address.\n-             *\n-             * If found, prompt for password and offer to convert.\n-             *\n-             * If not found, create a new account. It must be a new user.\n-             */\n-            String emailAddressToLookUp = emailAddress;\n-            if (existingEmail != null) {\n-                emailAddressToLookUp = existingEmail;\n-            }\n-            AuthenticatedUser existingAuthUserFoundByEmail = shibService.findAuthUserByEmail(emailAddressToLookUp);\n-            BuiltinUser existingBuiltInUserFoundByEmail = null;\n-            if (existingAuthUserFoundByEmail != null) {\n-                existingDisplayName = existingAuthUserFoundByEmail.getName();\n-                existingBuiltInUserFoundByEmail = shibService.findBuiltInUserByAuthUserIdentifier(existingAuthUserFoundByEmail.getUserIdentifier());\n-                if (existingBuiltInUserFoundByEmail != null) {\n-                    state = State.PROMPT_TO_CONVERT_EXISTING_ACCOUNT;\n-\n-                    debugSummary = \"getting username from the builtin user we looked up via email\";\n-                    builtinUsername = existingBuiltInUserFoundByEmail.getUserName();\n-                } else {\n-                    debugSummary = \"Could not find a builtin account based on the username. Here we should simply create a new Shibboleth user\";\n-                }\n-            } else {\n-                debugSummary = \"Could not find an auth user based on email address\";\n-            }\n-\n-        }\n-        logger.fine(\"Debug summary: \" + debugSummary + \" (state: \" + state + \").\");\n-        logger.fine(\"redirectPage: \" + redirectPage);\n-    }\n-\n-    public String confirmAndCreateAccount() {\n-        ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n-        String lookupStringPerAuthProvider = userPersistentId;\n-        AuthenticatedUser au = null;\n-        try {\n-            au = authSvc.createAuthenticatedUser(\n-                    new UserRecordIdentifier(shibAuthProvider.getId(), lookupStringPerAuthProvider), internalUserIdentifer, displayInfo, true);\n-        } catch (EJBException ex) {\n-            /**\n-             * @todo Show the ConstraintViolationException, if any.\n-             */\n-            logger.info(\"Couldn't create user \" + userPersistentId + \" due to exception: \" + ex.getCause());\n-        }\n-        if (au != null) {\n-            logger.fine(\"created user \" + au.getIdentifier());\n-            logInUserAndSetShibAttributes(au);\n-            /**\n-             * @todo Move this to\n-             * AuthenticationServiceBean.createAuthenticatedUser\n-             */\n-            userNotificationService.sendNotification(au,\n-                    new Timestamp(new Date().getTime()),\n-                    UserNotification.Type.CREATEACC, null);\n-            return \"/dataverseuser.xhtml?selectTab=accountInfo&faces-redirect=true\";\n+      logger.fine(\"Couldn't find authenticated user based on \" + userPersistentId);\n+      visibleTermsOfUse = true;\n+      /**\n+       * Using the email address from the IdP, try to find an existing\n+       * user. For TestShib we convert the \"eppn\" to an email address.\n+       *\n+       * If found, prompt for password and offer to convert.\n+       *\n+       * If not found, create a new account. It must be a new user.\n+       */\n+      String emailAddressToLookUp = emailAddress;\n+      if (existingEmail != null) {\n+        emailAddressToLookUp = existingEmail;\n+      }\n+      AuthenticatedUser existingAuthUserFoundByEmail = shibService.findAuthUserByEmail(emailAddressToLookUp);\n+      BuiltinUser existingBuiltInUserFoundByEmail = null;\n+      if (existingAuthUserFoundByEmail != null) {\n+        existingDisplayName = existingAuthUserFoundByEmail.getName();\n+        existingBuiltInUserFoundByEmail =\n+          shibService.findBuiltInUserByAuthUserIdentifier(existingAuthUserFoundByEmail.getUserIdentifier());\n+        if (existingBuiltInUserFoundByEmail != null) {\n+          state = State.PROMPT_TO_CONVERT_EXISTING_ACCOUNT;\n+\n+          debugSummary = \"getting username from the builtin user we looked up via email\";\n+          builtinUsername = existingBuiltInUserFoundByEmail.getUserName();\n         } else {\n-            JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.createUser.fail\"));\n-        }\n-        return getPrettyFacesHomePageString(true);\n-    }\n-\n-    public String confirmAndConvertAccount() {\n-        visibleTermsOfUse = false;\n-        ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n-        String lookupStringPerAuthProvider = userPersistentId;\n-        UserIdentifier userIdentifier = new UserIdentifier(lookupStringPerAuthProvider, internalUserIdentifer);\n-        logger.fine(\"builtin username: \" + builtinUsername);\n-        AuthenticatedUser builtInUserToConvert = authSvc.canLogInAsBuiltinUser(builtinUsername, builtinPassword);\n-        if (builtInUserToConvert != null) {\n-            if (builtInUserToConvert.isDeactivated()) {\n-                JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.convert.fail.deactivated\"));\n-                return null;\n-            }\n-            // TODO: Switch from authSvc.convertBuiltInToShib to authSvc.convertBuiltInUserToRemoteUser\n-            AuthenticatedUser au = authSvc.convertBuiltInToShib(builtInUserToConvert, shibAuthProvider.getId(), userIdentifier);\n-            if (au != null) {\n-                authSvc.updateAuthenticatedUser(au, displayInfo);\n-                logInUserAndSetShibAttributes(au);\n-                debugSummary = \"Local account validated and successfully converted to a Shibboleth account. The old account username was \" + builtinUsername;\n-                JsfHelper.addSuccessMessage(BundleUtil.getStringFromBundle(\"dataverse.shib.success\"));\n-                return \"/dataverseuser.xhtml?selectTab=accountInfo&faces-redirect=true\";\n-            } else {\n-                debugSummary = \"Local account validated but unable to convert to Shibboleth account.\";\n-            }\n-        } else {\n-            passwordRejected = true;\n-            debugSummary = \"Username/password combination for local account was invalid\";\n+          debugSummary =\n+            \"Could not find a builtin account based on the username. Here we should simply create a new Shibboleth user\";\n         }\n+      } else {\n+        debugSummary = \"Could not find an auth user based on email address\";\n+      }\n+\n+    }\n+    logger.fine(\"Debug summary: \" + debugSummary + \" (state: \" + state + \").\");\n+    logger.fine(\"redirectPage: \" + redirectPage);\n+  }\n+\n+  public String confirmAndCreateAccount() {\n+    ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n+    String lookupStringPerAuthProvider = userPersistentId;\n+    AuthenticatedUser au = null;\n+    try {\n+      au = authSvc.createAuthenticatedUser(\n+        new UserRecordIdentifier(shibAuthProvider.getId(), lookupStringPerAuthProvider), internalUserIdentifer,\n+        displayInfo, true);\n+    } catch (EJBException ex) {\n+      /**\n+       * @todo Show the ConstraintViolationException, if any.\n+       */\n+      logger.info(\"Couldn't create user \" + userPersistentId + \" due to exception: \" + ex.getCause());\n+    }\n+    if (au != null) {\n+      logger.fine(\"created user \" + au.getIdentifier());\n+      logInUserAndSetShibAttributes(au);\n+      /**\n+       * @todo Move this to\n+       * AuthenticationServiceBean.createAuthenticatedUser\n+       */\n+      userNotificationService.sendNotification(au,\n+        new Timestamp(new Date().getTime()),\n+        UserNotification.Type.CREATEACC, null);\n+      return \"/dataverseuser.xhtml?selectTab=accountInfo&faces-redirect=true\";\n+    } else {\n+      JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.createUser.fail\"));\n+    }\n+    return getPrettyFacesHomePageString(true);\n+  }\n+\n+  public String confirmAndConvertAccount() {\n+    visibleTermsOfUse = false;\n+    ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n+    String lookupStringPerAuthProvider = userPersistentId;\n+    UserIdentifier userIdentifier = new UserIdentifier(lookupStringPerAuthProvider, internalUserIdentifer);\n+    logger.fine(\"builtin username: \" + builtinUsername);\n+    AuthenticatedUser builtInUserToConvert = authSvc.canLogInAsBuiltinUser(builtinUsername, builtinPassword);\n+    if (builtInUserToConvert != null) {\n+      if (builtInUserToConvert.isDeactivated()) {\n+        JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.convert.fail.deactivated\"));\n         return null;\n-    }\n-\n-    private void logInUserAndSetShibAttributes(AuthenticatedUser au) {\n-        au.setShibIdentityProvider(shibIdp);\n-        // setUser checks for deactivated users.\n-        session.setUser(au);\n-        logger.fine(\"Groups for user \" + au.getId() + \" (\" + au.getIdentifier() + \"): \" + getGroups(au));\n-    }\n-\n-    public List<String> getGroups(AuthenticatedUser au) {\n-        List<String> groups = new ArrayList<>();\n-        groupService.groupsFor(au, null).stream().forEach((group) -> {\n-            groups.add(group.getDisplayName() + \" (\" + group.getIdentifier() + \")\");\n-        });\n-        return groups;\n-    }\n-\n-    /**\n-     * @todo The mockups show a Cancel button but because we're using the\n-     * \"requiredCheckboxValidator\" you are forced to agree to Terms of Use\n-     * before clicking Cancel! Argh! The mockups show how we want to display\n-     * Terms of Use in a popup anyway so this should all be re-done. No time\n-     * now. Here's the mockup:\n-     * https://iqssharvard.mybalsamiq.com/projects/loginwithshibboleth-version3-dataverse40/Dataverse%20Account%20III%20-%20Agree%20Terms%20of%20Use\n-     */\n-    public String cancel() {\n-        return loginpage + \"?faces-redirect=true\";\n-    }\n-\n-    /**\n-     * @return The trimmed value of a Shib attribute (if non-empty) or null.\n-     *\n-     * @todo Move this to ShibUtil\n-     */\n-    private String getValueFromAssertion(String key) {\n-        Object attribute = request.getAttribute(key);\n-        if (attribute != null) {\n-            String attributeValue = attribute.toString();\n-            String trimmedValue = attributeValue.trim();\n-            if (!trimmedValue.isEmpty()) {\n-                logger.fine(\"The SAML assertion for \\\"\" + key + \"\\\" (optional) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" + trimmedValue + \"\\\".\");\n-                return trimmedValue;\n-            } else {\n-                logger.fine(\"The SAML assertion for \\\"\" + key + \"\\\" (optional) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" + trimmedValue + \"\\\" (empty string). Returing null.\");\n-                return null;\n-            }\n-        } else {\n-            logger.fine(\"The SAML assertion for \\\"\" + key + \"\\\" (optional) was null.\");\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * @return The trimmed value of a Shib attribute (if non-empty) or null.\n-     *\n-     * @todo Move this to ShibUtil. More objects might be required since\n-     * sometimes we want to show messages, etc.\n-     */\n-    private String getRequiredValueFromAssertion(String key) throws Exception {\n-        Object attribute = request.getAttribute(key);\n-        if (attribute == null) {\n-            String msg = \"The SAML assertion for \\\"\" + key + \"\\\" was null. Please contact support.\";\n-            logger.info(msg);\n-            boolean showMessage = true;\n-            if (shibIdp.equals(ShibUtil.testShibIdpEntityId) && key.equals(ShibUtil.emailAttribute)) {\n-                showMessage = false;\n-            }\n-            if (showMessage) {\n-                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, identityProviderProblem, BundleUtil.getStringFromBundle(\"shib.nullerror\",Arrays.asList(key))));\n-            }\n-            throw new Exception(msg);\n-        }\n-        String attributeValue = attribute.toString();\n-        if (attributeValue.isEmpty()) {\n-            throw new Exception(key + \" was empty\");\n-        }\n-\t\tif(systemConfig.isShibAttributeCharacterSetConversionEnabled()) {\n-\t\t\tattributeValue= new String( attributeValue.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n-\t\t}\n-        String trimmedValue = attributeValue.trim();\n-        logger.fine(\"The SAML assertion for \\\"\" + key + \"\\\" (required) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" + trimmedValue + \"\\\".\");\n+      }\n+      // TODO: Switch from authSvc.convertBuiltInToShib to authSvc.convertBuiltInUserToRemoteUser\n+      AuthenticatedUser au =\n+        authSvc.convertBuiltInToShib(builtInUserToConvert, shibAuthProvider.getId(), userIdentifier);\n+      if (au != null) {\n+        authSvc.updateAuthenticatedUser(au, displayInfo);\n+        logInUserAndSetShibAttributes(au);\n+        debugSummary =\n+          \"Local account validated and successfully converted to a Shibboleth account. The old account username was \" +\n+            builtinUsername;\n+        JsfHelper.addSuccessMessage(BundleUtil.getStringFromBundle(\"dataverse.shib.success\"));\n+        return \"/dataverseuser.xhtml?selectTab=accountInfo&faces-redirect=true\";\n+      } else {\n+        debugSummary = \"Local account validated but unable to convert to Shibboleth account.\";\n+      }\n+    } else {\n+      passwordRejected = true;\n+      debugSummary = \"Username/password combination for local account was invalid\";\n+    }\n+    return null;\n+  }\n+\n+  private void logInUserAndSetShibAttributes(AuthenticatedUser au) {\n+    au.setShibIdentityProvider(shibIdp);\n+    // setUser checks for deactivated users.\n+    session.setUser(au);\n+    logger.fine(\"Groups for user \" + au.getId() + \" (\" + au.getIdentifier() + \"): \" + getGroups(au));\n+  }\n+\n+  public List<String> getGroups(AuthenticatedUser au) {\n+    List<String> groups = new ArrayList<>();\n+    groupService.groupsFor(au, null).stream().forEach((group) -> {\n+      groups.add(group.getDisplayName() + \" (\" + group.getIdentifier() + \")\");\n+    });\n+    return groups;\n+  }\n+\n+  /**\n+   * @todo The mockups show a Cancel button but because we're using the\n+   * \"requiredCheckboxValidator\" you are forced to agree to Terms of Use\n+   * before clicking Cancel! Argh! The mockups show how we want to display\n+   * Terms of Use in a popup anyway so this should all be re-done. No time\n+   * now. Here's the mockup:\n+   * https://iqssharvard.mybalsamiq.com/projects/loginwithshibboleth-version3-dataverse40/Dataverse%20Account%20III%20-%20Agree%20Terms%20of%20Use\n+   */\n+  public String cancel() {\n+    return loginpage + \"?faces-redirect=true\";\n+  }\n+\n+  /**\n+   * @return The trimmed value of a Shib attribute (if non-empty) or null.\n+   * @todo Move this to ShibUtil\n+   */\n+  private String getValueFromAssertion(String key) {\n+    Object attribute = request.getAttribute(key);\n+    if (attribute != null) {\n+      String attributeValue = attribute.toString();\n+      String trimmedValue = attributeValue.trim();\n+      if (!trimmedValue.isEmpty()) {\n+        logger.fine(\n+          \"The SAML assertion for \\\"\" + key + \"\\\" (optional) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" +\n+            trimmedValue + \"\\\".\");\n         return trimmedValue;\n-    }\n-\n-    public String getRootDataverseAlias() {\n-        Dataverse rootDataverse = dataverseService.findRootDataverse();\n-        if (rootDataverse != null) {\n-            String rootDvAlias = rootDataverse.getAlias();\n-            if (rootDvAlias != null) {\n-                return rootDvAlias;\n-            }\n-        }\n+      } else {\n+        logger.fine(\n+          \"The SAML assertion for \\\"\" + key + \"\\\" (optional) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" +\n+            trimmedValue + \"\\\" (empty string). Returing null.\");\n         return null;\n-    }\n-\n-    /**\n-     * @param includeFacetDashRedirect if true, include \"faces-redirect=true\" in\n-     * the string\n-     *\n-     * @todo Once https://github.com/IQSS/dataverse/issues/1519 is done, revisit\n-     * this method and have the home page be \"/\" rather than \"/dataverses/root\".\n-     *\n-     * @todo Like builtin users, Shibboleth should benefit from redirectPage\n-     * logic per https://github.com/IQSS/dataverse/issues/1551\n-     */\n-    public String getPrettyFacesHomePageString(boolean includeFacetDashRedirect) {\n-        if (redirectPage != null) {\n-            return redirectPage;\n-        }\n-        String plainHomepageString = \"/dataverse.xhtml\";\n-        String rootDvAlias = getRootDataverseAlias();\n-        if (includeFacetDashRedirect) {\n-            if (rootDvAlias != null) {\n-                return plainHomepageString + \"?alias=\"  + rootDvAlias + \"&faces-redirect=true\";\n-            } else {\n-                return  plainHomepageString + \"?faces-redirect=true\";\n-            }\n-        } else if (rootDvAlias != null) {\n-            /**\n-             * @todo Is there a constant for \"/dataverse/\" anywhere? I guess\n-             * we'll just hard-code it here.\n-             */\n-            return \"/dataverse/\" + rootDvAlias;\n-        } else {\n-            return plainHomepageString;\n-        }\n-    }\n-\n-    public boolean isInit() {\n-        return state.equals(State.INIT);\n-    }\n-\n-    public boolean isOfferToCreateNewAccount() {\n-        return state.equals(State.PROMPT_TO_CREATE_NEW_ACCOUNT);\n-    }\n-\n-    public boolean isOfferToConvertExistingAccount() {\n-        return state.equals(State.PROMPT_TO_CONVERT_EXISTING_ACCOUNT);\n-    }\n-\n-    public String getDisplayNameToPersist() {\n-        return displayNameToPersist;\n-    }\n-\n-    public String getEmailToPersist() {\n-        return emailToPersist;\n-    }\n-\n-    public String getAffiliationToDisplayAtConfirmation() {\n-        return affiliationToDisplayAtConfirmation;\n-    }\n-\n-    public String getExistingEmail() {\n-        return existingEmail;\n-    }\n-\n-    public void setExistingEmail(String existingEmail) {\n-        this.existingEmail = existingEmail;\n-    }\n-\n-    public String getExistingDisplayName() {\n-        return existingDisplayName;\n-    }\n-\n-    public boolean isPasswordRejected() {\n-        return passwordRejected;\n-    }\n-\n-    public String getFriendlyNameForInstitution() {\n-        return friendlyNameForInstitution;\n-    }\n-\n-    public void setFriendlyNameForInstitution(String friendlyNameForInstitution) {\n-        this.friendlyNameForInstitution = friendlyNameForInstitution;\n-    }\n-\n-    public State getState() {\n-        return state;\n-    }\n-\n-    public boolean isVisibleTermsOfUse() {\n-        return visibleTermsOfUse;\n-    }\n-\n-    public String getBuiltinUsername() {\n-        return builtinUsername;\n-    }\n-\n-    public void setBuiltinUsername(String builtinUsername) {\n-        this.builtinUsername = builtinUsername;\n-    }\n-\n-    public String getBuiltinPassword() {\n-        return builtinPassword;\n-    }\n-\n-    public void setBuiltinPassword(String builtinPassword) {\n-        this.builtinPassword = builtinPassword;\n-    }\n-\n-    public String getDebugSummary() {\n-        return debugSummary;\n-    }\n-\n-    public void setDebugSummary(String debugSummary) {\n-        this.debugSummary = debugSummary;\n-    }\n-\n-    public String getRedirectPage() {\n-        return redirectPage;\n-    }\n-\n-    public void setRedirectPage(String redirectPage) {\n-        this.redirectPage = redirectPage;\n-    }\n+      }\n+    } else {\n+      logger.fine(\"The SAML assertion for \\\"\" + key + \"\\\" (optional) was null.\");\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * @return The trimmed value of a Shib attribute (if non-empty) or null.\n+   * @todo Move this to ShibUtil. More objects might be required since\n+   * sometimes we want to show messages, etc.\n+   */\n+  private String getRequiredValueFromAssertion(String key) throws Exception {\n+    Object attribute = request.getAttribute(key);\n+    if (attribute == null) {\n+      String msg = \"The SAML assertion for \\\"\" + key + \"\\\" was null. Please contact support.\";\n+      logger.info(msg);\n+      boolean showMessage = true;\n+      if (shibIdp.equals(ShibUtil.testShibIdpEntityId) && key.equals(ShibUtil.emailAttribute)) {\n+        showMessage = false;\n+      }\n+      if (showMessage) {\n+        FacesContext.getCurrentInstance().addMessage(null,\n+          new FacesMessage(FacesMessage.SEVERITY_ERROR, identityProviderProblem,\n+            BundleUtil.getStringFromBundle(\"shib.nullerror\", Arrays.asList(key))));\n+      }\n+      throw new Exception(msg);\n+    }\n+    String attributeValue = attribute.toString();\n+    if (attributeValue.isEmpty()) {\n+      throw new Exception(key + \" was empty\");\n+    }\n+    if (systemConfig.isShibAttributeCharacterSetConversionEnabled()) {\n+      attributeValue = new String(attributeValue.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n+    }\n+    String trimmedValue = attributeValue.trim();\n+    logger.fine(\n+      \"The SAML assertion for \\\"\" + key + \"\\\" (required) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" +\n+        trimmedValue + \"\\\".\");\n+    return trimmedValue;\n+  }\n+\n+  public String getRootDataverseAlias() {\n+    Dataverse rootDataverse = dataverseService.findRootDataverse();\n+    if (rootDataverse != null) {\n+      String rootDvAlias = rootDataverse.getAlias();\n+      if (rootDvAlias != null) {\n+        return rootDvAlias;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * @param includeFacetDashRedirect if true, include \"faces-redirect=true\" in\n+   *                                 the string\n+   * @todo Once https://github.com/IQSS/dataverse/issues/1519 is done, revisit\n+   * this method and have the home page be \"/\" rather than \"/dataverses/root\".\n+   * @todo Like builtin users, Shibboleth should benefit from redirectPage\n+   * logic per https://github.com/IQSS/dataverse/issues/1551\n+   */\n+  public String getPrettyFacesHomePageString(boolean includeFacetDashRedirect) {\n+    if (redirectPage != null) {\n+      return redirectPage;\n+    }\n+    String plainHomepageString = \"/dataverse.xhtml\";\n+    String rootDvAlias = getRootDataverseAlias();\n+    if (includeFacetDashRedirect) {\n+      if (rootDvAlias != null) {\n+        return plainHomepageString + \"?alias=\" + rootDvAlias + \"&faces-redirect=true\";\n+      } else {\n+        return plainHomepageString + \"?faces-redirect=true\";\n+      }\n+    } else if (rootDvAlias != null) {\n+      /**\n+       * @todo Is there a constant for \"/dataverse/\" anywhere? I guess\n+       * we'll just hard-code it here.\n+       */\n+      return \"/dataverse/\" + rootDvAlias;\n+    } else {\n+      return plainHomepageString;\n+    }\n+  }\n+\n+  public boolean isInit() {\n+    return state.equals(State.INIT);\n+  }\n+\n+  public boolean isOfferToCreateNewAccount() {\n+    return state.equals(State.PROMPT_TO_CREATE_NEW_ACCOUNT);\n+  }\n+\n+  public boolean isOfferToConvertExistingAccount() {\n+    return state.equals(State.PROMPT_TO_CONVERT_EXISTING_ACCOUNT);\n+  }\n+\n+  public String getDisplayNameToPersist() {\n+    return displayNameToPersist;\n+  }\n+\n+  public String getEmailToPersist() {\n+    return emailToPersist;\n+  }\n+\n+  public String getAffiliationToDisplayAtConfirmation() {\n+    return affiliationToDisplayAtConfirmation;\n+  }\n+\n+  public String getExistingEmail() {\n+    return existingEmail;\n+  }\n+\n+  public void setExistingEmail(String existingEmail) {\n+    this.existingEmail = existingEmail;\n+  }\n+\n+  public String getExistingDisplayName() {\n+    return existingDisplayName;\n+  }\n+\n+  public boolean isPasswordRejected() {\n+    return passwordRejected;\n+  }\n+\n+  public String getFriendlyNameForInstitution() {\n+    return friendlyNameForInstitution;\n+  }\n+\n+  public void setFriendlyNameForInstitution(String friendlyNameForInstitution) {\n+    this.friendlyNameForInstitution = friendlyNameForInstitution;\n+  }\n+\n+  public State getState() {\n+    return state;\n+  }\n+\n+  public boolean isVisibleTermsOfUse() {\n+    return visibleTermsOfUse;\n+  }\n+\n+  public String getBuiltinUsername() {\n+    return builtinUsername;\n+  }\n+\n+  public void setBuiltinUsername(String builtinUsername) {\n+    this.builtinUsername = builtinUsername;\n+  }\n+\n+  public String getBuiltinPassword() {\n+    return builtinPassword;\n+  }\n+\n+  public void setBuiltinPassword(String builtinPassword) {\n+    this.builtinPassword = builtinPassword;\n+  }\n+\n+  public String getDebugSummary() {\n+    return debugSummary;\n+  }\n+\n+  public void setDebugSummary(String debugSummary) {\n+    this.debugSummary = debugSummary;\n+  }\n+\n+  public String getRedirectPage() {\n+    return redirectPage;\n+  }\n+\n+  public void setRedirectPage(String redirectPage) {\n+    this.redirectPage = redirectPage;\n+  }\n \n }\n",
            "diff_size": 680
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/19/Shib.java\nindex b71fe3cd566..cefa98fea9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/19/Shib.java\n@@ -16,7 +16,6 @@ import edu.harvard.iq.dataverse.util.BundleUtil;\n import edu.harvard.iq.dataverse.util.JsfHelper;\n import edu.harvard.iq.dataverse.util.SystemConfig;\n import org.apache.commons.lang3.StringUtils;\n-\n import java.io.IOException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n@@ -34,6 +33,7 @@ import javax.inject.Inject;\n import javax.inject.Named;\n import javax.servlet.http.HttpServletRequest;\n \n+\n @ViewScoped\n @Named(\"Shib\")\n public class Shib implements java.io.Serializable {\n@@ -45,21 +45,25 @@ public class Shib implements java.io.Serializable {\n \n     @EJB\n     AuthenticationServiceBean authSvc;\n+\n     @EJB\n     ShibServiceBean shibService;\n+\n     @EJB\n     DataverseServiceBean dataverseService;\n+\n     @EJB\n     GroupServiceBean groupService;\n+\n     @EJB\n     UserNotificationServiceBean userNotificationService;\n+\n     @EJB\n     SettingsServiceBean settingsService;\n-\t@EJB\n-\tSystemConfig systemConfig;\n \n+    @EJB\n+    SystemConfig systemConfig;\n     HttpServletRequest request;\n-\n     private String userPersistentId;\n     private String internalUserIdentifer;\n     AuthenticatedUserDisplayInfo displayInfo;\n@@ -111,11 +115,8 @@ public class Shib implements java.io.Serializable {\n     private String emailAddress;\n \n     public enum State {\n-\n-        INIT,\n-        REGULAR_LOGIN_INTO_EXISTING_SHIB_ACCOUNT,\n-        PROMPT_TO_CREATE_NEW_ACCOUNT,\n-        PROMPT_TO_CONVERT_EXISTING_ACCOUNT,\n+        INIT, REGULAR_LOGIN_INTO_EXISTING_SHIB_ACCOUNT, PROMPT_TO_CREATE_NEW_ACCOUNT, PROMPT_TO_CONVERT_EXISTING_ACCOUNT\n+    ,\n     };\n \n     public void init() {\n@@ -133,9 +134,7 @@ public class Shib implements java.io.Serializable {\n          * http://shibboleth.1660669.n2.nabble.com/Why-doesn-t-Java-s-request-getAttributeNames-show-Shibboleth-attributes-tp7616427p7616591.html\n          */\n         logger.fine(\"JkEnvVar: \" + System.getenv(\"JkEnvVar\"));\n-\n         shibService.possiblyMutateRequestInDev(request);\n-\n         try {\n             shibIdp = getRequiredValueFromAssertion(ShibUtil.shibIdpAttribute);\n         } catch (Exception ex) {\n@@ -148,35 +147,41 @@ public class Shib implements java.io.Serializable {\n              */\n             return;\n         }\n+\n         String shibUserIdentifier;\n         try {\n             shibUserIdentifier = getRequiredValueFromAssertion(ShibUtil.uniquePersistentIdentifier);\n         } catch (Exception ex) {\n             return;\n         }\n+\n         String firstName;\n         try {\n             firstName = getRequiredValueFromAssertion(ShibUtil.firstNameAttribute);\n         } catch (Exception ex) {\n             return;\n         }\n+\n         String lastName;\n         try {\n             lastName = getRequiredValueFromAssertion(ShibUtil.lastNameAttribute);\n         } catch (Exception ex) {\n             return;\n         }\n+\n         ShibUserNameFields shibUserNameFields = ShibUtil.findBestFirstAndLastName(firstName, lastName, null);\n         if (shibUserNameFields != null) {\n             String betterFirstName = shibUserNameFields.getFirstName();\n             if (betterFirstName != null) {\n                 firstName = betterFirstName;\n             }\n+\n             String betterLastName = shibUserNameFields.getLastName();\n             if (betterLastName != null) {\n                 lastName = betterLastName;\n             }\n         }\n+\n         String emailAddressInAssertion = null;\n         try {\n             emailAddressInAssertion = getRequiredValueFromAssertion(ShibUtil.emailAttribute);\n@@ -193,7 +198,7 @@ public class Shib implements java.io.Serializable {\n         if (!EMailValidator.isEmailValid(emailAddressInAssertion, null)) {\n             String msg = \"The SAML assertion contained an invalid email address: \\\"\" + emailAddressInAssertion + \"\\\".\";\n             logger.info(msg);\n-            msg=BundleUtil.getStringFromBundle(\"shib.invalidEmailAddress\",   Arrays.asList(emailAddressInAssertion));\n+            msg = BundleUtil.getStringFromBundle(\"shib.invalidEmailAddress\", Arrays.asList(emailAddressInAssertion));\n             String singleEmailAddress = ShibUtil.findSingleValue(emailAddressInAssertion);\n             if (EMailValidator.isEmailValid(singleEmailAddress, null)) {\n                 msg = \"Multiple email addresses were asserted by the Identity Provider (\" + emailAddressInAssertion + \" ). These were sorted and the first was chosen: \" + singleEmailAddress;\n@@ -211,26 +216,21 @@ public class Shib implements java.io.Serializable {\n         String usernameAssertion = getValueFromAssertion(ShibUtil.usernameAttribute);\n         internalUserIdentifer = ShibUtil.generateFriendlyLookingUserIdentifer(usernameAssertion, emailAddress);\n         logger.fine(\"friendly looking identifer (backend will enforce uniqueness):\" + internalUserIdentifer);\n-\n         String shibAffiliationAttribute = settingsService.getValueForKey(SettingsServiceBean.Key.ShibAffiliationAttribute);\n-        String affiliation = (StringUtils.isNotBlank(shibAffiliationAttribute))\n-            ? getValueFromAssertion(shibAffiliationAttribute)\n-            : shibService.getAffiliation(shibIdp, shibService.getDevShibAccountType());\n-\n+        String affiliation = (StringUtils.isNotBlank(shibAffiliationAttribute)) ? getValueFromAssertion(shibAffiliationAttribute) : shibService.getAffiliation(shibIdp, shibService.getDevShibAccountType());\n         if (affiliation != null) {\n             affiliationToDisplayAtConfirmation = affiliation;\n             friendlyNameForInstitution = affiliation;\n         }\n //        emailAddress = \"willFailBeanValidation\"; // for testing createAuthenticatedUser exceptions\n         displayInfo = new AuthenticatedUserDisplayInfo(firstName, lastName, emailAddress, affiliation, null);\n-\n         userPersistentId = shibIdp + persistentUserIdSeparator + shibUserIdentifier;\n         ShibAuthenticationProvider shibAuthProvider = new ShibAuthenticationProvider();\n         AuthenticatedUser au = authSvc.lookupUser(shibAuthProvider.getId(), userPersistentId);\n         if (au != null) {\n             //See if there's another account with this email\n             AuthenticatedUser auEmail = authSvc.getAuthenticatedUserByEmail(emailAddress);\n-            if (auEmail!= null && !auEmail.equals(au)){   \n+            if (auEmail != null && !auEmail.equals(au)) {   \n                 //If this email already belongs to another account throw a message for user to contact support\n                 JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.duplicate.email.error\"));\n                 return;\n@@ -278,6 +278,7 @@ public class Shib implements java.io.Serializable {\n             if (existingEmail != null) {\n                 emailAddressToLookUp = existingEmail;\n             }\n+\n             AuthenticatedUser existingAuthUserFoundByEmail = shibService.findAuthUserByEmail(emailAddressToLookUp);\n             BuiltinUser existingBuiltInUserFoundByEmail = null;\n             if (existingAuthUserFoundByEmail != null) {\n@@ -285,7 +286,6 @@ public class Shib implements java.io.Serializable {\n                 existingBuiltInUserFoundByEmail = shibService.findBuiltInUserByAuthUserIdentifier(existingAuthUserFoundByEmail.getUserIdentifier());\n                 if (existingBuiltInUserFoundByEmail != null) {\n                     state = State.PROMPT_TO_CONVERT_EXISTING_ACCOUNT;\n-\n                     debugSummary = \"getting username from the builtin user we looked up via email\";\n                     builtinUsername = existingBuiltInUserFoundByEmail.getUserName();\n                 } else {\n@@ -294,7 +294,6 @@ public class Shib implements java.io.Serializable {\n             } else {\n                 debugSummary = \"Could not find an auth user based on email address\";\n             }\n-\n         }\n         logger.fine(\"Debug summary: \" + debugSummary + \" (state: \" + state + \").\");\n         logger.fine(\"redirectPage: \" + redirectPage);\n@@ -306,13 +305,17 @@ public class Shib implements java.io.Serializable {\n         AuthenticatedUser au = null;\n         try {\n             au = authSvc.createAuthenticatedUser(\n-                    new UserRecordIdentifier(shibAuthProvider.getId(), lookupStringPerAuthProvider), internalUserIdentifer, displayInfo, true);\n+                new UserRecordIdentifier(shibAuthProvider.getId(), lookupStringPerAuthProvider),\n+                internalUserIdentifer,\n+                displayInfo,\n+                true);\n         } catch (EJBException ex) {\n             /**\n              * @todo Show the ConstraintViolationException, if any.\n              */\n             logger.info(\"Couldn't create user \" + userPersistentId + \" due to exception: \" + ex.getCause());\n         }\n+\n         if (au != null) {\n             logger.fine(\"created user \" + au.getIdentifier());\n             logInUserAndSetShibAttributes(au);\n@@ -320,9 +323,7 @@ public class Shib implements java.io.Serializable {\n              * @todo Move this to\n              * AuthenticationServiceBean.createAuthenticatedUser\n              */\n-            userNotificationService.sendNotification(au,\n-                    new Timestamp(new Date().getTime()),\n-                    UserNotification.Type.CREATEACC, null);\n+            userNotificationService.sendNotification(au, new Timestamp(new Date().getTime()), UserNotification.Type.CREATEACC, null);\n             return \"/dataverseuser.xhtml?selectTab=accountInfo&faces-redirect=true\";\n         } else {\n             JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"shib.createUser.fail\"));\n@@ -343,6 +344,7 @@ public class Shib implements java.io.Serializable {\n                 return null;\n             }\n             // TODO: Switch from authSvc.convertBuiltInToShib to authSvc.convertBuiltInUserToRemoteUser\n+\n             AuthenticatedUser au = authSvc.convertBuiltInToShib(builtInUserToConvert, shibAuthProvider.getId(), userIdentifier);\n             if (au != null) {\n                 authSvc.updateAuthenticatedUser(au, displayInfo);\n@@ -383,6 +385,7 @@ public class Shib implements java.io.Serializable {\n      * now. Here's the mockup:\n      * https://iqssharvard.mybalsamiq.com/projects/loginwithshibboleth-version3-dataverse40/Dataverse%20Account%20III%20-%20Agree%20Terms%20of%20Use\n      */\n+\n     public String cancel() {\n         return loginpage + \"?faces-redirect=true\";\n     }\n@@ -392,6 +395,7 @@ public class Shib implements java.io.Serializable {\n      *\n      * @todo Move this to ShibUtil\n      */\n+\n     private String getValueFromAssertion(String key) {\n         Object attribute = request.getAttribute(key);\n         if (attribute != null) {\n@@ -416,6 +420,7 @@ public class Shib implements java.io.Serializable {\n      * @todo Move this to ShibUtil. More objects might be required since\n      * sometimes we want to show messages, etc.\n      */\n+\n     private String getRequiredValueFromAssertion(String key) throws Exception {\n         Object attribute = request.getAttribute(key);\n         if (attribute == null) {\n@@ -425,18 +430,24 @@ public class Shib implements java.io.Serializable {\n             if (shibIdp.equals(ShibUtil.testShibIdpEntityId) && key.equals(ShibUtil.emailAttribute)) {\n                 showMessage = false;\n             }\n+\n             if (showMessage) {\n-                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, identityProviderProblem, BundleUtil.getStringFromBundle(\"shib.nullerror\",Arrays.asList(key))));\n+                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,\n+identityProviderProblem,\n+BundleUtil.getStringFromBundle(\"shib.nullerror\", Arrays.asList(key))));\n             }\n             throw new Exception(msg);\n         }\n+\n         String attributeValue = attribute.toString();\n         if (attributeValue.isEmpty()) {\n             throw new Exception(key + \" was empty\");\n         }\n-\t\tif(systemConfig.isShibAttributeCharacterSetConversionEnabled()) {\n-\t\t\tattributeValue= new String( attributeValue.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n-\t\t}\n+\n+        if (systemConfig.isShibAttributeCharacterSetConversionEnabled()) {\n+            attributeValue = new String(attributeValue.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n+        }\n+\n         String trimmedValue = attributeValue.trim();\n         logger.fine(\"The SAML assertion for \\\"\" + key + \"\\\" (required) was \\\"\" + attributeValue + \"\\\" and was trimmed to \\\"\" + trimmedValue + \"\\\".\");\n         return trimmedValue;\n@@ -463,17 +474,19 @@ public class Shib implements java.io.Serializable {\n      * @todo Like builtin users, Shibboleth should benefit from redirectPage\n      * logic per https://github.com/IQSS/dataverse/issues/1551\n      */\n+\n     public String getPrettyFacesHomePageString(boolean includeFacetDashRedirect) {\n         if (redirectPage != null) {\n             return redirectPage;\n         }\n+\n         String plainHomepageString = \"/dataverse.xhtml\";\n         String rootDvAlias = getRootDataverseAlias();\n         if (includeFacetDashRedirect) {\n             if (rootDvAlias != null) {\n-                return plainHomepageString + \"?alias=\"  + rootDvAlias + \"&faces-redirect=true\";\n+                return plainHomepageString + \"?alias=\" + rootDvAlias + \"&faces-redirect=true\";\n             } else {\n-                return  plainHomepageString + \"?faces-redirect=true\";\n+                return plainHomepageString + \"?faces-redirect=true\";\n             }\n         } else if (rootDvAlias != null) {\n             /**\n@@ -574,4 +587,4 @@ public class Shib implements java.io.Serializable {\n         this.redirectPage = redirectPage;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 63
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "59",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/19/Shib.java\nindex b71fe3cd566..a8d65b755dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/19/Shib.java\n@@ -55,7 +55,7 @@ public class Shib implements java.io.Serializable {\n     UserNotificationServiceBean userNotificationService;\n     @EJB\n     SettingsServiceBean settingsService;\n-\t@EJB\n+@EJB\n \tSystemConfig systemConfig;\n \n     HttpServletRequest request;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "59",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/19/Shib.java\nindex b71fe3cd566..8f0b0c2fb33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/19/Shib.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/19/Shib.java\n@@ -55,7 +55,7 @@ public class Shib implements java.io.Serializable {\n     UserNotificationServiceBean userNotificationService;\n     @EJB\n     SettingsServiceBean settingsService;\n-\t@EJB\n+    @EJB\n \tSystemConfig systemConfig;\n \n     HttpServletRequest request;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}