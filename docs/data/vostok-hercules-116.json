{
    "project_name": "vostok-hercules",
    "error_id": "116",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "17",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                Stream stream = deserializer.readValue(bytes);\n                Result result = Validation.check(stream);\n                if(!result.isOk()) {\n                    ResponseUtil.badRequest(exch);\n                    return;\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/116/CreateStreamHandler.java\nindex f553f901d9c..6479f9cbb8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/116/CreateStreamHandler.java\n@@ -55,7 +55,7 @@ public class CreateStreamHandler implements HttpHandler {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n                 Result result = Validation.check(stream);\n-                if(!result.isOk()) {\n+                if (!result.isOk()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/116/CreateStreamHandler.java\nindex f553f901d9c..034af86a662 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/116/CreateStreamHandler.java\n@@ -25,76 +25,76 @@ import java.util.Optional;\n  */\n public class CreateStreamHandler implements HttpHandler {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n \n-    private final AuthManager authManager;\n-    private final StreamRepository repository;\n-    private final KafkaTaskQueue kafkaTaskQueue;\n+  private final AuthManager authManager;\n+  private final StreamRepository repository;\n+  private final KafkaTaskQueue kafkaTaskQueue;\n \n-    private final ObjectReader deserializer;\n+  private final ObjectReader deserializer;\n \n-    public CreateStreamHandler(AuthManager authManager, StreamRepository repository, KafkaTaskQueue kafkaTaskQueue) {\n-        this.authManager = authManager;\n-        this.repository = repository;\n-        this.kafkaTaskQueue = kafkaTaskQueue;\n+  public CreateStreamHandler(AuthManager authManager, StreamRepository repository, KafkaTaskQueue kafkaTaskQueue) {\n+    this.authManager = authManager;\n+    this.repository = repository;\n+    this.kafkaTaskQueue = kafkaTaskQueue;\n \n-        ObjectMapper objectMapper = new ObjectMapper();\n-        this.deserializer = objectMapper.readerFor(Stream.class);\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    this.deserializer = objectMapper.readerFor(Stream.class);\n+  }\n+\n+  @Override\n+  public void handleRequest(HttpServerExchange exchange) throws Exception {\n+    Optional<String> optionalApiKey = ExchangeUtil.extractHeaderValue(exchange, \"apiKey\");\n+    if (!optionalApiKey.isPresent()) {\n+      ResponseUtil.unauthorized(exchange);\n+      return;\n     }\n \n-    @Override\n-    public void handleRequest(HttpServerExchange exchange) throws Exception {\n-        Optional<String> optionalApiKey = ExchangeUtil.extractHeaderValue(exchange, \"apiKey\");\n-        if (!optionalApiKey.isPresent()) {\n-            ResponseUtil.unauthorized(exchange);\n-            return;\n+    final String apiKey = optionalApiKey.get();\n+    exchange.getRequestReceiver().receiveFullBytes((exch, bytes) -> {\n+      try {\n+        Stream stream = deserializer.readValue(bytes);\n+        Result result = Validation.check(stream);\n+        if (!result.isOk()) {\n+          ResponseUtil.badRequest(exch);\n+          return;\n         }\n \n-        final String apiKey = optionalApiKey.get();\n-        exchange.getRequestReceiver().receiveFullBytes((exch, bytes) -> {\n-            try {\n-                Stream stream = deserializer.readValue(bytes);\n-                Result result = Validation.check(stream);\n-                if(!result.isOk()) {\n-                    ResponseUtil.badRequest(exch);\n-                    return;\n-                }\n-\n-                AuthResult authResult = authManager.authManage(apiKey, stream.getName());\n-                if (!authResult.isSuccess()) {\n-                    if (authResult.isUnknown()) {\n-                        ResponseUtil.unauthorized(exch);\n-                        return;\n-                    }\n-                    ResponseUtil.forbidden(exch);\n-                    return;\n-                }\n-                //TODO: Auth sources if needed\n+        AuthResult authResult = authManager.authManage(apiKey, stream.getName());\n+        if (!authResult.isSuccess()) {\n+          if (authResult.isUnknown()) {\n+            ResponseUtil.unauthorized(exch);\n+            return;\n+          }\n+          ResponseUtil.forbidden(exch);\n+          return;\n+        }\n+        //TODO: Auth sources if needed\n \n-                CreationResult creationResult = repository.create(stream);\n-                if (!creationResult.isSuccess()) {\n-                    if (creationResult.getStatus() == CreationResult.Status.ALREADY_EXIST) {\n-                        ResponseUtil.conflict(exch);\n-                    } else {\n-                        ResponseUtil.internalServerError(exch);\n-                    }\n-                    return;\n-                }\n+        CreationResult creationResult = repository.create(stream);\n+        if (!creationResult.isSuccess()) {\n+          if (creationResult.getStatus() == CreationResult.Status.ALREADY_EXIST) {\n+            ResponseUtil.conflict(exch);\n+          } else {\n+            ResponseUtil.internalServerError(exch);\n+          }\n+          return;\n+        }\n \n-                //TODO: Topic creation may fail after successful meta creation (no atomicity at all).\n-                kafkaTaskQueue.createTopic(stream.getName(), stream.getPartitions(), stream.getTtl());\n-            } catch (IOException e) {\n-                LOGGER.error(\"Error on processing request\", e);\n-                ResponseUtil.badRequest(exch);\n-                return;\n-            } catch (Exception e) {\n-                LOGGER.error(\"Error on processing request\", e);\n-                ResponseUtil.internalServerError(exch);\n-                return;\n-            }\n-        }, (exch, exception) -> {\n-            ResponseUtil.badRequest(exch);\n-            return;\n-        });\n-    }\n+        //TODO: Topic creation may fail after successful meta creation (no atomicity at all).\n+        kafkaTaskQueue.createTopic(stream.getName(), stream.getPartitions(), stream.getTtl());\n+      } catch (IOException e) {\n+        LOGGER.error(\"Error on processing request\", e);\n+        ResponseUtil.badRequest(exch);\n+        return;\n+      } catch (Exception e) {\n+        LOGGER.error(\"Error on processing request\", e);\n+        ResponseUtil.internalServerError(exch);\n+        return;\n+      }\n+    }, (exch, exception) -> {\n+      ResponseUtil.badRequest(exch);\n+      return;\n+    });\n+  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/116/CreateStreamHandler.java\nindex f553f901d9c..4e75199ceac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/116/CreateStreamHandler.java\n@@ -55,7 +55,7 @@ public class CreateStreamHandler implements HttpHandler {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n                 Result result = Validation.check(stream);\n-                if(!result.isOk()) {\n+                if (!result.isOk()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n@@ -97,4 +97,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/116/CreateStreamHandler.java\nindex f553f901d9c..eb366efb286 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/116/CreateStreamHandler.java\n@@ -16,21 +16,20 @@ import ru.kontur.vostok.hercules.meta.stream.validation.Validation;\n import ru.kontur.vostok.hercules.undertow.util.ExchangeUtil;\n import ru.kontur.vostok.hercules.undertow.util.ResponseUtil;\n import ru.kontur.vostok.hercules.util.functional.Result;\n-\n import java.io.IOException;\n import java.util.Optional;\n \n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class CreateStreamHandler implements HttpHandler {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n-\n     private final AuthManager authManager;\n     private final StreamRepository repository;\n     private final KafkaTaskQueue kafkaTaskQueue;\n-\n     private final ObjectReader deserializer;\n \n     public CreateStreamHandler(AuthManager authManager, StreamRepository repository, KafkaTaskQueue kafkaTaskQueue) {\n@@ -55,7 +54,7 @@ public class CreateStreamHandler implements HttpHandler {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n                 Result result = Validation.check(stream);\n-                if(!result.isOk()) {\n+                if (!result.isOk()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n@@ -66,6 +65,7 @@ public class CreateStreamHandler implements HttpHandler {\n                         ResponseUtil.unauthorized(exch);\n                         return;\n                     }\n+\n                     ResponseUtil.forbidden(exch);\n                     return;\n                 }\n@@ -82,6 +82,7 @@ public class CreateStreamHandler implements HttpHandler {\n                 }\n \n                 //TODO: Topic creation may fail after successful meta creation (no atomicity at all).\n+\n                 kafkaTaskQueue.createTopic(stream.getName(), stream.getPartitions(), stream.getTtl());\n             } catch (IOException e) {\n                 LOGGER.error(\"Error on processing request\", e);\n@@ -97,4 +98,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/116/CreateStreamHandler.java\nindex f553f901d9c..6479f9cbb8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/116/CreateStreamHandler.java\n@@ -55,7 +55,7 @@ public class CreateStreamHandler implements HttpHandler {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n                 Result result = Validation.check(stream);\n-                if(!result.isOk()) {\n+                if (!result.isOk()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/116/CreateStreamHandler.java\nindex f553f901d9c..6479f9cbb8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/116/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/116/CreateStreamHandler.java\n@@ -55,7 +55,7 @@ public class CreateStreamHandler implements HttpHandler {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n                 Result result = Validation.check(stream);\n-                if(!result.isOk()) {\n+                if (!result.isOk()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}