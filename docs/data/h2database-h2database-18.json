{
    "project_name": "h2database-h2database",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "163",
                "column": "72",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                        newModified = true;\n                    } else if (dependentTable.getSchema() != this) {\n                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n                    } else if (!modified) {\n                        dependentTable.removeColumnExpressionsDependencies(session);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/18/Schema.java\nindex 5f794af3f59..5aa5ce108cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/18/Schema.java\n@@ -160,8 +160,9 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                        throw DbException.get(ErrorCode.CANNOT_DROP_2,\n+                                //\n+                                 obj.getTraceSQL(), dependentTable.getTraceSQL());\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "167",
                    "column": "72",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/18/Schema.java\nindex 5f794af3f59..20ced25310c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/18/Schema.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.schema;\n \n import java.util.ArrayList;\n@@ -65,15 +66,15 @@ public class Schema extends DbObjectBase {\n     /**\n      * Create a new schema object.\n      *\n-     * @param database the database\n-     * @param id the object id\n+     * @param database   the database\n+     * @param id         the object id\n      * @param schemaName the schema name\n-     * @param owner the owner of the schema\n-     * @param system if this is a system schema (such a schema can not be\n-     *            dropped)\n+     * @param owner      the owner of the schema\n+     * @param system     if this is a system schema (such a schema can not be\n+     *                   dropped)\n      */\n     public Schema(Database database, int id, String schemaName, User owner,\n-            boolean system) {\n+                  boolean system) {\n         super(database, id, schemaName, Trace.SCHEMA);\n         tablesAndViews = database.newConcurrentStringMap();\n         domains = database.newConcurrentStringMap();\n@@ -108,7 +109,8 @@ public class Schema extends DbObjectBase {\n         if (system) {\n             return null;\n         }\n-        StringBuilder builder = new StringBuilder(\"CREATE SCHEMA IF NOT EXISTS \");\n+        StringBuilder builder =\n+                new StringBuilder(\"CREATE SCHEMA IF NOT EXISTS \");\n         getSQL(builder, DEFAULT_SQL_FLAGS).append(\" AUTHORIZATION \");\n         owner.getSQL(builder, DEFAULT_SQL_FLAGS);\n         return builder.toString();\n@@ -125,8 +127,10 @@ public class Schema extends DbObjectBase {\n      * @return {@code true} if this schema is empty, {@code false} otherwise\n      */\n     public boolean isEmpty() {\n-        return tablesAndViews.isEmpty() && domains.isEmpty() && synonyms.isEmpty() && indexes.isEmpty()\n-                && sequences.isEmpty() && triggers.isEmpty() && constraints.isEmpty() && constants.isEmpty()\n+        return tablesAndViews.isEmpty() && domains.isEmpty() &&\n+                synonyms.isEmpty() && indexes.isEmpty()\n+                && sequences.isEmpty() && triggers.isEmpty() &&\n+                constraints.isEmpty() && constants.isEmpty()\n                 && functions.isEmpty() && aggregates.isEmpty();\n     }\n \n@@ -161,9 +165,11 @@ public class Schema extends DbObjectBase {\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n                         throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                                obj.getTraceSQL(),\n+                                dependentTable.getTraceSQL());\n                     } else if (!modified) {\n-                        dependentTable.removeColumnExpressionsDependencies(session);\n+                        dependentTable\n+                                .removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n                         database.updateMeta(session, dependentTable);\n                     }\n@@ -187,7 +193,8 @@ public class Schema extends DbObjectBase {\n         invalidate();\n     }\n \n-    private void removeChildrenFromMap(SessionLocal session, ConcurrentHashMap<String, ? extends SchemaObject> map) {\n+    private void removeChildrenFromMap(SessionLocal session,\n+                                       ConcurrentHashMap<String, ? extends SchemaObject> map) {\n         if (!map.isEmpty()) {\n             for (SchemaObject obj : map.values()) {\n                 // Database.removeSchemaObject() removes the object from\n@@ -217,6 +224,7 @@ public class Schema extends DbObjectBase {\n \n     /**\n      * Set table engine params of this schema.\n+     *\n      * @param tableEngineParams default table engine params\n      */\n     public void setTableEngineParams(ArrayList<String> tableEngineParams) {\n@@ -227,38 +235,38 @@ public class Schema extends DbObjectBase {\n     private Map<String, SchemaObject> getMap(int type) {\n         Map<String, ? extends SchemaObject> result;\n         switch (type) {\n-        case DbObject.TABLE_OR_VIEW:\n-            result = tablesAndViews;\n-            break;\n-        case DbObject.DOMAIN:\n-            result = domains;\n-            break;\n-        case DbObject.SYNONYM:\n-            result = synonyms;\n-            break;\n-        case DbObject.SEQUENCE:\n-            result = sequences;\n-            break;\n-        case DbObject.INDEX:\n-            result = indexes;\n-            break;\n-        case DbObject.TRIGGER:\n-            result = triggers;\n-            break;\n-        case DbObject.CONSTRAINT:\n-            result = constraints;\n-            break;\n-        case DbObject.CONSTANT:\n-            result = constants;\n-            break;\n-        case DbObject.FUNCTION_ALIAS:\n-            result = functions;\n-            break;\n-        case DbObject.AGGREGATE:\n-            result = aggregates;\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n+            case DbObject.TABLE_OR_VIEW:\n+                result = tablesAndViews;\n+                break;\n+            case DbObject.DOMAIN:\n+                result = domains;\n+                break;\n+            case DbObject.SYNONYM:\n+                result = synonyms;\n+                break;\n+            case DbObject.SEQUENCE:\n+                result = sequences;\n+                break;\n+            case DbObject.INDEX:\n+                result = indexes;\n+                break;\n+            case DbObject.TRIGGER:\n+                result = triggers;\n+                break;\n+            case DbObject.CONSTRAINT:\n+                result = constraints;\n+                break;\n+            case DbObject.CONSTANT:\n+                result = constants;\n+                break;\n+            case DbObject.FUNCTION_ALIAS:\n+                result = functions;\n+                break;\n+            case DbObject.AGGREGATE:\n+                result = aggregates;\n+                break;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + type);\n         }\n         return (Map<String, SchemaObject>) result;\n     }\n@@ -285,18 +293,20 @@ public class Schema extends DbObjectBase {\n     /**\n      * Rename an object.\n      *\n-     * @param obj the object to rename\n+     * @param obj     the object to rename\n      * @param newName the new name\n      */\n     public void rename(SchemaObject obj, String newName) {\n         int type = obj.getType();\n         Map<String, SchemaObject> map = getMap(type);\n         if (SysProperties.CHECK) {\n-            if (!map.containsKey(obj.getName()) && !(obj instanceof MetaTable)) {\n+            if (!map.containsKey(obj.getName()) &&\n+                    !(obj instanceof MetaTable)) {\n                 DbException.throwInternalError(\"not found: \" + obj.getName());\n             }\n             if (obj.getName().equals(newName) || map.containsKey(newName)) {\n-                DbException.throwInternalError(\"object already exists: \" + newName);\n+                DbException.throwInternalError(\n+                        \"object already exists: \" + newName);\n             }\n         }\n         obj.checkRename();\n@@ -313,7 +323,7 @@ public class Schema extends DbObjectBase {\n      * returned. Synonyms are not returned or resolved.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Table findTableOrView(SessionLocal session, String name) {\n@@ -331,7 +341,7 @@ public class Schema extends DbObjectBase {\n      * synonym is returned\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Table resolveTableOrView(SessionLocal session, String name) {\n@@ -359,10 +369,8 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get objects of the given type.\n      *\n-     * @param type\n-     *                  the object type\n-     * @param name\n-     *                  the name of the object\n+     * @param type the object type\n+     * @param name the name of the object\n      * @return the object, or null\n      */\n     public SchemaObject find(int type, String name) {\n@@ -384,7 +392,7 @@ public class Schema extends DbObjectBase {\n      * no object with this name exists.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Index findIndex(SessionLocal session, String name) {\n@@ -422,7 +430,7 @@ public class Schema extends DbObjectBase {\n      * object with this name exists.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Constraint findConstraint(SessionLocal session, String name) {\n@@ -479,19 +487,23 @@ public class Schema extends DbObjectBase {\n         }\n     }\n \n-    private String getUniqueName(DbObject obj, Map<String, ? extends SchemaObject> map, String prefix) {\n+    private String getUniqueName(DbObject obj,\n+                                 Map<String, ? extends SchemaObject> map,\n+                                 String prefix) {\n         StringBuilder nameBuilder = new StringBuilder(prefix);\n         String hash = Integer.toHexString(obj.getName().hashCode());\n         synchronized (temporaryUniqueNames) {\n             for (int i = 0, len = hash.length(); i < len; i++) {\n                 char c = hash.charAt(i);\n-                String name = nameBuilder.append(c >= 'a' ? (char) (c - 0x20) : c).toString();\n+                String name =\n+                        nameBuilder.append(c >= 'a' ? (char) (c - 0x20) : c)\n+                                .toString();\n                 if (!map.containsKey(name) && temporaryUniqueNames.add(name)) {\n                     return name;\n                 }\n             }\n             int nameLength = nameBuilder.append('_').length();\n-            for (int i = 0;; i++) {\n+            for (int i = 0; ; i++) {\n                 String name = nameBuilder.append(i).toString();\n                 if (!map.containsKey(name) && temporaryUniqueNames.add(name)) {\n                     return name;\n@@ -505,7 +517,7 @@ public class Schema extends DbObjectBase {\n      * Create a unique constraint name.\n      *\n      * @param session the session\n-     * @param table the constraint table\n+     * @param table   the constraint table\n      * @return the unique name\n      */\n     public String getUniqueConstraintName(SessionLocal session, Table table) {\n@@ -522,10 +534,11 @@ public class Schema extends DbObjectBase {\n      * Create a unique constraint name.\n      *\n      * @param session the session\n-     * @param domain the constraint domain\n+     * @param domain  the constraint domain\n      * @return the unique name\n      */\n-    public String getUniqueDomainConstraintName(SessionLocal session, Domain domain) {\n+    public String getUniqueDomainConstraintName(SessionLocal session,\n+                                                Domain domain) {\n         return getUniqueName(domain, constraints, \"CONSTRAINT_\");\n     }\n \n@@ -533,11 +546,12 @@ public class Schema extends DbObjectBase {\n      * Create a unique index name.\n      *\n      * @param session the session\n-     * @param table the indexed table\n-     * @param prefix the index name prefix\n+     * @param table   the indexed table\n+     * @param prefix  the index name prefix\n      * @return the unique name\n      */\n-    public String getUniqueIndexName(SessionLocal session, Table table, String prefix) {\n+    public String getUniqueIndexName(SessionLocal session, Table table,\n+                                     String prefix) {\n         Map<String, Index> tableIndexes;\n         if (table.isTemporary() && !table.isGlobalTemporary()) {\n             tableIndexes = session.getLocalTempTableIndexes();\n@@ -552,7 +566,7 @@ public class Schema extends DbObjectBase {\n      * Local temporary tables are also returned.\n      *\n      * @param session the session\n-     * @param name the table or view name\n+     * @param name    the table or view name\n      * @return the table or view\n      * @throws DbException if no such object exists\n      */\n@@ -563,7 +577,8 @@ public class Schema extends DbObjectBase {\n                 table = session.findLocalTempTable(name);\n             }\n             if (table == null) {\n-                throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, name);\n+                throw DbException\n+                        .get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, name);\n             }\n         }\n         return table;\n@@ -647,11 +662,10 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get all objects.\n      *\n-     * @param addTo\n-     *                  list to add objects to, or {@code null} to allocate a new\n-     *                  list\n+     * @param addTo list to add objects to, or {@code null} to allocate a new\n+     *              list\n      * @return the specified list with added objects, or a new (possibly empty) list\n-     *         with all objects\n+     * with all objects\n      */\n     public ArrayList<SchemaObject> getAll(ArrayList<SchemaObject> addTo) {\n         if (addTo == null) {\n@@ -673,10 +687,8 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get all objects of the given type.\n      *\n-     * @param type\n-     *                  the object type\n-     * @param addTo\n-     *                  list to add objects to\n+     * @param type  the object type\n+     * @param addTo list to add objects to\n      */\n     public void getAll(int type, ArrayList<SchemaObject> addTo) {\n         addTo.addAll(getMap(type).values());\n@@ -732,7 +744,7 @@ public class Schema extends DbObjectBase {\n      * Get the table with the given name, if any.\n      *\n      * @param session the session\n-     * @param name the table name\n+     * @param name    the table name\n      * @return the table or null if not found\n      */\n     public Table getTableOrViewByName(SessionLocal session, String name) {\n@@ -802,21 +814,23 @@ public class Schema extends DbObjectBase {\n     /**\n      * Add a linked table to the schema.\n      *\n-     * @param id the object id\n-     * @param tableName the table name of the alias\n-     * @param driver the driver class name\n-     * @param url the database URL\n-     * @param user the user name\n-     * @param password the password\n+     * @param id             the object id\n+     * @param tableName      the table name of the alias\n+     * @param driver         the driver class name\n+     * @param url            the database URL\n+     * @param user           the user name\n+     * @param password       the password\n      * @param originalSchema the schema name of the target table\n-     * @param originalTable the table name of the target table\n-     * @param emitUpdates if updates should be emitted instead of delete/insert\n-     * @param force create the object even if the database can not be accessed\n+     * @param originalTable  the table name of the target table\n+     * @param emitUpdates    if updates should be emitted instead of delete/insert\n+     * @param force          create the object even if the database can not be accessed\n      * @return the {@link TableLink} object\n      */\n     public TableLink createTableLink(int id, String tableName, String driver,\n-            String url, String user, String password, String originalSchema,\n-            String originalTable, boolean emitUpdates, boolean force) {\n+                                     String url, String user, String password,\n+                                     String originalSchema,\n+                                     String originalTable, boolean emitUpdates,\n+                                     boolean force) {\n         synchronized (database) {\n             return new TableLink(this, id, tableName,\n                     driver, url, user, password,\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/18/Schema.java\nindex 5f794af3f59..5aa5ce108cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/18/Schema.java\n@@ -160,8 +160,9 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                        throw DbException.get(ErrorCode.CANNOT_DROP_2,\n+                                //\n+                                 obj.getTraceSQL(), dependentTable.getTraceSQL());\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/18/Schema.java\nindex 5f794af3f59..13393425199 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/18/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/18/Schema.java\n@@ -160,8 +160,9 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getTraceSQL(), dependentTable.getTraceSQL());\n+                        throw DbException.get(ErrorCode.CANNOT_DROP_2,\n+                            //\n+                                 obj.getTraceSQL(), dependentTable.getTraceSQL());\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}