{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1378",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "207",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "217",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1378/CsvInputParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1378/CsvInputParser.java\nindex 0e1fbc85f28..b3a6fd3faf2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1378/CsvInputParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1378/CsvInputParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input.csv;\n \n import java.io.Closeable;\n@@ -42,207 +43,207 @@ import static java.lang.String.format;\n  */\n public class CsvInputParser implements Closeable\n {\n-    private final CharSeeker seeker;\n-    private final Mark mark = new Mark();\n-    private final IdType idType;\n-    private final Header header;\n-    private final int delimiter;\n-    private final Collector badCollector;\n-    private final Extractor<String> stringExtractor;\n+  private final CharSeeker seeker;\n+  private final Mark mark = new Mark();\n+  private final IdType idType;\n+  private final Header header;\n+  private final int delimiter;\n+  private final Collector badCollector;\n+  private final Extractor<String> stringExtractor;\n \n-    private long lineNumber;\n+  private long lineNumber;\n \n-    public CsvInputParser( CharSeeker seeker, int delimiter, IdType idType, Header header,\n-            Collector badCollector, Extractors extractors )\n-    {\n-        this.seeker = seeker;\n-        this.delimiter = delimiter;\n-        this.idType = idType;\n-        this.header = header;\n-        this.badCollector = badCollector;\n-        this.stringExtractor = extractors.string();\n-    }\n+  public CsvInputParser(CharSeeker seeker, int delimiter, IdType idType, Header header,\n+                        Collector badCollector, Extractors extractors)\n+  {\n+    this.seeker = seeker;\n+    this.delimiter = delimiter;\n+    this.idType = idType;\n+    this.header = header;\n+    this.badCollector = badCollector;\n+    this.stringExtractor = extractors.string();\n+  }\n \n-    boolean next( InputEntityVisitor visitor ) throws IOException\n+  boolean next(InputEntityVisitor visitor) throws IOException\n+  {\n+    lineNumber++;\n+    int i = 0;\n+    Entry entry = null;\n+    Entry[] entries = header.entries();\n+    try\n     {\n-        lineNumber++;\n-        int i = 0;\n-        Entry entry = null;\n-        Entry[] entries = header.entries();\n-        try\n+      boolean doContinue = true;\n+      for (i = 0; i < entries.length && doContinue; i++)\n+      {\n+        entry = entries[i];\n+        if (!seeker.seek(mark, delimiter))\n         {\n-            boolean doContinue = true;\n-            for ( i = 0; i < entries.length && doContinue; i++ )\n-            {\n-                entry = entries[i];\n-                if ( !seeker.seek( mark, delimiter ) )\n-                {\n-                    if ( i > 0 )\n-                    {\n-                        throw new UnexpectedEndOfInputException( \"Near \" + mark );\n-                    }\n-                    // We're just at the end\n-                    return false;\n-                }\n+          if (i > 0)\n+          {\n+            throw new UnexpectedEndOfInputException(\"Near \" + mark);\n+          }\n+          // We're just at the end\n+          return false;\n+        }\n \n-                switch ( entry.type() )\n-                {\n-                case ID:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        switch ( idType )\n-                        {\n-                        case STRING:\n-                        case INTEGER:\n-                            Object idValue = entry.extractor().value();\n-                            doContinue = visitor.id( idValue, entry.group() );\n-                            if ( entry.name() != null )\n-                            {\n-                                doContinue = visitor.property( entry.name(), idValue );\n-                            }\n-                            break;\n-                        case ACTUAL:\n-                            doContinue = visitor.id( ((LongExtractor) entry.extractor()).longValue() );\n-                            break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n-                        }\n-                    }\n-                    break;\n-                case START_ID:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        switch ( idType )\n-                        {\n-                        case STRING:\n-                            doContinue = visitor.startId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case INTEGER:\n-                            doContinue = visitor.startId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case ACTUAL:\n-                            doContinue = visitor.startId( ((LongExtractor) entry.extractor()).longValue() );\n-                            break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n-                        }\n-                    }\n-                    break;\n-                case END_ID:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        switch ( idType )\n-                        {\n-                        case STRING:\n-                            doContinue = visitor.endId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case INTEGER:\n-                            doContinue = visitor.endId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case ACTUAL:\n-                            doContinue = visitor.endId( ((LongExtractor) entry.extractor()).longValue() );\n-                            break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n-                        }\n-                    }\n-                    break;\n-                 case TYPE:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        doContinue = visitor.type( (String) entry.extractor().value() );\n-                    }\n-                    break;\n-                case PROPERTY:\n-                    if ( seeker.tryExtract( mark, entry.extractor(), entry.optionalParameter() ) )\n-                    {\n-                        // TODO since PropertyStore#encodeValue takes Object there's no point splitting up\n-                        // into different primitive types\n-                        Object value = entry.extractor().value();\n-                        if ( !isEmptyArray( value ) )\n-                        {\n-                            doContinue = visitor.property( entry.name(), value );\n-                        }\n-                    }\n-                    break;\n-                case LABEL:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        Object labelsValue = entry.extractor().value();\n-                        if ( labelsValue.getClass().isArray() )\n-                        {\n-                            doContinue = visitor.labels( (String[]) labelsValue );\n-                        }\n-                        else\n-                        {\n-                            doContinue = visitor.labels( new String[] {(String) labelsValue} );\n-                        }\n-                    }\n-                    break;\n-                case IGNORE:\n-                    break;\n+        switch (entry.type())\n+        {\n+          case ID:\n+            if (seeker.tryExtract(mark, entry.extractor()))\n+            {\n+              switch (idType)\n+              {\n+                case STRING:\n+                case INTEGER:\n+                  Object idValue = entry.extractor().value();\n+                  doContinue = visitor.id(idValue, entry.group());\n+                  if (entry.name() != null)\n+                  {\n+                    doContinue = visitor.property(entry.name(), idValue);\n+                  }\n+                  break;\n+                case ACTUAL:\n+                  doContinue = visitor.id(((LongExtractor) entry.extractor()).longValue());\n+                  break;\n                 default:\n-                    throw new IllegalArgumentException( entry.type().toString() );\n-                }\n-\n-                if ( mark.isEndOfLine() )\n-                {\n-                    // We're at the end of the line, break and return an entity with what we have.\n-                    break;\n-                }\n+                  throw new IllegalArgumentException(idType.name());\n+              }\n             }\n-\n-            while ( !mark.isEndOfLine() )\n+            break;\n+          case START_ID:\n+            if (seeker.tryExtract(mark, entry.extractor()))\n             {\n-                seeker.seek( mark, delimiter );\n-                if ( doContinue )\n-                {\n-                    seeker.tryExtract( mark, stringExtractor, entry.optionalParameter() );\n-                    badCollector.collectExtraColumns(\n-                            seeker.sourceDescription(), lineNumber, stringExtractor.value() );\n-                }\n+              switch (idType)\n+              {\n+                case STRING:\n+                  doContinue = visitor.startId(entry.extractor().value(), entry.group());\n+                  break;\n+                case INTEGER:\n+                  doContinue = visitor.startId(entry.extractor().value(), entry.group());\n+                  break;\n+                case ACTUAL:\n+                  doContinue = visitor.startId(((LongExtractor) entry.extractor()).longValue());\n+                  break;\n+                default:\n+                  throw new IllegalArgumentException(idType.name());\n+              }\n             }\n-            visitor.endOfEntity();\n-            return true;\n-        }\n-        catch ( final RuntimeException e )\n-        {\n-            String stringValue = null;\n-            try\n+            break;\n+          case END_ID:\n+            if (seeker.tryExtract(mark, entry.extractor()))\n             {\n-                Extractors extractors = new Extractors( '?' );\n-                if ( seeker.tryExtract( mark, extractors.string(), entry.optionalParameter() ) )\n-                {\n-                    stringValue = extractors.string().value();\n-                }\n+              switch (idType)\n+              {\n+                case STRING:\n+                  doContinue = visitor.endId(entry.extractor().value(), entry.group());\n+                  break;\n+                case INTEGER:\n+                  doContinue = visitor.endId(entry.extractor().value(), entry.group());\n+                  break;\n+                case ACTUAL:\n+                  doContinue = visitor.endId(((LongExtractor) entry.extractor()).longValue());\n+                  break;\n+                default:\n+                  throw new IllegalArgumentException(idType.name());\n+              }\n             }\n-            catch ( Exception e1 )\n-            {   // OK\n+            break;\n+          case TYPE:\n+            if (seeker.tryExtract(mark, entry.extractor()))\n+            {\n+              doContinue = visitor.type((String) entry.extractor().value());\n             }\n-\n-            String message = format( \"ERROR in input\" +\n-                    \"%n  data source: %s\" +\n-                    \"%n  in field: %s\" +\n-                    \"%n  for header: %s\" +\n-                    \"%n  raw field value: %s\" +\n-                    \"%n  original error: %s\",\n-                    seeker, entry + \":\" + (i + 1), header,\n-                    stringValue != null ? stringValue : \"??\",\n-                    e.getMessage() );\n-\n-            if ( e instanceof InputException )\n+            break;\n+          case PROPERTY:\n+            if (seeker.tryExtract(mark, entry.extractor(), entry.optionalParameter()))\n             {\n-                throw Exceptions.withMessage( e, message );\n+              // TODO since PropertyStore#encodeValue takes Object there's no point splitting up\n+              // into different primitive types\n+              Object value = entry.extractor().value();\n+              if (!isEmptyArray(value))\n+              {\n+                doContinue = visitor.property(entry.name(), value);\n+              }\n             }\n-            throw new InputException( message, e );\n+            break;\n+          case LABEL:\n+            if (seeker.tryExtract(mark, entry.extractor()))\n+            {\n+              Object labelsValue = entry.extractor().value();\n+              if (labelsValue.getClass().isArray())\n+              {\n+                doContinue = visitor.labels((String[]) labelsValue);\n+              } else\n+              {\n+                doContinue = visitor.labels(new String[] {(String) labelsValue});\n+              }\n+            }\n+            break;\n+          case IGNORE:\n+            break;\n+          default:\n+            throw new IllegalArgumentException(entry.type().toString());\n         }\n-    }\n \n-    private static boolean isEmptyArray( Object value )\n-    {\n-        return value.getClass().isArray() && Array.getLength( value ) == 0;\n-    }\n+        if (mark.isEndOfLine())\n+        {\n+          // We're at the end of the line, break and return an entity with what we have.\n+          break;\n+        }\n+      }\n \n-    @Override\n-    public void close() throws IOException\n+      while (!mark.isEndOfLine())\n+      {\n+        seeker.seek(mark, delimiter);\n+        if (doContinue)\n+        {\n+          seeker.tryExtract(mark, stringExtractor, entry.optionalParameter());\n+          badCollector.collectExtraColumns(\n+              seeker.sourceDescription(), lineNumber, stringExtractor.value());\n+        }\n+      }\n+      visitor.endOfEntity();\n+      return true;\n+    } catch (final RuntimeException e)\n     {\n-        seeker.close();\n+      String stringValue = null;\n+      try\n+      {\n+        Extractors extractors = new Extractors('?');\n+        if (seeker.tryExtract(mark, extractors.string(), entry.optionalParameter()))\n+        {\n+          stringValue = extractors.string().value();\n+        }\n+      } catch (Exception e1)\n+      {   // OK\n+      }\n+\n+      String message = format(\"ERROR in input\" +\n+              \"%n  data source: %s\" +\n+              \"%n  in field: %s\" +\n+              \"%n  for header: %s\" +\n+              \"%n  raw field value: %s\" +\n+              \"%n  original error: %s\",\n+          seeker, entry + \":\" + (i + 1), header,\n+          stringValue != null ? stringValue : \"??\",\n+          e.getMessage());\n+\n+      if (e instanceof InputException)\n+      {\n+        throw Exceptions.withMessage(e, message);\n+      }\n+      throw new InputException(message, e);\n     }\n+  }\n+\n+  private static boolean isEmptyArray(Object value)\n+  {\n+    return value.getClass().isArray() && Array.getLength(value) == 0;\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    seeker.close();\n+  }\n }\n",
            "diff_size": 284
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1378/CsvInputParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1378/CsvInputParser.java\nindex 0e1fbc85f28..1df2b472d46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1378/CsvInputParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1378/CsvInputParser.java\n@@ -104,8 +104,9 @@ public class CsvInputParser implements Closeable\n                         case ACTUAL:\n                             doContinue = visitor.id( ((LongExtractor) entry.extractor()).longValue() );\n                             break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n-                        }\n+                        default:\n+    throw new IllegalArgumentException( idType.name() );\n+    }\n                     }\n                     break;\n                 case START_ID:\n@@ -122,8 +123,9 @@ public class CsvInputParser implements Closeable\n                         case ACTUAL:\n                             doContinue = visitor.startId( ((LongExtractor) entry.extractor()).longValue() );\n                             break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n-                        }\n+                        default:\n+    throw new IllegalArgumentException( idType.name() );\n+    }\n                     }\n                     break;\n                 case END_ID:\n@@ -140,12 +142,13 @@ public class CsvInputParser implements Closeable\n                         case ACTUAL:\n                             doContinue = visitor.endId( ((LongExtractor) entry.extractor()).longValue() );\n                             break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n-                        }\n+                        default:\n+    throw new IllegalArgumentException( idType.name() );\n+    }\n                     }\n                     break;\n-                 case TYPE:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n+    case TYPE:\n+    if ( seeker.tryExtract( mark, entry.extractor() ) )\n                     {\n                         doContinue = visitor.type( (String) entry.extractor().value() );\n                     }\n@@ -172,7 +175,7 @@ public class CsvInputParser implements Closeable\n                         }\n                         else\n                         {\n-                            doContinue = visitor.labels( new String[] {(String) labelsValue} );\n+                            doContinue = visitor.labels( new String[]{(String) labelsValue} );\n                         }\n                     }\n                     break;\n@@ -195,9 +198,8 @@ public class CsvInputParser implements Closeable\n                 if ( doContinue )\n                 {\n                     seeker.tryExtract( mark, stringExtractor, entry.optionalParameter() );\n-                    badCollector.collectExtraColumns(\n-                            seeker.sourceDescription(), lineNumber, stringExtractor.value() );\n-                }\n+                    badCollector.collectExtraColumns( seeker.sourceDescription(), lineNumber, stringExtractor.value() );\n+    }\n             }\n             visitor.endOfEntity();\n             return true;\n@@ -214,20 +216,14 @@ public class CsvInputParser implements Closeable\n                 }\n             }\n             catch ( Exception e1 )\n-            {   // OK\n+            {\n+    // OK\n             }\n \n-            String message = format( \"ERROR in input\" +\n-                    \"%n  data source: %s\" +\n-                    \"%n  in field: %s\" +\n-                    \"%n  for header: %s\" +\n-                    \"%n  raw field value: %s\" +\n-                    \"%n  original error: %s\",\n-                    seeker, entry + \":\" + (i + 1), header,\n+            String message = format( \"ERROR in input\" + \"%n  data source: %s\" + \"%n  in field: %s\" + \"%n  for header: %s\" + \"%n  raw field value: %s\" + \"%n  original error: %s\", seeker, entry + \":\" + (i + 1 ), header,\n                     stringValue != null ? stringValue : \"??\",\n                     e.getMessage() );\n-\n-            if ( e instanceof InputException )\n+if ( e instanceof InputException )\n             {\n                 throw Exceptions.withMessage( e, message );\n             }\n@@ -245,4 +241,4 @@ public class CsvInputParser implements Closeable\n     {\n         seeker.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}