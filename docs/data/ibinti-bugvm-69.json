{
    "project_name": "ibinti-bugvm",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "69",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 83).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * <p>The memory effects for accesses and updates of atomics generally\n * follow the rules for volatiles, as stated in\n * <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4\">\n * The Java Language Specification (17.4 Memory Model)</a>:\n *\n * <ul>",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/69/package-info.java\nindex 568d2c60156..3e7251601fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/69/package-info.java\n@@ -11,7 +11,7 @@\n  * array elements to those that also provide an atomic conditional update\n  * operation of the form:\n  *\n- *  <pre> {@code boolean compareAndSet(expectedValue, updateValue);}</pre>\n+ * <pre> {@code boolean compareAndSet(expectedValue, updateValue);}</pre>\n  *\n  * <p>This method (which varies in argument types across different\n  * classes) atomically sets a variable to the {@code updateValue} if it\n@@ -38,7 +38,7 @@\n  * {@code AtomicInteger} provide atomic increment methods.  One\n  * application is to generate sequence numbers, as in:\n  *\n- *  <pre> {@code\n+ * <pre> {@code\n  * class Sequencer {\n  *   private final AtomicLong sequenceNumber\n  *     = new AtomicLong(0);\n@@ -51,9 +51,9 @@\n  * {@code getAndIncrement}, apply a function to a value atomically.\n  * For example, given some transformation\n  * <pre> {@code long transform(long input)}</pre>\n- *\n+ * <p>\n  * write your utility method as follows:\n- *  <pre> {@code\n+ * <pre> {@code\n  * long getAndTransform(AtomicLong var) {\n  *   while (true) {\n  *     long current = var.get();\n@@ -101,7 +101,7 @@\n  * contains <em>Updater</em> classes that can be used to obtain\n  * {@code compareAndSet} operations on any selected {@code volatile}\n  * field of any selected class.\n- *\n+ * <p>\n  * {@link java.util.concurrent.atomic.AtomicReferenceFieldUpdater},\n  * {@link java.util.concurrent.atomic.AtomicIntegerFieldUpdater}, and\n  * {@link java.util.concurrent.atomic.AtomicLongFieldUpdater} are\n@@ -150,7 +150,7 @@\n  * class associates a single boolean with a reference.  For example, this\n  * bit might be used inside a data structure to mean that the object\n  * being referenced has logically been deleted.\n- *\n+ * <p>\n  * The {@link java.util.concurrent.atomic.AtomicStampedReference}\n  * class associates an integer value with a reference.  This may be\n  * used for example, to represent version numbers corresponding to\n@@ -172,7 +172,7 @@\n  * representing {@code byte}.  In those infrequent cases where you would\n  * like to do so, you can use an {@code AtomicInteger} to hold\n  * {@code byte} values, and cast appropriately.\n- *\n+ * <p>\n  * You can also hold floats using\n  * {@link java.lang.Float#floatToRawIntBits} and\n  * {@link java.lang.Float#intBitsToFloat} conversions, and doubles using\n@@ -181,4 +181,5 @@\n  *\n  * @since 1.5\n  */\n+\n package java.util.concurrent.atomic;\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/69/package-info.java\nindex 568d2c60156..76c46434944 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/69/package-info.java\n@@ -181,4 +181,4 @@\n  *\n  * @since 1.5\n  */\n-package java.util.concurrent.atomic;\n+package java.util.concurrent.atomic;\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/69/package-info.java\nindex 568d2c60156..76c46434944 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/69/package-info.java\n@@ -181,4 +181,4 @@\n  *\n  * @since 1.5\n  */\n-package java.util.concurrent.atomic;\n+package java.util.concurrent.atomic;\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/styler_three_grams/69/package-info.java\nindex 568d2c60156..c6a2eb72267 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/69/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/styler_three_grams/69/package-info.java\n@@ -3,7 +3,6 @@\n  * Expert Group and released to the public domain, as explained at\n  * http://creativecommons.org/publicdomain/zero/1.0/\n  */\n-\n /**\n  * A small toolkit of classes that support lock-free thread-safe\n  * programming on single variables.  In essence, the classes in this\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}