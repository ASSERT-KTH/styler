{
    "project_name": "graphfoundation-ongdb",
    "error_id": "39",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/39/BidirectionalTraversalDescriptionImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/39/BidirectionalTraversalDescriptionImpl.java\nindex b1616948ac0..4abda1ce78f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/39/BidirectionalTraversalDescriptionImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/39/BidirectionalTraversalDescriptionImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.Arrays;\n@@ -41,141 +42,140 @@ import static org.neo4j.kernel.impl.traversal.MonoDirectionalTraversalDescriptio\n \n public class BidirectionalTraversalDescriptionImpl implements BidirectionalTraversalDescription\n {\n-    final MonoDirectionalTraversalDescription start;\n-    final MonoDirectionalTraversalDescription end;\n-    final PathEvaluator collisionEvaluator;\n-    final SideSelectorPolicy sideSelector;\n-    final org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy;\n-    final Supplier<? extends Resource> statementFactory;\n-    final int maxDepth;\n-\n-    private BidirectionalTraversalDescriptionImpl( MonoDirectionalTraversalDescription start,\n-                                                   MonoDirectionalTraversalDescription end,\n-                                                   org.neo4j.graphdb.traversal.BranchCollisionPolicy\n-                                                           collisionPolicy,\n-                                                   PathEvaluator collisionEvaluator, SideSelectorPolicy sideSelector,\n-                                                   Supplier<? extends Resource> statementFactory, int maxDepth )\n-    {\n-        this.start = start;\n-        this.end = end;\n-        this.collisionPolicy = collisionPolicy;\n-        this.collisionEvaluator = collisionEvaluator;\n-        this.sideSelector = sideSelector;\n-        this.statementFactory = statementFactory;\n-        this.maxDepth = maxDepth;\n-    }\n-\n-    public BidirectionalTraversalDescriptionImpl( Supplier<? extends Resource> statementFactory )\n-    {\n-        this( new MonoDirectionalTraversalDescription(), new MonoDirectionalTraversalDescription(),\n-                STANDARD,\n-                Evaluators.all(), ALTERNATING,\n-                statementFactory, Integer.MAX_VALUE );\n-    }\n-\n-    public BidirectionalTraversalDescriptionImpl()\n-    {\n-        this( NO_STATEMENT );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription startSide( TraversalDescription startSideDescription )\n+  final MonoDirectionalTraversalDescription start;\n+  final MonoDirectionalTraversalDescription end;\n+  final PathEvaluator collisionEvaluator;\n+  final SideSelectorPolicy sideSelector;\n+  final org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy;\n+  final Supplier<? extends Resource> statementFactory;\n+  final int maxDepth;\n+\n+  private BidirectionalTraversalDescriptionImpl(MonoDirectionalTraversalDescription start,\n+                                                MonoDirectionalTraversalDescription end,\n+                                                org.neo4j.graphdb.traversal.BranchCollisionPolicy\n+                                                    collisionPolicy,\n+                                                PathEvaluator collisionEvaluator, SideSelectorPolicy sideSelector,\n+                                                Supplier<? extends Resource> statementFactory, int maxDepth)\n+  {\n+    this.start = start;\n+    this.end = end;\n+    this.collisionPolicy = collisionPolicy;\n+    this.collisionEvaluator = collisionEvaluator;\n+    this.sideSelector = sideSelector;\n+    this.statementFactory = statementFactory;\n+    this.maxDepth = maxDepth;\n+  }\n+\n+  public BidirectionalTraversalDescriptionImpl(Supplier<? extends Resource> statementFactory)\n+  {\n+    this(new MonoDirectionalTraversalDescription(), new MonoDirectionalTraversalDescription(),\n+        STANDARD,\n+        Evaluators.all(), ALTERNATING,\n+        statementFactory, Integer.MAX_VALUE);\n+  }\n+\n+  public BidirectionalTraversalDescriptionImpl()\n+  {\n+    this(NO_STATEMENT);\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription startSide(TraversalDescription startSideDescription)\n+  {\n+    assertIsMonoDirectional(startSideDescription);\n+    return new BidirectionalTraversalDescriptionImpl((MonoDirectionalTraversalDescription) startSideDescription,\n+        this.end, this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory,\n+        this.maxDepth);\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription endSide(TraversalDescription endSideDescription)\n+  {\n+    assertIsMonoDirectional(endSideDescription);\n+    return new BidirectionalTraversalDescriptionImpl(this.start,\n+        (MonoDirectionalTraversalDescription) endSideDescription,\n+        this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth);\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription mirroredSides(TraversalDescription sideDescription)\n+  {\n+    assertIsMonoDirectional(sideDescription);\n+    return new BidirectionalTraversalDescriptionImpl(\n+        (MonoDirectionalTraversalDescription) sideDescription,\n+        (MonoDirectionalTraversalDescription) sideDescription.reverse(),\n+        collisionPolicy, collisionEvaluator, sideSelector, statementFactory, maxDepth);\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription collisionPolicy(BranchCollisionPolicy collisionPolicy)\n+  {\n+    return new BidirectionalTraversalDescriptionImpl(this.start, this.end, collisionPolicy,\n+        this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth);\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription collisionEvaluator(PathEvaluator collisionEvaluator)\n+  {\n+    nullCheck(collisionEvaluator, Evaluator.class, \"RETURN_ALL\");\n+    return new BidirectionalTraversalDescriptionImpl(this.start, this.end, this.collisionPolicy,\n+        addEvaluator(this.collisionEvaluator, collisionEvaluator), this.sideSelector, statementFactory, maxDepth);\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription collisionEvaluator(Evaluator collisionEvaluator)\n+  {\n+    return collisionEvaluator(new Evaluator.AsPathEvaluator(collisionEvaluator));\n+  }\n+\n+  @Override\n+  public BidirectionalTraversalDescription sideSelector(SideSelectorPolicy sideSelector, int maxDepth)\n+  {\n+    return new BidirectionalTraversalDescriptionImpl(this.start, this.end, this.collisionPolicy,\n+        this.collisionEvaluator, sideSelector, statementFactory, maxDepth);\n+  }\n+\n+  @Override\n+  public Traverser traverse(Node start, Node end)\n+  {\n+    return traverse(Arrays.asList(start), Arrays.asList(end));\n+  }\n+\n+  @Override\n+  public Traverser traverse(final Iterable<Node> startNodes, final Iterable<Node> endNodes)\n+  {\n+    return new DefaultTraverser(() ->\n     {\n-        assertIsMonoDirectional( startSideDescription );\n-        return new BidirectionalTraversalDescriptionImpl( (MonoDirectionalTraversalDescription)startSideDescription,\n-                this.end, this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory,\n-                this.maxDepth );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription endSide( TraversalDescription endSideDescription )\n-    {\n-        assertIsMonoDirectional( endSideDescription );\n-        return new BidirectionalTraversalDescriptionImpl( this.start,\n-                (MonoDirectionalTraversalDescription)endSideDescription,\n-                this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription mirroredSides( TraversalDescription sideDescription )\n-    {\n-        assertIsMonoDirectional( sideDescription );\n-        return new BidirectionalTraversalDescriptionImpl(\n-                (MonoDirectionalTraversalDescription)sideDescription,\n-                (MonoDirectionalTraversalDescription)sideDescription.reverse(),\n-                collisionPolicy, collisionEvaluator, sideSelector, statementFactory, maxDepth );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription collisionPolicy( BranchCollisionPolicy collisionPolicy )\n-    {\n-        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, collisionPolicy,\n-                this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription collisionEvaluator( PathEvaluator collisionEvaluator )\n-    {\n-        nullCheck( collisionEvaluator, Evaluator.class, \"RETURN_ALL\" );\n-        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, this.collisionPolicy,\n-                addEvaluator( this.collisionEvaluator, collisionEvaluator ), this.sideSelector, statementFactory, maxDepth );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription collisionEvaluator( Evaluator collisionEvaluator )\n-    {\n-        return collisionEvaluator( new Evaluator.AsPathEvaluator( collisionEvaluator ) );\n-    }\n-\n-    @Override\n-    public BidirectionalTraversalDescription sideSelector( SideSelectorPolicy sideSelector, int maxDepth )\n-    {\n-        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, this.collisionPolicy,\n-                this.collisionEvaluator, sideSelector, statementFactory, maxDepth );\n-    }\n-\n-    @Override\n-    public Traverser traverse( Node start, Node end )\n-    {\n-        return traverse( Arrays.asList( start ), Arrays.asList( end ) );\n-    }\n-\n-    @Override\n-    public Traverser traverse( final Iterable<Node> startNodes, final Iterable<Node> endNodes )\n-    {\n-        return new DefaultTraverser( () ->\n+      Resource resource = statementFactory.get();\n+      boolean success = false;\n+      try\n+      {\n+        BidirectionalTraverserIterator iterator =\n+            new BidirectionalTraverserIterator(resource, start, end, sideSelector, collisionPolicy,\n+                collisionEvaluator, maxDepth, startNodes, endNodes);\n+        success = true;\n+        return iterator;\n+      } finally\n+      {\n+        if (!success)\n         {\n-            Resource resource = statementFactory.get();\n-            boolean success = false;\n-            try\n-            {\n-                BidirectionalTraverserIterator iterator =\n-                        new BidirectionalTraverserIterator( resource, start, end, sideSelector, collisionPolicy,\n-                                collisionEvaluator, maxDepth, startNodes, endNodes );\n-                success = true;\n-                return iterator;\n-            }\n-            finally\n-            {\n-                if ( !success )\n-                {\n-                    resource.close();\n-                }\n-            }\n-        } );\n-    }\n-\n-    /**\n-     * We currently only support mono-directional traversers as \"inner\" traversers, so we need to check specifically\n-     * for this when the user specifies traversers to work with.\n-     */\n-    private void assertIsMonoDirectional( TraversalDescription traversal )\n-    {\n-        if ( !(traversal instanceof MonoDirectionalTraversalDescription) )\n-        {\n-            throw new IllegalArgumentException( \"The bi-directional traversals currently do not support using \" +\n-                    \"anything but mono-directional traversers as start and stop points. Please provide a regular \" +\n-                    \"mono-directional traverser instead.\" );\n+          resource.close();\n         }\n+      }\n+    });\n+  }\n+\n+  /**\n+   * We currently only support mono-directional traversers as \"inner\" traversers, so we need to check specifically\n+   * for this when the user specifies traversers to work with.\n+   */\n+  private void assertIsMonoDirectional(TraversalDescription traversal)\n+  {\n+    if (!(traversal instanceof MonoDirectionalTraversalDescription))\n+    {\n+      throw new IllegalArgumentException(\"The bi-directional traversals currently do not support using \" +\n+          \"anything but mono-directional traversers as start and stop points. Please provide a regular \" +\n+          \"mono-directional traverser instead.\");\n     }\n+  }\n }\n",
            "diff_size": 214
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 246).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 251).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/39/BidirectionalTraversalDescriptionImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/39/BidirectionalTraversalDescriptionImpl.java\nindex b1616948ac0..db7974c4a26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/39/BidirectionalTraversalDescriptionImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/39/BidirectionalTraversalDescriptionImpl.java\n@@ -49,13 +49,9 @@ public class BidirectionalTraversalDescriptionImpl implements BidirectionalTrave\n     final Supplier<? extends Resource> statementFactory;\n     final int maxDepth;\n \n-    private BidirectionalTraversalDescriptionImpl( MonoDirectionalTraversalDescription start,\n-                                                   MonoDirectionalTraversalDescription end,\n-                                                   org.neo4j.graphdb.traversal.BranchCollisionPolicy\n-                                                           collisionPolicy,\n-                                                   PathEvaluator collisionEvaluator, SideSelectorPolicy sideSelector,\n-                                                   Supplier<? extends Resource> statementFactory, int maxDepth )\n-    {\n+    private BidirectionalTraversalDescriptionImpl( MonoDirectionalTraversalDescription start, MonoDirectionalTraversalDescription end,\n+                                                   org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy, PathEvaluator collisionEvaluator, SideSelectorPolicy sideSelector, Supplier<? extends Resource> statementFactory, int maxDepth )\n+{\n         this.start = start;\n         this.end = end;\n         this.collisionPolicy = collisionPolicy;\n@@ -67,10 +63,8 @@ public class BidirectionalTraversalDescriptionImpl implements BidirectionalTrave\n \n     public BidirectionalTraversalDescriptionImpl( Supplier<? extends Resource> statementFactory )\n     {\n-        this( new MonoDirectionalTraversalDescription(), new MonoDirectionalTraversalDescription(),\n-                STANDARD,\n-                Evaluators.all(), ALTERNATING,\n-                statementFactory, Integer.MAX_VALUE );\n+        this( new MonoDirectionalTraversalDescription(), new MonoDirectionalTraversalDescription(), STANDARD,\n+                Evaluators.all(), ALTERNATING, statementFactory, Integer.MAX_VALUE );\n     }\n \n     public BidirectionalTraversalDescriptionImpl()\n@@ -82,35 +76,27 @@ public class BidirectionalTraversalDescriptionImpl implements BidirectionalTrave\n     public BidirectionalTraversalDescription startSide( TraversalDescription startSideDescription )\n     {\n         assertIsMonoDirectional( startSideDescription );\n-        return new BidirectionalTraversalDescriptionImpl( (MonoDirectionalTraversalDescription)startSideDescription,\n-                this.end, this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory,\n-                this.maxDepth );\n+        return new BidirectionalTraversalDescriptionImpl( (MonoDirectionalTraversalDescription) startSideDescription, this.end, this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n     }\n \n     @Override\n     public BidirectionalTraversalDescription endSide( TraversalDescription endSideDescription )\n     {\n         assertIsMonoDirectional( endSideDescription );\n-        return new BidirectionalTraversalDescriptionImpl( this.start,\n-                (MonoDirectionalTraversalDescription)endSideDescription,\n-                this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n+        return new BidirectionalTraversalDescriptionImpl( this.start, (MonoDirectionalTraversalDescription) endSideDescription, this.collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n     }\n \n     @Override\n     public BidirectionalTraversalDescription mirroredSides( TraversalDescription sideDescription )\n     {\n         assertIsMonoDirectional( sideDescription );\n-        return new BidirectionalTraversalDescriptionImpl(\n-                (MonoDirectionalTraversalDescription)sideDescription,\n-                (MonoDirectionalTraversalDescription)sideDescription.reverse(),\n-                collisionPolicy, collisionEvaluator, sideSelector, statementFactory, maxDepth );\n+        return new BidirectionalTraversalDescriptionImpl((MonoDirectionalTraversalDescription) sideDescription, (MonoDirectionalTraversalDescription) sideDescription.reverse(), collisionPolicy, collisionEvaluator, sideSelector, statementFactory, maxDepth );\n     }\n \n     @Override\n     public BidirectionalTraversalDescription collisionPolicy( BranchCollisionPolicy collisionPolicy )\n     {\n-        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, collisionPolicy,\n-                this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n+        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, collisionPolicy, this.collisionEvaluator, this.sideSelector, statementFactory, this.maxDepth );\n     }\n \n     @Override\n@@ -130,8 +116,7 @@ public class BidirectionalTraversalDescriptionImpl implements BidirectionalTrave\n     @Override\n     public BidirectionalTraversalDescription sideSelector( SideSelectorPolicy sideSelector, int maxDepth )\n     {\n-        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, this.collisionPolicy,\n-                this.collisionEvaluator, sideSelector, statementFactory, maxDepth );\n+        return new BidirectionalTraversalDescriptionImpl( this.start, this.end, this.collisionPolicy, this.collisionEvaluator, sideSelector, statementFactory, maxDepth );\n     }\n \n     @Override\n@@ -149,10 +134,9 @@ public class BidirectionalTraversalDescriptionImpl implements BidirectionalTrave\n             boolean success = false;\n             try\n             {\n-                BidirectionalTraverserIterator iterator =\n-                        new BidirectionalTraverserIterator( resource, start, end, sideSelector, collisionPolicy,\n+                BidirectionalTraverserIterator iterator = new BidirectionalTraverserIterator( resource, start, end, sideSelector, collisionPolicy,\n                                 collisionEvaluator, maxDepth, startNodes, endNodes );\n-                success = true;\n+success = true;\n                 return iterator;\n             }\n             finally\n@@ -171,11 +155,9 @@ public class BidirectionalTraversalDescriptionImpl implements BidirectionalTrave\n      */\n     private void assertIsMonoDirectional( TraversalDescription traversal )\n     {\n-        if ( !(traversal instanceof MonoDirectionalTraversalDescription) )\n+        if ( !( traversal instanceof MonoDirectionalTraversalDescription) )\n         {\n-            throw new IllegalArgumentException( \"The bi-directional traversals currently do not support using \" +\n-                    \"anything but mono-directional traversers as start and stop points. Please provide a regular \" +\n-                    \"mono-directional traverser instead.\" );\n-        }\n+            throw new IllegalArgumentException( \"The bi-directional traversals currently do not support using \" + \"anything but mono-directional traversers as start and stop points. Please provide a regular \" + \"mono-directional traverser instead.\" );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}