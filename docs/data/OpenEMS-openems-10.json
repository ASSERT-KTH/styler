{
    "project_name": "OpenEMS-openems",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "275",
                "column": "1",
                "severity": "warning",
                "message": "Comment has incorrect indentation level 0, expected is 1, indentation should be the same level as line 277.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
            }
        ]
    },
    "source_code": "//\t\t}\n//\n//\t}\n\n\tprivate boolean isSystemRunning() {\n\t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/10/BmwBatteryImpl.java\nindex d95afd5a89c..b71fc7af454 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/10/BmwBatteryImpl.java\n@@ -274,7 +274,7 @@ public class BmwBatteryImpl extends AbstractOpenemsModbusComponent\n //\n //\t}\n \n-\tprivate boolean isSystemRunning() {\n+private boolean isSystemRunning() {\n \t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n \t\tBmsState bmsState = bmsStateChannel.value().asEnum();\n \t\treturn bmsState == BmsState.OPERATION;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "275",
                    "column": "1",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 277.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/10/BmwBatteryImpl.java\nindex d95afd5a89c..fb24cbb1a5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/10/BmwBatteryImpl.java\n@@ -49,206 +49,206 @@ import io.openems.edge.common.taskmanager.Priority;\n \n @Designate(ocd = Config.class, factory = true)\n @Component(//\n-\t\tname = \"Bmw.Battery\", //\n-\t\timmediate = true, //\n-\t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n-\t\tproperty = EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_AFTER_PROCESS_IMAGE //\n+    name = \"Bmw.Battery\", //\n+    immediate = true, //\n+    configurationPolicy = ConfigurationPolicy.REQUIRE, //\n+    property = EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_AFTER_PROCESS_IMAGE //\n )\n public class BmwBatteryImpl extends AbstractOpenemsModbusComponent\n-\t\timplements BmwBattery, Battery, OpenemsComponent, EventHandler, ModbusSlave, StartStoppable {\n-\n-\tprivate final Logger log = LoggerFactory.getLogger(BmwBatteryImpl.class);\n-\n-\t@Reference\n-\tprotected ConfigurationAdmin cm;\n-\n-\t@Reference\n-\tprivate ComponentManager manager;\n-\n-\t@Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n-\tprotected void setModbus(BridgeModbus modbus) {\n-\t\tsuper.setModbus(modbus);\n-\t}\n-\n-\tprivate static final Integer OPEN_CONTACTORS = 0;\n-\tprivate static final Integer CLOSE_CONTACTORS = 4;\n-\n-\tprivate State state = State.UNDEFINED;\n-\n-\tprivate Config config;\n-\n-\tprivate LocalDateTime errorDelayIsOver = null;\n-\tprivate int unsuccessfulStarts = 0;\n-\tprivate LocalDateTime startAttemptTime = null;\n-\tprivate LocalDateTime pendingTimestamp;\n-\n-\tpublic BmwBatteryImpl() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tBattery.ChannelId.values(), //\n-\t\t\t\tStartStoppable.ChannelId.values(), //\n-\t\t\t\tBMWChannelId.values() //\n-\t\t);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) throws OpenemsNamedException {\n-\t\tthis.config = config;\n-\t\tif (super.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm,\n-\t\t\t\t\"Modbus\", config.modbus_id())) {\n-\t\t\treturn;\n-\t\t}\n-\t}\n-\n-\tprivate void handleStateMachine() {\n-\t\tboolean readyForWorking = false;\n-\t\tswitch (this.getStateMachineState()) {\n-\t\tcase ERROR:\n-\t\t\tthis.clearError();\n-\t\t\t// TODO Reset BMS? anything else?\n-\t\t\tthis.errorDelayIsOver = LocalDateTime.now().plusSeconds(this.config.errorDelay());\n-\t\t\tthis.setStateMachineState(State.ERRORDELAY);\n-\t\t\tbreak;\n-\t\tcase ERRORDELAY:\n-\t\t\tif (LocalDateTime.now().isAfter(this.errorDelayIsOver)) {\n-\t\t\t\tthis.errorDelayIsOver = null;\n-\t\t\t\tif (this.isError()) {\n-\t\t\t\t\tthis.setStateMachineState(State.ERROR);\n-\t\t\t\t} else {\n-\t\t\t\t\tthis.setStateMachineState(State.OFF);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase INIT:\n-\t\t\tif (this.isSystemRunning()) {\n-\t\t\t\tthis.setStateMachineState(State.RUNNING);\n-\t\t\t\tthis.unsuccessfulStarts = 0;\n-\t\t\t\tthis.startAttemptTime = null;\n-\t\t\t} else {\n-\t\t\t\tif (this.startAttemptTime.plusSeconds(this.config.maxStartTime()).isBefore(LocalDateTime.now())) {\n-\t\t\t\t\tthis.startAttemptTime = null;\n-\t\t\t\t\tthis.unsuccessfulStarts++;\n-\t\t\t\t\tthis.stopSystem();\n-\t\t\t\t\tthis.setStateMachineState(State.STOPPING);\n-\t\t\t\t\tif (this.unsuccessfulStarts >= this.config.maxStartAttempts()) {\n-\t\t\t\t\t\tthis.errorDelayIsOver = LocalDateTime.now().plusSeconds(this.config.startUnsuccessfulDelay());\n-\t\t\t\t\t\tthis.setStateMachineState(State.ERRORDELAY);\n-\t\t\t\t\t\tthis.unsuccessfulStarts = 0;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase OFF:\n-\t\t\tthis.logDebug(this.log, \"in case 'OFF'; try to start the system\");\n-\t\t\tthis.startSystem();\n-\t\t\tthis.logDebug(this.log, \"set state to 'INIT'\");\n-\t\t\tthis.setStateMachineState(State.INIT);\n-\t\t\tthis.startAttemptTime = LocalDateTime.now();\n-\t\t\tbreak;\n-\t\tcase RUNNING:\n-\t\t\tif (this.isError()) {\n-\t\t\t\tthis.setStateMachineState(State.ERROR);\n-\t\t\t} else if (!this.isSystemRunning()) {\n-\t\t\t\tthis.setStateMachineState(State.UNDEFINED);\n-\t\t\t} else {\n-\t\t\t\tthis.setStateMachineState(State.RUNNING);\n-\t\t\t\treadyForWorking = true;\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase STOPPING:\n-\t\t\tif (this.isError()) {\n-\t\t\t\tthis.setStateMachineState(State.ERROR);\n-\t\t\t} else {\n-\t\t\t\tif (this.isSystemStopped()) {\n-\t\t\t\t\tthis.setStateMachineState(State.OFF);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase UNDEFINED:\n-\t\t\tif (this.isError()) {\n-\t\t\t\tthis.setStateMachineState(State.ERROR);\n-\t\t\t} else if (this.isSystemStopped()) {\n-\t\t\t\tthis.setStateMachineState(State.OFF);\n-\t\t\t} else if (this.isSystemRunning()) {\n-\t\t\t\tthis.setStateMachineState(State.RUNNING);\n-\t\t\t} else if (this.isSystemStatePending()) {\n-\t\t\t\tthis.setStateMachineState(State.PENDING);\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase PENDING:\n-\t\t\tif (this.pendingTimestamp == null) {\n-\t\t\t\tthis.pendingTimestamp = LocalDateTime.now();\n-\t\t\t}\n-\t\t\tif (this.pendingTimestamp.plusSeconds(this.config.pendingTolerance()).isBefore(LocalDateTime.now())) {\n-\t\t\t\t// System state could not be determined, stop and start it\n-\t\t\t\tthis.pendingTimestamp = null;\n-\t\t\t\tthis.stopSystem();\n-\t\t\t\tthis.setStateMachineState(State.OFF);\n-\t\t\t} else {\n-\t\t\t\tif (this.isError()) {\n-\t\t\t\t\tthis.setStateMachineState(State.ERROR);\n-\t\t\t\t\tthis.pendingTimestamp = null;\n-\t\t\t\t} else if (this.isSystemStopped()) {\n-\t\t\t\t\tthis.setStateMachineState(State.OFF);\n-\t\t\t\t\tthis.pendingTimestamp = null;\n-\t\t\t\t} else if (this.isSystemRunning()) {\n-\t\t\t\t\tthis.setStateMachineState(State.RUNNING);\n-\t\t\t\t\tthis.pendingTimestamp = null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase STANDBY:\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\t// this.getReadyForWorking().setNextValue(readyForWorking);\n-\t\tif (readyForWorking) {\n-\t\t\tthis._setStartStop(StartStop.START);\n-\t\t} else {\n-\t\t\tthis._setStartStop(StartStop.STOP);\n-\t\t}\n-\t}\n-\n-\tprivate void clearError() {\n-\t\tBooleanWriteChannel clearErrorChannel = this.channel(BMWChannelId.BMS_STATE_COMMAND_CLEAR_ERROR);\n-\t\ttry {\n-\t\t\tclearErrorChannel.setNextWriteValue(true);\n-\t\t} catch (OpenemsNamedException e) {\n-\t\t\t// TODO should Fault state channel, but after start stop feature\n-\t\t\tthis.logError(this.log, \"Error while trying to reset the system!\");\n-\t\t}\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\t@Override\n-\tpublic void handleEvent(Event event) {\n-\t\tif (!this.isEnabled()) {\n-\t\t\treturn;\n-\t\t}\n-\t\tswitch (event.getTopic()) {\n-\t\tcase EdgeEventConstants.TOPIC_CYCLE_AFTER_PROCESS_IMAGE:\n-\t\t\tthis.handleBatteryState();\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\tprivate void handleBatteryState() {\n-\t\tswitch (this.config.batteryState()) {\n-\t\tcase DEFAULT:\n-\t\t\tthis.handleStateMachine();\n-\t\t\tbreak;\n-\t\tcase OFF:\n-\t\t\tthis.stopSystem();\n-\t\t\tbreak;\n-\t\tcase ON:\n-\t\t\tthis.startSystem();\n-\t\t\tbreak;\n-\t\t}\n-\t}\n+    implements BmwBattery, Battery, OpenemsComponent, EventHandler, ModbusSlave, StartStoppable {\n+\n+  private final Logger log = LoggerFactory.getLogger(BmwBatteryImpl.class);\n+\n+  @Reference\n+  protected ConfigurationAdmin cm;\n+\n+  @Reference\n+  private ComponentManager manager;\n+\n+  @Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n+  protected void setModbus(BridgeModbus modbus) {\n+    super.setModbus(modbus);\n+  }\n+\n+  private static final Integer OPEN_CONTACTORS = 0;\n+  private static final Integer CLOSE_CONTACTORS = 4;\n+\n+  private State state = State.UNDEFINED;\n+\n+  private Config config;\n+\n+  private LocalDateTime errorDelayIsOver = null;\n+  private int unsuccessfulStarts = 0;\n+  private LocalDateTime startAttemptTime = null;\n+  private LocalDateTime pendingTimestamp;\n+\n+  public BmwBatteryImpl() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        Battery.ChannelId.values(), //\n+        StartStoppable.ChannelId.values(), //\n+        BMWChannelId.values() //\n+    );\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) throws OpenemsNamedException {\n+    this.config = config;\n+    if (super.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm,\n+        \"Modbus\", config.modbus_id())) {\n+      return;\n+    }\n+  }\n+\n+  private void handleStateMachine() {\n+    boolean readyForWorking = false;\n+    switch (this.getStateMachineState()) {\n+      case ERROR:\n+        this.clearError();\n+        // TODO Reset BMS? anything else?\n+        this.errorDelayIsOver = LocalDateTime.now().plusSeconds(this.config.errorDelay());\n+        this.setStateMachineState(State.ERRORDELAY);\n+        break;\n+      case ERRORDELAY:\n+        if (LocalDateTime.now().isAfter(this.errorDelayIsOver)) {\n+          this.errorDelayIsOver = null;\n+          if (this.isError()) {\n+            this.setStateMachineState(State.ERROR);\n+          } else {\n+            this.setStateMachineState(State.OFF);\n+          }\n+        }\n+        break;\n+      case INIT:\n+        if (this.isSystemRunning()) {\n+          this.setStateMachineState(State.RUNNING);\n+          this.unsuccessfulStarts = 0;\n+          this.startAttemptTime = null;\n+        } else {\n+          if (this.startAttemptTime.plusSeconds(this.config.maxStartTime()).isBefore(LocalDateTime.now())) {\n+            this.startAttemptTime = null;\n+            this.unsuccessfulStarts++;\n+            this.stopSystem();\n+            this.setStateMachineState(State.STOPPING);\n+            if (this.unsuccessfulStarts >= this.config.maxStartAttempts()) {\n+              this.errorDelayIsOver = LocalDateTime.now().plusSeconds(this.config.startUnsuccessfulDelay());\n+              this.setStateMachineState(State.ERRORDELAY);\n+              this.unsuccessfulStarts = 0;\n+            }\n+          }\n+        }\n+        break;\n+      case OFF:\n+        this.logDebug(this.log, \"in case 'OFF'; try to start the system\");\n+        this.startSystem();\n+        this.logDebug(this.log, \"set state to 'INIT'\");\n+        this.setStateMachineState(State.INIT);\n+        this.startAttemptTime = LocalDateTime.now();\n+        break;\n+      case RUNNING:\n+        if (this.isError()) {\n+          this.setStateMachineState(State.ERROR);\n+        } else if (!this.isSystemRunning()) {\n+          this.setStateMachineState(State.UNDEFINED);\n+        } else {\n+          this.setStateMachineState(State.RUNNING);\n+          readyForWorking = true;\n+        }\n+        break;\n+      case STOPPING:\n+        if (this.isError()) {\n+          this.setStateMachineState(State.ERROR);\n+        } else {\n+          if (this.isSystemStopped()) {\n+            this.setStateMachineState(State.OFF);\n+          }\n+        }\n+        break;\n+      case UNDEFINED:\n+        if (this.isError()) {\n+          this.setStateMachineState(State.ERROR);\n+        } else if (this.isSystemStopped()) {\n+          this.setStateMachineState(State.OFF);\n+        } else if (this.isSystemRunning()) {\n+          this.setStateMachineState(State.RUNNING);\n+        } else if (this.isSystemStatePending()) {\n+          this.setStateMachineState(State.PENDING);\n+        }\n+        break;\n+      case PENDING:\n+        if (this.pendingTimestamp == null) {\n+          this.pendingTimestamp = LocalDateTime.now();\n+        }\n+        if (this.pendingTimestamp.plusSeconds(this.config.pendingTolerance()).isBefore(LocalDateTime.now())) {\n+          // System state could not be determined, stop and start it\n+          this.pendingTimestamp = null;\n+          this.stopSystem();\n+          this.setStateMachineState(State.OFF);\n+        } else {\n+          if (this.isError()) {\n+            this.setStateMachineState(State.ERROR);\n+            this.pendingTimestamp = null;\n+          } else if (this.isSystemStopped()) {\n+            this.setStateMachineState(State.OFF);\n+            this.pendingTimestamp = null;\n+          } else if (this.isSystemRunning()) {\n+            this.setStateMachineState(State.RUNNING);\n+            this.pendingTimestamp = null;\n+          }\n+        }\n+        break;\n+      case STANDBY:\n+        break;\n+    }\n+\n+    // this.getReadyForWorking().setNextValue(readyForWorking);\n+    if (readyForWorking) {\n+      this._setStartStop(StartStop.START);\n+    } else {\n+      this._setStartStop(StartStop.STOP);\n+    }\n+  }\n+\n+  private void clearError() {\n+    BooleanWriteChannel clearErrorChannel = this.channel(BMWChannelId.BMS_STATE_COMMAND_CLEAR_ERROR);\n+    try {\n+      clearErrorChannel.setNextWriteValue(true);\n+    } catch (OpenemsNamedException e) {\n+      // TODO should Fault state channel, but after start stop feature\n+      this.logError(this.log, \"Error while trying to reset the system!\");\n+    }\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  @Override\n+  public void handleEvent(Event event) {\n+    if (!this.isEnabled()) {\n+      return;\n+    }\n+    switch (event.getTopic()) {\n+      case EdgeEventConstants.TOPIC_CYCLE_AFTER_PROCESS_IMAGE:\n+        this.handleBatteryState();\n+        break;\n+    }\n+  }\n+\n+  private void handleBatteryState() {\n+    switch (this.config.batteryState()) {\n+      case DEFAULT:\n+        this.handleStateMachine();\n+        break;\n+      case OFF:\n+        this.stopSystem();\n+        break;\n+      case ON:\n+        this.startSystem();\n+        break;\n+    }\n+  }\n \n //  TODO Check this needed or not\n //\tpublic void shutDownBattery() {\n@@ -274,199 +274,199 @@ public class BmwBatteryImpl extends AbstractOpenemsModbusComponent\n //\n //\t}\n \n-\tprivate boolean isSystemRunning() {\n-\t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n-\t\tBmsState bmsState = bmsStateChannel.value().asEnum();\n-\t\treturn bmsState == BmsState.OPERATION;\n-\t}\n-\n-\tprivate boolean isSystemStopped() {\n-\t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n-\t\tBmsState bmsState = bmsStateChannel.value().asEnum();\n-\t\treturn bmsState == BmsState.OFF;\n-\t}\n-\n-\t/**\n-\t * Checks whether system has an undefined state.\n-\t * \n-\t * @return true if system is neither running nor stopped\n-\t */\n-\tprivate boolean isSystemStatePending() {\n-\t\treturn !this.isSystemRunning() && !this.isSystemStopped();\n-\t}\n-\n-\tprivate boolean isError() {\n-\t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n-\t\tBmsState bmsState = bmsStateChannel.value().asEnum();\n-\t\treturn bmsState == BmsState.ERROR;\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\treturn \"SoC:\" + this.getSoc() //\n-\t\t\t\t+ \"|Discharge:\" + this.getDischargeMinVoltage() + \";\" + this.getDischargeMaxCurrent() //\n-\t\t\t\t+ \"|Charge:\" + this.getChargeMaxVoltage() + \";\" + this.getChargeMaxCurrent() //\n-\t\t\t\t+ \"|State:\" + this.state.asCamelCase();\n-\t}\n-\n-\tprivate void startSystem() {\n-\t\t// TODO Currently not necessary, Battery starts itself?!\n-\t\tthis.log.debug(\"Start system\");\n-\t\tIntegerWriteChannel commandChannel = this.channel(BMWChannelId.BMS_STATE_COMMAND);\n-\t\ttry {\n-\t\t\tcommandChannel.setNextWriteValue(CLOSE_CONTACTORS);\n-\t\t} catch (OpenemsNamedException e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\tthis.logError(this.log, \"Problem occurred during send start command\");\n-\t\t}\n-\t}\n-\n-\tprivate void stopSystem() {\n-\t\t// TODO Currently not necessary, Battery starts itself?!\n-\t\tthis.log.debug(\"Stop system\");\n-\t\tIntegerWriteChannel commandChannel = this.channel(BMWChannelId.BMS_STATE_COMMAND);\n-\t\ttry {\n-\t\t\tcommandChannel.setNextWriteValue(OPEN_CONTACTORS);\n-\t\t} catch (OpenemsNamedException e) {\n-\t\t\tthis.logError(this.log, \"Problem occurred during send stopping command\");\n-\t\t}\n-\t}\n-\n-\tprivate State getStateMachineState() {\n-\t\treturn this.state;\n-\t}\n-\n-\tprivate void setStateMachineState(State state) {\n-\t\tthis.state = state;\n-\t\tthis.channel(BMWChannelId.STATE_MACHINE).setNextValue(this.state);\n-\t}\n-\n-\t@Override\n-\tprotected ModbusProtocol defineModbusProtocol() throws OpenemsException {\n-\n-\t\treturn new ModbusProtocol(this, //\n-\n-\t\t\t\tnew FC16WriteRegistersTask(1399, m(BMWChannelId.HEART_BEAT, new UnsignedWordElement(1399)), //\n-\t\t\t\t\t\tm(BMWChannelId.BMS_STATE_COMMAND, new UnsignedWordElement(1400)), //\n-\t\t\t\t\t\tm(BMWChannelId.OPERATING_STATE_INVERTER, new UnsignedWordElement(1401)), //\n-\t\t\t\t\t\tm(BMWChannelId.DC_LINK_VOLTAGE, new UnsignedWordElement(1402),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(BMWChannelId.DC_LINK_CURRENT, new UnsignedWordElement(1403)), //\n-\t\t\t\t\t\tm(BMWChannelId.OPERATION_MODE_REQUEST_GRANTED, new UnsignedWordElement(1404)), //\n-\t\t\t\t\t\tm(BMWChannelId.OPERATION_MODE_REQUEST_CANCELED, new UnsignedWordElement(1405)), //\n-\t\t\t\t\t\tm(new BitsWordElement(1406, this) //\n-\t\t\t\t\t\t\t\t.bit(1, BMWChannelId.CONNECTION_STRATEGY_HIGH_SOC_FIRST) //\n-\t\t\t\t\t\t\t\t.bit(0, BMWChannelId.CONNECTION_STRATEGY_LOW_SOC_FIRST) //\n-\t\t\t\t\t\t), //\n-\t\t\t\t\t\tm(BMWChannelId.SYSTEM_TIME, new UnsignedDoublewordElement(1407)) //\n-\t\t\t\t),\n-\n-\t\t\t\tnew FC4ReadInputRegistersTask(999, Priority.HIGH,\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.LIFE_SIGN, new UnsignedWordElement(999)),\n-\t\t\t\t\t\tm(BMWChannelId.BMS_STATE, new UnsignedWordElement(1000)), //\n-\t\t\t\t\t\tm(BMWChannelId.ERROR_BITS_1, new UnsignedWordElement(1001)), //\n-\t\t\t\t\t\tm(BMWChannelId.ERROR_BITS_2, new UnsignedWordElement(1002)), //\n-\t\t\t\t\t\tm(BMWChannelId.WARNING_BITS_1, new UnsignedWordElement(1003)), //\n-\t\t\t\t\t\tm(BMWChannelId.WARNING_BITS_2, new UnsignedWordElement(1004)), //\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.INFO_BITS, new UnsignedWordElement(1005)),\n-\t\t\t\t\t\tm(BMWChannelId.MAXIMUM_OPERATING_CURRENT, new SignedWordElement(1006)), //\n-\t\t\t\t\t\tm(BMWChannelId.MINIMUM_OPERATING_CURRENT, new SignedWordElement(1007)), //\n-\t\t\t\t\t\tm(Battery.ChannelId.CHARGE_MAX_VOLTAGE, new UnsignedWordElement(1008),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(Battery.ChannelId.DISCHARGE_MIN_VOLTAGE, new UnsignedWordElement(1009),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(Battery.ChannelId.DISCHARGE_MAX_CURRENT, new SignedWordElement(1010)), //\n-\t\t\t\t\t\tm(Battery.ChannelId.CHARGE_MAX_CURRENT, new SignedWordElement(1011),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.INVERT), //\n-\t\t\t\t\t\tm(BMWChannelId.MAXIMUM_LIMIT_DYNAMIC_VOLTAGE, new UnsignedWordElement(1012),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(BMWChannelId.MINIMUM_LIMIT_DYNAMIC_VOLTAGE, new UnsignedWordElement(1013),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(BMWChannelId.NUMBER_OF_STRINGS_CONNECTED, new UnsignedWordElement(1014)), //\n-\t\t\t\t\t\tm(BMWChannelId.NUMBER_OF_STRINGS_INSTALLED, new UnsignedWordElement(1015)), //\n-\t\t\t\t\t\tm(BMWChannelId.SOC_ALL_STRINGS, new UnsignedWordElement(1016),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n-\t\t\t\t\t\tm(Battery.ChannelId.SOC, new UnsignedWordElement(1017),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n-\t\t\t\t\t\tm(BMWChannelId.REMAINING_CHARGE_CAPACITY, new UnsignedWordElement(1018)), //\n-\t\t\t\t\t\tm(BMWChannelId.REMAINING_DISCHARGE_CAPACITY, new UnsignedWordElement(1019)), //\n-\t\t\t\t\t\tm(BMWChannelId.REMAINING_CHARGE_ENERGY, new UnsignedWordElement(1020)), //\n-\t\t\t\t\t\tm(BMWChannelId.REMAINING_DISCHARGE_ENERGY, new UnsignedWordElement(1021)), //\n-\t\t\t\t\t\tm(BMWChannelId.NOMINAL_ENERGY, new UnsignedWordElement(1022)), //\n-\t\t\t\t\t\tm(BMWChannelId.TOTAL_ENERGY, new UnsignedWordElement(1023)), //\n-\t\t\t\t\t\tm(BMWChannelId.NOMINAL_CAPACITY, new UnsignedWordElement(1024)), //\n-\t\t\t\t\t\tm(Battery.ChannelId.CAPACITY, new UnsignedWordElement(1025)), //\n-\t\t\t\t\t\tm(Battery.ChannelId.SOH, new UnsignedWordElement(1026),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n-\t\t\t\t\t\tm(Battery.ChannelId.VOLTAGE, new UnsignedWordElement(1027),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(BMWChannelId.DC_VOLTAGE_AVERAGE, new UnsignedWordElement(1028),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1)), //\n-\t\t\t\tnew FC4ReadInputRegistersTask(1029, Priority.HIGH, //\n-\t\t\t\t\t\tm(new SignedWordElement(1029)) //\n-\t\t\t\t\t\t\t\t.m(BMWChannelId.DC_CURRENT, ElementToChannelConverter.SCALE_FACTOR_MINUS_1) //\n-\t\t\t\t\t\t\t\t.m(Battery.ChannelId.CURRENT, ElementToChannelConverter.SCALE_FACTOR_MINUS_1) //\n-\t\t\t\t\t\t\t\t.build()), //\n-\t\t\t\tnew FC4ReadInputRegistersTask(1030, Priority.HIGH, //\n-\t\t\t\t\t\tm(BMWChannelId.AVERAGE_TEMPERATURE, new SignedWordElement(1030))), //\n-\t\t\t\tnew FC4ReadInputRegistersTask(1031, Priority.HIGH, //\n-\t\t\t\t\t\tm(new SignedWordElement(1031)) //\n-\t\t\t\t\t\t\t\t.m(BMWChannelId.MINIMUM_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n-\t\t\t\t\t\t\t\t.m(Battery.ChannelId.MIN_CELL_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n-\t\t\t\t\t\t\t\t.build()), //\n-\t\t\t\tnew FC4ReadInputRegistersTask(1032, Priority.HIGH, //\n-\t\t\t\t\t\tm(new SignedWordElement(1032)) //\n-\t\t\t\t\t\t\t\t.m(BMWChannelId.MAXIMUM_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n-\t\t\t\t\t\t\t\t.m(Battery.ChannelId.MAX_CELL_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n-\t\t\t\t\t\t\t\t.build()), //\n-\t\t\t\tnew FC4ReadInputRegistersTask(1033, Priority.HIGH,\n-\t\t\t\t\t\tm(Battery.ChannelId.MIN_CELL_VOLTAGE, new UnsignedWordElement(1033)), //\n-\t\t\t\t\t\tm(Battery.ChannelId.MAX_CELL_VOLTAGE, new UnsignedWordElement(1034)), //\n-\t\t\t\t\t\tm(BMWChannelId.AVERAGE_CELL_VOLTAGE, new UnsignedWordElement(1035)), //\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.INTERNAL_RESISTANCE, new UnsignedWordElement(1036)),\n-\t\t\t\t\t\tm(BMWChannelId.INSULATION_RESISTANCE, new UnsignedWordElement(1037),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.DIRECT_1_TO_1), //\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.CONTAINER_TEMPERATURE, new UnsignedWordElement(1038),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.AMBIENT_TEMPERATURE, new UnsignedWordElement(1039),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.HUMIDITY_CONTAINER, new UnsignedWordElement(1040),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n-\t\t\t\t\t\tm(BMWChannelId.MAXIMUM_LIMIT_DYNAMIC_CURRENT_HIGH_RES, new SignedWordElement(1041),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_2), //\n-\t\t\t\t\t\tm(BMWChannelId.MINIMUM_LIMIT_DYNAMIC_CURRENT_HIGH_RES, new SignedWordElement(1042),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_2), //\n-\t\t\t\t\t\tm(BMWChannelId.FULL_CYCLE_COUNT, new UnsignedWordElement(1043)), //\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.OPERATING_TIME_COUNT, new UnsignedDoublewordElement(1044)),\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.COM_PRO_VERSION, new UnsignedDoublewordElement(1046)),\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.SERIAL_NUMBER, new UnsignedDoublewordElement(1048)),\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.SERIAL_NUMBER, new UnsignedDoublewordElement(1050)),\n-\t\t\t\t\t\t// not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n-\t\t\t\t\t\tm(BMWChannelId.SOFTWARE_VERSION, new UnsignedDoublewordElement(1052)) //\n-\t\t\t\t));\n-\t}\n-\n-\t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable(//\n-\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tBattery.getModbusSlaveNatureTable(accessMode) //\n-\t\t);\n-\t}\n-\n-\t@Override\n-\tpublic void setStartStop(StartStop value) throws OpenemsNamedException {\n-\t\t// TODO Auto-generated method stub\n-\t}\n+  private boolean isSystemRunning() {\n+    EnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n+    BmsState bmsState = bmsStateChannel.value().asEnum();\n+    return bmsState == BmsState.OPERATION;\n+  }\n+\n+  private boolean isSystemStopped() {\n+    EnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n+    BmsState bmsState = bmsStateChannel.value().asEnum();\n+    return bmsState == BmsState.OFF;\n+  }\n+\n+  /**\n+   * Checks whether system has an undefined state.\n+   *\n+   * @return true if system is neither running nor stopped\n+   */\n+  private boolean isSystemStatePending() {\n+    return !this.isSystemRunning() && !this.isSystemStopped();\n+  }\n+\n+  private boolean isError() {\n+    EnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n+    BmsState bmsState = bmsStateChannel.value().asEnum();\n+    return bmsState == BmsState.ERROR;\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    return \"SoC:\" + this.getSoc() //\n+        + \"|Discharge:\" + this.getDischargeMinVoltage() + \";\" + this.getDischargeMaxCurrent() //\n+        + \"|Charge:\" + this.getChargeMaxVoltage() + \";\" + this.getChargeMaxCurrent() //\n+        + \"|State:\" + this.state.asCamelCase();\n+  }\n+\n+  private void startSystem() {\n+    // TODO Currently not necessary, Battery starts itself?!\n+    this.log.debug(\"Start system\");\n+    IntegerWriteChannel commandChannel = this.channel(BMWChannelId.BMS_STATE_COMMAND);\n+    try {\n+      commandChannel.setNextWriteValue(CLOSE_CONTACTORS);\n+    } catch (OpenemsNamedException e) {\n+      // TODO Auto-generated catch block\n+      this.logError(this.log, \"Problem occurred during send start command\");\n+    }\n+  }\n+\n+  private void stopSystem() {\n+    // TODO Currently not necessary, Battery starts itself?!\n+    this.log.debug(\"Stop system\");\n+    IntegerWriteChannel commandChannel = this.channel(BMWChannelId.BMS_STATE_COMMAND);\n+    try {\n+      commandChannel.setNextWriteValue(OPEN_CONTACTORS);\n+    } catch (OpenemsNamedException e) {\n+      this.logError(this.log, \"Problem occurred during send stopping command\");\n+    }\n+  }\n+\n+  private State getStateMachineState() {\n+    return this.state;\n+  }\n+\n+  private void setStateMachineState(State state) {\n+    this.state = state;\n+    this.channel(BMWChannelId.STATE_MACHINE).setNextValue(this.state);\n+  }\n+\n+  @Override\n+  protected ModbusProtocol defineModbusProtocol() throws OpenemsException {\n+\n+    return new ModbusProtocol(this, //\n+\n+        new FC16WriteRegistersTask(1399, m(BMWChannelId.HEART_BEAT, new UnsignedWordElement(1399)), //\n+            m(BMWChannelId.BMS_STATE_COMMAND, new UnsignedWordElement(1400)), //\n+            m(BMWChannelId.OPERATING_STATE_INVERTER, new UnsignedWordElement(1401)), //\n+            m(BMWChannelId.DC_LINK_VOLTAGE, new UnsignedWordElement(1402),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(BMWChannelId.DC_LINK_CURRENT, new UnsignedWordElement(1403)), //\n+            m(BMWChannelId.OPERATION_MODE_REQUEST_GRANTED, new UnsignedWordElement(1404)), //\n+            m(BMWChannelId.OPERATION_MODE_REQUEST_CANCELED, new UnsignedWordElement(1405)), //\n+            m(new BitsWordElement(1406, this) //\n+                .bit(1, BMWChannelId.CONNECTION_STRATEGY_HIGH_SOC_FIRST) //\n+                .bit(0, BMWChannelId.CONNECTION_STRATEGY_LOW_SOC_FIRST) //\n+            ), //\n+            m(BMWChannelId.SYSTEM_TIME, new UnsignedDoublewordElement(1407)) //\n+        ),\n+\n+        new FC4ReadInputRegistersTask(999, Priority.HIGH,\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.LIFE_SIGN, new UnsignedWordElement(999)),\n+            m(BMWChannelId.BMS_STATE, new UnsignedWordElement(1000)), //\n+            m(BMWChannelId.ERROR_BITS_1, new UnsignedWordElement(1001)), //\n+            m(BMWChannelId.ERROR_BITS_2, new UnsignedWordElement(1002)), //\n+            m(BMWChannelId.WARNING_BITS_1, new UnsignedWordElement(1003)), //\n+            m(BMWChannelId.WARNING_BITS_2, new UnsignedWordElement(1004)), //\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.INFO_BITS, new UnsignedWordElement(1005)),\n+            m(BMWChannelId.MAXIMUM_OPERATING_CURRENT, new SignedWordElement(1006)), //\n+            m(BMWChannelId.MINIMUM_OPERATING_CURRENT, new SignedWordElement(1007)), //\n+            m(Battery.ChannelId.CHARGE_MAX_VOLTAGE, new UnsignedWordElement(1008),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(Battery.ChannelId.DISCHARGE_MIN_VOLTAGE, new UnsignedWordElement(1009),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(Battery.ChannelId.DISCHARGE_MAX_CURRENT, new SignedWordElement(1010)), //\n+            m(Battery.ChannelId.CHARGE_MAX_CURRENT, new SignedWordElement(1011),\n+                ElementToChannelConverter.INVERT), //\n+            m(BMWChannelId.MAXIMUM_LIMIT_DYNAMIC_VOLTAGE, new UnsignedWordElement(1012),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(BMWChannelId.MINIMUM_LIMIT_DYNAMIC_VOLTAGE, new UnsignedWordElement(1013),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(BMWChannelId.NUMBER_OF_STRINGS_CONNECTED, new UnsignedWordElement(1014)), //\n+            m(BMWChannelId.NUMBER_OF_STRINGS_INSTALLED, new UnsignedWordElement(1015)), //\n+            m(BMWChannelId.SOC_ALL_STRINGS, new UnsignedWordElement(1016),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n+            m(Battery.ChannelId.SOC, new UnsignedWordElement(1017),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n+            m(BMWChannelId.REMAINING_CHARGE_CAPACITY, new UnsignedWordElement(1018)), //\n+            m(BMWChannelId.REMAINING_DISCHARGE_CAPACITY, new UnsignedWordElement(1019)), //\n+            m(BMWChannelId.REMAINING_CHARGE_ENERGY, new UnsignedWordElement(1020)), //\n+            m(BMWChannelId.REMAINING_DISCHARGE_ENERGY, new UnsignedWordElement(1021)), //\n+            m(BMWChannelId.NOMINAL_ENERGY, new UnsignedWordElement(1022)), //\n+            m(BMWChannelId.TOTAL_ENERGY, new UnsignedWordElement(1023)), //\n+            m(BMWChannelId.NOMINAL_CAPACITY, new UnsignedWordElement(1024)), //\n+            m(Battery.ChannelId.CAPACITY, new UnsignedWordElement(1025)), //\n+            m(Battery.ChannelId.SOH, new UnsignedWordElement(1026),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n+            m(Battery.ChannelId.VOLTAGE, new UnsignedWordElement(1027),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(BMWChannelId.DC_VOLTAGE_AVERAGE, new UnsignedWordElement(1028),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1)), //\n+        new FC4ReadInputRegistersTask(1029, Priority.HIGH, //\n+            m(new SignedWordElement(1029)) //\n+                .m(BMWChannelId.DC_CURRENT, ElementToChannelConverter.SCALE_FACTOR_MINUS_1) //\n+                .m(Battery.ChannelId.CURRENT, ElementToChannelConverter.SCALE_FACTOR_MINUS_1) //\n+                .build()), //\n+        new FC4ReadInputRegistersTask(1030, Priority.HIGH, //\n+            m(BMWChannelId.AVERAGE_TEMPERATURE, new SignedWordElement(1030))), //\n+        new FC4ReadInputRegistersTask(1031, Priority.HIGH, //\n+            m(new SignedWordElement(1031)) //\n+                .m(BMWChannelId.MINIMUM_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n+                .m(Battery.ChannelId.MIN_CELL_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n+                .build()), //\n+        new FC4ReadInputRegistersTask(1032, Priority.HIGH, //\n+            m(new SignedWordElement(1032)) //\n+                .m(BMWChannelId.MAXIMUM_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n+                .m(Battery.ChannelId.MAX_CELL_TEMPERATURE, ElementToChannelConverter.DIRECT_1_TO_1) //\n+                .build()), //\n+        new FC4ReadInputRegistersTask(1033, Priority.HIGH,\n+            m(Battery.ChannelId.MIN_CELL_VOLTAGE, new UnsignedWordElement(1033)), //\n+            m(Battery.ChannelId.MAX_CELL_VOLTAGE, new UnsignedWordElement(1034)), //\n+            m(BMWChannelId.AVERAGE_CELL_VOLTAGE, new UnsignedWordElement(1035)), //\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.INTERNAL_RESISTANCE, new UnsignedWordElement(1036)),\n+            m(BMWChannelId.INSULATION_RESISTANCE, new UnsignedWordElement(1037),\n+                ElementToChannelConverter.DIRECT_1_TO_1), //\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.CONTAINER_TEMPERATURE, new UnsignedWordElement(1038),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.AMBIENT_TEMPERATURE, new UnsignedWordElement(1039),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.HUMIDITY_CONTAINER, new UnsignedWordElement(1040),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1),\n+            m(BMWChannelId.MAXIMUM_LIMIT_DYNAMIC_CURRENT_HIGH_RES, new SignedWordElement(1041),\n+                ElementToChannelConverter.SCALE_FACTOR_2), //\n+            m(BMWChannelId.MINIMUM_LIMIT_DYNAMIC_CURRENT_HIGH_RES, new SignedWordElement(1042),\n+                ElementToChannelConverter.SCALE_FACTOR_2), //\n+            m(BMWChannelId.FULL_CYCLE_COUNT, new UnsignedWordElement(1043)), //\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.OPERATING_TIME_COUNT, new UnsignedDoublewordElement(1044)),\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.COM_PRO_VERSION, new UnsignedDoublewordElement(1046)),\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.SERIAL_NUMBER, new UnsignedDoublewordElement(1048)),\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.SERIAL_NUMBER, new UnsignedDoublewordElement(1050)),\n+            // not defined by \"BCS_HL-SW_Operating-Instructions_V1.0.2_under_work_ChL.pdf\"\n+            m(BMWChannelId.SOFTWARE_VERSION, new UnsignedDoublewordElement(1052)) //\n+        ));\n+  }\n+\n+  @Override\n+  public ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+    return new ModbusSlaveTable(//\n+        OpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n+        Battery.getModbusSlaveNatureTable(accessMode) //\n+    );\n+  }\n+\n+  @Override\n+  public void setStartStop(StartStop value) throws OpenemsNamedException {\n+    // TODO Auto-generated method stub\n+  }\n }\n",
            "diff_size": 393
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/10/BmwBatteryImpl.java\nindex d95afd5a89c..b71fc7af454 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/10/BmwBatteryImpl.java\n@@ -274,7 +274,7 @@ public class BmwBatteryImpl extends AbstractOpenemsModbusComponent\n //\n //\t}\n \n-\tprivate boolean isSystemRunning() {\n+private boolean isSystemRunning() {\n \t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n \t\tBmsState bmsState = bmsStateChannel.value().asEnum();\n \t\treturn bmsState == BmsState.OPERATION;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/10/BmwBatteryImpl.java\nindex d95afd5a89c..b71fc7af454 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/10/BmwBatteryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/10/BmwBatteryImpl.java\n@@ -274,7 +274,7 @@ public class BmwBatteryImpl extends AbstractOpenemsModbusComponent\n //\n //\t}\n \n-\tprivate boolean isSystemRunning() {\n+private boolean isSystemRunning() {\n \t\tEnumReadChannel bmsStateChannel = this.channel(BMWChannelId.BMS_STATE);\n \t\tBmsState bmsState = bmsStateChannel.value().asEnum();\n \t\treturn bmsState == BmsState.OPERATION;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}