{
    "project_name": "Qihoo360-Quicksql",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.qihoo.qsql.org.apache.calcite.adapter.elasticsearch;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/14/ElasticsearchRel.java\nindex 0ec0a938e10..f3c7cb2c7a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/14/ElasticsearchRel.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.qihoo.qsql.org.apache.calcite.adapter.elasticsearch;\n \n import com.fasterxml.jackson.databind.JsonNode;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/14/ElasticsearchRel.java\nindex 0ec0a938e10..ef63cb6c61b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/14/ElasticsearchRel.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.qihoo.qsql.org.apache.calcite.adapter.elasticsearch;\n \n import com.fasterxml.jackson.databind.JsonNode;\n@@ -134,7 +135,7 @@ public interface ElasticsearchRel extends RelNode {\n             ((ElasticsearchRel) input).implement(this);\n \n             ObjectMapper mapper = new ObjectMapper();\n-            if (! aggregations.isEmpty()) {\n+            if (!aggregations.isEmpty()) {\n                 return aggregate(fields, mapper);\n             }\n \n@@ -144,7 +145,7 @@ public interface ElasticsearchRel extends RelNode {\n                 query.setAll((ObjectNode) mapper.readTree(op));\n             }\n \n-            if (! sort.isEmpty()) {\n+            if (!sort.isEmpty()) {\n                 ArrayNode sortNode = query.withArray(\"sort\");\n                 sort.forEach(e ->\n                     sortNode.add(\n@@ -169,7 +170,7 @@ public interface ElasticsearchRel extends RelNode {\n                 throw new IllegalArgumentException(\"Missing Aggregations\");\n             }\n \n-            if (! groupBy.isEmpty() && offset != null) {\n+            if (!groupBy.isEmpty() && offset != null) {\n                 String message = \"Currently ES doesn't support generic pagination \"\n                     + \"with aggregations. You can still use LIMIT keyword (without OFFSET). \"\n                     + \"For more details see https://github.com/elastic/elasticsearch/issues/4915\";\n@@ -224,7 +225,7 @@ public interface ElasticsearchRel extends RelNode {\n             }\n \n             // simple version for queries like \"select count(*), max(col1) from table\" (no GROUP BY cols)\n-            if (! groupBy.isEmpty() || ! aggregations.stream().allMatch(isCountStar)) {\n+            if (!groupBy.isEmpty() || !aggregations.stream().allMatch(isCountStar)) {\n                 for (Map.Entry<String, String> aggregation : aggregations) {\n                     JsonNode value = mapper.readTree(aggregation.getValue());\n                     parent.set(aggregation.getKey(), value);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/14/ElasticsearchRel.java\nindex 0ec0a938e10..075d2fd5172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/14/ElasticsearchRel.java\n@@ -31,7 +31,6 @@ import com.qihoo.qsql.org.apache.calcite.plan.RelOptTable;\n import com.qihoo.qsql.org.apache.calcite.rel.RelFieldCollation;\n import com.qihoo.qsql.org.apache.calcite.rel.RelNode;\n import com.qihoo.qsql.org.apache.calcite.util.Pair;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -40,6 +39,8 @@ import java.util.Objects;\n /**\n  * Relational expression that uses Elasticsearch calling convention.\n  */\n+\n+\n public interface ElasticsearchRel extends RelNode {\n \n     void implement(Implementor implementor);\n@@ -92,10 +93,8 @@ public interface ElasticsearchRel extends RelNode {\n          * @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-from-size.html\">From/Size</a>\n          */\n         Long fetch;\n-\n         RelOptTable table;\n         ElasticsearchTable elasticsearchTable;\n-\n         void add(String findOp) {\n             list.add(findOp);\n         }\n@@ -130,9 +129,9 @@ public interface ElasticsearchRel extends RelNode {\n         }\n \n         //Updated by qsql-team\n+\n         public String convert(RelNode input, List<Pair<String, Class>> fields) throws IOException {\n             ((ElasticsearchRel) input).implement(this);\n-\n             ObjectMapper mapper = new ObjectMapper();\n             if (! aggregations.isEmpty()) {\n                 return aggregate(fields, mapper);\n@@ -140,16 +139,14 @@ public interface ElasticsearchRel extends RelNode {\n \n             final ObjectNode query = mapper.createObjectNode();\n             // manually parse from previously concatenated string\n+\n             for (String op : list) {\n                 query.setAll((ObjectNode) mapper.readTree(op));\n             }\n \n             if (! sort.isEmpty()) {\n                 ArrayNode sortNode = query.withArray(\"sort\");\n-                sort.forEach(e ->\n-                    sortNode.add(\n-                        mapper.createObjectNode().put(e.getKey(), e.getValue().isDescending() ? \"desc\" : \"asc\"))\n-                );\n+                sort.forEach(e -> sortNode.add(mapper.createObjectNode().put(e.getKey(), e.getValue().isDescending() ? \"desc\" : \"asc\")));\n             }\n \n             if (offset != null) {\n@@ -159,25 +156,25 @@ public interface ElasticsearchRel extends RelNode {\n             if (fetch != null) {\n                 query.put(\"size\", fetch);\n             }\n-\n             return query.toString();\n         }\n \n         //Updated by qsql-team, copy from ElaticsearchTable, extract common code after all\n+\n         private String aggregate(List<Pair<String, Class>> fields, ObjectMapper mapper) throws IOException {\n             if (aggregations.isEmpty()) {\n                 throw new IllegalArgumentException(\"Missing Aggregations\");\n             }\n \n-            if (! groupBy.isEmpty() && offset != null) {\n-                String message = \"Currently ES doesn't support generic pagination \"\n-                    + \"with aggregations. You can still use LIMIT keyword (without OFFSET). \"\n-                    + \"For more details see https://github.com/elastic/elasticsearch/issues/4915\";\n+            if (! groupBy.isEmpty()\n+                && offset != null) {\n+                String message = \"Currently ES doesn't support generic pagination \" + \"with aggregations. You can still use LIMIT keyword (without OFFSET). \" + \"For more details see https://github.com/elastic/elasticsearch/issues/4915\";\n                 throw new IllegalStateException(message);\n             }\n \n             final ObjectNode query = mapper.createObjectNode();\n             // manually parse into JSON from previously concatenated strings\n+\n             for (String op : list) {\n                 query.setAll((ObjectNode) mapper.readTree(op));\n             }\n@@ -188,25 +185,25 @@ public interface ElasticsearchRel extends RelNode {\n             query.remove(\"script_fields\");\n \n             // allows to detect aggregation for count(*)\n-            final Predicate<Entry<String, String>> isCountStar = e -> e.getValue()\n-                .contains(\"\\\"\" + ElasticsearchConstants.ID + \"\\\"\");\n+            final Predicate<Entry<String, String>> isCountStar = e -> e.getValue().contains(\"\\\"\" + ElasticsearchConstants.ID + \"\\\"\");\n \n             // list of expressions which are count(*)\n-            final Set<String> countAll = aggregations.stream()\n-                .filter(isCountStar)\n-                .map(Map.Entry::getKey).collect(Collectors.toSet());\n+            final Set<String> countAll = aggregations.stream().filter(isCountStar)\n+                                                              .map(Map.Entry::getKey)\n+                                                              .collect(Collectors.toSet());\n \n             // due to ES aggregation format. fields in \"order by\" clause should go first\n             // if \"order by\" is missing. order in \"group by\" is un-important\n             final Set<String> orderedGroupBy = new LinkedHashSet<>();\n-            orderedGroupBy.addAll(sort.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n+            orderedGroupBy.addAll(sort.stream().map(Map.Entry::getKey)\n+                                               .collect(Collectors.toList()));\n             orderedGroupBy.addAll(groupBy);\n \n             // construct nested aggregations node(s)\n             ObjectNode parent = query.with(\"aggregations\");\n+\n             for (String name : orderedGroupBy) {\n                 final String aggName = \"g_\" + name;\n-\n                 final ObjectNode section = parent.with(aggName);\n                 final ObjectNode terms = section.with(\"terms\");\n                 terms.put(\"field\", name);\n@@ -215,16 +212,17 @@ public interface ElasticsearchRel extends RelNode {\n                 if (fetch != null) {\n                     terms.put(\"size\", fetch);\n                 }\n-\n-                sort.stream().filter(e -> e.getKey().equals(name)).findAny().ifPresent(s -> {\n+                sort.stream().filter(e -> e.getKey().equals(name))\n+                    .findAny().ifPresent(s -> {\n                     terms.with(\"order\").put(\"_key\", s.getValue().isDescending() ? \"desc\" : \"asc\");\n                 });\n-\n                 parent = section.with(\"aggregations\");\n             }\n \n             // simple version for queries like \"select count(*), max(col1) from table\" (no GROUP BY cols)\n-            if (! groupBy.isEmpty() || ! aggregations.stream().allMatch(isCountStar)) {\n+\n+            if (! groupBy.isEmpty()\n+                || ! aggregations.stream().allMatch(isCountStar)) {\n                 for (Map.Entry<String, String> aggregation : aggregations) {\n                     JsonNode value = mapper.readTree(aggregation.getValue());\n                     parent.set(aggregation.getKey(), value);\n@@ -232,15 +230,15 @@ public interface ElasticsearchRel extends RelNode {\n             }\n \n             // cleanup query. remove empty AGGREGATIONS element (if empty)\n+\n             JsonNode agg = query;\n-            while (agg.has(\"aggregations\") && agg.get(\"aggregations\").elements().hasNext()) {\n+            while (agg.has(\"aggregations\")\n+                   && agg.get(\"aggregations\").elements()\n+                                             .hasNext()) {\n                 agg = agg.get(\"aggregations\");\n             }\n             ((ObjectNode) agg).remove(\"aggregations\");\n-\n             return query.toString();\n         }\n     }\n-}\n-\n-// End ElasticsearchRel.java\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_three_grams/14/ElasticsearchRel.java\nindex 0ec0a938e10..f3c7cb2c7a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/14/ElasticsearchRel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_three_grams/14/ElasticsearchRel.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.qihoo.qsql.org.apache.calcite.adapter.elasticsearch;\n \n import com.fasterxml.jackson.databind.JsonNode;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}