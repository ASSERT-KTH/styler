{
    "project_name": "graphfoundation-ongdb",
    "error_id": "604",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "121",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/604/PropertyCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/604/PropertyCreator.java\nindex 0198d71d390..b2708ea90b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/604/PropertyCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/604/PropertyCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import java.util.Iterator;\n@@ -36,208 +37,207 @@ import org.neo4j.values.storable.Value;\n \n public class PropertyCreator\n {\n-    private final DynamicRecordAllocator stringRecordAllocator;\n-    private final DynamicRecordAllocator arrayRecordAllocator;\n-    private final IdSequence propertyRecordIdGenerator;\n-    private final PropertyTraverser traverser;\n-    private final boolean allowStorePointsAndTemporal;\n-\n-    public PropertyCreator( PropertyStore propertyStore, PropertyTraverser traverser )\n-    {\n-        this( propertyStore.getStringStore(), propertyStore.getArrayStore(), propertyStore, traverser, propertyStore.allowStorePointsAndTemporal() );\n-    }\n-\n-    public PropertyCreator( DynamicRecordAllocator stringRecordAllocator, DynamicRecordAllocator arrayRecordAllocator, IdSequence propertyRecordIdGenerator,\n-            PropertyTraverser traverser, boolean allowStorePointsAndTemporal )\n-    {\n-        this.stringRecordAllocator = stringRecordAllocator;\n-        this.arrayRecordAllocator = arrayRecordAllocator;\n-        this.propertyRecordIdGenerator = propertyRecordIdGenerator;\n-        this.traverser = traverser;\n-        this.allowStorePointsAndTemporal = allowStorePointsAndTemporal;\n-    }\n-\n-    public <P extends PrimitiveRecord> void primitiveSetProperty(\n-            RecordProxy<P, Void> primitiveRecordChange, int propertyKey, Value value,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+  private final DynamicRecordAllocator stringRecordAllocator;\n+  private final DynamicRecordAllocator arrayRecordAllocator;\n+  private final IdSequence propertyRecordIdGenerator;\n+  private final PropertyTraverser traverser;\n+  private final boolean allowStorePointsAndTemporal;\n+\n+  public PropertyCreator(PropertyStore propertyStore, PropertyTraverser traverser)\n+  {\n+    this(propertyStore.getStringStore(), propertyStore.getArrayStore(), propertyStore, traverser, propertyStore.allowStorePointsAndTemporal());\n+  }\n+\n+  public PropertyCreator(DynamicRecordAllocator stringRecordAllocator, DynamicRecordAllocator arrayRecordAllocator, IdSequence propertyRecordIdGenerator,\n+                         PropertyTraverser traverser, boolean allowStorePointsAndTemporal)\n+  {\n+    this.stringRecordAllocator = stringRecordAllocator;\n+    this.arrayRecordAllocator = arrayRecordAllocator;\n+    this.propertyRecordIdGenerator = propertyRecordIdGenerator;\n+    this.traverser = traverser;\n+    this.allowStorePointsAndTemporal = allowStorePointsAndTemporal;\n+  }\n+\n+  public <P extends PrimitiveRecord> void primitiveSetProperty(\n+      RecordProxy<P, Void> primitiveRecordChange, int propertyKey, Value value,\n+      RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n+  {\n+    PropertyBlock block = encodePropertyValue(propertyKey, value);\n+    P primitive = primitiveRecordChange.forReadingLinkage();\n+    assert traverser.assertPropertyChain(primitive, propertyRecords);\n+    int newBlockSizeInBytes = block.getSize();\n+\n+    // Traverse the existing property chain. Tracking two things along the way:\n+    // - (a) Free space for this block (candidateHost)\n+    // - (b) Existence of a block with the property key\n+    // Chain traversal can be aborted only if:\n+    // - (1) (b) occurs and new property block fits where the current is\n+    // - (2) (a) occurs and (b) has occurred, but new property block didn't fit\n+    // - (3) (b) occurs and (a) has occurred\n+    // - (4) Chain ends\n+    RecordProxy<PropertyRecord, PrimitiveRecord> freeHostProxy = null;\n+    RecordProxy<PropertyRecord, PrimitiveRecord> existingHostProxy = null;\n+    long prop = primitive.getNextProp();\n+    while (prop != Record.NO_NEXT_PROPERTY.intValue()) // <-- (4)\n     {\n-        PropertyBlock block = encodePropertyValue( propertyKey, value );\n-        P primitive = primitiveRecordChange.forReadingLinkage();\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n-        int newBlockSizeInBytes = block.getSize();\n-\n-        // Traverse the existing property chain. Tracking two things along the way:\n-        // - (a) Free space for this block (candidateHost)\n-        // - (b) Existence of a block with the property key\n-        // Chain traversal can be aborted only if:\n-        // - (1) (b) occurs and new property block fits where the current is\n-        // - (2) (a) occurs and (b) has occurred, but new property block didn't fit\n-        // - (3) (b) occurs and (a) has occurred\n-        // - (4) Chain ends\n-        RecordProxy<PropertyRecord, PrimitiveRecord> freeHostProxy = null;\n-        RecordProxy<PropertyRecord, PrimitiveRecord> existingHostProxy = null;\n-        long prop = primitive.getNextProp();\n-        while ( prop != Record.NO_NEXT_PROPERTY.intValue() ) // <-- (4)\n+      RecordProxy<PropertyRecord, PrimitiveRecord> proxy =\n+          propertyRecords.getOrLoad(prop, primitive);\n+      PropertyRecord propRecord = proxy.forReadingLinkage();\n+      assert propRecord.inUse() : propRecord;\n+\n+      // (a) search for free space\n+      if (propertyFitsInside(newBlockSizeInBytes, propRecord))\n+      {\n+        freeHostProxy = proxy;\n+        if (existingHostProxy != null)\n         {\n-            RecordProxy<PropertyRecord, PrimitiveRecord> proxy =\n-                    propertyRecords.getOrLoad( prop, primitive );\n-            PropertyRecord propRecord = proxy.forReadingLinkage();\n-            assert propRecord.inUse() : propRecord;\n-\n-            // (a) search for free space\n-            if ( propertyFitsInside( newBlockSizeInBytes, propRecord ) )\n-            {\n-                freeHostProxy = proxy;\n-                if ( existingHostProxy != null )\n-                {\n-                    // (2)\n-                    PropertyRecord freeHost = proxy.forChangingData();\n-                    freeHost.addPropertyBlock( block );\n-                    freeHost.setChanged( primitive );\n-                    assert traverser.assertPropertyChain( primitive, propertyRecords );\n-                    return;\n-                }\n-            }\n-\n-            // (b) search for existence of property key\n-            PropertyBlock existingBlock = propRecord.getPropertyBlock( propertyKey );\n-            if ( existingBlock != null )\n-            {\n-                // We found an existing property and whatever happens we have to remove the existing\n-                // block so that we can add the new one, where ever we decide to place it\n-                existingHostProxy = proxy;\n-                PropertyRecord existingHost = existingHostProxy.forChangingData();\n-                removeProperty( primitive, existingHost, existingBlock );\n-\n-                // Now see if we at this point can add the new block\n-                if ( newBlockSizeInBytes <= existingBlock.getSize() || // cheap check\n-                     propertyFitsInside( newBlockSizeInBytes, existingHost ) ) // fallback check\n-                {\n-                    // (1) yes we could add it right into the host of the existing block\n-                    existingHost.addPropertyBlock( block );\n-                    assert traverser.assertPropertyChain( primitive, propertyRecords );\n-                    return;\n-                }\n-                else if ( freeHostProxy != null )\n-                {\n-                    // (3) yes we could add it to a previously found host with sufficiently free space in it\n-                    PropertyRecord freeHost = freeHostProxy.forChangingData();\n-                    freeHost.addPropertyBlock( block );\n-                    freeHost.setChanged( primitive );\n-                    assert traverser.assertPropertyChain( primitive, propertyRecords );\n-                    return;\n-                }\n-                // else we can't add it at this point\n-            }\n-\n-            // Continue down the chain\n-            prop = propRecord.getNextProp();\n+          // (2)\n+          PropertyRecord freeHost = proxy.forChangingData();\n+          freeHost.addPropertyBlock(block);\n+          freeHost.setChanged(primitive);\n+          assert traverser.assertPropertyChain(primitive, propertyRecords);\n+          return;\n         }\n-\n-        // At this point we haven't added the property block, although we may have found room for it\n-        // along the way. If we didn't then just create a new record, it's fine\n-        PropertyRecord freeHost = null;\n-        if ( freeHostProxy == null )\n+      }\n+\n+      // (b) search for existence of property key\n+      PropertyBlock existingBlock = propRecord.getPropertyBlock(propertyKey);\n+      if (existingBlock != null)\n+      {\n+        // We found an existing property and whatever happens we have to remove the existing\n+        // block so that we can add the new one, where ever we decide to place it\n+        existingHostProxy = proxy;\n+        PropertyRecord existingHost = existingHostProxy.forChangingData();\n+        removeProperty(primitive, existingHost, existingBlock);\n+\n+        // Now see if we at this point can add the new block\n+        if (newBlockSizeInBytes <= existingBlock.getSize() || // cheap check\n+            propertyFitsInside(newBlockSizeInBytes, existingHost)) // fallback check\n         {\n-            // We couldn't find free space along the way, so create a new host record\n-            freeHost = propertyRecords.create( propertyRecordIdGenerator.nextId(), primitive ).forChangingData();\n-            freeHost.setInUse( true );\n-            if ( primitive.getNextProp() != Record.NO_NEXT_PROPERTY.intValue() )\n-            {\n-                // This isn't the first property record for the entity, re-shuffle the first one so that\n-                // the new one becomes the first\n-                PropertyRecord prevProp = propertyRecords.getOrLoad( primitive.getNextProp(),\n-                        primitive ).forChangingLinkage();\n-                assert prevProp.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue();\n-                prevProp.setPrevProp( freeHost.getId() );\n-                freeHost.setNextProp( prevProp.getId() );\n-                prevProp.setChanged( primitive );\n-            }\n-\n-            // By the way, this is the only condition where the primitive record also needs to change\n-            primitiveRecordChange.forChangingLinkage().setNextProp( freeHost.getId() );\n-        }\n-        else\n+          // (1) yes we could add it right into the host of the existing block\n+          existingHost.addPropertyBlock(block);\n+          assert traverser.assertPropertyChain(primitive, propertyRecords);\n+          return;\n+        } else if (freeHostProxy != null)\n         {\n-            freeHost = freeHostProxy.forChangingData();\n+          // (3) yes we could add it to a previously found host with sufficiently free space in it\n+          PropertyRecord freeHost = freeHostProxy.forChangingData();\n+          freeHost.addPropertyBlock(block);\n+          freeHost.setChanged(primitive);\n+          assert traverser.assertPropertyChain(primitive, propertyRecords);\n+          return;\n         }\n+        // else we can't add it at this point\n+      }\n \n-        // At this point we know that we have a host record with sufficient space in it for the block\n-        // to add, so simply add it\n-        freeHost.addPropertyBlock( block );\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n+      // Continue down the chain\n+      prop = propRecord.getNextProp();\n     }\n \n-    private void removeProperty( PrimitiveRecord primitive, PropertyRecord host, PropertyBlock block )\n+    // At this point we haven't added the property block, although we may have found room for it\n+    // along the way. If we didn't then just create a new record, it's fine\n+    PropertyRecord freeHost = null;\n+    if (freeHostProxy == null)\n     {\n-        host.removePropertyBlock( block.getKeyIndexId() );\n-        host.setChanged( primitive );\n-        for ( DynamicRecord record : block.getValueRecords() )\n-        {\n-            assert record.inUse();\n-            record.setInUse( false, block.getType().intValue() );\n-            host.addDeletedRecord( record );\n-        }\n-    }\n-\n-    private boolean propertyFitsInside( int newBlockSizeInBytes, PropertyRecord propRecord )\n+      // We couldn't find free space along the way, so create a new host record\n+      freeHost = propertyRecords.create(propertyRecordIdGenerator.nextId(), primitive).forChangingData();\n+      freeHost.setInUse(true);\n+      if (primitive.getNextProp() != Record.NO_NEXT_PROPERTY.intValue())\n+      {\n+        // This isn't the first property record for the entity, re-shuffle the first one so that\n+        // the new one becomes the first\n+        PropertyRecord prevProp = propertyRecords.getOrLoad(primitive.getNextProp(),\n+            primitive).forChangingLinkage();\n+        assert prevProp.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue();\n+        prevProp.setPrevProp(freeHost.getId());\n+        freeHost.setNextProp(prevProp.getId());\n+        prevProp.setChanged(primitive);\n+      }\n+\n+      // By the way, this is the only condition where the primitive record also needs to change\n+      primitiveRecordChange.forChangingLinkage().setNextProp(freeHost.getId());\n+    } else\n     {\n-        int propSize = propRecord.size();\n-        assert propSize >= 0 : propRecord;\n-        return propSize + newBlockSizeInBytes <= PropertyType.getPayloadSize();\n+      freeHost = freeHostProxy.forChangingData();\n     }\n \n-    public PropertyBlock encodePropertyValue( int propertyKey, Value value )\n+    // At this point we know that we have a host record with sufficient space in it for the block\n+    // to add, so simply add it\n+    freeHost.addPropertyBlock(block);\n+    assert traverser.assertPropertyChain(primitive, propertyRecords);\n+  }\n+\n+  private void removeProperty(PrimitiveRecord primitive, PropertyRecord host, PropertyBlock block)\n+  {\n+    host.removePropertyBlock(block.getKeyIndexId());\n+    host.setChanged(primitive);\n+    for (DynamicRecord record : block.getValueRecords())\n     {\n-        return encodeValue( new PropertyBlock(), propertyKey, value );\n+      assert record.inUse();\n+      record.setInUse(false, block.getType().intValue());\n+      host.addDeletedRecord(record);\n     }\n-\n-    public PropertyBlock encodeValue( PropertyBlock block, int propertyKey, Value value )\n+  }\n+\n+  private boolean propertyFitsInside(int newBlockSizeInBytes, PropertyRecord propRecord)\n+  {\n+    int propSize = propRecord.size();\n+    assert propSize >= 0 : propRecord;\n+    return propSize + newBlockSizeInBytes <= PropertyType.getPayloadSize();\n+  }\n+\n+  public PropertyBlock encodePropertyValue(int propertyKey, Value value)\n+  {\n+    return encodeValue(new PropertyBlock(), propertyKey, value);\n+  }\n+\n+  public PropertyBlock encodeValue(PropertyBlock block, int propertyKey, Value value)\n+  {\n+    PropertyStore.encodeValue(block, propertyKey, value, stringRecordAllocator, arrayRecordAllocator, allowStorePointsAndTemporal);\n+    return block;\n+  }\n+\n+  public long createPropertyChain(PrimitiveRecord owner, Iterator<PropertyBlock> properties,\n+                                  RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n+  {\n+    return createPropertyChain(owner, properties, propertyRecords, p -> {\n+    });\n+  }\n+\n+  public long createPropertyChain(PrimitiveRecord owner, Iterator<PropertyBlock> properties,\n+                                  RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n+                                  Consumer<PropertyRecord> createdPropertyRecords)\n+  {\n+    if (properties == null || !properties.hasNext())\n     {\n-        PropertyStore.encodeValue( block, propertyKey, value, stringRecordAllocator, arrayRecordAllocator, allowStorePointsAndTemporal );\n-        return block;\n+      return Record.NO_NEXT_PROPERTY.intValue();\n     }\n-\n-    public long createPropertyChain( PrimitiveRecord owner, Iterator<PropertyBlock> properties,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+    PropertyRecord currentRecord = propertyRecords.create(propertyRecordIdGenerator.nextId(), owner)\n+        .forChangingData();\n+    createdPropertyRecords.accept(currentRecord);\n+    currentRecord.setInUse(true);\n+    currentRecord.setCreated();\n+    PropertyRecord firstRecord = currentRecord;\n+    while (properties.hasNext())\n     {\n-        return createPropertyChain( owner, properties, propertyRecords, p -> {} );\n-    }\n-\n-    public long createPropertyChain( PrimitiveRecord owner, Iterator<PropertyBlock> properties,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n-            Consumer<PropertyRecord> createdPropertyRecords )\n-    {\n-        if ( properties == null || !properties.hasNext() )\n-        {\n-            return Record.NO_NEXT_PROPERTY.intValue();\n-        }\n-        PropertyRecord currentRecord = propertyRecords.create( propertyRecordIdGenerator.nextId(), owner )\n-                .forChangingData();\n-        createdPropertyRecords.accept( currentRecord );\n-        currentRecord.setInUse( true );\n+      PropertyBlock block = properties.next();\n+      if (currentRecord.size() + block.getSize() > PropertyType.getPayloadSize())\n+      {\n+        // Here it means the current block is done for\n+        PropertyRecord prevRecord = currentRecord;\n+        // Create new record\n+        long propertyId = propertyRecordIdGenerator.nextId();\n+        currentRecord = propertyRecords.create(propertyId, owner).forChangingData();\n+        createdPropertyRecords.accept(currentRecord);\n+        currentRecord.setInUse(true);\n         currentRecord.setCreated();\n-        PropertyRecord firstRecord = currentRecord;\n-        while ( properties.hasNext() )\n-        {\n-            PropertyBlock block = properties.next();\n-            if ( currentRecord.size() + block.getSize() > PropertyType.getPayloadSize() )\n-            {\n-                // Here it means the current block is done for\n-                PropertyRecord prevRecord = currentRecord;\n-                // Create new record\n-                long propertyId = propertyRecordIdGenerator.nextId();\n-                currentRecord = propertyRecords.create( propertyId, owner ).forChangingData();\n-                createdPropertyRecords.accept( currentRecord );\n-                currentRecord.setInUse( true );\n-                currentRecord.setCreated();\n-                // Set up links\n-                prevRecord.setNextProp( propertyId );\n-                currentRecord.setPrevProp( prevRecord.getId() );\n-                // Now current is ready to start picking up blocks\n-            }\n-            currentRecord.addPropertyBlock( block );\n-        }\n-        return firstRecord.getId();\n+        // Set up links\n+        prevRecord.setNextProp(propertyId);\n+        currentRecord.setPrevProp(prevRecord.getId());\n+        // Now current is ready to start picking up blocks\n+      }\n+      currentRecord.addPropertyBlock(block);\n     }\n+    return firstRecord.getId();\n+  }\n }\n",
            "diff_size": 278
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}