{
    "project_name": "Angel-ML-angel",
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/88/ServerLongFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/88/ServerLongFloatRow.java\nindex b225bfe509d..eb0bd3fe4ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/88/ServerLongFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/88/ServerLongFloatRow.java\n@@ -42,28 +42,28 @@ public class ServerLongFloatRow extends ServerFloatRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      FloatVector innerRow) {\n+                            FloatVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+                            int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n@@ -134,7 +134,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * Set a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements values\n+   * @param values  elements values\n    */\n   public void set(long[] indices, float[] values) {\n     assert indices.length == values.length;\n@@ -163,7 +163,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * Add a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements plus values\n+   * @param values  elements plus values\n    */\n   public void addTo(long[] indices, float[] values) {\n     assert indices.length == values.length;\n@@ -628,7 +628,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n \n   @Override\n   public ServerRow\n-adaptiveClone() {\n+  adaptiveClone() {\n     startRead();\n     try {\n       if (useIntKey) {\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "606",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "608",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "622",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "624",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "628",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/88/ServerLongFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/88/ServerLongFloatRow.java\nindex b225bfe509d..56073a8b54c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/88/ServerLongFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/88/ServerLongFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -62,9 +61,8 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n+  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n+  this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n@@ -203,50 +201,40 @@ public class ServerLongFloatRow extends ServerFloatRow {\n         case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE_LONGKEY:\n+  case T_LONG_SPARSE_LONGKEY:\n         case T_LONG_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -615,11 +603,9 @@ public class ServerLongFloatRow extends ServerFloatRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntFloatVector) row).clone());\n-      } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongFloatVector) row).clone());\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row).clone());\n+  } else {\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongFloatVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -627,25 +613,19 @@ public class ServerLongFloatRow extends ServerFloatRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n           return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedFloatVector((int) (endCol - startCol),\n-                  ((IntFloatVector) row).getStorage().getIndices(),\n-                  ((IntFloatVector) row).getStorage().getValues()));\n-        } else {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntFloatVector) row));\n+              VFactory.sortedFloatVector((int) (endCol - startCol), ((IntFloatVector) row).getStorage().getIndices(), ((IntFloatVector) row).getStorage().getValues()));\n+  } else {\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row));\n         }\n       } else {\n         return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyFloatVector(endCol - startCol,\n-                ((LongFloatVector) row).getStorage().getIndices(),\n-                ((LongFloatVector) row).getStorage().getValues()));\n+            VFactory.sortedLongKeyFloatVector(endCol - startCol, ((LongFloatVector) row).getStorage().getIndices(), ((LongFloatVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -687,7 +667,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeFloat(initAndGet(in.readInt(), func));\n@@ -742,4 +722,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "526",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "533",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "555",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "564",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "613",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "615",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "628",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "632",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "635",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "717",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "724",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/88/ServerLongFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/88/ServerLongFloatRow.java\nindex b225bfe509d..2e0d6e211d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/88/ServerLongFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/88/ServerLongFloatRow.java\n@@ -37,6 +37,7 @@ import java.io.IOException;\n /**\n  * The row with \"long\" index type and \"float\" value type in PS\n  */\n+\n public class ServerLongFloatRow extends ServerFloatRow {\n \n   /**\n@@ -48,8 +49,8 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      FloatVector innerRow) {\n+\n+  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, FloatVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n@@ -62,8 +63,8 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+\n+  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n@@ -72,6 +73,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerLongFloatRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -87,6 +89,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public float get(long index) {\n     if (useIntKey) {\n       return ((IntFloatVector) row).get((int) (index - startCol));\n@@ -101,6 +104,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(long index, float value) {\n     if (useIntKey) {\n       ((IntFloatVector) row).set((int) (index - startCol), value);\n@@ -115,6 +119,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public float[] get(long[] indices) {\n     float[] values = new float[indices.length];\n     if (useIntKey) {\n@@ -126,7 +131,6 @@ public class ServerLongFloatRow extends ServerFloatRow {\n         values[i] = ((LongFloatVector) row).get(indices[i] - startCol);\n       }\n     }\n-\n     return values;\n   }\n \n@@ -136,6 +140,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(long[] indices, float[] values) {\n     assert indices.length == values.length;\n     if (useIntKey) {\n@@ -155,6 +160,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(long index, float value) {\n     set(index, get(index) + value);\n   }\n@@ -165,6 +171,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(long[] indices, float[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -177,6 +184,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    *\n    * @return all element values\n    */\n+\n   private float[] getValues() {\n     if (useIntKey) {\n       return ((IntFloatVector) row).getStorage().getValues();\n@@ -194,8 +202,10 @@ public class ServerLongFloatRow extends ServerFloatRow {\n   //public ObjectIterator<Long2FloatMap.Entry> getIter() {\n   //  return ((LongFloatVector) row).getStorage().entryIterator();\n   //}\n+\n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -203,53 +213,42 @@ public class ServerLongFloatRow extends ServerFloatRow {\n         case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE_LONGKEY:\n         case T_LONG_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n         case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -524,16 +523,14 @@ public class ServerLongFloatRow extends ServerFloatRow {\n         }\n       } else {\n         if (useIntKey) {\n-          ObjectIterator<Int2FloatMap.Entry> iter =\n-              ((IntFloatVector) row).getStorage().entryIterator();\n+          ObjectIterator<Int2FloatMap.Entry> iter = ((IntFloatVector) row).getStorage().entryIterator();\n           Int2FloatMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n             mergedRow.set(entry.getIntKey() + startCol, entry.getFloatValue());\n           }\n         } else {\n-          ObjectIterator<Long2FloatMap.Entry> iter =\n-              ((LongFloatVector) row).getStorage().entryIterator();\n+          ObjectIterator<Long2FloatMap.Entry> iter = ((LongFloatVector) row).getStorage().entryIterator();\n           Long2FloatMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -555,8 +552,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n           buf.writeFloat(values[i]);\n         }\n       } else {\n-        ObjectIterator<Int2FloatMap.Entry> iter =\n-            ((IntFloatVector) row).getStorage().entryIterator();\n+        ObjectIterator<Int2FloatMap.Entry> iter = ((IntFloatVector) row).getStorage().entryIterator();\n         Int2FloatMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n@@ -565,8 +561,7 @@ public class ServerLongFloatRow extends ServerFloatRow {\n         }\n       }\n     } else {\n-      ObjectIterator<Long2FloatMap.Entry> iter =\n-          ((LongFloatVector) row).getStorage().entryIterator();\n+      ObjectIterator<Long2FloatMap.Entry> iter = ((LongFloatVector) row).getStorage().entryIterator();\n       Long2FloatMap.Entry entry;\n       while (iter.hasNext()) {\n         entry = iter.next();\n@@ -615,11 +610,9 @@ public class ServerLongFloatRow extends ServerFloatRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntFloatVector) row).clone());\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row).clone());\n       } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongFloatVector) row).clone());\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongFloatVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -627,25 +620,21 @@ public class ServerLongFloatRow extends ServerFloatRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedFloatVector((int) (endCol - startCol),\n-                  ((IntFloatVector) row).getStorage().getIndices(),\n-                  ((IntFloatVector) row).getStorage().getValues()));\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedFloatVector((int) (endCol - startCol),\n+                                       ((IntFloatVector) row).getStorage().getIndices(),\n+                                       ((IntFloatVector) row).getStorage().getValues()));\n         } else {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntFloatVector) row));\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row));\n         }\n       } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyFloatVector(endCol - startCol,\n-                ((LongFloatVector) row).getStorage().getIndices(),\n-                ((LongFloatVector) row).getStorage().getValues()));\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedLongKeyFloatVector(endCol - startCol,\n+                                     ((LongFloatVector) row).getStorage().getIndices(),\n+                                     ((LongFloatVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -658,6 +647,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(long index) {\n     if (useIntKey) {\n       if (row.isSparse()) {\n@@ -685,8 +675,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -724,16 +714,14 @@ adaptiveClone() {\n       }\n     } else {\n       if (useIntKey) {\n-        ObjectIterator<Int2FloatMap.Entry> iter =\n-            ((IntFloatVector) row).getStorage().entryIterator();\n+        ObjectIterator<Int2FloatMap.Entry> iter = ((IntFloatVector) row).getStorage().entryIterator();\n         Int2FloatMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n           entry.setValue(func.update());\n         }\n       } else {\n-        ObjectIterator<Long2FloatMap.Entry> iter =\n-            ((LongFloatVector) row).getStorage().entryIterator();\n+        ObjectIterator<Long2FloatMap.Entry> iter = ((LongFloatVector) row).getStorage().entryIterator();\n         Long2FloatMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n@@ -742,4 +730,5 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}