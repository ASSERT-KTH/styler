{
    "project_name": "neo4j-neo4j",
    "error_id": "3185",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3185/Path.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3185/Path.java\nindex f16186f8c9d..ebef9a2c33b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3185/Path.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3185/Path.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.Iterator;\n@@ -27,7 +28,7 @@ import org.neo4j.annotations.api.PublicApi;\n  * Represents a path in the graph. A path starts with a node followed by\n  * pairs of {@link Relationship} and {@link Node} objects. The shortest path\n  * is of length 0. Such a path contains only one node and no relationships.\n- *\n+ * <p>\n  * During a traversal {@link Path} instances are emitted where the current\n  * position of the traverser is represented by each such path. The current\n  * node in such a traversal is reached via {@link Path#endNode()}.\n@@ -38,6 +39,7 @@ public interface Path extends Iterable<Entity>\n     /**\n      * Returns the start node of this path. It's also the first node returned\n      * from the {@link #nodes()} iterable.\n+     *\n      * @return the start node.\n      */\n     Node startNode();\n@@ -46,7 +48,7 @@ public interface Path extends Iterable<Entity>\n      * Returns the end node of this path. It's also the last node returned\n      * from {@link #nodes()} iterable. If the {@link #length()} of this path\n      * is 0 the end node returned by this method is the same as the start node.\n-     *\n+     * <p>\n      * If a path is emitted from a traverser the end node is the current node\n      * where the traverser is at the moment.\n      *\n@@ -58,7 +60,7 @@ public interface Path extends Iterable<Entity>\n      * Returns the last {@link Relationship} in this path.\n      *\n      * @return the last {@link Relationship} in this path, or <code>null</code>\n-     *         if this path contains no {@link Relationship}s.\n+     * if this path contains no {@link Relationship}s.\n      */\n     Relationship lastRelationship();\n \n@@ -66,6 +68,7 @@ public interface Path extends Iterable<Entity>\n      * Returns all the relationships in between the nodes which this path\n      * consists of. For a path with {@link #length()} 0 this will be an\n      * empty {@link Iterable}.\n+     *\n      * @return the relationships in this path.\n      */\n     Iterable<Relationship> relationships();\n@@ -75,6 +78,7 @@ public interface Path extends Iterable<Entity>\n      * consists of in reverse order, i.e. starting from the {@link #lastRelationship()}\n      * going backwards towards the first relationship in the path.\n      * For a path with {@link #length()} 0 this will be an empty {@link Iterable}.\n+     *\n      * @return the relationships in this path in reverse order.\n      */\n     Iterable<Relationship> reverseRelationships();\n@@ -115,7 +119,7 @@ public interface Path extends Iterable<Entity>\n \n     /**\n      * Returns a natural string representation of this path.\n-     *\n+     * <p>\n      * The string representation shows the nodes with relationships\n      * (and their directions) in between them.\n      *\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3185/Path.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3185/Path.java\nindex f16186f8c9d..d4e08b2df00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3185/Path.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3185/Path.java\n@@ -134,4 +134,4 @@ public interface Path extends Iterable<Entity>\n      */\n     @Override\n     Iterator<Entity> iterator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}