{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1349",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1349/BatchingTokenRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1349/BatchingTokenRepository.java\nindex b7b0f0fe03b..69f141732c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1349/BatchingTokenRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1349/BatchingTokenRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.store;\n \n import java.io.Closeable;\n@@ -48,189 +49,188 @@ import static java.lang.Math.toIntExact;\n  * to call {@link #getOrCreateId(String)} methods on.\n  */\n public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN extends Token>\n-        implements ToIntFunction<Object>, Closeable\n+    implements ToIntFunction<Object>, Closeable\n {\n-    private final Map<String,Integer> tokens = new HashMap<>();\n-    private final TokenStore<RECORD, TOKEN> store;\n-    private final Loader<RECORD,Void> loader;\n-    private int highId;\n-    private int highestCreatedId;\n-\n-    public BatchingTokenRepository( TokenStore<RECORD,TOKEN> store, Loader<RECORD,Void> loader )\n-    {\n-        this.store = store;\n-        this.loader = loader;\n-        this.highId = (int)store.getHighId();\n-        this.highestCreatedId = highId - 1;\n-    }\n-\n-    /**\n-     * Returns the id for token with the specified {@code name}, potentially creating that token and\n-     * assigning a new id as part of this call.\n-     *\n-     * @param name token name.\n-     * @return the id (created or existing) for the token by this name.\n-     */\n-    public int getOrCreateId( String name )\n-    {\n-        assert name != null;\n-        Integer id = tokens.get( name );\n-        if ( id == null )\n-        {\n-            synchronized ( tokens )\n-            {\n-                id = tokens.computeIfAbsent( name, k -> highId++ );\n-            }\n-        }\n-        return id;\n-    }\n-\n-    /**\n-     * Returns the id for token with the specified {@code key}, which can be a {@link String} if representing\n-     * a user-defined name or an {@link Integer} if representing an existing type from an external source,\n-     * which wants to preserve its name --> id tokens. Also see {@link #getOrCreateId(String)} for more details.\n-     *\n-     * @param key name or id of this token.\n-     * @return the id (created or existing) for the token key.\n-     */\n-    public int getOrCreateId( Object key )\n-    {\n-        if ( key instanceof String )\n-        {\n-            // A name was supplied, get or create a token id for it\n-            return getOrCreateId( (String) key );\n-        }\n-        else if ( key instanceof Integer )\n-        {\n-            // A raw token id was supplied, just use it\n-            return (Integer) key;\n-        }\n-        throw new IllegalArgumentException( \"Expected either a String or Integer for property key, but was '\" +\n-                key + \"'\" + \", \" + key.getClass() );\n-    }\n-\n-    @Override\n-    public int applyAsInt( Object key )\n+  private final Map<String, Integer> tokens = new HashMap<>();\n+  private final TokenStore<RECORD, TOKEN> store;\n+  private final Loader<RECORD, Void> loader;\n+  private int highId;\n+  private int highestCreatedId;\n+\n+  public BatchingTokenRepository(TokenStore<RECORD, TOKEN> store, Loader<RECORD, Void> loader)\n+  {\n+    this.store = store;\n+    this.loader = loader;\n+    this.highId = (int) store.getHighId();\n+    this.highestCreatedId = highId - 1;\n+  }\n+\n+  /**\n+   * Returns the id for token with the specified {@code name}, potentially creating that token and\n+   * assigning a new id as part of this call.\n+   *\n+   * @param name token name.\n+   * @return the id (created or existing) for the token by this name.\n+   */\n+  public int getOrCreateId(String name)\n+  {\n+    assert name != null;\n+    Integer id = tokens.get(name);\n+    if (id == null)\n     {\n-        return getOrCreateId( key );\n+      synchronized (tokens)\n+      {\n+        id = tokens.computeIfAbsent(name, k -> highId++);\n+      }\n     }\n-\n-    public long[] getOrCreateIds( String[] names )\n+    return id;\n+  }\n+\n+  /**\n+   * Returns the id for token with the specified {@code key}, which can be a {@link String} if representing\n+   * a user-defined name or an {@link Integer} if representing an existing type from an external source,\n+   * which wants to preserve its name --> id tokens. Also see {@link #getOrCreateId(String)} for more details.\n+   *\n+   * @param key name or id of this token.\n+   * @return the id (created or existing) for the token key.\n+   */\n+  public int getOrCreateId(Object key)\n+  {\n+    if (key instanceof String)\n     {\n-        return getOrCreateIds( names, names.length );\n-    }\n-\n-    /**\n-     * Returns or creates multiple tokens for given token names.\n-     *\n-     * @param names token names to lookup or create token ids for.\n-     * @param length length of the names array to consider, the array itself may be longer.\n-     * @return {@code long[]} containing the label ids.\n-     */\n-    public long[] getOrCreateIds( String[] names, int length )\n+      // A name was supplied, get or create a token id for it\n+      return getOrCreateId((String) key);\n+    } else if (key instanceof Integer)\n     {\n-        long[] result = new long[length];\n-        int from;\n-        int to;\n-        for ( from = 0, to = 0; from < length; from++ )\n-        {\n-            int id = getOrCreateId( names[from] );\n-            if ( !contains( result, id, to ) )\n-            {\n-                result[to++] = id;\n-            }\n-        }\n-        if ( to < from )\n-        {\n-            result = Arrays.copyOf( result, to );\n-        }\n-        Arrays.sort( result );\n-        return result;\n+      // A raw token id was supplied, just use it\n+      return (Integer) key;\n     }\n-\n-    private boolean contains( long[] array, long id, int arrayLength )\n+    throw new IllegalArgumentException(\"Expected either a String or Integer for property key, but was '\" +\n+        key + \"'\" + \", \" + key.getClass());\n+  }\n+\n+  @Override\n+  public int applyAsInt(Object key)\n+  {\n+    return getOrCreateId(key);\n+  }\n+\n+  public long[] getOrCreateIds(String[] names)\n+  {\n+    return getOrCreateIds(names, names.length);\n+  }\n+\n+  /**\n+   * Returns or creates multiple tokens for given token names.\n+   *\n+   * @param names  token names to lookup or create token ids for.\n+   * @param length length of the names array to consider, the array itself may be longer.\n+   * @return {@code long[]} containing the label ids.\n+   */\n+  public long[] getOrCreateIds(String[] names, int length)\n+  {\n+    long[] result = new long[length];\n+    int from;\n+    int to;\n+    for (from = 0, to = 0; from < length; from++)\n     {\n-        for ( int i = 0; i < arrayLength; i++ )\n-        {\n-            if ( array[i] == id )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      int id = getOrCreateId(names[from]);\n+      if (!contains(result, id, to))\n+      {\n+        result[to++] = id;\n+      }\n     }\n-\n-    public int getHighId()\n+    if (to < from)\n     {\n-        return highId;\n+      result = Arrays.copyOf(result, to);\n     }\n+    Arrays.sort(result);\n+    return result;\n+  }\n \n-    /**\n-     * Closes this repository and writes all created tokens to the underlying store.\n-     */\n-    @Override\n-    public void close()\n+  private boolean contains(long[] array, long id, int arrayLength)\n+  {\n+    for (int i = 0; i < arrayLength; i++)\n     {\n-        flush();\n+      if (array[i] == id)\n+      {\n+        return true;\n+      }\n     }\n-\n-    public void flush()\n+    return false;\n+  }\n+\n+  public int getHighId()\n+  {\n+    return highId;\n+  }\n+\n+  /**\n+   * Closes this repository and writes all created tokens to the underlying store.\n+   */\n+  @Override\n+  public void close()\n+  {\n+    flush();\n+  }\n+\n+  public void flush()\n+  {\n+    // Batch-friendly record access\n+    RecordAccess<RECORD, Void> recordAccess = new DirectRecordAccess<>(store, loader);\n+\n+    // Create the tokens\n+    TokenCreator<RECORD, TOKEN> creator = new TokenCreator<>(store);\n+    int highest = highestCreatedId;\n+    for (Map.Entry<Integer, String> tokenToCreate : sortCreatedTokensById())\n     {\n-        // Batch-friendly record access\n-        RecordAccess<RECORD,Void> recordAccess = new DirectRecordAccess<>( store, loader );\n-\n-        // Create the tokens\n-        TokenCreator<RECORD, TOKEN> creator = new TokenCreator<>( store );\n-        int highest = highestCreatedId;\n-        for ( Map.Entry<Integer,String> tokenToCreate : sortCreatedTokensById() )\n-        {\n-            if ( tokenToCreate.getKey() > highestCreatedId )\n-            {\n-                creator.createToken( tokenToCreate.getValue(), tokenToCreate.getKey(), recordAccess );\n-                highest = Math.max( highest, tokenToCreate.getKey() );\n-            }\n-        }\n-        // Store them\n-        int highestId = max( toIntExact( store.getHighestPossibleIdInUse() ), highest );\n-        recordAccess.close();\n-        store.setHighestPossibleIdInUse( highestId );\n-        highestCreatedId = highestId;\n+      if (tokenToCreate.getKey() > highestCreatedId)\n+      {\n+        creator.createToken(tokenToCreate.getValue(), tokenToCreate.getKey(), recordAccess);\n+        highest = Math.max(highest, tokenToCreate.getKey());\n+      }\n     }\n-\n-    private Iterable<Map.Entry<Integer,String>> sortCreatedTokensById()\n+    // Store them\n+    int highestId = max(toIntExact(store.getHighestPossibleIdInUse()), highest);\n+    recordAccess.close();\n+    store.setHighestPossibleIdInUse(highestId);\n+    highestCreatedId = highestId;\n+  }\n+\n+  private Iterable<Map.Entry<Integer, String>> sortCreatedTokensById()\n+  {\n+    Map<Integer, String> sorted = new TreeMap<>();\n+    for (Map.Entry<String, Integer> entry : tokens.entrySet())\n     {\n-        Map<Integer,String> sorted = new TreeMap<>();\n-        for ( Map.Entry<String,Integer> entry : tokens.entrySet() )\n-        {\n-            sorted.put( entry.getValue(), entry.getKey() );\n-        }\n-        return sorted.entrySet();\n+      sorted.put(entry.getValue(), entry.getKey());\n     }\n+    return sorted.entrySet();\n+  }\n \n-    public static class BatchingPropertyKeyTokenRepository\n-            extends BatchingTokenRepository<PropertyKeyTokenRecord, Token>\n+  public static class BatchingPropertyKeyTokenRepository\n+      extends BatchingTokenRepository<PropertyKeyTokenRecord, Token>\n+  {\n+    public BatchingPropertyKeyTokenRepository(TokenStore<PropertyKeyTokenRecord, Token> store)\n     {\n-        public BatchingPropertyKeyTokenRepository( TokenStore<PropertyKeyTokenRecord, Token> store )\n-        {\n-            super( store, Loaders.propertyKeyTokenLoader( store ) );\n-        }\n+      super(store, Loaders.propertyKeyTokenLoader(store));\n     }\n+  }\n \n-    public static class BatchingLabelTokenRepository extends BatchingTokenRepository<LabelTokenRecord, Token>\n+  public static class BatchingLabelTokenRepository extends BatchingTokenRepository<LabelTokenRecord, Token>\n+  {\n+    public BatchingLabelTokenRepository(TokenStore<LabelTokenRecord, Token> store)\n     {\n-        public BatchingLabelTokenRepository( TokenStore<LabelTokenRecord, Token> store )\n-        {\n-            super( store, Loaders.labelTokenLoader( store ) );\n-        }\n+      super(store, Loaders.labelTokenLoader(store));\n     }\n+  }\n \n-    public static class BatchingRelationshipTypeTokenRepository\n-            extends BatchingTokenRepository<RelationshipTypeTokenRecord,RelationshipTypeToken>\n+  public static class BatchingRelationshipTypeTokenRepository\n+      extends BatchingTokenRepository<RelationshipTypeTokenRecord, RelationshipTypeToken>\n+  {\n+    public BatchingRelationshipTypeTokenRepository(TokenStore<RelationshipTypeTokenRecord,\n+        RelationshipTypeToken> store)\n     {\n-        public BatchingRelationshipTypeTokenRepository( TokenStore<RelationshipTypeTokenRecord,\n-                RelationshipTypeToken> store )\n-        {\n-            super( store, Loaders.relationshipTypeTokenLoader( store ) );\n-        }\n+      super(store, Loaders.relationshipTypeTokenLoader(store));\n     }\n+  }\n }\n",
            "diff_size": 252
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1349/BatchingTokenRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1349/BatchingTokenRepository.java\nindex b7b0f0fe03b..5d8f509c47a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1349/BatchingTokenRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1349/BatchingTokenRepository.java\n@@ -47,11 +47,10 @@ import static java.lang.Math.toIntExact;\n  * to storage as part of {@link #close() closing}. Instances of this class are thread safe\n  * to call {@link #getOrCreateId(String)} methods on.\n  */\n-public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN extends Token>\n-        implements ToIntFunction<Object>, Closeable\n+public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN extends Token> implements ToIntFunction<Object>, Closeable\n {\n     private final Map<String,Integer> tokens = new HashMap<>();\n-    private final TokenStore<RECORD, TOKEN> store;\n+    private final TokenStore<RECORD,TOKEN> store;\n     private final Loader<RECORD,Void> loader;\n     private int highId;\n     private int highestCreatedId;\n@@ -60,7 +59,7 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN\n     {\n         this.store = store;\n         this.loader = loader;\n-        this.highId = (int)store.getHighId();\n+        this.highId = ( int)store.getHighId();\n         this.highestCreatedId = highId - 1;\n     }\n \n@@ -105,8 +104,7 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN\n             // A raw token id was supplied, just use it\n             return (Integer) key;\n         }\n-        throw new IllegalArgumentException( \"Expected either a String or Integer for property key, but was '\" +\n-                key + \"'\" + \", \" + key.getClass() );\n+        throw new IllegalArgumentException( \"Expected either a String or Integer for property key, but was '\" + key + \"'\" + \", \" + key.getClass() );\n     }\n \n     @Override\n@@ -180,7 +178,7 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN\n         RecordAccess<RECORD,Void> recordAccess = new DirectRecordAccess<>( store, loader );\n \n         // Create the tokens\n-        TokenCreator<RECORD, TOKEN> creator = new TokenCreator<>( store );\n+        TokenCreator<RECORD,TOKEN> creator = new TokenCreator<>( store );\n         int highest = highestCreatedId;\n         for ( Map.Entry<Integer,String> tokenToCreate : sortCreatedTokensById() )\n         {\n@@ -204,13 +202,13 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN\n         {\n             sorted.put( entry.getValue(), entry.getKey() );\n         }\n-        return sorted.entrySet();\n+\n+return sorted.entrySet();\n     }\n \n-    public static class BatchingPropertyKeyTokenRepository\n-            extends BatchingTokenRepository<PropertyKeyTokenRecord, Token>\n+    public static class BatchingPropertyKeyTokenRepository extends BatchingTokenRepository<PropertyKeyTokenRecord, Token>\n     {\n-        public BatchingPropertyKeyTokenRepository( TokenStore<PropertyKeyTokenRecord, Token> store )\n+        public BatchingPropertyKeyTokenRepository( TokenStore<PropertyKeyTokenRecord,Token> store )\n         {\n             super( store, Loaders.propertyKeyTokenLoader( store ) );\n         }\n@@ -218,19 +216,17 @@ public abstract class BatchingTokenRepository<RECORD extends TokenRecord, TOKEN\n \n     public static class BatchingLabelTokenRepository extends BatchingTokenRepository<LabelTokenRecord, Token>\n     {\n-        public BatchingLabelTokenRepository( TokenStore<LabelTokenRecord, Token> store )\n+        public BatchingLabelTokenRepository( TokenStore<LabelTokenRecord,Token> store )\n         {\n             super( store, Loaders.labelTokenLoader( store ) );\n         }\n     }\n \n-    public static class BatchingRelationshipTypeTokenRepository\n-            extends BatchingTokenRepository<RelationshipTypeTokenRecord,RelationshipTypeToken>\n+    public static class BatchingRelationshipTypeTokenRepository extends BatchingTokenRepository<RelationshipTypeTokenRecord,RelationshipTypeToken>\n     {\n-        public BatchingRelationshipTypeTokenRepository( TokenStore<RelationshipTypeTokenRecord,\n-                RelationshipTypeToken> store )\n+        public BatchingRelationshipTypeTokenRepository( TokenStore<RelationshipTypeTokenRecord,RelationshipTypeToken> store )\n         {\n             super( store, Loaders.relationshipTypeTokenLoader( store ) );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}