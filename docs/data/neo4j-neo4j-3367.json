{
    "project_name": "neo4j-neo4j",
    "error_id": "3367",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3367/TokenWrite.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3367/TokenWrite.java\nindex a09762b61dc..f71dee24935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3367/TokenWrite.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3367/TokenWrite.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import org.neo4j.exceptions.KernelException;\n@@ -31,112 +32,116 @@ public interface TokenWrite\n      *\n      * @param labelName the name of the label.\n      * @return id of the created label.\n-     * @throws IllegalTokenNameException if any token name is illegal.\n+     * @throws IllegalTokenNameException            if any token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many labels would be created by this call, compared to the token id space available.\n      */\n-    int labelGetOrCreateForName( String labelName ) throws KernelException;\n+    int labelGetOrCreateForName(String labelName) throws KernelException;\n \n     /**\n      * Get or create the label token ids for each of the given {@code labelNames}, and store them at the corresponding\n      * index in the given {@code labelIds} array.\n-     *\n+     * <p>\n      * This is effectively a batching version of {@link #labelGetOrCreateForName(String)}.\n      *\n      * @param labelNames The array of label names for which to resolve or create their id.\n-     * @param labelIds The array into which the resulting token ids will be stored.\n-     * @throws IllegalTokenNameException if any token name is illegal.\n+     * @param labelIds   The array into which the resulting token ids will be stored.\n+     * @throws IllegalTokenNameException            if any token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many labels would be created by this call, compared to the token id space available.\n      */\n-    void labelGetOrCreateForNames( String[] labelNames, int[] labelIds ) throws KernelException;\n+    void labelGetOrCreateForNames(String[] labelNames, int[] labelIds) throws KernelException;\n \n     /**\n      * Creates a label with the given name.\n      *\n      * @param labelName the name of the label.\n-     * @param internal {@code true} if the token is internal and must not be visible on the product surface, otherwise {@code false} if the token is public.\n+     * @param internal  {@code true} if the token is internal and must not be visible on the product surface, otherwise {@code false} if the token is public.\n      * @return id of the created label.\n-     * @throws IllegalTokenNameException if token name is illegal.\n+     * @throws IllegalTokenNameException            if token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many labels would be created by this call, compared to the token id space available.\n      */\n-    int labelCreateForName( String labelName, boolean internal ) throws KernelException;\n+    int labelCreateForName(String labelName, boolean internal) throws KernelException;\n \n     /**\n      * Creates a property token with the given name.\n      *\n      * @param propertyKeyName the name of the property.\n-     * @param internal {@code true} if the token is internal and must not be visible on the product surface, otherwise {@code false} if the token is public.\n+     * @param internal        {@code true} if the token is internal and must not be visible on the product surface, otherwise {@code false} if the token is public.\n      * @return id of the created property key.\n-     * @throws IllegalTokenNameException if token name is illegal.\n+     * @throws IllegalTokenNameException            if token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many property keys would be created by this call, compared to the token id space available.\n      */\n-    int propertyKeyCreateForName( String propertyKeyName, boolean internal ) throws KernelException;\n+    int propertyKeyCreateForName(String propertyKeyName, boolean internal) throws KernelException;\n \n     /**\n      * Creates a relationship type with the given name.\n+     *\n      * @param relationshipTypeName the name of the relationship.\n-     * @param internal {@code true} if the token is internal and must not be visible on the product surface, otherwise {@code false} if the token is public.\n+     * @param internal             {@code true} if the token is internal and must not be visible on the product surface, otherwise {@code false} if the token is public.\n      * @return id of the created relationship type.\n-     * @throws IllegalTokenNameException if token name is illegal.\n+     * @throws IllegalTokenNameException            if token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many relationship types would be created by this call, compared to the token id space available.\n      */\n-    int relationshipTypeCreateForName( String relationshipTypeName, boolean internal ) throws KernelException;\n+    int relationshipTypeCreateForName(String relationshipTypeName, boolean internal) throws KernelException;\n \n     /**\n      * Returns a property key id for a property key. If the key doesn't exist prior to\n      * this call it gets created.\n+     *\n      * @param propertyKeyName the name of the property key.\n      * @return id of the created property key.\n-     * @throws IllegalTokenNameException if token name is illegal.\n+     * @throws IllegalTokenNameException            if token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many property keys would be created by this call, compared to the token id space available.\n      */\n-    int propertyKeyGetOrCreateForName( String propertyKeyName ) throws KernelException;\n+    int propertyKeyGetOrCreateForName(String propertyKeyName) throws KernelException;\n \n     /**\n      * Get or create the property token ids for each of the given {@code propertyKeys}, and store them at the\n      * corresponding index in the given {@code ids} array.\n-     *\n+     * <p>\n      * This is effectively a batching version of {@link #propertyKeyGetOrCreateForName(String)}.\n      *\n      * @param propertyKeys The array of property names for which to resolve or create their id.\n-     * @param ids The array into which the resulting token ids will be stored.\n-     * @throws IllegalTokenNameException if any token name is illegal.\n+     * @param ids          The array into which the resulting token ids will be stored.\n+     * @throws IllegalTokenNameException            if any token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many property keys would be created by this call, compared to the token id space available.\n      */\n-    void propertyKeyGetOrCreateForNames( String[] propertyKeys, int[] ids ) throws KernelException;\n+    void propertyKeyGetOrCreateForNames(String[] propertyKeys, int[] ids) throws KernelException;\n \n     /**\n      * Returns the id associated with the relationship type or creates a new one.\n+     *\n      * @param relationshipTypeName the name of the relationship\n      * @return the id associated with the name\n-     * @throws IllegalTokenNameException if token name is illegal.\n+     * @throws IllegalTokenNameException            if token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many relationship types would be created by this call, compared to the token id space available.\n      */\n-    int relationshipTypeGetOrCreateForName( String relationshipTypeName ) throws KernelException;\n+    int relationshipTypeGetOrCreateForName(String relationshipTypeName) throws KernelException;\n \n     /**\n      * Get or create the relationship type token ids for each of the given {@code relationshipTypes}, and store them at\n      * the corresponding index in the given {@code ids} array.\n-     *\n+     * <p>\n      * This is effectively a batching version of {@link #relationshipTypeGetOrCreateForName(String)}.\n      *\n      * @param relationshipTypes The array of relationship type names for which to resolve or create their id.\n-     * @param ids The array into which the resulting token ids will be stored.\n-     * @throws IllegalTokenNameException if any token name is illegal.\n+     * @param ids               The array into which the resulting token ids will be stored.\n+     * @throws IllegalTokenNameException            if any token name is illegal.\n      * @throws TokenCapacityExceededKernelException if too many relationship types would be created by this call, compared to the token id space available.\n      */\n-    void relationshipTypeGetOrCreateForNames( String[] relationshipTypes, int[] ids ) throws KernelException;\n+    void relationshipTypeGetOrCreateForNames(String[] relationshipTypes, int[] ids) throws KernelException;\n \n     /**\n      * Checks that the provided token name is a valid one.\n+     *\n      * @param name the token name to check.\n      * @return the token name, for convenience.\n      * @throws IllegalTokenNameException if the token name is not valid.\n      */\n-    static String checkValidTokenName( String name ) throws IllegalTokenNameException\n+    static String checkValidTokenName(String name) throws IllegalTokenNameException\n     {\n-        if ( name == null || name.isEmpty() || name.contains( \"\\0\" ) )\n+        if (name == null || name.isEmpty() || name.contains(\"\\0\"))\n         {\n-            throw new IllegalTokenNameException( name );\n+            throw new IllegalTokenNameException(name);\n         }\n         return name;\n     }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3367/TokenWrite.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3367/TokenWrite.java\nindex a09762b61dc..57157f1ff92 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3367/TokenWrite.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3367/TokenWrite.java\n@@ -140,4 +140,4 @@ public interface TokenWrite\n         }\n         return name;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}