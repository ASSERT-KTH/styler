{
    "project_name": "neo4j-neo4j",
    "error_id": "794",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/794/DatabaseLayoutWatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/794/DatabaseLayoutWatcher.java\nindex bffdaa07d17..7c55e1007c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/794/DatabaseLayoutWatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/794/DatabaseLayoutWatcher.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.fs.watcher;\n \n import java.io.IOException;\n@@ -37,7 +38,7 @@ import static java.util.Objects.requireNonNull;\n  * File system fileWatcher that will remember all the files that it was asked to watch\n  * and will register them in real file watcher during {@link #startWatching()} call.\n  * When watcher will be stopped all registered resources will be closed.\n- *\n+ * <p>\n  * Described pattern allows to perform repeatable startWatching/stopWatching cycle for pre-configured set of files provided by {@link DatabaseLayout}.\n  */\n public class DatabaseLayoutWatcher extends LifecycleAdapter\n@@ -49,11 +50,11 @@ public class DatabaseLayoutWatcher extends LifecycleAdapter\n     private final Set<WatchedResource> watchedResources = ConcurrentHashMap.newKeySet();\n     private FileWatchEventListener eventListener;\n \n-    public DatabaseLayoutWatcher( FileWatcher fileWatcher, DatabaseLayout databaseLayout, FileWatchEventListenerFactory listenerFactory )\n+    public DatabaseLayoutWatcher(FileWatcher fileWatcher, DatabaseLayout databaseLayout, FileWatchEventListenerFactory listenerFactory)\n     {\n-        requireNonNull( fileWatcher );\n-        requireNonNull( databaseLayout );\n-        requireNonNull( listenerFactory );\n+        requireNonNull(fileWatcher);\n+        requireNonNull(databaseLayout);\n+        requireNonNull(listenerFactory);\n         this.fileWatcher = fileWatcher;\n         this.databaseLayout = databaseLayout;\n         this.listenerFactory = listenerFactory;\n@@ -63,63 +64,61 @@ public class DatabaseLayoutWatcher extends LifecycleAdapter\n     public void start() throws Exception\n     {\n         watchDirectories();\n-        eventListener = listenerFactory.createListener( watchedResources );\n-        fileWatcher.addFileWatchEventListener( eventListener );\n+        eventListener = listenerFactory.createListener(watchedResources);\n+        fileWatcher.addFileWatchEventListener(eventListener);\n     }\n \n     @Override\n     public void stop() throws Exception\n     {\n         stopWatching();\n-        fileWatcher.removeFileWatchEventListener( eventListener );\n+        fileWatcher.removeFileWatchEventListener(eventListener);\n     }\n \n     private void watchDirectories()\n     {\n         Neo4jLayout layout = databaseLayout.getNeo4jLayout();\n-        watch( databaseLayout.databaseDirectory() );\n-        watch( databaseLayout.getTransactionLogsDirectory() );\n-        watch( layout.databasesDirectory() );\n-        watch( layout.transactionLogsRootDirectory() );\n-        watch( layout.homeDirectory() );\n+        watch(databaseLayout.databaseDirectory());\n+        watch(databaseLayout.getTransactionLogsDirectory());\n+        watch(layout.databasesDirectory());\n+        watch(layout.transactionLogsRootDirectory());\n+        watch(layout.homeDirectory());\n         startWatching();\n     }\n \n-    private void watch( Path file )\n+    private void watch(Path file)\n     {\n-        filesToWatch.add( file );\n+        filesToWatch.add(file);\n     }\n \n     private void stopWatching()\n     {\n         try\n         {\n-            IOUtils.closeAll( watchedResources );\n+            IOUtils.closeAll(watchedResources);\n             watchedResources.clear();\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new UncheckedIOException( e );\n+            throw new UncheckedIOException(e);\n         }\n     }\n \n     private void startWatching()\n     {\n-        for ( Path fileToWatch : filesToWatch )\n+        for (Path fileToWatch : filesToWatch)\n         {\n-            watchFile( fileToWatch );\n+            watchFile(fileToWatch);\n         }\n     }\n \n-    private void watchFile( Path fileToWatch )\n+    private void watchFile(Path fileToWatch)\n     {\n         try\n         {\n-            watchedResources.add( fileWatcher.watch( fileToWatch ) );\n-        }\n-        catch ( IOException e )\n+            watchedResources.add(fileWatcher.watch(fileToWatch));\n+        } catch (IOException e)\n         {\n-            throw new UncheckedIOException( e );\n+            throw new UncheckedIOException(e);\n         }\n     }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}