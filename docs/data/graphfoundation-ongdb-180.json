{
    "project_name": "graphfoundation-ongdb",
    "error_id": "180",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/180/ConfiguredQueryLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/180/ConfiguredQueryLogger.java\nindex 7e81f63436a..b0a9f64473d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/180/ConfiguredQueryLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/180/ConfiguredQueryLogger.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query;\n \n import java.util.HashSet;\n@@ -34,98 +35,96 @@ import static java.util.concurrent.TimeUnit.NANOSECONDS;\n \n class ConfiguredQueryLogger implements QueryLogger\n {\n-    private final Log log;\n-    private final long thresholdMillis;\n-    private final boolean logQueryParameters;\n-    private final boolean logDetailedTime;\n-    private final boolean logAllocatedBytes;\n-    private final boolean logPageDetails;\n-    private final boolean logRuntime;\n+  private final Log log;\n+  private final long thresholdMillis;\n+  private final boolean logQueryParameters;\n+  private final boolean logDetailedTime;\n+  private final boolean logAllocatedBytes;\n+  private final boolean logPageDetails;\n+  private final boolean logRuntime;\n+\n+  private static final Pattern PASSWORD_PATTERN = Pattern.compile(\n+      // call signature\n+      \"(?:(?i)call)\\\\s+dbms(?:\\\\.security)?\\\\.change(?:User)?Password\\\\(\" +\n+          // optional username parameter, in single, double quotes, or parametrized\n+          \"(?:\\\\s*(?:'(?:(?<=\\\\\\\\)'|[^'])*'|\\\"(?:(?<=\\\\\\\\)\\\"|[^\\\"])*\\\"|[^,]*)\\\\s*,)?\" +\n+          // password parameter, in single, double quotes, or parametrized\n+          \"\\\\s*('(?:(?<=\\\\\\\\)'|[^'])*'|\\\"(?:(?<=\\\\\\\\)\\\"|[^\\\"])*\\\"|\\\\$\\\\w*|\\\\{\\\\w*})\\\\s*\\\\)\");\n \n-    private static final Pattern PASSWORD_PATTERN = Pattern.compile(\n-            // call signature\n-            \"(?:(?i)call)\\\\s+dbms(?:\\\\.security)?\\\\.change(?:User)?Password\\\\(\" +\n-            // optional username parameter, in single, double quotes, or parametrized\n-            \"(?:\\\\s*(?:'(?:(?<=\\\\\\\\)'|[^'])*'|\\\"(?:(?<=\\\\\\\\)\\\"|[^\\\"])*\\\"|[^,]*)\\\\s*,)?\" +\n-            // password parameter, in single, double quotes, or parametrized\n-            \"\\\\s*('(?:(?<=\\\\\\\\)'|[^'])*'|\\\"(?:(?<=\\\\\\\\)\\\"|[^\\\"])*\\\"|\\\\$\\\\w*|\\\\{\\\\w*})\\\\s*\\\\)\" );\n+  ConfiguredQueryLogger(Log log, Config config)\n+  {\n+    this.log = log;\n+    this.thresholdMillis = config.get(GraphDatabaseSettings.log_queries_threshold).toMillis();\n+    this.logQueryParameters = config.get(GraphDatabaseSettings.log_queries_parameter_logging_enabled);\n+    this.logDetailedTime = config.get(GraphDatabaseSettings.log_queries_detailed_time_logging_enabled);\n+    this.logAllocatedBytes = config.get(GraphDatabaseSettings.log_queries_allocation_logging_enabled);\n+    this.logPageDetails = config.get(GraphDatabaseSettings.log_queries_page_detail_logging_enabled);\n+    this.logRuntime = config.get(GraphDatabaseSettings.log_queries_runtime_logging_enabled);\n+  }\n \n-    ConfiguredQueryLogger( Log log, Config config )\n+  @Override\n+  public void failure(ExecutingQuery query, Throwable failure)\n+  {\n+    log.error(logEntry(query.snapshot()), failure);\n+  }\n+\n+  @Override\n+  public void success(ExecutingQuery query)\n+  {\n+    if (NANOSECONDS.toMillis(query.elapsedNanos()) >= thresholdMillis)\n     {\n-        this.log = log;\n-        this.thresholdMillis = config.get( GraphDatabaseSettings.log_queries_threshold ).toMillis();\n-        this.logQueryParameters = config.get( GraphDatabaseSettings.log_queries_parameter_logging_enabled );\n-        this.logDetailedTime = config.get( GraphDatabaseSettings.log_queries_detailed_time_logging_enabled );\n-        this.logAllocatedBytes = config.get( GraphDatabaseSettings.log_queries_allocation_logging_enabled );\n-        this.logPageDetails = config.get( GraphDatabaseSettings.log_queries_page_detail_logging_enabled );\n-        this.logRuntime = config.get( GraphDatabaseSettings.log_queries_runtime_logging_enabled );\n+      QuerySnapshot snapshot = query.snapshot();\n+      log.info(logEntry(snapshot));\n     }\n+  }\n+\n+  private String logEntry(QuerySnapshot query)\n+  {\n+    String sourceString = query.clientConnection().asConnectionDetails();\n+    String queryText = query.queryText();\n \n-    @Override\n-    public void failure( ExecutingQuery query, Throwable failure )\n+    Set<String> passwordParams = new HashSet<>();\n+    Matcher matcher = PASSWORD_PATTERN.matcher(queryText);\n+\n+    while (matcher.find())\n     {\n-        log.error( logEntry( query.snapshot() ), failure );\n+      String password = matcher.group(1).trim();\n+      if (password.charAt(0) == '$')\n+      {\n+        passwordParams.add(password.substring(1));\n+      } else if (password.charAt(0) == '{')\n+      {\n+        passwordParams.add(password.substring(1, password.length() - 1));\n+      } else\n+      {\n+        queryText = queryText.replace(password, \"******\");\n+      }\n     }\n \n-    @Override\n-    public void success( ExecutingQuery query )\n+    StringBuilder result = new StringBuilder();\n+    result.append(query.elapsedTimeMillis()).append(\" ms: \");\n+    if (logDetailedTime)\n     {\n-        if ( NANOSECONDS.toMillis( query.elapsedNanos() ) >= thresholdMillis )\n-        {\n-            QuerySnapshot snapshot = query.snapshot();\n-            log.info( logEntry( snapshot ) );\n-        }\n+      QueryLogFormatter.formatDetailedTime(result, query);\n     }\n-\n-    private String logEntry( QuerySnapshot query )\n+    if (logAllocatedBytes)\n     {\n-        String sourceString = query.clientConnection().asConnectionDetails();\n-        String queryText = query.queryText();\n-\n-        Set<String> passwordParams = new HashSet<>();\n-        Matcher matcher = PASSWORD_PATTERN.matcher( queryText );\n-\n-        while ( matcher.find() )\n-        {\n-            String password = matcher.group( 1 ).trim();\n-            if ( password.charAt( 0 ) == '$' )\n-            {\n-                passwordParams.add( password.substring( 1 ) );\n-            }\n-            else if ( password.charAt( 0 ) == '{' )\n-            {\n-                passwordParams.add( password.substring( 1, password.length() - 1 ) );\n-            }\n-            else\n-            {\n-                queryText = queryText.replace( password, \"******\" );\n-            }\n-        }\n-\n-        StringBuilder result = new StringBuilder();\n-        result.append( query.elapsedTimeMillis() ).append( \" ms: \" );\n-        if ( logDetailedTime )\n-        {\n-            QueryLogFormatter.formatDetailedTime( result, query );\n-        }\n-        if ( logAllocatedBytes )\n-        {\n-            QueryLogFormatter.formatAllocatedBytes( result, query );\n-        }\n-        if ( logPageDetails )\n-        {\n-            QueryLogFormatter.formatPageDetails( result, query );\n-        }\n-        result.append( sourceString ).append( \" - \" ).append( queryText );\n-        if ( logQueryParameters )\n-        {\n-            QueryLogFormatter.formatMapValue( result.append(\" - \"), query.queryParameters(), passwordParams );\n-        }\n-        if ( logRuntime )\n-        {\n-            result.append( \" - runtime=\" ).append( query.runtime() );\n-        }\n-        QueryLogFormatter.formatMap( result.append(\" - \"), query.transactionAnnotationData() );\n-        return result.toString();\n+      QueryLogFormatter.formatAllocatedBytes(result, query);\n+    }\n+    if (logPageDetails)\n+    {\n+      QueryLogFormatter.formatPageDetails(result, query);\n+    }\n+    result.append(sourceString).append(\" - \").append(queryText);\n+    if (logQueryParameters)\n+    {\n+      QueryLogFormatter.formatMapValue(result.append(\" - \"), query.queryParameters(), passwordParams);\n+    }\n+    if (logRuntime)\n+    {\n+      result.append(\" - runtime=\").append(query.runtime());\n     }\n+    QueryLogFormatter.formatMap(result.append(\" - \"), query.transactionAnnotationData());\n+    return result.toString();\n+  }\n }\n",
            "diff_size": 125
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}