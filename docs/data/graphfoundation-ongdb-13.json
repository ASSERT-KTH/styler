{
    "project_name": "graphfoundation-ongdb",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/13/CorruptedLogsTruncator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/13/CorruptedLogsTruncator.java\nindex 764e37a47bc..6d1b5f6c132 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/13/CorruptedLogsTruncator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/13/CorruptedLogsTruncator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.recovery;\n \n import java.io.BufferedOutputStream;\n@@ -48,122 +49,122 @@ import static java.lang.String.format;\n  */\n public class CorruptedLogsTruncator\n {\n-    public static final String CORRUPTED_TX_LOGS_BASE_NAME = \"corrupted-\" + TransactionLogFiles.DEFAULT_NAME;\n-    private static final String LOG_FILE_ARCHIVE_PATTERN = CORRUPTED_TX_LOGS_BASE_NAME + \"-%d-%d-%d.zip\";\n+  public static final String CORRUPTED_TX_LOGS_BASE_NAME = \"corrupted-\" + TransactionLogFiles.DEFAULT_NAME;\n+  private static final String LOG_FILE_ARCHIVE_PATTERN = CORRUPTED_TX_LOGS_BASE_NAME + \"-%d-%d-%d.zip\";\n \n-    private final File storeDir;\n-    private final LogFiles logFiles;\n-    private final FileSystemAbstraction fs;\n+  private final File storeDir;\n+  private final LogFiles logFiles;\n+  private final FileSystemAbstraction fs;\n \n-    public CorruptedLogsTruncator( File storeDir, LogFiles logFiles, FileSystemAbstraction fs )\n-    {\n-        this.storeDir = storeDir;\n-        this.logFiles = logFiles;\n-        this.fs = fs;\n-    }\n+  public CorruptedLogsTruncator(File storeDir, LogFiles logFiles, FileSystemAbstraction fs)\n+  {\n+    this.storeDir = storeDir;\n+    this.logFiles = logFiles;\n+    this.fs = fs;\n+  }\n \n-    /**\n-     * Truncate all transaction logs after provided position. Log version specified in a position will be\n-     * truncated to provided byte offset, any subsequent log files will be deleted. Backup copy of removed data will\n-     * be stored in separate archive.\n-     * @param positionAfterLastRecoveredTransaction position after last recovered transaction\n-     * @throws IOException\n-     */\n-    public void truncate( LogPosition positionAfterLastRecoveredTransaction ) throws IOException\n+  /**\n+   * Truncate all transaction logs after provided position. Log version specified in a position will be\n+   * truncated to provided byte offset, any subsequent log files will be deleted. Backup copy of removed data will\n+   * be stored in separate archive.\n+   *\n+   * @param positionAfterLastRecoveredTransaction position after last recovered transaction\n+   * @throws IOException\n+   */\n+  public void truncate(LogPosition positionAfterLastRecoveredTransaction) throws IOException\n+  {\n+    long recoveredTransactionLogVersion = positionAfterLastRecoveredTransaction.getLogVersion();\n+    long recoveredTransactionOffset = positionAfterLastRecoveredTransaction.getByteOffset();\n+    if (isRecoveredLogCorrupted(recoveredTransactionLogVersion, recoveredTransactionOffset) ||\n+        haveMoreRecentLogFiles(recoveredTransactionLogVersion))\n     {\n-        long recoveredTransactionLogVersion = positionAfterLastRecoveredTransaction.getLogVersion();\n-        long recoveredTransactionOffset = positionAfterLastRecoveredTransaction.getByteOffset();\n-        if ( isRecoveredLogCorrupted( recoveredTransactionLogVersion, recoveredTransactionOffset ) ||\n-                haveMoreRecentLogFiles( recoveredTransactionLogVersion ) )\n-        {\n-            backupCorruptedContent( recoveredTransactionLogVersion, recoveredTransactionOffset );\n-            truncateLogFiles( recoveredTransactionLogVersion, recoveredTransactionOffset );\n-        }\n+      backupCorruptedContent(recoveredTransactionLogVersion, recoveredTransactionOffset);\n+      truncateLogFiles(recoveredTransactionLogVersion, recoveredTransactionOffset);\n     }\n+  }\n \n-    private void truncateLogFiles( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-            throws IOException\n-    {\n-        File lastRecoveredTransactionLog = logFiles.getLogFileForVersion( recoveredTransactionLogVersion );\n-        fs.truncate( lastRecoveredTransactionLog, recoveredTransactionOffset );\n-        forEachSubsequentLogFile( recoveredTransactionLogVersion,\n-                fileIndex -> fs.deleteFile( logFiles.getLogFileForVersion( fileIndex ) ) );\n-    }\n+  private void truncateLogFiles(long recoveredTransactionLogVersion, long recoveredTransactionOffset)\n+      throws IOException\n+  {\n+    File lastRecoveredTransactionLog = logFiles.getLogFileForVersion(recoveredTransactionLogVersion);\n+    fs.truncate(lastRecoveredTransactionLog, recoveredTransactionOffset);\n+    forEachSubsequentLogFile(recoveredTransactionLogVersion,\n+        fileIndex -> fs.deleteFile(logFiles.getLogFileForVersion(fileIndex)));\n+  }\n \n-    private void forEachSubsequentLogFile( long recoveredTransactionLogVersion, LongConsumer action )\n+  private void forEachSubsequentLogFile(long recoveredTransactionLogVersion, LongConsumer action)\n+  {\n+    long highestLogVersion = logFiles.getHighestLogVersion();\n+    for (long fileIndex = recoveredTransactionLogVersion + 1; fileIndex <= highestLogVersion; fileIndex++)\n     {\n-        long highestLogVersion = logFiles.getHighestLogVersion();\n-        for ( long fileIndex = recoveredTransactionLogVersion + 1; fileIndex <= highestLogVersion; fileIndex++ )\n-        {\n-            action.accept( fileIndex );\n-        }\n+      action.accept(fileIndex);\n     }\n+  }\n \n-    private void backupCorruptedContent( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-            throws IOException\n+  private void backupCorruptedContent(long recoveredTransactionLogVersion, long recoveredTransactionOffset)\n+      throws IOException\n+  {\n+    File corruptedLogArchive = getArchiveFile(recoveredTransactionLogVersion, recoveredTransactionOffset);\n+    try (ZipOutputStream recoveryContent = new ZipOutputStream(\n+        new BufferedOutputStream(fs.openAsOutputStream(corruptedLogArchive, false))))\n     {\n-        File corruptedLogArchive = getArchiveFile( recoveredTransactionLogVersion, recoveredTransactionOffset );\n-        try ( ZipOutputStream recoveryContent = new ZipOutputStream(\n-                new BufferedOutputStream( fs.openAsOutputStream( corruptedLogArchive, false ) ) ) )\n+      ByteBuffer zipBuffer = ByteBuffer.allocate((int) ByteUnit.mebiBytes(1));\n+      copyTransactionLogContent(recoveredTransactionLogVersion, recoveredTransactionOffset, recoveryContent,\n+          zipBuffer);\n+      forEachSubsequentLogFile(recoveredTransactionLogVersion, fileIndex ->\n+      {\n+        try\n+        {\n+          copyTransactionLogContent(fileIndex, 0, recoveryContent, zipBuffer);\n+        } catch (IOException io)\n         {\n-            ByteBuffer zipBuffer = ByteBuffer.allocate( (int) ByteUnit.mebiBytes( 1 ) );\n-            copyTransactionLogContent( recoveredTransactionLogVersion, recoveredTransactionOffset, recoveryContent,\n-                    zipBuffer );\n-            forEachSubsequentLogFile( recoveredTransactionLogVersion, fileIndex ->\n-            {\n-                try\n-                {\n-                    copyTransactionLogContent( fileIndex, 0, recoveryContent, zipBuffer );\n-                }\n-                catch ( IOException io )\n-                {\n-                    throw new UncheckedIOException( io );\n-                }\n-            } );\n+          throw new UncheckedIOException(io);\n         }\n+      });\n     }\n+  }\n \n-    private File getArchiveFile( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-            throws IOException\n-    {\n-        File corruptedLogsFolder = new File( storeDir, CORRUPTED_TX_LOGS_BASE_NAME );\n-        fs.mkdirs( corruptedLogsFolder );\n-        return new File( corruptedLogsFolder,\n-                format( LOG_FILE_ARCHIVE_PATTERN, recoveredTransactionLogVersion, recoveredTransactionOffset,\n-                        System.currentTimeMillis() ) );\n-    }\n+  private File getArchiveFile(long recoveredTransactionLogVersion, long recoveredTransactionOffset)\n+      throws IOException\n+  {\n+    File corruptedLogsFolder = new File(storeDir, CORRUPTED_TX_LOGS_BASE_NAME);\n+    fs.mkdirs(corruptedLogsFolder);\n+    return new File(corruptedLogsFolder,\n+        format(LOG_FILE_ARCHIVE_PATTERN, recoveredTransactionLogVersion, recoveredTransactionOffset,\n+            System.currentTimeMillis()));\n+  }\n \n-    private void copyTransactionLogContent( long logFileIndex, long logOffset, ZipOutputStream destination,\n-            ByteBuffer byteBuffer ) throws IOException\n+  private void copyTransactionLogContent(long logFileIndex, long logOffset, ZipOutputStream destination,\n+                                         ByteBuffer byteBuffer) throws IOException\n+  {\n+    File logFile = logFiles.getLogFileForVersion(logFileIndex);\n+    if (fs.getFileSize(logFile) == logOffset)\n     {\n-        File logFile = logFiles.getLogFileForVersion( logFileIndex );\n-        if ( fs.getFileSize( logFile ) == logOffset )\n-        {\n-            // file was recovered fully, nothing to backup\n-            return;\n-        }\n-        ZipEntry zipEntry = new ZipEntry( logFile.getName() );\n-        destination.putNextEntry( zipEntry );\n-        try ( StoreChannel transactionLogChannel = fs.open( logFile, OpenMode.READ ) )\n-        {\n-            transactionLogChannel.position( logOffset );\n-            while ( transactionLogChannel.read( byteBuffer ) >= 0 )\n-            {\n-                byteBuffer.flip();\n-                destination.write( byteBuffer.array(), byteBuffer.position(), byteBuffer.remaining() );\n-                byteBuffer.clear();\n-            }\n-        }\n-        destination.closeEntry();\n+      // file was recovered fully, nothing to backup\n+      return;\n     }\n-\n-    private boolean haveMoreRecentLogFiles( long recoveredTransactionLogVersion )\n+    ZipEntry zipEntry = new ZipEntry(logFile.getName());\n+    destination.putNextEntry(zipEntry);\n+    try (StoreChannel transactionLogChannel = fs.open(logFile, OpenMode.READ))\n     {\n-        return logFiles.getHighestLogVersion() > recoveredTransactionLogVersion;\n+      transactionLogChannel.position(logOffset);\n+      while (transactionLogChannel.read(byteBuffer) >= 0)\n+      {\n+        byteBuffer.flip();\n+        destination.write(byteBuffer.array(), byteBuffer.position(), byteBuffer.remaining());\n+        byteBuffer.clear();\n+      }\n     }\n+    destination.closeEntry();\n+  }\n \n-    private boolean isRecoveredLogCorrupted( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-    {\n-        return logFiles.getLogFileForVersion( recoveredTransactionLogVersion ).length() > recoveredTransactionOffset;\n-    }\n+  private boolean haveMoreRecentLogFiles(long recoveredTransactionLogVersion)\n+  {\n+    return logFiles.getHighestLogVersion() > recoveredTransactionLogVersion;\n+  }\n+\n+  private boolean isRecoveredLogCorrupted(long recoveredTransactionLogVersion, long recoveredTransactionOffset)\n+  {\n+    return logFiles.getLogFileForVersion(recoveredTransactionLogVersion).length() > recoveredTransactionOffset;\n+  }\n }\n",
            "diff_size": 138
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "104",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/13/CorruptedLogsTruncator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/13/CorruptedLogsTruncator.java\nindex 764e37a47bc..8ba6f42d716 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/13/CorruptedLogsTruncator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/13/CorruptedLogsTruncator.java\n@@ -50,8 +50,7 @@ public class CorruptedLogsTruncator\n {\n     public static final String CORRUPTED_TX_LOGS_BASE_NAME = \"corrupted-\" + TransactionLogFiles.DEFAULT_NAME;\n     private static final String LOG_FILE_ARCHIVE_PATTERN = CORRUPTED_TX_LOGS_BASE_NAME + \"-%d-%d-%d.zip\";\n-\n-    private final File storeDir;\n+private final File storeDir;\n     private final LogFiles logFiles;\n     private final FileSystemAbstraction fs;\n \n@@ -73,17 +72,15 @@ public class CorruptedLogsTruncator\n     {\n         long recoveredTransactionLogVersion = positionAfterLastRecoveredTransaction.getLogVersion();\n         long recoveredTransactionOffset = positionAfterLastRecoveredTransaction.getByteOffset();\n-        if ( isRecoveredLogCorrupted( recoveredTransactionLogVersion, recoveredTransactionOffset ) ||\n-                haveMoreRecentLogFiles( recoveredTransactionLogVersion ) )\n+        if ( isRecoveredLogCorrupted( recoveredTransactionLogVersion, recoveredTransactionOffset ) || haveMoreRecentLogFiles( recoveredTransactionLogVersion ) )\n         {\n             backupCorruptedContent( recoveredTransactionLogVersion, recoveredTransactionOffset );\n             truncateLogFiles( recoveredTransactionLogVersion, recoveredTransactionOffset );\n         }\n     }\n \n-    private void truncateLogFiles( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-            throws IOException\n-    {\n+    private void truncateLogFiles( long recoveredTransactionLogVersion, long recoveredTransactionOffset ) throws IOException\n+{\n         File lastRecoveredTransactionLog = logFiles.getLogFileForVersion( recoveredTransactionLogVersion );\n         fs.truncate( lastRecoveredTransactionLog, recoveredTransactionOffset );\n         forEachSubsequentLogFile( recoveredTransactionLogVersion,\n@@ -99,17 +96,15 @@ public class CorruptedLogsTruncator\n         }\n     }\n \n-    private void backupCorruptedContent( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-            throws IOException\n-    {\n+    private void backupCorruptedContent( long recoveredTransactionLogVersion, long recoveredTransactionOffset ) throws IOException\n+{\n         File corruptedLogArchive = getArchiveFile( recoveredTransactionLogVersion, recoveredTransactionOffset );\n-        try ( ZipOutputStream recoveryContent = new ZipOutputStream(\n-                new BufferedOutputStream( fs.openAsOutputStream( corruptedLogArchive, false ) ) ) )\n+        try ( ZipOutputStream recoveryContent = new ZipOutputStream( new BufferedOutputStream( fs.openAsOutputStream( corruptedLogArchive, false ) ) ) )\n         {\n-            ByteBuffer zipBuffer = ByteBuffer.allocate( (int) ByteUnit.mebiBytes( 1 ) );\n+            ByteBuffer zipBuffer = ByteBuffer.allocate( ( int) ByteUnit.mebiBytes( 1 ) );\n             copyTransactionLogContent( recoveredTransactionLogVersion, recoveredTransactionOffset, recoveryContent,\n                     zipBuffer );\n-            forEachSubsequentLogFile( recoveredTransactionLogVersion, fileIndex ->\n+forEachSubsequentLogFile( recoveredTransactionLogVersion, fileIndex ->\n             {\n                 try\n                 {\n@@ -123,9 +118,8 @@ public class CorruptedLogsTruncator\n         }\n     }\n \n-    private File getArchiveFile( long recoveredTransactionLogVersion, long recoveredTransactionOffset )\n-            throws IOException\n-    {\n+    private File getArchiveFile( long recoveredTransactionLogVersion, long recoveredTransactionOffset ) throws IOException\n+{\n         File corruptedLogsFolder = new File( storeDir, CORRUPTED_TX_LOGS_BASE_NAME );\n         fs.mkdirs( corruptedLogsFolder );\n         return new File( corruptedLogsFolder,\n@@ -135,14 +129,15 @@ public class CorruptedLogsTruncator\n \n     private void copyTransactionLogContent( long logFileIndex, long logOffset, ZipOutputStream destination,\n             ByteBuffer byteBuffer ) throws IOException\n-    {\n+{\n         File logFile = logFiles.getLogFileForVersion( logFileIndex );\n         if ( fs.getFileSize( logFile ) == logOffset )\n         {\n             // file was recovered fully, nothing to backup\n             return;\n         }\n-        ZipEntry zipEntry = new ZipEntry( logFile.getName() );\n+\n+ZipEntry zipEntry = new ZipEntry( logFile.getName() );\n         destination.putNextEntry( zipEntry );\n         try ( StoreChannel transactionLogChannel = fs.open( logFile, OpenMode.READ ) )\n         {\n@@ -166,4 +161,4 @@ public class CorruptedLogsTruncator\n     {\n         return logFiles.getLogFileForVersion( recoveredTransactionLogVersion ).length() > recoveredTransactionOffset;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}