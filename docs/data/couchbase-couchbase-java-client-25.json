{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "89",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * Creates a {@link RawJsonDocument} which the document id, JSON content, CAS value, expiration time and status code.\n     *\n     * This factory method is normally only called within the client library when a response is analyzed and a document\n     * is returned which is enriched with the status code. It does not make sense to pre populate the status field from",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/25/RawJsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/25/RawJsonDocument.java\nindex 9bd182935c2..441ada98070 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/25/RawJsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/25/RawJsonDocument.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.document;\n \n import java.io.IOException;\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/25/RawJsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/25/RawJsonDocument.java\nindex 9bd182935c2..18f6697e167 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/25/RawJsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/25/RawJsonDocument.java\n@@ -145,4 +145,4 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n         readFromSerializedStream(stream);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/25/RawJsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/25/RawJsonDocument.java\nindex 9bd182935c2..5385413276c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/25/RawJsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/25/RawJsonDocument.java\n@@ -36,6 +36,8 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n+\n+\n public class RawJsonDocument extends AbstractDocument<String> implements Serializable {\n \n     private static final long serialVersionUID = 375731014642624274L;\n@@ -57,6 +59,7 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param content the content of the document.\n      * @return a {@link RawJsonDocument}.\n      */\n+\n     public static RawJsonDocument create(String id, String content) {\n         return new RawJsonDocument(id, 0, content, 0);\n     }\n@@ -69,6 +72,7 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link RawJsonDocument}.\n      */\n+\n     public static RawJsonDocument create(String id, String content, long cas) {\n         return new RawJsonDocument(id, 0, content, cas);\n     }\n@@ -81,6 +85,7 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param expiry the expiration time of the document.\n      * @return a {@link RawJsonDocument}.\n      */\n+\n     public static RawJsonDocument create(String id, int expiry, String content) {\n         return new RawJsonDocument(id, expiry, content, 0);\n     }\n@@ -98,6 +103,7 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param expiry the expiration time of the document.\n      * @return a {@link RawJsonDocument}.\n      */\n+\n     public static RawJsonDocument create(String id, int expiry, String content, long cas) {\n         return new RawJsonDocument(id, expiry, content, cas);\n     }\n@@ -110,6 +116,7 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param content the content of the document.\n      * @return a copied {@link RawJsonDocument} with the changed properties.\n      */\n+\n     public static RawJsonDocument from(RawJsonDocument doc, String id, String content) {\n         return RawJsonDocument.create(id, doc.expiry(), content, doc.cas());\n     }\n@@ -121,6 +128,7 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a copied {@link RawJsonDocument} with the changed properties.\n      */\n+\n     public static RawJsonDocument from(RawJsonDocument doc, long cas) {\n         return RawJsonDocument.create(doc.id(), doc.expiry(), doc.content(), cas);\n     }\n@@ -133,6 +141,8 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @param expiry the expiration time of the document.\n      */\n+\n+\n     private RawJsonDocument(String id, int expiry, String content, long cas) {\n         super(id, expiry, content, cas);\n     }\n@@ -145,4 +155,4 @@ public class RawJsonDocument extends AbstractDocument<String> implements Seriali\n         readFromSerializedStream(stream);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}