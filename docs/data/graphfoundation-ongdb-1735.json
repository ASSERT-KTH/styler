{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1735",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1735/ExtensionClassVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1735/ExtensionClassVisitor.java\nindex b8d8f62ee64..12d1f27e2f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1735/ExtensionClassVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1735/ExtensionClassVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.visitors;\n \n import java.util.HashSet;\n@@ -36,56 +37,56 @@ import org.neo4j.tooling.procedure.messages.ExtensionMissingPublicNoArgConstruct\n \n import static javax.lang.model.util.ElementFilter.constructorsIn;\n \n-public class ExtensionClassVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>,Void>\n+public class ExtensionClassVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>, Void>\n {\n \n-    private final Set<TypeElement> visitedElements = new HashSet<>();\n-    private final FieldVisitor fieldVisitor;\n+  private final Set<TypeElement> visitedElements = new HashSet<>();\n+  private final FieldVisitor fieldVisitor;\n \n-    public ExtensionClassVisitor( Types types, Elements elements, boolean ignoresWarnings )\n-    {\n-        fieldVisitor = new FieldVisitor( types, elements, ignoresWarnings );\n-    }\n+  public ExtensionClassVisitor(Types types, Elements elements, boolean ignoresWarnings)\n+  {\n+    fieldVisitor = new FieldVisitor(types, elements, ignoresWarnings);\n+  }\n \n-    @Override\n-    public Stream<CompilationMessage> visitType( TypeElement extensionClass, Void ignored )\n+  @Override\n+  public Stream<CompilationMessage> visitType(TypeElement extensionClass, Void ignored)\n+  {\n+    if (isFirstVisit(extensionClass))\n     {\n-        if ( isFirstVisit( extensionClass ) )\n-        {\n-            return Stream.concat( validateFields( extensionClass ), validateConstructor( extensionClass ) );\n-        }\n-        return Stream.empty();\n+      return Stream.concat(validateFields(extensionClass), validateConstructor(extensionClass));\n     }\n+    return Stream.empty();\n+  }\n \n-    /**\n-     * Check if the {@link TypeElement} is visited for the first time. A {@link TypeElement} will be visited once per\n-     * procedure it contains, but it only needs to be validated once.\n-     *\n-     * @param e The visited {@link TypeElement}\n-     * @return true for the first visit of the {@link TypeElement}, false afterwards\n-     */\n-    private boolean isFirstVisit( TypeElement e )\n-    {\n-        return visitedElements.add( e );\n-    }\n+  /**\n+   * Check if the {@link TypeElement} is visited for the first time. A {@link TypeElement} will be visited once per\n+   * procedure it contains, but it only needs to be validated once.\n+   *\n+   * @param e The visited {@link TypeElement}\n+   * @return true for the first visit of the {@link TypeElement}, false afterwards\n+   */\n+  private boolean isFirstVisit(TypeElement e)\n+  {\n+    return visitedElements.add(e);\n+  }\n \n-    private Stream<CompilationMessage> validateFields( TypeElement e )\n-    {\n-        return e.getEnclosedElements().stream().flatMap( fieldVisitor::visit );\n-    }\n+  private Stream<CompilationMessage> validateFields(TypeElement e)\n+  {\n+    return e.getEnclosedElements().stream().flatMap(fieldVisitor::visit);\n+  }\n \n-    private Stream<CompilationMessage> validateConstructor( Element extensionClass )\n-    {\n-        Optional<ExecutableElement> publicNoArgConstructor =\n-                constructorsIn( extensionClass.getEnclosedElements() ).stream()\n-                        .filter( c -> c.getModifiers().contains( Modifier.PUBLIC ) )\n-                        .filter( c -> c.getParameters().isEmpty() ).findFirst();\n+  private Stream<CompilationMessage> validateConstructor(Element extensionClass)\n+  {\n+    Optional<ExecutableElement> publicNoArgConstructor =\n+        constructorsIn(extensionClass.getEnclosedElements()).stream()\n+            .filter(c -> c.getModifiers().contains(Modifier.PUBLIC))\n+            .filter(c -> c.getParameters().isEmpty()).findFirst();\n \n-        if ( !publicNoArgConstructor.isPresent() )\n-        {\n-            return Stream.of( new ExtensionMissingPublicNoArgConstructor( extensionClass,\n-                    \"Extension class %s should contain a public no-arg constructor, none found.\", extensionClass ) );\n-        }\n-        return Stream.empty();\n+    if (!publicNoArgConstructor.isPresent())\n+    {\n+      return Stream.of(new ExtensionMissingPublicNoArgConstructor(extensionClass,\n+          \"Extension class %s should contain a public no-arg constructor, none found.\", extensionClass));\n     }\n+    return Stream.empty();\n+  }\n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1735/ExtensionClassVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1735/ExtensionClassVisitor.java\nindex b8d8f62ee64..f71faa435f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1735/ExtensionClassVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1735/ExtensionClassVisitor.java\n@@ -38,7 +38,6 @@ import static javax.lang.model.util.ElementFilter.constructorsIn;\n \n public class ExtensionClassVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>,Void>\n {\n-\n     private final Set<TypeElement> visitedElements = new HashSet<>();\n     private final FieldVisitor fieldVisitor;\n \n@@ -54,7 +53,8 @@ public class ExtensionClassVisitor extends SimpleElementVisitor8<Stream<Compilat\n         {\n             return Stream.concat( validateFields( extensionClass ), validateConstructor( extensionClass ) );\n         }\n-        return Stream.empty();\n+\n+return Stream.empty();\n     }\n \n     /**\n@@ -76,16 +76,12 @@ public class ExtensionClassVisitor extends SimpleElementVisitor8<Stream<Compilat\n \n     private Stream<CompilationMessage> validateConstructor( Element extensionClass )\n     {\n-        Optional<ExecutableElement> publicNoArgConstructor =\n-                constructorsIn( extensionClass.getEnclosedElements() ).stream()\n-                        .filter( c -> c.getModifiers().contains( Modifier.PUBLIC ) )\n-                        .filter( c -> c.getParameters().isEmpty() ).findFirst();\n-\n-        if ( !publicNoArgConstructor.isPresent() )\n+        Optional<ExecutableElement> publicNoArgConstructor = constructorsIn( extensionClass.getEnclosedElements() ).stream().filter( c -> c.getModifiers().contains( Modifier.PUBLIC ) ).filter( c -> c.getParameters().isEmpty() ).findFirst();\n+if ( !publicNoArgConstructor.isPresent() )\n         {\n-            return Stream.of( new ExtensionMissingPublicNoArgConstructor( extensionClass,\n-                    \"Extension class %s should contain a public no-arg constructor, none found.\", extensionClass ) );\n+            return Stream.of( new ExtensionMissingPublicNoArgConstructor( extensionClass, \"Extension class %s should contain a public no-arg constructor, none found.\", extensionClass ) );\n         }\n-        return Stream.empty();\n+\n+return Stream.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}