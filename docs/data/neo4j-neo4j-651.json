{
    "project_name": "neo4j-neo4j",
    "error_id": "651",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "128",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/651/SettingImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/651/SettingImpl.java\nindex 3e214d4a0d8..c2bcab2c9be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/651/SettingImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/651/SettingImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -49,13 +50,13 @@ public final class SettingImpl<T> implements Setting<T>\n     private boolean deprecated;\n     private String documentedDefaultValue;\n \n-    private SettingImpl( String name,\n-            SettingValueParser<T> parser,\n-            T defaultValue,\n-            List<SettingConstraint<T>> constraints,\n-            boolean dynamic,\n-            boolean immutable,\n-            SettingImpl<T> dependency )\n+    private SettingImpl(String name,\n+                        SettingValueParser<T> parser,\n+                        T defaultValue,\n+                        List<SettingConstraint<T>> constraints,\n+                        boolean dynamic,\n+                        boolean immutable,\n+                        SettingImpl<T> dependency)\n     {\n         this.name = name;\n         this.parser = parser;\n@@ -64,13 +65,13 @@ public final class SettingImpl<T> implements Setting<T>\n         this.defaultValue = defaultValue;\n         this.dynamic = dynamic;\n         this.immutable = immutable;\n-        this.internal = name != null && name.contains( \"unsupported.\" );\n-        this.suffix = StringUtils.isNotEmpty( name ) ? name.substring( name.lastIndexOf( '.' ) + 1 ) : name;\n+        this.internal = name != null && name.contains(\"unsupported.\");\n+        this.suffix = StringUtils.isNotEmpty(name) ? name.substring(name.lastIndexOf('.') + 1) : name;\n     }\n \n-    public static <T> Builder<T> newBuilder( String name, SettingValueParser<T> parser, T defaultValue )\n+    public static <T> Builder<T> newBuilder(String name, SettingValueParser<T> parser, T defaultValue)\n     {\n-        return new Builder<>( name, parser, defaultValue );\n+        return new Builder<>(name, parser, defaultValue);\n     }\n \n     @Override\n@@ -79,55 +80,54 @@ public final class SettingImpl<T> implements Setting<T>\n         return defaultValue;\n     }\n \n-    public T parse( String value )\n+    public T parse(String value)\n     {\n-        if ( value == null )\n+        if (value == null)\n         {\n-           return null;\n+            return null;\n         }\n \n-        return parser.parse( value );\n+        return parser.parse(value);\n     }\n \n-    public String valueToString( T value )\n+    public String valueToString(T value)\n     {\n-        if ( value != null )\n+        if (value != null)\n         {\n-            return parser.valueToString( value );\n+            return parser.valueToString(value);\n         }\n         return \"No Value\";\n     }\n \n-    T solveDefault( T value, T defaultValue )\n+    T solveDefault(T value, T defaultValue)\n     {\n         return parser.solveDefault(value, defaultValue);\n     }\n \n-    T solveDependency( T value, T dependencyValue )\n+    T solveDependency(T value, T dependencyValue)\n     {\n-        return parser.solveDependency( value, dependencyValue );\n+        return parser.solveDependency(value, dependencyValue);\n     }\n \n-    public void validate( T value, Configuration config )\n+    public void validate(T value, Configuration config)\n     {\n-        if ( value != null )\n+        if (value != null)\n         {\n-            if ( !parser.getType().isAssignableFrom( value.getClass() ) ) //Does only check outer class if generic types.\n+            if (!parser.getType().isAssignableFrom(value.getClass())) //Does only check outer class if generic types.\n             {\n-                throw new IllegalArgumentException( format( \"Setting '%s' can not have value '%s'. Should be of type '%s', but is '%s'\",\n-                                name, value, parser.getType().getSimpleName(), value.getClass().getSimpleName() ) );\n+                throw new IllegalArgumentException(format(\"Setting '%s' can not have value '%s'. Should be of type '%s', but is '%s'\",\n+                  name, value, parser.getType().getSimpleName(), value.getClass().getSimpleName()));\n             }\n             try\n             {\n-                parser.validate( value );\n-                for ( SettingConstraint<T> constraint : constraints )\n+                parser.validate(value);\n+                for (SettingConstraint<T> constraint : constraints)\n                 {\n-                    constraint.validate( value, config );\n+                    constraint.validate(value, config);\n                 }\n-            }\n-            catch ( IllegalArgumentException e )\n+            } catch (IllegalArgumentException e)\n             {\n-                throw Exceptions.withMessage( e, format( \"Failed to validate '%s' for '%s': %s\", value, name(), e.getMessage() ) );\n+                throw Exceptions.withMessage(e, format(\"Failed to validate '%s' for '%s': %s\", value, name(), e.getMessage()));\n             }\n \n         }\n@@ -136,17 +136,17 @@ public final class SettingImpl<T> implements Setting<T>\n     @Override\n     public String toString()\n     {\n-        String desc = format( \"%s, %s\", name, parser.getDescription() );\n+        String desc = format(\"%s, %s\", name, parser.getDescription());\n \n-        if ( !constraints.isEmpty() )\n+        if (!constraints.isEmpty())\n         {\n-            String constraintDesc = constraints.stream().map( SettingConstraint::getDescription ).collect( Collectors.joining( \" and \" ) );\n-            desc = format( \"%s which %s\", desc, constraintDesc );\n+            String constraintDesc = constraints.stream().map(SettingConstraint::getDescription).collect(Collectors.joining(\" and \"));\n+            desc = format(\"%s which %s\", desc, constraintDesc);\n         }\n \n-        if ( dependency != null )\n+        if (dependency != null)\n         {\n-            desc = format( \"%s. %s from %s\", desc, parser.getSolverDescription(), dependency.name() );\n+            desc = format(\"%s. %s from %s\", desc, parser.getSolverDescription(), dependency.name());\n         }\n \n         return desc;\n@@ -164,24 +164,24 @@ public final class SettingImpl<T> implements Setting<T>\n     }\n \n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n         SettingImpl<?> setting = (SettingImpl<?>) o;\n-        return name.equals( setting.name );\n+        return name.equals(setting.name);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash( name );\n+        return Objects.hash(name);\n     }\n \n     @Override\n@@ -222,7 +222,7 @@ public final class SettingImpl<T> implements Setting<T>\n         return documentedDefaultValue;\n     }\n \n-    void setDescription( String description )\n+    void setDescription(String description)\n     {\n         this.description = description;\n     }\n@@ -237,7 +237,7 @@ public final class SettingImpl<T> implements Setting<T>\n         deprecated = true;\n     }\n \n-    void setDocumentedDefaultValue( String documentedDefaultValue )\n+    void setDocumentedDefaultValue(String documentedDefaultValue)\n     {\n         this.documentedDefaultValue = documentedDefaultValue;\n     }\n@@ -257,7 +257,7 @@ public final class SettingImpl<T> implements Setting<T>\n         private boolean immutable;\n         private SettingImpl<T> dependency;\n \n-        private Builder( String name, SettingValueParser<T> parser, T defaultValue )\n+        private Builder(String name, SettingValueParser<T> parser, T defaultValue)\n         {\n             this.name = name;\n             this.parser = parser;\n@@ -276,14 +276,14 @@ public final class SettingImpl<T> implements Setting<T>\n             return this;\n         }\n \n-        public Builder<T> addConstraint( SettingConstraint<T> constraint )\n+        public Builder<T> addConstraint(SettingConstraint<T> constraint)\n         {\n-            constraint.setParser( parser );\n-            constraints.add( constraint );\n+            constraint.setParser(parser);\n+            constraints.add(constraint);\n             return this;\n         }\n \n-        public Builder<T> setDependency( Setting<T> setting )\n+        public Builder<T> setDependency(Setting<T> setting)\n         {\n             dependency = (SettingImpl<T>) setting;\n             return this;\n@@ -291,16 +291,16 @@ public final class SettingImpl<T> implements Setting<T>\n \n         public Setting<T> build()\n         {\n-            if ( immutable && dynamic )\n+            if (immutable && dynamic)\n             {\n-                throw new IllegalArgumentException( \"Setting can not be both dynamic and immutable\" );\n+                throw new IllegalArgumentException(\"Setting can not be both dynamic and immutable\");\n             }\n-            if ( dependency != null && !dependency.immutable() )\n+            if (dependency != null && !dependency.immutable())\n             {\n-                throw new IllegalArgumentException( \"Setting can only have immutable dependency\" );\n+                throw new IllegalArgumentException(\"Setting can only have immutable dependency\");\n             }\n \n-            return new SettingImpl<>( name, parser, defaultValue, constraints, dynamic, immutable, dependency );\n+            return new SettingImpl<>(name, parser, defaultValue, constraints, dynamic, immutable, dependency);\n         }\n     }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/651/SettingImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/651/SettingImpl.java\nindex 3e214d4a0d8..8102a90d217 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/651/SettingImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/651/SettingImpl.java\n@@ -100,7 +100,7 @@ public final class SettingImpl<T> implements Setting<T>\n \n     T solveDefault( T value, T defaultValue )\n     {\n-        return parser.solveDefault(value, defaultValue);\n+        return parser.solveDefault( value, defaultValue);\n     }\n \n     T solveDependency( T value, T dependencyValue )\n@@ -114,8 +114,7 @@ public final class SettingImpl<T> implements Setting<T>\n         {\n             if ( !parser.getType().isAssignableFrom( value.getClass() ) ) //Does only check outer class if generic types.\n             {\n-                throw new IllegalArgumentException( format( \"Setting '%s' can not have value '%s'. Should be of type '%s', but is '%s'\",\n-                                name, value, parser.getType().getSimpleName(), value.getClass().getSimpleName() ) );\n+                throw new IllegalArgumentException( format( \"Setting '%s' can not have value '%s'. Should be of type '%s', but is '%s'\", name, value, parser.getType().getSimpleName(), value.getClass().getSimpleName() ) );\n             }\n             try\n             {\n@@ -129,8 +128,7 @@ public final class SettingImpl<T> implements Setting<T>\n             {\n                 throw Exceptions.withMessage( e, format( \"Failed to validate '%s' for '%s': %s\", value, name(), e.getMessage() ) );\n             }\n-\n-        }\n+    }\n     }\n \n     @Override\n@@ -303,4 +301,4 @@ public final class SettingImpl<T> implements Setting<T>\n             return new SettingImpl<>( name, parser, defaultValue, constraints, dynamic, immutable, dependency );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}