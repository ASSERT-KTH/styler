{
    "project_name": "graphfoundation-ongdb",
    "error_id": "97",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "159",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/97/EnterpriseConstraintSemantics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/97/EnterpriseConstraintSemantics.java\nindex 9aa9f4ebe99..a094bcaf9ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/97/EnterpriseConstraintSemantics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/97/EnterpriseConstraintSemantics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.enterprise;\n \n import java.util.Iterator;\n@@ -48,170 +49,170 @@ import static org.neo4j.kernel.impl.enterprise.PropertyExistenceEnforcer.getOrCr\n \n public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n {\n-    @Override\n-    protected ConstraintDescriptor readNonStandardConstraint( ConstraintRule rule, String errorMessage )\n-    {\n-        if ( !rule.getConstraintDescriptor().enforcesPropertyExistence() )\n-        {\n-            throw new IllegalStateException( \"Unsupported constraint type: \" + rule );\n-        }\n-        return rule.getConstraintDescriptor();\n-    }\n-\n-    @Override\n-    public ConstraintRule createNodeKeyConstraintRule(\n-            long ruleId, NodeKeyConstraintDescriptor descriptor, long indexId )\n-    {\n-        return ConstraintRule.constraintRule( ruleId, descriptor, indexId );\n-    }\n-\n-    @Override\n-    public ConstraintRule createExistenceConstraint( long ruleId, ConstraintDescriptor descriptor )\n+  @Override\n+  protected ConstraintDescriptor readNonStandardConstraint(ConstraintRule rule, String errorMessage)\n+  {\n+    if (!rule.getConstraintDescriptor().enforcesPropertyExistence())\n     {\n-        return ConstraintRule.constraintRule( ruleId, descriptor );\n+      throw new IllegalStateException(\"Unsupported constraint type: \" + rule);\n     }\n-\n-    @Override\n-    public void validateNodePropertyExistenceConstraint( Iterator<Cursor<NodeItem>> allNodes,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n+    return rule.getConstraintDescriptor();\n+  }\n+\n+  @Override\n+  public ConstraintRule createNodeKeyConstraintRule(\n+      long ruleId, NodeKeyConstraintDescriptor descriptor, long indexId)\n+  {\n+    return ConstraintRule.constraintRule(ruleId, descriptor, indexId);\n+  }\n+\n+  @Override\n+  public ConstraintRule createExistenceConstraint(long ruleId, ConstraintDescriptor descriptor)\n+  {\n+    return ConstraintRule.constraintRule(ruleId, descriptor);\n+  }\n+\n+  @Override\n+  public void validateNodePropertyExistenceConstraint(Iterator<Cursor<NodeItem>> allNodes,\n+                                                      LabelSchemaDescriptor descriptor, BiPredicate<NodeItem, Integer> hasPropertyCheck)\n+      throws CreateConstraintFailureException\n+  {\n+    while (allNodes.hasNext())\n     {\n-        while ( allNodes.hasNext() )\n+      try (Cursor<NodeItem> cursor = allNodes.next())\n+      {\n+        NodeItem node = cursor.get();\n+        for (int propertyKey : descriptor.getPropertyIds())\n         {\n-            try ( Cursor<NodeItem> cursor = allNodes.next() )\n-            {\n-                NodeItem node = cursor.get();\n-                for ( int propertyKey : descriptor.getPropertyIds() )\n-                {\n-                    validateNodePropertyExistenceConstraint( node, propertyKey, descriptor, hasPropertyCheck );\n-                }\n-            }\n+          validateNodePropertyExistenceConstraint(node, propertyKey, descriptor, hasPropertyCheck);\n         }\n+      }\n     }\n-\n-    @Override\n-    public void validateNodePropertyExistenceConstraint( NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n-            PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor )\n-            throws CreateConstraintFailureException\n+  }\n+\n+  @Override\n+  public void validateNodePropertyExistenceConstraint(NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n+                                                      PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor)\n+      throws CreateConstraintFailureException\n+  {\n+    while (allNodes.next())\n     {\n-        while ( allNodes.next() )\n+      allNodes.node(nodeCursor);\n+      while (nodeCursor.next())\n+      {\n+        for (int propertyKey : descriptor.getPropertyIds())\n         {\n-            allNodes.node( nodeCursor );\n-            while ( nodeCursor.next() )\n-            {\n-                for ( int propertyKey : descriptor.getPropertyIds() )\n-                {\n-                    nodeCursor.properties( propertyCursor );\n-                    if ( !hasProperty( propertyCursor, propertyKey ) )\n-                    {\n-                        throw createConstraintFailure(\n-                                new NodePropertyExistenceException( descriptor, VERIFICATION,\n-                                        nodeCursor.nodeReference() ) );\n-                    }\n-                }\n-            }\n+          nodeCursor.properties(propertyCursor);\n+          if (!hasProperty(propertyCursor, propertyKey))\n+          {\n+            throw createConstraintFailure(\n+                new NodePropertyExistenceException(descriptor, VERIFICATION,\n+                    nodeCursor.nodeReference()));\n+          }\n         }\n+      }\n     }\n-\n-    @Override\n-    public void validateNodeKeyConstraint( Iterator<Cursor<NodeItem>> allNodes,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n+  }\n+\n+  @Override\n+  public void validateNodeKeyConstraint(Iterator<Cursor<NodeItem>> allNodes,\n+                                        LabelSchemaDescriptor descriptor, BiPredicate<NodeItem, Integer> hasPropertyCheck)\n+      throws CreateConstraintFailureException\n+  {\n+    validateNodePropertyExistenceConstraint(allNodes, descriptor, hasPropertyCheck);\n+  }\n+\n+  @Override\n+  public void validateNodeKeyConstraint(NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n+                                        PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor) throws CreateConstraintFailureException\n+  {\n+    validateNodePropertyExistenceConstraint(allNodes, nodeCursor, propertyCursor, descriptor);\n+  }\n+\n+  private void validateNodePropertyExistenceConstraint(NodeItem node, int propertyKey,\n+                                                       LabelSchemaDescriptor descriptor, BiPredicate<NodeItem, Integer> hasPropertyCheck) throws\n+      CreateConstraintFailureException\n+  {\n+    if (!hasPropertyCheck.test(node, propertyKey))\n     {\n-        validateNodePropertyExistenceConstraint( allNodes, descriptor, hasPropertyCheck );\n+      throw createConstraintFailure(\n+          new NodePropertyExistenceException(descriptor, VERIFICATION, node.id()));\n     }\n+  }\n \n-    @Override\n-    public void validateNodeKeyConstraint( NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n-            PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor ) throws CreateConstraintFailureException\n+  private boolean hasProperty(PropertyCursor propertyCursor, int property)\n+  {\n+    while (propertyCursor.next())\n     {\n-        validateNodePropertyExistenceConstraint( allNodes, nodeCursor, propertyCursor, descriptor );\n+      if (propertyCursor.propertyKey() == property)\n+      {\n+        return true;\n+      }\n     }\n-\n-    private void validateNodePropertyExistenceConstraint( NodeItem node, int propertyKey,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck ) throws\n-            CreateConstraintFailureException\n+    return false;\n+  }\n+\n+  @Override\n+  public void validateRelationshipPropertyExistenceConstraint(Cursor<RelationshipItem> allRelationships,\n+                                                              RelationTypeSchemaDescriptor descriptor, BiPredicate<RelationshipItem, Integer> hasPropertyCheck)\n+      throws CreateConstraintFailureException\n+  {\n+    while (allRelationships.next())\n     {\n-        if ( !hasPropertyCheck.test( node, propertyKey ) )\n+      RelationshipItem relationship = allRelationships.get();\n+      for (int propertyId : descriptor.getPropertyIds())\n+      {\n+        if (relationship.type() == descriptor.getRelTypeId() &&\n+            !hasPropertyCheck.test(relationship, propertyId))\n         {\n-            throw createConstraintFailure(\n-                    new NodePropertyExistenceException( descriptor, VERIFICATION, node.id() ) );\n+          throw createConstraintFailure(\n+              new RelationshipPropertyExistenceException(descriptor, VERIFICATION, relationship.id()));\n         }\n+      }\n     }\n-\n-    private boolean hasProperty( PropertyCursor propertyCursor, int property )\n+  }\n+\n+  @Override\n+  public void validateRelationshipPropertyExistenceConstraint(RelationshipScanCursor relationshipCursor,\n+                                                              PropertyCursor propertyCursor, RelationTypeSchemaDescriptor descriptor)\n+      throws CreateConstraintFailureException\n+  {\n+    while (relationshipCursor.next())\n     {\n-        while ( propertyCursor.next() )\n-        {\n-            if ( propertyCursor.propertyKey() == property )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n+      relationshipCursor.properties(propertyCursor);\n \n-    @Override\n-    public void validateRelationshipPropertyExistenceConstraint( Cursor<RelationshipItem> allRelationships,\n-            RelationTypeSchemaDescriptor descriptor, BiPredicate<RelationshipItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n-    {\n-        while ( allRelationships.next() )\n+      for (int propertyKey : descriptor.getPropertyIds())\n+      {\n+        if (relationshipCursor.type() == descriptor.getRelTypeId() &&\n+            !hasProperty(propertyCursor, propertyKey))\n         {\n-            RelationshipItem relationship = allRelationships.get();\n-            for ( int propertyId : descriptor.getPropertyIds() )\n-            {\n-                if ( relationship.type() == descriptor.getRelTypeId() &&\n-                     !hasPropertyCheck.test( relationship, propertyId ) )\n-                {\n-                    throw createConstraintFailure(\n-                            new RelationshipPropertyExistenceException( descriptor, VERIFICATION, relationship.id() ) );\n-                }\n-            }\n+          throw createConstraintFailure(\n+              new RelationshipPropertyExistenceException(descriptor, VERIFICATION,\n+                  relationshipCursor.relationshipReference()));\n         }\n+      }\n     }\n-\n-    @Override\n-    public void validateRelationshipPropertyExistenceConstraint( RelationshipScanCursor relationshipCursor,\n-            PropertyCursor propertyCursor, RelationTypeSchemaDescriptor descriptor )\n-            throws CreateConstraintFailureException\n+  }\n+\n+  private CreateConstraintFailureException createConstraintFailure(ConstraintValidationException it)\n+  {\n+    return new CreateConstraintFailureException(it.constraint(), it);\n+  }\n+\n+  @Override\n+  public TxStateVisitor decorateTxStateVisitor(StoreReadLayer storeLayer, ReadableTransactionState txState,\n+                                               TxStateVisitor visitor)\n+  {\n+    if (!txState.hasDataChanges())\n     {\n-        while ( relationshipCursor.next() )\n-        {\n-            relationshipCursor.properties( propertyCursor );\n-\n-            for ( int propertyKey : descriptor.getPropertyIds() )\n-            {\n-                if ( relationshipCursor.type() == descriptor.getRelTypeId() &&\n-                     !hasProperty( propertyCursor, propertyKey ) )\n-                {\n-                    throw createConstraintFailure(\n-                            new RelationshipPropertyExistenceException( descriptor, VERIFICATION,\n-                                    relationshipCursor.relationshipReference() ) );\n-                }\n-            }\n-        }\n-    }\n-\n-    private CreateConstraintFailureException createConstraintFailure( ConstraintValidationException it )\n-    {\n-        return new CreateConstraintFailureException( it.constraint(), it );\n-    }\n-\n-    @Override\n-    public TxStateVisitor decorateTxStateVisitor( StoreReadLayer storeLayer, ReadableTransactionState txState,\n-            TxStateVisitor visitor )\n-    {\n-        if ( !txState.hasDataChanges() )\n-        {\n-            // If there are no data changes, there is no need to enforce constraints. Since there is no need to\n-            // enforce constraints, there is no need to build up the state required to be able to enforce constraints.\n-            // In fact, it might even be counter productive to build up that state, since if there are no data changes\n-            // there would be schema changes instead, and in that case we would throw away the schema-dependant state\n-            // we just built when the schema changing transaction commits.\n-            return visitor;\n-        }\n-        return getOrCreatePropertyExistenceEnforcerFrom( storeLayer )\n-                .decorate( visitor, txState, storeLayer );\n+      // If there are no data changes, there is no need to enforce constraints. Since there is no need to\n+      // enforce constraints, there is no need to build up the state required to be able to enforce constraints.\n+      // In fact, it might even be counter productive to build up that state, since if there are no data changes\n+      // there would be schema changes instead, and in that case we would throw away the schema-dependant state\n+      // we just built when the schema changing transaction commits.\n+      return visitor;\n     }\n+    return getOrCreatePropertyExistenceEnforcerFrom(storeLayer)\n+        .decorate(visitor, txState, storeLayer);\n+  }\n }\n",
            "diff_size": 218
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "157",
                    "column": "71",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "column": "77",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/97/EnterpriseConstraintSemantics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/97/EnterpriseConstraintSemantics.java\nindex 9aa9f4ebe99..065e235ade1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/97/EnterpriseConstraintSemantics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/97/EnterpriseConstraintSemantics.java\n@@ -55,12 +55,12 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n         {\n             throw new IllegalStateException( \"Unsupported constraint type: \" + rule );\n         }\n-        return rule.getConstraintDescriptor();\n+\n+return rule.getConstraintDescriptor();\n     }\n \n     @Override\n-    public ConstraintRule createNodeKeyConstraintRule(\n-            long ruleId, NodeKeyConstraintDescriptor descriptor, long indexId )\n+    public ConstraintRule createNodeKeyConstraintRule( long ruleId, NodeKeyConstraintDescriptor descriptor, long indexId )\n     {\n         return ConstraintRule.constraintRule( ruleId, descriptor, indexId );\n     }\n@@ -73,9 +73,8 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n \n     @Override\n     public void validateNodePropertyExistenceConstraint( Iterator<Cursor<NodeItem>> allNodes,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n-    {\n+            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck ) throws CreateConstraintFailureException\n+{\n         while ( allNodes.hasNext() )\n         {\n             try ( Cursor<NodeItem> cursor = allNodes.next() )\n@@ -91,9 +90,8 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n \n     @Override\n     public void validateNodePropertyExistenceConstraint( NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n-            PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor )\n-            throws CreateConstraintFailureException\n-    {\n+            PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor ) throws CreateConstraintFailureException\n+{\n         while ( allNodes.next() )\n         {\n             allNodes.node( nodeCursor );\n@@ -104,10 +102,9 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n                     nodeCursor.properties( propertyCursor );\n                     if ( !hasProperty( propertyCursor, propertyKey ) )\n                     {\n-                        throw createConstraintFailure(\n-                                new NodePropertyExistenceException( descriptor, VERIFICATION,\n+                        throw createConstraintFailure( new NodePropertyExistenceException( descriptor, VERIFICATION,\n                                         nodeCursor.nodeReference() ) );\n-                    }\n+    }\n                 }\n             }\n         }\n@@ -115,28 +112,25 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n \n     @Override\n     public void validateNodeKeyConstraint( Iterator<Cursor<NodeItem>> allNodes,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n-    {\n+            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck ) throws CreateConstraintFailureException\n+{\n         validateNodePropertyExistenceConstraint( allNodes, descriptor, hasPropertyCheck );\n     }\n \n     @Override\n     public void validateNodeKeyConstraint( NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n             PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor ) throws CreateConstraintFailureException\n-    {\n+{\n         validateNodePropertyExistenceConstraint( allNodes, nodeCursor, propertyCursor, descriptor );\n     }\n \n     private void validateNodePropertyExistenceConstraint( NodeItem node, int propertyKey,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck ) throws\n-            CreateConstraintFailureException\n-    {\n+            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasPropertyCheck ) throws CreateConstraintFailureException\n+{\n         if ( !hasPropertyCheck.test( node, propertyKey ) )\n         {\n-            throw createConstraintFailure(\n-                    new NodePropertyExistenceException( descriptor, VERIFICATION, node.id() ) );\n-        }\n+            throw createConstraintFailure( new NodePropertyExistenceException( descriptor, VERIFICATION, node.id() ) );\n+    }\n     }\n \n     private boolean hasProperty( PropertyCursor propertyCursor, int property )\n@@ -153,42 +147,35 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n \n     @Override\n     public void validateRelationshipPropertyExistenceConstraint( Cursor<RelationshipItem> allRelationships,\n-            RelationTypeSchemaDescriptor descriptor, BiPredicate<RelationshipItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n-    {\n+            RelationTypeSchemaDescriptor descriptor, BiPredicate<RelationshipItem,Integer> hasPropertyCheck ) throws CreateConstraintFailureException\n+{\n         while ( allRelationships.next() )\n         {\n             RelationshipItem relationship = allRelationships.get();\n             for ( int propertyId : descriptor.getPropertyIds() )\n             {\n-                if ( relationship.type() == descriptor.getRelTypeId() &&\n-                     !hasPropertyCheck.test( relationship, propertyId ) )\n-                {\n-                    throw createConstraintFailure(\n-                            new RelationshipPropertyExistenceException( descriptor, VERIFICATION, relationship.id() ) );\n-                }\n+                if ( relationship.type() == descriptor.getRelTypeId() &&!hasPropertyCheck.test( relationship, propertyId ) )\n+{\n+                    throw createConstraintFailure( new RelationshipPropertyExistenceException( descriptor, VERIFICATION, relationship.id() ) );\n+    }\n             }\n         }\n     }\n \n     @Override\n     public void validateRelationshipPropertyExistenceConstraint( RelationshipScanCursor relationshipCursor,\n-            PropertyCursor propertyCursor, RelationTypeSchemaDescriptor descriptor )\n-            throws CreateConstraintFailureException\n-    {\n+            PropertyCursor propertyCursor, RelationTypeSchemaDescriptor descriptor ) throws CreateConstraintFailureException\n+{\n         while ( relationshipCursor.next() )\n         {\n             relationshipCursor.properties( propertyCursor );\n-\n-            for ( int propertyKey : descriptor.getPropertyIds() )\n+for ( int propertyKey : descriptor.getPropertyIds() )\n             {\n-                if ( relationshipCursor.type() == descriptor.getRelTypeId() &&\n-                     !hasProperty( propertyCursor, propertyKey ) )\n-                {\n-                    throw createConstraintFailure(\n-                            new RelationshipPropertyExistenceException( descriptor, VERIFICATION,\n+                if ( relationshipCursor.type() == descriptor.getRelTypeId() &&!hasProperty( propertyCursor, propertyKey ) )\n+{\n+                    throw createConstraintFailure( new RelationshipPropertyExistenceException( descriptor, VERIFICATION,\n                                     relationshipCursor.relationshipReference() ) );\n-                }\n+    }\n             }\n         }\n     }\n@@ -211,7 +198,7 @@ public class EnterpriseConstraintSemantics extends StandardConstraintSemantics\n             // we just built when the schema changing transaction commits.\n             return visitor;\n         }\n-        return getOrCreatePropertyExistenceEnforcerFrom( storeLayer )\n-                .decorate( visitor, txState, storeLayer );\n+\n+return getOrCreatePropertyExistenceEnforcerFrom( storeLayer ).decorate( visitor, txState, storeLayer );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}