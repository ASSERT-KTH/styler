{
    "project_name": "Qihoo360-Quicksql",
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "91",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        try {\n            DatabaseMetaData dbMetadata = connection.getMetaData();\n            resultSet = dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n                    new String[] { \"TABLE\" });\n            while (resultSet.next()) {\n                String name = resultSet.getString(\"TABLE_NAME\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/71/JdbcCollector.java\nindex bae4baefc9d..e5a1a12736c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/71/JdbcCollector.java\n@@ -88,7 +88,8 @@ public abstract class JdbcCollector extends MetadataCollector {\n         List<String> tableNames = new ArrayList<>();\n         try {\n             DatabaseMetaData dbMetadata = connection.getMetaData();\n-            resultSet = dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n+            resultSet = dbMetadata.getTables(null, ((HiveProp)prop).getDbName()\n+            . toUpperCase(), filterRegexp.toUpperCase(),\n                     new String[] { \"TABLE\" });\n             while (resultSet.next()) {\n                 String name = resultSet.getString(\"TABLE_NAME\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/71/JdbcCollector.java\nindex bae4baefc9d..d2e8ce7965d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/71/JdbcCollector.java\n@@ -88,8 +88,9 @@ public abstract class JdbcCollector extends MetadataCollector {\n         List<String> tableNames = new ArrayList<>();\n         try {\n             DatabaseMetaData dbMetadata = connection.getMetaData();\n-            resultSet = dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n-                    new String[] { \"TABLE\" });\n+            resultSet =\n+                dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n+                    new String[] {\"TABLE\"});\n             while (resultSet.next()) {\n                 String name = resultSet.getString(\"TABLE_NAME\");\n                 tableNames.add(name);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'while' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/naturalize/71/JdbcCollector.java\nindex bae4baefc9d..a658f335077 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/naturalize/71/JdbcCollector.java\n@@ -89,8 +89,9 @@ public abstract class JdbcCollector extends MetadataCollector {\n         try {\n             DatabaseMetaData dbMetadata = connection.getMetaData();\n             resultSet = dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n-                    new String[] { \"TABLE\" });\n-            while (resultSet.next()) {\n+    new String[] { \"TABLE\"\n+    });\n+while (resultSet.next()) {\n                 String name = resultSet.getString(\"TABLE_NAME\");\n                 tableNames.add(name);\n             }\n@@ -103,4 +104,4 @@ public abstract class JdbcCollector extends MetadataCollector {\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/71/JdbcCollector.java\nindex bae4baefc9d..1290a5cff22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/71/JdbcCollector.java\n@@ -8,7 +8,6 @@ import com.qihoo.qsql.metadata.entity.TableValue;\n import java.util.Date;\n import org.apache.commons.dbutils.DbUtils;\n import org.apache.commons.lang3.StringUtils;\n-\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n@@ -18,10 +17,10 @@ import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n \n+\n public abstract class JdbcCollector extends MetadataCollector {\n \n     protected JdbcProp prop;\n-\n     protected Connection connection;\n \n     JdbcCollector(String filterRegexp) throws SQLException {\n@@ -31,23 +30,28 @@ public abstract class JdbcCollector extends MetadataCollector {\n     @Override\n     protected List<DatabaseParamValue> convertDatabaseParamValue(Long dbId) {\n         DatabaseParamValue[] paramValues = new DatabaseParamValue[4];\n+\n         for (int i = 0; i < paramValues.length; i++) {\n             paramValues[i] = new DatabaseParamValue(dbId);\n         }\n-        paramValues[0].setParamKey(\"jdbcUrl\").setParamValue(prop.getJdbcUrl());\n-        paramValues[1].setParamKey(\"jdbcDriver\").setParamValue(prop.getJdbcDriver());\n-        paramValues[2].setParamKey(\"jdbcUser\").setParamValue(prop.getJdbcUser());\n-        paramValues[3].setParamKey(\"jdbcPassword\").setParamValue(prop.getJdbcPassword());\n+        paramValues[0]\n+            .setParamKey(\"jdbcUrl\").setParamValue(prop.getJdbcUrl());\n+        paramValues[1]\n+            .setParamKey(\"jdbcDriver\").setParamValue(prop.getJdbcDriver());\n+        paramValues[2]\n+            .setParamKey(\"jdbcUser\").setParamValue(prop.getJdbcUser());\n+        paramValues[3]\n+            .setParamKey(\"jdbcPassword\").setParamValue(prop.getJdbcPassword());\n         return Arrays.stream(paramValues).collect(Collectors.toList());\n     }\n \n-\n     @Override\n     protected TableValue convertTableValue(Long dbId, String tableName) {\n         TableValue value = new TableValue();\n         value.setTblName(tableName);\n         value.setDbId(dbId);\n-        value.setCreateTime(new Date().toString());\n+        value.setCreateTime(new Date()\n+            .toString());\n         return value;\n     }\n \n@@ -62,7 +66,6 @@ public abstract class JdbcCollector extends MetadataCollector {\n                 String name = resultSet.getString(\"COLUMN_NAME\");\n                 String type = resultSet.getString(\"TYPE_NAME\");\n                 int columnIdx = resultSet.getInt(\"ORDINAL_POSITION\");\n-\n                 ColumnValue value = new ColumnValue();\n                 value.setColumnName(name);\n                 value.setTypeName(type);\n@@ -88,19 +91,22 @@ public abstract class JdbcCollector extends MetadataCollector {\n         List<String> tableNames = new ArrayList<>();\n         try {\n             DatabaseMetaData dbMetadata = connection.getMetaData();\n-            resultSet = dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n-                    new String[] { \"TABLE\" });\n+            resultSet = dbMetadata.getTables(null,\n+                                             ((HiveProp) prop).getDbName()\n+                                                              .toUpperCase(),\n+                                             filterRegexp.toUpperCase(),\n+                                             new String[] {\n+                                                 \"TABLE\"\n+                                             });\n             while (resultSet.next()) {\n                 String name = resultSet.getString(\"TABLE_NAME\");\n                 tableNames.add(name);\n             }\n-\n             return tableNames;\n         } catch (SQLException ex) {\n             throw new RuntimeException(ex);\n         } finally {\n             DbUtils.closeQuietly(resultSet);\n         }\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_three_grams/71/JdbcCollector.java\nindex bae4baefc9d..e5a1a12736c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/71/JdbcCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_three_grams/71/JdbcCollector.java\n@@ -88,7 +88,8 @@ public abstract class JdbcCollector extends MetadataCollector {\n         List<String> tableNames = new ArrayList<>();\n         try {\n             DatabaseMetaData dbMetadata = connection.getMetaData();\n-            resultSet = dbMetadata.getTables(null, ((HiveProp) prop).getDbName().toUpperCase(), filterRegexp.toUpperCase(),\n+            resultSet = dbMetadata.getTables(null, ((HiveProp)prop).getDbName()\n+            . toUpperCase(), filterRegexp.toUpperCase(),\n                     new String[] { \"TABLE\" });\n             while (resultSet.next()) {\n                 String name = resultSet.getString(\"TABLE_NAME\");\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_random"
    ]
}