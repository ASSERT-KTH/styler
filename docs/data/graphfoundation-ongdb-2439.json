{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2439",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "197",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "206",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "264",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "364",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "425",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "435",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "473",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "483",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "496",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "518",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "584",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2439/MuninnPagedFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2439/MuninnPagedFile.java\nindex b9cff05f40d..07304d1e4b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2439/MuninnPagedFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2439/MuninnPagedFile.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl.muninn;\n \n import java.io.File;\n@@ -47,705 +48,697 @@ import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n \n final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n {\n-    static final int UNMAPPED_TTE = -1;\n-    private static final int translationTableChunkSizePower = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.translationTableChunkSizePower\", 12 );\n-    private static final int translationTableChunkSize = 1 << translationTableChunkSizePower;\n-    private static final long translationTableChunkSizeMask = translationTableChunkSize - 1;\n-    private static final int translationTableChunkArrayBase = UnsafeUtil.arrayBaseOffset( int[].class );\n-    private static final int translationTableChunkArrayScale = UnsafeUtil.arrayIndexScale( int[].class );\n-\n-    private static final long headerStateOffset =\n-            UnsafeUtil.getFieldOffset( MuninnPagedFile.class, \"headerState\" );\n-    private static final int headerStateRefCountShift = 48;\n-    private static final int headerStateRefCountMax = 0x7FFF;\n-    private static final long headerStateRefCountMask = 0x7FFF_0000_0000_0000L;\n-    private static final long headerStateLastPageIdMask = 0x8000_FFFF_FFFF_FFFFL;\n-    private static final int PF_LOCK_MASK = PF_SHARED_WRITE_LOCK | PF_SHARED_READ_LOCK;\n-\n-    final MuninnPageCache pageCache;\n-    final int filePageSize;\n-    private final PageCacheTracer pageCacheTracer;\n-    final LatchMap pageFaultLatches;\n-\n-    // This is the table where we translate file-page-ids to cache-page-ids. Only one thread can perform a resize at\n-    // a time, and we ensure this mutual exclusion using the monitor lock on this MuninnPagedFile object.\n-    volatile int[][] translationTable;\n-\n-    final PageSwapper swapper;\n-    final int swapperId;\n-    private final CursorFactory cursorFactory;\n-\n-    // Guarded by the monitor lock on MuninnPageCache (map and unmap)\n-    private boolean deleteOnClose;\n-\n-    // Used to trace the causes of any exceptions from getLastPageId.\n-    private volatile Exception closeStackTrace;\n-\n-    // max modifier transaction id among evicted pages for this file\n-    private static final long evictedTransactionIdOffset = UnsafeUtil.getFieldOffset( MuninnPagedFile.class, \"highestEvictedTransactionId\" );\n-    @SuppressWarnings( \"unused\" ) // accessed using unsafe\n-    private volatile long highestEvictedTransactionId;\n-\n-    /**\n-     * The header state includes both the reference count of the PagedFile \u2013 15 bits \u2013 and the ID of the last page in\n-     * the file \u2013 48 bits, plus an empty file marker bit. Because our pages are usually 2^13 bytes, this means that we\n-     * only lose 3 bits to the reference count, in terms of keeping large files byte addressable.\n-     *\n-     * The layout looks like this:\n-     *\n-     * \u250f\u2501 Empty file marker bit. When 1, the file is empty.\n-     * \u2503    \u250f\u2501 Reference count, 15 bits.\n-     * \u2503    \u2503                \u250f\u2501 48 bits for the last page id.\n-     * \u2503\u250f\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u250f\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n-     * MRRRRRRR RRRRRRRR IIIIIIII IIIIIIII IIIIIIII IIIIIIII IIIIIIII IIIIIIII\n-     * 1        2        3        4        5        6        7        8        byte\n-     */\n-    @SuppressWarnings( \"unused\" ) // Accessed via Unsafe\n-    private volatile long headerState;\n-\n-    /**\n-     * Create muninn page file\n-     * @param file original file\n-     * @param pageCache page cache\n-     * @param filePageSize file page size\n-     * @param swapperFactory page cache swapper factory\n-     * @param pageCacheTracer global page cache tracer\n-     * @param pageCursorTracerSupplier supplier of thread local (transaction local) page cursor tracer that will provide\n-     * thread local page cache statistics\n-     * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n-     * access to thread local version context\n-     * @param createIfNotExists should create file if it does not exists\n-     * @param truncateExisting should truncate file if it exists\n-     * @throws IOException If the {@link PageSwapper} could not be created.\n-     */\n-    MuninnPagedFile( File file, MuninnPageCache pageCache, int filePageSize, PageSwapperFactory swapperFactory,\n-            PageCacheTracer pageCacheTracer, PageCursorTracerSupplier pageCursorTracerSupplier,\n-            VersionContextSupplier versionContextSupplier, boolean createIfNotExists, boolean truncateExisting ) throws IOException\n-    {\n-        super( pageCache.pages );\n-        this.pageCache = pageCache;\n-        this.filePageSize = filePageSize;\n-        this.cursorFactory = new CursorFactory( this, pageCursorTracerSupplier, pageCacheTracer, versionContextSupplier );\n-        this.pageCacheTracer = pageCacheTracer;\n-        this.pageFaultLatches = new LatchMap();\n-\n-        // The translation table is an array of arrays of integers that are either UNMAPPED_TTE, or the id of a page in\n-        // the page list. The table only grows the outer array, and all the inner \"chunks\" all stay the same size. This\n-        // means that pages can be addressed with simple bit-wise operations on the filePageId. Eviction sets slots\n-        // to UNMAPPED_TTE with volatile writes. Page faults guard their target entries via the LatchMap, and overwrites\n-        // the UNMAPPED_TTE value with the new page id, with a volatile write, and then finally releases their latch\n-        // from the LatchMap. The LatchMap will ensure that only a single thread will fault a page at a time. However,\n-        // after a latch has been taken, the thread must double-check the entry to make sure that it did not race with\n-        // another thread to fault in the page \u2013 this is called double-check locking. Look-ups use volatile reads of the\n-        // slots. If a look-up finds UNMAPPED_TTE, it will attempt to page fault. If the LatchMap returns null, then\n-        // someone else might already be faulting in that page. The LatchMap will wait for the existing latch to be\n-        // released, before returning null. Thus the thread can retry the lookup immediately. If a look-up finds that it\n-        // is out of bounds of the translation table, it resizes the table by first taking the resize lock, then\n-        // verifying that the given filePageId is still out of bounds, then creates a new and larger outer array, then\n-        // copies over the existing inner arrays, fills the remaining outer array slots with more inner arrays, in turn\n-        // filled with UNMAPPED_TTE values, and then finally assigns the new outer array to the translationTable field\n-        // and releases the resize lock.\n-        PageEvictionCallback onEviction = this::evictPage;\n-        swapper = swapperFactory.createPageSwapper( file, filePageSize, onEviction, createIfNotExists );\n-        if ( truncateExisting )\n-        {\n-            swapper.truncate();\n-        }\n-        long lastPageId = swapper.getLastPageId();\n+  static final int UNMAPPED_TTE = -1;\n+  private static final int translationTableChunkSizePower = Integer.getInteger(\n+      \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.translationTableChunkSizePower\", 12);\n+  private static final int translationTableChunkSize = 1 << translationTableChunkSizePower;\n+  private static final long translationTableChunkSizeMask = translationTableChunkSize - 1;\n+  private static final int translationTableChunkArrayBase = UnsafeUtil.arrayBaseOffset(int[].class);\n+  private static final int translationTableChunkArrayScale = UnsafeUtil.arrayIndexScale(int[].class);\n+\n+  private static final long headerStateOffset =\n+      UnsafeUtil.getFieldOffset(MuninnPagedFile.class, \"headerState\");\n+  private static final int headerStateRefCountShift = 48;\n+  private static final int headerStateRefCountMax = 0x7FFF;\n+  private static final long headerStateRefCountMask = 0x7FFF_0000_0000_0000L;\n+  private static final long headerStateLastPageIdMask = 0x8000_FFFF_FFFF_FFFFL;\n+  private static final int PF_LOCK_MASK = PF_SHARED_WRITE_LOCK | PF_SHARED_READ_LOCK;\n+\n+  final MuninnPageCache pageCache;\n+  final int filePageSize;\n+  private final PageCacheTracer pageCacheTracer;\n+  final LatchMap pageFaultLatches;\n+\n+  // This is the table where we translate file-page-ids to cache-page-ids. Only one thread can perform a resize at\n+  // a time, and we ensure this mutual exclusion using the monitor lock on this MuninnPagedFile object.\n+  volatile int[][] translationTable;\n+\n+  final PageSwapper swapper;\n+  final int swapperId;\n+  private final CursorFactory cursorFactory;\n+\n+  // Guarded by the monitor lock on MuninnPageCache (map and unmap)\n+  private boolean deleteOnClose;\n+\n+  // Used to trace the causes of any exceptions from getLastPageId.\n+  private volatile Exception closeStackTrace;\n+\n+  // max modifier transaction id among evicted pages for this file\n+  private static final long evictedTransactionIdOffset = UnsafeUtil.getFieldOffset(MuninnPagedFile.class, \"highestEvictedTransactionId\");\n+  @SuppressWarnings(\"unused\") // accessed using unsafe\n+  private volatile long highestEvictedTransactionId;\n+\n+  /**\n+   * The header state includes both the reference count of the PagedFile \u2013 15 bits \u2013 and the ID of the last page in\n+   * the file \u2013 48 bits, plus an empty file marker bit. Because our pages are usually 2^13 bytes, this means that we\n+   * only lose 3 bits to the reference count, in terms of keeping large files byte addressable.\n+   * <p>\n+   * The layout looks like this:\n+   * <p>\n+   * \u250f\u2501 Empty file marker bit. When 1, the file is empty.\n+   * \u2503    \u250f\u2501 Reference count, 15 bits.\n+   * \u2503    \u2503                \u250f\u2501 48 bits for the last page id.\n+   * \u2503\u250f\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u250f\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+   * MRRRRRRR RRRRRRRR IIIIIIII IIIIIIII IIIIIIII IIIIIIII IIIIIIII IIIIIIII\n+   * 1        2        3        4        5        6        7        8        byte\n+   */\n+  @SuppressWarnings(\"unused\") // Accessed via Unsafe\n+  private volatile long headerState;\n+\n+  /**\n+   * Create muninn page file\n+   *\n+   * @param file                     original file\n+   * @param pageCache                page cache\n+   * @param filePageSize             file page size\n+   * @param swapperFactory           page cache swapper factory\n+   * @param pageCacheTracer          global page cache tracer\n+   * @param pageCursorTracerSupplier supplier of thread local (transaction local) page cursor tracer that will provide\n+   *                                 thread local page cache statistics\n+   * @param versionContextSupplier   supplier of thread local (transaction local) version context that will provide\n+   *                                 access to thread local version context\n+   * @param createIfNotExists        should create file if it does not exists\n+   * @param truncateExisting         should truncate file if it exists\n+   * @throws IOException If the {@link PageSwapper} could not be created.\n+   */\n+  MuninnPagedFile(File file, MuninnPageCache pageCache, int filePageSize, PageSwapperFactory swapperFactory,\n+                  PageCacheTracer pageCacheTracer, PageCursorTracerSupplier pageCursorTracerSupplier,\n+                  VersionContextSupplier versionContextSupplier, boolean createIfNotExists, boolean truncateExisting) throws IOException\n+  {\n+    super(pageCache.pages);\n+    this.pageCache = pageCache;\n+    this.filePageSize = filePageSize;\n+    this.cursorFactory = new CursorFactory(this, pageCursorTracerSupplier, pageCacheTracer, versionContextSupplier);\n+    this.pageCacheTracer = pageCacheTracer;\n+    this.pageFaultLatches = new LatchMap();\n+\n+    // The translation table is an array of arrays of integers that are either UNMAPPED_TTE, or the id of a page in\n+    // the page list. The table only grows the outer array, and all the inner \"chunks\" all stay the same size. This\n+    // means that pages can be addressed with simple bit-wise operations on the filePageId. Eviction sets slots\n+    // to UNMAPPED_TTE with volatile writes. Page faults guard their target entries via the LatchMap, and overwrites\n+    // the UNMAPPED_TTE value with the new page id, with a volatile write, and then finally releases their latch\n+    // from the LatchMap. The LatchMap will ensure that only a single thread will fault a page at a time. However,\n+    // after a latch has been taken, the thread must double-check the entry to make sure that it did not race with\n+    // another thread to fault in the page \u2013 this is called double-check locking. Look-ups use volatile reads of the\n+    // slots. If a look-up finds UNMAPPED_TTE, it will attempt to page fault. If the LatchMap returns null, then\n+    // someone else might already be faulting in that page. The LatchMap will wait for the existing latch to be\n+    // released, before returning null. Thus the thread can retry the lookup immediately. If a look-up finds that it\n+    // is out of bounds of the translation table, it resizes the table by first taking the resize lock, then\n+    // verifying that the given filePageId is still out of bounds, then creates a new and larger outer array, then\n+    // copies over the existing inner arrays, fills the remaining outer array slots with more inner arrays, in turn\n+    // filled with UNMAPPED_TTE values, and then finally assigns the new outer array to the translationTable field\n+    // and releases the resize lock.\n+    PageEvictionCallback onEviction = this::evictPage;\n+    swapper = swapperFactory.createPageSwapper(file, filePageSize, onEviction, createIfNotExists);\n+    if (truncateExisting)\n+    {\n+      swapper.truncate();\n+    }\n+    long lastPageId = swapper.getLastPageId();\n+\n+    int initialChunks = 1 + computeChunkId(lastPageId);\n+    int[][] tt = new int[initialChunks][];\n+    for (int i = 0; i < initialChunks; i++)\n+    {\n+      tt[i] = newChunk();\n+    }\n+    translationTable = tt;\n+\n+    initialiseLastPageId(lastPageId);\n+    this.swapperId = getSwappers().allocate(swapper);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[\" + swapper.file() + \"]\";\n+  }\n+\n+  @Override\n+  public PageCursor io(long pageId, int pf_flags)\n+  {\n+    int lockFlags = pf_flags & PF_LOCK_MASK;\n+    MuninnPageCursor cursor;\n+    if (lockFlags == PF_SHARED_READ_LOCK)\n+    {\n+      cursor = cursorFactory.takeReadCursor(pageId, pf_flags);\n+    } else if (lockFlags == PF_SHARED_WRITE_LOCK)\n+    {\n+      cursor = cursorFactory.takeWriteCursor(pageId, pf_flags);\n+    } else\n+    {\n+      throw wrongLocksArgument(lockFlags);\n+    }\n+\n+    cursor.rewind();\n+    return cursor;\n+  }\n+\n+  private IllegalArgumentException wrongLocksArgument(int lockFlags)\n+  {\n+    if (lockFlags == 0)\n+    {\n+      return new IllegalArgumentException(\n+          \"Must specify either PF_SHARED_WRITE_LOCK or PF_SHARED_READ_LOCK\");\n+    } else\n+    {\n+      return new IllegalArgumentException(\n+          \"Cannot specify both PF_SHARED_WRITE_LOCK and PF_SHARED_READ_LOCK\");\n+    }\n+  }\n+\n+  @Override\n+  public int pageSize()\n+  {\n+    return filePageSize;\n+  }\n+\n+  @Override\n+  public long fileSize() throws FileIsNotMappedException\n+  {\n+    final long lastPageId = getLastPageId();\n+    if (lastPageId < 0)\n+    {\n+      return 0L;\n+    }\n+    return (lastPageId + 1) * pageSize();\n+  }\n+\n+  @Override\n+  public File file()\n+  {\n+    return swapper.file();\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    pageCache.unmap(this);\n+  }\n+\n+  @Override\n+  public ReadableByteChannel openReadableByteChannel() throws IOException\n+  {\n+    return new PagedReadableByteChannel(this);\n+  }\n \n-        int initialChunks = 1 + computeChunkId( lastPageId );\n-        int[][] tt = new int[initialChunks][];\n-        for ( int i = 0; i < initialChunks; i++ )\n-        {\n-            tt[i] = newChunk();\n-        }\n-        translationTable = tt;\n+  @Override\n+  public WritableByteChannel openWritableByteChannel() throws IOException\n+  {\n+    return new PagedWritableByteChannel(this);\n+  }\n \n-        initialiseLastPageId( lastPageId );\n-        this.swapperId = getSwappers().allocate( swapper );\n-    }\n+  void closeSwapper() throws IOException\n+  {\n+    // We don't set closeStackTrace in close(), because the reference count may keep the file open.\n+    // But if we get here, to close the swapper, then we are definitely unmapping!\n+    closeStackTrace = new Exception(\"tracing paged file closing\");\n \n-    @Override\n-    public String toString()\n+    if (!deleteOnClose)\n     {\n-        return getClass().getSimpleName() + \"[\" + swapper.file() + \"]\";\n-    }\n-\n-    @Override\n-    public PageCursor io( long pageId, int pf_flags )\n+      swapper.close();\n+    } else\n     {\n-        int lockFlags = pf_flags & PF_LOCK_MASK;\n-        MuninnPageCursor cursor;\n-        if ( lockFlags == PF_SHARED_READ_LOCK )\n-        {\n-            cursor = cursorFactory.takeReadCursor( pageId, pf_flags );\n-        }\n-        else if ( lockFlags == PF_SHARED_WRITE_LOCK )\n-        {\n-            cursor = cursorFactory.takeWriteCursor( pageId, pf_flags );\n-        }\n-        else\n-        {\n-            throw wrongLocksArgument( lockFlags );\n-        }\n-\n-        cursor.rewind();\n-        return cursor;\n+      swapper.closeAndDelete();\n     }\n-\n-    private IllegalArgumentException wrongLocksArgument( int lockFlags )\n+    if (getSwappers().free(swapperId))\n     {\n-        if ( lockFlags == 0 )\n-        {\n-            return new IllegalArgumentException(\n-                    \"Must specify either PF_SHARED_WRITE_LOCK or PF_SHARED_READ_LOCK\" );\n-        }\n-        else\n-        {\n-            return new IllegalArgumentException(\n-                    \"Cannot specify both PF_SHARED_WRITE_LOCK and PF_SHARED_READ_LOCK\" );\n-        }\n+      // We need to do a vacuum of the cache, fully evicting all pages that have freed swapper ids.\n+      // We cannot reuse those swapper ids until there are no more pages using them.\n+      pageCache.vacuum(getSwappers());\n     }\n+  }\n \n-    @Override\n-    public int pageSize()\n-    {\n-        return filePageSize;\n-    }\n-\n-    @Override\n-    public long fileSize() throws FileIsNotMappedException\n-    {\n-        final long lastPageId = getLastPageId();\n-        if ( lastPageId < 0 )\n-        {\n-            return 0L;\n-        }\n-        return (lastPageId + 1) * pageSize();\n-    }\n-\n-    @Override\n-    public File file()\n-    {\n-        return swapper.file();\n-    }\n+  @Override\n+  public void flushAndForce() throws IOException\n+  {\n+    flushAndForce(IOLimiter.unlimited());\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public void flushAndForce(IOLimiter limiter) throws IOException\n+  {\n+    if (limiter == null)\n     {\n-        pageCache.unmap( this );\n+      throw new IllegalArgumentException(\"IOPSLimiter cannot be null\");\n     }\n-\n-    @Override\n-    public ReadableByteChannel openReadableByteChannel() throws IOException\n-    {\n-        return new PagedReadableByteChannel( this );\n-    }\n-\n-    @Override\n-    public WritableByteChannel openWritableByteChannel() throws IOException\n-    {\n-        return new PagedWritableByteChannel( this );\n-    }\n-\n-    void closeSwapper() throws IOException\n+    try (MajorFlushEvent flushEvent = pageCacheTracer.beginFileFlush(swapper))\n     {\n-        // We don't set closeStackTrace in close(), because the reference count may keep the file open.\n-        // But if we get here, to close the swapper, then we are definitely unmapping!\n-        closeStackTrace = new Exception( \"tracing paged file closing\" );\n-\n-        if ( !deleteOnClose )\n-        {\n-            swapper.close();\n-        }\n-        else\n-        {\n-            swapper.closeAndDelete();\n-        }\n-        if ( getSwappers().free( swapperId ) )\n-        {\n-            // We need to do a vacuum of the cache, fully evicting all pages that have freed swapper ids.\n-            // We cannot reuse those swapper ids until there are no more pages using them.\n-            pageCache.vacuum( getSwappers() );\n-        }\n+      flushAndForceInternal(flushEvent.flushEventOpportunity(), false, limiter);\n+      syncDevice();\n     }\n+    pageCache.clearEvictorException();\n+  }\n \n-    @Override\n-    public void flushAndForce() throws IOException\n+  void flushAndForceForClose() throws IOException\n+  {\n+    if (deleteOnClose)\n     {\n-        flushAndForce( IOLimiter.unlimited() );\n+      // No need to spend time flushing data to a file we're going to delete anyway.\n+      // However, we still have to mark the dirtied pages as clean since evicting would otherwise try to flush\n+      // these pages, and would fail because the file is closed, and we cannot allow that to happen.\n+      markAllDirtyPagesAsClean();\n+      return;\n     }\n-\n-    @Override\n-    public void flushAndForce( IOLimiter limiter ) throws IOException\n+    try (MajorFlushEvent flushEvent = pageCacheTracer.beginFileFlush(swapper))\n     {\n-        if ( limiter == null )\n-        {\n-            throw new IllegalArgumentException( \"IOPSLimiter cannot be null\" );\n-        }\n-        try ( MajorFlushEvent flushEvent = pageCacheTracer.beginFileFlush( swapper ) )\n-        {\n-            flushAndForceInternal( flushEvent.flushEventOpportunity(), false, limiter );\n-            syncDevice();\n-        }\n-        pageCache.clearEvictorException();\n+      flushAndForceInternal(flushEvent.flushEventOpportunity(), true, IOLimiter.unlimited());\n+      syncDevice();\n     }\n-\n-    void flushAndForceForClose() throws IOException\n+    pageCache.clearEvictorException();\n+  }\n+\n+  private void markAllDirtyPagesAsClean()\n+  {\n+    long filePageId = -1; // Start at -1 because we increment at the *start* of the chunk-loop iteration.\n+    int[][] tt = this.translationTable;\n+    for (int[] chunk : tt)\n     {\n-        if ( deleteOnClose )\n-        {\n-            // No need to spend time flushing data to a file we're going to delete anyway.\n-            // However, we still have to mark the dirtied pages as clean since evicting would otherwise try to flush\n-            // these pages, and would fail because the file is closed, and we cannot allow that to happen.\n-            markAllDirtyPagesAsClean();\n-            return;\n-        }\n-        try ( MajorFlushEvent flushEvent = pageCacheTracer.beginFileFlush( swapper ) )\n-        {\n-            flushAndForceInternal( flushEvent.flushEventOpportunity(), true, IOLimiter.unlimited() );\n-            syncDevice();\n-        }\n-        pageCache.clearEvictorException();\n-    }\n+      chunkLoop:\n+      for (int i = 0; i < chunk.length; i++)\n+      {\n+        filePageId++;\n+        long offset = computeChunkOffset(filePageId);\n \n-    private void markAllDirtyPagesAsClean()\n-    {\n-        long filePageId = -1; // Start at -1 because we increment at the *start* of the chunk-loop iteration.\n-        int[][] tt = this.translationTable;\n-        for ( int[] chunk : tt )\n+        // We might race with eviction, but we also mustn't miss a dirty page, so we loop until we succeed\n+        // in getting a lock on all available pages.\n+        for (; ; )\n         {\n-            chunkLoop:\n-            for ( int i = 0; i < chunk.length; i++ )\n+          int pageId = UnsafeUtil.getIntVolatile(chunk, offset);\n+          if (pageId != UNMAPPED_TTE)\n+          {\n+            long pageRef = deref(pageId);\n+            long stamp = tryOptimisticReadLock(pageRef);\n+            if ((!isModified(pageRef)) && validateReadLock(pageRef, stamp))\n             {\n-                filePageId++;\n-                long offset = computeChunkOffset( filePageId );\n-\n-                // We might race with eviction, but we also mustn't miss a dirty page, so we loop until we succeed\n-                // in getting a lock on all available pages.\n-                for (;;)\n-                {\n-                    int pageId = UnsafeUtil.getIntVolatile( chunk, offset );\n-                    if ( pageId != UNMAPPED_TTE )\n-                    {\n-                        long pageRef = deref( pageId );\n-                        long stamp = tryOptimisticReadLock( pageRef );\n-                        if ( (!isModified( pageRef )) && validateReadLock( pageRef, stamp ) )\n-                        {\n-                            // We got a valid read, and the page isn't dirty, so we skip it.\n-                            continue chunkLoop;\n-                        }\n-\n-                        if ( !tryExclusiveLock( pageRef ) )\n-                        {\n-                            continue;\n-                        }\n-                        if ( isBoundTo( pageRef, swapperId, filePageId ) && isModified( pageRef ) )\n-                        {\n-                            // The page is still bound to the expected file and file page id after we locked it,\n-                            // so we didn't race with eviction and faulting, and the page is dirty.\n-                            explicitlyMarkPageUnmodifiedUnderExclusiveLock( pageRef );\n-                            unlockExclusive( pageRef );\n-                            continue chunkLoop;\n-                        }\n-                    }\n-                    // There was no page at this entry in the table. Continue to the next entry.\n-                    continue chunkLoop;\n-                }\n+              // We got a valid read, and the page isn't dirty, so we skip it.\n+              continue chunkLoop;\n             }\n-        }\n-    }\n \n-    void flushAndForceInternal( FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter )\n-            throws IOException\n-    {\n-        try\n-        {\n-            doFlushAndForceInternal( flushes, forClosing, limiter );\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            e.addSuppressed( closeStackTrace );\n-            throw e;\n-        }\n-    }\n-\n-    private void doFlushAndForceInternal( FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter )\n-            throws IOException\n-    {\n-        // TODO it'd be awesome if, on Linux, we'd call sync_file_range(2) instead of fsync\n-        long[] pages = new long[translationTableChunkSize];\n-        long[] flushStamps = forClosing ? null : new long[translationTableChunkSize];\n-        long[] bufferAddresses = new long[translationTableChunkSize];\n-        long filePageId = -1; // Start at -1 because we increment at the *start* of the chunk-loop iteration.\n-        long limiterStamp = IOLimiter.INITIAL_STAMP;\n-        int[][] tt = this.translationTable;\n-        for ( int[] chunk : tt )\n-        {\n-            // TODO Look into if we can tolerate flushing a few clean pages if it means we can use larger vectors.\n-            // TODO The clean pages in question must still be loaded, though. Otherwise we'll end up writing\n-            // TODO garbage to the file.\n-            int pagesGrabbed = 0;\n-            chunkLoop:\n-            for ( int i = 0; i < chunk.length; i++ )\n+            if (!tryExclusiveLock(pageRef))\n             {\n-                filePageId++;\n-                long offset = computeChunkOffset( filePageId );\n-\n-                // We might race with eviction, but we also mustn't miss a dirty page, so we loop until we succeed\n-                // in getting a lock on all available pages.\n-                for (;;)\n-                {\n-                    int pageId = UnsafeUtil.getIntVolatile( chunk, offset );\n-                    if ( pageId != UNMAPPED_TTE )\n-                    {\n-                        long pageRef = deref( pageId );\n-                        long stamp = tryOptimisticReadLock( pageRef );\n-                        if ( (!isModified( pageRef )) && validateReadLock( pageRef, stamp ) )\n-                        {\n-                            break;\n-                        }\n-\n-                        long flushStamp = 0;\n-                        if ( !(forClosing ? tryExclusiveLock( pageRef ) : ((flushStamp = tryFlushLock( pageRef )) != 0)) )\n-                        {\n-                            continue;\n-                        }\n-                        if ( isBoundTo( pageRef, swapperId, filePageId ) && isModified( pageRef ) )\n-                        {\n-                            // The page is still bound to the expected file and file page id after we locked it,\n-                            // so we didn't race with eviction and faulting, and the page is dirty.\n-                            // So we add it to our IO vector.\n-                            pages[pagesGrabbed] = pageRef;\n-                            if ( !forClosing )\n-                            {\n-                                flushStamps[pagesGrabbed] = flushStamp;\n-                            }\n-                            bufferAddresses[pagesGrabbed] = getAddress( pageRef );\n-                            pagesGrabbed++;\n-                            continue chunkLoop;\n-                        }\n-                        else if ( forClosing )\n-                        {\n-                            unlockExclusive( pageRef );\n-                        }\n-                        else\n-                        {\n-                            unlockFlush( pageRef, flushStamp, false );\n-                        }\n-                    }\n-                    break;\n-                }\n-                if ( pagesGrabbed > 0 )\n-                {\n-                    vectoredFlush( pages, bufferAddresses, flushStamps, pagesGrabbed, flushes, forClosing );\n-                    limiterStamp = limiter.maybeLimitIO( limiterStamp, pagesGrabbed, this );\n-                    pagesGrabbed = 0;\n-                }\n+              continue;\n             }\n-            if ( pagesGrabbed > 0 )\n+            if (isBoundTo(pageRef, swapperId, filePageId) && isModified(pageRef))\n             {\n-                vectoredFlush( pages, bufferAddresses, flushStamps, pagesGrabbed, flushes, forClosing );\n-                limiterStamp = limiter.maybeLimitIO( limiterStamp, pagesGrabbed, this );\n+              // The page is still bound to the expected file and file page id after we locked it,\n+              // so we didn't race with eviction and faulting, and the page is dirty.\n+              explicitlyMarkPageUnmodifiedUnderExclusiveLock(pageRef);\n+              unlockExclusive(pageRef);\n+              continue chunkLoop;\n             }\n+          }\n+          // There was no page at this entry in the table. Continue to the next entry.\n+          continue chunkLoop;\n         }\n-\n-        swapper.force();\n-    }\n-\n-    private void vectoredFlush(\n-            long[] pages, long[] bufferAddresses, long[] flushStamps, int pagesGrabbed,\n-            FlushEventOpportunity flushOpportunity, boolean forClosing ) throws IOException\n-    {\n-        FlushEvent flush = null;\n-        boolean successful = false;\n-        try\n-        {\n-            // Write the pages vector\n-            long firstPageRef = pages[0];\n-            long startFilePageId = getFilePageId( firstPageRef );\n-            flush = flushOpportunity.beginFlush( startFilePageId, toId( firstPageRef ), swapper );\n-            long bytesWritten = swapper.write( startFilePageId, bufferAddresses, 0, pagesGrabbed );\n-\n-            // Update the flush event\n-            flush.addBytesWritten( bytesWritten );\n-            flush.addPagesFlushed( pagesGrabbed );\n-            flush.done();\n-            successful = true;\n-\n-            // There are now 0 'grabbed' pages\n-        }\n-        catch ( IOException ioe )\n+      }\n+    }\n+  }\n+\n+  void flushAndForceInternal(FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter)\n+      throws IOException\n+  {\n+    try\n+    {\n+      doFlushAndForceInternal(flushes, forClosing, limiter);\n+    } catch (ClosedChannelException e)\n+    {\n+      e.addSuppressed(closeStackTrace);\n+      throw e;\n+    }\n+  }\n+\n+  private void doFlushAndForceInternal(FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter)\n+      throws IOException\n+  {\n+    // TODO it'd be awesome if, on Linux, we'd call sync_file_range(2) instead of fsync\n+    long[] pages = new long[translationTableChunkSize];\n+    long[] flushStamps = forClosing ? null : new long[translationTableChunkSize];\n+    long[] bufferAddresses = new long[translationTableChunkSize];\n+    long filePageId = -1; // Start at -1 because we increment at the *start* of the chunk-loop iteration.\n+    long limiterStamp = IOLimiter.INITIAL_STAMP;\n+    int[][] tt = this.translationTable;\n+    for (int[] chunk : tt)\n+    {\n+      // TODO Look into if we can tolerate flushing a few clean pages if it means we can use larger vectors.\n+      // TODO The clean pages in question must still be loaded, though. Otherwise we'll end up writing\n+      // TODO garbage to the file.\n+      int pagesGrabbed = 0;\n+      chunkLoop:\n+      for (int i = 0; i < chunk.length; i++)\n+      {\n+        filePageId++;\n+        long offset = computeChunkOffset(filePageId);\n+\n+        // We might race with eviction, but we also mustn't miss a dirty page, so we loop until we succeed\n+        // in getting a lock on all available pages.\n+        for (; ; )\n         {\n-            if ( flush != null )\n+          int pageId = UnsafeUtil.getIntVolatile(chunk, offset);\n+          if (pageId != UNMAPPED_TTE)\n+          {\n+            long pageRef = deref(pageId);\n+            long stamp = tryOptimisticReadLock(pageRef);\n+            if ((!isModified(pageRef)) && validateReadLock(pageRef, stamp))\n             {\n-                flush.done( ioe );\n+              break;\n             }\n-            throw ioe;\n-        }\n-        finally\n-        {\n-            // Always unlock all the pages in the vector\n-            if ( forClosing )\n+\n+            long flushStamp = 0;\n+            if (!(forClosing ? tryExclusiveLock(pageRef) : ((flushStamp = tryFlushLock(pageRef)) != 0)))\n             {\n-                for ( int i = 0; i < pagesGrabbed; i++ )\n-                {\n-                    long pageRef = pages[i];\n-                    if ( successful )\n-                    {\n-                        explicitlyMarkPageUnmodifiedUnderExclusiveLock( pageRef );\n-                    }\n-                    unlockExclusive( pageRef );\n-                }\n+              continue;\n             }\n-            else\n+            if (isBoundTo(pageRef, swapperId, filePageId) && isModified(pageRef))\n             {\n-                for ( int i = 0; i < pagesGrabbed; i++ )\n-                {\n-                    unlockFlush( pages[i], flushStamps[i], successful );\n-                }\n-            }\n-        }\n-    }\n-\n-    boolean flushLockedPage( long pageRef, long filePageId )\n-    {\n-        boolean success = false;\n-        try ( MajorFlushEvent flushEvent = pageCacheTracer.beginFileFlush( swapper ) )\n-        {\n-            FlushEvent flush = flushEvent.flushEventOpportunity().beginFlush( filePageId, toId( pageRef ), swapper );\n-            long address = getAddress( pageRef );\n-            try\n+              // The page is still bound to the expected file and file page id after we locked it,\n+              // so we didn't race with eviction and faulting, and the page is dirty.\n+              // So we add it to our IO vector.\n+              pages[pagesGrabbed] = pageRef;\n+              if (!forClosing)\n+              {\n+                flushStamps[pagesGrabbed] = flushStamp;\n+              }\n+              bufferAddresses[pagesGrabbed] = getAddress(pageRef);\n+              pagesGrabbed++;\n+              continue chunkLoop;\n+            } else if (forClosing)\n             {\n-                long bytesWritten = swapper.write( filePageId, address );\n-                flush.addBytesWritten( bytesWritten );\n-                flush.addPagesFlushed( 1 );\n-                flush.done();\n-                success = true;\n-            }\n-            catch ( IOException e )\n+              unlockExclusive(pageRef);\n+            } else\n             {\n-                flush.done( e );\n+              unlockFlush(pageRef, flushStamp, false);\n             }\n+          }\n+          break;\n         }\n-        return success;\n-    }\n-\n-    private void syncDevice()\n-    {\n-        pageCache.syncDevice();\n-    }\n-\n-    @Override\n-    public void flush() throws IOException\n-    {\n-        swapper.force();\n-    }\n-\n-    @Override\n-    public long getLastPageId() throws FileIsNotMappedException\n-    {\n-        long state = getHeaderState();\n-        if ( refCountOf( state ) == 0 )\n+        if (pagesGrabbed > 0)\n         {\n-            throw fileIsNotMappedException();\n-        }\n-        return state & headerStateLastPageIdMask;\n-    }\n-\n-    private FileIsNotMappedException fileIsNotMappedException()\n-    {\n-        FileIsNotMappedException exception = new FileIsNotMappedException( file() );\n-        Exception closedBy = closeStackTrace;\n-        if ( closedBy != null )\n-        {\n-            exception.addSuppressed( closedBy );\n-        }\n-        return exception;\n-    }\n-\n-    private long getHeaderState()\n-    {\n-        return UnsafeUtil.getLongVolatile( this, headerStateOffset );\n-    }\n-\n-    private long refCountOf( long state )\n-    {\n-        return (state & headerStateRefCountMask) >>> headerStateRefCountShift;\n-    }\n-\n-    private void initialiseLastPageId( long lastPageIdFromFile )\n-    {\n-        if ( lastPageIdFromFile < 0 )\n-        {\n-            // MIN_VALUE only has the sign bit raised, and the rest of the bits are zeros.\n-            UnsafeUtil.putLongVolatile( this, headerStateOffset, Long.MIN_VALUE );\n-        }\n-        else\n-        {\n-            UnsafeUtil.putLongVolatile( this, headerStateOffset, lastPageIdFromFile );\n-        }\n-    }\n-\n-    /**\n-     * Make sure that the lastPageId is at least the given pageId\n-     */\n-    void increaseLastPageIdTo( long newLastPageId )\n-    {\n-        long current;\n-        long update;\n-        long lastPageId;\n-        do\n-        {\n-            current = getHeaderState();\n-            update = newLastPageId + (current & headerStateRefCountMask);\n-            lastPageId = current & headerStateLastPageIdMask;\n-        }\n-        while ( lastPageId < newLastPageId\n-                && !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n-    }\n-\n-    /**\n-     * Atomically increment the reference count for this mapped file.\n-     */\n-    void incrementRefCount()\n-    {\n-        long current;\n-        long update;\n-        do\n-        {\n-            current = getHeaderState();\n-            long count = refCountOf( current ) + 1;\n-            if ( count > headerStateRefCountMax )\n-            {\n-                throw new IllegalStateException( \"Cannot map file because reference counter would overflow. \" +\n-                                                 \"Maximum reference count is \" + headerStateRefCountMax + \". \" +\n-                                                 \"File is \" + swapper.file().getAbsolutePath() );\n-            }\n-            update = (current & headerStateLastPageIdMask) + (count << headerStateRefCountShift);\n+          vectoredFlush(pages, bufferAddresses, flushStamps, pagesGrabbed, flushes, forClosing);\n+          limiterStamp = limiter.maybeLimitIO(limiterStamp, pagesGrabbed, this);\n+          pagesGrabbed = 0;\n         }\n-        while ( !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n-    }\n-\n-    /**\n-     * Atomically decrement the reference count. Returns true if this was the\n-     * last reference.\n-     */\n-    boolean decrementRefCount()\n-    {\n-        long current;\n-        long update;\n-        long count;\n-        do\n+      }\n+      if (pagesGrabbed > 0)\n+      {\n+        vectoredFlush(pages, bufferAddresses, flushStamps, pagesGrabbed, flushes, forClosing);\n+        limiterStamp = limiter.maybeLimitIO(limiterStamp, pagesGrabbed, this);\n+      }\n+    }\n+\n+    swapper.force();\n+  }\n+\n+  private void vectoredFlush(\n+      long[] pages, long[] bufferAddresses, long[] flushStamps, int pagesGrabbed,\n+      FlushEventOpportunity flushOpportunity, boolean forClosing) throws IOException\n+  {\n+    FlushEvent flush = null;\n+    boolean successful = false;\n+    try\n+    {\n+      // Write the pages vector\n+      long firstPageRef = pages[0];\n+      long startFilePageId = getFilePageId(firstPageRef);\n+      flush = flushOpportunity.beginFlush(startFilePageId, toId(firstPageRef), swapper);\n+      long bytesWritten = swapper.write(startFilePageId, bufferAddresses, 0, pagesGrabbed);\n+\n+      // Update the flush event\n+      flush.addBytesWritten(bytesWritten);\n+      flush.addPagesFlushed(pagesGrabbed);\n+      flush.done();\n+      successful = true;\n+\n+      // There are now 0 'grabbed' pages\n+    } catch (IOException ioe)\n+    {\n+      if (flush != null)\n+      {\n+        flush.done(ioe);\n+      }\n+      throw ioe;\n+    } finally\n+    {\n+      // Always unlock all the pages in the vector\n+      if (forClosing)\n+      {\n+        for (int i = 0; i < pagesGrabbed; i++)\n         {\n-            current = getHeaderState();\n-            count = refCountOf( current ) - 1;\n-            if ( count < 0 )\n-            {\n-                throw new IllegalStateException( \"File has already been closed and unmapped. \" +\n-                                                 \"It cannot be closed any further.\" );\n-            }\n-            update = (current & headerStateLastPageIdMask) + (count << headerStateRefCountShift);\n+          long pageRef = pages[i];\n+          if (successful)\n+          {\n+            explicitlyMarkPageUnmodifiedUnderExclusiveLock(pageRef);\n+          }\n+          unlockExclusive(pageRef);\n         }\n-        while ( !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n-        return count == 0;\n-    }\n-\n-    /**\n-     * Get the current ref-count. Useful for checking if this PagedFile should\n-     * be considered unmapped.\n-     */\n-    int getRefCount()\n-    {\n-        return (int) refCountOf( getHeaderState() );\n-    }\n-\n-    void markDeleteOnClose( boolean deleteOnClose )\n-    {\n-        this.deleteOnClose |= deleteOnClose;\n-    }\n-\n-    /**\n-     * Grab a free page for the purpose of page faulting. Possibly blocking if\n-     * none are immediately available.\n-     * @param faultEvent The trace event for the current page fault.\n-     */\n-    long grabFreeAndExclusivelyLockedPage( PageFaultEvent faultEvent ) throws IOException\n-    {\n-        return pageCache.grabFreeAndExclusivelyLockedPage( faultEvent );\n-    }\n-\n-    /**\n-     * Remove the mapping of the given filePageId from the translation table, and return the evicted page object.\n-     * @param filePageId The id of the file page to evict.\n-     */\n-    private void evictPage( long filePageId )\n-    {\n-        int chunkId = computeChunkId( filePageId );\n-        long chunkOffset = computeChunkOffset( filePageId );\n-        int[] chunk = translationTable[chunkId];\n-\n-        int mappedPageId = UnsafeUtil.getIntVolatile( chunk, chunkOffset );\n-        long pageRef = deref( mappedPageId );\n-        setHighestEvictedTransactionId( getAndResetLastModifiedTransactionId( pageRef ) );\n-        UnsafeUtil.putIntVolatile( chunk, chunkOffset, UNMAPPED_TTE );\n-    }\n-\n-    private void setHighestEvictedTransactionId( long modifiedTransactionId )\n-    {\n-        UnsafeUtil.compareAndSetMaxLong( this, evictedTransactionIdOffset, modifiedTransactionId );\n-    }\n-\n-    long getHighestEvictedTransactionId()\n-    {\n-        return UnsafeUtil.getLongVolatile( this, evictedTransactionIdOffset );\n-    }\n-\n-    /**\n-     * Expand the translation table such that it can include at least the given chunkId.\n-     * @param maxChunkId The new translation table must be big enough to include at least this chunkId.\n-     * @return A reference to the expanded transaction table.\n-     */\n-    synchronized int[][] expandCapacity( int maxChunkId )\n-    {\n-        int[][] tt = translationTable;\n-        if ( tt.length <= maxChunkId )\n+      } else\n+      {\n+        for (int i = 0; i < pagesGrabbed; i++)\n         {\n-            int newLength = computeNewRootTableLength( maxChunkId );\n-            int[][] ntt = new int[newLength][];\n-            System.arraycopy( tt, 0, ntt, 0, tt.length );\n-            for ( int i = tt.length; i < ntt.length; i++ )\n-            {\n-                ntt[i] = newChunk();\n-            }\n-            tt = ntt;\n-            translationTable = tt;\n+          unlockFlush(pages[i], flushStamps[i], successful);\n         }\n-        return tt;\n-    }\n-\n-    private static int[] newChunk()\n-    {\n-        int[] chunk = new int[translationTableChunkSize];\n-        Arrays.fill( chunk, UNMAPPED_TTE );\n-        return chunk;\n-    }\n-\n-    private int computeNewRootTableLength( int maxChunkId )\n-    {\n-        // Grow by approx. 10% but always by at least one full chunk.\n-        return 1 + (int) (maxChunkId * 1.1);\n-    }\n-\n-    static int computeChunkId( long filePageId )\n-    {\n-        return (int) (filePageId >>> translationTableChunkSizePower);\n-    }\n-\n-    static long computeChunkOffset( long filePageId )\n-    {\n-        int index = (int) (filePageId & translationTableChunkSizeMask);\n-        return UnsafeUtil.arrayOffset( index, translationTableChunkArrayBase, translationTableChunkArrayScale );\n-    }\n+      }\n+    }\n+  }\n+\n+  boolean flushLockedPage(long pageRef, long filePageId)\n+  {\n+    boolean success = false;\n+    try (MajorFlushEvent flushEvent = pageCacheTracer.beginFileFlush(swapper))\n+    {\n+      FlushEvent flush = flushEvent.flushEventOpportunity().beginFlush(filePageId, toId(pageRef), swapper);\n+      long address = getAddress(pageRef);\n+      try\n+      {\n+        long bytesWritten = swapper.write(filePageId, address);\n+        flush.addBytesWritten(bytesWritten);\n+        flush.addPagesFlushed(1);\n+        flush.done();\n+        success = true;\n+      } catch (IOException e)\n+      {\n+        flush.done(e);\n+      }\n+    }\n+    return success;\n+  }\n+\n+  private void syncDevice()\n+  {\n+    pageCache.syncDevice();\n+  }\n+\n+  @Override\n+  public void flush() throws IOException\n+  {\n+    swapper.force();\n+  }\n+\n+  @Override\n+  public long getLastPageId() throws FileIsNotMappedException\n+  {\n+    long state = getHeaderState();\n+    if (refCountOf(state) == 0)\n+    {\n+      throw fileIsNotMappedException();\n+    }\n+    return state & headerStateLastPageIdMask;\n+  }\n+\n+  private FileIsNotMappedException fileIsNotMappedException()\n+  {\n+    FileIsNotMappedException exception = new FileIsNotMappedException(file());\n+    Exception closedBy = closeStackTrace;\n+    if (closedBy != null)\n+    {\n+      exception.addSuppressed(closedBy);\n+    }\n+    return exception;\n+  }\n+\n+  private long getHeaderState()\n+  {\n+    return UnsafeUtil.getLongVolatile(this, headerStateOffset);\n+  }\n+\n+  private long refCountOf(long state)\n+  {\n+    return (state & headerStateRefCountMask) >>> headerStateRefCountShift;\n+  }\n+\n+  private void initialiseLastPageId(long lastPageIdFromFile)\n+  {\n+    if (lastPageIdFromFile < 0)\n+    {\n+      // MIN_VALUE only has the sign bit raised, and the rest of the bits are zeros.\n+      UnsafeUtil.putLongVolatile(this, headerStateOffset, Long.MIN_VALUE);\n+    } else\n+    {\n+      UnsafeUtil.putLongVolatile(this, headerStateOffset, lastPageIdFromFile);\n+    }\n+  }\n+\n+  /**\n+   * Make sure that the lastPageId is at least the given pageId\n+   */\n+  void increaseLastPageIdTo(long newLastPageId)\n+  {\n+    long current;\n+    long update;\n+    long lastPageId;\n+    do\n+    {\n+      current = getHeaderState();\n+      update = newLastPageId + (current & headerStateRefCountMask);\n+      lastPageId = current & headerStateLastPageIdMask;\n+    }\n+    while (lastPageId < newLastPageId\n+        && !UnsafeUtil.compareAndSwapLong(this, headerStateOffset, current, update));\n+  }\n+\n+  /**\n+   * Atomically increment the reference count for this mapped file.\n+   */\n+  void incrementRefCount()\n+  {\n+    long current;\n+    long update;\n+    do\n+    {\n+      current = getHeaderState();\n+      long count = refCountOf(current) + 1;\n+      if (count > headerStateRefCountMax)\n+      {\n+        throw new IllegalStateException(\"Cannot map file because reference counter would overflow. \" +\n+            \"Maximum reference count is \" + headerStateRefCountMax + \". \" +\n+            \"File is \" + swapper.file().getAbsolutePath());\n+      }\n+      update = (current & headerStateLastPageIdMask) + (count << headerStateRefCountShift);\n+    }\n+    while (!UnsafeUtil.compareAndSwapLong(this, headerStateOffset, current, update));\n+  }\n+\n+  /**\n+   * Atomically decrement the reference count. Returns true if this was the\n+   * last reference.\n+   */\n+  boolean decrementRefCount()\n+  {\n+    long current;\n+    long update;\n+    long count;\n+    do\n+    {\n+      current = getHeaderState();\n+      count = refCountOf(current) - 1;\n+      if (count < 0)\n+      {\n+        throw new IllegalStateException(\"File has already been closed and unmapped. \" +\n+            \"It cannot be closed any further.\");\n+      }\n+      update = (current & headerStateLastPageIdMask) + (count << headerStateRefCountShift);\n+    }\n+    while (!UnsafeUtil.compareAndSwapLong(this, headerStateOffset, current, update));\n+    return count == 0;\n+  }\n+\n+  /**\n+   * Get the current ref-count. Useful for checking if this PagedFile should\n+   * be considered unmapped.\n+   */\n+  int getRefCount()\n+  {\n+    return (int) refCountOf(getHeaderState());\n+  }\n+\n+  void markDeleteOnClose(boolean deleteOnClose)\n+  {\n+    this.deleteOnClose |= deleteOnClose;\n+  }\n+\n+  /**\n+   * Grab a free page for the purpose of page faulting. Possibly blocking if\n+   * none are immediately available.\n+   *\n+   * @param faultEvent The trace event for the current page fault.\n+   */\n+  long grabFreeAndExclusivelyLockedPage(PageFaultEvent faultEvent) throws IOException\n+  {\n+    return pageCache.grabFreeAndExclusivelyLockedPage(faultEvent);\n+  }\n+\n+  /**\n+   * Remove the mapping of the given filePageId from the translation table, and return the evicted page object.\n+   *\n+   * @param filePageId The id of the file page to evict.\n+   */\n+  private void evictPage(long filePageId)\n+  {\n+    int chunkId = computeChunkId(filePageId);\n+    long chunkOffset = computeChunkOffset(filePageId);\n+    int[] chunk = translationTable[chunkId];\n+\n+    int mappedPageId = UnsafeUtil.getIntVolatile(chunk, chunkOffset);\n+    long pageRef = deref(mappedPageId);\n+    setHighestEvictedTransactionId(getAndResetLastModifiedTransactionId(pageRef));\n+    UnsafeUtil.putIntVolatile(chunk, chunkOffset, UNMAPPED_TTE);\n+  }\n+\n+  private void setHighestEvictedTransactionId(long modifiedTransactionId)\n+  {\n+    UnsafeUtil.compareAndSetMaxLong(this, evictedTransactionIdOffset, modifiedTransactionId);\n+  }\n+\n+  long getHighestEvictedTransactionId()\n+  {\n+    return UnsafeUtil.getLongVolatile(this, evictedTransactionIdOffset);\n+  }\n+\n+  /**\n+   * Expand the translation table such that it can include at least the given chunkId.\n+   *\n+   * @param maxChunkId The new translation table must be big enough to include at least this chunkId.\n+   * @return A reference to the expanded transaction table.\n+   */\n+  synchronized int[][] expandCapacity(int maxChunkId)\n+  {\n+    int[][] tt = translationTable;\n+    if (tt.length <= maxChunkId)\n+    {\n+      int newLength = computeNewRootTableLength(maxChunkId);\n+      int[][] ntt = new int[newLength][];\n+      System.arraycopy(tt, 0, ntt, 0, tt.length);\n+      for (int i = tt.length; i < ntt.length; i++)\n+      {\n+        ntt[i] = newChunk();\n+      }\n+      tt = ntt;\n+      translationTable = tt;\n+    }\n+    return tt;\n+  }\n+\n+  private static int[] newChunk()\n+  {\n+    int[] chunk = new int[translationTableChunkSize];\n+    Arrays.fill(chunk, UNMAPPED_TTE);\n+    return chunk;\n+  }\n+\n+  private int computeNewRootTableLength(int maxChunkId)\n+  {\n+    // Grow by approx. 10% but always by at least one full chunk.\n+    return 1 + (int) (maxChunkId * 1.1);\n+  }\n+\n+  static int computeChunkId(long filePageId)\n+  {\n+    return (int) (filePageId >>> translationTableChunkSizePower);\n+  }\n+\n+  static long computeChunkOffset(long filePageId)\n+  {\n+    int index = (int) (filePageId & translationTableChunkSizeMask);\n+    return UnsafeUtil.arrayOffset(index, translationTableChunkArrayBase, translationTableChunkArrayScale);\n+  }\n }\n",
            "diff_size": 1043
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "608",
                    "column": "43",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "622",
                    "column": "23",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "624",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "660",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2439/MuninnPagedFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2439/MuninnPagedFile.java\nindex b9cff05f40d..fd699169bac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2439/MuninnPagedFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2439/MuninnPagedFile.java\n@@ -48,16 +48,16 @@ import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n {\n     static final int UNMAPPED_TTE = -1;\n-    private static final int translationTableChunkSizePower = Integer.getInteger(\n-            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.translationTableChunkSizePower\", 12 );\n-    private static final int translationTableChunkSize = 1 << translationTableChunkSizePower;\n+    private static final int translationTableChunkSizePower = Integer.getInteger( \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.translationTableChunkSizePower\", 12 );\n+\n+private static final int translationTableChunkSize = 1 << translationTableChunkSizePower;\n     private static final long translationTableChunkSizeMask = translationTableChunkSize - 1;\n     private static final int translationTableChunkArrayBase = UnsafeUtil.arrayBaseOffset( int[].class );\n     private static final int translationTableChunkArrayScale = UnsafeUtil.arrayIndexScale( int[].class );\n \n-    private static final long headerStateOffset =\n-            UnsafeUtil.getFieldOffset( MuninnPagedFile.class, \"headerState\" );\n-    private static final int headerStateRefCountShift = 48;\n+    private static final long headerStateOffset = UnsafeUtil.getFieldOffset( MuninnPagedFile.class, \"headerState\" );\n+\n+private static final int headerStateRefCountShift = 48;\n     private static final int headerStateRefCountMax = 0x7FFF;\n     private static final long headerStateRefCountMask = 0x7FFF_0000_0000_0000L;\n     private static final long headerStateLastPageIdMask = 0x8000_FFFF_FFFF_FFFFL;\n@@ -122,7 +122,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n     MuninnPagedFile( File file, MuninnPageCache pageCache, int filePageSize, PageSwapperFactory swapperFactory,\n             PageCacheTracer pageCacheTracer, PageCursorTracerSupplier pageCursorTracerSupplier,\n             VersionContextSupplier versionContextSupplier, boolean createIfNotExists, boolean truncateExisting ) throws IOException\n-    {\n+{\n         super( pageCache.pages );\n         this.pageCache = pageCache;\n         this.filePageSize = filePageSize;\n@@ -160,7 +160,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         {\n             tt[i] = newChunk();\n         }\n-        translationTable = tt;\n+\n+translationTable = tt;\n \n         initialiseLastPageId( lastPageId );\n         this.swapperId = getSwappers().allocate( swapper );\n@@ -198,14 +199,12 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n     {\n         if ( lockFlags == 0 )\n         {\n-            return new IllegalArgumentException(\n-                    \"Must specify either PF_SHARED_WRITE_LOCK or PF_SHARED_READ_LOCK\" );\n+            return new IllegalArgumentException( \"Must specify either PF_SHARED_WRITE_LOCK or PF_SHARED_READ_LOCK\" );\n         }\n         else\n         {\n-            return new IllegalArgumentException(\n-                    \"Cannot specify both PF_SHARED_WRITE_LOCK and PF_SHARED_READ_LOCK\" );\n-        }\n+            return new IllegalArgumentException( \"Cannot specify both PF_SHARED_WRITE_LOCK and PF_SHARED_READ_LOCK\" );\n+    }\n     }\n \n     @Override\n@@ -222,7 +221,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         {\n             return 0L;\n         }\n-        return (lastPageId + 1) * pageSize();\n+        return (lastPageId + 1 ) * pageSize();\n     }\n \n     @Override\n@@ -254,8 +253,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         // We don't set closeStackTrace in close(), because the reference count may keep the file open.\n         // But if we get here, to close the swapper, then we are definitely unmapping!\n         closeStackTrace = new Exception( \"tracing paged file closing\" );\n-\n-        if ( !deleteOnClose )\n+if ( !deleteOnClose )\n         {\n             swapper.close();\n         }\n@@ -263,7 +261,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         {\n             swapper.closeAndDelete();\n         }\n-        if ( getSwappers().free( swapperId ) )\n+\n+if ( getSwappers().free( swapperId ) )\n         {\n             // We need to do a vacuum of the cache, fully evicting all pages that have freed swapper ids.\n             // We cannot reuse those swapper ids until there are no more pages using them.\n@@ -317,7 +316,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         for ( int[] chunk : tt )\n         {\n             chunkLoop:\n-            for ( int i = 0; i < chunk.length; i++ )\n+    for ( int i = 0; i < chunk.length; i++ )\n             {\n                 filePageId++;\n                 long offset = computeChunkOffset( filePageId );\n@@ -341,7 +340,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n                         {\n                             continue;\n                         }\n-                        if ( isBoundTo( pageRef, swapperId, filePageId ) && isModified( pageRef ) )\n+\n+if ( isBoundTo( pageRef, swapperId, filePageId ) && isModified( pageRef ) )\n                         {\n                             // The page is still bound to the expected file and file page id after we locked it,\n                             // so we didn't race with eviction and faulting, and the page is dirty.\n@@ -357,9 +357,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         }\n     }\n \n-    void flushAndForceInternal( FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter )\n-            throws IOException\n-    {\n+    void flushAndForceInternal( FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter ) throws IOException\n+{\n         try\n         {\n             doFlushAndForceInternal( flushes, forClosing, limiter );\n@@ -371,9 +370,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         }\n     }\n \n-    private void doFlushAndForceInternal( FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter )\n-            throws IOException\n-    {\n+    private void doFlushAndForceInternal( FlushEventOpportunity flushes, boolean forClosing, IOLimiter limiter ) throws IOException\n+{\n         // TODO it'd be awesome if, on Linux, we'd call sync_file_range(2) instead of fsync\n         long[] pages = new long[translationTableChunkSize];\n         long[] flushStamps = forClosing ? null : new long[translationTableChunkSize];\n@@ -388,7 +386,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n             // TODO garbage to the file.\n             int pagesGrabbed = 0;\n             chunkLoop:\n-            for ( int i = 0; i < chunk.length; i++ )\n+    for ( int i = 0; i < chunk.length; i++ )\n             {\n                 filePageId++;\n                 long offset = computeChunkOffset( filePageId );\n@@ -408,11 +406,12 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n                         }\n \n                         long flushStamp = 0;\n-                        if ( !(forClosing ? tryExclusiveLock( pageRef ) : ((flushStamp = tryFlushLock( pageRef )) != 0)) )\n+                        if ( !( forClosing ? tryExclusiveLock( pageRef ) : ((flushStamp = tryFlushLock( pageRef )) != 0 )) )\n                         {\n                             continue;\n                         }\n-                        if ( isBoundTo( pageRef, swapperId, filePageId ) && isModified( pageRef ) )\n+\n+if ( isBoundTo( pageRef, swapperId, filePageId ) && isModified( pageRef ) )\n                         {\n                             // The page is still bound to the expected file and file page id after we locked it,\n                             // so we didn't race with eviction and faulting, and the page is dirty.\n@@ -422,7 +421,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n                             {\n                                 flushStamps[pagesGrabbed] = flushStamp;\n                             }\n-                            bufferAddresses[pagesGrabbed] = getAddress( pageRef );\n+\n+bufferAddresses[pagesGrabbed] = getAddress( pageRef );\n                             pagesGrabbed++;\n                             continue chunkLoop;\n                         }\n@@ -437,7 +437,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n                     }\n                     break;\n                 }\n-                if ( pagesGrabbed > 0 )\n+\n+if ( pagesGrabbed > 0 )\n                 {\n                     vectoredFlush( pages, bufferAddresses, flushStamps, pagesGrabbed, flushes, forClosing );\n                     limiterStamp = limiter.maybeLimitIO( limiterStamp, pagesGrabbed, this );\n@@ -454,10 +455,9 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         swapper.force();\n     }\n \n-    private void vectoredFlush(\n-            long[] pages, long[] bufferAddresses, long[] flushStamps, int pagesGrabbed,\n+    private void vectoredFlush( long[] pages, long[] bufferAddresses, long[] flushStamps, int pagesGrabbed,\n             FlushEventOpportunity flushOpportunity, boolean forClosing ) throws IOException\n-    {\n+{\n         FlushEvent flush = null;\n         boolean successful = false;\n         try\n@@ -496,7 +496,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n                     {\n                         explicitlyMarkPageUnmodifiedUnderExclusiveLock( pageRef );\n                     }\n-                    unlockExclusive( pageRef );\n+\n+unlockExclusive( pageRef );\n                 }\n             }\n             else\n@@ -551,7 +552,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         {\n             throw fileIsNotMappedException();\n         }\n-        return state & headerStateLastPageIdMask;\n+\n+return state & headerStateLastPageIdMask;\n     }\n \n     private FileIsNotMappedException fileIsNotMappedException()\n@@ -562,7 +564,8 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         {\n             exception.addSuppressed( closedBy );\n         }\n-        return exception;\n+\n+return exception;\n     }\n \n     private long getHeaderState()\n@@ -572,7 +575,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n \n     private long refCountOf( long state )\n     {\n-        return (state & headerStateRefCountMask) >>> headerStateRefCountShift;\n+        return ( state & headerStateRefCountMask) >>> headerStateRefCountShift;\n     }\n \n     private void initialiseLastPageId( long lastPageIdFromFile )\n@@ -599,11 +602,10 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         do\n         {\n             current = getHeaderState();\n-            update = newLastPageId + (current & headerStateRefCountMask);\n+            update = newLastPageId + ( current & headerStateRefCountMask);\n             lastPageId = current & headerStateLastPageIdMask;\n         }\n-        while ( lastPageId < newLastPageId\n-                && !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n+        while ( lastPageId < newLastPageId&& !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n     }\n \n     /**\n@@ -617,13 +619,11 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n         {\n             current = getHeaderState();\n             long count = refCountOf( current ) + 1;\n-            if ( count > headerStateRefCountMax )\n+            if ( count> headerStateRefCountMax )\n             {\n-                throw new IllegalStateException( \"Cannot map file because reference counter would overflow. \" +\n-                                                 \"Maximum reference count is \" + headerStateRefCountMax + \". \" +\n-                                                 \"File is \" + swapper.file().getAbsolutePath() );\n-            }\n-            update = (current & headerStateLastPageIdMask) + (count << headerStateRefCountShift);\n+                throw new IllegalStateException( \"Cannot map file because reference counter would overflow. \" + \"Maximum reference count is \" + headerStateRefCountMax + \". \" + \"File is \" + swapper.file().getAbsolutePath() );\n+    }\n+            update = (current & headerStateLastPageIdMask) + ( count << headerStateRefCountShift);\n         }\n         while ( !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n     }\n@@ -643,10 +643,9 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n             count = refCountOf( current ) - 1;\n             if ( count < 0 )\n             {\n-                throw new IllegalStateException( \"File has already been closed and unmapped. \" +\n-                                                 \"It cannot be closed any further.\" );\n-            }\n-            update = (current & headerStateLastPageIdMask) + (count << headerStateRefCountShift);\n+                throw new IllegalStateException( \"File has already been closed and unmapped. \" + \"It cannot be closed any further.\" );\n+    }\n+            update = (current & headerStateLastPageIdMask) + ( count << headerStateRefCountShift);\n         }\n         while ( !UnsafeUtil.compareAndSwapLong( this, headerStateOffset, current, update ) );\n         return count == 0;\n@@ -658,7 +657,7 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n      */\n     int getRefCount()\n     {\n-        return (int) refCountOf( getHeaderState() );\n+        return ( int) refCountOf( getHeaderState() );\n     }\n \n     void markDeleteOnClose( boolean deleteOnClose )\n@@ -719,10 +718,12 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n             {\n                 ntt[i] = newChunk();\n             }\n-            tt = ntt;\n+\n+tt = ntt;\n             translationTable = tt;\n         }\n-        return tt;\n+\n+return tt;\n     }\n \n     private static int[] newChunk()\n@@ -735,17 +736,17 @@ final class MuninnPagedFile extends PageList implements PagedFile, Flushable\n     private int computeNewRootTableLength( int maxChunkId )\n     {\n         // Grow by approx. 10% but always by at least one full chunk.\n-        return 1 + (int) (maxChunkId * 1.1);\n+        return 1 + ( int) ( maxChunkId * 1.1 );\n     }\n \n     static int computeChunkId( long filePageId )\n     {\n-        return (int) (filePageId >>> translationTableChunkSizePower);\n+        return ( int) ( filePageId >>> translationTableChunkSizePower);\n     }\n \n     static long computeChunkOffset( long filePageId )\n     {\n-        int index = (int) (filePageId & translationTableChunkSizeMask);\n+        int index = ( int) ( filePageId & translationTableChunkSizeMask);\n         return UnsafeUtil.arrayOffset( index, translationTableChunkArrayBase, translationTableChunkArrayScale );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}