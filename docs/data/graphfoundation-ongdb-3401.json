{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3401",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "199",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3401/IoPrimitiveUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3401/IoPrimitiveUtils.java\nindex 15c6ec34e77..3bcd3affdec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3401/IoPrimitiveUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3401/IoPrimitiveUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.io.IOException;\n@@ -33,194 +34,192 @@ import org.neo4j.string.UTF8;\n \n public abstract class IoPrimitiveUtils\n {\n-    public static String readString( ReadableChannel channel, int length ) throws IOException\n-    {\n-        assert length >= 0 : \"invalid array length \" + length;\n-        byte[] chars = new byte[length];\n-        channel.get( chars, length );\n-        return UTF8.decode( chars );\n-    }\n-\n-    public static void write3bLengthAndString( WritableChannel channel, String string ) throws IOException\n-    {\n-        byte[] chars = UTF8.encode( string );\n-        // 3 bytes to represent the length (4 is a bit overkill)... maybe\n-        // this space optimization is a bit overkill also :)\n-        channel.putShort( (short)chars.length );\n-        channel.put( (byte)(chars.length >> 16) );\n-        channel.put(chars, chars.length);\n-    }\n-\n-    public static String read3bLengthAndString( ReadableChannel channel ) throws IOException\n-    {\n-        short lengthShort = channel.getShort();\n-        byte lengthByte = channel.get();\n-        int length = (lengthByte << 16) | (lengthShort & 0xFFFF);\n-        byte[] chars = new byte[length];\n-        channel.get( chars, length );\n-        return UTF8.decode( chars );\n-    }\n-\n-    public static void write2bLengthAndString( WritableChannel channel, String string ) throws IOException\n-    {\n-        byte[] chars = UTF8.encode( string );\n-        channel.putShort( (short)chars.length );\n-        channel.put(chars, chars.length);\n-    }\n-\n-    public static String read2bLengthAndString( ReadableChannel channel ) throws IOException\n-    {\n-        short length = channel.getShort();\n-        return readString( channel, length );\n-    }\n-\n-    private static char[] readCharArray( ReadableByteChannel channel,\n-            ByteBuffer buffer, char[] charArray ) throws IOException\n-    {\n-        buffer.clear();\n-        int charsLeft = charArray.length;\n-        int maxSize = buffer.capacity() / 2;\n-        int offset = 0; // offset in chars\n-        while ( charsLeft > 0 )\n-        {\n-            if ( charsLeft > maxSize )\n-            {\n-                buffer.limit( maxSize * 2 );\n-                charsLeft -= maxSize;\n-            }\n-            else\n-            {\n-                buffer.limit( charsLeft * 2 );\n-                charsLeft = 0;\n-            }\n-            if ( channel.read( buffer ) != buffer.limit() )\n-            {\n-                return null;\n-            }\n-            buffer.flip();\n-            int length = buffer.limit() / 2;\n-            buffer.asCharBuffer().get( charArray, offset, length );\n-            offset += length;\n-            buffer.clear();\n-        }\n-        return charArray;\n-    }\n-\n-    public static boolean readAndFlip( ReadableByteChannel channel, ByteBuffer buffer, int bytes )\n-            throws IOException\n-    {\n-        buffer.clear();\n-        buffer.limit( bytes );\n-        while ( buffer.hasRemaining() )\n-        {\n-            int read = channel.read( buffer );\n-\n-            if ( read == -1 )\n-            {\n-                return false;\n-            }\n-        }\n-        buffer.flip();\n-        return true;\n-    }\n-\n-    public static Integer readInt( ReadableByteChannel channel, ByteBuffer buffer ) throws IOException\n-    {\n-        return readAndFlip( channel, buffer, 4 ) ? buffer.getInt() : null;\n-    }\n-\n-    public static byte[] readBytes( ReadableByteChannel channel, byte[] array ) throws IOException\n-    {\n-        return readBytes( channel, array, array.length );\n-    }\n-\n-    public static byte[] readBytes( ReadableByteChannel channel, byte[] array, int length ) throws IOException\n-    {\n-        return readAndFlip( channel, ByteBuffer.wrap( array ), length ) ? array : null;\n-    }\n-\n-    public static Map<String, String> read2bMap( ReadableChannel channel ) throws IOException\n-    {\n-        short size = channel.getShort();\n-        Map<String, String> map = new HashMap<>( size );\n-        for ( int i = 0; i < size; i++ )\n-        {\n-            String key = read2bLengthAndString( channel );\n-            String value = read2bLengthAndString( channel );\n-            map.put( key, value );\n-        }\n-        return map;\n-    }\n-\n-    public static String readLengthAndString( ReadableByteChannel channel,\n-            ByteBuffer buffer ) throws IOException\n-    {\n-        Integer length = readInt( channel, buffer );\n-        if ( length != null )\n-        {\n-            char[] chars = new char[length];\n-            chars = readCharArray( channel, buffer, chars );\n-            return chars == null ? null : new String( chars );\n-        }\n+  public static String readString(ReadableChannel channel, int length) throws IOException\n+  {\n+    assert length >= 0 : \"invalid array length \" + length;\n+    byte[] chars = new byte[length];\n+    channel.get(chars, length);\n+    return UTF8.decode(chars);\n+  }\n+\n+  public static void write3bLengthAndString(WritableChannel channel, String string) throws IOException\n+  {\n+    byte[] chars = UTF8.encode(string);\n+    // 3 bytes to represent the length (4 is a bit overkill)... maybe\n+    // this space optimization is a bit overkill also :)\n+    channel.putShort((short) chars.length);\n+    channel.put((byte) (chars.length >> 16));\n+    channel.put(chars, chars.length);\n+  }\n+\n+  public static String read3bLengthAndString(ReadableChannel channel) throws IOException\n+  {\n+    short lengthShort = channel.getShort();\n+    byte lengthByte = channel.get();\n+    int length = (lengthByte << 16) | (lengthShort & 0xFFFF);\n+    byte[] chars = new byte[length];\n+    channel.get(chars, length);\n+    return UTF8.decode(chars);\n+  }\n+\n+  public static void write2bLengthAndString(WritableChannel channel, String string) throws IOException\n+  {\n+    byte[] chars = UTF8.encode(string);\n+    channel.putShort((short) chars.length);\n+    channel.put(chars, chars.length);\n+  }\n+\n+  public static String read2bLengthAndString(ReadableChannel channel) throws IOException\n+  {\n+    short length = channel.getShort();\n+    return readString(channel, length);\n+  }\n+\n+  private static char[] readCharArray(ReadableByteChannel channel,\n+                                      ByteBuffer buffer, char[] charArray) throws IOException\n+  {\n+    buffer.clear();\n+    int charsLeft = charArray.length;\n+    int maxSize = buffer.capacity() / 2;\n+    int offset = 0; // offset in chars\n+    while (charsLeft > 0)\n+    {\n+      if (charsLeft > maxSize)\n+      {\n+        buffer.limit(maxSize * 2);\n+        charsLeft -= maxSize;\n+      } else\n+      {\n+        buffer.limit(charsLeft * 2);\n+        charsLeft = 0;\n+      }\n+      if (channel.read(buffer) != buffer.limit())\n+      {\n         return null;\n-    }\n-\n-    public static void writeLengthAndString( StoreChannel channel, ByteBuffer buffer, String value )\n-            throws IOException\n-    {\n-        char[] chars = value.toCharArray();\n-        int length = chars.length;\n-        writeInt( channel, buffer, length );\n-        writeChars( channel, buffer, chars );\n-    }\n-\n-    private static void writeChars( StoreChannel channel, ByteBuffer buffer, char[] chars )\n-            throws IOException\n-    {\n-        int position = 0;\n-        do\n-        {\n-            buffer.clear();\n-            int leftToWrite = chars.length - position;\n-            if ( leftToWrite * 2 < buffer.capacity() )\n-            {\n-                buffer.asCharBuffer().put( chars, position, leftToWrite );\n-                buffer.limit( leftToWrite * 2);\n-                channel.write( buffer );\n-                position += leftToWrite;\n-            }\n-            else\n-            {\n-                int length = buffer.capacity() / 2;\n-                buffer.asCharBuffer().put( chars, position, length );\n-                buffer.limit( length * 2 );\n-                channel.write( buffer );\n-                position += length;\n-            }\n-        } while ( position < chars.length );\n-    }\n-\n-    public static void writeInt( StoreChannel channel, ByteBuffer buffer, int value )\n-            throws IOException\n-    {\n-        buffer.clear();\n-        buffer.putInt( value );\n-        buffer.flip();\n-        channel.write( buffer );\n-    }\n-\n-    public static Object[] asArray( Object propertyValue )\n-    {\n-        if ( propertyValue.getClass().isArray() )\n-        {\n-            int length = Array.getLength( propertyValue );\n-            Object[] result = new Object[ length ];\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                result[ i ] = Array.get( propertyValue, i );\n-            }\n-            return result;\n-        }\n-        return new Object[] { propertyValue };\n-    }\n+      }\n+      buffer.flip();\n+      int length = buffer.limit() / 2;\n+      buffer.asCharBuffer().get(charArray, offset, length);\n+      offset += length;\n+      buffer.clear();\n+    }\n+    return charArray;\n+  }\n+\n+  public static boolean readAndFlip(ReadableByteChannel channel, ByteBuffer buffer, int bytes)\n+      throws IOException\n+  {\n+    buffer.clear();\n+    buffer.limit(bytes);\n+    while (buffer.hasRemaining())\n+    {\n+      int read = channel.read(buffer);\n+\n+      if (read == -1)\n+      {\n+        return false;\n+      }\n+    }\n+    buffer.flip();\n+    return true;\n+  }\n+\n+  public static Integer readInt(ReadableByteChannel channel, ByteBuffer buffer) throws IOException\n+  {\n+    return readAndFlip(channel, buffer, 4) ? buffer.getInt() : null;\n+  }\n+\n+  public static byte[] readBytes(ReadableByteChannel channel, byte[] array) throws IOException\n+  {\n+    return readBytes(channel, array, array.length);\n+  }\n+\n+  public static byte[] readBytes(ReadableByteChannel channel, byte[] array, int length) throws IOException\n+  {\n+    return readAndFlip(channel, ByteBuffer.wrap(array), length) ? array : null;\n+  }\n+\n+  public static Map<String, String> read2bMap(ReadableChannel channel) throws IOException\n+  {\n+    short size = channel.getShort();\n+    Map<String, String> map = new HashMap<>(size);\n+    for (int i = 0; i < size; i++)\n+    {\n+      String key = read2bLengthAndString(channel);\n+      String value = read2bLengthAndString(channel);\n+      map.put(key, value);\n+    }\n+    return map;\n+  }\n+\n+  public static String readLengthAndString(ReadableByteChannel channel,\n+                                           ByteBuffer buffer) throws IOException\n+  {\n+    Integer length = readInt(channel, buffer);\n+    if (length != null)\n+    {\n+      char[] chars = new char[length];\n+      chars = readCharArray(channel, buffer, chars);\n+      return chars == null ? null : new String(chars);\n+    }\n+    return null;\n+  }\n+\n+  public static void writeLengthAndString(StoreChannel channel, ByteBuffer buffer, String value)\n+      throws IOException\n+  {\n+    char[] chars = value.toCharArray();\n+    int length = chars.length;\n+    writeInt(channel, buffer, length);\n+    writeChars(channel, buffer, chars);\n+  }\n+\n+  private static void writeChars(StoreChannel channel, ByteBuffer buffer, char[] chars)\n+      throws IOException\n+  {\n+    int position = 0;\n+    do\n+    {\n+      buffer.clear();\n+      int leftToWrite = chars.length - position;\n+      if (leftToWrite * 2 < buffer.capacity())\n+      {\n+        buffer.asCharBuffer().put(chars, position, leftToWrite);\n+        buffer.limit(leftToWrite * 2);\n+        channel.write(buffer);\n+        position += leftToWrite;\n+      } else\n+      {\n+        int length = buffer.capacity() / 2;\n+        buffer.asCharBuffer().put(chars, position, length);\n+        buffer.limit(length * 2);\n+        channel.write(buffer);\n+        position += length;\n+      }\n+    } while (position < chars.length);\n+  }\n+\n+  public static void writeInt(StoreChannel channel, ByteBuffer buffer, int value)\n+      throws IOException\n+  {\n+    buffer.clear();\n+    buffer.putInt(value);\n+    buffer.flip();\n+    channel.write(buffer);\n+  }\n+\n+  public static Object[] asArray(Object propertyValue)\n+  {\n+    if (propertyValue.getClass().isArray())\n+    {\n+      int length = Array.getLength(propertyValue);\n+      Object[] result = new Object[length];\n+      for (int i = 0; i < length; i++)\n+      {\n+        result[i] = Array.get(propertyValue, i);\n+      }\n+      return result;\n+    }\n+    return new Object[] {propertyValue};\n+  }\n }\n",
            "diff_size": 256
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3401/IoPrimitiveUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3401/IoPrimitiveUtils.java\nindex 15c6ec34e77..ad0d81130f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3401/IoPrimitiveUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3401/IoPrimitiveUtils.java\n@@ -48,14 +48,14 @@ public abstract class IoPrimitiveUtils\n         // this space optimization is a bit overkill also :)\n         channel.putShort( (short)chars.length );\n         channel.put( (byte)(chars.length >> 16) );\n-        channel.put(chars, chars.length);\n+        channel.put( chars, chars.length);\n     }\n \n     public static String read3bLengthAndString( ReadableChannel channel ) throws IOException\n     {\n         short lengthShort = channel.getShort();\n         byte lengthByte = channel.get();\n-        int length = (lengthByte << 16) | (lengthShort & 0xFFFF);\n+        int length = (lengthByte << 16) | ( lengthShort & 0xFFFF );\n         byte[] chars = new byte[length];\n         channel.get( chars, length );\n         return UTF8.decode( chars );\n@@ -65,7 +65,7 @@ public abstract class IoPrimitiveUtils\n     {\n         byte[] chars = UTF8.encode( string );\n         channel.putShort( (short)chars.length );\n-        channel.put(chars, chars.length);\n+        channel.put( chars, chars.length);\n     }\n \n     public static String read2bLengthAndString( ReadableChannel channel ) throws IOException\n@@ -76,14 +76,14 @@ public abstract class IoPrimitiveUtils\n \n     private static char[] readCharArray( ReadableByteChannel channel,\n             ByteBuffer buffer, char[] charArray ) throws IOException\n-    {\n+{\n         buffer.clear();\n         int charsLeft = charArray.length;\n         int maxSize = buffer.capacity() / 2;\n         int offset = 0; // offset in chars\n         while ( charsLeft > 0 )\n         {\n-            if ( charsLeft > maxSize )\n+            if ( charsLeft> maxSize )\n             {\n                 buffer.limit( maxSize * 2 );\n                 charsLeft -= maxSize;\n@@ -93,7 +93,8 @@ public abstract class IoPrimitiveUtils\n                 buffer.limit( charsLeft * 2 );\n                 charsLeft = 0;\n             }\n-            if ( channel.read( buffer ) != buffer.limit() )\n+\n+if ( channel.read( buffer ) != buffer.limit() )\n             {\n                 return null;\n             }\n@@ -103,19 +104,18 @@ public abstract class IoPrimitiveUtils\n             offset += length;\n             buffer.clear();\n         }\n-        return charArray;\n+\n+return charArray;\n     }\n \n-    public static boolean readAndFlip( ReadableByteChannel channel, ByteBuffer buffer, int bytes )\n-            throws IOException\n-    {\n+    public static boolean readAndFlip( ReadableByteChannel channel, ByteBuffer buffer, int bytes ) throws IOException\n+{\n         buffer.clear();\n         buffer.limit( bytes );\n         while ( buffer.hasRemaining() )\n         {\n             int read = channel.read( buffer );\n-\n-            if ( read == -1 )\n+if ( read == -1 )\n             {\n                 return false;\n             }\n@@ -139,22 +139,23 @@ public abstract class IoPrimitiveUtils\n         return readAndFlip( channel, ByteBuffer.wrap( array ), length ) ? array : null;\n     }\n \n-    public static Map<String, String> read2bMap( ReadableChannel channel ) throws IOException\n+    public static Map<String,String> read2bMap( ReadableChannel channel ) throws IOException\n     {\n         short size = channel.getShort();\n-        Map<String, String> map = new HashMap<>( size );\n+        Map<String,String> map = new HashMap<>( size );\n         for ( int i = 0; i < size; i++ )\n         {\n             String key = read2bLengthAndString( channel );\n             String value = read2bLengthAndString( channel );\n             map.put( key, value );\n         }\n-        return map;\n+\n+return map;\n     }\n \n     public static String readLengthAndString( ReadableByteChannel channel,\n             ByteBuffer buffer ) throws IOException\n-    {\n+{\n         Integer length = readInt( channel, buffer );\n         if ( length != null )\n         {\n@@ -165,18 +166,16 @@ public abstract class IoPrimitiveUtils\n         return null;\n     }\n \n-    public static void writeLengthAndString( StoreChannel channel, ByteBuffer buffer, String value )\n-            throws IOException\n-    {\n+    public static void writeLengthAndString( StoreChannel channel, ByteBuffer buffer, String value ) throws IOException\n+{\n         char[] chars = value.toCharArray();\n         int length = chars.length;\n         writeInt( channel, buffer, length );\n         writeChars( channel, buffer, chars );\n     }\n \n-    private static void writeChars( StoreChannel channel, ByteBuffer buffer, char[] chars )\n-            throws IOException\n-    {\n+    private static void writeChars( StoreChannel channel, ByteBuffer buffer, char[] chars ) throws IOException\n+{\n         int position = 0;\n         do\n         {\n@@ -185,7 +184,7 @@ public abstract class IoPrimitiveUtils\n             if ( leftToWrite * 2 < buffer.capacity() )\n             {\n                 buffer.asCharBuffer().put( chars, position, leftToWrite );\n-                buffer.limit( leftToWrite * 2);\n+                buffer.limit( leftToWrite * 2 );\n                 channel.write( buffer );\n                 position += leftToWrite;\n             }\n@@ -200,9 +199,8 @@ public abstract class IoPrimitiveUtils\n         } while ( position < chars.length );\n     }\n \n-    public static void writeInt( StoreChannel channel, ByteBuffer buffer, int value )\n-            throws IOException\n-    {\n+    public static void writeInt( StoreChannel channel, ByteBuffer buffer, int value ) throws IOException\n+{\n         buffer.clear();\n         buffer.putInt( value );\n         buffer.flip();\n@@ -217,10 +215,11 @@ public abstract class IoPrimitiveUtils\n             Object[] result = new Object[ length ];\n             for ( int i = 0; i < length; i++ )\n             {\n-                result[ i ] = Array.get( propertyValue, i );\n+                result[ i] = Array.get( propertyValue, i );\n             }\n-            return result;\n+\n+return result;\n         }\n         return new Object[] { propertyValue };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "27",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "'>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "39",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "54",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "40",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "38",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "91",
                    "column": "40",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "column": "40",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "29",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "187",
                    "column": "42",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "193",
                    "column": "47",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "37",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "201",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "201",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3401/IoPrimitiveUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3401/IoPrimitiveUtils.java\nindex 15c6ec34e77..f7a76cc3085 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3401/IoPrimitiveUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3401/IoPrimitiveUtils.java\n@@ -25,7 +25,6 @@ import java.nio.ByteBuffer;\n import java.nio.channels.ReadableByteChannel;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.neo4j.io.fs.StoreChannel;\n import org.neo4j.storageengine.api.ReadableChannel;\n import org.neo4j.storageengine.api.WritableChannel;\n@@ -35,7 +34,7 @@ public abstract class IoPrimitiveUtils\n {\n     public static String readString( ReadableChannel channel, int length ) throws IOException\n     {\n-        assert length >= 0 : \"invalid array length \" + length;\n+        assert length >= 0: \"invalid array length \" + length;\n         byte[] chars = new byte[length];\n         channel.get( chars, length );\n         return UTF8.decode( chars );\n@@ -46,16 +45,16 @@ public abstract class IoPrimitiveUtils\n         byte[] chars = UTF8.encode( string );\n         // 3 bytes to represent the length (4 is a bit overkill)... maybe\n         // this space optimization is a bit overkill also :)\n-        channel.putShort( (short)chars.length );\n-        channel.put( (byte)(chars.length >> 16) );\n-        channel.put(chars, chars.length);\n+        channel.putShort( (short) chars.length );\n+        channel.put( (byte) ( chars.length>> 16) );\n+        channel.put( chars, chars.length );\n     }\n \n     public static String read3bLengthAndString( ReadableChannel channel ) throws IOException\n     {\n         short lengthShort = channel.getShort();\n         byte lengthByte = channel.get();\n-        int length = (lengthByte << 16) | (lengthShort & 0xFFFF);\n+        int length = ( lengthByte<<16)| ( lengthShort& 0xFFFF);\n         byte[] chars = new byte[length];\n         channel.get( chars, length );\n         return UTF8.decode( chars );\n@@ -64,8 +63,8 @@ public abstract class IoPrimitiveUtils\n     public static void write2bLengthAndString( WritableChannel channel, String string ) throws IOException\n     {\n         byte[] chars = UTF8.encode( string );\n-        channel.putShort( (short)chars.length );\n-        channel.put(chars, chars.length);\n+        channel.putShort( (short) chars.length );\n+        channel.put( chars, chars.length );\n     }\n \n     public static String read2bLengthAndString( ReadableChannel channel ) throws IOException\n@@ -74,52 +73,53 @@ public abstract class IoPrimitiveUtils\n         return readString( channel, length );\n     }\n \n-    private static char[] readCharArray( ReadableByteChannel channel,\n-            ByteBuffer buffer, char[] charArray ) throws IOException\n+    private static char[] readCharArray( ReadableByteChannel channel, ByteBuffer buffer, char[] charArray ) throws IOException\n     {\n         buffer.clear();\n         int charsLeft = charArray.length;\n-        int maxSize = buffer.capacity() / 2;\n+        int maxSize = buffer.capacity()/ 2;\n         int offset = 0; // offset in chars\n-        while ( charsLeft > 0 )\n+        while( charsLeft > 0)\n         {\n             if ( charsLeft > maxSize )\n             {\n-                buffer.limit( maxSize * 2 );\n+                buffer.limit( maxSize* 2 );\n                 charsLeft -= maxSize;\n             }\n             else\n             {\n-                buffer.limit( charsLeft * 2 );\n+                buffer.limit( charsLeft* 2 );\n                 charsLeft = 0;\n             }\n+\n             if ( channel.read( buffer ) != buffer.limit() )\n             {\n                 return null;\n             }\n+\n             buffer.flip();\n-            int length = buffer.limit() / 2;\n+            int length = buffer.limit()/ 2;\n             buffer.asCharBuffer().get( charArray, offset, length );\n             offset += length;\n             buffer.clear();\n         }\n+\n         return charArray;\n     }\n \n-    public static boolean readAndFlip( ReadableByteChannel channel, ByteBuffer buffer, int bytes )\n-            throws IOException\n+    public static boolean readAndFlip( ReadableByteChannel channel, ByteBuffer buffer, int bytes ) throws IOException\n     {\n         buffer.clear();\n         buffer.limit( bytes );\n-        while ( buffer.hasRemaining() )\n+        while( buffer.hasRemaining())\n         {\n             int read = channel.read( buffer );\n-\n-            if ( read == -1 )\n+            if ( read == - 1 )\n             {\n                 return false;\n             }\n         }\n+\n         buffer.flip();\n         return true;\n     }\n@@ -139,21 +139,21 @@ public abstract class IoPrimitiveUtils\n         return readAndFlip( channel, ByteBuffer.wrap( array ), length ) ? array : null;\n     }\n \n-    public static Map<String, String> read2bMap( ReadableChannel channel ) throws IOException\n+    public static Map<String,String> read2bMap( ReadableChannel channel ) throws IOException\n     {\n         short size = channel.getShort();\n-        Map<String, String> map = new HashMap<>( size );\n+        Map<String,String> map = new HashMap<>( size );\n         for ( int i = 0; i < size; i++ )\n         {\n             String key = read2bLengthAndString( channel );\n             String value = read2bLengthAndString( channel );\n             map.put( key, value );\n         }\n+\n         return map;\n     }\n \n-    public static String readLengthAndString( ReadableByteChannel channel,\n-            ByteBuffer buffer ) throws IOException\n+    public static String readLengthAndString( ReadableByteChannel channel, ByteBuffer buffer ) throws IOException\n     {\n         Integer length = readInt( channel, buffer );\n         if ( length != null )\n@@ -162,11 +162,11 @@ public abstract class IoPrimitiveUtils\n             chars = readCharArray( channel, buffer, chars );\n             return chars == null ? null : new String( chars );\n         }\n+\n         return null;\n     }\n \n-    public static void writeLengthAndString( StoreChannel channel, ByteBuffer buffer, String value )\n-            throws IOException\n+    public static void writeLengthAndString( StoreChannel channel, ByteBuffer buffer, String value ) throws IOException\n     {\n         char[] chars = value.toCharArray();\n         int length = chars.length;\n@@ -174,34 +174,34 @@ public abstract class IoPrimitiveUtils\n         writeChars( channel, buffer, chars );\n     }\n \n-    private static void writeChars( StoreChannel channel, ByteBuffer buffer, char[] chars )\n-            throws IOException\n+    private static void writeChars( StoreChannel channel, ByteBuffer buffer, char[] chars ) throws IOException\n     {\n         int position = 0;\n         do\n         {\n             buffer.clear();\n             int leftToWrite = chars.length - position;\n-            if ( leftToWrite * 2 < buffer.capacity() )\n+            if ( leftToWrite* 2 < buffer.capacity() )\n             {\n                 buffer.asCharBuffer().put( chars, position, leftToWrite );\n-                buffer.limit( leftToWrite * 2);\n+                buffer.limit( leftToWrite* 2 );\n                 channel.write( buffer );\n                 position += leftToWrite;\n             }\n             else\n             {\n-                int length = buffer.capacity() / 2;\n+                int length = buffer.capacity()/ 2;\n                 buffer.asCharBuffer().put( chars, position, length );\n-                buffer.limit( length * 2 );\n+                buffer.limit( length* 2 );\n                 channel.write( buffer );\n                 position += length;\n             }\n-        } while ( position < chars.length );\n+        }\n+\n+        while( position < chars.length);\n     }\n \n-    public static void writeInt( StoreChannel channel, ByteBuffer buffer, int value )\n-            throws IOException\n+    public static void writeInt( StoreChannel channel, ByteBuffer buffer, int value ) throws IOException\n     {\n         buffer.clear();\n         buffer.putInt( value );\n@@ -214,13 +214,15 @@ public abstract class IoPrimitiveUtils\n         if ( propertyValue.getClass().isArray() )\n         {\n             int length = Array.getLength( propertyValue );\n-            Object[] result = new Object[ length ];\n+            Object[] result = new Object[length];\n             for ( int i = 0; i < length; i++ )\n             {\n-                result[ i ] = Array.get( propertyValue, i );\n+                result[i] = Array.get( propertyValue, i );\n             }\n+\n             return result;\n         }\n-        return new Object[] { propertyValue };\n+\n+        return new Object[]{propertyValue};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}