{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n        if (!env().bootstrapHttpEnabled()) {\n            LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n            return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/16/HttpLoader.java\nindex f222f5c018d..29b397ea7b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/16/HttpLoader.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core.config.loader;\n \n import com.couchbase.client.core.ClusterFacade;\n@@ -67,7 +68,8 @@ public class HttpLoader extends AbstractLoader {\n     }\n \n     @Override\n-    protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n+    protected Observable<String> discoverConfig(final String bucket, final String password,\n+                                                final InetAddress hostname) {\n         if (!env().bootstrapHttpEnabled()) {\n             LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/16/HttpLoader.java\nindex f222f5c018d..d60a4e2b6ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/16/HttpLoader.java\n@@ -90,13 +90,12 @@ public class HttpLoader extends AbstractLoader {\n                 @Override\n                 public String call(BucketConfigResponse response) {\n                     if (!response.status().isSuccess()) {\n-                        throw new IllegalStateException(\"Could not load bucket configuration: \"\n-                            + response.status() + \"(\" + response.config() + \")\");\n-                    }\n+                        throw new IllegalStateException(\"Could not load bucket configuration: \" + response.status() + \"(\" + response.config() + \")\");\n+    }\n \n                     LOGGER.debug(\"Successfully loaded config through HTTP.\");\n                     return replaceHostWildcard(response.config(), hostname);\n                 }\n             });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 33, expected level should be one of the following: 23, 27.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 37, expected level should be one of the following: 27, 31.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 41, expected level should be one of the following: 31, 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 41, expected level should be one of the following: 31, 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 37, expected level should be one of the following: 27, 31.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 27, 31.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 27, 31.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 33, expected level should be one of the following: 23, 27.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 29, expected level should be one of the following: 19, 23.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 35, expected level should be one of the following: 33, 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 39, expected level should be one of the following: 37, 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 43, expected level should be one of the following: 41, 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 39, expected level should be one of the following: 37, 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 39, expected level should be one of the following: 37, 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 39, expected level should be one of the following: 37, 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 35, expected level should be one of the following: 33, 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 31, expected level should be one of the following: 29, 33.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/16/HttpLoader.java\nindex f222f5c018d..f7b83b1cd55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/16/HttpLoader.java\n@@ -32,7 +32,6 @@ import com.couchbase.client.core.message.config.BucketConfigResponse;\n import com.couchbase.client.core.service.ServiceType;\n import rx.Observable;\n import rx.functions.Func1;\n-\n import java.net.InetAddress;\n \n /**\n@@ -41,13 +40,14 @@ import java.net.InetAddress;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n+\n public class HttpLoader extends AbstractLoader {\n \n     /**\n      * The logger used.\n      */\n-    private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(HttpLoader.class);\n \n+    private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(HttpLoader.class);\n     private static final String TERSE_PATH = \"/pools/default/b/\";\n     private static final String VERBOSE_PATH = \"/pools/default/buckets/\";\n \n@@ -57,6 +57,7 @@ public class HttpLoader extends AbstractLoader {\n      * @param cluster the cluster reference.\n      * @param environment the environment to use.\n      */\n+\n     public HttpLoader(ClusterFacade cluster, CoreEnvironment environment) {\n         super(LoaderType.HTTP, ServiceType.CONFIG, cluster, environment);\n     }\n@@ -66,37 +67,35 @@ public class HttpLoader extends AbstractLoader {\n         return env().sslEnabled() ? env().bootstrapHttpSslPort() : env().bootstrapHttpDirectPort();\n     }\n \n+\n     @Override\n     protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n         if (!env().bootstrapHttpEnabled()) {\n             LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));\n         }\n-\n-        return cluster()\n-            .<BucketConfigResponse>send(new BucketConfigRequest(TERSE_PATH, hostname, bucket, password))\n-            .flatMap(new Func1<BucketConfigResponse, Observable<BucketConfigResponse>>() {\n-                @Override\n-                public Observable<BucketConfigResponse> call(BucketConfigResponse response) {\n-                    if (response.status().isSuccess()) {\n-                        LOGGER.debug(\"Successfully got config from terse bucket remote.\");\n-                        return Observable.just(response);\n-                    }\n-\n-                    LOGGER.debug(\"Terse bucket config failed, falling back to verbose.\");\n-                    return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, password));\n-                }\n-            }).map(new Func1<BucketConfigResponse, String>() {\n-                @Override\n-                public String call(BucketConfigResponse response) {\n-                    if (!response.status().isSuccess()) {\n-                        throw new IllegalStateException(\"Could not load bucket configuration: \"\n-                            + response.status() + \"(\" + response.config() + \")\");\n-                    }\n-\n-                    LOGGER.debug(\"Successfully loaded config through HTTP.\");\n-                    return replaceHostWildcard(response.config(), hostname);\n-                }\n-            });\n+        return cluster().<BucketConfigResponse>send(new BucketConfigRequest(TERSE_PATH,\n+                   hostname,\n+                   bucket,\n+                   password)).flatMap(new Func1<BucketConfigResponse, Observable<BucketConfigResponse>>() {\n+                                 @Override\n+                                 public Observable<BucketConfigResponse> call(BucketConfigResponse response) {\n+                                     if (response.status().isSuccess()) {\n+                                         LOGGER.debug(\"Successfully got config from terse bucket remote.\");\n+                                         return Observable.just(response);\n+                                     }\n+                                     LOGGER.debug(\"Terse bucket config failed, falling back to verbose.\");\n+                                     return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, password));\n+                                 }\n+                             }).map(new Func1<BucketConfigResponse, String>() {\n+                                   @Override\n+                                   public String call(BucketConfigResponse response) {\n+                                       if (!response.status().isSuccess()) {\n+                                           throw new IllegalStateException(\"Could not load bucket configuration: \" + response.status() + \"(\" + response.config() + \")\");\n+                                       }\n+                                       LOGGER.debug(\"Successfully loaded config through HTTP.\");\n+                                       return replaceHostWildcard(response.config(), hostname);\n+                                   }\n+                               });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'>' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/16/HttpLoader.java\nindex f222f5c018d..e6e53a38d3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/16/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/16/HttpLoader.java\n@@ -67,7 +67,8 @@ public class HttpLoader extends AbstractLoader {\n     }\n \n     @Override\n-    protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n+    protected Observable<String\n+    > discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n         if (!env().bootstrapHttpEnabled()) {\n             LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}