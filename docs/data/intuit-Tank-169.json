{
    "project_name": "intuit-Tank",
    "error_id": "169",
    "information": {
        "errors": [
            {
                "line": "25",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class DefaultParseResult implements ParseResult {\n\n\tprivate Parser parser;\n\tprivate int firstLineParsed;\n\tprivate int lastLineParsed;\n\tprivate List<ParserNotice> notices;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/169/DefaultParseResult.java\nindex edbdc7b74ed..eb08ddc19b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/169/DefaultParseResult.java\n@@ -22,7 +22,7 @@ import java.util.List;\n  */\n public class DefaultParseResult implements ParseResult {\n \n-\tprivate Parser parser;\n+    private Parser parser;\n \tprivate int firstLineParsed;\n \tprivate int lastLineParsed;\n \tprivate List<ParserNotice> notices;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/169/DefaultParseResult.java\nindex edbdc7b74ed..a0cdcf379de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/169/DefaultParseResult.java\n@@ -6,6 +6,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea.parser;\n \n import java.util.ArrayList;\n@@ -22,130 +23,130 @@ import java.util.List;\n  */\n public class DefaultParseResult implements ParseResult {\n \n-\tprivate Parser parser;\n-\tprivate int firstLineParsed;\n-\tprivate int lastLineParsed;\n-\tprivate List<ParserNotice> notices;\n-\tprivate long parseTime;\n-\tprivate Exception error;\n-\n-\n-\tpublic DefaultParseResult(Parser parser) {\n-\t\tthis.parser = parser;\n-\t\tnotices = new ArrayList<>();\n-\t}\n-\n-\n-\t/**\n-\t * Adds a parser notice.\n-\t *\n-\t * @param notice The new notice.\n-\t * @see #clearNotices()\n-\t */\n-\tpublic void addNotice(ParserNotice notice) {\n-\t\tnotices.add(notice);\n-\t}\n-\n-\n-\t/**\n-\t * Clears any parser notices in this result.\n-\t *\n-\t * @see #addNotice(ParserNotice)\n-\t */\n-\tpublic void clearNotices() {\n-\t\tnotices.clear();\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic Exception getError() {\n-\t\treturn error;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic int getFirstLineParsed() {\n-\t\treturn firstLineParsed;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic int getLastLineParsed() {\n-\t\treturn lastLineParsed;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic List<ParserNotice> getNotices() {\n-\t\treturn notices;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic Parser getParser() {\n-\t\treturn parser;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic long getParseTime() {\n-\t\treturn parseTime;\n-\t}\n-\n-\n-\t/**\n-\t * Sets the error that occurred when last parsing the document, if\n-\t * any.\n-\t *\n-\t * @param e The error that occurred, or <code>null</code> if no error\n-\t *        occurred.\n-\t */\n-\tpublic void setError(Exception e) {\n-\t\tthis.error = e;\n-\t}\n-\n-\n-\t/**\n-\t * Sets the line range parsed.\n-\t *\n-\t * @param first The first line parsed, inclusive.\n-\t * @param last The last line parsed, inclusive.\n-\t * @see #getFirstLineParsed()\n-\t * @see #getLastLineParsed()\n-\t */\n-\tpublic void setParsedLines(int first, int last) {\n-\t\tfirstLineParsed = first;\n-\t\tlastLineParsed = last;\n-\t}\n-\n-\n-\t/**\n-\t * Sets the amount of time it took for this parser to parse the document.\n-\t *\n-\t * @param time The amount of time, in milliseconds.\n-\t * @see #getParseTime()\n-\t */\n-\tpublic void setParseTime(long time) {\n-\t\tparseTime = time;\n-\t}\n+  private Parser parser;\n+  private int firstLineParsed;\n+  private int lastLineParsed;\n+  private List<ParserNotice> notices;\n+  private long parseTime;\n+  private Exception error;\n+\n+\n+  public DefaultParseResult(Parser parser) {\n+    this.parser = parser;\n+    notices = new ArrayList<>();\n+  }\n+\n+\n+  /**\n+   * Adds a parser notice.\n+   *\n+   * @param notice The new notice.\n+   * @see #clearNotices()\n+   */\n+  public void addNotice(ParserNotice notice) {\n+    notices.add(notice);\n+  }\n+\n+\n+  /**\n+   * Clears any parser notices in this result.\n+   *\n+   * @see #addNotice(ParserNotice)\n+   */\n+  public void clearNotices() {\n+    notices.clear();\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public Exception getError() {\n+    return error;\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public int getFirstLineParsed() {\n+    return firstLineParsed;\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public int getLastLineParsed() {\n+    return lastLineParsed;\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public List<ParserNotice> getNotices() {\n+    return notices;\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public Parser getParser() {\n+    return parser;\n+  }\n+\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public long getParseTime() {\n+    return parseTime;\n+  }\n+\n+\n+  /**\n+   * Sets the error that occurred when last parsing the document, if\n+   * any.\n+   *\n+   * @param e The error that occurred, or <code>null</code> if no error\n+   *          occurred.\n+   */\n+  public void setError(Exception e) {\n+    this.error = e;\n+  }\n+\n+\n+  /**\n+   * Sets the line range parsed.\n+   *\n+   * @param first The first line parsed, inclusive.\n+   * @param last  The last line parsed, inclusive.\n+   * @see #getFirstLineParsed()\n+   * @see #getLastLineParsed()\n+   */\n+  public void setParsedLines(int first, int last) {\n+    firstLineParsed = first;\n+    lastLineParsed = last;\n+  }\n+\n+\n+  /**\n+   * Sets the amount of time it took for this parser to parse the document.\n+   *\n+   * @param time The amount of time, in milliseconds.\n+   * @see #getParseTime()\n+   */\n+  public void setParseTime(long time) {\n+    parseTime = time;\n+  }\n \n \n }\n",
            "diff_size": 125
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "25",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/169/DefaultParseResult.java\nindex edbdc7b74ed..100ed4961e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/169/DefaultParseResult.java\n@@ -11,7 +11,6 @@ package org.fife.ui.rsyntaxtextarea.parser;\n import java.util.ArrayList;\n import java.util.List;\n \n-\n /**\n  * A basic implementation of {@link ParseResult}.  Most, if not all,\n  * <code>Parser</code>s can return instances of this class.\n@@ -22,96 +21,86 @@ import java.util.List;\n  */\n public class DefaultParseResult implements ParseResult {\n \n-\tprivate Parser parser;\n+    private Parser parser;\n \tprivate int firstLineParsed;\n \tprivate int lastLineParsed;\n \tprivate List<ParserNotice> notices;\n \tprivate long parseTime;\n \tprivate Exception error;\n \n-\n-\tpublic DefaultParseResult(Parser parser) {\n-\t\tthis.parser = parser;\n+public DefaultParseResult(Parser parser) {\n+    this.parser = parser;\n \t\tnotices = new ArrayList<>();\n-\t}\n+    }\n \n-\n-\t/**\n+/**\n \t * Adds a parser notice.\n \t *\n \t * @param notice The new notice.\n \t * @see #clearNotices()\n \t */\n \tpublic void addNotice(ParserNotice notice) {\n-\t\tnotices.add(notice);\n-\t}\n+    notices.add(notice);\n+    }\n \n-\n-\t/**\n+/**\n \t * Clears any parser notices in this result.\n \t *\n \t * @see #addNotice(ParserNotice)\n \t */\n \tpublic void clearNotices() {\n-\t\tnotices.clear();\n-\t}\n-\n+    notices.clear();\n+    }\n \n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic Exception getError() {\n-\t\treturn error;\n-\t}\n-\n+    return error;\n+    }\n \n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic int getFirstLineParsed() {\n-\t\treturn firstLineParsed;\n-\t}\n+    return firstLineParsed;\n+    }\n \n-\n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic int getLastLineParsed() {\n-\t\treturn lastLineParsed;\n-\t}\n-\n+    return lastLineParsed;\n+    }\n \n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic List<ParserNotice> getNotices() {\n-\t\treturn notices;\n-\t}\n-\n+    return notices;\n+    }\n \n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic Parser getParser() {\n-\t\treturn parser;\n-\t}\n+    return parser;\n+    }\n \n-\n-\t/**\n+/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic long getParseTime() {\n-\t\treturn parseTime;\n-\t}\n-\n+    return parseTime;\n+    }\n \n-\t/**\n+/**\n \t * Sets the error that occurred when last parsing the document, if\n \t * any.\n \t *\n@@ -119,11 +108,10 @@ public class DefaultParseResult implements ParseResult {\n \t *        occurred.\n \t */\n \tpublic void setError(Exception e) {\n-\t\tthis.error = e;\n-\t}\n-\n+    this.error = e;\n+    }\n \n-\t/**\n+/**\n \t * Sets the line range parsed.\n \t *\n \t * @param first The first line parsed, inclusive.\n@@ -132,20 +120,18 @@ public class DefaultParseResult implements ParseResult {\n \t * @see #getLastLineParsed()\n \t */\n \tpublic void setParsedLines(int first, int last) {\n-\t\tfirstLineParsed = first;\n+    firstLineParsed = first;\n \t\tlastLineParsed = last;\n-\t}\n+    }\n \n-\n-\t/**\n+/**\n \t * Sets the amount of time it took for this parser to parse the document.\n \t *\n \t * @param time The amount of time, in milliseconds.\n \t * @see #getParseTime()\n \t */\n \tpublic void setParseTime(long time) {\n-\t\tparseTime = time;\n-\t}\n-\n+    parseTime = time;\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/169/DefaultParseResult.java\nindex edbdc7b74ed..ad1f8aaa621 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/169/DefaultParseResult.java\n@@ -8,6 +8,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea.parser;\n \n+\n+\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -20,132 +22,148 @@ import java.util.List;\n  * @version 1.0\n  * @see Parser\n  */\n+\n+\n public class DefaultParseResult implements ParseResult {\n \n-\tprivate Parser parser;\n-\tprivate int firstLineParsed;\n-\tprivate int lastLineParsed;\n-\tprivate List<ParserNotice> notices;\n-\tprivate long parseTime;\n-\tprivate Exception error;\n-\n-\n-\tpublic DefaultParseResult(Parser parser) {\n-\t\tthis.parser = parser;\n-\t\tnotices = new ArrayList<>();\n-\t}\n-\n-\n-\t/**\n-\t * Adds a parser notice.\n-\t *\n-\t * @param notice The new notice.\n-\t * @see #clearNotices()\n-\t */\n-\tpublic void addNotice(ParserNotice notice) {\n-\t\tnotices.add(notice);\n-\t}\n-\n-\n-\t/**\n-\t * Clears any parser notices in this result.\n-\t *\n-\t * @see #addNotice(ParserNotice)\n-\t */\n-\tpublic void clearNotices() {\n-\t\tnotices.clear();\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic Exception getError() {\n-\t\treturn error;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic int getFirstLineParsed() {\n-\t\treturn firstLineParsed;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic int getLastLineParsed() {\n-\t\treturn lastLineParsed;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic List<ParserNotice> getNotices() {\n-\t\treturn notices;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic Parser getParser() {\n-\t\treturn parser;\n-\t}\n-\n-\n-\t/**\n-\t * {@inheritDoc}\n-\t */\n-\t@Override\n-\tpublic long getParseTime() {\n-\t\treturn parseTime;\n-\t}\n-\n-\n-\t/**\n-\t * Sets the error that occurred when last parsing the document, if\n-\t * any.\n-\t *\n-\t * @param e The error that occurred, or <code>null</code> if no error\n-\t *        occurred.\n-\t */\n-\tpublic void setError(Exception e) {\n-\t\tthis.error = e;\n-\t}\n-\n-\n-\t/**\n-\t * Sets the line range parsed.\n-\t *\n-\t * @param first The first line parsed, inclusive.\n-\t * @param last The last line parsed, inclusive.\n-\t * @see #getFirstLineParsed()\n-\t * @see #getLastLineParsed()\n-\t */\n-\tpublic void setParsedLines(int first, int last) {\n-\t\tfirstLineParsed = first;\n-\t\tlastLineParsed = last;\n-\t}\n-\n-\n-\t/**\n-\t * Sets the amount of time it took for this parser to parse the document.\n-\t *\n-\t * @param time The amount of time, in milliseconds.\n-\t * @see #getParseTime()\n-\t */\n-\tpublic void setParseTime(long time) {\n-\t\tparseTime = time;\n-\t}\n-\n-\n-}\n+    private Parser parser;\n+    private int firstLineParsed;\n+    private int lastLineParsed;\n+    private List<ParserNotice> notices;\n+    private long parseTime;\n+    private Exception error;\n+\n+    public DefaultParseResult(Parser parser) {\n+        this.parser = parser;\n+        notices = new ArrayList< >();\n+    }\n+\n+\n+    /**\n+     * Adds a parser notice.\n+     *\n+     * @param notice The new notice.\n+     * @see #clearNotices()\n+     */\n+\n+\n+    public void addNotice(ParserNotice notice) {\n+        notices.add(notice);\n+    }\n+\n+\n+    /**\n+     * Clears any parser notices in this result.\n+     *\n+     * @see #addNotice(ParserNotice)\n+     */\n+\n+\n+    public void clearNotices() {\n+        notices.clear();\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public Exception getError() {\n+        return error;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public int getFirstLineParsed() {\n+        return firstLineParsed;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public int getLastLineParsed() {\n+        return lastLineParsed;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public List<ParserNotice> getNotices() {\n+        return notices;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public Parser getParser() {\n+        return parser;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+\n+    @Override\n+    public long getParseTime() {\n+        return parseTime;\n+    }\n+\n+\n+    /**\n+     * Sets the error that occurred when last parsing the document, if\n+     * any.\n+     *\n+     * @param e The error that occurred, or <code>null</code> if no error\n+     *        occurred.\n+     */\n+\n+\n+    public void setError(Exception e) {\n+        this.error = e;\n+    }\n+\n+\n+    /**\n+     * Sets the line range parsed.\n+     *\n+     * @param first The first line parsed, inclusive.\n+     * @param last The last line parsed, inclusive.\n+     * @see #getFirstLineParsed()\n+     * @see #getLastLineParsed()\n+     */\n+\n+\n+    public void setParsedLines(int first, int last) {\n+        firstLineParsed = first;\n+        lastLineParsed = last;\n+    }\n+\n+\n+    /**\n+     * Sets the amount of time it took for this parser to parse the document.\n+     *\n+     * @param time The amount of time, in milliseconds.\n+     * @see #getParseTime()\n+     */\n+\n+\n+    public void setParseTime(long time) {\n+        parseTime = time;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 145
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/169/DefaultParseResult.java\nindex edbdc7b74ed..eb08ddc19b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/169/DefaultParseResult.java\n@@ -22,7 +22,7 @@ import java.util.List;\n  */\n public class DefaultParseResult implements ParseResult {\n \n-\tprivate Parser parser;\n+    private Parser parser;\n \tprivate int firstLineParsed;\n \tprivate int lastLineParsed;\n \tprivate List<ParserNotice> notices;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/169/DefaultParseResult.java\nindex edbdc7b74ed..eb08ddc19b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/169/DefaultParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/169/DefaultParseResult.java\n@@ -22,7 +22,7 @@ import java.util.List;\n  */\n public class DefaultParseResult implements ParseResult {\n \n-\tprivate Parser parser;\n+    private Parser parser;\n \tprivate int firstLineParsed;\n \tprivate int lastLineParsed;\n \tprivate List<ParserNotice> notices;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}