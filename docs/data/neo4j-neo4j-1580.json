{
    "project_name": "neo4j-neo4j",
    "error_id": "1580",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "194",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1580/KernelDiagnosticsOfflineReportProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1580/KernelDiagnosticsOfflineReportProvider.java\nindex 038b0c376f3..5a1f4b43e13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1580/KernelDiagnosticsOfflineReportProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1580/KernelDiagnosticsOfflineReportProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.diagnostics;\n \n import java.io.IOException;\n@@ -46,49 +47,49 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n \n     public KernelDiagnosticsOfflineReportProvider()\n     {\n-        super( \"logs\", \"plugins\", \"tree\", \"tx\", \"version\" );\n+        super(\"logs\", \"plugins\", \"tree\", \"tx\", \"version\");\n     }\n \n     @Override\n-    public void init( FileSystemAbstraction fs, String defaultDatabaseName, Config config, Path storeDirectory )\n+    public void init(FileSystemAbstraction fs, String defaultDatabaseName, Config config, Path storeDirectory)\n     {\n         this.fs = fs;\n         this.config = config;\n-        this.databaseLayout = DatabaseLayout.ofFlat( storeDirectory );\n+        this.databaseLayout = DatabaseLayout.ofFlat(storeDirectory);\n     }\n \n     @Override\n-    protected List<DiagnosticsReportSource> provideSources( Set<String> classifiers )\n+    protected List<DiagnosticsReportSource> provideSources(Set<String> classifiers)\n     {\n         List<DiagnosticsReportSource> sources = new ArrayList<>();\n-        if ( classifiers.contains( \"logs\" ) )\n+        if (classifiers.contains(\"logs\"))\n         {\n-            getLogFiles( sources );\n+            getLogFiles(sources);\n         }\n-        if ( classifiers.contains( \"plugins\" ) )\n+        if (classifiers.contains(\"plugins\"))\n         {\n-            listPlugins( sources );\n+            listPlugins(sources);\n         }\n-        if ( classifiers.contains( \"tree\" ) )\n+        if (classifiers.contains(\"tree\"))\n         {\n-            listDataDirectory( sources );\n+            listDataDirectory(sources);\n         }\n-        if ( classifiers.contains( \"tx\" ) )\n+        if (classifiers.contains(\"tx\"))\n         {\n-            getTransactionLogFiles( sources );\n+            getTransactionLogFiles(sources);\n         }\n-        if ( classifiers.contains( \"version\" ) )\n+        if (classifiers.contains(\"version\"))\n         {\n-            getVersion( sources );\n+            getVersion(sources);\n         }\n \n         return sources;\n     }\n \n-    private void getVersion( List<DiagnosticsReportSource> sources )\n+    private void getVersion(List<DiagnosticsReportSource> sources)\n     {\n         Supplier<String> neo4jVersion = () -> \"neo4j \" + Version.getNeo4jVersion() + System.lineSeparator();\n-        sources.add( DiagnosticsReportSources.newDiagnosticsString( \"version.txt\", neo4jVersion ) );\n+        sources.add(DiagnosticsReportSources.newDiagnosticsString(\"version.txt\", neo4jVersion));\n     }\n \n     /**\n@@ -96,36 +97,35 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n      *\n      * @param sources destination of the sources.\n      */\n-    private void listPlugins( List<DiagnosticsReportSource> sources )\n+    private void listPlugins(List<DiagnosticsReportSource> sources)\n     {\n-        Path pluginDirectory = config.get( GraphDatabaseSettings.plugin_dir );\n-        if ( fs.fileExists( pluginDirectory ) )\n+        Path pluginDirectory = config.get(GraphDatabaseSettings.plugin_dir);\n+        if (fs.fileExists(pluginDirectory))\n         {\n             StringBuilder sb = new StringBuilder();\n-            sb.append( \"List of plugin directory:\" ).append( System.lineSeparator() );\n-            listContentOfDirectory( pluginDirectory, \"  \", sb );\n+            sb.append(\"List of plugin directory:\").append(System.lineSeparator());\n+            listContentOfDirectory(pluginDirectory, \"  \", sb);\n \n-            sources.add( DiagnosticsReportSources.newDiagnosticsString( \"plugins.txt\", sb::toString ) );\n+            sources.add(DiagnosticsReportSources.newDiagnosticsString(\"plugins.txt\", sb::toString));\n         }\n     }\n \n-    private void listContentOfDirectory( Path directory, String prefix, StringBuilder sb )\n+    private void listContentOfDirectory(Path directory, String prefix, StringBuilder sb)\n     {\n-        if ( !fs.isDirectory( directory ) )\n+        if (!fs.isDirectory(directory))\n         {\n             return;\n         }\n \n-        Path[] files = fs.listFiles( directory );\n-        for ( Path file : files )\n+        Path[] files = fs.listFiles(directory);\n+        for (Path file : files)\n         {\n-            if ( fs.isDirectory( file ) )\n+            if (fs.isDirectory(file))\n             {\n-                listContentOfDirectory( file, prefix + file.getFileSystem().getSeparator() + file.getFileName(), sb );\n-            }\n-            else\n+                listContentOfDirectory(file, prefix + file.getFileSystem().getSeparator() + file.getFileName(), sb);\n+            } else\n             {\n-                sb.append( prefix ).append( file.getFileName() ).append( System.lineSeparator() );\n+                sb.append(prefix).append(file.getFileName()).append(System.lineSeparator());\n             }\n         }\n     }\n@@ -135,15 +135,15 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n      *\n      * @param sources destination of the sources.\n      */\n-    private void listDataDirectory( List<DiagnosticsReportSource> sources )\n+    private void listDataDirectory(List<DiagnosticsReportSource> sources)\n     {\n         StorageEngineFactory storageEngineFactory = StorageEngineFactory.selectStorageEngine();\n-        StoreFilesDiagnostics storeFiles = new StoreFilesDiagnostics( storageEngineFactory, fs, databaseLayout );\n+        StoreFilesDiagnostics storeFiles = new StoreFilesDiagnostics(storageEngineFactory, fs, databaseLayout);\n \n         List<String> files = new ArrayList<>();\n-        storeFiles.dump( files::add );\n+        storeFiles.dump(files::add);\n \n-        sources.add( DiagnosticsReportSources.newDiagnosticsString( \"tree.txt\", () -> String.join( System.lineSeparator(), files ) ) );\n+        sources.add(DiagnosticsReportSources.newDiagnosticsString(\"tree.txt\", () -> String.join(System.lineSeparator(), files)));\n     }\n \n     /**\n@@ -151,28 +151,28 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n      *\n      * @param sources destination of the sources.\n      */\n-    private void getLogFiles( List<DiagnosticsReportSource> sources )\n+    private void getLogFiles(List<DiagnosticsReportSource> sources)\n     {\n         // debug.log\n-        Path debugLogFile = config.get( GraphDatabaseSettings.store_internal_log_path );\n-        if ( fs.fileExists( debugLogFile ) )\n+        Path debugLogFile = config.get(GraphDatabaseSettings.store_internal_log_path);\n+        if (fs.fileExists(debugLogFile))\n         {\n-            sources.addAll( DiagnosticsReportSources.newDiagnosticsRotatingFile( \"logs/\", fs, debugLogFile ) );\n+            sources.addAll(DiagnosticsReportSources.newDiagnosticsRotatingFile(\"logs/\", fs, debugLogFile));\n         }\n \n         // neo4j.log\n-        Path neo4jLog = config.get( GraphDatabaseSettings.store_user_log_path );\n-        if ( fs.fileExists( neo4jLog ) )\n+        Path neo4jLog = config.get(GraphDatabaseSettings.store_user_log_path);\n+        if (fs.fileExists(neo4jLog))\n         {\n-            sources.addAll( DiagnosticsReportSources.newDiagnosticsRotatingFile( \"logs/\", fs, neo4jLog ) );\n+            sources.addAll(DiagnosticsReportSources.newDiagnosticsRotatingFile(\"logs/\", fs, neo4jLog));\n         }\n \n         // gc.log\n-        Path logDirectory = config.get( GraphDatabaseSettings.logs_directory );\n-        Path gcLog = logDirectory.resolve( \"gc.log\" );\n-        if ( fs.fileExists( gcLog ) )\n+        Path logDirectory = config.get(GraphDatabaseSettings.logs_directory);\n+        Path gcLog = logDirectory.resolve(\"gc.log\");\n+        if (fs.fileExists(gcLog))\n         {\n-            sources.addAll( DiagnosticsReportSources.newDiagnosticsRotatingFile( \"logs/\", fs, gcLog ) );\n+            sources.addAll(DiagnosticsReportSources.newDiagnosticsRotatingFile(\"logs/\", fs, gcLog));\n         }\n         // there are other rotation schemas but nothing we can predict...\n     }\n@@ -182,20 +182,19 @@ public class KernelDiagnosticsOfflineReportProvider extends DiagnosticsOfflineRe\n      *\n      * @param sources destination of the sources.\n      */\n-    private void getTransactionLogFiles( List<DiagnosticsReportSource> sources )\n+    private void getTransactionLogFiles(List<DiagnosticsReportSource> sources)\n     {\n         try\n         {\n-            LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder( databaseLayout.databaseDirectory(), fs ).build();\n-            for ( Path file : logFiles.logFiles() )\n+            LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder(databaseLayout.databaseDirectory(), fs).build();\n+            for (Path file : logFiles.logFiles())\n             {\n-                sources.add( DiagnosticsReportSources.newDiagnosticsFile( \"tx/\" + file.getFileName(), fs, file ) );\n+                sources.add(DiagnosticsReportSources.newDiagnosticsFile(\"tx/\" + file.getFileName(), fs, file));\n             }\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            sources.add( DiagnosticsReportSources\n-                    .newDiagnosticsString( \"tx.txt\", () -> \"Error getting tx logs: \" + e.getMessage() ) );\n+            sources.add(DiagnosticsReportSources\n+              .newDiagnosticsString(\"tx.txt\", () -> \"Error getting tx logs: \" + e.getMessage()));\n         }\n     }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}