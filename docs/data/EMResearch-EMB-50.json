{
    "project_name": "EMResearch-EMB",
    "error_id": "50",
    "information": {
        "errors": [
            {
                "line": "99",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  }\n\n  public GermanConfusionProbabilityRule(ResourceBundle messages, LanguageModel languageModel, Language language, int grams) {\n    super(messages, languageModel, language, grams, EXCEPTIONS);\n    addExamplePair(Example.wrong(\"W\u00e4hrend Sie das Ganze <marker>mir</marker> einem Holzl\u00f6ffel r\u00fchren\u2026\"),\n                   Example.fixed(\"W\u00e4hrend Sie das Ganze <marker>mit</marker> einem Holzl\u00f6ffel r\u00fchren\u2026\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/50/GermanConfusionProbabilityRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/50/GermanConfusionProbabilityRule.java\nindex 270faad5905..ffe134e4b64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/50/GermanConfusionProbabilityRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/50/GermanConfusionProbabilityRule.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2015 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.de;\n \n import org.languagetool.Language;\n@@ -34,83 +35,84 @@ import java.util.regex.Pattern;\n  */\n public class GermanConfusionProbabilityRule extends ConfusionProbabilityRule {\n \n-  private static final List<Pattern> SENTENCE_EXCEPTION_PATTERNS = Arrays.asList(\n-    Pattern.compile(\"wir \\\\(\"),  // \"Hallo, wir (die Dingsbums Gmbh)\"\n-    Pattern.compile(\"Wie .*?en Sie\"),  // \"Wie heizen Sie das Haus?\"\n-    Pattern.compile(\"fiel(e|en)? .* (aus|auf)\")\n-  );\n+    private static final List<Pattern> SENTENCE_EXCEPTION_PATTERNS = Arrays.asList(\n+        Pattern.compile(\"wir \\\\(\"),  // \"Hallo, wir (die Dingsbums Gmbh)\"\n+        Pattern.compile(\"Wie .*?en Sie\"),  // \"Wie heizen Sie das Haus?\"\n+        Pattern.compile(\"fiel(e|en)? .* (aus|auf)\")\n+    );\n \n-  private static final List<String> EXCEPTIONS = Arrays.asList(\n-    // Use all-lowercase, matches will be case-insensitive.\n-    // See https://github.com/languagetool-org/languagetool/issues/1516\n-    \"wir stark ausgelastet sind\",\n-    \"wir entwickeln f\u00fcr\",\n-    \"nutzen wir Google\",\n-    \"vertreiben wir\",\n-    \"wir auch nicht\",\n-    \", dir bei\",  // \"froh, dir bei deiner Arbeit zu helfen\"\n-    \"fiel hinaus\",\n-    \"setz dir\",  // \"Setz dir doch bitte einen Termin am Donnerstag\"\n-    \"du hast dir\",\n-    \"vielen als held\",\n-    \"seht gut\",  // \"Ihr seht gut aus\"\n-    \"so viel das\",\n-    \"wie erinnern sie sich\",\n-    \"d\u00fcrfen wir nicht\",\n-    \"kann dich auch\",\n-    \"wie schicken wir\",\n-    \"wie benutzen sie\",\n-    \"wir ja nicht\",\n-    \"wie wir oder\",\n-    \"eine uhrzeit hatten\",\n-    \"damit wir das\",\n-    \"damit wir die\",\n-    \"damit wir dir\",\n-    \"was wird in\",\n-    \"warum wird da\",\n-    \"da mir der\",\n-    \"das wir uns\",\n-    \"so wir k\u00f6nnen\",\n-    \"wie zahlen sie\",\n-    \"war sich f\u00fcr nichts\", // war sich f\u00fcr nichts zu schade\n-    \"ich drei bin\", // seit ich drei bin.\n-    \"was wird unser\",\n-    \"die wird wieder\",\n-    \"damit wir f\u00fcr\",\n-    \"wie finden sie\",\n-    \"ach die armen\",\n-    \"wie stehen da die\", // vs wir\n-    \"wir w\u00fcrden sie\", // vs wird\n-    \"damit wir ihre daten\", // vs wird\n-    \"kannst du doch gerne\", // vs dich\n-    \"wie ist hier der Stand\", // vs Sand\n-    \"wie ist der Stand\", // vs Sand\n-    \"hole dich auch ab\", // vs dir\n-    \"w\u00fcrdest du dich vorstellen\", // vs dir\n-    \"daten wir \u00fcber\", // \"welche Daten wir \u00fcber unsere Nutzer erfassen\"\n-    \"anders seht\", // falls ihr das anders seht (weht)\n-    \"wir ja.\" // vs wie\n-  );\n+    private static final List<String> EXCEPTIONS = Arrays.asList(\n+        // Use all-lowercase, matches will be case-insensitive.\n+        // See https://github.com/languagetool-org/languagetool/issues/1516\n+        \"wir stark ausgelastet sind\",\n+        \"wir entwickeln f\u00fcr\",\n+        \"nutzen wir Google\",\n+        \"vertreiben wir\",\n+        \"wir auch nicht\",\n+        \", dir bei\",  // \"froh, dir bei deiner Arbeit zu helfen\"\n+        \"fiel hinaus\",\n+        \"setz dir\",  // \"Setz dir doch bitte einen Termin am Donnerstag\"\n+        \"du hast dir\",\n+        \"vielen als held\",\n+        \"seht gut\",  // \"Ihr seht gut aus\"\n+        \"so viel das\",\n+        \"wie erinnern sie sich\",\n+        \"d\u00fcrfen wir nicht\",\n+        \"kann dich auch\",\n+        \"wie schicken wir\",\n+        \"wie benutzen sie\",\n+        \"wir ja nicht\",\n+        \"wie wir oder\",\n+        \"eine uhrzeit hatten\",\n+        \"damit wir das\",\n+        \"damit wir die\",\n+        \"damit wir dir\",\n+        \"was wird in\",\n+        \"warum wird da\",\n+        \"da mir der\",\n+        \"das wir uns\",\n+        \"so wir k\u00f6nnen\",\n+        \"wie zahlen sie\",\n+        \"war sich f\u00fcr nichts\", // war sich f\u00fcr nichts zu schade\n+        \"ich drei bin\", // seit ich drei bin.\n+        \"was wird unser\",\n+        \"die wird wieder\",\n+        \"damit wir f\u00fcr\",\n+        \"wie finden sie\",\n+        \"ach die armen\",\n+        \"wie stehen da die\", // vs wir\n+        \"wir w\u00fcrden sie\", // vs wird\n+        \"damit wir ihre daten\", // vs wird\n+        \"kannst du doch gerne\", // vs dich\n+        \"wie ist hier der Stand\", // vs Sand\n+        \"wie ist der Stand\", // vs Sand\n+        \"hole dich auch ab\", // vs dir\n+        \"w\u00fcrdest du dich vorstellen\", // vs dir\n+        \"daten wir \u00fcber\", // \"welche Daten wir \u00fcber unsere Nutzer erfassen\"\n+        \"anders seht\", // falls ihr das anders seht (weht)\n+        \"wir ja.\" // vs wie\n+    );\n \n-  public GermanConfusionProbabilityRule(ResourceBundle messages, LanguageModel languageModel, Language language) {\n-    this(messages, languageModel, language, 3);\n-  }\n+    public GermanConfusionProbabilityRule(ResourceBundle messages, LanguageModel languageModel, Language language) {\n+        this(messages, languageModel, language, 3);\n+    }\n \n-  public GermanConfusionProbabilityRule(ResourceBundle messages, LanguageModel languageModel, Language language, int grams) {\n-    super(messages, languageModel, language, grams, EXCEPTIONS);\n-    addExamplePair(Example.wrong(\"W\u00e4hrend Sie das Ganze <marker>mir</marker> einem Holzl\u00f6ffel r\u00fchren\u2026\"),\n-                   Example.fixed(\"W\u00e4hrend Sie das Ganze <marker>mit</marker> einem Holzl\u00f6ffel r\u00fchren\u2026\"));\n-  }\n+    public GermanConfusionProbabilityRule(ResourceBundle messages, LanguageModel languageModel, Language language,\n+                                          int grams) {\n+        super(messages, languageModel, language, grams, EXCEPTIONS);\n+        addExamplePair(Example.wrong(\"W\u00e4hrend Sie das Ganze <marker>mir</marker> einem Holzl\u00f6ffel r\u00fchren\u2026\"),\n+            Example.fixed(\"W\u00e4hrend Sie das Ganze <marker>mit</marker> einem Holzl\u00f6ffel r\u00fchren\u2026\"));\n+    }\n \n-  @Override\n-  protected boolean isException(String sentenceText, int startPos, int endPos) {\n-    for (Pattern pattern : SENTENCE_EXCEPTION_PATTERNS) {\n-      Matcher m = pattern.matcher(sentenceText);\n-      if (m.find()) {\n-        return true;\n-      }\n+    @Override\n+    protected boolean isException(String sentenceText, int startPos, int endPos) {\n+        for (Pattern pattern : SENTENCE_EXCEPTION_PATTERNS) {\n+            Matcher m = pattern.matcher(sentenceText);\n+            if (m.find()) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n \n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}