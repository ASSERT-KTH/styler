{
    "project_name": "neo4j-neo4j",
    "error_id": "2253",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2253/History.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2253/History.java\nindex ffacf71f239..3f1f73e6834 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2253/History.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2253/History.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.commands;\n \n import java.util.Collections;\n@@ -41,7 +42,7 @@ public class History implements Command\n     private final Historian historian;\n     private final List<String> aliases = Collections.emptyList();\n \n-    public History( @Nonnull final Logger logger, @Nonnull final Historian historian )\n+    public History(@Nonnull final Logger logger, @Nonnull final Historian historian)\n     {\n         this.logger = logger;\n         this.historian = historian;\n@@ -83,14 +84,14 @@ public class History implements Command\n     }\n \n     @Override\n-    public void execute( @Nonnull String argString ) throws ExitException, CommandException\n+    public void execute(@Nonnull String argString) throws ExitException, CommandException\n     {\n-        simpleArgParse( argString, 0, COMMAND_NAME, getUsage() );\n+        simpleArgParse(argString, 0, COMMAND_NAME, getUsage());\n \n         // Calculate starting position\n         int lineCount = 16;\n \n-        logger.printOut( printHistory( historian.getHistory(), lineCount ) );\n+        logger.printOut(printHistory(historian.getHistory(), lineCount));\n     }\n \n     /**\n@@ -98,20 +99,20 @@ public class History implements Command\n      *\n      * @param lineCount number of entries to print\n      */\n-    private String printHistory( @Nonnull final List<String> history, final int lineCount )\n+    private String printHistory(@Nonnull final List<String> history, final int lineCount)\n     {\n         // for alignment, check the string length of history size\n-        int colWidth = Integer.toString( history.size() ).length();\n+        int colWidth = Integer.toString(history.size()).length();\n         String fmt = \" %-\" + colWidth + \"d  %s\\n\";\n \n         String result = \"\";\n         int count = 0;\n \n-        for ( int i = history.size() - 1; i >= 0 && count < lineCount; i--, count++ )\n+        for (int i = history.size() - 1; i >= 0 && count < lineCount; i--, count++)\n         {\n-            String line = history.get( i );\n+            String line = history.get(i);\n             // Executing old commands with !N actually starts from 1, and not 0, hence increment index by one\n-            result = String.format( fmt, i + 1, line ) + result;\n+            result = String.format(fmt, i + 1, line) + result;\n         }\n \n         return result;\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}