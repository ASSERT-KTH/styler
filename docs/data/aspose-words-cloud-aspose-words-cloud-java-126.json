{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "217",
                "column": "43",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n        return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/126/GetDocumentPropertiesRequest.java\nindex e4e018dad00..a337dc09343 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/126/GetDocumentPropertiesRequest.java\n@@ -214,6 +214,6 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n+        return (DocumentPropertiesResponse) apiClient.deserialize(response, DocumentPropertiesResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/126/GetDocumentPropertiesRequest.java\nindex e4e018dad00..3ed1a1a0aa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/126/GetDocumentPropertiesRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -191,8 +193,8 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -214,6 +216,6 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n+        return (DocumentPropertiesResponse) apiClient.deserialize(response, DocumentPropertiesResponse.class);\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "216",
                    "column": "43",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/126/GetDocumentPropertiesRequest.java\nindex e4e018dad00..a7d61ae8b50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/126/GetDocumentPropertiesRequest.java\n@@ -151,10 +151,9 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      */\n     public void setPassword(String value) {\n         this.password = value;\n-    }\n-\n+  }\n \n-    /*\n+/*\n      * Creates the http request based on this request model.\n      *\n      * @param apiClient ApiClient instance\n@@ -216,4 +215,4 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n     public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/126/GetDocumentPropertiesRequest.java\nindex e4e018dad00..567525fb1c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/126/GetDocumentPropertiesRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,31 +39,42 @@ import java.util.*;\n /*\n  * Request model for getDocumentProperties operation.\n  */\n+\n+\n public class GetDocumentPropertiesRequest implements RequestIfc {\n     /*\n      * The filename of the input document.\n      */\n-    private String name;\n+\n+  private String name;\n \n     /*\n      * Original document folder.\n      */\n-    private String folder;\n+\n+\n+  private String folder;\n \n     /*\n      * Original document storage.\n      */\n-    private String storage;\n+\n+\n+  private String storage;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Initializes a new instance of the GetDocumentPropertiesRequest class.\n@@ -75,83 +85,96 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @param String loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      * @param String password Password for opening an encrypted document.\n      */\n-    public GetDocumentPropertiesRequest(String name, String folder, String storage, String loadEncoding, String password) {\n-        this.name = name;\n-        this.folder = folder;\n-        this.storage = storage;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-    }\n+\n+\n+  public GetDocumentPropertiesRequest(String name,  String folder,  String storage,  String loadEncoding,  String password) {\n+    this.name = name;\n+    this.folder = folder;\n+    this.storage = storage;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+  }\n \n     /*\n      * Gets The filename of the input document.\n      */\n-    public String getName() {\n-        return this.name;\n-    }\n+\n+\n+  public String getName() {\n+    return this.name;\n+  }\n \n     /*\n      * Sets The filename of the input document.\n      */\n-    public void setName(String value) {\n-        this.name = value;\n-    }\n+\n+  public void setName(String value) {\n+    this.name = value;\n+  }\n \n     /*\n      * Gets Original document folder.\n      */\n-    public String getFolder() {\n-        return this.folder;\n-    }\n+\n+  public String getFolder() {\n+    return this.folder;\n+  }\n \n     /*\n      * Sets Original document folder.\n      */\n-    public void setFolder(String value) {\n-        this.folder = value;\n-    }\n+\n+  public void setFolder(String value) {\n+    this.folder = value;\n+  }\n \n     /*\n      * Gets Original document storage.\n      */\n-    public String getStorage() {\n-        return this.storage;\n-    }\n+\n+  public String getStorage() {\n+    return this.storage;\n+  }\n \n     /*\n      * Sets Original document storage.\n      */\n-    public void setStorage(String value) {\n-        this.storage = value;\n-    }\n+\n+  public void setStorage(String value) {\n+    this.storage = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n \n     /*\n@@ -161,51 +184,49 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n-        if (getName() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling getDocumentProperties\");\n-        }\n+    if (getName() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling getDocumentProperties\");\n+    }\n \n-        Object localVarPostBody = null;\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/{name}/documentProperties\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"GET\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/{name}/documentProperties\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"GET\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return DocumentPropertiesResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return DocumentPropertiesResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -213,7 +234,8 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n-    }\n-}\n+\n+  public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    return (DocumentPropertiesResponse) apiClient.deserialize(response, DocumentPropertiesResponse.class);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 112
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/126/GetDocumentPropertiesRequest.java\nindex e4e018dad00..a337dc09343 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/126/GetDocumentPropertiesRequest.java\n@@ -214,6 +214,6 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n+        return (DocumentPropertiesResponse) apiClient.deserialize(response, DocumentPropertiesResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/126/GetDocumentPropertiesRequest.java\nindex e4e018dad00..ae5fe1a2a49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/126/GetDocumentPropertiesRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/126/GetDocumentPropertiesRequest.java\n@@ -214,6 +214,6 @@ public class GetDocumentPropertiesRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public DocumentPropertiesResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (DocumentPropertiesResponse)apiClient.deserialize(response, DocumentPropertiesResponse.class);\n+        return (DocumentPropertiesResponse)  apiClient.deserialize(response, DocumentPropertiesResponse.class);\n     }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}