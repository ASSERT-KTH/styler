{
    "project_name": "apache-ignite-3",
    "error_id": "55",
    "information": {
        "errors": [
            {
                "line": "94",
                "column": "9",
                "severity": "error",
                "message": "'while' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        long stop = System.currentTimeMillis() + timeout;\n\n        while(System.currentTimeMillis() < stop) {\n            if (cond.getAsBoolean())\n                return true;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/55/RaftCounterServerAbstractTest.java\nindex ec2d62403ef..15e1e165ea3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/55/RaftCounterServerAbstractTest.java\n@@ -91,7 +91,7 @@ abstract class RaftCounterServerAbstractTest {\n     @SuppressWarnings(\"BusyWait\") protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cond.getAsBoolean())\n                 return true;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/55/RaftCounterServerAbstractTest.java\nindex ec2d62403ef..93c756fb55e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/55/RaftCounterServerAbstractTest.java\n@@ -36,73 +36,87 @@ import org.apache.ignite.raft.client.message.impl.RaftClientMessageFactoryImpl;\n \n import static java.lang.Thread.sleep;\n \n-/** */\n+/**\n+ *\n+ */\n abstract class RaftCounterServerAbstractTest {\n-    /** */\n-    protected static final IgniteLogger LOG = IgniteLogger.forClass(RaftCounterServerAbstractTest.class);\n-\n-    /** */\n-    protected static final RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n-\n-    /** Network factory. */\n-    protected static final ClusterServiceFactory NETWORK_FACTORY = new TestScaleCubeClusterServiceFactory();\n-\n-    /** */\n-    protected static final int PORT = 20010;\n-\n-    /** */\n-    private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry()\n-        .registerFactory(ScaleCubeMessage.TYPE, new ScaleCubeMessageSerializationFactory())\n-        .registerFactory(HandshakeStartMessage.TYPE, new HandshakeStartMessageSerializationFactory())\n-        .registerFactory(HandshakeStartResponseMessage.TYPE, new HandshakeStartResponseMessageSerializationFactory());\n-\n-    /**\n-     * @param name Node name.\n-     * @param port Local port.\n-     * @param servers Server nodes of the cluster.\n-     * @return The client cluster view.\n-     */\n-    protected ClusterService clusterService(String name, int port, List<String> servers, boolean start) {\n-        var context = new ClusterLocalConfiguration(name, port, servers, SERIALIZATION_REGISTRY);\n-\n-        var network = NETWORK_FACTORY.createClusterService(context);\n-\n-        if (start)\n-            network.start();\n-\n-        return network;\n+  /**\n+   *\n+   */\n+  protected static final IgniteLogger LOG = IgniteLogger.forClass(RaftCounterServerAbstractTest.class);\n+\n+  /**\n+   *\n+   */\n+  protected static final RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n+\n+  /**\n+   * Network factory.\n+   */\n+  protected static final ClusterServiceFactory NETWORK_FACTORY = new TestScaleCubeClusterServiceFactory();\n+\n+  /**\n+   *\n+   */\n+  protected static final int PORT = 20010;\n+\n+  /**\n+   *\n+   */\n+  private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry()\n+      .registerFactory(ScaleCubeMessage.TYPE, new ScaleCubeMessageSerializationFactory())\n+      .registerFactory(HandshakeStartMessage.TYPE, new HandshakeStartMessageSerializationFactory())\n+      .registerFactory(HandshakeStartResponseMessage.TYPE, new HandshakeStartResponseMessageSerializationFactory());\n+\n+  /**\n+   * @param name    Node name.\n+   * @param port    Local port.\n+   * @param servers Server nodes of the cluster.\n+   * @return The client cluster view.\n+   */\n+  protected ClusterService clusterService(String name, int port, List<String> servers, boolean start) {\n+    var context = new ClusterLocalConfiguration(name, port, servers, SERIALIZATION_REGISTRY);\n+\n+    var network = NETWORK_FACTORY.createClusterService(context);\n+\n+    if (start) {\n+      network.start();\n     }\n \n-    /**\n-     * @param cluster The cluster.\n-     * @param expected Expected count.\n-     * @param timeout The timeout in millis.\n-     * @return {@code True} if topology size is equal to expected.\n-     */\n-    protected boolean waitForTopology(ClusterService cluster, int expected, int timeout) {\n-        return waitForCondition(() -> cluster.topologyService().allMembers().size() >= expected, timeout);\n-    }\n-\n-    /**\n-     * @param cond The condition.\n-     * @param timeout The timeout.\n-     * @return {@code True} if condition has happened within the timeout.\n-     */\n-    @SuppressWarnings(\"BusyWait\") protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n-        long stop = System.currentTimeMillis() + timeout;\n-\n-        while(System.currentTimeMillis() < stop) {\n-            if (cond.getAsBoolean())\n-                return true;\n-\n-            try {\n-                sleep(50);\n-            }\n-            catch (InterruptedException e) {\n-                return false;\n-            }\n-        }\n-\n+    return network;\n+  }\n+\n+  /**\n+   * @param cluster  The cluster.\n+   * @param expected Expected count.\n+   * @param timeout  The timeout in millis.\n+   * @return {@code True} if topology size is equal to expected.\n+   */\n+  protected boolean waitForTopology(ClusterService cluster, int expected, int timeout) {\n+    return waitForCondition(() -> cluster.topologyService().allMembers().size() >= expected, timeout);\n+  }\n+\n+  /**\n+   * @param cond    The condition.\n+   * @param timeout The timeout.\n+   * @return {@code True} if condition has happened within the timeout.\n+   */\n+  @SuppressWarnings(\"BusyWait\")\n+  protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n+    long stop = System.currentTimeMillis() + timeout;\n+\n+    while (System.currentTimeMillis() < stop) {\n+      if (cond.getAsBoolean()) {\n+        return true;\n+      }\n+\n+      try {\n+        sleep(50);\n+      } catch (InterruptedException e) {\n         return false;\n+      }\n     }\n+\n+    return false;\n+  }\n }\n",
            "diff_size": 78
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/55/RaftCounterServerAbstractTest.java\nindex ec2d62403ef..642eeb4e74e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/55/RaftCounterServerAbstractTest.java\n@@ -56,7 +56,7 @@ abstract class RaftCounterServerAbstractTest {\n         .registerFactory(HandshakeStartMessage.TYPE, new HandshakeStartMessageSerializationFactory())\n         .registerFactory(HandshakeStartResponseMessage.TYPE, new HandshakeStartResponseMessageSerializationFactory());\n \n-    /**\n+/**\n      * @param name Node name.\n      * @param port Local port.\n      * @param servers Server nodes of the cluster.\n@@ -88,10 +88,11 @@ abstract class RaftCounterServerAbstractTest {\n      * @param timeout The timeout.\n      * @return {@code True} if condition has happened within the timeout.\n      */\n-    @SuppressWarnings(\"BusyWait\") protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n+    @SuppressWarnings(\"BusyWait\")\n+protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cond.getAsBoolean())\n                 return true;\n \n@@ -105,4 +106,4 @@ abstract class RaftCounterServerAbstractTest {\n \n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "55",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "77",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "96",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "108",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/55/RaftCounterServerAbstractTest.java\nindex ec2d62403ef..8b9070144cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/55/RaftCounterServerAbstractTest.java\n@@ -37,24 +37,34 @@ import org.apache.ignite.raft.client.message.impl.RaftClientMessageFactoryImpl;\n import static java.lang.Thread.sleep;\n \n /** */\n+\n+\n abstract class RaftCounterServerAbstractTest {\n     /** */\n+\n     protected static final IgniteLogger LOG = IgniteLogger.forClass(RaftCounterServerAbstractTest.class);\n \n     /** */\n+\n+\n     protected static final RaftClientMessageFactory FACTORY = new RaftClientMessageFactoryImpl();\n \n     /** Network factory. */\n+\n+\n     protected static final ClusterServiceFactory NETWORK_FACTORY = new TestScaleCubeClusterServiceFactory();\n \n     /** */\n+\n+\n     protected static final int PORT = 20010;\n \n     /** */\n-    private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry()\n-        .registerFactory(ScaleCubeMessage.TYPE, new ScaleCubeMessageSerializationFactory())\n-        .registerFactory(HandshakeStartMessage.TYPE, new HandshakeStartMessageSerializationFactory())\n-        .registerFactory(HandshakeStartResponseMessage.TYPE, new HandshakeStartResponseMessageSerializationFactory());\n+\n+\n+    private static final MessageSerializationRegistry SERIALIZATION_REGISTRY = new MessageSerializationRegistry().registerFactory(ScaleCubeMessage.TYPE, new ScaleCubeMessageSerializationFactory())\n+                                                                                                                 .registerFactory(HandshakeStartMessage.TYPE, new HandshakeStartMessageSerializationFactory())\n+                                                                                                                 .registerFactory(HandshakeStartResponseMessage.TYPE, new HandshakeStartResponseMessageSerializationFactory());\n \n     /**\n      * @param name Node name.\n@@ -62,6 +72,8 @@ abstract class RaftCounterServerAbstractTest {\n      * @param servers Server nodes of the cluster.\n      * @return The client cluster view.\n      */\n+\n+\n     protected ClusterService clusterService(String name, int port, List<String> servers, boolean start) {\n         var context = new ClusterLocalConfiguration(name, port, servers, SERIALIZATION_REGISTRY);\n \n@@ -79,8 +91,11 @@ abstract class RaftCounterServerAbstractTest {\n      * @param timeout The timeout in millis.\n      * @return {@code True} if topology size is equal to expected.\n      */\n+\n+\n     protected boolean waitForTopology(ClusterService cluster, int expected, int timeout) {\n-        return waitForCondition(() -> cluster.topologyService().allMembers().size() >= expected, timeout);\n+        return waitForCondition(() -> cluster.topologyService().allMembers()\n+                                                               .size() >= expected, timeout);\n     }\n \n     /**\n@@ -88,10 +103,12 @@ abstract class RaftCounterServerAbstractTest {\n      * @param timeout The timeout.\n      * @return {@code True} if condition has happened within the timeout.\n      */\n+\n+\n     @SuppressWarnings(\"BusyWait\") protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cond.getAsBoolean())\n                 return true;\n \n@@ -105,4 +122,4 @@ abstract class RaftCounterServerAbstractTest {\n \n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/55/RaftCounterServerAbstractTest.java\nindex ec2d62403ef..15e1e165ea3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/55/RaftCounterServerAbstractTest.java\n@@ -91,7 +91,7 @@ abstract class RaftCounterServerAbstractTest {\n     @SuppressWarnings(\"BusyWait\") protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cond.getAsBoolean())\n                 return true;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/55/RaftCounterServerAbstractTest.java\nindex ec2d62403ef..15e1e165ea3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/55/RaftCounterServerAbstractTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/55/RaftCounterServerAbstractTest.java\n@@ -91,7 +91,7 @@ abstract class RaftCounterServerAbstractTest {\n     @SuppressWarnings(\"BusyWait\") protected boolean waitForCondition(BooleanSupplier cond, long timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n-        while(System.currentTimeMillis() < stop) {\n+        while (System.currentTimeMillis() < stop) {\n             if (cond.getAsBoolean())\n                 return true;\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}