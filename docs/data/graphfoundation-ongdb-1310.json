{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1310",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1310/DynamicRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1310/DynamicRecordFormat.java\nindex 990ee2b52e5..a7c30165bc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1310/DynamicRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1310/DynamicRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit;\n \n import java.io.IOException;\n@@ -34,92 +35,90 @@ import static org.neo4j.kernel.impl.store.format.standard.DynamicRecordFormat.re\n  * LEGEND:\n  * V: variable between 3B-8B\n  * D: data size\n- *\n+ * <p>\n  * Record format:\n  * 1B   header\n  * 3B   number of bytes data in this block\n  * 8B   next block\n  * DB   data (record size - (the above) header size)\n- *\n+ * <p>\n  * => 12B + data size\n  */\n public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRecord>\n {\n-    private static final int RECORD_HEADER_SIZE = 1/*header byte*/ + 3/*# of bytes*/ + 8/*max size of next reference*/;\n-                                            // = 12\n-    private static final int START_RECORD_BIT = 0x8;\n+  private static final int RECORD_HEADER_SIZE = 1/*header byte*/ + 3/*# of bytes*/ + 8/*max size of next reference*/;\n+  // = 12\n+  private static final int START_RECORD_BIT = 0x8;\n \n-    public DynamicRecordFormat()\n-    {\n-        super( INT_STORE_HEADER_READER, RECORD_HEADER_SIZE, IN_USE_BIT, HighLimitFormatSettings.DYNAMIC_MAXIMUM_ID_BITS );\n-    }\n+  public DynamicRecordFormat()\n+  {\n+    super(INT_STORE_HEADER_READER, RECORD_HEADER_SIZE, IN_USE_BIT, HighLimitFormatSettings.DYNAMIC_MAXIMUM_ID_BITS);\n+  }\n \n-    @Override\n-    public DynamicRecord newRecord()\n-    {\n-        return new DynamicRecord( -1 );\n-    }\n+  @Override\n+  public DynamicRecord newRecord()\n+  {\n+    return new DynamicRecord(-1);\n+  }\n \n-    @Override\n-    public void read( DynamicRecord record, PageCursor cursor, RecordLoad mode, int recordSize )\n+  @Override\n+  public void read(DynamicRecord record, PageCursor cursor, RecordLoad mode, int recordSize)\n+  {\n+    byte headerByte = cursor.getByte();\n+    boolean inUse = isInUse(headerByte);\n+    if (mode.shouldLoad(inUse))\n     {\n-        byte headerByte = cursor.getByte();\n-        boolean inUse = isInUse( headerByte );\n-        if ( mode.shouldLoad( inUse ) )\n-        {\n-            int length = cursor.getShort() | cursor.getByte() << 16;\n-            if ( length > recordSize | length < 0 )\n-            {\n-                cursor.setCursorException( payloadLengthErrorMessage( record, recordSize, length ) );\n-                return;\n-            }\n-            long next = cursor.getLong();\n-            boolean isStartRecord = (headerByte & START_RECORD_BIT) != 0;\n-            record.initialize( inUse, isStartRecord, next, -1, length );\n-            readData( record, cursor );\n-        }\n-        else\n-        {\n-            record.setInUse( inUse );\n-        }\n-    }\n-\n-    private String payloadLengthErrorMessage( DynamicRecord record, int recordSize, int length )\n+      int length = cursor.getShort() | cursor.getByte() << 16;\n+      if (length > recordSize | length < 0)\n+      {\n+        cursor.setCursorException(payloadLengthErrorMessage(record, recordSize, length));\n+        return;\n+      }\n+      long next = cursor.getLong();\n+      boolean isStartRecord = (headerByte & START_RECORD_BIT) != 0;\n+      record.initialize(inUse, isStartRecord, next, -1, length);\n+      readData(record, cursor);\n+    } else\n     {\n-        return length < 0 ?\n-               negativePayloadErrorMessage( record, length ) :\n-               payloadTooBigErrorMessage( record, recordSize, length );\n+      record.setInUse(inUse);\n     }\n+  }\n \n-    private String negativePayloadErrorMessage( DynamicRecord record, int length )\n-    {\n-        return format( \"DynamicRecord[%s] claims to have a negative payload of %s bytes.\",\n-                record.getId(), length );\n-    }\n+  private String payloadLengthErrorMessage(DynamicRecord record, int recordSize, int length)\n+  {\n+    return length < 0 ?\n+        negativePayloadErrorMessage(record, length) :\n+        payloadTooBigErrorMessage(record, recordSize, length);\n+  }\n \n-    @Override\n-    public void write( DynamicRecord record, PageCursor cursor, int recordSize )\n-    {\n-        if ( record.inUse() )\n-        {\n-            assert record.getLength() < (1 << 24) - 1;\n-            byte headerByte = (byte) ((record.inUse() ? IN_USE_BIT : 0) |\n-                    (record.isStartRecord() ? START_RECORD_BIT : 0));\n-            cursor.putByte( headerByte );\n-            cursor.putShort( (short) record.getLength() );\n-            cursor.putByte( (byte) (record.getLength() >>> 16 ) );\n-            cursor.putLong( record.getNextBlock() );\n-            cursor.putBytes( record.getData() );\n-        }\n-        else\n-        {\n-            markAsUnused( cursor );\n-        }\n-    }\n+  private String negativePayloadErrorMessage(DynamicRecord record, int length)\n+  {\n+    return format(\"DynamicRecord[%s] claims to have a negative payload of %s bytes.\",\n+        record.getId(), length);\n+  }\n \n-    @Override\n-    public long getNextRecordReference( DynamicRecord record )\n+  @Override\n+  public void write(DynamicRecord record, PageCursor cursor, int recordSize)\n+  {\n+    if (record.inUse())\n+    {\n+      assert record.getLength() < (1 << 24) - 1;\n+      byte headerByte = (byte) ((record.inUse() ? IN_USE_BIT : 0) |\n+          (record.isStartRecord() ? START_RECORD_BIT : 0));\n+      cursor.putByte(headerByte);\n+      cursor.putShort((short) record.getLength());\n+      cursor.putByte((byte) (record.getLength() >>> 16));\n+      cursor.putLong(record.getNextBlock());\n+      cursor.putBytes(record.getData());\n+    } else\n     {\n-        return record.getNextBlock();\n+      markAsUnused(cursor);\n     }\n+  }\n+\n+  @Override\n+  public long getNextRecordReference(DynamicRecord record)\n+  {\n+    return record.getNextBlock();\n+  }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "67",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "49",
                    "column": "84",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "43",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "61",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "61",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "37",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "49",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "44",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "44",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "column": "73",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "column": "56",
                    "severity": "error",
                    "message": "'>>>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1310/DynamicRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1310/DynamicRecordFormat.java\nindex 990ee2b52e5..2d945bd08e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1310/DynamicRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1310/DynamicRecordFormat.java\n@@ -20,14 +20,14 @@\n package org.neo4j.kernel.impl.store.format.highlimit;\n \n import java.io.IOException;\n-\n import org.neo4j.io.pagecache.PageCursor;\n import org.neo4j.kernel.impl.store.format.BaseOneByteHeaderRecordFormat;\n import org.neo4j.kernel.impl.store.record.DynamicRecord;\n import org.neo4j.kernel.impl.store.record.RecordLoad;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.kernel.impl.store.format.standard.DynamicRecordFormat.payloadTooBigErrorMessage;\n+\n import static org.neo4j.kernel.impl.store.format.standard.DynamicRecordFormat.readData;\n \n /**\n@@ -43,9 +43,10 @@ import static org.neo4j.kernel.impl.store.format.standard.DynamicRecordFormat.re\n  *\n  * => 12B + data size\n  */\n+\n public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRecord>\n {\n-    private static final int RECORD_HEADER_SIZE = 1/*header byte*/ + 3/*# of bytes*/ + 8/*max size of next reference*/;\n+    private static final int RECORD_HEADER_SIZE = 1/*header byte*/+ 3/*# of bytes*/+ 8/*max size of next reference*/;\n                                             // = 12\n     private static final int START_RECORD_BIT = 0x8;\n \n@@ -57,7 +58,7 @@ public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRe\n     @Override\n     public DynamicRecord newRecord()\n     {\n-        return new DynamicRecord( -1 );\n+        return new DynamicRecord( - 1 );\n     }\n \n     @Override\n@@ -67,15 +68,16 @@ public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRe\n         boolean inUse = isInUse( headerByte );\n         if ( mode.shouldLoad( inUse ) )\n         {\n-            int length = cursor.getShort() | cursor.getByte() << 16;\n-            if ( length > recordSize | length < 0 )\n+            int length = cursor.getShort()| cursor.getByte()<<16;\n+            if ( length > recordSize| length < 0 )\n             {\n                 cursor.setCursorException( payloadLengthErrorMessage( record, recordSize, length ) );\n                 return;\n             }\n+\n             long next = cursor.getLong();\n-            boolean isStartRecord = (headerByte & START_RECORD_BIT) != 0;\n-            record.initialize( inUse, isStartRecord, next, -1, length );\n+            boolean isStartRecord = ( headerByte& START_RECORD_BIT) != 0;\n+            record.initialize( inUse, isStartRecord, next, - 1, length );\n             readData( record, cursor );\n         }\n         else\n@@ -86,15 +88,12 @@ public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRe\n \n     private String payloadLengthErrorMessage( DynamicRecord record, int recordSize, int length )\n     {\n-        return length < 0 ?\n-               negativePayloadErrorMessage( record, length ) :\n-               payloadTooBigErrorMessage( record, recordSize, length );\n+        return length < 0 ? negativePayloadErrorMessage( record, length ) : payloadTooBigErrorMessage( record, recordSize, length );\n     }\n \n     private String negativePayloadErrorMessage( DynamicRecord record, int length )\n     {\n-        return format( \"DynamicRecord[%s] claims to have a negative payload of %s bytes.\",\n-                record.getId(), length );\n+        return format( \"DynamicRecord[%s] claims to have a negative payload of %s bytes.\", record.getId(), length );\n     }\n \n     @Override\n@@ -102,12 +101,11 @@ public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRe\n     {\n         if ( record.inUse() )\n         {\n-            assert record.getLength() < (1 << 24) - 1;\n-            byte headerByte = (byte) ((record.inUse() ? IN_USE_BIT : 0) |\n-                    (record.isStartRecord() ? START_RECORD_BIT : 0));\n+            assert record.getLength() < ( 1<<24) - 1;\n+            byte headerByte = (byte) (( record.inUse() ? IN_USE_BIT : 0)| ( record.isStartRecord() ? START_RECORD_BIT : 0));\n             cursor.putByte( headerByte );\n             cursor.putShort( (short) record.getLength() );\n-            cursor.putByte( (byte) (record.getLength() >>> 16 ) );\n+            cursor.putByte( (byte) ( record.getLength()>>> 16) );\n             cursor.putLong( record.getNextBlock() );\n             cursor.putBytes( record.getData() );\n         }\n@@ -122,4 +120,4 @@ public class DynamicRecordFormat extends BaseOneByteHeaderRecordFormat<DynamicRe\n     {\n         return record.getNextBlock();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}