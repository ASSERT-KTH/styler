{
    "project_name": "graphfoundation-ongdb",
    "error_id": "995",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/995/FullCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/995/FullCheck.java\nindex 6fa4f668d89..a7fcd63cd02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/995/FullCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/995/FullCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.lang.reflect.Array;\n@@ -54,125 +55,123 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n \n public class FullCheck\n {\n-    private final boolean checkPropertyOwners;\n-    private final boolean checkLabelScanStore;\n-    private final boolean checkIndexes;\n-    private final ProgressMonitorFactory progressFactory;\n-    private final IndexSamplingConfig samplingConfig;\n-    private final boolean checkGraph;\n-    private final int threads;\n-    private final Statistics statistics;\n+  private final boolean checkPropertyOwners;\n+  private final boolean checkLabelScanStore;\n+  private final boolean checkIndexes;\n+  private final ProgressMonitorFactory progressFactory;\n+  private final IndexSamplingConfig samplingConfig;\n+  private final boolean checkGraph;\n+  private final int threads;\n+  private final Statistics statistics;\n \n-    public FullCheck( Config config, ProgressMonitorFactory progressFactory,\n-            Statistics statistics, int threads )\n-    {\n-        this( progressFactory, statistics, threads, new ConsistencyFlags( config ), config );\n-    }\n+  public FullCheck(Config config, ProgressMonitorFactory progressFactory,\n+                   Statistics statistics, int threads)\n+  {\n+    this(progressFactory, statistics, threads, new ConsistencyFlags(config), config);\n+  }\n \n-    public FullCheck( ProgressMonitorFactory progressFactory, Statistics statistics, int threads,\n-                      ConsistencyFlags consistencyFlags, Config config )\n-    {\n-        this.statistics = statistics;\n-        this.threads = threads;\n-        this.progressFactory = progressFactory;\n-        this.samplingConfig = new IndexSamplingConfig( config );\n-        this.checkGraph = consistencyFlags.isCheckGraph();\n-        this.checkIndexes = consistencyFlags.isCheckIndexes();\n-        this.checkLabelScanStore = consistencyFlags.isCheckLabelScanStore();\n-        this.checkPropertyOwners = consistencyFlags.isCheckPropertyOwners();\n-    }\n+  public FullCheck(ProgressMonitorFactory progressFactory, Statistics statistics, int threads,\n+                   ConsistencyFlags consistencyFlags, Config config)\n+  {\n+    this.statistics = statistics;\n+    this.threads = threads;\n+    this.progressFactory = progressFactory;\n+    this.samplingConfig = new IndexSamplingConfig(config);\n+    this.checkGraph = consistencyFlags.isCheckGraph();\n+    this.checkIndexes = consistencyFlags.isCheckIndexes();\n+    this.checkLabelScanStore = consistencyFlags.isCheckLabelScanStore();\n+    this.checkPropertyOwners = consistencyFlags.isCheckPropertyOwners();\n+  }\n \n-    public ConsistencySummaryStatistics execute( DirectStoreAccess stores, Log log )\n-            throws ConsistencyCheckIncompleteException\n-    {\n-        return execute( stores, log, NO_MONITOR );\n-    }\n+  public ConsistencySummaryStatistics execute(DirectStoreAccess stores, Log log)\n+      throws ConsistencyCheckIncompleteException\n+  {\n+    return execute(stores, log, NO_MONITOR);\n+  }\n \n-    ConsistencySummaryStatistics execute( DirectStoreAccess stores, Log log, Monitor reportMonitor )\n-            throws ConsistencyCheckIncompleteException\n-    {\n-        ConsistencySummaryStatistics summary = new ConsistencySummaryStatistics();\n-        InconsistencyReport report = new InconsistencyReport( new InconsistencyMessageLogger( log ), summary );\n+  ConsistencySummaryStatistics execute(DirectStoreAccess stores, Log log, Monitor reportMonitor)\n+      throws ConsistencyCheckIncompleteException\n+  {\n+    ConsistencySummaryStatistics summary = new ConsistencySummaryStatistics();\n+    InconsistencyReport report = new InconsistencyReport(new InconsistencyMessageLogger(log), summary);\n \n-        OwnerCheck ownerCheck = new OwnerCheck( checkPropertyOwners );\n-        CountsBuilderDecorator countsBuilder =\n-                new CountsBuilderDecorator( stores.nativeStores() );\n-        CheckDecorator decorator = new CheckDecorator.ChainCheckDecorator( ownerCheck, countsBuilder );\n-        CacheAccess cacheAccess = new DefaultCacheAccess( statistics.getCounts(), threads );\n-        RecordAccess records = recordAccess( stores.nativeStores(), cacheAccess );\n-        execute( stores, decorator, records, report, cacheAccess, reportMonitor );\n-        ownerCheck.scanForOrphanChains( progressFactory );\n+    OwnerCheck ownerCheck = new OwnerCheck(checkPropertyOwners);\n+    CountsBuilderDecorator countsBuilder =\n+        new CountsBuilderDecorator(stores.nativeStores());\n+    CheckDecorator decorator = new CheckDecorator.ChainCheckDecorator(ownerCheck, countsBuilder);\n+    CacheAccess cacheAccess = new DefaultCacheAccess(statistics.getCounts(), threads);\n+    RecordAccess records = recordAccess(stores.nativeStores(), cacheAccess);\n+    execute(stores, decorator, records, report, cacheAccess, reportMonitor);\n+    ownerCheck.scanForOrphanChains(progressFactory);\n \n-        if ( checkGraph )\n+    if (checkGraph)\n+    {\n+      CountsAccessor countsAccessor = stores.nativeStores().getCounts();\n+      if (countsAccessor instanceof CountsTracker)\n+      {\n+        CountsTracker tracker = (CountsTracker) countsAccessor;\n+        try\n         {\n-            CountsAccessor countsAccessor = stores.nativeStores().getCounts();\n-            if ( countsAccessor instanceof CountsTracker )\n-            {\n-                CountsTracker tracker = (CountsTracker) countsAccessor;\n-                try\n-                {\n-                    tracker.start();\n-                }\n-                catch ( Exception e )\n-                {\n-                    // let's hope it was already started :)\n-                }\n-            }\n-            countsBuilder.checkCounts( countsAccessor, new ConsistencyReporter( records, report ), progressFactory );\n-        }\n-\n-        if ( !summary.isConsistent() )\n+          tracker.start();\n+        } catch (Exception e)\n         {\n-            log.warn( \"Inconsistencies found: \" + summary );\n+          // let's hope it was already started :)\n         }\n-        return summary;\n+      }\n+      countsBuilder.checkCounts(countsAccessor, new ConsistencyReporter(records, report), progressFactory);\n     }\n \n-    void execute( final DirectStoreAccess directStoreAccess, final CheckDecorator decorator,\n-                  final RecordAccess recordAccess, final InconsistencyReport report,\n-                  CacheAccess cacheAccess, Monitor reportMonitor )\n-            throws ConsistencyCheckIncompleteException\n+    if (!summary.isConsistent())\n     {\n-        final ConsistencyReporter reporter = new ConsistencyReporter( recordAccess, report, reportMonitor );\n-        StoreProcessor processEverything = new StoreProcessor( decorator, reporter, Stage.SEQUENTIAL_FORWARD, cacheAccess );\n-        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory.multipleParts(\n-                \"Full Consistency Check\" );\n-        final StoreAccess nativeStores = directStoreAccess.nativeStores();\n-        try ( IndexAccessors indexes =\n-                      new IndexAccessors( directStoreAccess.indexes(), nativeStores.getSchemaStore(), samplingConfig ) )\n-        {\n-            MultiPassStore.Factory multiPass = new MultiPassStore.Factory(\n-                    decorator, recordAccess, cacheAccess, report, reportMonitor );\n-            ConsistencyCheckTasks taskCreator = new ConsistencyCheckTasks( progress, processEverything,\n-                    nativeStores, statistics, cacheAccess, directStoreAccess.labelScanStore(), indexes,\n-                    multiPass, reporter, threads );\n-            List<ConsistencyCheckerTask> tasks =\n-                    taskCreator.createTasksForFullCheck( checkLabelScanStore, checkIndexes, checkGraph );\n-            TaskExecutor.execute( tasks, decorator::prepare );\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new ConsistencyCheckIncompleteException( e );\n-        }\n+      log.warn(\"Inconsistencies found: \" + summary);\n     }\n+    return summary;\n+  }\n \n-    static RecordAccess recordAccess( StoreAccess store, CacheAccess cacheAccess )\n+  void execute(final DirectStoreAccess directStoreAccess, final CheckDecorator decorator,\n+               final RecordAccess recordAccess, final InconsistencyReport report,\n+               CacheAccess cacheAccess, Monitor reportMonitor)\n+      throws ConsistencyCheckIncompleteException\n+  {\n+    final ConsistencyReporter reporter = new ConsistencyReporter(recordAccess, report, reportMonitor);\n+    StoreProcessor processEverything = new StoreProcessor(decorator, reporter, Stage.SEQUENTIAL_FORWARD, cacheAccess);\n+    ProgressMonitorFactory.MultiPartBuilder progress = progressFactory.multipleParts(\n+        \"Full Consistency Check\");\n+    final StoreAccess nativeStores = directStoreAccess.nativeStores();\n+    try (IndexAccessors indexes =\n+             new IndexAccessors(directStoreAccess.indexes(), nativeStores.getSchemaStore(), samplingConfig))\n     {\n-        return new CacheSmallStoresRecordAccess(\n-                new DirectRecordAccess( store, cacheAccess ),\n-                readAllRecords( PropertyKeyTokenRecord.class, store.getPropertyKeyTokenStore() ),\n-                readAllRecords( RelationshipTypeTokenRecord.class, store.getRelationshipTypeTokenStore() ),\n-                readAllRecords( LabelTokenRecord.class, store.getLabelTokenStore() ) );\n+      MultiPassStore.Factory multiPass = new MultiPassStore.Factory(\n+          decorator, recordAccess, cacheAccess, report, reportMonitor);\n+      ConsistencyCheckTasks taskCreator = new ConsistencyCheckTasks(progress, processEverything,\n+          nativeStores, statistics, cacheAccess, directStoreAccess.labelScanStore(), indexes,\n+          multiPass, reporter, threads);\n+      List<ConsistencyCheckerTask> tasks =\n+          taskCreator.createTasksForFullCheck(checkLabelScanStore, checkIndexes, checkGraph);\n+      TaskExecutor.execute(tasks, decorator::prepare);\n+    } catch (Exception e)\n+    {\n+      throw new ConsistencyCheckIncompleteException(e);\n     }\n+  }\n+\n+  static RecordAccess recordAccess(StoreAccess store, CacheAccess cacheAccess)\n+  {\n+    return new CacheSmallStoresRecordAccess(\n+        new DirectRecordAccess(store, cacheAccess),\n+        readAllRecords(PropertyKeyTokenRecord.class, store.getPropertyKeyTokenStore()),\n+        readAllRecords(RelationshipTypeTokenRecord.class, store.getRelationshipTypeTokenStore()),\n+        readAllRecords(LabelTokenRecord.class, store.getLabelTokenStore()));\n+  }\n \n-    private static <T extends AbstractBaseRecord> T[] readAllRecords( Class<T> type, RecordStore<T> store )\n+  private static <T extends AbstractBaseRecord> T[] readAllRecords(Class<T> type, RecordStore<T> store)\n+  {\n+    @SuppressWarnings(\"unchecked\")\n+    T[] records = (T[]) Array.newInstance(type, (int) store.getHighId());\n+    for (int i = 0; i < records.length; i++)\n     {\n-        @SuppressWarnings( \"unchecked\" )\n-        T[] records = (T[]) Array.newInstance( type, (int) store.getHighId() );\n-        for ( int i = 0; i < records.length; i++ )\n-        {\n-            records[i] = store.getRecord( i, store.newRecord(), FORCE );\n-        }\n-        return records;\n+      records[i] = store.getRecord(i, store.newRecord(), FORCE);\n     }\n+    return records;\n+  }\n }\n",
            "diff_size": 145
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "column": "184",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 340).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/995/FullCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/995/FullCheck.java\nindex 6fa4f668d89..8f86b61915a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/995/FullCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/995/FullCheck.java\n@@ -69,9 +69,8 @@ public class FullCheck\n         this( progressFactory, statistics, threads, new ConsistencyFlags( config ), config );\n     }\n \n-    public FullCheck( ProgressMonitorFactory progressFactory, Statistics statistics, int threads,\n-                      ConsistencyFlags consistencyFlags, Config config )\n-    {\n+    public FullCheck( ProgressMonitorFactory progressFactory, Statistics statistics, int threads, ConsistencyFlags consistencyFlags, Config config )\n+{\n         this.statistics = statistics;\n         this.threads = threads;\n         this.progressFactory = progressFactory;\n@@ -82,28 +81,23 @@ public class FullCheck\n         this.checkPropertyOwners = consistencyFlags.isCheckPropertyOwners();\n     }\n \n-    public ConsistencySummaryStatistics execute( DirectStoreAccess stores, Log log )\n-            throws ConsistencyCheckIncompleteException\n-    {\n+    public ConsistencySummaryStatistics execute( DirectStoreAccess stores, Log log ) throws ConsistencyCheckIncompleteException\n+{\n         return execute( stores, log, NO_MONITOR );\n     }\n \n-    ConsistencySummaryStatistics execute( DirectStoreAccess stores, Log log, Monitor reportMonitor )\n-            throws ConsistencyCheckIncompleteException\n-    {\n+    ConsistencySummaryStatistics execute( DirectStoreAccess stores, Log log, Monitor reportMonitor ) throws ConsistencyCheckIncompleteException\n+{\n         ConsistencySummaryStatistics summary = new ConsistencySummaryStatistics();\n         InconsistencyReport report = new InconsistencyReport( new InconsistencyMessageLogger( log ), summary );\n-\n-        OwnerCheck ownerCheck = new OwnerCheck( checkPropertyOwners );\n-        CountsBuilderDecorator countsBuilder =\n-                new CountsBuilderDecorator( stores.nativeStores() );\n-        CheckDecorator decorator = new CheckDecorator.ChainCheckDecorator( ownerCheck, countsBuilder );\n+OwnerCheck ownerCheck = new OwnerCheck( checkPropertyOwners );\n+        CountsBuilderDecorator countsBuilder = new CountsBuilderDecorator( stores.nativeStores() );\n+CheckDecorator decorator = new CheckDecorator.ChainCheckDecorator( ownerCheck, countsBuilder );\n         CacheAccess cacheAccess = new DefaultCacheAccess( statistics.getCounts(), threads );\n         RecordAccess records = recordAccess( stores.nativeStores(), cacheAccess );\n         execute( stores, decorator, records, report, cacheAccess, reportMonitor );\n         ownerCheck.scanForOrphanChains( progressFactory );\n-\n-        if ( checkGraph )\n+if ( checkGraph )\n         {\n             CountsAccessor countsAccessor = stores.nativeStores().getCounts();\n             if ( countsAccessor instanceof CountsTracker )\n@@ -125,30 +119,23 @@ public class FullCheck\n         {\n             log.warn( \"Inconsistencies found: \" + summary );\n         }\n-        return summary;\n+\n+return summary;\n     }\n \n-    void execute( final DirectStoreAccess directStoreAccess, final CheckDecorator decorator,\n-                  final RecordAccess recordAccess, final InconsistencyReport report,\n-                  CacheAccess cacheAccess, Monitor reportMonitor )\n-            throws ConsistencyCheckIncompleteException\n-    {\n+    void execute( final DirectStoreAccess directStoreAccess, final CheckDecorator decorator, final RecordAccess recordAccess, final InconsistencyReport report,\n+                  CacheAccess cacheAccess, Monitor reportMonitor ) throws ConsistencyCheckIncompleteException\n+{\n         final ConsistencyReporter reporter = new ConsistencyReporter( recordAccess, report, reportMonitor );\n         StoreProcessor processEverything = new StoreProcessor( decorator, reporter, Stage.SEQUENTIAL_FORWARD, cacheAccess );\n-        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory.multipleParts(\n-                \"Full Consistency Check\" );\n-        final StoreAccess nativeStores = directStoreAccess.nativeStores();\n-        try ( IndexAccessors indexes =\n-                      new IndexAccessors( directStoreAccess.indexes(), nativeStores.getSchemaStore(), samplingConfig ) )\n-        {\n-            MultiPassStore.Factory multiPass = new MultiPassStore.Factory(\n-                    decorator, recordAccess, cacheAccess, report, reportMonitor );\n-            ConsistencyCheckTasks taskCreator = new ConsistencyCheckTasks( progress, processEverything,\n-                    nativeStores, statistics, cacheAccess, directStoreAccess.labelScanStore(), indexes,\n-                    multiPass, reporter, threads );\n-            List<ConsistencyCheckerTask> tasks =\n-                    taskCreator.createTasksForFullCheck( checkLabelScanStore, checkIndexes, checkGraph );\n-            TaskExecutor.execute( tasks, decorator::prepare );\n+        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory.multipleParts( \"Full Consistency Check\" ); final StoreAccess nativeStores = directStoreAccess.nativeStores();\n+        try ( IndexAccessors indexes = new IndexAccessors( directStoreAccess.indexes(), nativeStores.getSchemaStore(), samplingConfig ) )\n+{\n+            MultiPassStore.Factory multiPass = new MultiPassStore.Factory( decorator, recordAccess, cacheAccess, report, reportMonitor );\n+ConsistencyCheckTasks taskCreator = new ConsistencyCheckTasks( progress, processEverything,\n+                    nativeStores, statistics, cacheAccess, directStoreAccess.labelScanStore(), indexes, multiPass, reporter, threads );\n+List<ConsistencyCheckerTask> tasks = taskCreator.createTasksForFullCheck( checkLabelScanStore, checkIndexes, checkGraph );\n+TaskExecutor.execute( tasks, decorator::prepare );\n         }\n         catch ( Exception e )\n         {\n@@ -158,21 +145,18 @@ public class FullCheck\n \n     static RecordAccess recordAccess( StoreAccess store, CacheAccess cacheAccess )\n     {\n-        return new CacheSmallStoresRecordAccess(\n-                new DirectRecordAccess( store, cacheAccess ),\n-                readAllRecords( PropertyKeyTokenRecord.class, store.getPropertyKeyTokenStore() ),\n-                readAllRecords( RelationshipTypeTokenRecord.class, store.getRelationshipTypeTokenStore() ),\n-                readAllRecords( LabelTokenRecord.class, store.getLabelTokenStore() ) );\n+        return new CacheSmallStoresRecordAccess( new DirectRecordAccess( store, cacheAccess ), readAllRecords( PropertyKeyTokenRecord.class, store.getPropertyKeyTokenStore() ), readAllRecords( RelationshipTypeTokenRecord.class, store.getRelationshipTypeTokenStore() ), readAllRecords( LabelTokenRecord.class, store.getLabelTokenStore() ) );\n     }\n \n     private static <T extends AbstractBaseRecord> T[] readAllRecords( Class<T> type, RecordStore<T> store )\n     {\n         @SuppressWarnings( \"unchecked\" )\n-        T[] records = (T[]) Array.newInstance( type, (int) store.getHighId() );\n+        T[] records = (T[]) Array.newInstance( type, ( int) store.getHighId() );\n         for ( int i = 0; i < records.length; i++ )\n         {\n             records[i] = store.getRecord( i, store.newRecord(), FORCE );\n         }\n-        return records;\n+\n+return records;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}