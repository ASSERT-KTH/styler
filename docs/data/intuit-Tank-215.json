{
    "project_name": "intuit-Tank",
    "error_id": "215",
    "information": {
        "errors": [
            {
                "line": "63",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        List<JobQueue> resultList = null;\n        EntityManager em = getEntityManager();\n    \ttry {\n    \t\tbegin();\n    \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "64",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/215/JobQueueDao.java\nindex 4c7c86be910..2f97c1bad04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/215/JobQueueDao.java\n@@ -60,7 +60,7 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n         JobQueue result = null;\n         List<JobQueue> resultList = null;\n         EntityManager em = getEntityManager();\n-    \ttry {\n+        try {\n     \t\tbegin();\n     \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n \t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/215/JobQueueDao.java\nindex 4c7c86be910..298d4377dbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/215/JobQueueDao.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.dao;\n \n /*\n@@ -36,126 +37,121 @@ import com.intuit.tank.project.JobQueue;\n \n /**\n  * ProductDao\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class JobQueueDao extends BaseDao<JobQueue> {\n-    private static final Logger LOG = LogManager.getLogger(JobQueueDao.class);\n+  private static final Logger LOG = LogManager.getLogger(JobQueueDao.class);\n \n-    /**\n-     * @param entityClass\n-     */\n-    public JobQueueDao() {\n-        super();\n-        setReloadEntities(true);\n-    }\n+  /**\n+   * @param entityClass\n+   */\n+  public JobQueueDao() {\n+    super();\n+    setReloadEntities(true);\n+  }\n \n-    /**\n-     * \n-     * @param projectId\n-     * @return\n-     */\n-    public synchronized JobQueue findOrCreateForProjectId(@Nonnull int projectId) {\n-        JobQueue result = null;\n-        List<JobQueue> resultList = null;\n-        EntityManager em = getEntityManager();\n-    \ttry {\n-    \t\tbegin();\n-    \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n-\t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n-\t        Root<JobQueue> root = query.from(JobQueue.class);\n-\t        root.join(\"jobs\");\n-\t        query.where(cb.equal(root.<String>get(JobQueue.PROPERTY_PROJECT_ID), projectId));\n-\t        query.select(root);\n-\t        resultList = em.createQuery(query).getResultList();  \n-\t        commit();\n-        } catch (Exception e) {\n-        \trollback();\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-    \t} finally {\n-    \t\tcleanup();\n-    \t}\n-        if (resultList.size() > 1) {\n-            LOG.warn(\"Have \" + resultList.size() + \" queues for project \" + projectId);\n-        }\n-        if (resultList.size() > 0) {\n-            result = resultList.get(0);\n-        }\n-        if (result == null) {\n-            result = new JobQueue(projectId);\n-            result = saveOrUpdate(result);\n-        } else {\n-            getHibernateSession().refresh(result, LockOptions.READ);\n-        }\n-        return result;\n+  /**\n+   * @param projectId\n+   * @return\n+   */\n+  public synchronized JobQueue findOrCreateForProjectId(@Nonnull int projectId) {\n+    JobQueue result = null;\n+    List<JobQueue> resultList = null;\n+    EntityManager em = getEntityManager();\n+    try {\n+      begin();\n+      CriteriaBuilder cb = em.getCriteriaBuilder();\n+      CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n+      Root<JobQueue> root = query.from(JobQueue.class);\n+      root.join(\"jobs\");\n+      query.where(cb.equal(root.<String>get(JobQueue.PROPERTY_PROJECT_ID), projectId));\n+      query.select(root);\n+      resultList = em.createQuery(query).getResultList();\n+      commit();\n+    } catch (Exception e) {\n+      rollback();\n+      e.printStackTrace();\n+      throw new RuntimeException(e);\n+    } finally {\n+      cleanup();\n     }\n-\n-    /**\n-     * \n-     * @param projectId\n-     * @return\n-     */\n-    public List<JobQueue> getForProjectIds(@Nonnull List<Integer> projectIds) {\n-        String prefix = \"x\";\n-        NamedParameter parameter = new NamedParameter(JobQueue.PROPERTY_PROJECT_ID, \"pId\", projectIds);\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.IN, prefix, parameter));\n-        List<JobQueue> resultList = super.listWithJQL(sb.toString(), parameter);\n-        return resultList;\n+    if (resultList.size() > 1) {\n+      LOG.warn(\"Have \" + resultList.size() + \" queues for project \" + projectId);\n+    }\n+    if (resultList.size() > 0) {\n+      result = resultList.get(0);\n     }\n-    \n-    /**\n-     * \n-     * @return List of JobQueue\n-     */\n-    public List<JobQueue> findRecent() {\n-        Calendar c = Calendar.getInstance();\n-        c.add(Calendar.DAY_OF_YEAR, -5);\n-    \tList<JobQueue> results = null;\n-    \tEntityManager em = getEntityManager();\n-    \ttry {\n-    \t\tbegin();\n-\t        CriteriaBuilder cb = em.getCriteriaBuilder();\n-\t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n-\t        Root<JobQueue> root = query.from(JobQueue.class);\n-\t        query.select(root);\n-\t        query.where(cb.greaterThan(root.<Date>get(JobQueue.PROPERTY_MODIFIED), c.getTime()));\n-\t        query.orderBy(cb.desc(root.get(JobQueue.PROPERTY_PROJECT_ID)));\n-\t        results = em.createQuery(query).getResultList();\n-\t        commit();\n-        } catch (Exception e) {\n-        \trollback();\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-    \t} finally {\n-    \t\tcleanup();\n-    \t}\n-    \treturn results;\n+    if (result == null) {\n+      result = new JobQueue(projectId);\n+      result = saveOrUpdate(result);\n+    } else {\n+      getHibernateSession().refresh(result, LockOptions.READ);\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * @param projectId\n+   * @return\n+   */\n+  public List<JobQueue> getForProjectIds(@Nonnull List<Integer> projectIds) {\n+    String prefix = \"x\";\n+    NamedParameter parameter = new NamedParameter(JobQueue.PROPERTY_PROJECT_ID, \"pId\", projectIds);\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.IN, prefix, parameter));\n+    List<JobQueue> resultList = super.listWithJQL(sb.toString(), parameter);\n+    return resultList;\n+  }\n+\n+  /**\n+   * @return List of JobQueue\n+   */\n+  public List<JobQueue> findRecent() {\n+    Calendar c = Calendar.getInstance();\n+    c.add(Calendar.DAY_OF_YEAR, -5);\n+    List<JobQueue> results = null;\n+    EntityManager em = getEntityManager();\n+    try {\n+      begin();\n+      CriteriaBuilder cb = em.getCriteriaBuilder();\n+      CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n+      Root<JobQueue> root = query.from(JobQueue.class);\n+      query.select(root);\n+      query.where(cb.greaterThan(root.<Date>get(JobQueue.PROPERTY_MODIFIED), c.getTime()));\n+      query.orderBy(cb.desc(root.get(JobQueue.PROPERTY_PROJECT_ID)));\n+      results = em.createQuery(query).getResultList();\n+      commit();\n+    } catch (Exception e) {\n+      rollback();\n+      e.printStackTrace();\n+      throw new RuntimeException(e);\n+    } finally {\n+      cleanup();\n     }\n+    return results;\n+  }\n \n-    /**\n-     * \n-     * @param jobId\n-     * @return JobQueue\n-     */\n-    public JobQueue findForJobId(Integer jobId) {\n-        JobQueue ret = null;\n-        try {\n-            String string = \"select x.test_id from test_instance_jobs x where x.job_id = ?\";\n-            Query q = getEntityManager().createNativeQuery(string);\n-            q.setParameter(1, jobId);\n-            Integer result = null;\n-            try {\n-            \tresult = (Integer) q.getSingleResult();\n-            } catch (NoResultException nre) {\n-            \treturn null;\n-            }\n-            ret = findById(result);\n-        } catch (Exception e) {\n-            LOG.error(\"Error finding for Job ID: \" + e, e);\n-        }\n-        return ret;\n+  /**\n+   * @param jobId\n+   * @return JobQueue\n+   */\n+  public JobQueue findForJobId(Integer jobId) {\n+    JobQueue ret = null;\n+    try {\n+      String string = \"select x.test_id from test_instance_jobs x where x.job_id = ?\";\n+      Query q = getEntityManager().createNativeQuery(string);\n+      q.setParameter(1, jobId);\n+      Integer result = null;\n+      try {\n+        result = (Integer) q.getSingleResult();\n+      } catch (NoResultException nre) {\n+        return null;\n+      }\n+      ret = findById(result);\n+    } catch (Exception e) {\n+      LOG.error(\"Error finding for Job ID: \" + e, e);\n     }\n+    return ret;\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "65",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/215/JobQueueDao.java\nindex 4c7c86be910..d2f949044c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/215/JobQueueDao.java\n@@ -60,24 +60,24 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n         JobQueue result = null;\n         List<JobQueue> resultList = null;\n         EntityManager em = getEntityManager();\n-    \ttry {\n-    \t\tbegin();\n+try {\n+    begin();\n     \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n-\t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n+CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n \t        Root<JobQueue> root = query.from(JobQueue.class);\n \t        root.join(\"jobs\");\n-\t        query.where(cb.equal(root.<String>get(JobQueue.PROPERTY_PROJECT_ID), projectId));\n+\t        query.where(cb.equal(root.<String> get(JobQueue.PROPERTY_PROJECT_ID), projectId));\n \t        query.select(root);\n-\t        resultList = em.createQuery(query).getResultList();  \n-\t        commit();\n-        } catch (Exception e) {\n-        \trollback();\n-            e.printStackTrace();\n+\t        resultList = em.createQuery(query).getResultList();\n+commit();\n+    } catch (Exception e) {\n+    rollback();\n+e.printStackTrace();\n             throw new RuntimeException(e);\n-    \t} finally {\n-    \t\tcleanup();\n-    \t}\n-        if (resultList.size() > 1) {\n+    } finally {\n+    cleanup();\n+    }\n+if (resultList.size() > 1) {\n             LOG.warn(\"Have \" + resultList.size() + \" queues for project \" + projectId);\n         }\n         if (resultList.size() > 0) {\n@@ -113,25 +113,25 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n     public List<JobQueue> findRecent() {\n         Calendar c = Calendar.getInstance();\n         c.add(Calendar.DAY_OF_YEAR, -5);\n-    \tList<JobQueue> results = null;\n+List<JobQueue> results = null;\n     \tEntityManager em = getEntityManager();\n     \ttry {\n-    \t\tbegin();\n-\t        CriteriaBuilder cb = em.getCriteriaBuilder();\n+    begin();\n+CriteriaBuilder cb = em.getCriteriaBuilder();\n \t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n \t        Root<JobQueue> root = query.from(JobQueue.class);\n \t        query.select(root);\n-\t        query.where(cb.greaterThan(root.<Date>get(JobQueue.PROPERTY_MODIFIED), c.getTime()));\n+\t        query.where(cb.greaterThan(root.<Date> get(JobQueue.PROPERTY_MODIFIED), c.getTime()));\n \t        query.orderBy(cb.desc(root.get(JobQueue.PROPERTY_PROJECT_ID)));\n \t        results = em.createQuery(query).getResultList();\n \t        commit();\n-        } catch (Exception e) {\n-        \trollback();\n-            e.printStackTrace();\n+    } catch (Exception e) {\n+    rollback();\n+e.printStackTrace();\n             throw new RuntimeException(e);\n-    \t} finally {\n-    \t\tcleanup();\n-    \t}\n+    } finally {\n+    cleanup();\n+    }\n     \treturn results;\n     }\n \n@@ -148,14 +148,14 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n             q.setParameter(1, jobId);\n             Integer result = null;\n             try {\n-            \tresult = (Integer) q.getSingleResult();\n-            } catch (NoResultException nre) {\n-            \treturn null;\n-            }\n+    result = (Integer) q.getSingleResult();\n+    } catch (NoResultException nre) {\n+    return null;\n+    }\n             ret = findById(result);\n         } catch (Exception e) {\n             LOG.error(\"Error finding for Job ID: \" + e, e);\n         }\n         return ret;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/215/JobQueueDao.java\nindex 4c7c86be910..cd3200cb54d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/215/JobQueueDao.java\n@@ -16,10 +16,11 @@ package com.intuit.tank.dao;\n  * #L%\n  */\n \n+\n+\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n-\n import javax.annotation.Nonnull;\n import javax.persistence.EntityManager;\n import javax.persistence.NoResultException;\n@@ -27,11 +28,9 @@ import javax.persistence.Query;\n import javax.persistence.criteria.CriteriaBuilder;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Root;\n-\n import org.apache.log4j.LogManager;\n import org.apache.log4j.Logger;\n import org.hibernate.LockOptions;\n-\n import com.intuit.tank.project.JobQueue;\n \n /**\n@@ -40,12 +39,16 @@ import com.intuit.tank.project.JobQueue;\n  * @author dangleton\n  * \n  */\n+\n+\n public class JobQueueDao extends BaseDao<JobQueue> {\n+\n     private static final Logger LOG = LogManager.getLogger(JobQueueDao.class);\n \n     /**\n      * @param entityClass\n      */\n+\n     public JobQueueDao() {\n         super();\n         setReloadEntities(true);\n@@ -56,27 +59,30 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n      * @param projectId\n      * @return\n      */\n+\n+\n     public synchronized JobQueue findOrCreateForProjectId(@Nonnull int projectId) {\n         JobQueue result = null;\n         List<JobQueue> resultList = null;\n         EntityManager em = getEntityManager();\n-    \ttry {\n-    \t\tbegin();\n-    \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n-\t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n-\t        Root<JobQueue> root = query.from(JobQueue.class);\n-\t        root.join(\"jobs\");\n-\t        query.where(cb.equal(root.<String>get(JobQueue.PROPERTY_PROJECT_ID), projectId));\n-\t        query.select(root);\n-\t        resultList = em.createQuery(query).getResultList();  \n-\t        commit();\n+        try {\n+            begin();\n+            CriteriaBuilder cb = em.getCriteriaBuilder();\n+            CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n+            Root<JobQueue> root = query.from(JobQueue.class);\n+            root.join(\"jobs\");\n+            query.where(cb.equal(root.<String> get(JobQueue.PROPERTY_PROJECT_ID),\n+                projectId));\n+            query.select(root);\n+            resultList = em.createQuery(query).getResultList();\n+            commit();\n         } catch (Exception e) {\n-        \trollback();\n+            rollback();\n             e.printStackTrace();\n             throw new RuntimeException(e);\n-    \t} finally {\n-    \t\tcleanup();\n-    \t}\n+        } finally {\n+            cleanup();\n+        }\n         if (resultList.size() > 1) {\n             LOG.warn(\"Have \" + resultList.size() + \" queues for project \" + projectId);\n         }\n@@ -97,6 +103,8 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n      * @param projectId\n      * @return\n      */\n+\n+\n     public List<JobQueue> getForProjectIds(@Nonnull List<Integer> projectIds) {\n         String prefix = \"x\";\n         NamedParameter parameter = new NamedParameter(JobQueue.PROPERTY_PROJECT_ID, \"pId\", projectIds);\n@@ -110,29 +118,32 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n      * \n      * @return List of JobQueue\n      */\n+\n+\n     public List<JobQueue> findRecent() {\n         Calendar c = Calendar.getInstance();\n         c.add(Calendar.DAY_OF_YEAR, -5);\n-    \tList<JobQueue> results = null;\n-    \tEntityManager em = getEntityManager();\n-    \ttry {\n-    \t\tbegin();\n-\t        CriteriaBuilder cb = em.getCriteriaBuilder();\n-\t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n-\t        Root<JobQueue> root = query.from(JobQueue.class);\n-\t        query.select(root);\n-\t        query.where(cb.greaterThan(root.<Date>get(JobQueue.PROPERTY_MODIFIED), c.getTime()));\n-\t        query.orderBy(cb.desc(root.get(JobQueue.PROPERTY_PROJECT_ID)));\n-\t        results = em.createQuery(query).getResultList();\n-\t        commit();\n+        List<JobQueue> results = null;\n+        EntityManager em = getEntityManager();\n+        try {\n+            begin();\n+            CriteriaBuilder cb = em.getCriteriaBuilder();\n+            CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n+            Root<JobQueue> root = query.from(JobQueue.class);\n+            query.select(root);\n+            query.where(cb.greaterThan(root.<Date> get(JobQueue.PROPERTY_MODIFIED),\n+                c.getTime()));\n+            query.orderBy(cb.desc(root.get(JobQueue.PROPERTY_PROJECT_ID)));\n+            results = em.createQuery(query).getResultList();\n+            commit();\n         } catch (Exception e) {\n-        \trollback();\n+            rollback();\n             e.printStackTrace();\n             throw new RuntimeException(e);\n-    \t} finally {\n-    \t\tcleanup();\n-    \t}\n-    \treturn results;\n+        } finally {\n+            cleanup();\n+        }\n+        return results;\n     }\n \n     /**\n@@ -140,6 +151,8 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n      * @param jobId\n      * @return JobQueue\n      */\n+\n+\n     public JobQueue findForJobId(Integer jobId) {\n         JobQueue ret = null;\n         try {\n@@ -148,9 +161,9 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n             q.setParameter(1, jobId);\n             Integer result = null;\n             try {\n-            \tresult = (Integer) q.getSingleResult();\n+                result = (Integer) q.getSingleResult();\n             } catch (NoResultException nre) {\n-            \treturn null;\n+                return null;\n             }\n             ret = findById(result);\n         } catch (Exception e) {\n@@ -158,4 +171,5 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n         }\n         return ret;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "64",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/215/JobQueueDao.java\nindex 4c7c86be910..2f97c1bad04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/215/JobQueueDao.java\n@@ -60,7 +60,7 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n         JobQueue result = null;\n         List<JobQueue> resultList = null;\n         EntityManager em = getEntityManager();\n-    \ttry {\n+        try {\n     \t\tbegin();\n     \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n \t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "64",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/215/JobQueueDao.java\nindex 4c7c86be910..2f97c1bad04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/215/JobQueueDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/215/JobQueueDao.java\n@@ -60,7 +60,7 @@ public class JobQueueDao extends BaseDao<JobQueue> {\n         JobQueue result = null;\n         List<JobQueue> resultList = null;\n         EntityManager em = getEntityManager();\n-    \ttry {\n+        try {\n     \t\tbegin();\n     \t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n \t        CriteriaQuery<JobQueue> query = cb.createQuery(JobQueue.class);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}