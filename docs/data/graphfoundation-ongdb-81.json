{
    "project_name": "graphfoundation-ongdb",
    "error_id": "81",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/81/GrabAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/81/GrabAllocator.java\nindex e74252948f6..eb56b51611e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/81/GrabAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/81/GrabAllocator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.mem;\n \n import org.neo4j.memory.MemoryAllocationTracker;\n@@ -32,186 +33,187 @@ import static org.neo4j.util.FeatureToggles.getInteger;\n  */\n public final class GrabAllocator implements MemoryAllocator\n {\n-    /**\n-     * The amount of memory, in bytes, to grab in each Grab.\n-     */\n-    private static final long GRAB_SIZE = getInteger( GrabAllocator.class, \"GRAB_SIZE\", (int) kibiBytes( 512 ) );\n-\n-    /**\n-     * The amount of memory that this memory manager can still allocate.\n-     */\n-    private long memoryReserve;\n-    private final MemoryAllocationTracker memoryTracker;\n-\n-    private Grab grabs;\n-\n-    /**\n-     * Create a new GrabAllocator that will allocate the given amount of memory, to pointers that are aligned to the\n-     * given alignment size.\n-     * @param expectedMaxMemory The maximum amount of memory that this memory manager is expected to allocate. The\n-     * actual amount of memory used can end up greater than this value, if some of it gets wasted on alignment padding.\n-     * @param memoryTracker memory usage tracker\n-     */\n-    GrabAllocator( long expectedMaxMemory, MemoryAllocationTracker memoryTracker )\n+  /**\n+   * The amount of memory, in bytes, to grab in each Grab.\n+   */\n+  private static final long GRAB_SIZE = getInteger(GrabAllocator.class, \"GRAB_SIZE\", (int) kibiBytes(512));\n+\n+  /**\n+   * The amount of memory that this memory manager can still allocate.\n+   */\n+  private long memoryReserve;\n+  private final MemoryAllocationTracker memoryTracker;\n+\n+  private Grab grabs;\n+\n+  /**\n+   * Create a new GrabAllocator that will allocate the given amount of memory, to pointers that are aligned to the\n+   * given alignment size.\n+   *\n+   * @param expectedMaxMemory The maximum amount of memory that this memory manager is expected to allocate. The\n+   *                          actual amount of memory used can end up greater than this value, if some of it gets wasted on alignment padding.\n+   * @param memoryTracker     memory usage tracker\n+   */\n+  GrabAllocator(long expectedMaxMemory, MemoryAllocationTracker memoryTracker)\n+  {\n+    this.memoryReserve = expectedMaxMemory;\n+    this.memoryTracker = memoryTracker;\n+  }\n+\n+  @Override\n+  public synchronized long usedMemory()\n+  {\n+    long sum = 0;\n+    Grab grab = grabs;\n+    while (grab != null)\n     {\n-        this.memoryReserve = expectedMaxMemory;\n-        this.memoryTracker = memoryTracker;\n+      sum += grab.nextPointer - grab.address;\n+      grab = grab.next;\n     }\n-\n-    @Override\n-    public synchronized long usedMemory()\n+    return sum;\n+  }\n+\n+  @Override\n+  public synchronized long availableMemory()\n+  {\n+    Grab grab = grabs;\n+    long availableInCurrentGrab = 0;\n+    if (grab != null)\n     {\n-        long sum = 0;\n-        Grab grab = grabs;\n-        while ( grab != null )\n-        {\n-            sum += grab.nextPointer - grab.address;\n-            grab = grab.next;\n-        }\n-        return sum;\n+      availableInCurrentGrab = grab.limit - grab.nextPointer;\n     }\n+    return Math.max(memoryReserve, 0L) + availableInCurrentGrab;\n+  }\n \n-    @Override\n-    public synchronized long availableMemory()\n+  @Override\n+  public synchronized long allocateAligned(long bytes, long alignment)\n+  {\n+    if (alignment <= 0)\n     {\n-        Grab grab = grabs;\n-        long availableInCurrentGrab = 0;\n-        if ( grab != null )\n-        {\n-            availableInCurrentGrab = grab.limit - grab.nextPointer;\n-        }\n-        return Math.max( memoryReserve, 0L ) + availableInCurrentGrab;\n+      throw new IllegalArgumentException(\"Invalid alignment: \" + alignment + \". Alignment must be positive.\");\n     }\n-\n-    @Override\n-    public synchronized long allocateAligned( long bytes, long alignment )\n+    long grabSize = Math.min(GRAB_SIZE, memoryReserve);\n+    if (bytes > GRAB_SIZE)\n     {\n-        if ( alignment <= 0 )\n-        {\n-            throw new IllegalArgumentException( \"Invalid alignment: \" + alignment + \". Alignment must be positive.\" );\n-        }\n-        long grabSize = Math.min( GRAB_SIZE, memoryReserve );\n-        if ( bytes > GRAB_SIZE )\n-        {\n-            // This is a huge allocation. Put it in its own grab and keep any existing grab at the head.\n-            grabSize = bytes;\n-            Grab nextGrab = grabs == null ? null : grabs.next;\n-            Grab allocationGrab = new Grab( nextGrab, grabSize, memoryTracker );\n-            if ( !allocationGrab.canAllocate( bytes, alignment ) )\n-            {\n-                allocationGrab.free();\n-                grabSize = bytes + alignment;\n-                allocationGrab = new Grab( nextGrab, grabSize, memoryTracker );\n-            }\n-            long allocation = allocationGrab.allocate( bytes, alignment );\n-            grabs = grabs == null ? allocationGrab : grabs.setNext( allocationGrab );\n-            memoryReserve -= bytes;\n-            return allocation;\n-        }\n-\n-        if ( grabs == null || !grabs.canAllocate( bytes, alignment ) )\n-        {\n-            if ( grabSize < bytes )\n-            {\n-                grabSize = bytes;\n-                Grab grab = new Grab( grabs, grabSize, memoryTracker );\n-                if ( grab.canAllocate( bytes, alignment ) )\n-                {\n-                    memoryReserve -= grabSize;\n-                    grabs = grab;\n-                    return grabs.allocate( bytes, alignment );\n-                }\n-                grab.free();\n-                grabSize = bytes + alignment;\n-            }\n-            grabs = new Grab( grabs, grabSize, memoryTracker );\n-            memoryReserve -= grabSize;\n-        }\n-        return grabs.allocate( bytes, alignment );\n+      // This is a huge allocation. Put it in its own grab and keep any existing grab at the head.\n+      grabSize = bytes;\n+      Grab nextGrab = grabs == null ? null : grabs.next;\n+      Grab allocationGrab = new Grab(nextGrab, grabSize, memoryTracker);\n+      if (!allocationGrab.canAllocate(bytes, alignment))\n+      {\n+        allocationGrab.free();\n+        grabSize = bytes + alignment;\n+        allocationGrab = new Grab(nextGrab, grabSize, memoryTracker);\n+      }\n+      long allocation = allocationGrab.allocate(bytes, alignment);\n+      grabs = grabs == null ? allocationGrab : grabs.setNext(allocationGrab);\n+      memoryReserve -= bytes;\n+      return allocation;\n     }\n \n-    @Override\n-    protected synchronized void finalize() throws Throwable\n+    if (grabs == null || !grabs.canAllocate(bytes, alignment))\n     {\n-        super.finalize();\n-        Grab current = grabs;\n-\n-        while ( current != null )\n+      if (grabSize < bytes)\n+      {\n+        grabSize = bytes;\n+        Grab grab = new Grab(grabs, grabSize, memoryTracker);\n+        if (grab.canAllocate(bytes, alignment))\n         {\n-            current.free();\n-            current = current.next;\n+          memoryReserve -= grabSize;\n+          grabs = grab;\n+          return grabs.allocate(bytes, alignment);\n         }\n+        grab.free();\n+        grabSize = bytes + alignment;\n+      }\n+      grabs = new Grab(grabs, grabSize, memoryTracker);\n+      memoryReserve -= grabSize;\n     }\n+    return grabs.allocate(bytes, alignment);\n+  }\n \n-    private static class Grab\n+  @Override\n+  protected synchronized void finalize() throws Throwable\n+  {\n+    super.finalize();\n+    Grab current = grabs;\n+\n+    while (current != null)\n     {\n-        public final Grab next;\n-        private final long address;\n-        private final long limit;\n-        private final MemoryAllocationTracker memoryTracker;\n-        private long nextPointer;\n+      current.free();\n+      current = current.next;\n+    }\n+  }\n \n-        Grab( Grab next, long size, MemoryAllocationTracker memoryTracker )\n-        {\n-            this.next = next;\n-            this.address = UnsafeUtil.allocateMemory( size, memoryTracker );\n-            this.limit = address + size;\n-            this.memoryTracker = memoryTracker;\n-            nextPointer = address;\n-        }\n+  private static class Grab\n+  {\n+    public final Grab next;\n+    private final long address;\n+    private final long limit;\n+    private final MemoryAllocationTracker memoryTracker;\n+    private long nextPointer;\n \n-        Grab( Grab next, long address, long limit, long nextPointer, MemoryAllocationTracker memoryTracker )\n-        {\n-            this.next = next;\n-            this.address = address;\n-            this.limit = limit;\n-            this.nextPointer = nextPointer;\n-            this.memoryTracker = memoryTracker;\n-        }\n+    Grab(Grab next, long size, MemoryAllocationTracker memoryTracker)\n+    {\n+      this.next = next;\n+      this.address = UnsafeUtil.allocateMemory(size, memoryTracker);\n+      this.limit = address + size;\n+      this.memoryTracker = memoryTracker;\n+      nextPointer = address;\n+    }\n \n-        private long nextAligned( long pointer, long alignment )\n-        {\n-            if ( alignment == 1 )\n-            {\n-                return pointer;\n-            }\n-            long off = pointer % alignment;\n-            if ( off == 0 )\n-            {\n-                return pointer;\n-            }\n-            return pointer + (alignment - off);\n-        }\n+    Grab(Grab next, long address, long limit, long nextPointer, MemoryAllocationTracker memoryTracker)\n+    {\n+      this.next = next;\n+      this.address = address;\n+      this.limit = limit;\n+      this.nextPointer = nextPointer;\n+      this.memoryTracker = memoryTracker;\n+    }\n \n-        long allocate( long bytes, long alignment )\n-        {\n-            long allocation = nextAligned( nextPointer, alignment );\n-            nextPointer = allocation + bytes;\n-            return allocation;\n-        }\n+    private long nextAligned(long pointer, long alignment)\n+    {\n+      if (alignment == 1)\n+      {\n+        return pointer;\n+      }\n+      long off = pointer % alignment;\n+      if (off == 0)\n+      {\n+        return pointer;\n+      }\n+      return pointer + (alignment - off);\n+    }\n \n-        void free()\n-        {\n-            UnsafeUtil.free( address, limit - address, memoryTracker );\n-        }\n+    long allocate(long bytes, long alignment)\n+    {\n+      long allocation = nextAligned(nextPointer, alignment);\n+      nextPointer = allocation + bytes;\n+      return allocation;\n+    }\n \n-        boolean canAllocate( long bytes, long alignment )\n-        {\n-            return nextAligned( nextPointer, alignment ) + bytes <= limit;\n-        }\n+    void free()\n+    {\n+      UnsafeUtil.free(address, limit - address, memoryTracker);\n+    }\n \n-        Grab setNext( Grab grab )\n-        {\n-            return new Grab( grab, address, limit, nextPointer, memoryTracker );\n-        }\n+    boolean canAllocate(long bytes, long alignment)\n+    {\n+      return nextAligned(nextPointer, alignment) + bytes <= limit;\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            long size = limit - address;\n-            long reserve = nextPointer > limit ? 0 : limit - nextPointer;\n-            double use = (1.0 - reserve / ((double) size)) * 100.0;\n-            return String.format( \"Grab[size = %d bytes, reserve = %d bytes, use = %5.2f %%]\", size, reserve, use );\n-        }\n+    Grab setNext(Grab grab)\n+    {\n+      return new Grab(grab, address, limit, nextPointer, memoryTracker);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      long size = limit - address;\n+      long reserve = nextPointer > limit ? 0 : limit - nextPointer;\n+      double use = (1.0 - reserve / ((double) size)) * 100.0;\n+      return String.format(\"Grab[size = %d bytes, reserve = %d bytes, use = %5.2f %%]\", size, reserve, use);\n     }\n+  }\n }\n",
            "diff_size": 209
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "217",
                    "column": "39",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/81/GrabAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/81/GrabAllocator.java\nindex e74252948f6..60d5a2b8abb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/81/GrabAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/81/GrabAllocator.java\n@@ -35,7 +35,7 @@ public final class GrabAllocator implements MemoryAllocator\n     /**\n      * The amount of memory, in bytes, to grab in each Grab.\n      */\n-    private static final long GRAB_SIZE = getInteger( GrabAllocator.class, \"GRAB_SIZE\", (int) kibiBytes( 512 ) );\n+    private static final long GRAB_SIZE = getInteger( GrabAllocator.class, \"GRAB_SIZE\", ( int) kibiBytes( 512 ) );\n \n     /**\n      * The amount of memory that this memory manager can still allocate.\n@@ -68,7 +68,8 @@ public final class GrabAllocator implements MemoryAllocator\n             sum += grab.nextPointer - grab.address;\n             grab = grab.next;\n         }\n-        return sum;\n+\n+return sum;\n     }\n \n     @Override\n@@ -80,7 +81,8 @@ public final class GrabAllocator implements MemoryAllocator\n         {\n             availableInCurrentGrab = grab.limit - grab.nextPointer;\n         }\n-        return Math.max( memoryReserve, 0L ) + availableInCurrentGrab;\n+\n+return Math.max( memoryReserve, 0L ) + availableInCurrentGrab;\n     }\n \n     @Override\n@@ -91,7 +93,7 @@ public final class GrabAllocator implements MemoryAllocator\n             throw new IllegalArgumentException( \"Invalid alignment: \" + alignment + \". Alignment must be positive.\" );\n         }\n         long grabSize = Math.min( GRAB_SIZE, memoryReserve );\n-        if ( bytes > GRAB_SIZE )\n+        if ( bytes> GRAB_SIZE )\n         {\n             // This is a huge allocation. Put it in its own grab and keep any existing grab at the head.\n             grabSize = bytes;\n@@ -124,10 +126,12 @@ public final class GrabAllocator implements MemoryAllocator\n                 grab.free();\n                 grabSize = bytes + alignment;\n             }\n-            grabs = new Grab( grabs, grabSize, memoryTracker );\n+\n+grabs = new Grab( grabs, grabSize, memoryTracker );\n             memoryReserve -= grabSize;\n         }\n-        return grabs.allocate( bytes, alignment );\n+\n+return grabs.allocate( bytes, alignment );\n     }\n \n     @Override\n@@ -180,7 +184,8 @@ public final class GrabAllocator implements MemoryAllocator\n             {\n                 return pointer;\n             }\n-            return pointer + (alignment - off);\n+\n+return pointer + ( alignment - off);\n         }\n \n         long allocate( long bytes, long alignment )\n@@ -209,9 +214,9 @@ public final class GrabAllocator implements MemoryAllocator\n         public String toString()\n         {\n             long size = limit - address;\n-            long reserve = nextPointer > limit ? 0 : limit - nextPointer;\n-            double use = (1.0 - reserve / ((double) size)) * 100.0;\n+            long reserve = nextPointer> limit ? 0 : limit - nextPointer;\n+            double use = ( 1.0 - reserve / ((double) size)) * 100.0;\n             return String.format( \"Grab[size = %d bytes, reserve = %d bytes, use = %5.2f %%]\", size, reserve, use );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "27",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "186",
                    "column": "31",
                    "severity": "error",
                    "message": "'%' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "222",
                    "column": "31",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "222",
                    "column": "40",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "222",
                    "column": "58",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/81/GrabAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/81/GrabAllocator.java\nindex e74252948f6..6843b63c632 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/81/GrabAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/81/GrabAllocator.java\n@@ -22,14 +22,15 @@ package org.neo4j.io.mem;\n import org.neo4j.memory.MemoryAllocationTracker;\n import org.neo4j.unsafe.impl.internal.dragons.NativeMemoryAllocationRefusedError;\n import org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil;\n-\n import static org.neo4j.io.ByteUnit.kibiBytes;\n+\n import static org.neo4j.util.FeatureToggles.getInteger;\n \n /**\n  * This memory allocator is allocating memory in large segments, called \"grabs\", and the memory returned by the memory\n  * manager is page aligned, and plays well with transparent huge pages and other operating system optimisations.\n  */\n+\n public final class GrabAllocator implements MemoryAllocator\n {\n     /**\n@@ -42,7 +43,6 @@ public final class GrabAllocator implements MemoryAllocator\n      */\n     private long memoryReserve;\n     private final MemoryAllocationTracker memoryTracker;\n-\n     private Grab grabs;\n \n     /**\n@@ -52,6 +52,7 @@ public final class GrabAllocator implements MemoryAllocator\n      * actual amount of memory used can end up greater than this value, if some of it gets wasted on alignment padding.\n      * @param memoryTracker memory usage tracker\n      */\n+\n     GrabAllocator( long expectedMaxMemory, MemoryAllocationTracker memoryTracker )\n     {\n         this.memoryReserve = expectedMaxMemory;\n@@ -63,11 +64,12 @@ public final class GrabAllocator implements MemoryAllocator\n     {\n         long sum = 0;\n         Grab grab = grabs;\n-        while ( grab != null )\n+        while( grab != null )\n         {\n             sum += grab.nextPointer - grab.address;\n             grab = grab.next;\n         }\n+\n         return sum;\n     }\n \n@@ -80,6 +82,7 @@ public final class GrabAllocator implements MemoryAllocator\n         {\n             availableInCurrentGrab = grab.limit - grab.nextPointer;\n         }\n+\n         return Math.max( memoryReserve, 0L ) + availableInCurrentGrab;\n     }\n \n@@ -90,6 +93,7 @@ public final class GrabAllocator implements MemoryAllocator\n         {\n             throw new IllegalArgumentException( \"Invalid alignment: \" + alignment + \". Alignment must be positive.\" );\n         }\n+\n         long grabSize = Math.min( GRAB_SIZE, memoryReserve );\n         if ( bytes > GRAB_SIZE )\n         {\n@@ -97,19 +101,20 @@ public final class GrabAllocator implements MemoryAllocator\n             grabSize = bytes;\n             Grab nextGrab = grabs == null ? null : grabs.next;\n             Grab allocationGrab = new Grab( nextGrab, grabSize, memoryTracker );\n-            if ( !allocationGrab.canAllocate( bytes, alignment ) )\n+            if ( ! allocationGrab.canAllocate( bytes, alignment ) )\n             {\n                 allocationGrab.free();\n                 grabSize = bytes + alignment;\n                 allocationGrab = new Grab( nextGrab, grabSize, memoryTracker );\n             }\n+\n             long allocation = allocationGrab.allocate( bytes, alignment );\n             grabs = grabs == null ? allocationGrab : grabs.setNext( allocationGrab );\n             memoryReserve -= bytes;\n             return allocation;\n         }\n \n-        if ( grabs == null || !grabs.canAllocate( bytes, alignment ) )\n+        if ( grabs == null|| ! grabs.canAllocate( bytes, alignment ) )\n         {\n             if ( grabSize < bytes )\n             {\n@@ -121,22 +126,24 @@ public final class GrabAllocator implements MemoryAllocator\n                     grabs = grab;\n                     return grabs.allocate( bytes, alignment );\n                 }\n+\n                 grab.free();\n                 grabSize = bytes + alignment;\n             }\n+\n             grabs = new Grab( grabs, grabSize, memoryTracker );\n             memoryReserve -= grabSize;\n         }\n+\n         return grabs.allocate( bytes, alignment );\n     }\n \n     @Override\n     protected synchronized void finalize() throws Throwable\n     {\n-        super.finalize();\n+        super.finalize( );\n         Grab current = grabs;\n-\n-        while ( current != null )\n+        while( current != null )\n         {\n             current.free();\n             current = current.next;\n@@ -175,12 +182,14 @@ public final class GrabAllocator implements MemoryAllocator\n             {\n                 return pointer;\n             }\n-            long off = pointer % alignment;\n+\n+            long off = pointer% alignment;\n             if ( off == 0 )\n             {\n                 return pointer;\n             }\n-            return pointer + (alignment - off);\n+\n+            return pointer + ( alignment - off);\n         }\n \n         long allocate( long bytes, long alignment )\n@@ -210,8 +219,8 @@ public final class GrabAllocator implements MemoryAllocator\n         {\n             long size = limit - address;\n             long reserve = nextPointer > limit ? 0 : limit - nextPointer;\n-            double use = (1.0 - reserve / ((double) size)) * 100.0;\n+            double use = ( 1.0- reserve/ ((double) size))* 100.0;\n             return String.format( \"Grab[size = %d bytes, reserve = %d bytes, use = %5.2f %%]\", size, reserve, use );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}