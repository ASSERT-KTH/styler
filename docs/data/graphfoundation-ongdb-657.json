{
    "project_name": "graphfoundation-ongdb",
    "error_id": "657",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/657/BoltRequestMessageReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/657/BoltRequestMessageReader.java\nindex 5d34a3b47b3..55d3ebb45e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/657/BoltRequestMessageReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/657/BoltRequestMessageReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.messaging;\n \n import java.io.IOException;\n@@ -33,74 +34,73 @@ import static java.util.stream.Collectors.toMap;\n  */\n public class BoltRequestMessageReader\n {\n-    private final Neo4jPack.Unpacker unpacker;\n+  private final Neo4jPack.Unpacker unpacker;\n \n-    public BoltRequestMessageReader( Neo4jPack.Unpacker unpacker )\n-    {\n-        this.unpacker = unpacker;\n-    }\n+  public BoltRequestMessageReader(Neo4jPack.Unpacker unpacker)\n+  {\n+    this.unpacker = unpacker;\n+  }\n \n-    /**\n-     * Parse and handle a single message by handing it off\n-     * to a {@link BoltRequestMessageHandler} instance.\n-     *\n-     * @param handler handler for request messages\n-     */\n-    public void read( BoltRequestMessageHandler handler ) throws IOException\n+  /**\n+   * Parse and handle a single message by handing it off\n+   * to a {@link BoltRequestMessageHandler} instance.\n+   *\n+   * @param handler handler for request messages\n+   */\n+  public void read(BoltRequestMessageHandler handler) throws IOException\n+  {\n+    try\n     {\n-        try\n-        {\n-            unpacker.unpackStructHeader();\n-            int signature = unpacker.unpackStructSignature();\n-            BoltRequestMessage message = BoltRequestMessage.withSignature( signature );\n-            if ( message == null )\n-            {\n-                throw new BoltIOException( Status.Request.InvalidFormat,\n-                        String.format( \"Message 0x%s is not a valid message signature.\", Integer.toHexString( signature ) ) );\n-            }\n+      unpacker.unpackStructHeader();\n+      int signature = unpacker.unpackStructSignature();\n+      BoltRequestMessage message = BoltRequestMessage.withSignature(signature);\n+      if (message == null)\n+      {\n+        throw new BoltIOException(Status.Request.InvalidFormat,\n+            String.format(\"Message 0x%s is not a valid message signature.\", Integer.toHexString(signature)));\n+      }\n \n-            switch ( message )\n-            {\n-            case INIT:\n-                String clientName = unpacker.unpackString();\n-                Map<String,Object> authToken = readAuthToken( unpacker );\n-                handler.onInit( clientName, authToken );\n-                break;\n-            case ACK_FAILURE:\n-                handler.onAckFailure();\n-                break;\n-            case RESET:\n-                handler.onReset();\n-                break;\n-            case RUN:\n-                String statement = unpacker.unpackString();\n-                MapValue params = unpacker.unpackMap();\n-                handler.onRun( statement, params );\n-                break;\n-            case DISCARD_ALL:\n-                handler.onDiscardAll();\n-                break;\n-            case PULL_ALL:\n-                handler.onPullAll();\n-                break;\n-            default:\n-                throw new BoltIOException( Status.Request.InvalidFormat,\n-                        String.format( \"Message 0x%s is not supported.\", Integer.toHexString( signature ) ) );\n-            }\n-        }\n-        catch ( PackStream.PackStreamException e )\n-        {\n-            throw new BoltIOException( Status.Request.InvalidFormat,\n-                    String.format( \"Unable to read message type. Error was: %s.\", e.getMessage() ), e );\n-        }\n-    }\n-\n-    private static Map<String,Object> readAuthToken( Neo4jPack.Unpacker unpacker ) throws IOException\n+      switch (message)\n+      {\n+        case INIT:\n+          String clientName = unpacker.unpackString();\n+          Map<String, Object> authToken = readAuthToken(unpacker);\n+          handler.onInit(clientName, authToken);\n+          break;\n+        case ACK_FAILURE:\n+          handler.onAckFailure();\n+          break;\n+        case RESET:\n+          handler.onReset();\n+          break;\n+        case RUN:\n+          String statement = unpacker.unpackString();\n+          MapValue params = unpacker.unpackMap();\n+          handler.onRun(statement, params);\n+          break;\n+        case DISCARD_ALL:\n+          handler.onDiscardAll();\n+          break;\n+        case PULL_ALL:\n+          handler.onPullAll();\n+          break;\n+        default:\n+          throw new BoltIOException(Status.Request.InvalidFormat,\n+              String.format(\"Message 0x%s is not supported.\", Integer.toHexString(signature)));\n+      }\n+    } catch (PackStream.PackStreamException e)\n     {\n-        MapValue authTokenValue = unpacker.unpackMap();\n-        AuthTokenValuesWriter writer = new AuthTokenValuesWriter();\n-        return authTokenValue.entrySet()\n-                .stream()\n-                .collect( toMap( Map.Entry::getKey, entry -> writer.valueAsObject( entry.getValue() ) ) );\n+      throw new BoltIOException(Status.Request.InvalidFormat,\n+          String.format(\"Unable to read message type. Error was: %s.\", e.getMessage()), e);\n     }\n+  }\n+\n+  private static Map<String, Object> readAuthToken(Neo4jPack.Unpacker unpacker) throws IOException\n+  {\n+    MapValue authTokenValue = unpacker.unpackMap();\n+    AuthTokenValuesWriter writer = new AuthTokenValuesWriter();\n+    return authTokenValue.entrySet()\n+        .stream()\n+        .collect(toMap(Map.Entry::getKey, entry -> writer.valueAsObject(entry.getValue())));\n+  }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/657/BoltRequestMessageReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/657/BoltRequestMessageReader.java\nindex 5d34a3b47b3..0ba49e99c6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/657/BoltRequestMessageReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/657/BoltRequestMessageReader.java\n@@ -86,21 +86,19 @@ public class BoltRequestMessageReader\n             default:\n                 throw new BoltIOException( Status.Request.InvalidFormat,\n                         String.format( \"Message 0x%s is not supported.\", Integer.toHexString( signature ) ) );\n-            }\n+    }\n         }\n         catch ( PackStream.PackStreamException e )\n         {\n             throw new BoltIOException( Status.Request.InvalidFormat,\n                     String.format( \"Unable to read message type. Error was: %s.\", e.getMessage() ), e );\n-        }\n+    }\n     }\n \n     private static Map<String,Object> readAuthToken( Neo4jPack.Unpacker unpacker ) throws IOException\n     {\n         MapValue authTokenValue = unpacker.unpackMap();\n         AuthTokenValuesWriter writer = new AuthTokenValuesWriter();\n-        return authTokenValue.entrySet()\n-                .stream()\n-                .collect( toMap( Map.Entry::getKey, entry -> writer.valueAsObject( entry.getValue() ) ) );\n+        return authTokenValue.entrySet().stream().collect( toMap( Map.Entry::getKey, entry -> writer.valueAsObject( entry.getValue() ) ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}