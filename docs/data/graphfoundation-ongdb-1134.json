{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1134",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1134/IndividualSettingsValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1134/IndividualSettingsValidator.java\nindex fb7fb98710c..f0111e18c8f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1134/IndividualSettingsValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1134/IndividualSettingsValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.configuration;\n \n import java.util.Arrays;\n@@ -39,61 +40,59 @@ import static org.neo4j.helpers.collection.MapUtil.stringMap;\n  */\n public class IndividualSettingsValidator implements ConfigurationValidator\n {\n-    private static final List<String> reservedPrefixes =\n-            Arrays.asList( \"dbms.\", \"metrics.\", \"ha.\", \"causal_clustering.\", \"browser.\", \"tools.\", \"unsupported.\" );\n+  private static final List<String> reservedPrefixes =\n+      Arrays.asList(\"dbms.\", \"metrics.\", \"ha.\", \"causal_clustering.\", \"browser.\", \"tools.\", \"unsupported.\");\n+\n+  private final Collection<SettingValidator> settingValidators;\n+  private final boolean warnOnUnknownSettings;\n \n-    private final Collection<SettingValidator> settingValidators;\n-    private final boolean warnOnUnknownSettings;\n+  IndividualSettingsValidator(Collection<SettingValidator> settingValidators, boolean warnOnUnknownSettings)\n+  {\n+    this.settingValidators = settingValidators;\n+    this.warnOnUnknownSettings = warnOnUnknownSettings;\n+  }\n \n-    IndividualSettingsValidator( Collection<SettingValidator> settingValidators, boolean warnOnUnknownSettings )\n+  @Override\n+  public Map<String, String> validate(@Nonnull Config config, @Nonnull Log log) throws InvalidSettingException\n+  {\n+    Map<String, String> rawConfig = config.getRaw();\n+    Map<String, String> validConfig = stringMap();\n+    for (SettingValidator validator : settingValidators)\n     {\n-        this.settingValidators = settingValidators;\n-        this.warnOnUnknownSettings = warnOnUnknownSettings;\n+      validConfig.putAll(validator.validate(rawConfig, log::warn));\n     }\n \n-    @Override\n-    public Map<String,String> validate( @Nonnull Config config, @Nonnull Log log ) throws InvalidSettingException\n+    final boolean strictValidation = config.get(strict_config_validation);\n+\n+    rawConfig.forEach((key, value) ->\n     {\n-        Map<String,String> rawConfig = config.getRaw();\n-        Map<String,String> validConfig = stringMap();\n-        for ( SettingValidator validator : settingValidators )\n+      if (!validConfig.containsKey(key))\n+      {\n+        // Plugins rely on custom config options being present.\n+        // As a compromise, we only warn (and discard) for settings in our own \"namespace\"\n+        if (reservedPrefixes.stream().anyMatch(key::startsWith))\n         {\n-            validConfig.putAll( validator.validate( rawConfig, log::warn ) );\n-        }\n+          if (warnOnUnknownSettings)\n+          {\n+            log.warn(\"Unknown config option: %s\", key);\n+          }\n \n-        final boolean strictValidation = config.get( strict_config_validation );\n-\n-        rawConfig.forEach( ( key, value ) ->\n+          if (strictValidation)\n+          {\n+            throw new InvalidSettingException(String.format(\n+                \"Unknown config option '%s'. To resolve either remove it from your configuration \" +\n+                    \"or set '%s' to false.\", key, strict_config_validation.name()));\n+          } else\n+          {\n+            validConfig.put(key, value);\n+          }\n+        } else\n         {\n-            if ( !validConfig.containsKey( key ) )\n-            {\n-                // Plugins rely on custom config options being present.\n-                // As a compromise, we only warn (and discard) for settings in our own \"namespace\"\n-                if ( reservedPrefixes.stream().anyMatch( key::startsWith ) )\n-                {\n-                    if ( warnOnUnknownSettings )\n-                    {\n-                        log.warn( \"Unknown config option: %s\", key );\n-                    }\n-\n-                    if ( strictValidation )\n-                    {\n-                        throw new InvalidSettingException( String.format(\n-                                \"Unknown config option '%s'. To resolve either remove it from your configuration \" +\n-                                        \"or set '%s' to false.\", key, strict_config_validation.name() ) );\n-                    }\n-                    else\n-                    {\n-                        validConfig.put( key, value );\n-                    }\n-                }\n-                else\n-                {\n-                    validConfig.put( key, value );\n-                }\n-            }\n-        } );\n+          validConfig.put(key, value);\n+        }\n+      }\n+    });\n \n-        return Collections.emptyMap();\n-    }\n+    return Collections.emptyMap();\n+  }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1134/IndividualSettingsValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1134/IndividualSettingsValidator.java\nindex fb7fb98710c..1a4e6a689c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1134/IndividualSettingsValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1134/IndividualSettingsValidator.java\n@@ -39,10 +39,8 @@ import static org.neo4j.helpers.collection.MapUtil.stringMap;\n  */\n public class IndividualSettingsValidator implements ConfigurationValidator\n {\n-    private static final List<String> reservedPrefixes =\n-            Arrays.asList( \"dbms.\", \"metrics.\", \"ha.\", \"causal_clustering.\", \"browser.\", \"tools.\", \"unsupported.\" );\n-\n-    private final Collection<SettingValidator> settingValidators;\n+    private static final List<String> reservedPrefixes = Arrays.asList( \"dbms.\", \"metrics.\", \"ha.\", \"causal_clustering.\", \"browser.\", \"tools.\", \"unsupported.\" );\n+private final Collection<SettingValidator> settingValidators;\n     private final boolean warnOnUnknownSettings;\n \n     IndividualSettingsValidator( Collection<SettingValidator> settingValidators, boolean warnOnUnknownSettings )\n@@ -62,8 +60,7 @@ public class IndividualSettingsValidator implements ConfigurationValidator\n         }\n \n         final boolean strictValidation = config.get( strict_config_validation );\n-\n-        rawConfig.forEach( ( key, value ) ->\n+rawConfig.forEach( ( key, value ) ->\n         {\n             if ( !validConfig.containsKey( key ) )\n             {\n@@ -78,10 +75,8 @@ public class IndividualSettingsValidator implements ConfigurationValidator\n \n                     if ( strictValidation )\n                     {\n-                        throw new InvalidSettingException( String.format(\n-                                \"Unknown config option '%s'. To resolve either remove it from your configuration \" +\n-                                        \"or set '%s' to false.\", key, strict_config_validation.name() ) );\n-                    }\n+                        throw new InvalidSettingException( String.format( \"Unknown config option '%s'. To resolve either remove it from your configuration \" + \"or set '%s' to false.\", key, strict_config_validation.name() ) );\n+    }\n                     else\n                     {\n                         validConfig.put( key, value );\n@@ -93,7 +88,6 @@ public class IndividualSettingsValidator implements ConfigurationValidator\n                 }\n             }\n         } );\n-\n-        return Collections.emptyMap();\n+return Collections.emptyMap();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}