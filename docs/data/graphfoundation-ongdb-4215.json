{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4215",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "27",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "27",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "29",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "29",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4215/FieldReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4215/FieldReference.java\nindex 57afbda296a..522d7b34650 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4215/FieldReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4215/FieldReference.java\n@@ -17,62 +17,63 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n \n public class FieldReference\n {\n-    public static FieldReference field( TypeReference owner, TypeReference type, String name )\n-    {\n-        return new FieldReference( Modifier.PUBLIC, owner, type, name );\n-    }\n+  public static FieldReference field(TypeReference owner, TypeReference type, String name)\n+  {\n+    return new FieldReference(Modifier.PUBLIC, owner, type, name);\n+  }\n \n-    public static FieldReference staticField( TypeReference owner, TypeReference type, String name )\n-    {\n-        return new FieldReference( Modifier.STATIC | Modifier.PRIVATE, owner, type, name );\n-    }\n+  public static FieldReference staticField(TypeReference owner, TypeReference type, String name)\n+  {\n+    return new FieldReference(Modifier.STATIC | Modifier.PRIVATE, owner, type, name);\n+  }\n \n-    private final int modifiers;\n-    private final TypeReference owner;\n-    private final TypeReference type;\n-    private final String name;\n+  private final int modifiers;\n+  private final TypeReference owner;\n+  private final TypeReference type;\n+  private final String name;\n \n-    FieldReference( int modifiers, TypeReference owner, TypeReference type, String name )\n-    {\n-        this.modifiers = modifiers;\n-        this.owner = owner;\n-        this.type = type;\n-        this.name = name;\n-    }\n+  FieldReference(int modifiers, TypeReference owner, TypeReference type, String name)\n+  {\n+    this.modifiers = modifiers;\n+    this.owner = owner;\n+    this.type = type;\n+    this.name = name;\n+  }\n \n-    public TypeReference owner()\n-    {\n-        return owner;\n-    }\n+  public TypeReference owner()\n+  {\n+    return owner;\n+  }\n \n-    public TypeReference type()\n-    {\n-        return type;\n-    }\n+  public TypeReference type()\n+  {\n+    return type;\n+  }\n \n-    public String name()\n-    {\n-        return name;\n-    }\n+  public String name()\n+  {\n+    return name;\n+  }\n \n-    public boolean isStatic()\n-    {\n-        return Modifier.isStatic( modifiers );\n-    }\n+  public boolean isStatic()\n+  {\n+    return Modifier.isStatic(modifiers);\n+  }\n \n-    public boolean isFinal()\n-    {\n-        return Modifier.isFinal( modifiers );\n-    }\n+  public boolean isFinal()\n+  {\n+    return Modifier.isFinal(modifiers);\n+  }\n \n-    public int modifiers()\n-    {\n-        return modifiers;\n-    }\n+  public int modifiers()\n+  {\n+    return modifiers;\n+  }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4215/FieldReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4215/FieldReference.java\nindex 57afbda296a..c741f30ebde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4215/FieldReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4215/FieldReference.java\n@@ -75,4 +75,4 @@ public class FieldReference\n     {\n         return modifiers;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}