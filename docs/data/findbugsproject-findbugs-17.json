{
    "project_name": "findbugsproject-findbugs",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "35",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class ResultsFrame extends JFrame\n{\n\tprivate static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n\tprivate static final int[] columnWidths = { 150, 50, 475 };\n\n\tprivate JEditorPane description;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/17/ResultsFrame.java\nindex 16ed40931ff..7d6278aa65f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/17/ResultsFrame.java\n@@ -32,7 +32,7 @@ import edu.umd.cs.findbugs.SourceLineAnnotation;\n @SuppressWarnings(\"serial\")\n public class ResultsFrame extends JFrame\n {\n-\tprivate static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n+private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n \tprivate static final int[] columnWidths = { 150, 50, 475 };\n \n \tprivate JEditorPane description;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/17/ResultsFrame.java\nindex 16ed40931ff..e387454f031 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/17/ResultsFrame.java\n@@ -30,241 +30,209 @@ import edu.umd.cs.findbugs.SortedBugCollection;\n import edu.umd.cs.findbugs.SourceLineAnnotation;\n \n @SuppressWarnings(\"serial\")\n-public class ResultsFrame extends JFrame\n-{\n-\tprivate static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n-\tprivate static final int[] columnWidths = { 150, 50, 475 };\n-\n-\tprivate JEditorPane description;\n-\tprivate JScrollPane bottomScroll;\n-\n-\tprivate BProject currProject;\n-\t\n-\tprivate static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n-\t * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n-\t * @param project The BProject to get the frame for\n-\t * @param createIfNeeded If there's not already a frame, should one be created?\n-\t * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n-\t */\n-\tpublic static ResultsFrame getInstance(BProject project, boolean createIfNeeded)\n-\t{\n-\t\tif (!instanceMap.containsKey(project))\n-\t\t{\n-\t\t\tif (createIfNeeded)\n-\t\t\t\tinstanceMap.put(project, new ResultsFrame());\n-\t\t\telse\n-\t\t\t\treturn null;\n-\t\t}\n-\t\treturn instanceMap.get(project);\n-\t}\n-\tprivate ResultsFrame() {}\n-\t\n-\t/**\n-\t * Update the view\n-\t */\n-\tpublic void update(final SortedBugCollection bugs, BProject project)\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tsetTitle(\"FindBugs results [\" + project.getName() + \"]\");\n-\t\t}\n-\t\tcatch (ProjectNotOpenException e)\n-\t\t{\n-\t\t\tsetTitle(\"FindBugs results\");\n-\t\t}\n-\t\ttry\n-\t\t{\n-\t\t\tsetIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n-\t\t}\n-\t\tcatch (IOException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t\t\n-\t\tcurrProject = project;\n-\t\tfinal ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n-\t\t\t\t.getCollection());\n-\t\t\n-\t\tfinal JTable table = new JTable(new MyTableModel(bugList));\n-\t\t\n-\t\tfor (int i = 0; i < columnNames.length; i++)\n-\t\t\ttable.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n-\t\t\n-\t\ttable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n-\t\t\n-\t\ttable.addMouseListener(new MouseAdapter()\n-\t\t\t\t{\n-\t\t\t@Override\n-\t\t\tpublic void mouseClicked(MouseEvent evt)\n-\t\t\t{\n-\t\t\t\tif (evt.getClickCount() == 2)\n-\t\t\t\t\tshowEditorAndHighlight(bugList.get(table.getSelectedRow()));\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tdescription.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n-\t\t\t\t\tSwingUtilities.invokeLater(new Runnable()\n-\t\t\t\t\t{\n-\t\t\t\t\t\tpublic void run()\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tbottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n-\t\t\t\t}\n-\t\t\t} \n-\t\t});\n-\n-\t\tJScrollPane topScroll = new JScrollPane(table);\n-\t\ttopScroll.setPreferredSize(new Dimension(675, 200));\n-\n-\t\tdescription = new JEditorPane();\n-\t\tdescription.setContentType(\"text/html\");\n-\t\tdescription.setEditable(false);\n-\t\t\n-\t\tboolean allCompiled = true;\n-\t\tfor (BugInstance bug : bugs.getCollection())\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tif (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled())\n-\t\t\t\t{\n-\t\t\t\t\tallCompiled = false;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch (ExtensionException e)\n-\t\t\t{\n-\t\t\t\tLog.recordBug(e);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t}\n-\t\n-\t\t\ttry {\n-\t\t\t\tdescription.setPage(ResultsFrame.class.getResource(\"about.html\"));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tdescription.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n-\t\t\t\t\t\"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n-\t\t\t\t\t\"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n-\t\t\t\t\t\"source code.</p>\"\n-\t\t\t\t\t+ \"<p>Bug: \" + e.toString()));\n-\t\t\t}\n-\n-\t\t\n-\t\tbottomScroll = new JScrollPane(description);\n-\t\tbottomScroll.setPreferredSize(new Dimension(675, 200));\n-\n-\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n-\t\t\t\ttopScroll, bottomScroll);\n-\t\tsetContentPane(splitPane);\n-\n-\t\tpack();\n-\t\tsetDefaultCloseOperation(HIDE_ON_CLOSE);\n-\t\tsetVisible(true);\n-\t}\n-\n-\t/*\n-\t * Finds the editor that corresponds with the class the bug in the\n-\t * BugInstance is in. Opens the editor and then highlights the bug and\n-\t * places the cursor at the beginning if class is compiled. If the class\n-\t * is not compiled than just opens the editor and moves the caret to the\n-\t * last known startline of that bug.\n-\t */\n-\tprivate void showEditorAndHighlight(BugInstance instance)\n-\t{\n-\t\tSourceLineAnnotation srcLine = instance\n-\t\t\t\t.getPrimarySourceLineAnnotation();\n-\t\ttry\n-\t\t{\n-\t\t\tBClass srcClass = currProject.getPackage(srcLine.getPackageName())\n-\t\t\t.getBClass(getClassName(srcLine));\n-\t\t\tEditor srcEditor = srcClass.getEditor();\n-\t\t\tsrcEditor.setVisible(true);\n-\n-\t\t\t// srcStartLine in case returned -1\n-\t\t\tint srcStartLine = srcLine.getStartLine();\n-\n-\t\t\tsrcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n-\t\t\t\n-\t\t\tif (srcStartLine > 0 && srcClass.isCompiled())\n-\t\t\t{\t\t\t\t\n-\t\t\t\tsrcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n-\t\t\t\t\t\tnew TextLocation(srcLine.getEndLine(), 0));\n-\t\t\t}\t\n-\t\t}\n-\t\tcatch (ProjectNotOpenException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t\tcatch (PackageNotFoundException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t}\n-\n-\t/*\n-\t * Gets the source file and gets the name of the class from that.\n-\t */\n-\tprivate String getClassName(SourceLineAnnotation srcLine)\n-\t{\n-\t\tString str = srcLine.getSourceFile();\n-\t\treturn str.substring(0, str.indexOf(\".\"));\n-\t}\n-\n-\tprivate class MyTableModel extends AbstractTableModel\n-\t{\n-\t\tprivate ArrayList<BugInstance> bugList;\n-\n-\t\tpublic MyTableModel(ArrayList<BugInstance> bugList)\n-\t\t{\n-\t\t\tthis.bugList = bugList;\n-\t\t}\n-\n-\t\tpublic int getRowCount()\n-\t\t{\n-\t\t\treturn bugList.size();\n-\t\t}\n-\n-\t\tpublic int getColumnCount()\n-\t\t{\n-\t\t\treturn 3;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getColumnName(int column)\n-\t\t{\n-\t\t\treturn columnNames[column];\n-\t\t}\n-\n-\t\tpublic Object getValueAt(int row, int column)\n-\t\t{\n-\t\t\tSourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n-\t\t\t\n-\t\t\tswitch (column)\n-\t\t\t{\n-\t\t\tcase 0:\n-\t\t\t\tboolean notCompiled = false;\n-\t\t\t\t\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tBClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n-\t\t\t\t\tnotCompiled = !srcClass.isCompiled();\n-\t\t\t\t}\n-\t\t\t\tcatch (ExtensionException e)\n-\t\t\t\t{\n-\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n-\t\t\tcase 1:\n-\t\t\t\tint line = annotation.getStartLine();\n-\t\t\t\treturn (line != -1 ? String.valueOf(line) : \"\");\n-\t\t\tcase 2:\n-\t\t\t\treturn bugList.get(row).getMessageWithoutPrefix();\n-\t\t\tdefault:\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"Column \" + column\n-\t\t\t\t\t\t+ \" must be < 3\");\n-\t\t\t}\n-\t\t}\n-\n-\t}\n+public class ResultsFrame extends JFrame {\n+    private static final String[] columnNames = {\"File\", \"Line\", \"Description\"};\n+    private static final int[] columnWidths = {150, 50, 475};\n+\n+    private JEditorPane description;\n+    private JScrollPane bottomScroll;\n+\n+    private BProject currProject;\n+\n+    private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n+\n+    /**\n+     * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n+     *\n+     * @param project        The BProject to get the frame for\n+     * @param createIfNeeded If there's not already a frame, should one be created?\n+     * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n+     */\n+    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded) {\n+        if (!instanceMap.containsKey(project)) {\n+            if (createIfNeeded) {\n+                instanceMap.put(project, new ResultsFrame());\n+            } else {\n+                return null;\n+            }\n+        }\n+        return instanceMap.get(project);\n+    }\n+\n+    private ResultsFrame() {\n+    }\n+\n+    /**\n+     * Update the view\n+     */\n+    public void update(final SortedBugCollection bugs, BProject project) {\n+        try {\n+            setTitle(\"FindBugs results [\" + project.getName() + \"]\");\n+        } catch (ProjectNotOpenException e) {\n+            setTitle(\"FindBugs results\");\n+        }\n+        try {\n+            setIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n+        } catch (IOException e) {\n+            Log.recordBug(e);\n+        }\n+\n+        currProject = project;\n+        final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n+            .getCollection());\n+\n+        final JTable table = new JTable(new MyTableModel(bugList));\n+\n+        for (int i = 0; i < columnNames.length; i++) {\n+            table.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+        }\n+\n+        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+\n+        table.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent evt) {\n+                if (evt.getClickCount() == 2) {\n+                    showEditorAndHighlight(bugList.get(table.getSelectedRow()));\n+                } else {\n+                    description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n+                    SwingUtilities.invokeLater(new Runnable() {\n+                        public void run() {\n+                            bottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n+                        }\n+                    });\n+                }\n+            }\n+        });\n+\n+        JScrollPane topScroll = new JScrollPane(table);\n+        topScroll.setPreferredSize(new Dimension(675, 200));\n+\n+        description = new JEditorPane();\n+        description.setContentType(\"text/html\");\n+        description.setEditable(false);\n+\n+        boolean allCompiled = true;\n+        for (BugInstance bug : bugs.getCollection()) {\n+            try {\n+                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled()) {\n+                    allCompiled = false;\n+                    break;\n+                }\n+            } catch (ExtensionException e) {\n+                Log.recordBug(e);\n+                continue;\n+            }\n+        }\n+\n+        try {\n+            description.setPage(ResultsFrame.class.getResource(\"about.html\"));\n+        } catch (IOException e) {\n+            description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n+                \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n+                \"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n+                \"source code.</p>\"\n+                + \"<p>Bug: \" + e.toString()));\n+        }\n+\n+\n+        bottomScroll = new JScrollPane(description);\n+        bottomScroll.setPreferredSize(new Dimension(675, 200));\n+\n+        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n+            topScroll, bottomScroll);\n+        setContentPane(splitPane);\n+\n+        pack();\n+        setDefaultCloseOperation(HIDE_ON_CLOSE);\n+        setVisible(true);\n+    }\n+\n+    /*\n+     * Finds the editor that corresponds with the class the bug in the\n+     * BugInstance is in. Opens the editor and then highlights the bug and\n+     * places the cursor at the beginning if class is compiled. If the class\n+     * is not compiled than just opens the editor and moves the caret to the\n+     * last known startline of that bug.\n+     */\n+    private void showEditorAndHighlight(BugInstance instance) {\n+        SourceLineAnnotation srcLine = instance\n+            .getPrimarySourceLineAnnotation();\n+        try {\n+            BClass srcClass = currProject.getPackage(srcLine.getPackageName())\n+                .getBClass(getClassName(srcLine));\n+            Editor srcEditor = srcClass.getEditor();\n+            srcEditor.setVisible(true);\n+\n+            // srcStartLine in case returned -1\n+            int srcStartLine = srcLine.getStartLine();\n+\n+            srcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n+\n+            if (srcStartLine > 0 && srcClass.isCompiled()) {\n+                srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n+                    new TextLocation(srcLine.getEndLine(), 0));\n+            }\n+        } catch (ProjectNotOpenException e) {\n+            Log.recordBug(e);\n+        } catch (PackageNotFoundException e) {\n+            Log.recordBug(e);\n+        }\n+    }\n+\n+    /*\n+     * Gets the source file and gets the name of the class from that.\n+     */\n+    private String getClassName(SourceLineAnnotation srcLine) {\n+        String str = srcLine.getSourceFile();\n+        return str.substring(0, str.indexOf(\".\"));\n+    }\n+\n+    private class MyTableModel extends AbstractTableModel {\n+        private ArrayList<BugInstance> bugList;\n+\n+        public MyTableModel(ArrayList<BugInstance> bugList) {\n+            this.bugList = bugList;\n+        }\n+\n+        public int getRowCount() {\n+            return bugList.size();\n+        }\n+\n+        public int getColumnCount() {\n+            return 3;\n+        }\n+\n+        @Override\n+        public String getColumnName(int column) {\n+            return columnNames[column];\n+        }\n+\n+        public Object getValueAt(int row, int column) {\n+            SourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n+\n+            switch (column) {\n+                case 0:\n+                    boolean notCompiled = false;\n+\n+                    try {\n+                        BClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n+                        notCompiled = !srcClass.isCompiled();\n+                    } catch (ExtensionException e) {\n+                        Log.recordBug(e);\n+                    }\n+\n+                    return (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n+                case 1:\n+                    int line = annotation.getStartLine();\n+                    return (line != -1 ? String.valueOf(line) : \"\");\n+                case 2:\n+                    return bugList.get(row).getMessageWithoutPrefix();\n+                default:\n+                    throw new ArrayIndexOutOfBoundsException(\"Column \" + column\n+                        + \" must be < 3\");\n+            }\n+        }\n+\n+    }\n }\n",
            "diff_size": 237
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/17/ResultsFrame.java\nindex 16ed40931ff..489f7e91a04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/17/ResultsFrame.java\n@@ -30,137 +30,111 @@ import edu.umd.cs.findbugs.SortedBugCollection;\n import edu.umd.cs.findbugs.SourceLineAnnotation;\n \n @SuppressWarnings(\"serial\")\n-public class ResultsFrame extends JFrame\n-{\n-\tprivate static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n+public class ResultsFrame extends JFrame {\n+    private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n \tprivate static final int[] columnWidths = { 150, 50, 475 };\n \n \tprivate JEditorPane description;\n \tprivate JScrollPane bottomScroll;\n \n \tprivate BProject currProject;\n-\t\n-\tprivate static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n+\n+private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n+\n+/**\n \t * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n \t * @param project The BProject to get the frame for\n \t * @param createIfNeeded If there's not already a frame, should one be created?\n \t * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n \t */\n-\tpublic static ResultsFrame getInstance(BProject project, boolean createIfNeeded)\n-\t{\n-\t\tif (!instanceMap.containsKey(project))\n-\t\t{\n-\t\t\tif (createIfNeeded)\n-\t\t\t\tinstanceMap.put(project, new ResultsFrame());\n-\t\t\telse\n-\t\t\t\treturn null;\n-\t\t}\n+\tpublic static ResultsFrame getInstance(BProject project, boolean createIfNeeded) {\n+   if (!instanceMap.containsKey(project)) {\n+   if (createIfNeeded)\n+    instanceMap.put(project, new ResultsFrame());\n+    else\n+    return null;\n+    }\n \t\treturn instanceMap.get(project);\n-\t}\n+  }\n \tprivate ResultsFrame() {}\n-\t\n-\t/**\n+\n+    /**\n \t * Update the view\n \t */\n-\tpublic void update(final SortedBugCollection bugs, BProject project)\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tsetTitle(\"FindBugs results [\" + project.getName() + \"]\");\n-\t\t}\n-\t\tcatch (ProjectNotOpenException e)\n-\t\t{\n-\t\t\tsetTitle(\"FindBugs results\");\n-\t\t}\n-\t\ttry\n-\t\t{\n-\t\t\tsetIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n-\t\t}\n-\t\tcatch (IOException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t\t\n-\t\tcurrProject = project;\n-\t\tfinal ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n-\t\t\t\t.getCollection());\n+public void update(final SortedBugCollection bugs, BProject project) {\n+    try {\n+    setTitle(\"FindBugs results [\" + project.getName() + \"]\");\n+    }\n+\t\tcatch (ProjectNotOpenException e) {\n+   setTitle(\"FindBugs results\");\n+    }\n+\t\ttry {\n+    setIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n+    }\n+\t\tcatch (IOException e) {\n+   Log.recordBug(e);\n+    }\n+currProject = project;\n+\n+final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs.getCollection());\n \t\t\n \t\tfinal JTable table = new JTable(new MyTableModel(bugList));\n \t\t\n \t\tfor (int i = 0; i < columnNames.length; i++)\n-\t\t\ttable.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n-\t\t\n-\t\ttable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+    table.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n \t\t\n-\t\ttable.addMouseListener(new MouseAdapter()\n-\t\t\t\t{\n-\t\t\t@Override\n-\t\t\tpublic void mouseClicked(MouseEvent evt)\n-\t\t\t{\n-\t\t\t\tif (evt.getClickCount() == 2)\n-\t\t\t\t\tshowEditorAndHighlight(bugList.get(table.getSelectedRow()));\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tdescription.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n-\t\t\t\t\tSwingUtilities.invokeLater(new Runnable()\n-\t\t\t\t\t{\n-\t\t\t\t\t\tpublic void run()\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tbottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n-\t\t\t\t}\n-\t\t\t} \n-\t\t});\n-\n-\t\tJScrollPane topScroll = new JScrollPane(table);\n+\t\ttable.addMouseListener(new MouseAdapter() {\n+    @Override\n+\t\t\tpublic void mouseClicked(MouseEvent evt) {\n+   if (evt.getClickCount() == 2)\n+    showEditorAndHighlight(bugList.get(table.getSelectedRow()));\n+    else {\n+    description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n+\t\t\t\t\tSwingUtilities.invokeLater(new Runnable() {\n+    public void run() {\n+   bottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n+    }\n+    });\n+    }\n+    }\n+    });\n+JScrollPane topScroll = new JScrollPane(table);\n \t\ttopScroll.setPreferredSize(new Dimension(675, 200));\n \n \t\tdescription = new JEditorPane();\n \t\tdescription.setContentType(\"text/html\");\n \t\tdescription.setEditable(false);\n-\t\t\n-\t\tboolean allCompiled = true;\n-\t\tfor (BugInstance bug : bugs.getCollection())\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tif (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled())\n-\t\t\t\t{\n-\t\t\t\t\tallCompiled = false;\n+boolean allCompiled = true;\n+for (BugInstance bug : bugs.getCollection()) {\n+    try {\n+    if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled()) {\n+   allCompiled = false;\n \t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch (ExtensionException e)\n-\t\t\t{\n-\t\t\t\tLog.recordBug(e);\n+    }\n+    }\n+\t\t\tcatch (ExtensionException e) {\n+   Log.recordBug(e);\n \t\t\t\tcontinue;\n-\t\t\t}\n-\t\t}\n-\t\n-\t\t\ttry {\n+    }\n+    }\n+try {\n \t\t\t\tdescription.setPage(ResultsFrame.class.getResource(\"about.html\"));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tdescription.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n-\t\t\t\t\t\"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n+    } catch (IOException e) {\n+    description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" + \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n \t\t\t\t\t\"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n-\t\t\t\t\t\"source code.</p>\"\n-\t\t\t\t\t+ \"<p>Bug: \" + e.toString()));\n-\t\t\t}\n+\t\t\t\t\t\"source code.</p>\" + \"<p>Bug: \" + e.toString()));\n+    }\n+bottomScroll = new JScrollPane(description);\n+bottomScroll.setPreferredSize(new Dimension(675, 200));\n \n-\t\t\n-\t\tbottomScroll = new JScrollPane(description);\n-\t\tbottomScroll.setPreferredSize(new Dimension(675, 200));\n-\n-\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n-\t\t\t\ttopScroll, bottomScroll);\n-\t\tsetContentPane(splitPane);\n+\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, topScroll, bottomScroll);\n+setContentPane(splitPane);\n \n \t\tpack();\n \t\tsetDefaultCloseOperation(HIDE_ON_CLOSE);\n \t\tsetVisible(true);\n-\t}\n+    }\n \n \t/*\n \t * Finds the editor that corresponds with the class the bug in the\n@@ -169,13 +143,10 @@ public class ResultsFrame extends JFrame\n \t * is not compiled than just opens the editor and moves the caret to the\n \t * last known startline of that bug.\n \t */\n-\tprivate void showEditorAndHighlight(BugInstance instance)\n-\t{\n-\t\tSourceLineAnnotation srcLine = instance\n-\t\t\t\t.getPrimarySourceLineAnnotation();\n-\t\ttry\n-\t\t{\n-\t\t\tBClass srcClass = currProject.getPackage(srcLine.getPackageName())\n+\tprivate void showEditorAndHighlight(BugInstance instance) {\n+   SourceLineAnnotation srcLine = instance.getPrimarySourceLineAnnotation();\n+try {\n+    BClass srcClass = currProject.getPackage(srcLine.getPackageName())\n \t\t\t.getBClass(getClassName(srcLine));\n \t\t\tEditor srcEditor = srcClass.getEditor();\n \t\t\tsrcEditor.setVisible(true);\n@@ -184,87 +155,67 @@ public class ResultsFrame extends JFrame\n \t\t\tint srcStartLine = srcLine.getStartLine();\n \n \t\t\tsrcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n-\t\t\t\n-\t\t\tif (srcStartLine > 0 && srcClass.isCompiled())\n-\t\t\t{\t\t\t\t\n-\t\t\t\tsrcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n-\t\t\t\t\t\tnew TextLocation(srcLine.getEndLine(), 0));\n-\t\t\t}\t\n-\t\t}\n-\t\tcatch (ProjectNotOpenException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t\tcatch (PackageNotFoundException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t}\n+if (srcStartLine > 0 && srcClass.isCompiled()) {\n+    srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n+new TextLocation(srcLine.getEndLine(), 0));\n+    }\n+    } catch (ProjectNotOpenException e) {\n+   Log.recordBug(e);\n+    }\n+\t\tcatch (PackageNotFoundException e) {\n+   Log.recordBug(e);\n+    }\n+    }\n \n \t/*\n \t * Gets the source file and gets the name of the class from that.\n \t */\n-\tprivate String getClassName(SourceLineAnnotation srcLine)\n-\t{\n-\t\tString str = srcLine.getSourceFile();\n+\tprivate String getClassName(SourceLineAnnotation srcLine) {\n+   String str = srcLine.getSourceFile();\n \t\treturn str.substring(0, str.indexOf(\".\"));\n-\t}\n+    }\n \n-\tprivate class MyTableModel extends AbstractTableModel\n-\t{\n-\t\tprivate ArrayList<BugInstance> bugList;\n+\tprivate class MyTableModel extends AbstractTableModel {\n+    private ArrayList<BugInstance> bugList;\n \n-\t\tpublic MyTableModel(ArrayList<BugInstance> bugList)\n-\t\t{\n-\t\t\tthis.bugList = bugList;\n-\t\t}\n+\t\tpublic MyTableModel(ArrayList<BugInstance> bugList) {\n+   this.bugList = bugList;\n+    }\n \n-\t\tpublic int getRowCount()\n-\t\t{\n-\t\t\treturn bugList.size();\n-\t\t}\n+\t\tpublic int getRowCount() {\n+   return bugList.size();\n+    }\n \n-\t\tpublic int getColumnCount()\n-\t\t{\n-\t\t\treturn 3;\n-\t\t}\n+\t\tpublic int getColumnCount() {\n+    return 3;\n+    }\n \n \t\t@Override\n-\t\tpublic String getColumnName(int column)\n-\t\t{\n-\t\t\treturn columnNames[column];\n-\t\t}\n+\t\tpublic String getColumnName(int column) {\n+   return columnNames[column];\n+    }\n \n-\t\tpublic Object getValueAt(int row, int column)\n-\t\t{\n-\t\t\tSourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n-\t\t\t\n-\t\t\tswitch (column)\n-\t\t\t{\n+\t\tpublic Object getValueAt(int row, int column) {\n+   SourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n+switch (column) {\n \t\t\tcase 0:\n-\t\t\t\tboolean notCompiled = false;\n-\t\t\t\t\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tBClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n+    boolean notCompiled = false;\n+try {\n+    BClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n \t\t\t\t\tnotCompiled = !srcClass.isCompiled();\n-\t\t\t\t}\n-\t\t\t\tcatch (ExtensionException e)\n-\t\t\t\t{\n-\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n-\t\t\tcase 1:\n-\t\t\t\tint line = annotation.getStartLine();\n+    }\n+\t\t\t\tcatch (ExtensionException e) {\n+   Log.recordBug(e);\n+    }\n+return (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n+    case 1:\n+    int line = annotation.getStartLine();\n \t\t\t\treturn (line != -1 ? String.valueOf(line) : \"\");\n-\t\t\tcase 2:\n-\t\t\t\treturn bugList.get(row).getMessageWithoutPrefix();\n-\t\t\tdefault:\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"Column \" + column\n-\t\t\t\t\t\t+ \" must be < 3\");\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-}\n+    case 2:\n+    return bugList.get(row).getMessageWithoutPrefix();\n+    default:\n+    throw new ArrayIndexOutOfBoundsException(\"Column \" + column + \" must be < 3\");\n+    }\n+    }\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 175
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/17/ResultsFrame.java\nindex 16ed40931ff..f61f06d8577 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/17/ResultsFrame.java\n@@ -6,7 +6,6 @@ import java.awt.event.MouseEvent;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.HashMap;\n-\n import javax.imageio.ImageIO;\n import javax.swing.JEditorPane;\n import javax.swing.JFrame;\n@@ -16,7 +15,6 @@ import javax.swing.JTable;\n import javax.swing.ListSelectionModel;\n import javax.swing.SwingUtilities;\n import javax.swing.table.AbstractTableModel;\n-\n import bluej.extensions.BClass;\n import bluej.extensions.BProject;\n import bluej.extensions.ExtensionException;\n@@ -24,247 +22,192 @@ import bluej.extensions.PackageNotFoundException;\n import bluej.extensions.ProjectNotOpenException;\n import bluej.extensions.editor.Editor;\n import bluej.extensions.editor.TextLocation;\n-\n import edu.umd.cs.findbugs.BugInstance;\n import edu.umd.cs.findbugs.SortedBugCollection;\n import edu.umd.cs.findbugs.SourceLineAnnotation;\n \n @SuppressWarnings(\"serial\")\n-public class ResultsFrame extends JFrame\n-{\n-\tprivate static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n-\tprivate static final int[] columnWidths = { 150, 50, 475 };\n-\n-\tprivate JEditorPane description;\n-\tprivate JScrollPane bottomScroll;\n-\n-\tprivate BProject currProject;\n-\t\n-\tprivate static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n-\t * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n-\t * @param project The BProject to get the frame for\n-\t * @param createIfNeeded If there's not already a frame, should one be created?\n-\t * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n-\t */\n-\tpublic static ResultsFrame getInstance(BProject project, boolean createIfNeeded)\n-\t{\n-\t\tif (!instanceMap.containsKey(project))\n-\t\t{\n-\t\t\tif (createIfNeeded)\n-\t\t\t\tinstanceMap.put(project, new ResultsFrame());\n-\t\t\telse\n-\t\t\t\treturn null;\n-\t\t}\n-\t\treturn instanceMap.get(project);\n-\t}\n-\tprivate ResultsFrame() {}\n-\t\n-\t/**\n-\t * Update the view\n-\t */\n-\tpublic void update(final SortedBugCollection bugs, BProject project)\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tsetTitle(\"FindBugs results [\" + project.getName() + \"]\");\n-\t\t}\n-\t\tcatch (ProjectNotOpenException e)\n-\t\t{\n-\t\t\tsetTitle(\"FindBugs results\");\n-\t\t}\n-\t\ttry\n-\t\t{\n-\t\t\tsetIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n-\t\t}\n-\t\tcatch (IOException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t\t\n-\t\tcurrProject = project;\n-\t\tfinal ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n-\t\t\t\t.getCollection());\n-\t\t\n-\t\tfinal JTable table = new JTable(new MyTableModel(bugList));\n-\t\t\n-\t\tfor (int i = 0; i < columnNames.length; i++)\n-\t\t\ttable.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n-\t\t\n-\t\ttable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n-\t\t\n-\t\ttable.addMouseListener(new MouseAdapter()\n-\t\t\t\t{\n-\t\t\t@Override\n-\t\t\tpublic void mouseClicked(MouseEvent evt)\n-\t\t\t{\n-\t\t\t\tif (evt.getClickCount() == 2)\n-\t\t\t\t\tshowEditorAndHighlight(bugList.get(table.getSelectedRow()));\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tdescription.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n-\t\t\t\t\tSwingUtilities.invokeLater(new Runnable()\n-\t\t\t\t\t{\n-\t\t\t\t\t\tpublic void run()\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tbottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n-\t\t\t\t}\n-\t\t\t} \n-\t\t});\n-\n-\t\tJScrollPane topScroll = new JScrollPane(table);\n-\t\ttopScroll.setPreferredSize(new Dimension(675, 200));\n-\n-\t\tdescription = new JEditorPane();\n-\t\tdescription.setContentType(\"text/html\");\n-\t\tdescription.setEditable(false);\n-\t\t\n-\t\tboolean allCompiled = true;\n-\t\tfor (BugInstance bug : bugs.getCollection())\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tif (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled())\n-\t\t\t\t{\n-\t\t\t\t\tallCompiled = false;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch (ExtensionException e)\n-\t\t\t{\n-\t\t\t\tLog.recordBug(e);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t}\n-\t\n-\t\t\ttry {\n-\t\t\t\tdescription.setPage(ResultsFrame.class.getResource(\"about.html\"));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tdescription.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n-\t\t\t\t\t\"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n-\t\t\t\t\t\"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n-\t\t\t\t\t\"source code.</p>\"\n-\t\t\t\t\t+ \"<p>Bug: \" + e.toString()));\n-\t\t\t}\n-\n-\t\t\n-\t\tbottomScroll = new JScrollPane(description);\n-\t\tbottomScroll.setPreferredSize(new Dimension(675, 200));\n-\n-\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n-\t\t\t\ttopScroll, bottomScroll);\n-\t\tsetContentPane(splitPane);\n-\n-\t\tpack();\n-\t\tsetDefaultCloseOperation(HIDE_ON_CLOSE);\n-\t\tsetVisible(true);\n-\t}\n-\n-\t/*\n-\t * Finds the editor that corresponds with the class the bug in the\n-\t * BugInstance is in. Opens the editor and then highlights the bug and\n-\t * places the cursor at the beginning if class is compiled. If the class\n-\t * is not compiled than just opens the editor and moves the caret to the\n-\t * last known startline of that bug.\n-\t */\n-\tprivate void showEditorAndHighlight(BugInstance instance)\n-\t{\n-\t\tSourceLineAnnotation srcLine = instance\n-\t\t\t\t.getPrimarySourceLineAnnotation();\n-\t\ttry\n-\t\t{\n-\t\t\tBClass srcClass = currProject.getPackage(srcLine.getPackageName())\n-\t\t\t.getBClass(getClassName(srcLine));\n-\t\t\tEditor srcEditor = srcClass.getEditor();\n-\t\t\tsrcEditor.setVisible(true);\n-\n-\t\t\t// srcStartLine in case returned -1\n-\t\t\tint srcStartLine = srcLine.getStartLine();\n-\n-\t\t\tsrcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n-\t\t\t\n-\t\t\tif (srcStartLine > 0 && srcClass.isCompiled())\n-\t\t\t{\t\t\t\t\n-\t\t\t\tsrcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n-\t\t\t\t\t\tnew TextLocation(srcLine.getEndLine(), 0));\n-\t\t\t}\t\n-\t\t}\n-\t\tcatch (ProjectNotOpenException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t\tcatch (PackageNotFoundException e)\n-\t\t{\n-\t\t\tLog.recordBug(e);\n-\t\t}\n-\t}\n-\n-\t/*\n-\t * Gets the source file and gets the name of the class from that.\n-\t */\n-\tprivate String getClassName(SourceLineAnnotation srcLine)\n-\t{\n-\t\tString str = srcLine.getSourceFile();\n-\t\treturn str.substring(0, str.indexOf(\".\"));\n-\t}\n-\n-\tprivate class MyTableModel extends AbstractTableModel\n-\t{\n-\t\tprivate ArrayList<BugInstance> bugList;\n-\n-\t\tpublic MyTableModel(ArrayList<BugInstance> bugList)\n-\t\t{\n-\t\t\tthis.bugList = bugList;\n-\t\t}\n-\n-\t\tpublic int getRowCount()\n-\t\t{\n-\t\t\treturn bugList.size();\n-\t\t}\n-\n-\t\tpublic int getColumnCount()\n-\t\t{\n-\t\t\treturn 3;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getColumnName(int column)\n-\t\t{\n-\t\t\treturn columnNames[column];\n-\t\t}\n-\n-\t\tpublic Object getValueAt(int row, int column)\n-\t\t{\n-\t\t\tSourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n-\t\t\t\n-\t\t\tswitch (column)\n-\t\t\t{\n-\t\t\tcase 0:\n-\t\t\t\tboolean notCompiled = false;\n-\t\t\t\t\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tBClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n-\t\t\t\t\tnotCompiled = !srcClass.isCompiled();\n-\t\t\t\t}\n-\t\t\t\tcatch (ExtensionException e)\n-\t\t\t\t{\n-\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\treturn (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n-\t\t\tcase 1:\n-\t\t\t\tint line = annotation.getStartLine();\n-\t\t\t\treturn (line != -1 ? String.valueOf(line) : \"\");\n-\t\t\tcase 2:\n-\t\t\t\treturn bugList.get(row).getMessageWithoutPrefix();\n-\t\t\tdefault:\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"Column \" + column\n-\t\t\t\t\t\t+ \" must be < 3\");\n-\t\t\t}\n-\t\t}\n-\n-\t}\n-}\n+public class ResultsFrame extends JFrame {\n+    private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n+\n+    private static final int[] columnWidths = { 150, 50, 475 };\n+\n+    private JEditorPane description;\n+\n+    private JScrollPane bottomScroll;\n+\n+    private BProject currProject;\n+\n+    private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n+    /**\n+     * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n+     * @param project The BProject to get the frame for\n+     * @param createIfNeeded If there's not already a frame, should one be created?\n+     * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n+     */\n+\n+    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded) {\n+        if (!instanceMap.containsKey(project)) {\n+            if (createIfNeeded)\n+                instanceMap.put(project, new ResultsFrame());\n+            else\n+                return null;\n+        }\n+        return instanceMap.get(project);\n+    }\n+\n+    private ResultsFrame() {}\n+    \n+    /**\n+     * Update the view\n+     */\n+\n+    public void update(final SortedBugCollection bugs, BProject project) {\n+        try {\n+            setTitle(\"FindBugs results [\" + project.getName() + \"]\");\n+        } catch (ProjectNotOpenException e) {\n+            setTitle(\"FindBugs results\");\n+        }\n+        try {\n+            setIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n+        } catch (IOException e) {\n+            Log.recordBug(e);\n+        }\n+        currProject = project;\n+\n+        final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs.getCollection());\n+        final JTable table = new JTable(new MyTableModel(bugList));\n+        for (int i = 0; i < columnNames.length; i++)\n+            table.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+        table.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent evt) {\n+                if (evt.getClickCount() == 2)\n+                    showEditorAndHighlight(bugList.get(table.getSelectedRow()));\n+                else {\n+                    description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n+                    SwingUtilities.invokeLater(new Runnable() {\n+                        public void run() {\n+                            bottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n+                        }\n+                    });\n+                }\n+            }\n+        });\n+        JScrollPane topScroll = new JScrollPane(table);\n+        topScroll.setPreferredSize(new Dimension(675, 200));\n+        description = new JEditorPane();\n+        description.setContentType(\"text/html\");\n+        description.setEditable(false);\n+        boolean allCompiled = true;\n+        for (BugInstance bug : bugs.getCollection()) {\n+            try {\n+                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled()) {\n+                    allCompiled = false;\n+                    break;\n+                }\n+            } catch (ExtensionException e) {\n+                Log.recordBug(e);\n+                continue;\n+            }\n+        }\n+        try {\n+            description.setPage(ResultsFrame.class.getResource(\"about.html\"));\n+        } catch (IOException e) {\n+            description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" + \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" + \"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" + \"source code.</p>\" + \"<p>Bug: \" + e.toString()));\n+        }\n+        bottomScroll = new JScrollPane(description);\n+        bottomScroll.setPreferredSize(new Dimension(675, 200));\n+        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, topScroll, bottomScroll);\n+        setContentPane(splitPane);\n+        pack();\n+        setDefaultCloseOperation(HIDE_ON_CLOSE);\n+        setVisible(true);\n+    }\n+\n+    /*\n+     * Finds the editor that corresponds with the class the bug in the\n+     * BugInstance is in. Opens the editor and then highlights the bug and\n+     * places the cursor at the beginning if class is compiled. If the class\n+     * is not compiled than just opens the editor and moves the caret to the\n+     * last known startline of that bug.\n+     */\n+\n+\n+    private void showEditorAndHighlight(BugInstance instance) {\n+        SourceLineAnnotation srcLine = instance.getPrimarySourceLineAnnotation();\n+        try {\n+            BClass srcClass = currProject.getPackage(srcLine.getPackageName()).getBClass(getClassName(srcLine));\n+            Editor srcEditor = srcClass.getEditor();\n+            srcEditor.setVisible(true);\n+\n+            // srcStartLine in case returned -1\n+            int srcStartLine = srcLine.getStartLine();\n+            srcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n+            if (srcStartLine > 0 && srcClass.isCompiled()) {\n+                srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0), new TextLocation(srcLine.getEndLine(), 0));\n+            }\n+        } catch (ProjectNotOpenException e) {\n+            Log.recordBug(e);\n+        } catch (PackageNotFoundException e) {\n+            Log.recordBug(e);\n+        }\n+    }\n+\n+    /*\n+     * Gets the source file and gets the name of the class from that.\n+     */\n+\n+\n+    private String getClassName(SourceLineAnnotation srcLine) {\n+        String str = srcLine.getSourceFile();\n+        return str.substring(0, str.indexOf(\".\"));\n+    }\n+\n+\n+    private class MyTableModel extends AbstractTableModel {\n+        private ArrayList<BugInstance> bugList;\n+\n+\n+        public MyTableModel(ArrayList<BugInstance> bugList) {\n+            this.bugList = bugList;\n+        }\n+\n+\n+        public int getRowCount() {\n+            return bugList.size();\n+        }\n+\n+        public int getColumnCount() {\n+            return 3;\n+        }\n+\n+        @Override\n+        public String getColumnName(int column) {\n+            return columnNames[column];\n+        }\n+\n+        public Object getValueAt(int row, int column) {\n+            SourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n+            switch (column) {\n+            case 0:\n+                boolean notCompiled = false;\n+                try {\n+                    BClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n+                    notCompiled = !srcClass.isCompiled();\n+                } catch (ExtensionException e) {\n+                    Log.recordBug(e);\n+                }\n+                return (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n+            case 1:\n+                int line = annotation.getStartLine();\n+                return (line != -1 ? String.valueOf(line) : \"\");\n+            case 2:\n+                return bugList.get(row).getMessageWithoutPrefix();\n+            default:\n+                throw new ArrayIndexOutOfBoundsException(\"Column \" + column + \" must be < 3\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 241
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/17/ResultsFrame.java\nindex 16ed40931ff..7d6278aa65f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/17/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/17/ResultsFrame.java\n@@ -32,7 +32,7 @@ import edu.umd.cs.findbugs.SourceLineAnnotation;\n @SuppressWarnings(\"serial\")\n public class ResultsFrame extends JFrame\n {\n-\tprivate static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n+private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n \tprivate static final int[] columnWidths = { 150, 50, 475 };\n \n \tprivate JEditorPane description;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}