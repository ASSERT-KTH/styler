{
    "project_name": "DaGeRe-peass",
    "error_id": "40",
    "information": {
        "errors": [
            {
                "line": "142",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 203).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n\n      final CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n      node.setOtherVersionNode(node);\n      final Set<CallTreeNode> nodes = new HashSet<>();\n      nodes.add(node);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/40/CauseTester.java\nindex e4f93cf9d47..23fd798e1aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/40/CauseTester.java\n@@ -138,9 +138,9 @@ public class CauseTester extends AdaptiveTester {\n       final MeasurementConfiguration config = new MeasurementConfiguration(15, 15, 0.01, 0.05, version, version + \"~1\");\n       final CauseSearcherConfig causeConfig = new CauseSearcherConfig(test, false, true, 5);\n       final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n-\n-      final CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n-      node.setOtherVersionNode(node);\n+    final\n+      CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n+       node.setOtherVersionNode(node);\n       final Set<CallTreeNode> nodes = new HashSet<>();\n       nodes.add(node);\n       manager.setIncludedMethods(nodes);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/40/CauseTester.java\nindex e4f93cf9d47..141350c3511 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/40/CauseTester.java\n@@ -26,127 +26,127 @@ import kieker.analysis.exception.AnalysisConfigurationException;\n \n /**\n  * Measures method calls adaptively instrumented by Kieker\n- * \n- * @author reichelt\n  *\n+ * @author reichelt\n  */\n public class CauseTester extends AdaptiveTester {\n \n-   private static final Logger LOG = LogManager.getLogger(AdaptiveTester.class);\n-\n-   private Set<CallTreeNode> includedNodes;\n-   private final TestCase testcase;\n-   private final CauseSearcherConfig causeConfig;\n-   private final CauseSearchFolders folders;\n-\n-   public CauseTester(final CauseSearchFolders project, final JUnitTestTransformer testgenerator, final MeasurementConfiguration configuration, final CauseSearcherConfig causeConfig)\n-         throws IOException {\n-      super(project, testgenerator, configuration);\n-      this.testcase = causeConfig.getTestCase();\n-      this.causeConfig = causeConfig;\n-      this.folders = project;\n-      testgenerator.setUseKieker(true);\n-      testgenerator.setAdaptiveExecution(true);\n-      testgenerator.setAggregatedWriter(causeConfig.isUseAggregation());\n-   }\n-\n-   @Override\n-   public void evaluate(final TestCase testcase) throws IOException, InterruptedException, JAXBException {\n-      includedNodes.forEach(node -> node.setWarmup(testTransformer.getIterations() / 2));\n-\n-      LOG.debug(\"Adaptive execution: \" + includedNodes);\n-\n-      super.evaluate(testcase);\n-   }\n-\n-   @Override\n-   protected void runOnce(final TestCase testcase, final String version, final int vmid, final File logFolder) throws IOException, InterruptedException, JAXBException {\n-      final Set<String> includedPattern = new HashSet<>();\n-      if (versionOld.equals(version)) {\n-         includedNodes.forEach(node -> includedPattern.add(node.getKiekerPattern()));\n-      } else {\n-         includedNodes.forEach(node -> includedPattern.add(node.getOtherVersionNode().getKiekerPattern()));\n-      }\n-      testExecutor.setIncludedMethods(includedPattern);\n-      currentOrganizer = new ResultOrganizer(folders, currentVersion, currentChunkStart, testTransformer.isUseKieker(), causeConfig.isSaveAll());\n-      super.runOnce(testcase, version, vmid, logFolder);\n-   }\n-\n-   @Override\n-   protected boolean checkIsDecidable(final TestCase testcase, final int vmid) throws JAXBException {\n-      try {\n-         getDurationsVersion(version);\n-         getDurationsVersion(versionOld);\n-         boolean allDecidable = super.checkIsDecidable(version, versionOld, testcase, vmid);\n-         for (final CallTreeNode includedNode : includedNodes) {\n-            final SummaryStatistics statisticsOld = includedNode.getStatistics(versionOld);\n-            final SummaryStatistics statistics = includedNode.getStatistics(version);\n-            final EarlyBreakDecider decider = new EarlyBreakDecider(testTransformer, statisticsOld, statistics);\n-            final boolean nodeDecidable = decider.isBreakPossible(vmid);\n-            LOG.debug(\"{} decideable: {}\", includedNode.getKiekerPattern(), allDecidable);\n-            allDecidable &= nodeDecidable;\n-         }\n-         LOG.debug(\"Level decideable: {}\", allDecidable);\n-         return allDecidable;\n-      } catch (ViewNotFoundException | AnalysisConfigurationException e) {\n-         throw new RuntimeException(e);\n-      }\n-   }\n-\n-   @Override\n-   protected void handleKiekerResults(final String version, final File versionResultFolder) {\n-      final KiekerResultReader kiekerResultReader = new KiekerResultReader(causeConfig.isUseAggregation(), includedNodes, version, versionResultFolder, testcase, version.equals(this.version));\n-      kiekerResultReader.readResults();\n-   }\n-\n-   public void setIncludedMethods(final Set<CallTreeNode> children) {\n-      includedNodes = children;\n-   }\n-\n-   public void getDurations(final int adaptiveId)\n-         throws FileNotFoundException, IOException, XmlPullParserException, AnalysisConfigurationException, ViewNotFoundException {\n+  private static final Logger LOG = LogManager.getLogger(AdaptiveTester.class);\n+\n+  private Set<CallTreeNode> includedNodes;\n+  private final TestCase testcase;\n+  private final CauseSearcherConfig causeConfig;\n+  private final CauseSearchFolders folders;\n+\n+  public CauseTester(final CauseSearchFolders project, final JUnitTestTransformer testgenerator, final MeasurementConfiguration configuration, final CauseSearcherConfig causeConfig)\n+      throws IOException {\n+    super(project, testgenerator, configuration);\n+    this.testcase = causeConfig.getTestCase();\n+    this.causeConfig = causeConfig;\n+    this.folders = project;\n+    testgenerator.setUseKieker(true);\n+    testgenerator.setAdaptiveExecution(true);\n+    testgenerator.setAggregatedWriter(causeConfig.isUseAggregation());\n+  }\n+\n+  @Override\n+  public void evaluate(final TestCase testcase) throws IOException, InterruptedException, JAXBException {\n+    includedNodes.forEach(node -> node.setWarmup(testTransformer.getIterations() / 2));\n+\n+    LOG.debug(\"Adaptive execution: \" + includedNodes);\n+\n+    super.evaluate(testcase);\n+  }\n+\n+  @Override\n+  protected void runOnce(final TestCase testcase, final String version, final int vmid, final File logFolder) throws IOException, InterruptedException, JAXBException {\n+    final Set<String> includedPattern = new HashSet<>();\n+    if (versionOld.equals(version)) {\n+      includedNodes.forEach(node -> includedPattern.add(node.getKiekerPattern()));\n+    } else {\n+      includedNodes.forEach(node -> includedPattern.add(node.getOtherVersionNode().getKiekerPattern()));\n+    }\n+    testExecutor.setIncludedMethods(includedPattern);\n+    currentOrganizer = new ResultOrganizer(folders, currentVersion, currentChunkStart, testTransformer.isUseKieker(), causeConfig.isSaveAll());\n+    super.runOnce(testcase, version, vmid, logFolder);\n+  }\n+\n+  @Override\n+  protected boolean checkIsDecidable(final TestCase testcase, final int vmid) throws JAXBException {\n+    try {\n       getDurationsVersion(version);\n       getDurationsVersion(versionOld);\n-   }\n-\n-   public void cleanup(final int adaptiveId) {\n-      organizeMeasurements(adaptiveId, version, version);\n-      organizeMeasurements(adaptiveId, version, versionOld);\n-   }\n-\n-   private void organizeMeasurements(final int adaptiveId, final String mainVersion, final String version) {\n-      final File testcaseFolder = folders.getFullResultFolder(testcase, mainVersion, version);\n-      final File versionFolder = new File(folders.getArchiveResultFolder(mainVersion, testcase), version);\n-      if (!versionFolder.exists()) {\n-         versionFolder.mkdir();\n-      }\n-      final File adaptiveRunFolder = new File(versionFolder, \"\" + adaptiveId);\n-      if (!testcaseFolder.renameTo(adaptiveRunFolder)) {\n-         LOG.error(\"Could not rename {}\", testcaseFolder);\n+      boolean allDecidable = super.checkIsDecidable(version, versionOld, testcase, vmid);\n+      for (final CallTreeNode includedNode : includedNodes) {\n+        final SummaryStatistics statisticsOld = includedNode.getStatistics(versionOld);\n+        final SummaryStatistics statistics = includedNode.getStatistics(version);\n+        final EarlyBreakDecider decider = new EarlyBreakDecider(testTransformer, statisticsOld, statistics);\n+        final boolean nodeDecidable = decider.isBreakPossible(vmid);\n+        LOG.debug(\"{} decideable: {}\", includedNode.getKiekerPattern(), allDecidable);\n+        allDecidable &= nodeDecidable;\n       }\n-   }\n-\n-   private void getDurationsVersion(final String version) throws ViewNotFoundException, AnalysisConfigurationException {\n-      includedNodes.forEach(node -> node.createStatistics(version));\n-   }\n-\n-   public static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException, JAXBException {\n-      final File projectFolder = new File(\"../../projekte/commons-fileupload\");\n-      final String version = \"4ed6e923cb2033272fcb993978d69e325990a5aa\";\n-      final TestCase test = new TestCase(\"org.apache.commons.fileupload.ServletFileUploadTest\", \"testFoldedHeaders\");\n-\n-      final MeasurementConfiguration config = new MeasurementConfiguration(15, 15, 0.01, 0.05, version, version + \"~1\");\n-      final CauseSearcherConfig causeConfig = new CauseSearcherConfig(test, false, true, 5);\n-      final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n-\n-      final CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n-      node.setOtherVersionNode(node);\n-      final Set<CallTreeNode> nodes = new HashSet<>();\n-      nodes.add(node);\n-      manager.setIncludedMethods(nodes);\n-      manager.runOnce(test, version, 0, new File(\"log\"));\n+      LOG.debug(\"Level decideable: {}\", allDecidable);\n+      return allDecidable;\n+    } catch (ViewNotFoundException | AnalysisConfigurationException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Override\n+  protected void handleKiekerResults(final String version, final File versionResultFolder) {\n+    final KiekerResultReader kiekerResultReader = new KiekerResultReader(causeConfig.isUseAggregation(), includedNodes, version, versionResultFolder, testcase, version.equals(this.version));\n+    kiekerResultReader.readResults();\n+  }\n+\n+  public void setIncludedMethods(final Set<CallTreeNode> children) {\n+    includedNodes = children;\n+  }\n+\n+  public void getDurations(final int adaptiveId)\n+      throws FileNotFoundException, IOException, XmlPullParserException, AnalysisConfigurationException, ViewNotFoundException {\n+    getDurationsVersion(version);\n+    getDurationsVersion(versionOld);\n+  }\n+\n+  public void cleanup(final int adaptiveId) {\n+    organizeMeasurements(adaptiveId, version, version);\n+    organizeMeasurements(adaptiveId, version, versionOld);\n+  }\n+\n+  private void organizeMeasurements(final int adaptiveId, final String mainVersion, final String version) {\n+    final File testcaseFolder = folders.getFullResultFolder(testcase, mainVersion, version);\n+    final File versionFolder = new File(folders.getArchiveResultFolder(mainVersion, testcase), version);\n+    if (!versionFolder.exists()) {\n+      versionFolder.mkdir();\n+    }\n+    final File adaptiveRunFolder = new File(versionFolder, \"\" + adaptiveId);\n+    if (!testcaseFolder.renameTo(adaptiveRunFolder)) {\n+      LOG.error(\"Could not rename {}\", testcaseFolder);\n+    }\n+  }\n+\n+  private void getDurationsVersion(final String version) throws ViewNotFoundException, AnalysisConfigurationException {\n+    includedNodes.forEach(node -> node.createStatistics(version));\n+  }\n+\n+  public static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException, JAXBException {\n+    final File projectFolder = new File(\"../../projekte/commons-fileupload\");\n+    final String version = \"4ed6e923cb2033272fcb993978d69e325990a5aa\";\n+    final TestCase test = new TestCase(\"org.apache.commons.fileupload.ServletFileUploadTest\", \"testFoldedHeaders\");\n+\n+    final MeasurementConfiguration config = new MeasurementConfiguration(15, 15, 0.01, 0.05, version, version + \"~1\");\n+    final CauseSearcherConfig causeConfig = new CauseSearcherConfig(test, false, true, 5);\n+    final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n+\n+    final CallTreeNode node =\n+        new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n+    node.setOtherVersionNode(node);\n+    final Set<CallTreeNode> nodes = new HashSet<>();\n+    nodes.add(node);\n+    manager.setIncludedMethods(nodes);\n+    manager.runOnce(test, version, 0, new File(\"log\"));\n //      manager.evaluate(test);\n-      \n-      \n-   }\n+\n+\n+  }\n }\n",
            "diff_size": 155
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/40/CauseTester.java\nindex e4f93cf9d47..a61fa77267a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/40/CauseTester.java\n@@ -5,14 +5,11 @@ import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n-\n import javax.xml.bind.JAXBException;\n-\n import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import de.peass.dependency.CauseSearchFolders;\n import de.peass.dependency.analysis.data.TestCase;\n import de.peass.dependencyprocessors.AdaptiveTester;\n@@ -30,123 +27,117 @@ import kieker.analysis.exception.AnalysisConfigurationException;\n  * @author reichelt\n  *\n  */\n-public class CauseTester extends AdaptiveTester {\n-\n-   private static final Logger LOG = LogManager.getLogger(AdaptiveTester.class);\n-\n-   private Set<CallTreeNode> includedNodes;\n-   private final TestCase testcase;\n-   private final CauseSearcherConfig causeConfig;\n-   private final CauseSearchFolders folders;\n-\n-   public CauseTester(final CauseSearchFolders project, final JUnitTestTransformer testgenerator, final MeasurementConfiguration configuration, final CauseSearcherConfig causeConfig)\n-         throws IOException {\n-      super(project, testgenerator, configuration);\n-      this.testcase = causeConfig.getTestCase();\n-      this.causeConfig = causeConfig;\n-      this.folders = project;\n-      testgenerator.setUseKieker(true);\n-      testgenerator.setAdaptiveExecution(true);\n-      testgenerator.setAggregatedWriter(causeConfig.isUseAggregation());\n-   }\n-\n-   @Override\n-   public void evaluate(final TestCase testcase) throws IOException, InterruptedException, JAXBException {\n-      includedNodes.forEach(node -> node.setWarmup(testTransformer.getIterations() / 2));\n-\n-      LOG.debug(\"Adaptive execution: \" + includedNodes);\n-\n-      super.evaluate(testcase);\n-   }\n-\n-   @Override\n-   protected void runOnce(final TestCase testcase, final String version, final int vmid, final File logFolder) throws IOException, InterruptedException, JAXBException {\n-      final Set<String> includedPattern = new HashSet<>();\n-      if (versionOld.equals(version)) {\n-         includedNodes.forEach(node -> includedPattern.add(node.getKiekerPattern()));\n-      } else {\n-         includedNodes.forEach(node -> includedPattern.add(node.getOtherVersionNode().getKiekerPattern()));\n-      }\n-      testExecutor.setIncludedMethods(includedPattern);\n-      currentOrganizer = new ResultOrganizer(folders, currentVersion, currentChunkStart, testTransformer.isUseKieker(), causeConfig.isSaveAll());\n-      super.runOnce(testcase, version, vmid, logFolder);\n-   }\n-\n-   @Override\n-   protected boolean checkIsDecidable(final TestCase testcase, final int vmid) throws JAXBException {\n-      try {\n-         getDurationsVersion(version);\n-         getDurationsVersion(versionOld);\n-         boolean allDecidable = super.checkIsDecidable(version, versionOld, testcase, vmid);\n-         for (final CallTreeNode includedNode : includedNodes) {\n-            final SummaryStatistics statisticsOld = includedNode.getStatistics(versionOld);\n-            final SummaryStatistics statistics = includedNode.getStatistics(version);\n-            final EarlyBreakDecider decider = new EarlyBreakDecider(testTransformer, statisticsOld, statistics);\n-            final boolean nodeDecidable = decider.isBreakPossible(vmid);\n-            LOG.debug(\"{} decideable: {}\", includedNode.getKiekerPattern(), allDecidable);\n-            allDecidable &= nodeDecidable;\n-         }\n-         LOG.debug(\"Level decideable: {}\", allDecidable);\n-         return allDecidable;\n-      } catch (ViewNotFoundException | AnalysisConfigurationException e) {\n-         throw new RuntimeException(e);\n-      }\n-   }\n-\n-   @Override\n-   protected void handleKiekerResults(final String version, final File versionResultFolder) {\n-      final KiekerResultReader kiekerResultReader = new KiekerResultReader(causeConfig.isUseAggregation(), includedNodes, version, versionResultFolder, testcase, version.equals(this.version));\n-      kiekerResultReader.readResults();\n-   }\n \n-   public void setIncludedMethods(final Set<CallTreeNode> children) {\n-      includedNodes = children;\n-   }\n \n-   public void getDurations(final int adaptiveId)\n-         throws FileNotFoundException, IOException, XmlPullParserException, AnalysisConfigurationException, ViewNotFoundException {\n-      getDurationsVersion(version);\n-      getDurationsVersion(versionOld);\n-   }\n-\n-   public void cleanup(final int adaptiveId) {\n-      organizeMeasurements(adaptiveId, version, version);\n-      organizeMeasurements(adaptiveId, version, versionOld);\n-   }\n-\n-   private void organizeMeasurements(final int adaptiveId, final String mainVersion, final String version) {\n-      final File testcaseFolder = folders.getFullResultFolder(testcase, mainVersion, version);\n-      final File versionFolder = new File(folders.getArchiveResultFolder(mainVersion, testcase), version);\n-      if (!versionFolder.exists()) {\n-         versionFolder.mkdir();\n-      }\n-      final File adaptiveRunFolder = new File(versionFolder, \"\" + adaptiveId);\n-      if (!testcaseFolder.renameTo(adaptiveRunFolder)) {\n-         LOG.error(\"Could not rename {}\", testcaseFolder);\n-      }\n-   }\n-\n-   private void getDurationsVersion(final String version) throws ViewNotFoundException, AnalysisConfigurationException {\n-      includedNodes.forEach(node -> node.createStatistics(version));\n+public class CauseTester extends AdaptiveTester {\n+ private static final Logger LOG = LogManager.getLogger(AdaptiveTester.class);\n+ private Set<CallTreeNode> includedNodes;\n+ private final TestCase testcase;\n+ private final CauseSearcherConfig causeConfig;\n+ private final CauseSearchFolders folders;\n+\n+ public CauseTester(final CauseSearchFolders project, final JUnitTestTransformer testgenerator, final MeasurementConfiguration configuration, final CauseSearcherConfig causeConfig) throws IOException {\n+  super(project, testgenerator, configuration);\n+  this.testcase = causeConfig.getTestCase();\n+  this.causeConfig = causeConfig;\n+  this.folders = project;\n+  testgenerator.setUseKieker(true);\n+  testgenerator.setAdaptiveExecution(true);\n+  testgenerator.setAggregatedWriter(causeConfig.isUseAggregation());\n+ }\n+\n+ @Override\n+ public void evaluate(final TestCase testcase) throws IOException, InterruptedException, JAXBException {\n+  includedNodes.forEach(node -> node.setWarmup(testTransformer.getIterations() / 2));\n+  LOG.debug(\"Adaptive execution: \" + includedNodes);\n+  super.evaluate(testcase);\n+ }\n+\n+ @Override\n+ protected void runOnce(final TestCase testcase, final String version, final int vmid, final File logFolder) throws IOException, InterruptedException, JAXBException {\n+  final Set<String> includedPattern = new HashSet<>();\n+  if (versionOld.equals(version)) {\n+   includedNodes.forEach(node -> includedPattern.add(node.getKiekerPattern()));\n+  } else {\n+   includedNodes.forEach(node -> includedPattern.add(node.getOtherVersionNode().getKiekerPattern()));\n+  }\n+  testExecutor.setIncludedMethods(includedPattern);\n+  currentOrganizer = new ResultOrganizer(folders, currentVersion, currentChunkStart, testTransformer.isUseKieker(), causeConfig.isSaveAll());\n+  super.runOnce(testcase, version, vmid, logFolder);\n+ }\n+\n+ @Override\n+ protected boolean checkIsDecidable(final TestCase testcase, final int vmid) throws JAXBException {\n+  try {\n+   getDurationsVersion(version);\n+   getDurationsVersion(versionOld);\n+   boolean allDecidable = super.checkIsDecidable(version, versionOld, testcase, vmid);\n+   for (final CallTreeNode includedNode : includedNodes) {\n+    final SummaryStatistics statisticsOld = includedNode.getStatistics(versionOld);\n+    final SummaryStatistics statistics = includedNode.getStatistics(version);\n+    final EarlyBreakDecider decider = new EarlyBreakDecider(testTransformer, statisticsOld, statistics);\n+    final boolean nodeDecidable = decider.isBreakPossible(vmid);\n+    LOG.debug(\"{} decideable: {}\", includedNode.getKiekerPattern(), allDecidable);\n+    allDecidable &= nodeDecidable;\n    }\n-\n-   public static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException, JAXBException {\n-      final File projectFolder = new File(\"../../projekte/commons-fileupload\");\n-      final String version = \"4ed6e923cb2033272fcb993978d69e325990a5aa\";\n-      final TestCase test = new TestCase(\"org.apache.commons.fileupload.ServletFileUploadTest\", \"testFoldedHeaders\");\n-\n-      final MeasurementConfiguration config = new MeasurementConfiguration(15, 15, 0.01, 0.05, version, version + \"~1\");\n-      final CauseSearcherConfig causeConfig = new CauseSearcherConfig(test, false, true, 5);\n-      final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n-\n-      final CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n-      node.setOtherVersionNode(node);\n-      final Set<CallTreeNode> nodes = new HashSet<>();\n-      nodes.add(node);\n-      manager.setIncludedMethods(nodes);\n-      manager.runOnce(test, version, 0, new File(\"log\"));\n+   LOG.debug(\"Level decideable: {}\", allDecidable);\n+   return allDecidable;\n+  } catch (ViewNotFoundException | AnalysisConfigurationException e) {\n+   throw new RuntimeException(e);\n+  }\n+ }\n+\n+ @Override\n+ protected void handleKiekerResults(final String version, final File versionResultFolder) {\n+  final KiekerResultReader kiekerResultReader = new KiekerResultReader(causeConfig.isUseAggregation(), includedNodes, version, versionResultFolder, testcase, version.equals(this.version));\n+  kiekerResultReader.readResults();\n+ }\n+\n+ public void setIncludedMethods(final Set<CallTreeNode> children) {\n+  includedNodes = children;\n+ }\n+\n+ public void getDurations(final int adaptiveId) throws FileNotFoundException, IOException, XmlPullParserException, AnalysisConfigurationException, ViewNotFoundException {\n+  getDurationsVersion(version);\n+  getDurationsVersion(versionOld);\n+ }\n+\n+ public void cleanup(final int adaptiveId) {\n+  organizeMeasurements(adaptiveId, version, version);\n+  organizeMeasurements(adaptiveId, version, versionOld);\n+ }\n+\n+ private void organizeMeasurements(final int adaptiveId, final String mainVersion, final String version) {\n+  final File testcaseFolder = folders.getFullResultFolder(testcase, mainVersion, version);\n+  final File versionFolder = new File(folders.getArchiveResultFolder(mainVersion, testcase), version);\n+  if (!versionFolder.exists()) {\n+   versionFolder.mkdir();\n+  }\n+\n+  final File adaptiveRunFolder = new File(versionFolder, \"\" + adaptiveId);\n+  if (!testcaseFolder.renameTo(adaptiveRunFolder)) {\n+   LOG.error(\"Could not rename {}\", testcaseFolder);\n+  }\n+ }\n+\n+ private void getDurationsVersion(final String version) throws ViewNotFoundException, AnalysisConfigurationException {\n+  includedNodes.forEach(node -> node.createStatistics(version));\n+ }\n+\n+ public static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException, JAXBException {\n+  final File projectFolder = new File(\"../../projekte/commons-fileupload\");\n+  final String version = \"4ed6e923cb2033272fcb993978d69e325990a5aa\";\n+  final TestCase test = new TestCase(\"org.apache.commons.fileupload.ServletFileUploadTest\", \"testFoldedHeaders\");\n+  final MeasurementConfiguration config = new MeasurementConfiguration(15, 15, 0.01, 0.05, version, version + \"~1\");\n+  final CauseSearcherConfig causeConfig = new CauseSearcherConfig(test, false, true, 5);\n+  final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n+  final CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n+  node.setOtherVersionNode(node);\n+\n+  final Set<CallTreeNode> nodes = new HashSet<>();\n+  nodes.add(node);\n+  manager.setIncludedMethods(nodes);\n+  manager.runOnce(test, version, 0, new File(\"log\"));\n //      manager.evaluate(test);\n-      \n-      \n-   }\n-}\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 186
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/40/CauseTester.java\nindex e4f93cf9d47..23fd798e1aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/40/CauseTester.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/40/CauseTester.java\n@@ -138,9 +138,9 @@ public class CauseTester extends AdaptiveTester {\n       final MeasurementConfiguration config = new MeasurementConfiguration(15, 15, 0.01, 0.05, version, version + \"~1\");\n       final CauseSearcherConfig causeConfig = new CauseSearcherConfig(test, false, true, 5);\n       final CauseTester manager = new CauseTester(new CauseSearchFolders(projectFolder), new JUnitTestTransformer(projectFolder), config, causeConfig);\n-\n-      final CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n-      node.setOtherVersionNode(node);\n+    final\n+      CallTreeNode node = new CallTreeNode(\"FileUploadTestCase#parseUpload\", \"protected java.util.List org.apache.commons.fileupload.FileUploadTestCase.parseUpload(byte[],java.lang.String)\", null);\n+       node.setOtherVersionNode(node);\n       final Set<CallTreeNode> nodes = new HashSet<>();\n       nodes.add(node);\n       manager.setIncludedMethods(nodes);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}