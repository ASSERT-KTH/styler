{
    "project_name": "Angel-ML-angel",
    "error_id": "250",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/250/Histogram.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/250/Histogram.java\nindex f96515ee549..eac4d5dbaea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/250/Histogram.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/250/Histogram.java\n@@ -71,7 +71,7 @@ public class Histogram implements Serializable {\n   }\n \n   public void accumulate(int index, double[] grad, int gradOffset,\n-      double[] hess, int hessOffset) {\n+                         double[] hess, int hessOffset) {\n     int gradBinOffset = index * numClass;\n     int hessBinOffset = index * ((numClass * (numClass + 1)) >> 1);\n     for (int i = 0; i < grad.length; i++) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/250/Histogram.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/250/Histogram.java\nindex f96515ee549..a42786294db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/250/Histogram.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/250/Histogram.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.spark.ml.tree.gbdt.histogram;\n \n import java.io.Serializable;\n@@ -70,9 +69,8 @@ public class Histogram implements Serializable {\n     }\n   }\n \n-  public void accumulate(int index, double[] grad, int gradOffset,\n-      double[] hess, int hessOffset) {\n-    int gradBinOffset = index * numClass;\n+  public void accumulate(int index, double[] grad, int gradOffset, double[] hess, int hessOffset) {\n+  int gradBinOffset = index * numClass;\n     int hessBinOffset = index * ((numClass * (numClass + 1)) >> 1);\n     for (int i = 0; i < grad.length; i++) {\n       gradients[gradBinOffset + i] += grad[gradOffset + i];\n@@ -227,11 +225,9 @@ public class Histogram implements Serializable {\n     if (numClass == 2 || multiClassMultiTree) {\n       return new BinaryGradPair(gradients[index], hessians[index]);\n     } else {\n-      double[] grad = Arrays.copyOfRange(gradients,\n-          index * numClass, (index + 1) * numClass);\n+      double[] grad = Arrays.copyOfRange(gradients, index * numClass, (index + 1) * numClass);\n       int size = fullHessian ? ((numClass * (numClass + 1)) >> 1) : numClass;\n-      double[] hess = Arrays.copyOfRange(hessians,\n-          index * size, (index + 1) * size);\n+      double[] hess = Arrays.copyOfRange(hessians, index * size, (index + 1) * size);\n       return new MultiGradPair(grad, hess);\n     }\n   }\n@@ -345,4 +341,4 @@ public class Histogram implements Serializable {\n     Arrays.fill(hessians, 0.0);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/250/Histogram.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/250/Histogram.java\nindex f96515ee549..0def96eb051 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/250/Histogram.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/250/Histogram.java\n@@ -21,7 +21,6 @@ package com.tencent.angel.spark.ml.tree.gbdt.histogram;\n import java.io.Serializable;\n import java.util.Arrays;\n \n-\n public class Histogram implements Serializable {\n \n   private int numBin;\n@@ -36,7 +35,6 @@ public class Histogram implements Serializable {\n     this.numClass = numClass;\n     this.fullHessian = fullHessian;\n     this.multiClassMultiTree = multiClassMultiTree;\n-\n     if (numClass == 2 || multiClassMultiTree) {\n       this.gradients = new double[numBin];\n       this.hessians = new double[numBin];\n@@ -70,13 +68,13 @@ public class Histogram implements Serializable {\n     }\n   }\n \n-  public void accumulate(int index, double[] grad, int gradOffset,\n-      double[] hess, int hessOffset) {\n+  public void accumulate(int index, double[] grad, int gradOffset, double[] hess, int hessOffset) {\n     int gradBinOffset = index * numClass;\n     int hessBinOffset = index * ((numClass * (numClass + 1)) >> 1);\n     for (int i = 0; i < grad.length; i++) {\n       gradients[gradBinOffset + i] += grad[gradOffset + i];\n     }\n+\n     for (int i = 0; i < hess.length; i++) {\n       hessians[hessBinOffset + i] += hess[hessOffset + i];\n     }\n@@ -88,26 +86,27 @@ public class Histogram implements Serializable {\n       gradients[index] += binary.getGrad();\n       hessians[index] += binary.getHess();\n     } else if (!fullHessian) {\n-      MultiGradPair multi = (MultiGradPair) gradPair;\n-      double[] grad = multi.getGrad();\n-      double[] hess = multi.getHess();\n-      int offset = index * numClass;\n-      for (int i = 0; i < numClass; i++) {\n-        gradients[offset + i] += grad[i];\n-        hessians[offset + i] += hess[i];\n-      }\n+             MultiGradPair multi = (MultiGradPair) gradPair;\n+             double[] grad = multi.getGrad();\n+             double[] hess = multi.getHess();\n+             int offset = index * numClass;\n+             for (int i = 0; i < numClass; i++) {\n+               gradients[offset + i] += grad[i];\n+               hessians[offset + i] += hess[i];\n+             }\n     } else {\n-      MultiGradPair multi = (MultiGradPair) gradPair;\n-      double[] grad = multi.getGrad();\n-      double[] hess = multi.getHess();\n-      int gradOffset = index * numClass;\n-      int hessOffset = index * ((numClass * (numClass + 1)) >> 1);\n-      for (int i = 0; i < grad.length; i++) {\n-        gradients[gradOffset + i] += grad[i];\n-      }\n-      for (int i = 0; i < hess.length; i++) {\n-        hessians[hessOffset + i] += hess[i];\n-      }\n+             MultiGradPair multi = (MultiGradPair) gradPair;\n+             double[] grad = multi.getGrad();\n+             double[] hess = multi.getHess();\n+             int gradOffset = index * numClass;\n+             int hessOffset = index * ((numClass * (numClass + 1)) >> 1);\n+             for (int i = 0; i < grad.length; i++) {\n+               gradients[gradOffset + i] += grad[i];\n+             }\n+\n+             for (int i = 0; i < hess.length; i++) {\n+               hessians[hessOffset + i] += hess[i];\n+             }\n     }\n   }\n \n@@ -122,6 +121,7 @@ public class Histogram implements Serializable {\n       for (int i = 0; i < this.gradients.length; i++) {\n         res.gradients[i] = this.gradients[i] + other.gradients[i];\n       }\n+\n       for (int i = 0; i < this.hessians.length; i++) {\n         res.hessians[i] = this.hessians[i] + other.hessians[i];\n       }\n@@ -140,6 +140,7 @@ public class Histogram implements Serializable {\n       for (int i = 0; i < this.gradients.length; i++) {\n         res.gradients[i] = this.gradients[i] - other.gradients[i];\n       }\n+\n       for (int i = 0; i < this.hessians.length; i++) {\n         res.hessians[i] = this.hessians[i] - other.hessians[i];\n       }\n@@ -157,6 +158,7 @@ public class Histogram implements Serializable {\n       for (int i = 0; i < this.gradients.length; i++) {\n         this.gradients[i] += other.gradients[i];\n       }\n+\n       for (int i = 0; i < this.hessians.length; i++) {\n         this.hessians[i] += other.hessians[i];\n       }\n@@ -173,6 +175,7 @@ public class Histogram implements Serializable {\n       for (int i = 0; i < this.gradients.length; i++) {\n         this.gradients[i] -= other.gradients[i];\n       }\n+\n       for (int i = 0; i < this.hessians.length; i++) {\n         this.hessians[i] -= other.hessians[i];\n       }\n@@ -210,6 +213,7 @@ public class Histogram implements Serializable {\n         for (int j = 0; j < sumGrad.length; j++) {\n           sumGrad[j] += gradients[gradOffset + j];\n         }\n+\n         int hessOffset = i * sumHess.length;\n         for (int j = 0; j < sumHess.length; j++) {\n           sumHess[j] += hessians[hessOffset + j];\n@@ -227,11 +231,9 @@ public class Histogram implements Serializable {\n     if (numClass == 2 || multiClassMultiTree) {\n       return new BinaryGradPair(gradients[index], hessians[index]);\n     } else {\n-      double[] grad = Arrays.copyOfRange(gradients,\n-          index * numClass, (index + 1) * numClass);\n+      double[] grad = Arrays.copyOfRange(gradients, index * numClass, (index + 1) * numClass);\n       int size = fullHessian ? ((numClass * (numClass + 1)) >> 1) : numClass;\n-      double[] hess = Arrays.copyOfRange(hessians,\n-          index * size, (index + 1) * size);\n+      double[] hess = Arrays.copyOfRange(hessians, index * size, (index + 1) * size);\n       return new MultiGradPair(grad, hess);\n     }\n   }\n@@ -252,26 +254,27 @@ public class Histogram implements Serializable {\n     if (numClass == 2 || multiClassMultiTree) {\n       ((BinaryGradPair) gp).plusBy(gradients[index], hessians[index]);\n     } else if (!fullHessian) {\n-      MultiGradPair multi = (MultiGradPair) gp;\n-      double[] grad = multi.getGrad();\n-      double[] hess = multi.getHess();\n-      int offset = index * numClass;\n-      for (int i = 0; i < numClass; i++) {\n-        grad[i] += gradients[offset + i];\n-        hess[i] += hessians[offset + i];\n-      }\n+             MultiGradPair multi = (MultiGradPair) gp;\n+             double[] grad = multi.getGrad();\n+             double[] hess = multi.getHess();\n+             int offset = index * numClass;\n+             for (int i = 0; i < numClass; i++) {\n+               grad[i] += gradients[offset + i];\n+               hess[i] += hessians[offset + i];\n+             }\n     } else {\n-      MultiGradPair multi = (MultiGradPair) gp;\n-      double[] grad = multi.getGrad();\n-      double[] hess = multi.getHess();\n-      int gradOffset = index * grad.length;\n-      int hessOffset = index * hess.length;\n-      for (int i = 0; i < grad.length; i++) {\n-        grad[i] += gradients[gradOffset + i];\n-      }\n-      for (int i = 0; i < hess.length; i++) {\n-        hess[i] += hessians[hessOffset + i];\n-      }\n+             MultiGradPair multi = (MultiGradPair) gp;\n+             double[] grad = multi.getGrad();\n+             double[] hess = multi.getHess();\n+             int gradOffset = index * grad.length;\n+             int hessOffset = index * hess.length;\n+             for (int i = 0; i < grad.length; i++) {\n+               grad[i] += gradients[gradOffset + i];\n+             }\n+\n+             for (int i = 0; i < hess.length; i++) {\n+               hess[i] += hessians[hessOffset + i];\n+             }\n     }\n   }\n \n@@ -279,26 +282,27 @@ public class Histogram implements Serializable {\n     if (numClass == 2 || multiClassMultiTree) {\n       ((BinaryGradPair) gp).subtractBy(gradients[index], hessians[index]);\n     } else if (!fullHessian) {\n-      MultiGradPair multi = (MultiGradPair) gp;\n-      double[] grad = multi.getGrad();\n-      double[] hess = multi.getHess();\n-      int offset = index * numClass;\n-      for (int i = 0; i < numClass; i++) {\n-        grad[i] -= gradients[offset + i];\n-        hess[i] -= hessians[offset + i];\n-      }\n+             MultiGradPair multi = (MultiGradPair) gp;\n+             double[] grad = multi.getGrad();\n+             double[] hess = multi.getHess();\n+             int offset = index * numClass;\n+             for (int i = 0; i < numClass; i++) {\n+               grad[i] -= gradients[offset + i];\n+               hess[i] -= hessians[offset + i];\n+             }\n     } else {\n-      MultiGradPair multi = (MultiGradPair) gp;\n-      double[] grad = multi.getGrad();\n-      double[] hess = multi.getHess();\n-      int gradOffset = index * grad.length;\n-      int hessOffset = index * hess.length;\n-      for (int i = 0; i < grad.length; i++) {\n-        grad[i] -= gradients[gradOffset + i];\n-      }\n-      for (int i = 0; i < hess.length; i++) {\n-        hess[i] -= hessians[hessOffset + i];\n-      }\n+             MultiGradPair multi = (MultiGradPair) gp;\n+             double[] grad = multi.getGrad();\n+             double[] hess = multi.getHess();\n+             int gradOffset = index * grad.length;\n+             int hessOffset = index * hess.length;\n+             for (int i = 0; i < grad.length; i++) {\n+               grad[i] -= gradients[gradOffset + i];\n+             }\n+\n+             for (int i = 0; i < hess.length; i++) {\n+               hess[i] -= hessians[hessOffset + i];\n+             }\n     }\n   }\n \n@@ -307,36 +311,37 @@ public class Histogram implements Serializable {\n       ((BinaryGradPair) left).plusBy(gradients[index], hessians[index]);\n       ((BinaryGradPair) right).subtractBy(gradients[index], hessians[index]);\n     } else if (!fullHessian) {\n-      MultiGradPair leftMulti = (MultiGradPair) left;\n-      double[] leftGrad = leftMulti.getGrad();\n-      double[] leftHess = leftMulti.getHess();\n-      MultiGradPair rightMulti = (MultiGradPair) right;\n-      double[] rightGrad = rightMulti.getGrad();\n-      double[] rightHess = rightMulti.getHess();\n-      int offset = index * numClass;\n-      for (int i = 0; i < numClass; i++) {\n-        leftGrad[i] += gradients[offset + i];\n-        leftHess[i] += hessians[offset + i];\n-        rightGrad[i] -= gradients[offset + i];\n-        rightHess[i] -= hessians[offset + i];\n-      }\n+             MultiGradPair leftMulti = (MultiGradPair) left;\n+             double[] leftGrad = leftMulti.getGrad();\n+             double[] leftHess = leftMulti.getHess();\n+             MultiGradPair rightMulti = (MultiGradPair) right;\n+             double[] rightGrad = rightMulti.getGrad();\n+             double[] rightHess = rightMulti.getHess();\n+             int offset = index * numClass;\n+             for (int i = 0; i < numClass; i++) {\n+               leftGrad[i] += gradients[offset + i];\n+               leftHess[i] += hessians[offset + i];\n+               rightGrad[i] -= gradients[offset + i];\n+               rightHess[i] -= hessians[offset + i];\n+             }\n     } else {\n-      MultiGradPair leftMulti = (MultiGradPair) left;\n-      double[] leftGrad = leftMulti.getGrad();\n-      double[] leftHess = leftMulti.getHess();\n-      MultiGradPair rightMulti = (MultiGradPair) right;\n-      double[] rightGrad = rightMulti.getGrad();\n-      double[] rightHess = rightMulti.getHess();\n-      int gradOffset = index * leftGrad.length;\n-      int hessOffset = index * leftHess.length;\n-      for (int i = 0; i < leftGrad.length; i++) {\n-        leftGrad[i] += gradients[gradOffset + i];\n-        rightGrad[i] -= gradients[gradOffset + i];\n-      }\n-      for (int i = 0; i < leftHess.length; i++) {\n-        leftHess[i] += hessians[hessOffset + i];\n-        rightHess[i] -= hessians[hessOffset + i];\n-      }\n+             MultiGradPair leftMulti = (MultiGradPair) left;\n+             double[] leftGrad = leftMulti.getGrad();\n+             double[] leftHess = leftMulti.getHess();\n+             MultiGradPair rightMulti = (MultiGradPair) right;\n+             double[] rightGrad = rightMulti.getGrad();\n+             double[] rightHess = rightMulti.getHess();\n+             int gradOffset = index * leftGrad.length;\n+             int hessOffset = index * leftHess.length;\n+             for (int i = 0; i < leftGrad.length; i++) {\n+               leftGrad[i] += gradients[gradOffset + i];\n+               rightGrad[i] -= gradients[gradOffset + i];\n+             }\n+\n+             for (int i = 0; i < leftHess.length; i++) {\n+               leftHess[i] += hessians[hessOffset + i];\n+               rightHess[i] -= hessians[hessOffset + i];\n+             }\n     }\n   }\n \n@@ -345,4 +350,4 @@ public class Histogram implements Serializable {\n     Arrays.fill(hessians, 0.0);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 105
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}