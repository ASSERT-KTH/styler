{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2024",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2024/Label.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2024/Label.java\nindex 816ad80d366..bcb7a007c05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2024/Label.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2024/Label.java\n@@ -17,16 +17,17 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n /**\n  * A label is a grouping facility for {@link Node} where all nodes having a label\n  * are part of the same group. Labels on nodes are optional and any node can\n  * have an arbitrary number of labels attached to it.\n- *\n+ * <p>\n  * Objects of classes implementing this interface can be used as label\n  * representations in your code.\n- *\n+ * <p>\n  * It's very important to note that a label is uniquely identified\n  * by its name, not by any particular instance that implements this interface.\n  * This means that the proper way to check if two labels are equal\n@@ -39,17 +40,17 @@ package org.neo4j.graphdb;\n  * However, you usually want to check whether a specific node\n  * <i>instance</i> has a certain label. That is best achieved with the\n  * {@link Node#hasLabel(Label)} method.\n- *\n+ * <p>\n  * For labels that your application know up front you should specify using an enum,\n  * and since the name is accessed using the {@link #name()} method it fits nicely.\n  * <code>\n  * public enum MyLabels implements Label\n  * {\n- *     PERSON,\n- *     RESTAURANT;\n+ * PERSON,\n+ * RESTAURANT;\n  * }\n  * </code>\n- *\n+ * <p>\n  * For labels that your application don't know up front you can make use of\n  * {@link #label(String)}, or your own implementation of this interface,\n  * as it's just the name that matters.\n@@ -58,62 +59,62 @@ package org.neo4j.graphdb;\n  */\n public interface Label\n {\n-    /**\n-     * Returns the name of the label. The name uniquely identifies a\n-     * label, i.e. two different Label instances with different object identifiers\n-     * (and possibly even different classes) are semantically equivalent if they\n-     * have {@link String#equals(Object) equal} names.\n-     *\n-     * @return the name of the label\n-     */\n-    String name();\n+  /**\n+   * Returns the name of the label. The name uniquely identifies a\n+   * label, i.e. two different Label instances with different object identifiers\n+   * (and possibly even different classes) are semantically equivalent if they\n+   * have {@link String#equals(Object) equal} names.\n+   *\n+   * @return the name of the label\n+   */\n+  String name();\n \n-    /**\n-     * Instantiates a new {@linkplain Label} with the given name.\n-     *\n-     * @param name the name of the label\n-     * @return a {@link Label} instance for the given name\n-     * @throws IllegalArgumentException if name is {@code null}\n-     */\n-    static Label label( String name )\n+  /**\n+   * Instantiates a new {@linkplain Label} with the given name.\n+   *\n+   * @param name the name of the label\n+   * @return a {@link Label} instance for the given name\n+   * @throws IllegalArgumentException if name is {@code null}\n+   */\n+  static Label label(String name)\n+  {\n+    if (name == null)\n     {\n-        if ( name == null )\n+      throw new IllegalArgumentException(\"A label cannot have a null name\");\n+    }\n+    return new Label()\n+    {\n+      @Override\n+      public String name()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public boolean equals(Object that)\n+      {\n+        if (this == that)\n         {\n-            throw new IllegalArgumentException( \"A label cannot have a null name\" );\n+          return true;\n         }\n-        return new Label()\n+        if (that == null || that.getClass() != getClass())\n         {\n-            @Override\n-            public String name()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public boolean equals( Object that )\n-            {\n-                if ( this == that )\n-                {\n-                    return true;\n-                }\n-                if ( that == null || that.getClass() != getClass() )\n-                {\n-                    return false;\n-                }\n-                return name.equals( ((Label) that).name() );\n-            }\n+          return false;\n+        }\n+        return name.equals(((Label) that).name());\n+      }\n \n-            @Override\n-            public int hashCode()\n-            {\n-                return name.hashCode();\n-            }\n-        };\n-    }\n+      @Override\n+      public int hashCode()\n+      {\n+        return name.hashCode();\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2024/Label.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2024/Label.java\nindex 816ad80d366..b608d9be05a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2024/Label.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2024/Label.java\n@@ -102,11 +102,13 @@ public interface Label\n                 {\n                     return true;\n                 }\n-                if ( that == null || that.getClass() != getClass() )\n+\n+if ( that == null || that.getClass() != getClass() )\n                 {\n                     return false;\n                 }\n-                return name.equals( ((Label) that).name() );\n+\n+return name.equals( ((Label) that).name() );\n             }\n \n             @Override\n@@ -116,4 +118,4 @@ public interface Label\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}