{
    "project_name": "apache-shardingsphere",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "154",
                "column": "9",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "        \n        \n        /**\n         * Build configuration.\n         *\n         * @return plugin advice definition.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/13/PluginAdviceDefine.java\nindex cbb74e2e122..74be5675ba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/13/PluginAdviceDefine.java\n@@ -149,8 +149,7 @@ public final class PluginAdviceDefine {\n         public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new StaticMethodPointBuilder(this, matcher);\n         }\n-        \n-        \n+\n         /**\n          * Build configuration.\n          *\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "155",
                    "column": "9",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/13/PluginAdviceDefine.java\nindex cbb74e2e122..b1cd5077ce6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/13/PluginAdviceDefine.java\n@@ -40,15 +40,15 @@ import java.util.List;\n  * </code>\n  */\n public final class PluginAdviceDefine {\n-    \n+\n     private final String classNameOfTarget;\n-    \n+\n     private final List<ConstructorPoint> constructorPoints;\n-    \n+\n     private final List<InstanceMethodPoint> instanceMethodPoints;\n-    \n+\n     private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n-    \n+\n     private PluginAdviceDefine(final String classNameOfTarget,\n                                final List<ConstructorPoint> constructorPoints,\n                                final List<InstanceMethodPoint> instanceMethodPoints,\n@@ -58,15 +58,16 @@ public final class PluginAdviceDefine {\n         this.instanceMethodPoints = instanceMethodPoints;\n         this.classStaticMethodPoints = classStaticMethodPoints;\n     }\n-    \n+\n     /**\n      * Get class name of target.\n+     *\n      * @return class name.\n      */\n     public String getClassNameOfTarget() {\n         return classNameOfTarget;\n     }\n-    \n+\n     /**\n      * Intercept target class.\n      *\n@@ -76,7 +77,7 @@ public final class PluginAdviceDefine {\n     public static Builder intercept(final String classNameOfTarget) {\n         return new Builder(classNameOfTarget);\n     }\n-    \n+\n     /**\n      * To get static method point configurations.\n      *\n@@ -85,7 +86,7 @@ public final class PluginAdviceDefine {\n     public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n         return classStaticMethodPoints;\n     }\n-    \n+\n     /**\n      * To get constructor point configurations.\n      *\n@@ -94,7 +95,7 @@ public final class PluginAdviceDefine {\n     public List<ConstructorPoint> getConstructorPoints() {\n         return constructorPoints;\n     }\n-    \n+\n     /**\n      * To get instance point configurations.\n      *\n@@ -103,23 +104,23 @@ public final class PluginAdviceDefine {\n     public List<InstanceMethodPoint> getInstanceMethodPoints() {\n         return instanceMethodPoints;\n     }\n-    \n+\n     /**\n      * Plugin advice configuration builder.\n      */\n     public static final class Builder {\n         private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n-        \n+\n         private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n-        \n+\n         private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n-        \n+\n         private final String classNameOfTarget;\n-        \n+\n         private Builder(final String classNameOfTarget) {\n             this.classNameOfTarget = classNameOfTarget;\n         }\n-        \n+\n         /**\n          * Configure the intercepting point on constructor.\n          *\n@@ -129,7 +130,7 @@ public final class PluginAdviceDefine {\n         public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n             return new ConstructorPointBuilder(this, matcher);\n         }\n-        \n+\n         /**\n          * Configure the intercepting point around instance method.\n          *\n@@ -139,7 +140,7 @@ public final class PluginAdviceDefine {\n         public InstanceMethodPointBuilder aroundInstanceMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new InstanceMethodPointBuilder(this, matcher);\n         }\n-        \n+\n         /**\n          * Configure the intercepting point around instance method.\n          *\n@@ -149,8 +150,8 @@ public final class PluginAdviceDefine {\n         public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new StaticMethodPointBuilder(this, matcher);\n         }\n-        \n-        \n+\n+\n         /**\n          * Build configuration.\n          *\n@@ -159,24 +160,24 @@ public final class PluginAdviceDefine {\n         public PluginAdviceDefine install() {\n             return new PluginAdviceDefine(classNameOfTarget, constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n         }\n-        \n+\n         /**\n          * Instance method intercepting point configuration builder.\n          */\n         public static final class InstanceMethodPointBuilder {\n             private final Builder builder;\n-            \n+\n             private String classNameOfAdvice;\n-            \n+\n             private boolean overrideArgs;\n-            \n+\n             private ElementMatcher<? super MethodDescription> matcher;\n-            \n+\n             private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n                 this.builder = builder;\n                 this.matcher = matcher;\n             }\n-            \n+\n             /**\n              * Configure implementation for interceptor point.\n              *\n@@ -187,7 +188,7 @@ public final class PluginAdviceDefine {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n             }\n-            \n+\n             /**\n              * Configure whether or not override the origin method arguments.\n              *\n@@ -198,7 +199,7 @@ public final class PluginAdviceDefine {\n                 this.overrideArgs = overrideArgs;\n                 return this;\n             }\n-            \n+\n             /**\n              * Build instance methods configuration.\n              *\n@@ -209,24 +210,24 @@ public final class PluginAdviceDefine {\n                 return builder;\n             }\n         }\n-        \n+\n         /**\n          * Static method intercepting point configuration builder.\n          */\n         public static final class StaticMethodPointBuilder {\n             private final Builder builder;\n-            \n+\n             private String classNameOfAdvice;\n-            \n+\n             private boolean overrideArgs;\n-            \n+\n             private ElementMatcher<? super MethodDescription> matcher;\n-            \n+\n             private StaticMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n                 this.builder = builder;\n                 this.matcher = ElementMatchers.isStatic().and(matcher);\n             }\n-            \n+\n             /**\n              * Configure implementation for intercepting point.\n              *\n@@ -237,7 +238,7 @@ public final class PluginAdviceDefine {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n             }\n-            \n+\n             /**\n              * Configure whether or not override the origin method arguments.\n              *\n@@ -248,7 +249,7 @@ public final class PluginAdviceDefine {\n                 this.overrideArgs = overrideArgs;\n                 return this;\n             }\n-            \n+\n             /**\n              * Build static methods configuration.\n              *\n@@ -258,24 +259,24 @@ public final class PluginAdviceDefine {\n                 builder.classStaticMethodPoints.add(new ClassStaticMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n                 return builder;\n             }\n-            \n+\n         }\n-        \n+\n         /**\n          * Instance constructor intercepting point configuration builder.\n          */\n         public static final class ConstructorPointBuilder {\n             private final Builder builder;\n-            \n+\n             private String classNameOfAdvice;\n-            \n+\n             private ElementMatcher<? super MethodDescription> matcher;\n-            \n+\n             private ConstructorPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n                 this.builder = builder;\n                 this.matcher = ElementMatchers.isConstructor().and(matcher);\n             }\n-            \n+\n             /**\n              * Configure implementation for intercepting point.\n              *\n@@ -286,7 +287,7 @@ public final class PluginAdviceDefine {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n             }\n-            \n+\n             /**\n              * Build constructor point configuration.\n              *\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "207",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "216",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "218",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "220",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "237",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "248",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "258",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "268",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "270",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "272",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "287",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "297",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/13/PluginAdviceDefine.java\nindex cbb74e2e122..e0552201066 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/13/PluginAdviceDefine.java\n@@ -49,11 +49,10 @@ public final class PluginAdviceDefine {\n     \n     private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n     \n-    private PluginAdviceDefine(final String classNameOfTarget,\n-                               final List<ConstructorPoint> constructorPoints,\n+    private PluginAdviceDefine(final String classNameOfTarget, final List<ConstructorPoint> constructorPoints,\n                                final List<InstanceMethodPoint> instanceMethodPoints,\n                                final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n-        this.classNameOfTarget = classNameOfTarget;\n+this.classNameOfTarget = classNameOfTarget;\n         this.constructorPoints = constructorPoints;\n         this.instanceMethodPoints = instanceMethodPoints;\n         this.classStaticMethodPoints = classStaticMethodPoints;\n@@ -108,6 +107,7 @@ public final class PluginAdviceDefine {\n      * Plugin advice configuration builder.\n      */\n     public static final class Builder {\n+\n         private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n         \n         private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n@@ -119,183 +119,185 @@ public final class PluginAdviceDefine {\n         private Builder(final String classNameOfTarget) {\n             this.classNameOfTarget = classNameOfTarget;\n         }\n-        \n-        /**\n+\n+    /**\n          * Configure the intercepting point on constructor.\n          *\n          * @param matcher constraints\n          * @return configuration builder\n          */\n-        public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n+    public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n             return new ConstructorPointBuilder(this, matcher);\n         }\n-        \n-        /**\n+\n+    /**\n          * Configure the intercepting point around instance method.\n          *\n          * @param matcher constraints\n          * @return configuration builder\n          */\n-        public InstanceMethodPointBuilder aroundInstanceMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+    public InstanceMethodPointBuilder aroundInstanceMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new InstanceMethodPointBuilder(this, matcher);\n         }\n-        \n-        /**\n+\n+    /**\n          * Configure the intercepting point around instance method.\n          *\n          * @param matcher constraints\n          * @return configuration builder\n          */\n-        public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n+    public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new StaticMethodPointBuilder(this, matcher);\n         }\n-        \n-        \n-        /**\n+\n+    /**\n          * Build configuration.\n          *\n          * @return plugin advice definition.\n          */\n-        public PluginAdviceDefine install() {\n+    public PluginAdviceDefine install() {\n             return new PluginAdviceDefine(classNameOfTarget, constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n         }\n-        \n-        /**\n+\n+    /**\n          * Instance method intercepting point configuration builder.\n          */\n-        public static final class InstanceMethodPointBuilder {\n-            private final Builder builder;\n-            \n-            private String classNameOfAdvice;\n+    public static final class InstanceMethodPointBuilder {\n+\n+        private final Builder builder;\n+\n+private String classNameOfAdvice;\n             \n             private boolean overrideArgs;\n             \n             private ElementMatcher<? super MethodDescription> matcher;\n             \n             private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n-                this.builder = builder;\n+this.builder = builder;\n                 this.matcher = matcher;\n             }\n-            \n-            /**\n+\n+    /**\n              * Configure implementation for interceptor point.\n              *\n              * @param classNameOfAdvice the class name of advice\n              * @return instance method point builder.\n              */\n-            public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n+    public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n             }\n-            \n-            /**\n+\n+    /**\n              * Configure whether or not override the origin method arguments.\n              *\n              * @param overrideArgs whether to override origin method arguments.\n              * @return instance method point configurer.\n              */\n-            public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+    public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n                 this.overrideArgs = overrideArgs;\n                 return this;\n             }\n-            \n-            /**\n+\n+    /**\n              * Build instance methods configuration.\n              *\n              * @return plugin advice builder.\n              */\n-            public Builder build() {\n+    public Builder build() {\n                 builder.instanceMethodPoints.add(new InstanceMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n                 return builder;\n             }\n         }\n-        \n-        /**\n+\n+    /**\n          * Static method intercepting point configuration builder.\n          */\n-        public static final class StaticMethodPointBuilder {\n-            private final Builder builder;\n-            \n-            private String classNameOfAdvice;\n+    public static final class StaticMethodPointBuilder {\n+\n+        private final Builder builder;\n+\n+private String classNameOfAdvice;\n             \n             private boolean overrideArgs;\n             \n             private ElementMatcher<? super MethodDescription> matcher;\n             \n             private StaticMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n-                this.builder = builder;\n+this.builder = builder;\n                 this.matcher = ElementMatchers.isStatic().and(matcher);\n             }\n-            \n-            /**\n+\n+    /**\n              * Configure implementation for intercepting point.\n              *\n              * @param classNameOfAdvice the class name of advice\n              * @return static method point configurer.\n              */\n-            public StaticMethodPointBuilder implement(final String classNameOfAdvice) {\n+    public StaticMethodPointBuilder implement(final String classNameOfAdvice) {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n             }\n-            \n-            /**\n+\n+    /**\n              * Configure whether or not override the origin method arguments.\n              *\n              * @param overrideArgs whether to override origin method arguments.\n              * @return static method point configurer.\n              */\n-            public StaticMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n+    public StaticMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n                 this.overrideArgs = overrideArgs;\n                 return this;\n             }\n-            \n-            /**\n+\n+    /**\n              * Build static methods configuration.\n              *\n              * @return plugin advice builder.\n              */\n-            public Builder build() {\n+    public Builder build() {\n                 builder.classStaticMethodPoints.add(new ClassStaticMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n                 return builder;\n             }\n-            \n-        }\n+\n+    }\n         \n         /**\n          * Instance constructor intercepting point configuration builder.\n          */\n-        public static final class ConstructorPointBuilder {\n-            private final Builder builder;\n-            \n-            private String classNameOfAdvice;\n+    public static final class ConstructorPointBuilder {\n+\n+        private final Builder builder;\n+\n+private String classNameOfAdvice;\n             \n             private ElementMatcher<? super MethodDescription> matcher;\n             \n             private ConstructorPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n-                this.builder = builder;\n+this.builder = builder;\n                 this.matcher = ElementMatchers.isConstructor().and(matcher);\n             }\n-            \n-            /**\n+\n+    /**\n              * Configure implementation for intercepting point.\n              *\n              * @param classNameOfAdvice the class name of advice\n              * @return constructor point builder.\n              */\n-            public ConstructorPointBuilder implement(final String classNameOfAdvice) {\n+    public ConstructorPointBuilder implement(final String classNameOfAdvice) {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n             }\n-            \n-            /**\n+\n+    /**\n              * Build constructor point configuration.\n              *\n              * @return plugin advice builder.\n              */\n-            public Builder build() {\n+    public Builder build() {\n                 builder.constructorPoints.add(new ConstructorPoint(matcher, classNameOfAdvice));\n                 return builder;\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "171",
                    "column": "9",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "210",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "235",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "246",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "269",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "294",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "305",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "326",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "338",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/13/PluginAdviceDefine.java\nindex cbb74e2e122..0aeb8074504 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/13/PluginAdviceDefine.java\n@@ -25,7 +25,6 @@ import net.bytebuddy.matcher.ElementMatchers;\n import org.apache.shardingsphere.agent.core.plugin.point.ClassStaticMethodPoint;\n import org.apache.shardingsphere.agent.core.plugin.point.ConstructorPoint;\n import org.apache.shardingsphere.agent.core.plugin.point.InstanceMethodPoint;\n-\n import java.util.List;\n \n /**\n@@ -39,20 +38,19 @@ import java.util.List;\n  * .install();\n  * </code>\n  */\n+\n+\n public final class PluginAdviceDefine {\n-    \n+\n     private final String classNameOfTarget;\n-    \n+\n     private final List<ConstructorPoint> constructorPoints;\n-    \n+\n     private final List<InstanceMethodPoint> instanceMethodPoints;\n-    \n+\n     private final List<ClassStaticMethodPoint> classStaticMethodPoints;\n-    \n-    private PluginAdviceDefine(final String classNameOfTarget,\n-                               final List<ConstructorPoint> constructorPoints,\n-                               final List<InstanceMethodPoint> instanceMethodPoints,\n-                               final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n+\n+    private PluginAdviceDefine(final String classNameOfTarget, final List<ConstructorPoint> constructorPoints, final List<InstanceMethodPoint> instanceMethodPoints, final List<ClassStaticMethodPoint> classStaticMethodPoints) {\n         this.classNameOfTarget = classNameOfTarget;\n         this.constructorPoints = constructorPoints;\n         this.instanceMethodPoints = instanceMethodPoints;\n@@ -63,6 +61,8 @@ public final class PluginAdviceDefine {\n      * Get class name of target.\n      * @return class name.\n      */\n+\n+\n     public String getClassNameOfTarget() {\n         return classNameOfTarget;\n     }\n@@ -73,6 +73,8 @@ public final class PluginAdviceDefine {\n      * @param classNameOfTarget a class name of wanted advice target.\n      * @return builder.\n      */\n+\n+\n     public static Builder intercept(final String classNameOfTarget) {\n         return new Builder(classNameOfTarget);\n     }\n@@ -82,6 +84,8 @@ public final class PluginAdviceDefine {\n      *\n      * @return series of static method point configuration.\n      */\n+\n+\n     public List<ClassStaticMethodPoint> getClassStaticMethodPoints() {\n         return classStaticMethodPoints;\n     }\n@@ -91,6 +95,8 @@ public final class PluginAdviceDefine {\n      *\n      * @return series of constructor point configuration.\n      */\n+\n+\n     public List<ConstructorPoint> getConstructorPoints() {\n         return constructorPoints;\n     }\n@@ -100,6 +106,8 @@ public final class PluginAdviceDefine {\n      *\n      * @return series of instance method point configuration.\n      */\n+\n+\n     public List<InstanceMethodPoint> getInstanceMethodPoints() {\n         return instanceMethodPoints;\n     }\n@@ -107,15 +115,18 @@ public final class PluginAdviceDefine {\n     /**\n      * Plugin advice configuration builder.\n      */\n+\n+\n     public static final class Builder {\n+\n         private final List<ConstructorPoint> constructorPoints = Lists.newArrayList();\n-        \n+\n         private final List<InstanceMethodPoint> instanceMethodPoints = Lists.newArrayList();\n-        \n+\n         private final List<ClassStaticMethodPoint> classStaticMethodPoints = Lists.newArrayList();\n-        \n+\n         private final String classNameOfTarget;\n-        \n+\n         private Builder(final String classNameOfTarget) {\n             this.classNameOfTarget = classNameOfTarget;\n         }\n@@ -126,6 +137,8 @@ public final class PluginAdviceDefine {\n          * @param matcher constraints\n          * @return configuration builder\n          */\n+\n+\n         public ConstructorPointBuilder onConstructor(final ElementMatcher<? super MethodDescription> matcher) {\n             return new ConstructorPointBuilder(this, matcher);\n         }\n@@ -136,6 +149,8 @@ public final class PluginAdviceDefine {\n          * @param matcher constraints\n          * @return configuration builder\n          */\n+\n+\n         public InstanceMethodPointBuilder aroundInstanceMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new InstanceMethodPointBuilder(this, matcher);\n         }\n@@ -146,6 +161,8 @@ public final class PluginAdviceDefine {\n          * @param matcher constraints\n          * @return configuration builder\n          */\n+\n+\n         public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new StaticMethodPointBuilder(this, matcher);\n         }\n@@ -156,6 +173,8 @@ public final class PluginAdviceDefine {\n          *\n          * @return plugin advice definition.\n          */\n+\n+\n         public PluginAdviceDefine install() {\n             return new PluginAdviceDefine(classNameOfTarget, constructorPoints, instanceMethodPoints, classStaticMethodPoints);\n         }\n@@ -163,15 +182,18 @@ public final class PluginAdviceDefine {\n         /**\n          * Instance method intercepting point configuration builder.\n          */\n+\n+\n         public static final class InstanceMethodPointBuilder {\n+\n             private final Builder builder;\n-            \n+\n             private String classNameOfAdvice;\n-            \n+\n             private boolean overrideArgs;\n-            \n+\n             private ElementMatcher<? super MethodDescription> matcher;\n-            \n+\n             private InstanceMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n                 this.builder = builder;\n                 this.matcher = matcher;\n@@ -183,6 +205,8 @@ public final class PluginAdviceDefine {\n              * @param classNameOfAdvice the class name of advice\n              * @return instance method point builder.\n              */\n+\n+\n             public InstanceMethodPointBuilder implement(final String classNameOfAdvice) {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n@@ -194,6 +218,8 @@ public final class PluginAdviceDefine {\n              * @param overrideArgs whether to override origin method arguments.\n              * @return instance method point configurer.\n              */\n+\n+\n             public InstanceMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n                 this.overrideArgs = overrideArgs;\n                 return this;\n@@ -204,6 +230,8 @@ public final class PluginAdviceDefine {\n              *\n              * @return plugin advice builder.\n              */\n+\n+\n             public Builder build() {\n                 builder.instanceMethodPoints.add(new InstanceMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n                 return builder;\n@@ -213,15 +241,18 @@ public final class PluginAdviceDefine {\n         /**\n          * Static method intercepting point configuration builder.\n          */\n+\n+\n         public static final class StaticMethodPointBuilder {\n+\n             private final Builder builder;\n-            \n+\n             private String classNameOfAdvice;\n-            \n+\n             private boolean overrideArgs;\n-            \n+\n             private ElementMatcher<? super MethodDescription> matcher;\n-            \n+\n             private StaticMethodPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n                 this.builder = builder;\n                 this.matcher = ElementMatchers.isStatic().and(matcher);\n@@ -233,6 +264,8 @@ public final class PluginAdviceDefine {\n              * @param classNameOfAdvice the class name of advice\n              * @return static method point configurer.\n              */\n+\n+\n             public StaticMethodPointBuilder implement(final String classNameOfAdvice) {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n@@ -244,6 +277,8 @@ public final class PluginAdviceDefine {\n              * @param overrideArgs whether to override origin method arguments.\n              * @return static method point configurer.\n              */\n+\n+\n             public StaticMethodPointBuilder overrideArgs(final boolean overrideArgs) {\n                 this.overrideArgs = overrideArgs;\n                 return this;\n@@ -254,23 +289,27 @@ public final class PluginAdviceDefine {\n              *\n              * @return plugin advice builder.\n              */\n+\n+\n             public Builder build() {\n                 builder.classStaticMethodPoints.add(new ClassStaticMethodPoint(matcher, classNameOfAdvice, overrideArgs));\n                 return builder;\n             }\n-            \n         }\n         \n         /**\n          * Instance constructor intercepting point configuration builder.\n          */\n+\n+\n         public static final class ConstructorPointBuilder {\n+\n             private final Builder builder;\n-            \n+\n             private String classNameOfAdvice;\n-            \n+\n             private ElementMatcher<? super MethodDescription> matcher;\n-            \n+\n             private ConstructorPointBuilder(final Builder builder, final ElementMatcher<? super MethodDescription> matcher) {\n                 this.builder = builder;\n                 this.matcher = ElementMatchers.isConstructor().and(matcher);\n@@ -282,6 +321,8 @@ public final class PluginAdviceDefine {\n              * @param classNameOfAdvice the class name of advice\n              * @return constructor point builder.\n              */\n+\n+\n             public ConstructorPointBuilder implement(final String classNameOfAdvice) {\n                 this.classNameOfAdvice = classNameOfAdvice;\n                 return this;\n@@ -292,10 +333,12 @@ public final class PluginAdviceDefine {\n              *\n              * @return plugin advice builder.\n              */\n+\n+\n             public Builder build() {\n                 builder.constructorPoints.add(new ConstructorPoint(matcher, classNameOfAdvice));\n                 return builder;\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/13/PluginAdviceDefine.java\nindex cbb74e2e122..74be5675ba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/13/PluginAdviceDefine.java\n@@ -149,8 +149,7 @@ public final class PluginAdviceDefine {\n         public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new StaticMethodPointBuilder(this, matcher);\n         }\n-        \n-        \n+\n         /**\n          * Build configuration.\n          *\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/13/PluginAdviceDefine.java\nindex cbb74e2e122..74be5675ba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/13/PluginAdviceDefine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/13/PluginAdviceDefine.java\n@@ -149,8 +149,7 @@ public final class PluginAdviceDefine {\n         public StaticMethodPointBuilder aroundClassStaticMethod(final ElementMatcher<? super MethodDescription> matcher) {\n             return new StaticMethodPointBuilder(this, matcher);\n         }\n-        \n-        \n+\n         /**\n          * Build configuration.\n          *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}