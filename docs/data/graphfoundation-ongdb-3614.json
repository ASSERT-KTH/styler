{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3614",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3614/StoreAccess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3614/StoreAccess.java\nindex ad02d81b263..b71b25ae12b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3614/StoreAccess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3614/StoreAccess.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -41,183 +42,183 @@ import org.neo4j.logging.NullLogProvider;\n /**\n  * Not thread safe (since DiffRecordStore is not thread safe), intended for\n  * single threaded use.\n- *\n+ * <p>\n  * Make sure to call {@link #initialize()} after constructor has been run.\n  */\n public class StoreAccess\n {\n-    // Top level stores\n-    private RecordStore<DynamicRecord> schemaStore;\n-    private RecordStore<NodeRecord> nodeStore;\n-    private RecordStore<RelationshipRecord> relStore;\n-    private RecordStore<RelationshipTypeTokenRecord> relationshipTypeTokenStore;\n-    private RecordStore<LabelTokenRecord> labelTokenStore;\n-    private RecordStore<DynamicRecord> nodeDynamicLabelStore;\n-    private RecordStore<PropertyRecord> propStore;\n-    // Transitive stores\n-    private RecordStore<DynamicRecord> stringStore;\n-    private RecordStore<DynamicRecord> arrayStore;\n-    private RecordStore<PropertyKeyTokenRecord> propertyKeyTokenStore;\n-    private RecordStore<DynamicRecord> relationshipTypeNameStore;\n-    private RecordStore<DynamicRecord> labelNameStore;\n-    private RecordStore<DynamicRecord> propertyKeyNameStore;\n-    private RecordStore<RelationshipGroupRecord> relGroupStore;\n-    private final CountsAccessor counts;\n-    // internal state\n-    private boolean closeable;\n-    private final NeoStores neoStores;\n-\n-    public StoreAccess( NeoStores store )\n-    {\n-        this.neoStores = store;\n-        this.counts = store.getCounts();\n-    }\n-\n-    public StoreAccess( FileSystemAbstraction fileSystem, PageCache pageCache, File storeDir, Config config )\n-    {\n-        this( new StoreFactory( storeDir, config, new DefaultIdGeneratorFactory( fileSystem ), pageCache,\n-                fileSystem, NullLogProvider.getInstance(), EmptyVersionContextSupplier.EMPTY ).openAllNeoStores() );\n-        this.closeable = true;\n-    }\n-\n-    /**\n-     * This method exists since {@link #wrapStore(RecordStore)} might depend on the existence of a variable\n-     * that gets set in a subclass' constructor <strong>after</strong> this constructor of {@link StoreAccess}\n-     * has been executed. I.e. a correct creation of a {@link StoreAccess} instance must be the creation of the\n-     * object plus a call to {@link #initialize()}.\n-     *\n-     * @return this\n-     */\n-    public StoreAccess initialize()\n-    {\n-        this.schemaStore = wrapStore( neoStores.getSchemaStore() );\n-        this.nodeStore = wrapStore( neoStores.getNodeStore() );\n-        this.relStore = wrapStore( neoStores.getRelationshipStore() );\n-        this.propStore = wrapStore( neoStores.getPropertyStore() );\n-        this.stringStore = wrapStore( neoStores.getPropertyStore().getStringStore() );\n-        this.arrayStore = wrapStore( neoStores.getPropertyStore().getArrayStore() );\n-        this.relationshipTypeTokenStore = wrapStore( neoStores.getRelationshipTypeTokenStore() );\n-        this.labelTokenStore = wrapStore( neoStores.getLabelTokenStore() );\n-        this.nodeDynamicLabelStore = wrapStore( wrapNodeDynamicLabelStore( neoStores.getNodeStore().getDynamicLabelStore() ) );\n-        this.propertyKeyTokenStore = wrapStore( neoStores.getPropertyStore().getPropertyKeyTokenStore() );\n-        this.relationshipTypeNameStore = wrapStore( neoStores.getRelationshipTypeTokenStore().getNameStore() );\n-        this.labelNameStore = wrapStore( neoStores.getLabelTokenStore().getNameStore() );\n-        this.propertyKeyNameStore = wrapStore( neoStores.getPropertyStore().getPropertyKeyTokenStore().getNameStore() );\n-        this.relGroupStore = wrapStore( neoStores.getRelationshipGroupStore() );\n-        return this;\n-    }\n-\n-    public NeoStores getRawNeoStores()\n-    {\n-        return neoStores;\n-    }\n-\n-    public RecordStore<DynamicRecord> getSchemaStore()\n-    {\n-        return schemaStore;\n-    }\n-\n-    public RecordStore<NodeRecord> getNodeStore()\n-    {\n-        return nodeStore;\n-    }\n-\n-    public RecordStore<RelationshipRecord> getRelationshipStore()\n-    {\n-        return relStore;\n-    }\n-\n-    public RecordStore<RelationshipGroupRecord> getRelationshipGroupStore()\n-    {\n-        return relGroupStore;\n-    }\n-\n-    public RecordStore<PropertyRecord> getPropertyStore()\n-    {\n-        return propStore;\n-    }\n-\n-    public RecordStore<DynamicRecord> getStringStore()\n-    {\n-        return stringStore;\n-    }\n-\n-    public RecordStore<DynamicRecord> getArrayStore()\n-    {\n-        return arrayStore;\n-    }\n-\n-    public RecordStore<RelationshipTypeTokenRecord> getRelationshipTypeTokenStore()\n-    {\n-        return relationshipTypeTokenStore;\n-    }\n-\n-    public RecordStore<LabelTokenRecord> getLabelTokenStore()\n-    {\n-        return labelTokenStore;\n-    }\n-\n-    public RecordStore<DynamicRecord> getNodeDynamicLabelStore()\n-    {\n-        return nodeDynamicLabelStore;\n-    }\n-\n-    public RecordStore<PropertyKeyTokenRecord> getPropertyKeyTokenStore()\n-    {\n-        return propertyKeyTokenStore;\n-    }\n-\n-    public RecordStore<DynamicRecord> getRelationshipTypeNameStore()\n-    {\n-        return relationshipTypeNameStore;\n-    }\n-\n-    public RecordStore<DynamicRecord> getLabelNameStore()\n-    {\n-        return labelNameStore;\n-    }\n-\n-    public RecordStore<DynamicRecord> getPropertyKeyNameStore()\n-    {\n-        return propertyKeyNameStore;\n-    }\n-\n-    public CountsAccessor getCounts()\n-    {\n-        return counts;\n-    }\n-\n-    private static RecordStore<DynamicRecord> wrapNodeDynamicLabelStore( RecordStore<DynamicRecord> store )\n-    {\n-        return new RecordStore.Delegator<DynamicRecord>( store )\n-        {\n-            @Override\n-            public <FAILURE extends Exception> void accept( Processor<FAILURE> processor, DynamicRecord record )\n-                    throws FAILURE\n-            {\n-                processor.processLabelArrayWithOwner( this, record );\n-            }\n-        };\n-    }\n-\n-    protected <R extends AbstractBaseRecord> RecordStore<R> wrapStore( RecordStore<R> store )\n-    {\n-        return store;\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    protected <FAILURE extends Exception> void apply( RecordStore.Processor<FAILURE> processor, RecordStore<?> store )\n-            throws FAILURE\n-    {\n-        processor.applyFiltered( store );\n-    }\n-\n-    public synchronized void close()\n-    {\n-        if ( closeable )\n-        {\n-            closeable = false;\n-            neoStores.close();\n-        }\n-    }\n+  // Top level stores\n+  private RecordStore<DynamicRecord> schemaStore;\n+  private RecordStore<NodeRecord> nodeStore;\n+  private RecordStore<RelationshipRecord> relStore;\n+  private RecordStore<RelationshipTypeTokenRecord> relationshipTypeTokenStore;\n+  private RecordStore<LabelTokenRecord> labelTokenStore;\n+  private RecordStore<DynamicRecord> nodeDynamicLabelStore;\n+  private RecordStore<PropertyRecord> propStore;\n+  // Transitive stores\n+  private RecordStore<DynamicRecord> stringStore;\n+  private RecordStore<DynamicRecord> arrayStore;\n+  private RecordStore<PropertyKeyTokenRecord> propertyKeyTokenStore;\n+  private RecordStore<DynamicRecord> relationshipTypeNameStore;\n+  private RecordStore<DynamicRecord> labelNameStore;\n+  private RecordStore<DynamicRecord> propertyKeyNameStore;\n+  private RecordStore<RelationshipGroupRecord> relGroupStore;\n+  private final CountsAccessor counts;\n+  // internal state\n+  private boolean closeable;\n+  private final NeoStores neoStores;\n+\n+  public StoreAccess(NeoStores store)\n+  {\n+    this.neoStores = store;\n+    this.counts = store.getCounts();\n+  }\n+\n+  public StoreAccess(FileSystemAbstraction fileSystem, PageCache pageCache, File storeDir, Config config)\n+  {\n+    this(new StoreFactory(storeDir, config, new DefaultIdGeneratorFactory(fileSystem), pageCache,\n+        fileSystem, NullLogProvider.getInstance(), EmptyVersionContextSupplier.EMPTY).openAllNeoStores());\n+    this.closeable = true;\n+  }\n+\n+  /**\n+   * This method exists since {@link #wrapStore(RecordStore)} might depend on the existence of a variable\n+   * that gets set in a subclass' constructor <strong>after</strong> this constructor of {@link StoreAccess}\n+   * has been executed. I.e. a correct creation of a {@link StoreAccess} instance must be the creation of the\n+   * object plus a call to {@link #initialize()}.\n+   *\n+   * @return this\n+   */\n+  public StoreAccess initialize()\n+  {\n+    this.schemaStore = wrapStore(neoStores.getSchemaStore());\n+    this.nodeStore = wrapStore(neoStores.getNodeStore());\n+    this.relStore = wrapStore(neoStores.getRelationshipStore());\n+    this.propStore = wrapStore(neoStores.getPropertyStore());\n+    this.stringStore = wrapStore(neoStores.getPropertyStore().getStringStore());\n+    this.arrayStore = wrapStore(neoStores.getPropertyStore().getArrayStore());\n+    this.relationshipTypeTokenStore = wrapStore(neoStores.getRelationshipTypeTokenStore());\n+    this.labelTokenStore = wrapStore(neoStores.getLabelTokenStore());\n+    this.nodeDynamicLabelStore = wrapStore(wrapNodeDynamicLabelStore(neoStores.getNodeStore().getDynamicLabelStore()));\n+    this.propertyKeyTokenStore = wrapStore(neoStores.getPropertyStore().getPropertyKeyTokenStore());\n+    this.relationshipTypeNameStore = wrapStore(neoStores.getRelationshipTypeTokenStore().getNameStore());\n+    this.labelNameStore = wrapStore(neoStores.getLabelTokenStore().getNameStore());\n+    this.propertyKeyNameStore = wrapStore(neoStores.getPropertyStore().getPropertyKeyTokenStore().getNameStore());\n+    this.relGroupStore = wrapStore(neoStores.getRelationshipGroupStore());\n+    return this;\n+  }\n+\n+  public NeoStores getRawNeoStores()\n+  {\n+    return neoStores;\n+  }\n+\n+  public RecordStore<DynamicRecord> getSchemaStore()\n+  {\n+    return schemaStore;\n+  }\n+\n+  public RecordStore<NodeRecord> getNodeStore()\n+  {\n+    return nodeStore;\n+  }\n+\n+  public RecordStore<RelationshipRecord> getRelationshipStore()\n+  {\n+    return relStore;\n+  }\n+\n+  public RecordStore<RelationshipGroupRecord> getRelationshipGroupStore()\n+  {\n+    return relGroupStore;\n+  }\n+\n+  public RecordStore<PropertyRecord> getPropertyStore()\n+  {\n+    return propStore;\n+  }\n+\n+  public RecordStore<DynamicRecord> getStringStore()\n+  {\n+    return stringStore;\n+  }\n+\n+  public RecordStore<DynamicRecord> getArrayStore()\n+  {\n+    return arrayStore;\n+  }\n+\n+  public RecordStore<RelationshipTypeTokenRecord> getRelationshipTypeTokenStore()\n+  {\n+    return relationshipTypeTokenStore;\n+  }\n+\n+  public RecordStore<LabelTokenRecord> getLabelTokenStore()\n+  {\n+    return labelTokenStore;\n+  }\n+\n+  public RecordStore<DynamicRecord> getNodeDynamicLabelStore()\n+  {\n+    return nodeDynamicLabelStore;\n+  }\n+\n+  public RecordStore<PropertyKeyTokenRecord> getPropertyKeyTokenStore()\n+  {\n+    return propertyKeyTokenStore;\n+  }\n+\n+  public RecordStore<DynamicRecord> getRelationshipTypeNameStore()\n+  {\n+    return relationshipTypeNameStore;\n+  }\n+\n+  public RecordStore<DynamicRecord> getLabelNameStore()\n+  {\n+    return labelNameStore;\n+  }\n+\n+  public RecordStore<DynamicRecord> getPropertyKeyNameStore()\n+  {\n+    return propertyKeyNameStore;\n+  }\n+\n+  public CountsAccessor getCounts()\n+  {\n+    return counts;\n+  }\n+\n+  private static RecordStore<DynamicRecord> wrapNodeDynamicLabelStore(RecordStore<DynamicRecord> store)\n+  {\n+    return new RecordStore.Delegator<DynamicRecord>(store)\n+    {\n+      @Override\n+      public <FAILURE extends Exception> void accept(Processor<FAILURE> processor, DynamicRecord record)\n+          throws FAILURE\n+      {\n+        processor.processLabelArrayWithOwner(this, record);\n+      }\n+    };\n+  }\n+\n+  protected <R extends AbstractBaseRecord> RecordStore<R> wrapStore(RecordStore<R> store)\n+  {\n+    return store;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  protected <FAILURE extends Exception> void apply(RecordStore.Processor<FAILURE> processor, RecordStore<?> store)\n+      throws FAILURE\n+  {\n+    processor.applyFiltered(store);\n+  }\n+\n+  public synchronized void close()\n+  {\n+    if (closeable)\n+    {\n+      closeable = false;\n+      neoStores.close();\n+    }\n+  }\n }\n",
            "diff_size": 176
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3614/StoreAccess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3614/StoreAccess.java\nindex ad02d81b263..f4e0eafb577 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3614/StoreAccess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3614/StoreAccess.java\n@@ -77,7 +77,7 @@ public class StoreAccess\n     {\n         this( new StoreFactory( storeDir, config, new DefaultIdGeneratorFactory( fileSystem ), pageCache,\n                 fileSystem, NullLogProvider.getInstance(), EmptyVersionContextSupplier.EMPTY ).openAllNeoStores() );\n-        this.closeable = true;\n+this.closeable = true;\n     }\n \n     /**\n@@ -192,9 +192,8 @@ public class StoreAccess\n         return new RecordStore.Delegator<DynamicRecord>( store )\n         {\n             @Override\n-            public <FAILURE extends Exception> void accept( Processor<FAILURE> processor, DynamicRecord record )\n-                    throws FAILURE\n-            {\n+            public <FAILURE extends Exception> void accept( Processor<FAILURE> processor, DynamicRecord record ) throws FAILURE\n+{\n                 processor.processLabelArrayWithOwner( this, record );\n             }\n         };\n@@ -206,9 +205,8 @@ public class StoreAccess\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n-    protected <FAILURE extends Exception> void apply( RecordStore.Processor<FAILURE> processor, RecordStore<?> store )\n-            throws FAILURE\n-    {\n+    protected <FAILURE extends Exception> void apply( RecordStore.Processor<FAILURE> processor, RecordStore<?> store ) throws FAILURE\n+{\n         processor.applyFiltered( store );\n     }\n \n@@ -220,4 +218,4 @@ public class StoreAccess\n             neoStores.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}