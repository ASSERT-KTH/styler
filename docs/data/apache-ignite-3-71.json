{
    "project_name": "apache-ignite-3",
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "108",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    private final OpCode opCode;\n    private final LabelNode label;\n\n    public JumpInstruction(OpCode opCode, LabelNode label) {\n        this.opCode = opCode;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/71/JumpInstruction.java\nindex ce2ce0281e9..80792e6544e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/71/JumpInstruction.java\n@@ -105,6 +105,7 @@ public class JumpInstruction\n     }\n \n     private final OpCode opCode;\n+\n     private final LabelNode label;\n \n     public JumpInstruction(OpCode opCode, LabelNode label) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/71/JumpInstruction.java\nindex ce2ce0281e9..d9cb2f9e753 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/71/JumpInstruction.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.instruction;\n \n import com.facebook.presto.bytecode.BytecodeNode;\n@@ -40,98 +41,99 @@ import static com.facebook.presto.bytecode.OpCode.IF_ICMPNE;\n @SuppressWarnings(\"UnusedDeclaration\")\n public class JumpInstruction\n     implements InstructionNode {\n-    public static InstructionNode jump(LabelNode label) {\n-        return new JumpInstruction(GOTO, label);\n-    }\n-\n-    public static InstructionNode jumpIfEqualZero(LabelNode label) {\n-        return new JumpInstruction(IFEQ, label);\n-    }\n-\n-    public static InstructionNode jumpIfNotEqualZero(LabelNode label) {\n-        return new JumpInstruction(IFNE, label);\n-    }\n-\n-    public static InstructionNode jumpIfLessThanZero(LabelNode label) {\n-        return new JumpInstruction(IFLT, label);\n-    }\n-\n-    public static InstructionNode jumpIfGreaterThanZero(LabelNode label) {\n-        return new JumpInstruction(IFGT, label);\n-    }\n-\n-    public static InstructionNode jumpIfLessThanOrEqualZero(LabelNode label) {\n-        return new JumpInstruction(IFLE, label);\n-    }\n-\n-    public static InstructionNode jumpIfIntGreaterThanOrEqualZero(LabelNode label) {\n-        return new JumpInstruction(IFGE, label);\n-    }\n-\n-    public static InstructionNode jumpIfIntEqual(LabelNode label) {\n-        return new JumpInstruction(IF_ICMPEQ, label);\n-    }\n-\n-    public static InstructionNode jumpIfIntNotEqual(LabelNode label) {\n-        return new JumpInstruction(IF_ICMPNE, label);\n-    }\n-\n-    public static InstructionNode jumpIfIntLessThan(LabelNode label) {\n-        return new JumpInstruction(IF_ICMPLT, label);\n-    }\n-\n-    public static InstructionNode jumpIfIntGreaterThan(LabelNode label) {\n-        return new JumpInstruction(IF_ICMPGT, label);\n-    }\n-\n-    public static InstructionNode jumpIfIntLessThanOrEqual(LabelNode label) {\n-        return new JumpInstruction(IF_ICMPLE, label);\n-    }\n-\n-    public static InstructionNode jumpIfNull(LabelNode label) {\n-        return new JumpInstruction(IFNULL, label);\n-    }\n-\n-    public static InstructionNode jumpIfNotNull(LabelNode label) {\n-        return new JumpInstruction(IFNONNULL, label);\n-    }\n-\n-    public static InstructionNode jumpIfObjectSame(LabelNode label) {\n-        return new JumpInstruction(IF_ACMPEQ, label);\n-    }\n-\n-    public static InstructionNode jumpIfObjectNotSame(LabelNode label) {\n-        return new JumpInstruction(IF_ACMPNE, label);\n-    }\n-\n-    private final OpCode opCode;\n-    private final LabelNode label;\n-\n-    public JumpInstruction(OpCode opCode, LabelNode label) {\n-        this.opCode = opCode;\n-        this.label = label;\n-    }\n-\n-    public OpCode getOpCode() {\n-        return opCode;\n-    }\n-\n-    public LabelNode getLabel() {\n-        return label;\n-    }\n-\n-    @Override\n-    public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n-        visitor.visitJumpInsn(opCode.getOpCode(), label.getLabel());\n-    }\n-\n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n-        return List.of();\n-    }\n-\n-    @Override\n-    public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n-        return visitor.visitJumpInstruction(parent, this);\n-    }\n+  public static InstructionNode jump(LabelNode label) {\n+    return new JumpInstruction(GOTO, label);\n+  }\n+\n+  public static InstructionNode jumpIfEqualZero(LabelNode label) {\n+    return new JumpInstruction(IFEQ, label);\n+  }\n+\n+  public static InstructionNode jumpIfNotEqualZero(LabelNode label) {\n+    return new JumpInstruction(IFNE, label);\n+  }\n+\n+  public static InstructionNode jumpIfLessThanZero(LabelNode label) {\n+    return new JumpInstruction(IFLT, label);\n+  }\n+\n+  public static InstructionNode jumpIfGreaterThanZero(LabelNode label) {\n+    return new JumpInstruction(IFGT, label);\n+  }\n+\n+  public static InstructionNode jumpIfLessThanOrEqualZero(LabelNode label) {\n+    return new JumpInstruction(IFLE, label);\n+  }\n+\n+  public static InstructionNode jumpIfIntGreaterThanOrEqualZero(LabelNode label) {\n+    return new JumpInstruction(IFGE, label);\n+  }\n+\n+  public static InstructionNode jumpIfIntEqual(LabelNode label) {\n+    return new JumpInstruction(IF_ICMPEQ, label);\n+  }\n+\n+  public static InstructionNode jumpIfIntNotEqual(LabelNode label) {\n+    return new JumpInstruction(IF_ICMPNE, label);\n+  }\n+\n+  public static InstructionNode jumpIfIntLessThan(LabelNode label) {\n+    return new JumpInstruction(IF_ICMPLT, label);\n+  }\n+\n+  public static InstructionNode jumpIfIntGreaterThan(LabelNode label) {\n+    return new JumpInstruction(IF_ICMPGT, label);\n+  }\n+\n+  public static InstructionNode jumpIfIntLessThanOrEqual(LabelNode label) {\n+    return new JumpInstruction(IF_ICMPLE, label);\n+  }\n+\n+  public static InstructionNode jumpIfNull(LabelNode label) {\n+    return new JumpInstruction(IFNULL, label);\n+  }\n+\n+  public static InstructionNode jumpIfNotNull(LabelNode label) {\n+    return new JumpInstruction(IFNONNULL, label);\n+  }\n+\n+  public static InstructionNode jumpIfObjectSame(LabelNode label) {\n+    return new JumpInstruction(IF_ACMPEQ, label);\n+  }\n+\n+  public static InstructionNode jumpIfObjectNotSame(LabelNode label) {\n+    return new JumpInstruction(IF_ACMPNE, label);\n+  }\n+\n+  private final OpCode opCode;\n+\n+  private final LabelNode label;\n+\n+  public JumpInstruction(OpCode opCode, LabelNode label) {\n+    this.opCode = opCode;\n+    this.label = label;\n+  }\n+\n+  public OpCode getOpCode() {\n+    return opCode;\n+  }\n+\n+  public LabelNode getLabel() {\n+    return label;\n+  }\n+\n+  @Override\n+  public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n+    visitor.visitJumpInsn(opCode.getOpCode(), label.getLabel());\n+  }\n+\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.of();\n+  }\n+\n+  @Override\n+  public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n+    return visitor.visitJumpInstruction(parent, this);\n+  }\n }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "108",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/71/JumpInstruction.java\nindex ce2ce0281e9..f465c97ea3d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/71/JumpInstruction.java\n@@ -134,4 +134,4 @@ public class JumpInstruction\n     public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n         return visitor.visitJumpInstruction(parent, this);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "109",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "115",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "121",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "130",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/71/JumpInstruction.java\nindex ce2ce0281e9..8d261e376e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/71/JumpInstruction.java\n@@ -37,9 +37,10 @@ import static com.facebook.presto.bytecode.OpCode.IF_ICMPLE;\n import static com.facebook.presto.bytecode.OpCode.IF_ICMPLT;\n import static com.facebook.presto.bytecode.OpCode.IF_ICMPNE;\n \n+\n @SuppressWarnings(\"UnusedDeclaration\")\n-public class JumpInstruction\n-    implements InstructionNode {\n+public class JumpInstruction implements InstructionNode {\n+\n     public static InstructionNode jump(LabelNode label) {\n         return new JumpInstruction(GOTO, label);\n     }\n@@ -104,14 +105,19 @@ public class JumpInstruction\n         return new JumpInstruction(IF_ACMPNE, label);\n     }\n \n+\n     private final OpCode opCode;\n+\n+\n     private final LabelNode label;\n \n+\n     public JumpInstruction(OpCode opCode, LabelNode label) {\n         this.opCode = opCode;\n         this.label = label;\n     }\n \n+\n     public OpCode getOpCode() {\n         return opCode;\n     }\n@@ -120,18 +126,18 @@ public class JumpInstruction\n         return label;\n     }\n \n-    @Override\n-    public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n+\n+    @Override public void accept(MethodVisitor visitor, MethodGenerationContext generationContext) {\n         visitor.visitJumpInsn(opCode.getOpCode(), label.getLabel());\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes() {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.of();\n     }\n \n-    @Override\n-    public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n+\n+    @Override public <T> T accept(BytecodeNode parent, BytecodeVisitor<T> visitor) {\n         return visitor.visitJumpInstruction(parent, this);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/71/JumpInstruction.java\nindex ce2ce0281e9..80792e6544e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/71/JumpInstruction.java\n@@ -105,6 +105,7 @@ public class JumpInstruction\n     }\n \n     private final OpCode opCode;\n+\n     private final LabelNode label;\n \n     public JumpInstruction(OpCode opCode, LabelNode label) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/71/JumpInstruction.java\nindex ce2ce0281e9..80792e6544e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/71/JumpInstruction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/71/JumpInstruction.java\n@@ -105,6 +105,7 @@ public class JumpInstruction\n     }\n \n     private final OpCode opCode;\n+\n     private final LabelNode label;\n \n     public JumpInstruction(OpCode opCode, LabelNode label) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}