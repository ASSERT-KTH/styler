{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2006",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2006/ArrayUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2006/ArrayUtil.java\nindex 91c9f2ec13b..fa43dd5cc01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2006/ArrayUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2006/ArrayUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.lang.reflect.Array;\n@@ -30,445 +31,445 @@ import static java.util.Arrays.copyOf;\n  */\n public abstract class ArrayUtil\n {\n-    public static int hashCode( Object array )\n-    {\n-        assert array.getClass().isArray() : array + \" is not an array\";\n-\n-        int length = Array.getLength( array );\n-        int result = length;\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            result = 31 * result + Array.get( array, i ).hashCode();\n-        }\n-        return result;\n-    }\n+  public static int hashCode(Object array)\n+  {\n+    assert array.getClass().isArray() : array + \" is not an array\";\n \n-    public interface ArrayEquality\n+    int length = Array.getLength(array);\n+    int result = length;\n+    for (int i = 0; i < length; i++)\n     {\n-        boolean typeEquals( Class<?> firstType, Class<?> otherType );\n-\n-        boolean itemEquals( Object firstArray, Object otherArray );\n+      result = 31 * result + Array.get(array, i).hashCode();\n     }\n+    return result;\n+  }\n \n-    public static final ArrayEquality DEFAULT_ARRAY_EQUALITY = new ArrayEquality()\n-    {\n-        @Override\n-        public boolean typeEquals( Class<?> firstType, Class<?> otherType )\n-        {\n-            return firstType == otherType;\n-        }\n+  public interface ArrayEquality\n+  {\n+    boolean typeEquals(Class<?> firstType, Class<?> otherType);\n \n-        @Override\n-        public boolean itemEquals( Object lhs, Object rhs )\n-        {\n-            return lhs == rhs || lhs != null && lhs.equals( rhs );\n-        }\n-    };\n+    boolean itemEquals(Object firstArray, Object otherArray);\n+  }\n \n-    public static final ArrayEquality BOXING_AWARE_ARRAY_EQUALITY = new ArrayEquality()\n+  public static final ArrayEquality DEFAULT_ARRAY_EQUALITY = new ArrayEquality()\n+  {\n+    @Override\n+    public boolean typeEquals(Class<?> firstType, Class<?> otherType)\n     {\n-        @Override\n-        public boolean typeEquals( Class<?> firstType, Class<?> otherType )\n-        {\n-            return boxedType( firstType ) == boxedType( otherType );\n-        }\n-\n-        private Class<?> boxedType( Class<?> type )\n-        {\n-            if ( !type.isPrimitive() )\n-            {\n-                return type;\n-            }\n-\n-            if ( type.equals( Boolean.TYPE ) )\n-            {\n-                return Boolean.class;\n-            }\n-            if ( type.equals( Byte.TYPE ) )\n-            {\n-                return Byte.class;\n-            }\n-            if ( type.equals( Short.TYPE ) )\n-            {\n-                return Short.class;\n-            }\n-            if ( type.equals( Character.TYPE ) )\n-            {\n-                return Character.class;\n-            }\n-            if ( type.equals( Integer.TYPE ) )\n-            {\n-                return Integer.class;\n-            }\n-            if ( type.equals( Long.TYPE ) )\n-            {\n-                return Long.class;\n-            }\n-            if ( type.equals( Float.TYPE ) )\n-            {\n-                return Float.class;\n-            }\n-            if ( type.equals( Double.TYPE ) )\n-            {\n-                return Double.class;\n-            }\n-            throw new IllegalArgumentException( \"Oops, forgot to include a primitive type \" + type );\n-        }\n-\n-        @Override\n-        public boolean itemEquals( Object lhs, Object rhs )\n-        {\n-            return lhs == rhs || lhs != null && lhs.equals( rhs );\n-        }\n-    };\n+      return firstType == otherType;\n+    }\n \n-    public static boolean equals( Object firstArray, Object otherArray )\n+    @Override\n+    public boolean itemEquals(Object lhs, Object rhs)\n     {\n-        return equals( firstArray, otherArray, DEFAULT_ARRAY_EQUALITY );\n+      return lhs == rhs || lhs != null && lhs.equals(rhs);\n     }\n+  };\n \n-    /**\n-     * Check if two arrays are equal.\n-     * I also can't believe this method is missing from {@link Arrays}.\n-     * Both arguments must be arrays of some type.\n-     *\n-     * @param firstArray value to compare to the other value\n-     * @param otherArray value to compare to the first value\n-     * @param equality equality logic\n-     * @return Returns {@code true} if the arrays are equal\n-     *\n-     * @see Arrays#equals(byte[], byte[]) for similar functionality.\n-     */\n-    public static boolean equals( Object firstArray, Object otherArray, ArrayEquality equality )\n+  public static final ArrayEquality BOXING_AWARE_ARRAY_EQUALITY = new ArrayEquality()\n+  {\n+    @Override\n+    public boolean typeEquals(Class<?> firstType, Class<?> otherType)\n     {\n-        assert firstArray.getClass().isArray() : firstArray + \" is not an array\";\n-        assert otherArray.getClass().isArray() : otherArray + \" is not an array\";\n-\n-        int length;\n-        if ( equality.typeEquals( firstArray.getClass().getComponentType(), otherArray.getClass().getComponentType() )\n-                && (length = Array.getLength( firstArray )) == Array.getLength( otherArray ) )\n-        {\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                if ( !equality.itemEquals( Array.get( firstArray, i ), Array.get( otherArray, i ) ) )\n-                {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n-        return false;\n+      return boxedType(firstType) == boxedType(otherType);\n     }\n \n-    public static Object clone( Object array )\n+    private Class<?> boxedType(Class<?> type)\n     {\n-        if ( array instanceof Object[] )\n-        {\n-            return ((Object[]) array).clone();\n-        }\n-        if ( array instanceof boolean[] )\n-        {\n-            return ((boolean[]) array).clone();\n-        }\n-        if ( array instanceof byte[] )\n-        {\n-            return ((byte[]) array).clone();\n-        }\n-        if ( array instanceof short[] )\n-        {\n-            return ((short[]) array).clone();\n-        }\n-        if ( array instanceof char[] )\n-        {\n-            return ((char[]) array).clone();\n-        }\n-        if ( array instanceof int[] )\n-        {\n-            return ((int[]) array).clone();\n-        }\n-        if ( array instanceof long[] )\n-        {\n-            return ((long[]) array).clone();\n-        }\n-        if ( array instanceof float[] )\n-        {\n-            return ((float[]) array).clone();\n-        }\n-        if ( array instanceof double[] )\n-        {\n-            return ((double[]) array).clone();\n-        }\n-        throw new IllegalArgumentException( \"Not an array type: \" + array.getClass() );\n+      if (!type.isPrimitive())\n+      {\n+        return type;\n+      }\n+\n+      if (type.equals(Boolean.TYPE))\n+      {\n+        return Boolean.class;\n+      }\n+      if (type.equals(Byte.TYPE))\n+      {\n+        return Byte.class;\n+      }\n+      if (type.equals(Short.TYPE))\n+      {\n+        return Short.class;\n+      }\n+      if (type.equals(Character.TYPE))\n+      {\n+        return Character.class;\n+      }\n+      if (type.equals(Integer.TYPE))\n+      {\n+        return Integer.class;\n+      }\n+      if (type.equals(Long.TYPE))\n+      {\n+        return Long.class;\n+      }\n+      if (type.equals(Float.TYPE))\n+      {\n+        return Float.class;\n+      }\n+      if (type.equals(Double.TYPE))\n+      {\n+        return Double.class;\n+      }\n+      throw new IllegalArgumentException(\"Oops, forgot to include a primitive type \" + type);\n     }\n \n-    /**\n-     * Count missing items in an array.\n-     * The order of items doesn't matter.\n-     *\n-     * @param array Array to examine\n-     * @param contains Items to look for\n-     * @param <T> The type of the array items\n-     * @return how many of the items in {@code contains} are missing from {@code array}.\n-     */\n-    public static <T> int missing( T[] array, T[] contains )\n+    @Override\n+    public boolean itemEquals(Object lhs, Object rhs)\n     {\n-        int missing = 0;\n-        for ( T check : contains )\n-        {\n-            if ( !contains( array, check ) )\n-            {\n-                missing++;\n-            }\n-        }\n-        return missing;\n+      return lhs == rhs || lhs != null && lhs.equals(rhs);\n     }\n-\n-    /**\n-     * Count items from a different array contained in an array.\n-     * The order of items doesn't matter.\n-     *\n-     * @param array Array to examine\n-     * @param contains Items to look for\n-     * @param <T> The type of the array items\n-     * @return {@code true} if all items in {@code contains} exists in {@code array}, otherwise {@code false}.\n-     */\n-    public static <T> boolean containsAll( T[] array, T[] contains )\n+  };\n+\n+  public static boolean equals(Object firstArray, Object otherArray)\n+  {\n+    return equals(firstArray, otherArray, DEFAULT_ARRAY_EQUALITY);\n+  }\n+\n+  /**\n+   * Check if two arrays are equal.\n+   * I also can't believe this method is missing from {@link Arrays}.\n+   * Both arguments must be arrays of some type.\n+   *\n+   * @param firstArray value to compare to the other value\n+   * @param otherArray value to compare to the first value\n+   * @param equality   equality logic\n+   * @return Returns {@code true} if the arrays are equal\n+   * @see Arrays#equals(byte[], byte[]) for similar functionality.\n+   */\n+  public static boolean equals(Object firstArray, Object otherArray, ArrayEquality equality)\n+  {\n+    assert firstArray.getClass().isArray() : firstArray + \" is not an array\";\n+    assert otherArray.getClass().isArray() : otherArray + \" is not an array\";\n+\n+    int length;\n+    if (equality.typeEquals(firstArray.getClass().getComponentType(), otherArray.getClass().getComponentType())\n+        && (length = Array.getLength(firstArray)) == Array.getLength(otherArray))\n     {\n-        for ( T check : contains )\n+      for (int i = 0; i < length; i++)\n+      {\n+        if (!equality.itemEquals(Array.get(firstArray, i), Array.get(otherArray, i)))\n         {\n-            if ( !contains( array, check ) )\n-            {\n-                return false;\n-            }\n+          return false;\n         }\n-        return true;\n+      }\n+      return true;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Check if array contains item.\n-     *\n-     * @param array Array to examine\n-     * @param contains Single item to look for\n-     * @param <T> The type of the array items\n-     * @return {@code true} if {@code contains} exists in {@code array}, otherwise {@code false}.\n-     */\n-    public static <T> boolean contains( T[] array, T contains )\n+  public static Object clone(Object array)\n+  {\n+    if (array instanceof Object[])\n     {\n-        return contains( array, array.length, contains );\n+      return ((Object[]) array).clone();\n     }\n-\n-    /**\n-     * Check if array contains item.\n-     *\n-     * @param array Array to examine\n-     * @param arrayLength Number of items to check, from the start of the array\n-     * @param contains Single item to look for\n-     * @param <T> The type of the array items\n-     * @return {@code true} if {@code contains} exists in {@code array}, otherwise {@code false}.\n-     */\n-    public static <T> boolean contains( T[] array, int arrayLength, T contains )\n+    if (array instanceof boolean[])\n     {\n-        for ( int i = 0; i < arrayLength; i++ )\n-        {\n-            T item = array[i];\n-            if ( nullSafeEquals( item, contains ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      return ((boolean[]) array).clone();\n     }\n-\n-    /**\n-     * Compare two items for equality; if both are {@code null} they are regarded as equal.\n-     *\n-     * @param first First item to compare\n-     * @param other Other item to compare\n-     * @param <T> The type of the items\n-     * @return {@code true} if {@code first} and {@code other} are both {@code null} or are both equal.\n-     */\n-    public static <T> boolean nullSafeEquals( T first, T other )\n+    if (array instanceof byte[])\n     {\n-        return first == null ? first == other : first.equals( other );\n+      return ((byte[]) array).clone();\n     }\n-\n-    /**\n-     * Get the union of two arrays.\n-     * The resulting array will not contain any duplicates.\n-     *\n-     * @param first First array\n-     * @param other Other array\n-     * @param <T> The type of the arrays\n-     * @return an array containing the union of {@code first} and {@code other}. Items occurring in\n-     * both {@code first} and {@code other} will only have of the two in the resulting union.\n-     */\n-    public static <T> T[] union( T[] first, T[] other )\n+    if (array instanceof short[])\n     {\n-        if ( first == null || other == null )\n-        {\n-            return first == null ? other : first;\n-        }\n-\n-        int missing = missing( first, other );\n-        if ( missing == 0 )\n-        {\n-            return first;\n-        }\n-\n-        // An attempt to add the labels as efficiently as possible\n-        T[] union = copyOf( first, first.length + missing );\n-        int cursor = first.length;\n-        for ( T candidate : other )\n-        {\n-            if ( !contains( first, candidate ) )\n-            {\n-                union[cursor++] = candidate;\n-                missing--;\n-            }\n-        }\n-        assert missing == 0;\n-        return union;\n+      return ((short[]) array).clone();\n     }\n-\n-    /**\n-     * Check if provided array is empty\n-     * @param array - array to check\n-     * @return true if array is null or empty\n-     */\n-    public static boolean isEmpty( Object[] array )\n+    if (array instanceof char[])\n     {\n-        return (array == null) || (array.length == 0);\n+      return ((char[]) array).clone();\n     }\n-\n-    /**\n-     * Convert an array to a String using a custom delimiter.\n-     *\n-     * @param items The array to convert\n-     * @param delimiter The delimiter to use\n-     * @param <T> The type of the array\n-     * @return a {@link String} representation of {@code items} with a custom delimiter in between.\n-     */\n-    public static <T> String join( T[] items, String delimiter )\n+    if (array instanceof int[])\n     {\n-        StringBuilder builder = new StringBuilder();\n-        for ( int i = 0; i < items.length; i++ )\n-        {\n-            builder.append( i > 0 ? delimiter : \"\" ).append( items[i] );\n-        }\n-        return builder.toString();\n+      return ((int[]) array).clone();\n     }\n-\n-    /**\n-     * Create new array with all items converted into a new type using a supplied transformer.\n-     *\n-     * @param from original array\n-     * @param transformer transformer that converts an item from the original to the target type\n-     * @param toClass target type for items\n-     * @param <FROM> type of original items\n-     * @param <TO> type of the converted items\n-     * @return a new array with all items from {@code from} converted into type {@code toClass}.\n-     */\n-    public static <FROM, TO> TO[] map( FROM[] from, Function<FROM,TO> transformer, Class<TO> toClass )\n+    if (array instanceof long[])\n     {\n-        @SuppressWarnings( \"unchecked\" )\n-        TO[] result = (TO[]) Array.newInstance( toClass, from.length );\n-        for ( int i = 0; i < from.length; i++ )\n-        {\n-            result[i] = transformer.apply( from[i] );\n-        }\n-        return result;\n+      return ((long[]) array).clone();\n     }\n-\n-    /**\n-     * Create an array from a single first item and additional items following it.\n-     *\n-     * @param first the item to put first\n-     * @param additional the additional items to add to the array\n-     * @param <T> the type of the items\n-     * @return a concatenated array where {@code first} as the item at index {@code 0} and the additional\n-     * items following it.\n-     */\n-    public static <T> T[] concat( T first, T... additional )\n+    if (array instanceof float[])\n     {\n-        @SuppressWarnings( \"unchecked\" )\n-        T[] result = (T[]) Array.newInstance( additional.getClass().getComponentType(), additional.length + 1 );\n-        result[0] = first;\n-        System.arraycopy( additional, 0, result, 1, additional.length );\n-        return result;\n+      return ((float[]) array).clone();\n     }\n-\n-    /**\n-     * Create a array from a existing array and additional items following it.\n-     *\n-     * @param initial the initial array\n-     * @param additional the additional items that would be added into the initial array\n-     * @param <T> the type of the array items\n-     * @return a concatenated array and the additional items following it.\n-     */\n-    public static <T> T[] concat( T[] initial, T... additional )\n+    if (array instanceof double[])\n     {\n-        @SuppressWarnings( \"unchecked\" )\n-        T[] result = (T[]) Array.newInstance( additional.getClass().getComponentType(), initial.length + additional.length );\n-        System.arraycopy( initial, 0, result, 0, initial.length );\n-        System.arraycopy( additional, 0, result, initial.length, additional.length );\n-        return result;\n+      return ((double[]) array).clone();\n     }\n-\n-    /**\n-     * Returns the array version of the vararg argument.\n-     *\n-     * @param varargs the items\n-     * @param <T> the type of the items\n-     * @return the array version of the vararg argument.\n-     */\n-    @SafeVarargs\n-    public static <T> T[] array( T... varargs )\n+    throw new IllegalArgumentException(\"Not an array type: \" + array.getClass());\n+  }\n+\n+  /**\n+   * Count missing items in an array.\n+   * The order of items doesn't matter.\n+   *\n+   * @param array    Array to examine\n+   * @param contains Items to look for\n+   * @param <T>      The type of the array items\n+   * @return how many of the items in {@code contains} are missing from {@code array}.\n+   */\n+  public static <T> int missing(T[] array, T[] contains)\n+  {\n+    int missing = 0;\n+    for (T check : contains)\n     {\n-        return varargs;\n+      if (!contains(array, check))\n+      {\n+        missing++;\n+      }\n     }\n-\n-    public static <T> int indexOf( T[] array, T item )\n+    return missing;\n+  }\n+\n+  /**\n+   * Count items from a different array contained in an array.\n+   * The order of items doesn't matter.\n+   *\n+   * @param array    Array to examine\n+   * @param contains Items to look for\n+   * @param <T>      The type of the array items\n+   * @return {@code true} if all items in {@code contains} exists in {@code array}, otherwise {@code false}.\n+   */\n+  public static <T> boolean containsAll(T[] array, T[] contains)\n+  {\n+    for (T check : contains)\n     {\n-        for ( int i = 0; i < array.length; i++ )\n-        {\n-            if ( array[i].equals( item ) )\n-            {\n-                return i;\n-            }\n-        }\n-        return -1;\n+      if (!contains(array, check))\n+      {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Check if array contains item.\n+   *\n+   * @param array    Array to examine\n+   * @param contains Single item to look for\n+   * @param <T>      The type of the array items\n+   * @return {@code true} if {@code contains} exists in {@code array}, otherwise {@code false}.\n+   */\n+  public static <T> boolean contains(T[] array, T contains)\n+  {\n+    return contains(array, array.length, contains);\n+  }\n+\n+  /**\n+   * Check if array contains item.\n+   *\n+   * @param array       Array to examine\n+   * @param arrayLength Number of items to check, from the start of the array\n+   * @param contains    Single item to look for\n+   * @param <T>         The type of the array items\n+   * @return {@code true} if {@code contains} exists in {@code array}, otherwise {@code false}.\n+   */\n+  public static <T> boolean contains(T[] array, int arrayLength, T contains)\n+  {\n+    for (int i = 0; i < arrayLength; i++)\n+    {\n+      T item = array[i];\n+      if (nullSafeEquals(item, contains))\n+      {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Compare two items for equality; if both are {@code null} they are regarded as equal.\n+   *\n+   * @param first First item to compare\n+   * @param other Other item to compare\n+   * @param <T>   The type of the items\n+   * @return {@code true} if {@code first} and {@code other} are both {@code null} or are both equal.\n+   */\n+  public static <T> boolean nullSafeEquals(T first, T other)\n+  {\n+    return first == null ? first == other : first.equals(other);\n+  }\n+\n+  /**\n+   * Get the union of two arrays.\n+   * The resulting array will not contain any duplicates.\n+   *\n+   * @param first First array\n+   * @param other Other array\n+   * @param <T>   The type of the arrays\n+   * @return an array containing the union of {@code first} and {@code other}. Items occurring in\n+   * both {@code first} and {@code other} will only have of the two in the resulting union.\n+   */\n+  public static <T> T[] union(T[] first, T[] other)\n+  {\n+    if (first == null || other == null)\n+    {\n+      return first == null ? other : first;\n     }\n \n-    public static <T> T[] without( T[] source, T... toRemove )\n+    int missing = missing(first, other);\n+    if (missing == 0)\n     {\n-        T[] result = source.clone();\n-        int length = result.length;\n-        for ( T candidate : toRemove )\n-        {\n-            int index = indexOf( result, candidate );\n-            if ( index != -1 )\n-            {\n-                if ( index + 1 < length )\n-                {   // not the last one\n-                    result[index] = result[length - 1];\n-                }\n-                length--;\n-            }\n-        }\n-        return length == result.length ? result : Arrays.copyOf( result, length );\n+      return first;\n     }\n \n-    public static <T> void reverse( T[] array )\n+    // An attempt to add the labels as efficiently as possible\n+    T[] union = copyOf(first, first.length + missing);\n+    int cursor = first.length;\n+    for (T candidate : other)\n     {\n-        for ( int low = 0, high = array.length - 1; high - low > 0; low++, high-- )\n-        {\n-            T lowItem = array[low];\n-            array[low] = array[high];\n-            array[high] = lowItem;\n+      if (!contains(first, candidate))\n+      {\n+        union[cursor++] = candidate;\n+        missing--;\n+      }\n+    }\n+    assert missing == 0;\n+    return union;\n+  }\n+\n+  /**\n+   * Check if provided array is empty\n+   *\n+   * @param array - array to check\n+   * @return true if array is null or empty\n+   */\n+  public static boolean isEmpty(Object[] array)\n+  {\n+    return (array == null) || (array.length == 0);\n+  }\n+\n+  /**\n+   * Convert an array to a String using a custom delimiter.\n+   *\n+   * @param items     The array to convert\n+   * @param delimiter The delimiter to use\n+   * @param <T>       The type of the array\n+   * @return a {@link String} representation of {@code items} with a custom delimiter in between.\n+   */\n+  public static <T> String join(T[] items, String delimiter)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (int i = 0; i < items.length; i++)\n+    {\n+      builder.append(i > 0 ? delimiter : \"\").append(items[i]);\n+    }\n+    return builder.toString();\n+  }\n+\n+  /**\n+   * Create new array with all items converted into a new type using a supplied transformer.\n+   *\n+   * @param from        original array\n+   * @param transformer transformer that converts an item from the original to the target type\n+   * @param toClass     target type for items\n+   * @param <FROM>      type of original items\n+   * @param <TO>        type of the converted items\n+   * @return a new array with all items from {@code from} converted into type {@code toClass}.\n+   */\n+  public static <FROM, TO> TO[] map(FROM[] from, Function<FROM, TO> transformer, Class<TO> toClass)\n+  {\n+    @SuppressWarnings(\"unchecked\")\n+    TO[] result = (TO[]) Array.newInstance(toClass, from.length);\n+    for (int i = 0; i < from.length; i++)\n+    {\n+      result[i] = transformer.apply(from[i]);\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * Create an array from a single first item and additional items following it.\n+   *\n+   * @param first      the item to put first\n+   * @param additional the additional items to add to the array\n+   * @param <T>        the type of the items\n+   * @return a concatenated array where {@code first} as the item at index {@code 0} and the additional\n+   * items following it.\n+   */\n+  public static <T> T[] concat(T first, T... additional)\n+  {\n+    @SuppressWarnings(\"unchecked\")\n+    T[] result = (T[]) Array.newInstance(additional.getClass().getComponentType(), additional.length + 1);\n+    result[0] = first;\n+    System.arraycopy(additional, 0, result, 1, additional.length);\n+    return result;\n+  }\n+\n+  /**\n+   * Create a array from a existing array and additional items following it.\n+   *\n+   * @param initial    the initial array\n+   * @param additional the additional items that would be added into the initial array\n+   * @param <T>        the type of the array items\n+   * @return a concatenated array and the additional items following it.\n+   */\n+  public static <T> T[] concat(T[] initial, T... additional)\n+  {\n+    @SuppressWarnings(\"unchecked\")\n+    T[] result = (T[]) Array.newInstance(additional.getClass().getComponentType(), initial.length + additional.length);\n+    System.arraycopy(initial, 0, result, 0, initial.length);\n+    System.arraycopy(additional, 0, result, initial.length, additional.length);\n+    return result;\n+  }\n+\n+  /**\n+   * Returns the array version of the vararg argument.\n+   *\n+   * @param varargs the items\n+   * @param <T>     the type of the items\n+   * @return the array version of the vararg argument.\n+   */\n+  @SafeVarargs\n+  public static <T> T[] array(T... varargs)\n+  {\n+    return varargs;\n+  }\n+\n+  public static <T> int indexOf(T[] array, T item)\n+  {\n+    for (int i = 0; i < array.length; i++)\n+    {\n+      if (array[i].equals(item))\n+      {\n+        return i;\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  public static <T> T[] without(T[] source, T... toRemove)\n+  {\n+    T[] result = source.clone();\n+    int length = result.length;\n+    for (T candidate : toRemove)\n+    {\n+      int index = indexOf(result, candidate);\n+      if (index != -1)\n+      {\n+        if (index + 1 < length)\n+        {   // not the last one\n+          result[index] = result[length - 1];\n         }\n+        length--;\n+      }\n     }\n+    return length == result.length ? result : Arrays.copyOf(result, length);\n+  }\n \n-    private ArrayUtil()\n-    {   // No instances allowed\n+  public static <T> void reverse(T[] array)\n+  {\n+    for (int low = 0, high = array.length - 1; high - low > 0; low++, high--)\n+    {\n+      T lowItem = array[low];\n+      array[low] = array[high];\n+      array[high] = lowItem;\n     }\n+  }\n+\n+  private ArrayUtil()\n+  {   // No instances allowed\n+  }\n }\n",
            "diff_size": 647
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "column": "119",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2006/ArrayUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2006/ArrayUtil.java\nindex 91c9f2ec13b..835a9b4f03b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2006/ArrayUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2006/ArrayUtil.java\n@@ -40,7 +40,8 @@ public abstract class ArrayUtil\n         {\n             result = 31 * result + Array.get( array, i ).hashCode();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     public interface ArrayEquality\n@@ -84,31 +85,38 @@ public abstract class ArrayUtil\n             {\n                 return Boolean.class;\n             }\n-            if ( type.equals( Byte.TYPE ) )\n+\n+if ( type.equals( Byte.TYPE ) )\n             {\n                 return Byte.class;\n             }\n-            if ( type.equals( Short.TYPE ) )\n+\n+if ( type.equals( Short.TYPE ) )\n             {\n                 return Short.class;\n             }\n-            if ( type.equals( Character.TYPE ) )\n+\n+if ( type.equals( Character.TYPE ) )\n             {\n                 return Character.class;\n             }\n-            if ( type.equals( Integer.TYPE ) )\n+\n+if ( type.equals( Integer.TYPE ) )\n             {\n                 return Integer.class;\n             }\n-            if ( type.equals( Long.TYPE ) )\n+\n+if ( type.equals( Long.TYPE ) )\n             {\n                 return Long.class;\n             }\n-            if ( type.equals( Float.TYPE ) )\n+\n+if ( type.equals( Float.TYPE ) )\n             {\n                 return Float.class;\n             }\n-            if ( type.equals( Double.TYPE ) )\n+\n+if ( type.equals( Double.TYPE ) )\n             {\n                 return Double.class;\n             }\n@@ -145,8 +153,7 @@ public abstract class ArrayUtil\n         assert otherArray.getClass().isArray() : otherArray + \" is not an array\";\n \n         int length;\n-        if ( equality.typeEquals( firstArray.getClass().getComponentType(), otherArray.getClass().getComponentType() )\n-                && (length = Array.getLength( firstArray )) == Array.getLength( otherArray ) )\n+        if ( equality.typeEquals( firstArray.getClass().getComponentType(), otherArray.getClass().getComponentType() )&& (length = Array.getLength( firstArray )) == Array.getLength( otherArray ) )\n         {\n             for ( int i = 0; i < length; i++ )\n             {\n@@ -166,35 +173,43 @@ public abstract class ArrayUtil\n         {\n             return ((Object[]) array).clone();\n         }\n-        if ( array instanceof boolean[] )\n+\n+if ( array instanceof boolean[] )\n         {\n             return ((boolean[]) array).clone();\n         }\n-        if ( array instanceof byte[] )\n+\n+if ( array instanceof byte[] )\n         {\n             return ((byte[]) array).clone();\n         }\n-        if ( array instanceof short[] )\n+\n+if ( array instanceof short[] )\n         {\n             return ((short[]) array).clone();\n         }\n-        if ( array instanceof char[] )\n+\n+if ( array instanceof char[] )\n         {\n             return ((char[]) array).clone();\n         }\n-        if ( array instanceof int[] )\n+\n+if ( array instanceof int[] )\n         {\n             return ((int[]) array).clone();\n         }\n-        if ( array instanceof long[] )\n+\n+if ( array instanceof long[] )\n         {\n             return ((long[]) array).clone();\n         }\n-        if ( array instanceof float[] )\n+\n+if ( array instanceof float[] )\n         {\n             return ((float[]) array).clone();\n         }\n-        if ( array instanceof double[] )\n+\n+if ( array instanceof double[] )\n         {\n             return ((double[]) array).clone();\n         }\n@@ -337,7 +352,7 @@ public abstract class ArrayUtil\n      */\n     public static boolean isEmpty( Object[] array )\n     {\n-        return (array == null) || (array.length == 0);\n+        return ( array == null ) || (array.length == 0 );\n     }\n \n     /**\n@@ -355,7 +370,8 @@ public abstract class ArrayUtil\n         {\n             builder.append( i > 0 ? delimiter : \"\" ).append( items[i] );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     /**\n@@ -368,7 +384,7 @@ public abstract class ArrayUtil\n      * @param <TO> type of the converted items\n      * @return a new array with all items from {@code from} converted into type {@code toClass}.\n      */\n-    public static <FROM, TO> TO[] map( FROM[] from, Function<FROM,TO> transformer, Class<TO> toClass )\n+    public static <FROM,TO> TO[] map( FROM[] from, Function<FROM,TO> transformer, Class<TO> toClass )\n     {\n         @SuppressWarnings( \"unchecked\" )\n         TO[] result = (TO[]) Array.newInstance( toClass, from.length );\n@@ -376,7 +392,8 @@ public abstract class ArrayUtil\n         {\n             result[i] = transformer.apply( from[i] );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -449,7 +466,8 @@ public abstract class ArrayUtil\n             if ( index != -1 )\n             {\n                 if ( index + 1 < length )\n-                {   // not the last one\n+                {\n+    // not the last one\n                     result[index] = result[length - 1];\n                 }\n                 length--;\n@@ -469,6 +487,7 @@ public abstract class ArrayUtil\n     }\n \n     private ArrayUtil()\n-    {   // No instances allowed\n+    {\n+    // No instances allowed\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}