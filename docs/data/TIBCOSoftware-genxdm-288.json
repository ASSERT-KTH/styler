{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "288",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public final class StringRegExPattern\n{\n\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n\t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n\t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n\tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/288/StringRegExPattern.java\nindex 3f7444b8c10..a39bea19658 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/288/StringRegExPattern.java\n@@ -25,7 +25,7 @@ import org.genxdm.processor.w3c.xs.regex.impl.nfa.NfaFactory;\n \n public final class StringRegExPattern\n {\n-\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n+private final RegExPattern<StringRegExPatternTerm, String> pattern;\n \t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n \t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n \tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/288/StringRegExPattern.java\nindex 3f7444b8c10..b0d8d29644f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/288/StringRegExPattern.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.regex.impl.string;\n \n import java.util.List;\n@@ -23,37 +24,34 @@ import org.genxdm.processor.w3c.xs.regex.api.RegExPattern;\n import org.genxdm.processor.w3c.xs.regex.impl.nfa.NfaFactory;\n \n \n-public final class StringRegExPattern\n-{\n-\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n-\t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n-\t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n-\tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n-\n-\tStringRegExPattern(final RegExPattern<StringRegExPatternTerm, String> pattern)\n-\t{\n-\t\tthis.pattern = pattern;\n-\t}\n-\n-\t/**\n-\t * Convenience for creating a pattern directly from a string representation.\n-\t */\n-\tpublic static StringRegExPattern compile(final String regexp) throws StringRegExException\n-\t{\n-\t\tPreCondition.assertArgumentNotNull(regexp, \"regexp\");\n-\t\tfinal StringRegExPatternTerm pt = StringRegExParser.parse(regexp);\n-\t\tPreCondition.assertArgumentNotNull(pt, \"pt\");\n-\t\treturn new StringRegExPattern(factory.newPattern(pt, StringRegExBridge.SINGLETON));\n-\t}\n-\n-\tpublic boolean matches(final String strval, final List<StringRegExPatternTerm> followers)\n-\t{\n-\t\treturn pattern.matches(new StringRegExPatternInput(strval), followers);\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\treturn pattern.toString();\n-\t}\n+public final class StringRegExPattern {\n+    private final RegExPattern<StringRegExPatternTerm, String> pattern;\n+\n+    // private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n+    // DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n+    private static final RegExFactory<StringRegExPatternTerm, String> factory =\n+        new NfaFactory<StringRegExPatternTerm, String>();\n+\n+    StringRegExPattern(final RegExPattern<StringRegExPatternTerm, String> pattern) {\n+        this.pattern = pattern;\n+    }\n+\n+    /**\n+     * Convenience for creating a pattern directly from a string representation.\n+     */\n+    public static StringRegExPattern compile(final String regexp) throws StringRegExException {\n+        PreCondition.assertArgumentNotNull(regexp, \"regexp\");\n+        final StringRegExPatternTerm pt = StringRegExParser.parse(regexp);\n+        PreCondition.assertArgumentNotNull(pt, \"pt\");\n+        return new StringRegExPattern(factory.newPattern(pt, StringRegExBridge.SINGLETON));\n+    }\n+\n+    public boolean matches(final String strval, final List<StringRegExPatternTerm> followers) {\n+        return pattern.matches(new StringRegExPatternInput(strval), followers);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return pattern.toString();\n+    }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/288/StringRegExPattern.java\nindex 3f7444b8c10..e24b9e0cab4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/288/StringRegExPattern.java\n@@ -25,35 +25,35 @@ import org.genxdm.processor.w3c.xs.regex.impl.nfa.NfaFactory;\n \n public final class StringRegExPattern\n {\n-\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n+    private final RegExPattern<StringRegExPatternTerm, String> pattern;\n \t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n \t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n \tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n \n \tStringRegExPattern(final RegExPattern<StringRegExPatternTerm, String> pattern)\n \t{\n-\t\tthis.pattern = pattern;\n-\t}\n+    this.pattern = pattern;\n+    }\n \n \t/**\n \t * Convenience for creating a pattern directly from a string representation.\n \t */\n \tpublic static StringRegExPattern compile(final String regexp) throws StringRegExException\n \t{\n-\t\tPreCondition.assertArgumentNotNull(regexp, \"regexp\");\n+    PreCondition.assertArgumentNotNull(regexp, \"regexp\");\n \t\tfinal StringRegExPatternTerm pt = StringRegExParser.parse(regexp);\n \t\tPreCondition.assertArgumentNotNull(pt, \"pt\");\n \t\treturn new StringRegExPattern(factory.newPattern(pt, StringRegExBridge.SINGLETON));\n-\t}\n+    }\n \n \tpublic boolean matches(final String strval, final List<StringRegExPatternTerm> followers)\n \t{\n-\t\treturn pattern.matches(new StringRegExPatternInput(strval), followers);\n-\t}\n+    return pattern.matches(new StringRegExPatternInput(strval), followers);\n+    }\n \n \t@Override\n \tpublic String toString()\n \t{\n-\t\treturn pattern.toString();\n-\t}\n-}\n+    return pattern.toString();\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/288/StringRegExPattern.java\nindex 3f7444b8c10..ee7a45c73f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/288/StringRegExPattern.java\n@@ -16,44 +16,45 @@\n package org.genxdm.processor.w3c.xs.regex.impl.string;\n \n import java.util.List;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.processor.w3c.xs.regex.api.RegExFactory;\n import org.genxdm.processor.w3c.xs.regex.api.RegExPattern;\n import org.genxdm.processor.w3c.xs.regex.impl.nfa.NfaFactory;\n \n-\n public final class StringRegExPattern\n {\n-\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n-\t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n-\t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n-\tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n-\n-\tStringRegExPattern(final RegExPattern<StringRegExPatternTerm, String> pattern)\n-\t{\n-\t\tthis.pattern = pattern;\n-\t}\n-\n-\t/**\n-\t * Convenience for creating a pattern directly from a string representation.\n-\t */\n-\tpublic static StringRegExPattern compile(final String regexp) throws StringRegExException\n-\t{\n-\t\tPreCondition.assertArgumentNotNull(regexp, \"regexp\");\n-\t\tfinal StringRegExPatternTerm pt = StringRegExParser.parse(regexp);\n-\t\tPreCondition.assertArgumentNotNull(pt, \"pt\");\n-\t\treturn new StringRegExPattern(factory.newPattern(pt, StringRegExBridge.SINGLETON));\n-\t}\n-\n-\tpublic boolean matches(final String strval, final List<StringRegExPatternTerm> followers)\n-\t{\n-\t\treturn pattern.matches(new StringRegExPatternInput(strval), followers);\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\treturn pattern.toString();\n-\t}\n-}\n+    private final RegExPattern<StringRegExPatternTerm, String> pattern;\n+    // private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n+    // DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n+    private static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n+\n+    StringRegExPattern(final RegExPattern<StringRegExPatternTerm, String> pattern)\n+    {\n+        this.pattern = pattern;\n+    }\n+\n+    /**\n+     * Convenience for creating a pattern directly from a string representation.\n+     */\n+\n+    public static StringRegExPattern compile(final String regexp)\n+        throws StringRegExException\n+    {\n+        PreCondition.assertArgumentNotNull(regexp, \"regexp\");\n+\n+        final StringRegExPatternTerm pt = StringRegExParser.parse(regexp);\n+        PreCondition.assertArgumentNotNull(pt, \"pt\");\n+        return new StringRegExPattern(factory.newPattern(pt, StringRegExBridge.SINGLETON));\n+    }\n+\n+    public boolean matches(final String strval, final List<StringRegExPatternTerm> followers)\n+    {\n+        return pattern.matches(new StringRegExPatternInput(strval), followers);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return pattern.toString();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/288/StringRegExPattern.java\nindex 3f7444b8c10..a39bea19658 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/288/StringRegExPattern.java\n@@ -25,7 +25,7 @@ import org.genxdm.processor.w3c.xs.regex.impl.nfa.NfaFactory;\n \n public final class StringRegExPattern\n {\n-\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n+private final RegExPattern<StringRegExPatternTerm, String> pattern;\n \t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n \t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n \tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/288/StringRegExPattern.java\nindex 3f7444b8c10..a16f0763d70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/288/StringRegExPattern.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/288/StringRegExPattern.java\n@@ -25,7 +25,7 @@ import org.genxdm.processor.w3c.xs.regex.impl.nfa.NfaFactory;\n \n public final class StringRegExPattern\n {\n-\tprivate final RegExPattern<StringRegExPatternTerm, String> pattern;\n+    private final RegExPattern<StringRegExPatternTerm, String> pattern;\n \t// private static final RegExFactory<StringRegExPatternTerm, String> factory = new\n \t// DefaultRegExFactory<StringRegExPatternTerm, String>().getInstance();\n \tprivate static final RegExFactory<StringRegExPatternTerm, String> factory = new NfaFactory<StringRegExPatternTerm, String>();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}