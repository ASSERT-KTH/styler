{
    "project_name": "Activiti-Activiti",
    "error_id": "978",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.spring.boot;\n\nimport java.io.IOException;\nimport java.util.Collections;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/978/ProcessEngineAutoConfiguration.java\nindex 3ce1c442bbd..a1ba7dd183b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/978/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import java.io.IOException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/978/ProcessEngineAutoConfiguration.java\nindex 3ce1c442bbd..c93353b285d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/978/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import java.io.IOException;\n@@ -75,7 +76,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n         SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n         conf.setConfigurators(processEngineConfigurators);\n         configureProcessDefinitionResources(processDefinitionResourceFinder,\n-                                            conf);\n+                conf);\n         conf.setDataSource(dataSource);\n         conf.setTransactionManager(transactionManager);\n \n@@ -86,7 +87,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n         conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());\n         conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n         addAsyncPropertyValidator(activitiProperties,\n-                                  conf);\n+                conf);\n         conf.setMailServerHost(activitiProperties.getMailServerHost());\n         conf.setMailServerPort(activitiProperties.getMailServerPort());\n         conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n@@ -134,7 +135,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n     }\n \n     protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties,\n-                                           SpringProcessEngineConfiguration conf) {\n+                                             SpringProcessEngineConfiguration conf) {\n         if (!activitiProperties.isAsyncExecutorActivate()) {\n             ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n             springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n@@ -161,7 +162,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n     public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties,\n                                                                            ResourcePatternResolver resourcePatternResolver) {\n         return new ProcessDefinitionResourceFinder(activitiProperties,\n-                                                   resourcePatternResolver);\n+                resourcePatternResolver);\n     }\n \n     @Bean\n@@ -171,20 +172,20 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n                                                                      @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners,\n                                                                      ApplicationEventPublisher eventPublisher) {\n         return new ProcessDeployedEventProducer(repositoryService,\n-                                                converter,\n-                                                Optional.ofNullable(listeners)\n-                                                        .orElse(Collections.emptyList()),\n-                                                eventPublisher);\n+                converter,\n+                Optional.ofNullable(listeners)\n+                        .orElse(Collections.emptyList()),\n+                eventPublisher);\n     }\n \n     @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    @ConditionalOnMissingBean (name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+    @ConditionalOnMissingBean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n     public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,\n                                                                                                            ProcessVariablesInitiator processVariablesInitiator) {\n         return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n-                                                                   processVariablesInitiator);\n+                processVariablesInitiator);\n     }\n-    \n+\n     @Bean\n     @Order(Ordered.HIGHEST_PRECEDENCE)\n     public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n@@ -197,11 +198,11 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n             configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n             configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n             configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n-            \n+\n             configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n             configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n             configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n-            \n+\n             configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n             configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n \n@@ -213,6 +214,6 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n             configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n         };\n     }\n-    \n+\n }\n \n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/978/ProcessEngineAutoConfiguration.java\nindex 3ce1c442bbd..b88dcf56038 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/978/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import java.io.IOException;\n@@ -49,9 +50,9 @@ import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.transaction.PlatformTransactionManager;\n \n @Configuration\n-@AutoConfigureAfter(name = {\"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\",\n-        \"org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration\"})\n-@EnableConfigurationProperties({ActivitiProperties.class, AsyncExecutorProperties.class})\n+@AutoConfigureAfter(name = { \"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\", \"org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration\"})\n+@EnableConfigurationProperties({\n+  ActivitiProperties.class, AsyncExecutorProperties.class })\n public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoConfiguration {\n \n     public static final String BEHAVIOR_FACTORY_MAPPING_CONFIGURER = \"behaviorFactoryMappingConfigurer\";\n@@ -63,20 +64,17 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n \n     @Bean\n     @ConditionalOnMissingBean\n-    public SpringProcessEngineConfiguration springProcessEngineConfiguration(\n-            DataSource dataSource,\n+    public SpringProcessEngineConfiguration springProcessEngineConfiguration(DataSource dataSource,\n             PlatformTransactionManager transactionManager,\n             SpringAsyncExecutor springAsyncExecutor,\n             ActivitiProperties activitiProperties,\n             ProcessDefinitionResourceFinder processDefinitionResourceFinder,\n-            @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,\n-            @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {\n-\n-        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n+                                                                    @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,\n+                                                                    @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {\n+  SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n         conf.setConfigurators(processEngineConfigurators);\n-        configureProcessDefinitionResources(processDefinitionResourceFinder,\n-                                            conf);\n-        conf.setDataSource(dataSource);\n+        configureProcessDefinitionResources(processDefinitionResourceFinder, conf);\n+conf.setDataSource(dataSource);\n         conf.setTransactionManager(transactionManager);\n \n         conf.setAsyncExecutor(springAsyncExecutor);\n@@ -87,7 +85,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n         conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n         addAsyncPropertyValidator(activitiProperties,\n                                   conf);\n-        conf.setMailServerHost(activitiProperties.getMailServerHost());\n+conf.setMailServerHost(activitiProperties.getMailServerHost());\n         conf.setMailServerPort(activitiProperties.getMailServerPort());\n         conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n         conf.setMailServerPassword(activitiProperties.getMailServerPassword());\n@@ -135,7 +133,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n \n     protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties,\n                                            SpringProcessEngineConfiguration conf) {\n-        if (!activitiProperties.isAsyncExecutorActivate()) {\n+  if (!activitiProperties.isAsyncExecutorActivate()) {\n             ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n             springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n             if (conf.getProcessValidator() == null) {\n@@ -150,7 +148,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n \n     private void configureProcessDefinitionResources(ProcessDefinitionResourceFinder processDefinitionResourceFinder,\n                                                      SpringProcessEngineConfiguration conf) throws IOException {\n-        List<Resource> procDefResources = processDefinitionResourceFinder.discoverProcessDefinitionResources();\n+  List<Resource> procDefResources = processDefinitionResourceFinder.discoverProcessDefinitionResources();\n         if (!procDefResources.isEmpty()) {\n             conf.setDeploymentResources(procDefResources.toArray(new Resource[0]));\n         }\n@@ -158,9 +156,8 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n \n     @Bean\n     @ConditionalOnMissingBean\n-    public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties,\n-                                                                           ResourcePatternResolver resourcePatternResolver) {\n-        return new ProcessDefinitionResourceFinder(activitiProperties,\n+    public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties, ResourcePatternResolver resourcePatternResolver) {\n+    return new ProcessDefinitionResourceFinder(activitiProperties,\n                                                    resourcePatternResolver);\n     }\n \n@@ -168,25 +165,24 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n     @ConditionalOnMissingBean\n     public ProcessDeployedEventProducer processDeployedEventProducer(RepositoryService repositoryService,\n                                                                      APIProcessDefinitionConverter converter,\n-                                                                     @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners,\n+                                                                    @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners,\n                                                                      ApplicationEventPublisher eventPublisher) {\n-        return new ProcessDeployedEventProducer(repositoryService,\n-                                                converter,\n+    return new ProcessDeployedEventProducer(repositoryService,\n+converter,\n                                                 Optional.ofNullable(listeners)\n                                                         .orElse(Collections.emptyList()),\n                                                 eventPublisher);\n     }\n \n     @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    @ConditionalOnMissingBean (name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,\n-                                                                                                           ProcessVariablesInitiator processVariablesInitiator) {\n-        return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n+    @ConditionalOnMissingBean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+    public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider, ProcessVariablesInitiator processVariablesInitiator) {\n+    return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n                                                                    processVariablesInitiator);\n-    }\n-    \n-    @Bean\n-    @Order(Ordered.HIGHEST_PRECEDENCE)\n+  }\n+\n+@Bean\n+@Order(Ordered.HIGHEST_PRECEDENCE)\n     public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n         return (configuration) -> {\n             configuration.setAsyncExecutorMessageQueueMode(properties.isMessageQueueMode());\n@@ -197,13 +193,11 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n             configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n             configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n             configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n-            \n-            configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n-            configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n+configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n+configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n             configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n-            \n-            configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n-            configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n+configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n+configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n \n             configuration.setAsyncExecutorSecondsToWaitOnShutdown(properties.getSecondsToWaitOnShutdown());\n             configuration.setAsyncExecutorThreadKeepAliveTime(properties.getKeepAliveTime());\n@@ -213,6 +207,4 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n             configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n         };\n     }\n-    \n-}\n-\n+    }\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "column": "26",
                    "severity": "error",
                    "message": "WhitespaceAround: '=' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 400).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/978/ProcessEngineAutoConfiguration.java\nindex 3ce1c442bbd..953de24de79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/978/ProcessEngineAutoConfiguration.java\n@@ -17,9 +17,7 @@ import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-\n import javax.sql.DataSource;\n-\n import org.activiti.api.process.model.events.ProcessDeployedEvent;\n import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;\n import org.activiti.api.runtime.shared.identity.UserGroupManager;\n@@ -49,170 +47,137 @@ import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.transaction.PlatformTransactionManager;\n \n @Configuration\n-@AutoConfigureAfter(name = {\"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\",\n-        \"org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration\"})\n+@AutoConfigureAfter(name ={\"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\", \"org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration\"})\n @EnableConfigurationProperties({ActivitiProperties.class, AsyncExecutorProperties.class})\n public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoConfiguration {\n \n-    public static final String BEHAVIOR_FACTORY_MAPPING_CONFIGURER = \"behaviorFactoryMappingConfigurer\";\n-    private final UserGroupManager userGroupManager;\n-\n-    public ProcessEngineAutoConfiguration(UserGroupManager userGroupManager) {\n-        this.userGroupManager = userGroupManager;\n+  public static final String BEHAVIOR_FACTORY_MAPPING_CONFIGURER = \"behaviorFactoryMappingConfigurer\";\n+\n+  private final UserGroupManager userGroupManager;\n+\n+  public ProcessEngineAutoConfiguration(UserGroupManager userGroupManager) {\n+    this.userGroupManager = userGroupManager;\n+  }\n+\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public SpringProcessEngineConfiguration springProcessEngineConfiguration(DataSource dataSource, PlatformTransactionManager transactionManager, SpringAsyncExecutor springAsyncExecutor, ActivitiProperties activitiProperties, ProcessDefinitionResourceFinder processDefinitionResourceFinder, @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,\n+                                                                           @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {\n+    SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n+    conf.setConfigurators(processEngineConfigurators);\n+    configureProcessDefinitionResources(processDefinitionResourceFinder, conf);\n+    conf.setDataSource(dataSource);\n+    conf.setTransactionManager(transactionManager);\n+    conf.setAsyncExecutor(springAsyncExecutor);\n+    conf.setDeploymentName(activitiProperties.getDeploymentName());\n+    conf.setDatabaseSchema(activitiProperties.getDatabaseSchema());\n+    conf.setDatabaseSchemaUpdate(activitiProperties.getDatabaseSchemaUpdate());\n+    conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());\n+    conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n+    addAsyncPropertyValidator(activitiProperties, conf);\n+    conf.setMailServerHost(activitiProperties.getMailServerHost());\n+    conf.setMailServerPort(activitiProperties.getMailServerPort());\n+    conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n+    conf.setMailServerPassword(activitiProperties.getMailServerPassword());\n+    conf.setMailServerDefaultFrom(activitiProperties.getMailServerDefaultFrom());\n+    conf.setMailServerUseSSL(activitiProperties.isMailServerUseSsl());\n+    conf.setMailServerUseTLS(activitiProperties.isMailServerUseTls());\n+    if (userGroupManager != null) {\n+      conf.setUserGroupManager(userGroupManager);\n     }\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public SpringProcessEngineConfiguration springProcessEngineConfiguration(\n-            DataSource dataSource,\n-            PlatformTransactionManager transactionManager,\n-            SpringAsyncExecutor springAsyncExecutor,\n-            ActivitiProperties activitiProperties,\n-            ProcessDefinitionResourceFinder processDefinitionResourceFinder,\n-            @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,\n-            @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {\n-\n-        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n-        conf.setConfigurators(processEngineConfigurators);\n-        configureProcessDefinitionResources(processDefinitionResourceFinder,\n-                                            conf);\n-        conf.setDataSource(dataSource);\n-        conf.setTransactionManager(transactionManager);\n-\n-        conf.setAsyncExecutor(springAsyncExecutor);\n-        conf.setDeploymentName(activitiProperties.getDeploymentName());\n-        conf.setDatabaseSchema(activitiProperties.getDatabaseSchema());\n-        conf.setDatabaseSchemaUpdate(activitiProperties.getDatabaseSchemaUpdate());\n-        conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());\n-        conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n-        addAsyncPropertyValidator(activitiProperties,\n-                                  conf);\n-        conf.setMailServerHost(activitiProperties.getMailServerHost());\n-        conf.setMailServerPort(activitiProperties.getMailServerPort());\n-        conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n-        conf.setMailServerPassword(activitiProperties.getMailServerPassword());\n-        conf.setMailServerDefaultFrom(activitiProperties.getMailServerDefaultFrom());\n-        conf.setMailServerUseSSL(activitiProperties.isMailServerUseSsl());\n-        conf.setMailServerUseTLS(activitiProperties.isMailServerUseTls());\n-\n-        if (userGroupManager != null) {\n-            conf.setUserGroupManager(userGroupManager);\n-        }\n-\n-        conf.setHistoryLevel(activitiProperties.getHistoryLevel());\n-        conf.setCopyVariablesToLocalForTasks(activitiProperties.isCopyVariablesToLocalForTasks());\n-        conf.setSerializePOJOsInVariablesToJson(activitiProperties.isSerializePOJOsInVariablesToJson());\n-        conf.setJavaClassFieldForJackson(activitiProperties.getJavaClassFieldForJackson());\n-\n-        if (activitiProperties.getCustomMybatisMappers() != null) {\n-            conf.setCustomMybatisMappers(getCustomMybatisMapperClasses(activitiProperties.getCustomMybatisMappers()));\n-        }\n-\n-        if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n-            conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n-        }\n-\n-        if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n-            conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n-        }\n-\n-        if (activitiProperties.isUseStrongUuids()) {\n-            conf.setIdGenerator(new StrongUuidGenerator());\n-        }\n-\n-        if (activitiProperties.getDeploymentMode() != null) {\n-            conf.setDeploymentMode(activitiProperties.getDeploymentMode());\n-        }\n-\n-        if (processEngineConfigurationConfigurers != null) {\n-            for (ProcessEngineConfigurationConfigurer processEngineConfigurationConfigurer : processEngineConfigurationConfigurers) {\n-                processEngineConfigurationConfigurer.configure(conf);\n-            }\n-        }\n-        springAsyncExecutor.applyConfig(conf);\n-        return conf;\n+    conf.setHistoryLevel(activitiProperties.getHistoryLevel());\n+    conf.setCopyVariablesToLocalForTasks(activitiProperties.isCopyVariablesToLocalForTasks());\n+    conf.setSerializePOJOsInVariablesToJson(activitiProperties.isSerializePOJOsInVariablesToJson());\n+    conf.setJavaClassFieldForJackson(activitiProperties.getJavaClassFieldForJackson());\n+    if (activitiProperties.getCustomMybatisMappers() != null) {\n+      conf.setCustomMybatisMappers(getCustomMybatisMapperClasses(activitiProperties.getCustomMybatisMappers()));\n     }\n-\n-    protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties,\n-                                           SpringProcessEngineConfiguration conf) {\n-        if (!activitiProperties.isAsyncExecutorActivate()) {\n-            ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n-            springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n-            if (conf.getProcessValidator() == null) {\n-                ProcessValidatorImpl processValidator = new ProcessValidatorImpl();\n-                processValidator.addValidatorSet(springBootStarterValidatorSet);\n-                conf.setProcessValidator(processValidator);\n-            } else {\n-                conf.getProcessValidator().getValidatorSets().add(springBootStarterValidatorSet);\n-            }\n-        }\n+    if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n+      conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n     }\n-\n-    private void configureProcessDefinitionResources(ProcessDefinitionResourceFinder processDefinitionResourceFinder,\n-                                                     SpringProcessEngineConfiguration conf) throws IOException {\n-        List<Resource> procDefResources = processDefinitionResourceFinder.discoverProcessDefinitionResources();\n-        if (!procDefResources.isEmpty()) {\n-            conf.setDeploymentResources(procDefResources.toArray(new Resource[0]));\n-        }\n+    if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n+      conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n     }\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties,\n-                                                                           ResourcePatternResolver resourcePatternResolver) {\n-        return new ProcessDefinitionResourceFinder(activitiProperties,\n-                                                   resourcePatternResolver);\n+    if (activitiProperties.isUseStrongUuids()) {\n+      conf.setIdGenerator(new StrongUuidGenerator());\n     }\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ProcessDeployedEventProducer processDeployedEventProducer(RepositoryService repositoryService,\n-                                                                     APIProcessDefinitionConverter converter,\n-                                                                     @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners,\n-                                                                     ApplicationEventPublisher eventPublisher) {\n-        return new ProcessDeployedEventProducer(repositoryService,\n-                                                converter,\n-                                                Optional.ofNullable(listeners)\n-                                                        .orElse(Collections.emptyList()),\n-                                                eventPublisher);\n+    if (activitiProperties.getDeploymentMode() != null) {\n+      conf.setDeploymentMode(activitiProperties.getDeploymentMode());\n     }\n-\n-    @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    @ConditionalOnMissingBean (name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,\n-                                                                                                           ProcessVariablesInitiator processVariablesInitiator) {\n-        return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n-                                                                   processVariablesInitiator);\n+    if (processEngineConfigurationConfigurers != null) {\n+        for (ProcessEngineConfigurationConfigurer processEngineConfigurationConfigurer : processEngineConfigurationConfigurers) {\n+            processEngineConfigurationConfigurer.configure(conf);\n+        }\n     }\n-    \n-    @Bean\n-    @Order(Ordered.HIGHEST_PRECEDENCE)\n-    public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n-        return (configuration) -> {\n-            configuration.setAsyncExecutorMessageQueueMode(properties.isMessageQueueMode());\n-            configuration.setAsyncExecutorCorePoolSize(properties.getCorePoolSize());\n-            configuration.setAsyncExecutorAsyncJobLockTimeInMillis(properties.getAsyncJobLockTimeInMillis());\n-            configuration.setAsyncExecutorNumberOfRetries(properties.getNumberOfRetries());\n-\n-            configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n-            configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n-            configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n-            \n-            configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n-            configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n-            configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n-            \n-            configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n-            configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n-\n-            configuration.setAsyncExecutorSecondsToWaitOnShutdown(properties.getSecondsToWaitOnShutdown());\n-            configuration.setAsyncExecutorThreadKeepAliveTime(properties.getKeepAliveTime());\n-            configuration.setAsyncExecutorTimerLockTimeInMillis(properties.getTimerLockTimeInMillis());\n-            configuration.setAsyncExecutorThreadPoolQueueSize(properties.getQueueSize());\n-\n-            configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n-        };\n+    springAsyncExecutor.applyConfig(conf);\n+    return conf;\n+  }\n+\n+  protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties, SpringProcessEngineConfiguration conf) {\n+    if (!activitiProperties.isAsyncExecutorActivate()) {\n+      ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n+      springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n+      if (conf.getProcessValidator() == null) {\n+        ProcessValidatorImpl processValidator = new ProcessValidatorImpl();\n+        processValidator.addValidatorSet(springBootStarterValidatorSet);\n+        conf.setProcessValidator(processValidator);\n+      } else {\n+        conf.getProcessValidator().getValidatorSets().add(springBootStarterValidatorSet);\n+      }\n     }\n-    \n-}\n+  }\n \n+  private void configureProcessDefinitionResources(ProcessDefinitionResourceFinder processDefinitionResourceFinder, SpringProcessEngineConfiguration conf) throws IOException {\n+    List<Resource> procDefResources = processDefinitionResourceFinder.discoverProcessDefinitionResources();\n+    if (!procDefResources.isEmpty()) {\n+      conf.setDeploymentResources(procDefResources.toArray(new Resource[0]));\n+    }\n+  }\n+\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties, ResourcePatternResolver resourcePatternResolver) {\n+    return new ProcessDefinitionResourceFinder(activitiProperties,\n+                                               resourcePatternResolver);\n+  }\n+\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public ProcessDeployedEventProducer processDeployedEventProducer(RepositoryService repositoryService,\n+                                                                   APIProcessDefinitionConverter converter,\n+                                                                   @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners, ApplicationEventPublisher eventPublisher) {\n+    return new ProcessDeployedEventProducer(repositoryService, converter, Optional.ofNullable(listeners).orElse(Collections.emptyList()), eventPublisher);\n+  }\n+\n+  @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+  @ConditionalOnMissingBean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+  public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider, ProcessVariablesInitiator processVariablesInitiator) {\n+    return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n+                                                               processVariablesInitiator);\n+  }\n+\n+  @Bean\n+  @Order(Ordered.HIGHEST_PRECEDENCE)\n+  public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n+    return (configuration) -> {\n+      configuration.setAsyncExecutorMessageQueueMode(properties.isMessageQueueMode());\n+      configuration.setAsyncExecutorCorePoolSize(properties.getCorePoolSize());\n+      configuration.setAsyncExecutorAsyncJobLockTimeInMillis(properties.getAsyncJobLockTimeInMillis());\n+      configuration.setAsyncExecutorNumberOfRetries(properties.getNumberOfRetries());\n+      configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n+      configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n+      configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n+      configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n+      configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n+      configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n+      configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n+      configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n+      configuration.setAsyncExecutorSecondsToWaitOnShutdown(properties.getSecondsToWaitOnShutdown());\n+      configuration.setAsyncExecutorThreadKeepAliveTime(properties.getKeepAliveTime());\n+      configuration.setAsyncExecutorTimerLockTimeInMillis(properties.getTimerLockTimeInMillis());\n+      configuration.setAsyncExecutorThreadPoolQueueSize(properties.getQueueSize());\n+      configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n+};\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 239
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/978/ProcessEngineAutoConfiguration.java\nindex 3ce1c442bbd..a1ba7dd183b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/978/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import java.io.IOException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/978/ProcessEngineAutoConfiguration.java\nindex 3ce1c442bbd..a1ba7dd183b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/978/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/978/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import java.io.IOException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}