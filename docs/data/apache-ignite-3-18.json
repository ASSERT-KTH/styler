{
    "project_name": "apache-ignite-3",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n    private volatile int maxPermits = 0;\n\n    public AdjustableSemaphore() {\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/18/AdjustableSemaphore.java\nindex ec8ee1a6d62..06bb714cd02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/18/AdjustableSemaphore.java\n@@ -29,6 +29,7 @@ public final class AdjustableSemaphore implements Serializable {\n     private static final long serialVersionUID = -266635933115069924L;\n \n     private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n+\n     private volatile int maxPermits = 0;\n \n     public AdjustableSemaphore() {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/18/AdjustableSemaphore.java\nindex ec8ee1a6d62..90eb422b70e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/18/AdjustableSemaphore.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft.util.concurrent;\n \n import java.io.Serializable;\n@@ -22,105 +23,104 @@ import org.apache.ignite.raft.jraft.util.Requires;\n \n /**\n  * An implementation of adjustable semaphore.\n- *\n+ * <p>\n  * Written by Marshall Pierce and released to the public domain See: http://blog.teamlazerbeez.com/2009/04/20/javas-semaphore-resizing/\n  */\n public final class AdjustableSemaphore implements Serializable {\n-    private static final long serialVersionUID = -266635933115069924L;\n+  private static final long serialVersionUID = -266635933115069924L;\n \n-    private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n-    private volatile int maxPermits = 0;\n+  private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n \n-    public AdjustableSemaphore() {\n-    }\n+  private volatile int maxPermits = 0;\n \n-    public AdjustableSemaphore(int maxPermits) {\n-        Requires.requireTrue(maxPermits >= 0, \"maxPermits must be a non-negative value\");\n-        setMaxPermits(maxPermits);\n-    }\n+  public AdjustableSemaphore() {\n+  }\n \n-    public int getMaxPermits() {\n-        return maxPermits;\n-    }\n+  public AdjustableSemaphore(int maxPermits) {\n+    Requires.requireTrue(maxPermits >= 0, \"maxPermits must be a non-negative value\");\n+    setMaxPermits(maxPermits);\n+  }\n \n-    /**\n-     * Adjusts the maximum number of available permits.\n-     *\n-     * @param newMaxPermits max number of permits\n-     */\n-    public synchronized void setMaxPermits(final int newMaxPermits) {\n-        Requires.requireTrue(newMaxPermits >= 0, \"Semaphore permits must be at least 0, but was \" + newMaxPermits);\n-\n-        final int delta = newMaxPermits - this.maxPermits;\n-\n-        if (delta == 0) {\n-            return;\n-        }\n-        else if (delta > 0) {\n-            this.semaphore.release(delta);\n-        }\n-        else {\n-            this.semaphore.reducePermits(-delta);\n-        }\n-\n-        this.maxPermits = newMaxPermits;\n-    }\n+  public int getMaxPermits() {\n+    return maxPermits;\n+  }\n \n-    /**\n-     * Releases a permit, returning it to the semaphore.\n-     */\n-    public void release() {\n-        this.semaphore.release();\n-    }\n+  /**\n+   * Adjusts the maximum number of available permits.\n+   *\n+   * @param newMaxPermits max number of permits\n+   */\n+  public synchronized void setMaxPermits(final int newMaxPermits) {\n+    Requires.requireTrue(newMaxPermits >= 0, \"Semaphore permits must be at least 0, but was \" + newMaxPermits);\n \n-    /**\n-     * Acquires a permit from this semaphore, blocking until one is available, or the thread is {@linkplain\n-     * Thread#interrupt interrupted}.\n-     *\n-     * @throws InterruptedException if the current thread is interrupted\n-     */\n-    public void acquire() throws InterruptedException {\n-        this.semaphore.acquire();\n-    }\n-\n-    /**\n-     * Acquires a permit from this semaphore, only if one is available at the time of invocation.\n-     *\n-     * @return {@code true} if a permit was acquired and {@code false} otherwise\n-     */\n-    public boolean tryAcquire() {\n-        return this.semaphore.tryAcquire();\n-    }\n+    final int delta = newMaxPermits - this.maxPermits;\n \n-    /**\n-     * Returns the current number of permits available in this semaphore.\n-     *\n-     * @return the number of permits available in this semaphore\n-     */\n-    public int availablePermits() {\n-        return this.semaphore.availablePermits();\n+    if (delta == 0) {\n+      return;\n+    } else if (delta > 0) {\n+      this.semaphore.release(delta);\n+    } else {\n+      this.semaphore.reducePermits(-delta);\n     }\n \n-    /**\n-     * Returns if the permits is available of the semaphore.\n-     *\n-     * @return {@code true} if current number of permits > 0\n-     */\n-    public boolean isAvailable() {\n-        return availablePermits() > 0;\n+    this.maxPermits = newMaxPermits;\n+  }\n+\n+  /**\n+   * Releases a permit, returning it to the semaphore.\n+   */\n+  public void release() {\n+    this.semaphore.release();\n+  }\n+\n+  /**\n+   * Acquires a permit from this semaphore, blocking until one is available, or the thread is {@linkplain\n+   * Thread#interrupt interrupted}.\n+   *\n+   * @throws InterruptedException if the current thread is interrupted\n+   */\n+  public void acquire() throws InterruptedException {\n+    this.semaphore.acquire();\n+  }\n+\n+  /**\n+   * Acquires a permit from this semaphore, only if one is available at the time of invocation.\n+   *\n+   * @return {@code true} if a permit was acquired and {@code false} otherwise\n+   */\n+  public boolean tryAcquire() {\n+    return this.semaphore.tryAcquire();\n+  }\n+\n+  /**\n+   * Returns the current number of permits available in this semaphore.\n+   *\n+   * @return the number of permits available in this semaphore\n+   */\n+  public int availablePermits() {\n+    return this.semaphore.availablePermits();\n+  }\n+\n+  /**\n+   * Returns if the permits is available of the semaphore.\n+   *\n+   * @return {@code true} if current number of permits > 0\n+   */\n+  public boolean isAvailable() {\n+    return availablePermits() > 0;\n+  }\n+\n+  private static final class ResizeableSemaphore extends Semaphore {\n+\n+    private static final long serialVersionUID = 1204115455517785966L;\n+\n+    ResizeableSemaphore(int permits) {\n+      super(permits);\n     }\n \n-    private static final class ResizeableSemaphore extends Semaphore {\n-\n-        private static final long serialVersionUID = 1204115455517785966L;\n-\n-        ResizeableSemaphore(int permits) {\n-            super(permits);\n-        }\n-\n-        @Override\n-        protected void reducePermits(final int reduction) {\n-            super.reducePermits(reduction);\n-        }\n+    @Override\n+    protected void reducePermits(final int reduction) {\n+      super.reducePermits(reduction);\n     }\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/18/AdjustableSemaphore.java\nindex ec8ee1a6d62..3731da97ff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/18/AdjustableSemaphore.java\n@@ -111,8 +111,7 @@ public final class AdjustableSemaphore implements Serializable {\n     }\n \n     private static final class ResizeableSemaphore extends Semaphore {\n-\n-        private static final long serialVersionUID = 1204115455517785966L;\n+private static final long serialVersionUID = 1204115455517785966L;\n \n         ResizeableSemaphore(int permits) {\n             super(permits);\n@@ -123,4 +122,4 @@ public final class AdjustableSemaphore implements Serializable {\n             super.reducePermits(reduction);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "35",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "45",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "52",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "130",
                    "column": "5",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "140",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/18/AdjustableSemaphore.java\nindex ec8ee1a6d62..d08b670b692 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/18/AdjustableSemaphore.java\n@@ -25,20 +25,30 @@ import org.apache.ignite.raft.jraft.util.Requires;\n  *\n  * Written by Marshall Pierce and released to the public domain See: http://blog.teamlazerbeez.com/2009/04/20/javas-semaphore-resizing/\n  */\n+\n+\n public final class AdjustableSemaphore implements Serializable {\n+\n     private static final long serialVersionUID = -266635933115069924L;\n \n+\n     private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n+\n+\n     private volatile int maxPermits = 0;\n \n+\n     public AdjustableSemaphore() {\n     }\n \n+\n     public AdjustableSemaphore(int maxPermits) {\n         Requires.requireTrue(maxPermits >= 0, \"maxPermits must be a non-negative value\");\n+\n         setMaxPermits(maxPermits);\n     }\n \n+\n     public int getMaxPermits() {\n         return maxPermits;\n     }\n@@ -48,6 +58,7 @@ public final class AdjustableSemaphore implements Serializable {\n      *\n      * @param newMaxPermits max number of permits\n      */\n+\n     public synchronized void setMaxPermits(final int newMaxPermits) {\n         Requires.requireTrue(newMaxPermits >= 0, \"Semaphore permits must be at least 0, but was \" + newMaxPermits);\n \n@@ -69,6 +80,7 @@ public final class AdjustableSemaphore implements Serializable {\n     /**\n      * Releases a permit, returning it to the semaphore.\n      */\n+\n     public void release() {\n         this.semaphore.release();\n     }\n@@ -79,6 +91,7 @@ public final class AdjustableSemaphore implements Serializable {\n      *\n      * @throws InterruptedException if the current thread is interrupted\n      */\n+\n     public void acquire() throws InterruptedException {\n         this.semaphore.acquire();\n     }\n@@ -88,6 +101,7 @@ public final class AdjustableSemaphore implements Serializable {\n      *\n      * @return {@code true} if a permit was acquired and {@code false} otherwise\n      */\n+\n     public boolean tryAcquire() {\n         return this.semaphore.tryAcquire();\n     }\n@@ -97,6 +111,7 @@ public final class AdjustableSemaphore implements Serializable {\n      *\n      * @return the number of permits available in this semaphore\n      */\n+\n     public int availablePermits() {\n         return this.semaphore.availablePermits();\n     }\n@@ -106,21 +121,24 @@ public final class AdjustableSemaphore implements Serializable {\n      *\n      * @return {@code true} if current number of permits > 0\n      */\n+\n     public boolean isAvailable() {\n         return availablePermits() > 0;\n     }\n \n+\n     private static final class ResizeableSemaphore extends Semaphore {\n \n         private static final long serialVersionUID = 1204115455517785966L;\n \n+\n         ResizeableSemaphore(int permits) {\n             super(permits);\n         }\n \n-        @Override\n-        protected void reducePermits(final int reduction) {\n+\n+        @Override protected void reducePermits(final int reduction) {\n             super.reducePermits(reduction);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/18/AdjustableSemaphore.java\nindex ec8ee1a6d62..06bb714cd02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/18/AdjustableSemaphore.java\n@@ -29,6 +29,7 @@ public final class AdjustableSemaphore implements Serializable {\n     private static final long serialVersionUID = -266635933115069924L;\n \n     private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n+\n     private volatile int maxPermits = 0;\n \n     public AdjustableSemaphore() {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/18/AdjustableSemaphore.java\nindex ec8ee1a6d62..06bb714cd02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/18/AdjustableSemaphore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/18/AdjustableSemaphore.java\n@@ -29,6 +29,7 @@ public final class AdjustableSemaphore implements Serializable {\n     private static final long serialVersionUID = -266635933115069924L;\n \n     private final ResizeableSemaphore semaphore = new ResizeableSemaphore(0);\n+\n     private volatile int maxPermits = 0;\n \n     public AdjustableSemaphore() {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}