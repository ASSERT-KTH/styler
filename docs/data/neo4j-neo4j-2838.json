{
    "project_name": "neo4j-neo4j",
    "error_id": "2838",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2838/ReadableChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2838/ReadableChannel.java\nindex 035d55d4097..e410e4460c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2838/ReadableChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2838/ReadableChannel.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.fs;\n \n import java.io.Closeable;\n@@ -30,42 +31,42 @@ public interface ReadableChannel extends Closeable\n {\n     /**\n      * @return the next {@code byte} in this channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n     byte get() throws IOException;\n \n     /**\n      * @return the next {@code short} in this channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n     short getShort() throws IOException;\n \n     /**\n      * @return the next {@code int} in this channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n     int getInt() throws IOException;\n \n     /**\n      * @return the next {@code long} in this channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n     long getLong() throws IOException;\n \n     /**\n      * @return the next {@code float} in this channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n     float getFloat() throws IOException;\n \n     /**\n      * @return the next {@code double} in this channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n     double getDouble() throws IOException;\n@@ -74,10 +75,10 @@ public interface ReadableChannel extends Closeable\n      * Reads the next {@code length} bytes from this channel and puts them into {@code bytes}.\n      * Will throw {@link ArrayIndexOutOfBoundsException} if {@code length} exceeds the length of {@code bytes}.\n      *\n-     * @param bytes {@code byte[]} to put read bytes into.\n+     * @param bytes  {@code byte[]} to put read bytes into.\n      * @param length number of bytes to read from the channel.\n-     * @throws IOException I/O error from channel.\n+     * @throws IOException          I/O error from channel.\n      * @throws ReadPastEndException if not enough data was available.\n      */\n-    void get( byte[] bytes, int length ) throws IOException;\n+    void get(byte[] bytes, int length) throws IOException;\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}