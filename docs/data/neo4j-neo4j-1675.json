{
    "project_name": "neo4j-neo4j",
    "error_id": "1675",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1675/GBPTreeLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1675/GBPTreeLock.java\nindex 50734566194..84766561b0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1675/GBPTreeLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1675/GBPTreeLock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.concurrent.TimeUnit;\n@@ -27,7 +28,7 @@ import org.neo4j.util.VisibleForTesting;\n \n class GBPTreeLock\n {\n-    private static final long stateOffset = UnsafeUtil.getFieldOffset( GBPTreeLock.class, \"state\" );\n+    private static final long stateOffset = UnsafeUtil.getFieldOffset(GBPTreeLock.class, \"state\");\n     private static final long writerLockBit = 0x00000000_00000001L;\n     private static final long cleanerLockBit = 0x00000000_00000002L;\n     private volatile long state;\n@@ -42,80 +43,80 @@ class GBPTreeLock\n \n     void writerLock()\n     {\n-        doLock( writerLockBit );\n+        doLock(writerLockBit);\n     }\n \n     void writerUnlock()\n     {\n-        doUnlock( writerLockBit );\n+        doUnlock(writerLockBit);\n     }\n \n     void cleanerLock()\n     {\n-        doLock( cleanerLockBit );\n+        doLock(cleanerLockBit);\n     }\n \n     void cleanerUnlock()\n     {\n-        doUnlock( cleanerLockBit );\n+        doUnlock(cleanerLockBit);\n     }\n \n     void writerAndCleanerLock()\n     {\n-        doLock( writerLockBit | cleanerLockBit );\n+        doLock(writerLockBit | cleanerLockBit);\n     }\n \n     void writerAndCleanerUnlock()\n     {\n-        doUnlock( writerLockBit | cleanerLockBit );\n+        doUnlock(writerLockBit | cleanerLockBit);\n     }\n \n-    private void doLock( long targetLockBit )\n+    private void doLock(long targetLockBit)\n     {\n         long currentState;\n         long newState;\n         do\n         {\n             currentState = state;\n-            while ( !canLock( currentState, targetLockBit ) )\n+            while (!canLock(currentState, targetLockBit))\n             {\n                 // sleep\n                 sleep();\n                 currentState = state;\n             }\n             newState = currentState | targetLockBit;\n-        } while ( !UnsafeUtil.compareAndSwapLong( this, stateOffset, currentState, newState ) );\n+        } while (!UnsafeUtil.compareAndSwapLong(this, stateOffset, currentState, newState));\n     }\n \n-    private void doUnlock( long targetLockBit )\n+    private void doUnlock(long targetLockBit)\n     {\n         long currentState;\n         long newState;\n         do\n         {\n             currentState = state;\n-            if ( !canUnlock( currentState, targetLockBit) )\n+            if (!canUnlock(currentState, targetLockBit))\n             {\n-                throw new IllegalStateException( \"Can not unlock lock that is already locked\" );\n+                throw new IllegalStateException(\"Can not unlock lock that is already locked\");\n             }\n             newState = currentState & ~targetLockBit;\n         }\n-        while ( !UnsafeUtil.compareAndSwapLong( this, stateOffset, currentState, newState ) );\n+        while (!UnsafeUtil.compareAndSwapLong(this, stateOffset, currentState, newState));\n     }\n \n-    private boolean canLock( long state, long targetLockBit )\n+    private boolean canLock(long state, long targetLockBit)\n     {\n         return (state & targetLockBit) == 0;\n     }\n \n-    private boolean canUnlock( long state, long targetLockBit )\n+    private boolean canUnlock(long state, long targetLockBit)\n     {\n         return (state & targetLockBit) == targetLockBit;\n     }\n \n     private void sleep()\n     {\n-        LockSupport.parkNanos( TimeUnit.MILLISECONDS.toNanos( 10 ) );\n+        LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(10));\n     }\n \n     /**\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}