{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3226",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "179",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3226/StoreViewNodeStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3226/StoreViewNodeStoreScan.java\nindex 72931f34004..bf738adee06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3226/StoreViewNodeStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3226/StoreViewNodeStoreScan.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import org.apache.commons.lang3.ArrayUtils;\n@@ -47,145 +48,144 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n \n public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStoreScan<FAILURE>\n {\n-    private final PropertyStore propertyStore;\n-\n-    private final Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor;\n-    private final Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor;\n-    private final IntPredicate propertyKeyIdFilter;\n-    protected final int[] labelIds;\n-\n-    public StoreViewNodeStoreScan( NodeStore nodeStore, LockService locks, PropertyStore propertyStore,\n-            Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,\n-            Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor,\n-            int[] labelIds, IntPredicate propertyKeyIdFilter )\n+  private final PropertyStore propertyStore;\n+\n+  private final Visitor<NodeLabelUpdate, FAILURE> labelUpdateVisitor;\n+  private final Visitor<NodeUpdates, FAILURE> propertyUpdatesVisitor;\n+  private final IntPredicate propertyKeyIdFilter;\n+  protected final int[] labelIds;\n+\n+  public StoreViewNodeStoreScan(NodeStore nodeStore, LockService locks, PropertyStore propertyStore,\n+                                Visitor<NodeLabelUpdate, FAILURE> labelUpdateVisitor,\n+                                Visitor<NodeUpdates, FAILURE> propertyUpdatesVisitor,\n+                                int[] labelIds, IntPredicate propertyKeyIdFilter)\n+  {\n+    super(nodeStore, locks, nodeStore.getHighId());\n+    this.propertyStore = propertyStore;\n+    this.labelUpdateVisitor = labelUpdateVisitor;\n+    this.propertyUpdatesVisitor = propertyUpdatesVisitor;\n+    this.labelIds = labelIds;\n+\n+    this.propertyKeyIdFilter = propertyKeyIdFilter;\n+  }\n+\n+  @Override\n+  protected PrimitiveLongResourceIterator getNodeIdIterator()\n+  {\n+    return super.getNodeIdIterator();\n+  }\n+\n+  @Override\n+  public void process(NodeRecord node) throws FAILURE\n+  {\n+    long[] labels = parseLabelsField(node).get(this.nodeStore);\n+    if (labels.length == 0)\n     {\n-        super( nodeStore, locks, nodeStore.getHighId() );\n-        this.propertyStore = propertyStore;\n-        this.labelUpdateVisitor = labelUpdateVisitor;\n-        this.propertyUpdatesVisitor = propertyUpdatesVisitor;\n-        this.labelIds = labelIds;\n-\n-        this.propertyKeyIdFilter = propertyKeyIdFilter;\n+      // This node has no labels at all\n+      return;\n     }\n \n-    @Override\n-    protected PrimitiveLongResourceIterator getNodeIdIterator()\n+    if (labelUpdateVisitor != null)\n     {\n-        return super.getNodeIdIterator();\n+      // Notify the label update visitor\n+      labelUpdateVisitor.visit(labelChanges(node.getId(), EMPTY_LONG_ARRAY, labels));\n     }\n \n-    @Override\n-    public void process( NodeRecord node ) throws FAILURE\n+    if (propertyUpdatesVisitor != null && containsAnyLabel(labelIds, labels))\n     {\n-        long[] labels = parseLabelsField( node ).get( this.nodeStore );\n-        if ( labels.length == 0 )\n+      // Notify the property update visitor\n+      // TODO: reuse object instead? Better in terms of speed and GC?\n+      NodeUpdates.Builder updates = NodeUpdates.forNode(node.getId(), labels);\n+      boolean hasRelevantProperty = false;\n+\n+      for (PropertyBlock property : properties(node))\n+      {\n+        int propertyKeyId = property.getKeyIndexId();\n+        if (propertyKeyIdFilter.test(propertyKeyId))\n         {\n-            // This node has no labels at all\n-            return;\n+          // This node has a property of interest to us\n+          Value value = valueOf(property);\n+          // No need to validate values before passing them to the updater since the index implementation\n+          // is allowed to fail in which ever way it wants to. The result of failure will be the same as\n+          // a failed validation, i.e. population FAILED.\n+          updates.added(propertyKeyId, value);\n+          hasRelevantProperty = true;\n         }\n+      }\n \n-        if ( labelUpdateVisitor != null )\n-        {\n-            // Notify the label update visitor\n-            labelUpdateVisitor.visit( labelChanges( node.getId(), EMPTY_LONG_ARRAY, labels ) );\n-        }\n-\n-        if ( propertyUpdatesVisitor != null && containsAnyLabel( labelIds, labels ) )\n-        {\n-            // Notify the property update visitor\n-            // TODO: reuse object instead? Better in terms of speed and GC?\n-            NodeUpdates.Builder updates = NodeUpdates.forNode( node.getId(), labels );\n-            boolean hasRelevantProperty = false;\n-\n-            for ( PropertyBlock property : properties( node ) )\n-            {\n-                int propertyKeyId = property.getKeyIndexId();\n-                if ( propertyKeyIdFilter.test( propertyKeyId ) )\n-                {\n-                    // This node has a property of interest to us\n-                    Value value = valueOf( property );\n-                    // No need to validate values before passing them to the updater since the index implementation\n-                    // is allowed to fail in which ever way it wants to. The result of failure will be the same as\n-                    // a failed validation, i.e. population FAILED.\n-                    updates.added( propertyKeyId, value );\n-                    hasRelevantProperty = true;\n-                }\n-            }\n-\n-            if ( hasRelevantProperty )\n-            {\n-                propertyUpdatesVisitor.visit( updates.build() );\n-            }\n-        }\n+      if (hasRelevantProperty)\n+      {\n+        propertyUpdatesVisitor.visit(updates.build());\n+      }\n     }\n-\n-    private Iterable<PropertyBlock> properties( final NodeRecord node )\n+  }\n+\n+  private Iterable<PropertyBlock> properties(final NodeRecord node)\n+  {\n+    return () -> new PropertyBlockIterator(node);\n+  }\n+\n+  private Value valueOf(PropertyBlock property)\n+  {\n+    // Make sure the value is loaded, even if it's of a \"heavy\" kind.\n+    propertyStore.ensureHeavy(property);\n+    return property.getType().value(property, propertyStore);\n+  }\n+\n+  private static boolean containsAnyLabel(int[] labelIdFilter, long[] labels)\n+  {\n+    for (long candidate : labels)\n     {\n-        return () -> new PropertyBlockIterator( node );\n+      if (ArrayUtils.contains(labelIdFilter, Math.toIntExact(candidate)))\n+      {\n+        return true;\n+      }\n     }\n-\n-    private Value valueOf( PropertyBlock property )\n+    return false;\n+  }\n+\n+  @Override\n+  public void acceptUpdate(MultipleIndexPopulator.MultipleIndexUpdater updater, IndexEntryUpdate<?> update,\n+                           long currentlyIndexedNodeId)\n+  {\n+    if (update.getEntityId() <= currentlyIndexedNodeId)\n     {\n-        // Make sure the value is loaded, even if it's of a \"heavy\" kind.\n-        propertyStore.ensureHeavy( property );\n-        return property.getType().value( property, propertyStore );\n+      updater.process(update);\n     }\n+  }\n \n-    private static boolean containsAnyLabel( int[] labelIdFilter, long[] labels )\n-    {\n-        for ( long candidate : labels )\n-        {\n-            if ( ArrayUtils.contains( labelIdFilter, Math.toIntExact( candidate ) ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n+  private class PropertyBlockIterator extends PrefetchingIterator<PropertyBlock>\n+  {\n+    private final Iterator<PropertyRecord> records;\n+    private Iterator<PropertyBlock> blocks = emptyIterator();\n \n-    @Override\n-    public void acceptUpdate( MultipleIndexPopulator.MultipleIndexUpdater updater, IndexEntryUpdate<?> update,\n-            long currentlyIndexedNodeId )\n+    PropertyBlockIterator(NodeRecord node)\n     {\n-        if ( update.getEntityId() <= currentlyIndexedNodeId )\n-        {\n-            updater.process( update );\n-        }\n+      long firstPropertyId = node.getNextProp();\n+      if (firstPropertyId == Record.NO_NEXT_PROPERTY.intValue())\n+      {\n+        records = emptyIterator();\n+      } else\n+      {\n+        records = propertyStore.getPropertyRecordChain(firstPropertyId).iterator();\n+      }\n     }\n \n-    private class PropertyBlockIterator extends PrefetchingIterator<PropertyBlock>\n+    @Override\n+    protected PropertyBlock fetchNextOrNull()\n     {\n-        private final Iterator<PropertyRecord> records;\n-        private Iterator<PropertyBlock> blocks = emptyIterator();\n-\n-        PropertyBlockIterator( NodeRecord node )\n+      for (; ; )\n+      {\n+        if (blocks.hasNext())\n         {\n-            long firstPropertyId = node.getNextProp();\n-            if ( firstPropertyId == Record.NO_NEXT_PROPERTY.intValue() )\n-            {\n-                records = emptyIterator();\n-            }\n-            else\n-            {\n-                records = propertyStore.getPropertyRecordChain( firstPropertyId ).iterator();\n-            }\n+          return blocks.next();\n         }\n-\n-        @Override\n-        protected PropertyBlock fetchNextOrNull()\n+        if (!records.hasNext())\n         {\n-            for ( ; ; )\n-            {\n-                if ( blocks.hasNext() )\n-                {\n-                    return blocks.next();\n-                }\n-                if ( !records.hasNext() )\n-                {\n-                    return null;\n-                }\n-                blocks = records.next().iterator();\n-            }\n+          return null;\n         }\n+        blocks = records.next().iterator();\n+      }\n     }\n+  }\n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 260).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3226/StoreViewNodeStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3226/StoreViewNodeStoreScan.java\nindex 72931f34004..bb1c302b8b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3226/StoreViewNodeStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3226/StoreViewNodeStoreScan.java\n@@ -54,18 +54,14 @@ public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n     private final IntPredicate propertyKeyIdFilter;\n     protected final int[] labelIds;\n \n-    public StoreViewNodeStoreScan( NodeStore nodeStore, LockService locks, PropertyStore propertyStore,\n-            Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,\n-            Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor,\n-            int[] labelIds, IntPredicate propertyKeyIdFilter )\n+    public StoreViewNodeStoreScan( NodeStore nodeStore, LockService locks, PropertyStore propertyStore, Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor, Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor, int[] labelIds, IntPredicate propertyKeyIdFilter )\n     {\n         super( nodeStore, locks, nodeStore.getHighId() );\n         this.propertyStore = propertyStore;\n         this.labelUpdateVisitor = labelUpdateVisitor;\n         this.propertyUpdatesVisitor = propertyUpdatesVisitor;\n         this.labelIds = labelIds;\n-\n-        this.propertyKeyIdFilter = propertyKeyIdFilter;\n+this.propertyKeyIdFilter = propertyKeyIdFilter;\n     }\n \n     @Override\n@@ -96,8 +92,7 @@ public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n             // TODO: reuse object instead? Better in terms of speed and GC?\n             NodeUpdates.Builder updates = NodeUpdates.forNode( node.getId(), labels );\n             boolean hasRelevantProperty = false;\n-\n-            for ( PropertyBlock property : properties( node ) )\n+for ( PropertyBlock property : properties( node ) )\n             {\n                 int propertyKeyId = property.getKeyIndexId();\n                 if ( propertyKeyIdFilter.test( propertyKeyId ) )\n@@ -180,12 +175,14 @@ public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n                 {\n                     return blocks.next();\n                 }\n-                if ( !records.hasNext() )\n+\n+if ( !records.hasNext() )\n                 {\n                     return null;\n                 }\n-                blocks = records.next().iterator();\n+\n+blocks = records.next().iterator();\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "37",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 260).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "column": "44",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3226/StoreViewNodeStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3226/StoreViewNodeStoreScan.java\nindex 72931f34004..892d9de1001 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3226/StoreViewNodeStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3226/StoreViewNodeStoreScan.java\n@@ -20,10 +20,8 @@\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import org.apache.commons.lang3.ArrayUtils;\n-\n import java.util.Iterator;\n import java.util.function.IntPredicate;\n-\n import org.neo4j.collection.primitive.PrimitiveLongResourceIterator;\n import org.neo4j.helpers.collection.PrefetchingIterator;\n import org.neo4j.helpers.collection.Visitor;\n@@ -39,32 +37,29 @@ import org.neo4j.kernel.impl.store.record.PropertyBlock;\n import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n import org.neo4j.values.storable.Value;\n-\n import static java.util.Collections.emptyIterator;\n+\n import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG_ARRAY;\n+\n import static org.neo4j.kernel.api.labelscan.NodeLabelUpdate.labelChanges;\n+\n import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n \n-public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStoreScan<FAILURE>\n+public class StoreViewNodeStoreScan <FAILURE extends Exception> extends NodeStoreScan<FAILURE>\n {\n     private final PropertyStore propertyStore;\n-\n     private final Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor;\n     private final Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor;\n     private final IntPredicate propertyKeyIdFilter;\n     protected final int[] labelIds;\n \n-    public StoreViewNodeStoreScan( NodeStore nodeStore, LockService locks, PropertyStore propertyStore,\n-            Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,\n-            Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor,\n-            int[] labelIds, IntPredicate propertyKeyIdFilter )\n+    public StoreViewNodeStoreScan( NodeStore nodeStore, LockService locks, PropertyStore propertyStore, Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor, Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor, int[] labelIds, IntPredicate propertyKeyIdFilter )\n     {\n         super( nodeStore, locks, nodeStore.getHighId() );\n         this.propertyStore = propertyStore;\n         this.labelUpdateVisitor = labelUpdateVisitor;\n         this.propertyUpdatesVisitor = propertyUpdatesVisitor;\n         this.labelIds = labelIds;\n-\n         this.propertyKeyIdFilter = propertyKeyIdFilter;\n     }\n \n@@ -90,14 +85,14 @@ public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n             labelUpdateVisitor.visit( labelChanges( node.getId(), EMPTY_LONG_ARRAY, labels ) );\n         }\n \n-        if ( propertyUpdatesVisitor != null && containsAnyLabel( labelIds, labels ) )\n+        if ( propertyUpdatesVisitor != null&& containsAnyLabel( labelIds, labels ) )\n         {\n             // Notify the property update visitor\n             // TODO: reuse object instead? Better in terms of speed and GC?\n             NodeUpdates.Builder updates = NodeUpdates.forNode( node.getId(), labels );\n             boolean hasRelevantProperty = false;\n-\n-            for ( PropertyBlock property : properties( node ) )\n+            for( PropertyBlock property : properties( node )\n+            )\n             {\n                 int propertyKeyId = property.getKeyIndexId();\n                 if ( propertyKeyIdFilter.test( propertyKeyId ) )\n@@ -133,19 +128,19 @@ public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n \n     private static boolean containsAnyLabel( int[] labelIdFilter, long[] labels )\n     {\n-        for ( long candidate : labels )\n+        for( long candidate : labels)\n         {\n             if ( ArrayUtils.contains( labelIdFilter, Math.toIntExact( candidate ) ) )\n             {\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n \n     @Override\n-    public void acceptUpdate( MultipleIndexPopulator.MultipleIndexUpdater updater, IndexEntryUpdate<?> update,\n-            long currentlyIndexedNodeId )\n+    public void acceptUpdate( MultipleIndexPopulator.MultipleIndexUpdater updater, IndexEntryUpdate<?> update, long currentlyIndexedNodeId )\n     {\n         if ( update.getEntityId() <= currentlyIndexedNodeId )\n         {\n@@ -174,18 +169,20 @@ public class StoreViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n         @Override\n         protected PropertyBlock fetchNextOrNull()\n         {\n-            for ( ; ; )\n+            for (;;)\n             {\n                 if ( blocks.hasNext() )\n                 {\n                     return blocks.next();\n                 }\n-                if ( !records.hasNext() )\n+\n+                if ( ! records.hasNext() )\n                 {\n                     return null;\n                 }\n+\n                 blocks = records.next().iterator();\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}