{
    "project_name": "neo4j-neo4j",
    "error_id": "2025",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "130",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2025/RotatingLogFileWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2025/RotatingLogFileWriter.java\nindex fb7b30f4387..e168acefa5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2025/RotatingLogFileWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2025/RotatingLogFileWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging.log4j;\n \n import org.apache.logging.log4j.Level;\n@@ -52,23 +53,23 @@ public class RotatingLogFileWriter implements Closeable\n     private final Neo4jLoggerContext ctx;\n \n     /**\n-     * @param fs The filesystem abstraction. Rotating files will only be created for DefaultFileSystemAbstraction, for other abstractions no rotation is done.\n-     * @param logPath Path of the log file.\n+     * @param fs                The filesystem abstraction. Rotating files will only be created for DefaultFileSystemAbstraction, for other abstractions no rotation is done.\n+     * @param logPath           Path of the log file.\n      * @param rotationThreshold The threshold to rotate on in bytes.\n-     * @param maxArchives The maximum number of archive files to keep.\n-     * @param fileSuffix File suffix of the archive files. If the file suffix ends with '.gz' or '.zip' the resulting archive will be compressed using\n-     *                   the compression scheme that matches the suffix. Empty string if no additional file suffix should be added.\n-     * @param header String to print at beginning of each new file. Note that the header has no implicit newline so that must be added in the string if desired.\n+     * @param maxArchives       The maximum number of archive files to keep.\n+     * @param fileSuffix        File suffix of the archive files. If the file suffix ends with '.gz' or '.zip' the resulting archive will be compressed using\n+     *                          the compression scheme that matches the suffix. Empty string if no additional file suffix should be added.\n+     * @param header            String to print at beginning of each new file. Note that the header has no implicit newline so that must be added in the string if desired.\n      */\n-    public RotatingLogFileWriter( FileSystemAbstraction fs, Path logPath, long rotationThreshold, int maxArchives, String fileSuffix, String header )\n+    public RotatingLogFileWriter(FileSystemAbstraction fs, Path logPath, long rotationThreshold, int maxArchives, String fileSuffix, String header)\n     {\n-        ctx = setupLogFile( fs, logPath, rotationThreshold, maxArchives, fileSuffix, header );\n-        log = ctx.getLogger( \"\" );\n+        ctx = setupLogFile(fs, logPath, rotationThreshold, maxArchives, fileSuffix, header);\n+        log = ctx.getLogger(\"\");\n     }\n \n-    public void printf( String pattern, Object... params )\n+    public void printf(String pattern, Object... params)\n     {\n-        log.printf( Level.DEBUG, pattern, params );\n+        log.printf(Level.DEBUG, pattern, params);\n     }\n \n     @Override\n@@ -77,8 +78,8 @@ public class RotatingLogFileWriter implements Closeable\n         ctx.close();\n     }\n \n-    private Neo4jLoggerContext setupLogFile( FileSystemAbstraction fileSystemAbstraction, Path logPath, long rotationThreshold, int maxArchives,\n-            String fileSuffix, String header )\n+    private Neo4jLoggerContext setupLogFile(FileSystemAbstraction fileSystemAbstraction, Path logPath, long rotationThreshold, int maxArchives,\n+                                            String fileSuffix, String header)\n     {\n         try\n         {\n@@ -93,44 +94,42 @@ public class RotatingLogFileWriter implements Closeable\n             };\n \n             // Just adds a header to the beginning of each file - no transformation will be done on the log messages.\n-            PatternLayout layout = PatternLayout.newBuilder().withConfiguration( configuration ).withHeader( header ).build();\n+            PatternLayout layout = PatternLayout.newBuilder().withConfiguration(configuration).withHeader(header).build();\n \n             Appender appender;\n-            if ( fileSystemAbstraction instanceof DefaultFileSystemAbstraction )\n+            if (fileSystemAbstraction instanceof DefaultFileSystemAbstraction)\n             {\n                 appender = RollingFileAppender.newBuilder()\n-                        .setName( APPENDER_NAME )\n-                        .setLayout( layout )\n-                        .withFileName( logPath.toString() )\n-                        .withFilePattern( logPath + \".%i\" + fileSuffix )\n-                        .withPolicy( SizeBasedTriggeringPolicy.createPolicy( String.valueOf( rotationThreshold ) ) )\n-                        .withStrategy( DefaultRolloverStrategy.newBuilder().withMax( String.valueOf( maxArchives ) ).withFileIndex( \"min\" ).build() )\n-                        .build();\n-            }\n-            else\n+                  .setName(APPENDER_NAME)\n+                  .setLayout(layout)\n+                  .withFileName(logPath.toString())\n+                  .withFilePattern(logPath + \".%i\" + fileSuffix)\n+                  .withPolicy(SizeBasedTriggeringPolicy.createPolicy(String.valueOf(rotationThreshold)))\n+                  .withStrategy(DefaultRolloverStrategy.newBuilder().withMax(String.valueOf(maxArchives)).withFileIndex(\"min\").build())\n+                  .build();\n+            } else\n             {\n                 // When using a different file system than DefaultFileSystemAbstraction for tests, we cannot use log4j file appenders since\n                 // it will create files directly in the real filesystem ignoring our abstraction.\n-                fileSystemAbstraction.mkdirs( logPath.getParent() );\n-                OutputStream outputStream = fileSystemAbstraction.openAsOutputStream( logPath, true );\n+                fileSystemAbstraction.mkdirs(logPath.getParent());\n+                OutputStream outputStream = fileSystemAbstraction.openAsOutputStream(logPath, true);\n                 additionalCloseable = outputStream;\n-                appender = ((OutputStreamAppender.Builder<?>) OutputStreamAppender.newBuilder().setName( APPENDER_NAME ).setLayout( layout ))\n-                        .setTarget( outputStream ).build();\n+                appender = ((OutputStreamAppender.Builder<?>) OutputStreamAppender.newBuilder().setName(APPENDER_NAME).setLayout(layout))\n+                  .setTarget(outputStream).build();\n             }\n             appender.start();\n-            configuration.addAppender( appender );\n+            configuration.addAppender(appender);\n \n             LoggerConfig rootLogger = configuration.getRootLogger();\n-            rootLogger.addAppender( appender, null, null );\n-            rootLogger.setLevel( Level.DEBUG );\n+            rootLogger.addAppender(appender, null, null);\n+            rootLogger.setLevel(Level.DEBUG);\n \n-            LoggerContext context = new LoggerContext( \"loggercontext\" );\n-            context.setConfiguration( configuration );\n-            return new Neo4jLoggerContext( context, additionalCloseable );\n-        }\n-        catch ( IOException e )\n+            LoggerContext context = new LoggerContext(\"loggercontext\");\n+            context.setConfiguration(configuration);\n+            return new Neo4jLoggerContext(context, additionalCloseable);\n+        } catch (IOException e)\n         {\n-            throw new UncheckedIOException( e );\n+            throw new UncheckedIOException(e);\n         }\n     }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}