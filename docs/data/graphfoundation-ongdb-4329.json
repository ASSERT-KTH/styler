{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4329",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "255",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4329/UniqueFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4329/UniqueFactory.java\nindex 00f311f715f..4e50c0867fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4329/UniqueFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4329/UniqueFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.index;\n \n import java.util.Collections;\n@@ -30,244 +31,247 @@ import org.neo4j.graphdb.Transaction;\n \n /**\n  * A utility class for creating unique (with regard to a given index) entities.\n- *\n+ * <p>\n  * Uses the {@link Index#putIfAbsent(PropertyContainer, String, Object) putIfAbsent() method} of the referenced index.\n  *\n  * @param <T> the type of entity created by this {@link UniqueFactory}.\n  */\n public abstract class UniqueFactory<T extends PropertyContainer>\n {\n-    private final Index<T> index;\n+  private final Index<T> index;\n \n-    public static class UniqueEntity<T extends PropertyContainer>\n-    {\n-        private final T entity;\n-        private final boolean created;\n-\n-        UniqueEntity( T entity, boolean created )\n-        {\n-            this.entity = entity;\n-            this.created = created;\n-        }\n-\n-        public T entity()\n-        {\n-            return this.entity;\n-        }\n+  public static class UniqueEntity<T extends PropertyContainer>\n+  {\n+    private final T entity;\n+    private final boolean created;\n \n-        public boolean wasCreated()\n-        {\n-            return this.created;\n-        }\n+    UniqueEntity(T entity, boolean created)\n+    {\n+      this.entity = entity;\n+      this.created = created;\n     }\n \n-    /**\n-     * Implementation of {@link UniqueFactory} for {@link Node}.\n-     */\n-    public abstract static class UniqueNodeFactory extends UniqueFactory<Node>\n+    public T entity()\n     {\n-        /**\n-         * Create a new {@link UniqueFactory} for nodes.\n-         *\n-         * @param index the index to store entities uniquely in.\n-         */\n-        public UniqueNodeFactory( Index<Node> index )\n-        {\n-            super( index );\n-        }\n-\n-        /**\n-         * Create a new {@link UniqueFactory} for nodes.\n-         *\n-         * @param graphdb the graph database to get the index from.\n-         * @param index the name of the index to store entities uniquely in.\n-         */\n-        public UniqueNodeFactory( GraphDatabaseService graphdb, String index )\n-        {\n-            super( graphdb.index().forNodes( index ) );\n-        }\n-\n-        /**\n-         * Default implementation of {@link UniqueFactory#create(Map)}, creates a plain node. Override to\n-         * retrieve the node to add to the index by some other means than by creating it. For initialization of the\n-         * {@link Node}, use the {@link UniqueFactory#initialize(PropertyContainer, Map)} method.\n-         *\n-         * @see UniqueFactory#create(Map)\n-         * @see UniqueFactory#initialize(PropertyContainer, Map)\n-         */\n-        @Override\n-        protected Node create( Map<String, Object> properties )\n-        {\n-            return graphDatabase().createNode();\n-        }\n+      return this.entity;\n+    }\n \n-        /**\n-         * Default implementation of {@link UniqueFactory#delete(PropertyContainer)}. Invokes\n-         * {@link Node#delete()}.\n-         *\n-         * @see UniqueFactory#delete(PropertyContainer)\n-         */\n-        @Override\n-        protected void delete( Node node )\n-        {\n-            node.delete();\n-        }\n+    public boolean wasCreated()\n+    {\n+      return this.created;\n     }\n+  }\n \n+  /**\n+   * Implementation of {@link UniqueFactory} for {@link Node}.\n+   */\n+  public abstract static class UniqueNodeFactory extends UniqueFactory<Node>\n+  {\n     /**\n-     * Implementation of {@link UniqueFactory} for {@link Relationship}.\n+     * Create a new {@link UniqueFactory} for nodes.\n+     *\n+     * @param index the index to store entities uniquely in.\n      */\n-    public abstract static class UniqueRelationshipFactory extends UniqueFactory<Relationship>\n+    public UniqueNodeFactory(Index<Node> index)\n     {\n-        /**\n-         * Create a new {@link UniqueFactory} for relationships.\n-         *\n-         * @param index the index to store entities uniquely in.\n-         */\n-        public UniqueRelationshipFactory( Index<Relationship> index )\n-        {\n-            super( index );\n-        }\n-\n-        /**\n-         * Create a new {@link UniqueFactory} for relationships.\n-         *\n-         * @param graphdb the graph database to get the index from.\n-         * @param index the name of the index to store entities uniquely in.\n-         */\n-        public UniqueRelationshipFactory( GraphDatabaseService graphdb, String index )\n-        {\n-            super( graphdb.index().forRelationships( index ) );\n-        }\n-\n-        /**\n-         * Default implementation of {@link UniqueFactory#initialize(PropertyContainer, Map)}, does nothing\n-         * for {@link Relationship Relationships}. Override to perform some action with the guarantee that this method\n-         * is only invoked for the transaction that succeeded in creating the {@link Relationship}.\n-         *\n-         * @see UniqueFactory#initialize(PropertyContainer, Map)\n-         * @see UniqueFactory#create(Map)\n-         */\n-        @Override\n-        protected void initialize( Relationship relationship, Map<String, Object> properties )\n-        {\n-            // this class has the create() method, initialize() is optional\n-        }\n-\n-        /**\n-         * Default implementation of {@link UniqueFactory#delete(PropertyContainer)}. Invokes\n-         * {@link Relationship#delete()}.\n-         *\n-         * @see UniqueFactory#delete(PropertyContainer)\n-         */\n-        @Override\n-        protected void delete( Relationship relationship )\n-        {\n-            relationship.delete();\n-        }\n+      super(index);\n     }\n \n-    private UniqueFactory( Index<T> index )\n+    /**\n+     * Create a new {@link UniqueFactory} for nodes.\n+     *\n+     * @param graphdb the graph database to get the index from.\n+     * @param index   the name of the index to store entities uniquely in.\n+     */\n+    public UniqueNodeFactory(GraphDatabaseService graphdb, String index)\n     {\n-        this.index = index;\n+      super(graphdb.index().forNodes(index));\n     }\n \n     /**\n-     * Implement this method to create the {@link Node} or {@link Relationship} to index.\n+     * Default implementation of {@link UniqueFactory#create(Map)}, creates a plain node. Override to\n+     * retrieve the node to add to the index by some other means than by creating it. For initialization of the\n+     * {@link Node}, use the {@link UniqueFactory#initialize(PropertyContainer, Map)} method.\n      *\n-     * This method will be invoked exactly once per transaction that attempts to create an entry in the index.\n-     * The created entity might be discarded if another thread creates an entity with the same mapping concurrently.\n-     *\n-     * @param properties the properties that this entity will is to be indexed uniquely with.\n-     * @return the entity to add to the index.\n+     * @see UniqueFactory#create(Map)\n+     * @see UniqueFactory#initialize(PropertyContainer, Map)\n      */\n-    protected abstract T create( Map<String, Object> properties );\n+    @Override\n+    protected Node create(Map<String, Object> properties)\n+    {\n+      return graphDatabase().createNode();\n+    }\n \n     /**\n-     * Implement this method to initialize the {@link Node} or {@link Relationship} created for being stored in the index.\n-     *\n-     * This method will be invoked exactly once per created unique entity.\n+     * Default implementation of {@link UniqueFactory#delete(PropertyContainer)}. Invokes\n+     * {@link Node#delete()}.\n      *\n-     * The created entity might be discarded if another thread creates an entity concurrently.\n-     * This method will however only be invoked in the transaction that succeeds in creating the node.\n-     *\n-     * @param created the created entity to initialize.\n-     * @param properties the properties that this entity was indexed uniquely with.\n+     * @see UniqueFactory#delete(PropertyContainer)\n      */\n-    protected abstract void initialize( T created, Map<String, Object> properties );\n+    @Override\n+    protected void delete(Node node)\n+    {\n+      node.delete();\n+    }\n+  }\n \n+  /**\n+   * Implementation of {@link UniqueFactory} for {@link Relationship}.\n+   */\n+  public abstract static class UniqueRelationshipFactory extends UniqueFactory<Relationship>\n+  {\n     /**\n-     * Invoked after a new entity has been {@link #create(Map) created}, but adding it to the index failed (due to being\n-     * added by another transaction concurrently). The purpose of this method is to undo the {@link #create(Map)\n-     * creation of the entity}, the default implementations of this method remove the entity. Override this method to\n-     * define a different behavior.\n+     * Create a new {@link UniqueFactory} for relationships.\n      *\n-     * @param created the entity that was created but was not added to the index.\n+     * @param index the index to store entities uniquely in.\n      */\n-    protected abstract void delete( T created );\n+    public UniqueRelationshipFactory(Index<Relationship> index)\n+    {\n+      super(index);\n+    }\n \n     /**\n-     * Get the indexed entity, creating it (exactly once) if no indexed entity exists.\n-     * @param key the key to find the entity under in the index.\n-     * @param value the value the key is mapped to for the entity in the index.\n-     * @return the unique entity in the index.\n+     * Create a new {@link UniqueFactory} for relationships.\n+     *\n+     * @param graphdb the graph database to get the index from.\n+     * @param index   the name of the index to store entities uniquely in.\n      */\n-    public final T getOrCreate( String key, Object value )\n+    public UniqueRelationshipFactory(GraphDatabaseService graphdb, String index)\n     {\n-        return getOrCreateWithOutcome( key, value ).entity();\n+      super(graphdb.index().forRelationships(index));\n     }\n \n     /**\n-     * Get the indexed entity, creating it (exactly once) if no indexed entity exists.\n-     * Includes the outcome, i.e. whether the entity was created or not.\n-     * @param key the key to find the entity under in the index.\n-     * @param value the value the key is mapped to for the entity in the index.\n-     * @return the unique entity in the index as well as whether or not it was created,\n-     * wrapped in a {@link UniqueEntity}.\n+     * Default implementation of {@link UniqueFactory#initialize(PropertyContainer, Map)}, does nothing\n+     * for {@link Relationship Relationships}. Override to perform some action with the guarantee that this method\n+     * is only invoked for the transaction that succeeded in creating the {@link Relationship}.\n+     *\n+     * @see UniqueFactory#initialize(PropertyContainer, Map)\n+     * @see UniqueFactory#create(Map)\n      */\n-    public final UniqueEntity<T> getOrCreateWithOutcome( String key, Object value )\n+    @Override\n+    protected void initialize(Relationship relationship, Map<String, Object> properties)\n     {\n-        // Index reads implies asserting we're in a transaction.\n-        T result = index.get( key, value ).getSingle();\n-        boolean wasCreated = false;\n-        if ( result == null )\n-        {\n-            try ( Transaction tx = graphDatabase().beginTx() )\n-            {\n-                Map<String, Object> properties = Collections.singletonMap( key, value );\n-                T created = create( properties );\n-                result = index.putIfAbsent( created, key, value );\n-                if ( result == null )\n-                {\n-                    initialize( created, properties );\n-                    result = created;\n-                    wasCreated = true;\n-                }\n-                else\n-                {\n-                    delete( created );\n-                }\n-                tx.success();\n-            }\n-        }\n-        return new UniqueEntity<>( result, wasCreated );\n+      // this class has the create() method, initialize() is optional\n     }\n \n     /**\n-     * Get the {@link GraphDatabaseService graph database} of the referenced index.\n-     * @return the {@link GraphDatabaseService graph database} of the referenced index.\n+     * Default implementation of {@link UniqueFactory#delete(PropertyContainer)}. Invokes\n+     * {@link Relationship#delete()}.\n+     *\n+     * @see UniqueFactory#delete(PropertyContainer)\n      */\n-    protected final GraphDatabaseService graphDatabase()\n+    @Override\n+    protected void delete(Relationship relationship)\n     {\n-        return index.getGraphDatabase();\n+      relationship.delete();\n     }\n+  }\n \n-    /**\n-     * Get the referenced index.\n-     * @return the referenced index.\n-     */\n-    protected final Index<T> index()\n+  private UniqueFactory(Index<T> index)\n+  {\n+    this.index = index;\n+  }\n+\n+  /**\n+   * Implement this method to create the {@link Node} or {@link Relationship} to index.\n+   * <p>\n+   * This method will be invoked exactly once per transaction that attempts to create an entry in the index.\n+   * The created entity might be discarded if another thread creates an entity with the same mapping concurrently.\n+   *\n+   * @param properties the properties that this entity will is to be indexed uniquely with.\n+   * @return the entity to add to the index.\n+   */\n+  protected abstract T create(Map<String, Object> properties);\n+\n+  /**\n+   * Implement this method to initialize the {@link Node} or {@link Relationship} created for being stored in the index.\n+   * <p>\n+   * This method will be invoked exactly once per created unique entity.\n+   * <p>\n+   * The created entity might be discarded if another thread creates an entity concurrently.\n+   * This method will however only be invoked in the transaction that succeeds in creating the node.\n+   *\n+   * @param created    the created entity to initialize.\n+   * @param properties the properties that this entity was indexed uniquely with.\n+   */\n+  protected abstract void initialize(T created, Map<String, Object> properties);\n+\n+  /**\n+   * Invoked after a new entity has been {@link #create(Map) created}, but adding it to the index failed (due to being\n+   * added by another transaction concurrently). The purpose of this method is to undo the {@link #create(Map)\n+   * creation of the entity}, the default implementations of this method remove the entity. Override this method to\n+   * define a different behavior.\n+   *\n+   * @param created the entity that was created but was not added to the index.\n+   */\n+  protected abstract void delete(T created);\n+\n+  /**\n+   * Get the indexed entity, creating it (exactly once) if no indexed entity exists.\n+   *\n+   * @param key   the key to find the entity under in the index.\n+   * @param value the value the key is mapped to for the entity in the index.\n+   * @return the unique entity in the index.\n+   */\n+  public final T getOrCreate(String key, Object value)\n+  {\n+    return getOrCreateWithOutcome(key, value).entity();\n+  }\n+\n+  /**\n+   * Get the indexed entity, creating it (exactly once) if no indexed entity exists.\n+   * Includes the outcome, i.e. whether the entity was created or not.\n+   *\n+   * @param key   the key to find the entity under in the index.\n+   * @param value the value the key is mapped to for the entity in the index.\n+   * @return the unique entity in the index as well as whether or not it was created,\n+   * wrapped in a {@link UniqueEntity}.\n+   */\n+  public final UniqueEntity<T> getOrCreateWithOutcome(String key, Object value)\n+  {\n+    // Index reads implies asserting we're in a transaction.\n+    T result = index.get(key, value).getSingle();\n+    boolean wasCreated = false;\n+    if (result == null)\n     {\n-        return index;\n+      try (Transaction tx = graphDatabase().beginTx())\n+      {\n+        Map<String, Object> properties = Collections.singletonMap(key, value);\n+        T created = create(properties);\n+        result = index.putIfAbsent(created, key, value);\n+        if (result == null)\n+        {\n+          initialize(created, properties);\n+          result = created;\n+          wasCreated = true;\n+        } else\n+        {\n+          delete(created);\n+        }\n+        tx.success();\n+      }\n     }\n+    return new UniqueEntity<>(result, wasCreated);\n+  }\n+\n+  /**\n+   * Get the {@link GraphDatabaseService graph database} of the referenced index.\n+   *\n+   * @return the {@link GraphDatabaseService graph database} of the referenced index.\n+   */\n+  protected final GraphDatabaseService graphDatabase()\n+  {\n+    return index.getGraphDatabase();\n+  }\n+\n+  /**\n+   * Get the referenced index.\n+   *\n+   * @return the referenced index.\n+   */\n+  protected final Index<T> index()\n+  {\n+    return index;\n+  }\n }\n",
            "diff_size": 326
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4329/UniqueFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4329/UniqueFactory.java\nindex 00f311f715f..1ac547464a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4329/UniqueFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4329/UniqueFactory.java\n@@ -96,7 +96,7 @@ public abstract class UniqueFactory<T extends PropertyContainer>\n          * @see UniqueFactory#initialize(PropertyContainer, Map)\n          */\n         @Override\n-        protected Node create( Map<String, Object> properties )\n+        protected Node create( Map<String,Object> properties )\n         {\n             return graphDatabase().createNode();\n         }\n@@ -149,7 +149,7 @@ public abstract class UniqueFactory<T extends PropertyContainer>\n          * @see UniqueFactory#create(Map)\n          */\n         @Override\n-        protected void initialize( Relationship relationship, Map<String, Object> properties )\n+        protected void initialize( Relationship relationship, Map<String,Object> properties )\n         {\n             // this class has the create() method, initialize() is optional\n         }\n@@ -181,7 +181,7 @@ public abstract class UniqueFactory<T extends PropertyContainer>\n      * @param properties the properties that this entity will is to be indexed uniquely with.\n      * @return the entity to add to the index.\n      */\n-    protected abstract T create( Map<String, Object> properties );\n+    protected abstract T create( Map<String,Object> properties );\n \n     /**\n      * Implement this method to initialize the {@link Node} or {@link Relationship} created for being stored in the index.\n@@ -194,7 +194,7 @@ public abstract class UniqueFactory<T extends PropertyContainer>\n      * @param created the created entity to initialize.\n      * @param properties the properties that this entity was indexed uniquely with.\n      */\n-    protected abstract void initialize( T created, Map<String, Object> properties );\n+    protected abstract void initialize( T created, Map<String,Object> properties );\n \n     /**\n      * Invoked after a new entity has been {@link #create(Map) created}, but adding it to the index failed (due to being\n@@ -234,7 +234,7 @@ public abstract class UniqueFactory<T extends PropertyContainer>\n         {\n             try ( Transaction tx = graphDatabase().beginTx() )\n             {\n-                Map<String, Object> properties = Collections.singletonMap( key, value );\n+                Map<String,Object> properties = Collections.singletonMap( key, value );\n                 T created = create( properties );\n                 result = index.putIfAbsent( created, key, value );\n                 if ( result == null )\n@@ -270,4 +270,4 @@ public abstract class UniqueFactory<T extends PropertyContainer>\n     {\n         return index;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}