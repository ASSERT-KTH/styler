{
    "project_name": "Activiti-Activiti",
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.persistence.entity.data.impl.util;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/60/ExecutionTreeStringBuilder.java\nindex 9450380813f..3614b64a5cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/60/ExecutionTreeStringBuilder.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence.entity.data.impl.util;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/60/ExecutionTreeStringBuilder.java\nindex 9450380813f..7beadb980be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/60/ExecutionTreeStringBuilder.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence.entity.data.impl.util;\n \n import java.util.List;\n@@ -18,56 +19,54 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n \n /**\n  * Prints a nicely tree-looking overview of the executions.\n- * \n-\n  */\n public class ExecutionTreeStringBuilder {\n-  \n-  protected ExecutionEntity executionEntity;\n-  \n-  public ExecutionTreeStringBuilder(ExecutionEntity executionEntity) {\n-    this.executionEntity = executionEntity;\n-  }\n-  \n-  /* See http://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram */\n-  @Override\n-  public String toString() {\n-    StringBuilder strb = new StringBuilder();\n-    strb.append(executionEntity.getId()).append(\" : \")\n-        .append(executionEntity.getActivityId())\n-        .append(\", parent id \")\n-        .append(executionEntity.getParentId())\n-        .append(\"\\r\\n\");\n-    \n-    List<? extends ExecutionEntity> children = executionEntity.getExecutions();\n-    if (children != null) {\n-      for (ExecutionEntity childExecution : children) {\n-        internalToString(childExecution, strb, \"\", true);\n-      }\n+\n+    protected ExecutionEntity executionEntity;\n+\n+    public ExecutionTreeStringBuilder(ExecutionEntity executionEntity) {\n+        this.executionEntity = executionEntity;\n     }\n-    return strb.toString();\n-  }\n \n-  protected void internalToString(ExecutionEntity execution, StringBuilder strb, String prefix, boolean isTail) {\n-    strb.append(prefix)\n-        .append(isTail ? \"\u2514\u2500\u2500 \" : \"\u251c\u2500\u2500 \")\n-        .append(execution.getId()).append(\" : \")\n-        .append(\"activityId=\" + execution.getActivityId())\n-        .append(\", parent id \")\n-        .append(execution.getParentId())\n-        .append(execution.isScope() ? \" (scope)\" : \"\")\n-        .append(execution.isMultiInstanceRoot() ? \" (multi instance root)\" : \"\")\n-        .append(\"\\r\\n\");\n-    \n-    List<? extends ExecutionEntity> children = executionEntity.getExecutions();\n-    if (children != null) {\n-      for (int i = 0; i < children.size() - 1; i++) {\n-        internalToString(children.get(i), strb, prefix + (isTail ? \"    \" : \"\u2502   \"), false);\n-      }\n-      if (children.size() > 0) {\n-        internalToString(children.get(children.size() - 1), strb, prefix + (isTail ? \"    \" : \"\u2502   \"), true);\n-      }\n+    /* See http://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram */\n+    @Override\n+    public String toString() {\n+        StringBuilder strb = new StringBuilder();\n+        strb.append(executionEntity.getId()).append(\" : \")\n+                .append(executionEntity.getActivityId())\n+                .append(\", parent id \")\n+                .append(executionEntity.getParentId())\n+                .append(\"\\r\\n\");\n+\n+        List<? extends ExecutionEntity> children = executionEntity.getExecutions();\n+        if (children != null) {\n+            for (ExecutionEntity childExecution : children) {\n+                internalToString(childExecution, strb, \"\", true);\n+            }\n+        }\n+        return strb.toString();\n+    }\n+\n+    protected void internalToString(ExecutionEntity execution, StringBuilder strb, String prefix, boolean isTail) {\n+        strb.append(prefix)\n+                .append(isTail ? \"\u2514\u2500\u2500 \" : \"\u251c\u2500\u2500 \")\n+                .append(execution.getId()).append(\" : \")\n+                .append(\"activityId=\" + execution.getActivityId())\n+                .append(\", parent id \")\n+                .append(execution.getParentId())\n+                .append(execution.isScope() ? \" (scope)\" : \"\")\n+                .append(execution.isMultiInstanceRoot() ? \" (multi instance root)\" : \"\")\n+                .append(\"\\r\\n\");\n+\n+        List<? extends ExecutionEntity> children = executionEntity.getExecutions();\n+        if (children != null) {\n+            for (int i = 0; i < children.size() - 1; i++) {\n+                internalToString(children.get(i), strb, prefix + (isTail ? \"    \" : \"\u2502   \"), false);\n+            }\n+            if (children.size() > 0) {\n+                internalToString(children.get(children.size() - 1), strb, prefix + (isTail ? \"    \" : \"\u2502   \"), true);\n+            }\n+        }\n     }\n-  }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 335).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/60/ExecutionTreeStringBuilder.java\nindex 9450380813f..89a6b04aa79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/60/ExecutionTreeStringBuilder.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.persistence.entity.data.impl.util;\n \n import java.util.List;\n-\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n \n /**\n@@ -21,53 +20,49 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n  * \n \n  */\n+\n+\n public class ExecutionTreeStringBuilder {\n-  \n+\n   protected ExecutionEntity executionEntity;\n-  \n+\n   public ExecutionTreeStringBuilder(ExecutionEntity executionEntity) {\n     this.executionEntity = executionEntity;\n   }\n   \n   /* See http://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram */\n+\n   @Override\n   public String toString() {\n     StringBuilder strb = new StringBuilder();\n-    strb.append(executionEntity.getId()).append(\" : \")\n-        .append(executionEntity.getActivityId())\n-        .append(\", parent id \")\n-        .append(executionEntity.getParentId())\n-        .append(\"\\r\\n\");\n-    \n+    strb.append(executionEntity.getId()).append(\" : \").append(executionEntity.getActivityId()).append(\", parent id \").append(executionEntity.getParentId()).append(\"\\r\\n\");\n+\n     List<? extends ExecutionEntity> children = executionEntity.getExecutions();\n     if (children != null) {\n-      for (ExecutionEntity childExecution : children) {\n-        internalToString(childExecution, strb, \"\", true);\n-      }\n+        for (ExecutionEntity childExecution : children) {\n+            internalToString(childExecution, strb, \"\", true);\n+        }\n     }\n     return strb.toString();\n   }\n \n   protected void internalToString(ExecutionEntity execution, StringBuilder strb, String prefix, boolean isTail) {\n-    strb.append(prefix)\n-        .append(isTail ? \"\u2514\u2500\u2500 \" : \"\u251c\u2500\u2500 \")\n-        .append(execution.getId()).append(\" : \")\n-        .append(\"activityId=\" + execution.getActivityId())\n-        .append(\", parent id \")\n-        .append(execution.getParentId())\n-        .append(execution.isScope() ? \" (scope)\" : \"\")\n-        .append(execution.isMultiInstanceRoot() ? \" (multi instance root)\" : \"\")\n-        .append(\"\\r\\n\");\n-    \n+    strb.append(prefix).append(isTail ? \"\u2514\u2500\u2500 \" : \"\u251c\u2500\u2500 \").append(execution.getId()).append(\" : \").append(\"activityId=\" + execution.getActivityId()).append(\", parent id \").append(execution.getParentId()).append(execution.isScope() ? \" (scope)\" : \"\").append(execution.isMultiInstanceRoot() ? \" (multi instance root)\" : \"\").append(\"\\r\\n\");\n+\n     List<? extends ExecutionEntity> children = executionEntity.getExecutions();\n     if (children != null) {\n-      for (int i = 0; i < children.size() - 1; i++) {\n-        internalToString(children.get(i), strb, prefix + (isTail ? \"    \" : \"\u2502   \"), false);\n-      }\n-      if (children.size() > 0) {\n-        internalToString(children.get(children.size() - 1), strb, prefix + (isTail ? \"    \" : \"\u2502   \"), true);\n-      }\n+        for (int i = 0; i < children.size() - 1; i++) {\n+          internalToString(children.get(i),\n+                           strb,\n+                           prefix + (isTail ? \"    \" : \"\u2502   \"),\n+                           false);\n+        }\n+        if (children.size() > 0) {\n+          internalToString(children.get(children.size() - 1),\n+                           strb,\n+                           prefix + (isTail ? \"    \" : \"\u2502   \"),\n+                           true);\n+        }\n     }\n   }\n-\n }\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "package statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/60/ExecutionTreeStringBuilder.java\nindex 9450380813f..a83e7b78610 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/60/ExecutionTreeStringBuilder.java\n@@ -10,7 +10,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.activiti.engine.impl.persistence.entity.data.impl.util;\n+\n+package org.activiti.engine.impl.persistence.entity.data.impl\n+\n+. util;\n \n import java.util.List;\n \n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/60/ExecutionTreeStringBuilder.java\nindex 9450380813f..3614b64a5cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/60/ExecutionTreeStringBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/60/ExecutionTreeStringBuilder.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence.entity.data.impl.util;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}