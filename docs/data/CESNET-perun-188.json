{
    "project_name": "CESNET-perun",
    "error_id": "188",
    "information": {
        "errors": [
            {
                "line": "59",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t/**\n\t * GenerateLoginValueElixir() fills login-namespace:elixir-persistent attribute with generated value.\n\t * \tFormat is: \"[hash]@elixir-europe.org\" where [hash] represents sha1hash counted from user's id.\n\t *\n\t * @param sess PerunSession\n\t * @param user User to fill attribute for",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java\nindex 1218d56c018..080e76cf2af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java\n@@ -11,6 +11,7 @@ import cz.metacentrum.perun.core.api.ExtSource;\n import cz.metacentrum.perun.core.api.User;\n import cz.metacentrum.perun.core.api.UserExtSource;\n import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+\n import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n@@ -21,121 +22,120 @@ import java.security.NoSuchAlgorithmException;\n  *\n  * @author Sona Mastrakova <sona.mastrakova@gmail.com>\n  * @author Ondrej Velisek <ondrejvelisek@gmail.com>\n- *\n  * @date 06.07.2015\n  */\n public class urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow extends urn_perun_user_attribute_def_def_login_namespace {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.class);\n-\tprivate final String extSourceNameElixir = \"https://login.elixir-czech.org/idp/\";\n-\tprivate final String domainNameElixir = \"@elixir-europe.org\";\n-\tprivate final String attrNameElixir = \"login-namespace:elixir-persistent-shadow\";\n-\n-\t/**\n-\t * Filling implemented for login:namespace:elixir-persistent attribute\n-\t *\n-\t * @param perunSession PerunSession\n-\t * @param user User to fill attribute for\n-\t * @param attribute Attribute to fill value to\n-\t * @return Filled attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\n-\t\tAttribute filledAttribute = new Attribute(attribute);\n-\n-\t\tif (attribute.getFriendlyName().equals(this.attrNameElixir)) {\n-\t\t\treturn generateLoginValueElixir(perunSession, user, filledAttribute);\n-\t\t} else {\n-\t\t\t// without value\n-\t\t\treturn filledAttribute;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * GenerateLoginValueElixir() fills login-namespace:elixir-persistent attribute with generated value.\n-\t * \tFormat is: \"[hash]@elixir-europe.org\" where [hash] represents sha1hash counted from user's id.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to fill attribute for\n-\t * @param attribute Attribute to fill value with\n-\t * @return Filled attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tprivate Attribute generateLoginValueElixir(PerunSessionImpl sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\ttry {\n-\t\t\tattribute.setValue(sha1HashCount(user).toString() + this.domainNameElixir);\n-\t\t\tcheckAttributeValue(sess, user, attribute);\n-\t\t\treturn attribute;\n-\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\treturn attribute;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Sha1HashCount() counts sha1hash for elixir-persistent namespace from user's id\n-\t *\n-\t * @param user user with the id\n-\t * @return counted hash\n-\t */\n-\tprivate StringBuilder sha1HashCount(User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tMessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n-\t\t\t// counts sha1hash and converts output to hex\n-\t\t\tbyte[] result = mDigest.digest(ByteBuffer.allocate(4).putInt(user.getId()).array());\n-\t\t\tStringBuilder sb = new StringBuilder();\n-\t\t\tfor (int i = 0; i < result.length; i++) {\n-\t\t\t\tsb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));\n-\t\t\t}\n-\n-\t\t\treturn sb;\n-\t\t} catch (NoSuchAlgorithmException ex) {\n-\t\t\tthrow new InternalErrorException(\"Algorithm for sha1hash was not found.\", ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * ChangedAttributeHook() sets UserExtSource with following properties:\n-\t *  - extSourceType is IdP\n-\t *  - extSourceName is https://engine.elixir-idp.ics.muni.cz/authentication/idp/metadata\n-\t *  - user's extSource login is the same as his elixir-persistent attribute\n-\t *\n-\t * @param session PerunSession\n-\t * @param user User to set UserExtSource for\n-\t * @param attribute Attribute containing elixirID\n-\t * @throws cz.metacentrum.perun.core.api.exceptions.InternalErrorException\n-\t * @throws cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException\n-\t */\n-\t@Override\n-\tpublic void changedAttributeHook(PerunSessionImpl session, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException {\n-\t\ttry {\n-\t\t\tString userNamespace = attribute.getFriendlyNameParameter();\n-\n-\t\t\tif(userNamespace.equals(\"elixir-persistent-shadow\") && attribute.getValue() != null){\n-\t\t\t\tExtSource extSource = session.getPerunBl().getExtSourcesManagerBl().getExtSourceByName(session, extSourceNameElixir);\n-\t\t\t\tUserExtSource userExtSource = new UserExtSource(extSource, 0, attribute.getValue().toString());\n-\n-\t\t\t\tsession.getPerunBl().getUsersManagerBl().addUserExtSource(session, user, userExtSource);\n-\t\t\t}\n-\t\t} catch (UserExtSourceExistsException ex) {\n-\t\t\tlog.warn(\"Elixir IdP external source already exists for the user.\", ex);\n-\t\t} catch (ExtSourceNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"IdP external source for elixir doesn't exist.\", ex);\n-\t\t}\n-\t}\n-\n-\n-\tpublic AttributeDefinition getAttributeDefinition() {\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n-\t\tattr.setFriendlyName(\"login-namespace:elixir-persistent-shadow\");\n-\t\tattr.setDisplayName(\"ELIXIR login\");\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setDescription(\"Login to ELIXIR. Do not use it directly! \" +\n-\t\t\t\t\"Use instead virt:elixir-persistent attribute.\");\n-\t\treturn attr;\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.class);\n+    private final String extSourceNameElixir = \"https://login.elixir-czech.org/idp/\";\n+    private final String domainNameElixir = \"@elixir-europe.org\";\n+    private final String attrNameElixir = \"login-namespace:elixir-persistent-shadow\";\n+\n+    /**\n+     * Filling implemented for login:namespace:elixir-persistent attribute\n+     *\n+     * @param perunSession PerunSession\n+     * @param user         User to fill attribute for\n+     * @param attribute    Attribute to fill value to\n+     * @return Filled attribute\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeAssignmentException\n+     */\n+    @Override\n+    public Attribute fillAttribute(PerunSessionImpl perunSession, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+\n+        Attribute filledAttribute = new Attribute(attribute);\n+\n+        if (attribute.getFriendlyName().equals(this.attrNameElixir)) {\n+            return generateLoginValueElixir(perunSession, user, filledAttribute);\n+        } else {\n+            // without value\n+            return filledAttribute;\n+        }\n+    }\n+\n+    /**\n+     * GenerateLoginValueElixir() fills login-namespace:elixir-persistent attribute with generated value.\n+     * Format is: \"[hash]@elixir-europe.org\" where [hash] represents sha1hash counted from user's id.\n+     *\n+     * @param sess      PerunSession\n+     * @param user      User to fill attribute for\n+     * @param attribute Attribute to fill value with\n+     * @return Filled attribute\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeAssignmentException\n+     */\n+    private Attribute generateLoginValueElixir(PerunSessionImpl sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        try {\n+            attribute.setValue(sha1HashCount(user).toString() + this.domainNameElixir);\n+            checkAttributeValue(sess, user, attribute);\n+            return attribute;\n+        } catch (WrongAttributeValueException ex) {\n+            return attribute;\n+        }\n+    }\n+\n+    /**\n+     * Sha1HashCount() counts sha1hash for elixir-persistent namespace from user's id\n+     *\n+     * @param user user with the id\n+     * @return counted hash\n+     */\n+    private StringBuilder sha1HashCount(User user) throws InternalErrorException {\n+        try {\n+            MessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+            // counts sha1hash and converts output to hex\n+            byte[] result = mDigest.digest(ByteBuffer.allocate(4).putInt(user.getId()).array());\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = 0; i < result.length; i++) {\n+                sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));\n+            }\n+\n+            return sb;\n+        } catch (NoSuchAlgorithmException ex) {\n+            throw new InternalErrorException(\"Algorithm for sha1hash was not found.\", ex);\n+        }\n+    }\n+\n+    /**\n+     * ChangedAttributeHook() sets UserExtSource with following properties:\n+     * - extSourceType is IdP\n+     * - extSourceName is https://engine.elixir-idp.ics.muni.cz/authentication/idp/metadata\n+     * - user's extSource login is the same as his elixir-persistent attribute\n+     *\n+     * @param session   PerunSession\n+     * @param user      User to set UserExtSource for\n+     * @param attribute Attribute containing elixirID\n+     * @throws cz.metacentrum.perun.core.api.exceptions.InternalErrorException\n+     * @throws cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException\n+     */\n+    @Override\n+    public void changedAttributeHook(PerunSessionImpl session, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException {\n+        try {\n+            String userNamespace = attribute.getFriendlyNameParameter();\n+\n+            if (userNamespace.equals(\"elixir-persistent-shadow\") && attribute.getValue() != null) {\n+                ExtSource extSource = session.getPerunBl().getExtSourcesManagerBl().getExtSourceByName(session, extSourceNameElixir);\n+                UserExtSource userExtSource = new UserExtSource(extSource, 0, attribute.getValue().toString());\n+\n+                session.getPerunBl().getUsersManagerBl().addUserExtSource(session, user, userExtSource);\n+            }\n+        } catch (UserExtSourceExistsException ex) {\n+            log.warn(\"Elixir IdP external source already exists for the user.\", ex);\n+        } catch (ExtSourceNotExistsException ex) {\n+            throw new InternalErrorException(\"IdP external source for elixir doesn't exist.\", ex);\n+        }\n+    }\n+\n+\n+    public AttributeDefinition getAttributeDefinition() {\n+        AttributeDefinition attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n+        attr.setFriendlyName(\"login-namespace:elixir-persistent-shadow\");\n+        attr.setDisplayName(\"ELIXIR login\");\n+        attr.setType(String.class.getName());\n+        attr.setDescription(\"Login to ELIXIR. Do not use it directly! \" +\n+                \"Use instead virt:elixir-persistent attribute.\");\n+        return attr;\n+    }\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java\nindex 1218d56c018..f905fb6a8a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/188/urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.java\n@@ -4,7 +4,6 @@ import cz.metacentrum.perun.core.api.AttributesManager;\n import cz.metacentrum.perun.core.api.exceptions.*;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n import cz.metacentrum.perun.core.api.ExtSource;\n@@ -24,118 +23,121 @@ import java.security.NoSuchAlgorithmException;\n  *\n  * @date 06.07.2015\n  */\n+\n+\n public class urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow extends urn_perun_user_attribute_def_def_login_namespace {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.class);\n-\tprivate final String extSourceNameElixir = \"https://login.elixir-czech.org/idp/\";\n-\tprivate final String domainNameElixir = \"@elixir-europe.org\";\n-\tprivate final String attrNameElixir = \"login-namespace:elixir-persistent-shadow\";\n-\n-\t/**\n-\t * Filling implemented for login:namespace:elixir-persistent attribute\n-\t *\n-\t * @param perunSession PerunSession\n-\t * @param user User to fill attribute for\n-\t * @param attribute Attribute to fill value to\n-\t * @return Filled attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\n-\t\tAttribute filledAttribute = new Attribute(attribute);\n-\n-\t\tif (attribute.getFriendlyName().equals(this.attrNameElixir)) {\n-\t\t\treturn generateLoginValueElixir(perunSession, user, filledAttribute);\n-\t\t} else {\n-\t\t\t// without value\n-\t\t\treturn filledAttribute;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * GenerateLoginValueElixir() fills login-namespace:elixir-persistent attribute with generated value.\n-\t * \tFormat is: \"[hash]@elixir-europe.org\" where [hash] represents sha1hash counted from user's id.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to fill attribute for\n-\t * @param attribute Attribute to fill value with\n-\t * @return Filled attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tprivate Attribute generateLoginValueElixir(PerunSessionImpl sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\ttry {\n-\t\t\tattribute.setValue(sha1HashCount(user).toString() + this.domainNameElixir);\n-\t\t\tcheckAttributeValue(sess, user, attribute);\n-\t\t\treturn attribute;\n-\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\treturn attribute;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Sha1HashCount() counts sha1hash for elixir-persistent namespace from user's id\n-\t *\n-\t * @param user user with the id\n-\t * @return counted hash\n-\t */\n-\tprivate StringBuilder sha1HashCount(User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tMessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n-\t\t\t// counts sha1hash and converts output to hex\n-\t\t\tbyte[] result = mDigest.digest(ByteBuffer.allocate(4).putInt(user.getId()).array());\n-\t\t\tStringBuilder sb = new StringBuilder();\n-\t\t\tfor (int i = 0; i < result.length; i++) {\n-\t\t\t\tsb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));\n-\t\t\t}\n-\n-\t\t\treturn sb;\n-\t\t} catch (NoSuchAlgorithmException ex) {\n-\t\t\tthrow new InternalErrorException(\"Algorithm for sha1hash was not found.\", ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * ChangedAttributeHook() sets UserExtSource with following properties:\n-\t *  - extSourceType is IdP\n-\t *  - extSourceName is https://engine.elixir-idp.ics.muni.cz/authentication/idp/metadata\n-\t *  - user's extSource login is the same as his elixir-persistent attribute\n-\t *\n-\t * @param session PerunSession\n-\t * @param user User to set UserExtSource for\n-\t * @param attribute Attribute containing elixirID\n-\t * @throws cz.metacentrum.perun.core.api.exceptions.InternalErrorException\n-\t * @throws cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException\n-\t */\n-\t@Override\n-\tpublic void changedAttributeHook(PerunSessionImpl session, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException {\n-\t\ttry {\n-\t\t\tString userNamespace = attribute.getFriendlyNameParameter();\n-\n-\t\t\tif(userNamespace.equals(\"elixir-persistent-shadow\") && attribute.getValue() != null){\n-\t\t\t\tExtSource extSource = session.getPerunBl().getExtSourcesManagerBl().getExtSourceByName(session, extSourceNameElixir);\n-\t\t\t\tUserExtSource userExtSource = new UserExtSource(extSource, 0, attribute.getValue().toString());\n-\n-\t\t\t\tsession.getPerunBl().getUsersManagerBl().addUserExtSource(session, user, userExtSource);\n-\t\t\t}\n-\t\t} catch (UserExtSourceExistsException ex) {\n-\t\t\tlog.warn(\"Elixir IdP external source already exists for the user.\", ex);\n-\t\t} catch (ExtSourceNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"IdP external source for elixir doesn't exist.\", ex);\n-\t\t}\n-\t}\n-\n-\n-\tpublic AttributeDefinition getAttributeDefinition() {\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n-\t\tattr.setFriendlyName(\"login-namespace:elixir-persistent-shadow\");\n-\t\tattr.setDisplayName(\"ELIXIR login\");\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setDescription(\"Login to ELIXIR. Do not use it directly! \" +\n-\t\t\t\t\"Use instead virt:elixir-persistent attribute.\");\n-\t\treturn attr;\n-\t}\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(urn_perun_user_attribute_def_def_login_namespace_elixir_persistent_shadow.class);\n+ private final String extSourceNameElixir = \"https://login.elixir-czech.org/idp/\";\n+ private final String domainNameElixir = \"@elixir-europe.org\";\n+ private final String attrNameElixir = \"login-namespace:elixir-persistent-shadow\";\n+\n+ /**\n+  * Filling implemented for login:namespace:elixir-persistent attribute\n+  *\n+  * @param perunSession PerunSession\n+  * @param user User to fill attribute for\n+  * @param attribute Attribute to fill value to\n+  * @return Filled attribute\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeAssignmentException\n+  */\n+\n+ @Override\n+ public Attribute fillAttribute(PerunSessionImpl perunSession, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  Attribute filledAttribute = new Attribute(attribute);\n+  if (attribute.getFriendlyName().equals(this.attrNameElixir)) {\n+   return generateLoginValueElixir(perunSession, user, filledAttribute);\n+  } else {\n+   // without value\n+   return filledAttribute;\n+  }\n+ }\n+\n+ /**\n+  * GenerateLoginValueElixir() fills login-namespace:elixir-persistent attribute with generated value.\n+  *  Format is: \"[hash]@elixir-europe.org\" where [hash] represents sha1hash counted from user's id.\n+  *\n+  * @param sess PerunSession\n+  * @param user User to fill attribute for\n+  * @param attribute Attribute to fill value with\n+  * @return Filled attribute\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeAssignmentException\n+  */\n+\n+\n+ private Attribute generateLoginValueElixir(PerunSessionImpl sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  try {\n+   attribute.setValue(sha1HashCount(user).toString() + this.domainNameElixir);\n+   checkAttributeValue(sess, user, attribute);\n+   return attribute;\n+  } catch (WrongAttributeValueException ex) {\n+   return attribute;\n+  }\n+ }\n+\n+ /**\n+  * Sha1HashCount() counts sha1hash for elixir-persistent namespace from user's id\n+  *\n+  * @param user user with the id\n+  * @return counted hash\n+  */\n+\n+\n+ private StringBuilder sha1HashCount(User user) throws InternalErrorException {\n+  try {\n+   MessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+   // counts sha1hash and converts output to hex\n+   byte[] result = mDigest.digest(ByteBuffer.allocate(4).putInt(user.getId()).array());\n+   StringBuilder sb = new StringBuilder();\n+   for (int i = 0; i<result.length; i++) {\n+    sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));\n+   }\n+\n+   return sb;\n+  } catch (NoSuchAlgorithmException ex) {\n+   throw new InternalErrorException(\"Algorithm for sha1hash was not found.\", ex);\n+  }\n+ }\n+\n+ /**\n+  * ChangedAttributeHook() sets UserExtSource with following properties:\n+  *  - extSourceType is IdP\n+  *  - extSourceName is https://engine.elixir-idp.ics.muni.cz/authentication/idp/metadata\n+  *  - user's extSource login is the same as his elixir-persistent attribute\n+  *\n+  * @param session PerunSession\n+  * @param user User to set UserExtSource for\n+  * @param attribute Attribute containing elixirID\n+  * @throws cz.metacentrum.perun.core.api.exceptions.InternalErrorException\n+  * @throws cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException\n+  */\n+\n+ @Override\n+ public void changedAttributeHook(PerunSessionImpl session, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException {\n+  try {\n+   String userNamespace = attribute.getFriendlyNameParameter();\n+   if (userNamespace.equals(\"elixir-persistent-shadow\") && attribute.getValue() != null) {\n+    ExtSource extSource = session.getPerunBl().getExtSourcesManagerBl().getExtSourceByName(session, extSourceNameElixir);\n+    UserExtSource userExtSource = new UserExtSource(extSource, 0, attribute.getValue().toString());\n+    session.getPerunBl().getUsersManagerBl().addUserExtSource(session, user, userExtSource);\n+   }\n+  } catch (UserExtSourceExistsException ex) {\n+   log.warn(\"Elixir IdP external source already exists for the user.\", ex);\n+  } catch (ExtSourceNotExistsException ex) {\n+   throw new InternalErrorException(\"IdP external source for elixir doesn't exist.\", ex);\n+  }\n+ }\n+\n+ public AttributeDefinition getAttributeDefinition() {\n+  AttributeDefinition attr = new AttributeDefinition();\n+  attr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n+  attr.setFriendlyName(\"login-namespace:elixir-persistent-shadow\");\n+  attr.setDisplayName(\"ELIXIR login\");\n+  attr.setType(String.class.getName());\n+  attr.setDescription(\"Login to ELIXIR. Do not use it directly! \" + \"Use instead virt:elixir-persistent attribute.\");\n+  return attr;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}