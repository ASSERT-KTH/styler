{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1467",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.policyengine.adapter.orchestrator.proxy;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.common.nhinccommonadapter.CheckPolicyRequestType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\nindex dbe958dac0b..fa20e0a4704 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.orchestrator.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\nindex dbe958dac0b..812e73b7fbe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.orchestrator.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -40,33 +41,33 @@ import org.slf4j.LoggerFactory;\n  */\n public class AdapterPolicyEngineOrchProxyJavaImpl implements AdapterPolicyEngineOrchProxy {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AdapterPolicyEngineOrchProxyJavaImpl.class);\n-\n-    /**\n-     * Given a request to check the access policy, this service will interface with the Adapter PEP to determine if\n-     * access is to be granted or denied.\n-     *\n-     * @param checkPolicyRequest The request to check defined policy\n-     * @return The response which contains the access decision\n-     */\n-    @Override\n-    public CheckPolicyResponseType checkPolicy(CheckPolicyRequestType checkPolicyRequest, AssertionType assertion) {\n-        LOG.trace(\"Begin AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n-        CheckPolicyResponseType oResponse = new CheckPolicyResponseType();\n+  private static final Logger LOG = LoggerFactory.getLogger(AdapterPolicyEngineOrchProxyJavaImpl.class);\n \n-        AdapterPolicyEngineOrchestratorImpl oOrchestratorImpl = new AdapterPolicyEngineOrchestratorImpl();\n+  /**\n+   * Given a request to check the access policy, this service will interface with the Adapter PEP to determine if\n+   * access is to be granted or denied.\n+   *\n+   * @param checkPolicyRequest The request to check defined policy\n+   * @return The response which contains the access decision\n+   */\n+  @Override\n+  public CheckPolicyResponseType checkPolicy(CheckPolicyRequestType checkPolicyRequest, AssertionType assertion) {\n+    LOG.trace(\"Begin AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n+    CheckPolicyResponseType oResponse = new CheckPolicyResponseType();\n \n-        try {\n-            oResponse = oOrchestratorImpl.checkPolicy(checkPolicyRequest, assertion);\n-        } catch (Exception e) {\n-            String sErrorMessage = \"Error occurred calling AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy.  Error: \"\n-                + e.getMessage();\n-            LOG.error(sErrorMessage, e);\n-            throw new RuntimeException(sErrorMessage, e);\n-        }\n+    AdapterPolicyEngineOrchestratorImpl oOrchestratorImpl = new AdapterPolicyEngineOrchestratorImpl();\n \n-        LOG.trace(\"End AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n-        return oResponse;\n+    try {\n+      oResponse = oOrchestratorImpl.checkPolicy(checkPolicyRequest, assertion);\n+    } catch (Exception e) {\n+      String sErrorMessage = \"Error occurred calling AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy.  Error: \"\n+          + e.getMessage();\n+      LOG.error(sErrorMessage, e);\n+      throw new RuntimeException(sErrorMessage, e);\n     }\n \n+    LOG.trace(\"End AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n+    return oResponse;\n+  }\n+\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\nindex dbe958dac0b..aacb054c995 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.orchestrator.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -55,18 +56,18 @@ public class AdapterPolicyEngineOrchProxyJavaImpl implements AdapterPolicyEngine\n         CheckPolicyResponseType oResponse = new CheckPolicyResponseType();\n \n         AdapterPolicyEngineOrchestratorImpl oOrchestratorImpl = new AdapterPolicyEngineOrchestratorImpl();\n-\n-        try {\n+try {\n             oResponse = oOrchestratorImpl.checkPolicy(checkPolicyRequest, assertion);\n         } catch (Exception e) {\n-            String sErrorMessage = \"Error occurred calling AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy.  Error: \"\n-                + e.getMessage();\n-            LOG.error(sErrorMessage, e);\n-            throw new RuntimeException(sErrorMessage, e);\n+            String sErrorMessage = \"Error occurred calling AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy.  Error: \" + e.getMessage();\n+LOG.error(sErrorMessage, e);\n+\n+throw new RuntimeException(sErrorMessage, e);\n         }\n \n         LOG.trace(\"End AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n-        return oResponse;\n+\n+return oResponse;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\nindex dbe958dac0b..28f02919949 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n@@ -38,6 +38,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Les Westberg\n  */\n+\n+\n public class AdapterPolicyEngineOrchProxyJavaImpl implements AdapterPolicyEngineOrchProxy {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AdapterPolicyEngineOrchProxyJavaImpl.class);\n@@ -49,24 +51,22 @@ public class AdapterPolicyEngineOrchProxyJavaImpl implements AdapterPolicyEngine\n      * @param checkPolicyRequest The request to check defined policy\n      * @return The response which contains the access decision\n      */\n+\n+\n     @Override\n     public CheckPolicyResponseType checkPolicy(CheckPolicyRequestType checkPolicyRequest, AssertionType assertion) {\n         LOG.trace(\"Begin AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n         CheckPolicyResponseType oResponse = new CheckPolicyResponseType();\n-\n         AdapterPolicyEngineOrchestratorImpl oOrchestratorImpl = new AdapterPolicyEngineOrchestratorImpl();\n-\n         try {\n             oResponse = oOrchestratorImpl.checkPolicy(checkPolicyRequest, assertion);\n         } catch (Exception e) {\n-            String sErrorMessage = \"Error occurred calling AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy.  Error: \"\n-                + e.getMessage();\n+            String sErrorMessage = \"Error occurred calling AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy.  Error: \" + e.getMessage();\n             LOG.error(sErrorMessage, e);\n             throw new RuntimeException(sErrorMessage, e);\n         }\n-\n         LOG.trace(\"End AdapterPolicyEngineOrchProxyJavaImpl.checkPolicy\");\n         return oResponse;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\nindex dbe958dac0b..d9deadba4d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.policyengine.adapter.orchestrator.proxy;\n-\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.common.nhinccommonadapter.CheckPolicyRequestType;\n import gov.hhs.fha.nhinc.common.nhinccommonadapter.CheckPolicyResponseType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\nindex dbe958dac0b..fa20e0a4704 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1467/AdapterPolicyEngineOrchProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.orchestrator.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}