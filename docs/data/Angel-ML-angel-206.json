{
    "project_name": "Angel-ML-angel",
    "error_id": "206",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/206/LinearRegTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/206/LinearRegTest.java\nindex effe74e3b8a..3f32fb9d72d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/206/LinearRegTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/206/LinearRegTest.java\n@@ -44,7 +44,8 @@ public class LinearRegTest {\n \n   private Configuration conf = new Configuration();\n \n-  @Before public void setConf() throws Exception {\n+  @Before\n+  public void setConf() throws Exception {\n     try {\n       // Feature number of train data\n       int featureNum = 8;\n@@ -188,7 +189,8 @@ public class LinearRegTest {\n     }\n   }\n \n-  @Test public void testLR() throws Exception {\n+  @Test\n+  public void testLR() throws Exception {\n     setConf();\n     trainTest();\n     incTrain();\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/206/LinearRegTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/206/LinearRegTest.java\nindex effe74e3b8a..dfc900155b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/206/LinearRegTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/206/LinearRegTest.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.regression;\n \n import com.tencent.angel.conf.AngelConf;\n@@ -44,7 +43,8 @@ public class LinearRegTest {\n \n   private Configuration conf = new Configuration();\n \n-  @Before public void setConf() throws Exception {\n+  @Before\n+public void setConf() throws Exception {\n     try {\n       // Feature number of train data\n       int featureNum = 8;\n@@ -188,10 +188,11 @@ public class LinearRegTest {\n     }\n   }\n \n-  @Test public void testLR() throws Exception {\n+  @Test\n+public void testLR() throws Exception {\n     setConf();\n     trainTest();\n     incTrain();\n     predictTest();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/206/LinearRegTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/206/LinearRegTest.java\nindex effe74e3b8a..b7fa678ce1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/206/LinearRegTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/206/LinearRegTest.java\n@@ -31,8 +31,8 @@ import org.apache.log4j.PropertyConfigurator;\n import org.junit.Before;\n import org.junit.Test;\n \n-\n public class LinearRegTest {\n+\n   private static final Log LOG = LogFactory.getLog(LinearRegTest.class);\n   private static String LOCAL_FS = FileSystem.DEFAULT_FS;\n   private static String CLASSBASE = \"com.tencent.angel.ml.regression.\";\n@@ -44,7 +44,8 @@ public class LinearRegTest {\n \n   private Configuration conf = new Configuration();\n \n-  @Before public void setConf() throws Exception {\n+  @Before\n+  public void setConf() throws Exception {\n     try {\n       // Feature number of train data\n       int featureNum = 8;\n@@ -124,7 +125,6 @@ public class LinearRegTest {\n       conf.set(AngelConf.ANGEL_LOG_PATH, logPath);\n       // Set actionType train\n       conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_TRAIN());\n-\n       GraphRunner runner = new GraphRunner();\n       runner.train(conf);\n     } catch (Exception e) {\n@@ -133,7 +133,6 @@ public class LinearRegTest {\n     }\n   }\n \n-\n   private void incTrain() {\n     try {\n       String inputPath = \"../../data/abalone/abalone_8d_train.libsvm\";\n@@ -151,8 +150,6 @@ public class LinearRegTest {\n       conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_INC_TRAIN());\n       // Set log path\n       conf.set(AngelConf.ANGEL_LOG_PATH, logPath);\n-\n-\n       GraphRunner runner = new GraphRunner();\n       runner.train(conf);\n     } catch (Exception e) {\n@@ -161,7 +158,6 @@ public class LinearRegTest {\n     }\n   }\n \n-\n   private void predictTest() {\n     try {\n       String inputPath = \"../../data/abalone/abalone_8d_train.libsvm\";\n@@ -174,12 +170,10 @@ public class LinearRegTest {\n       conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/LinearReg\");\n       // Set predict result path\n       conf.set(AngelConf.ANGEL_PREDICT_PATH, predictPath);\n-\n       conf.set(AngelConf.ANGEL_LOG_PATH, logPath);\n       // Set actionType prediction\n       conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_INC_TRAIN());\n       conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n-\n       GraphRunner runner = new GraphRunner();\n       runner.predict(conf);\n     } catch (Exception e) {\n@@ -188,10 +182,12 @@ public class LinearRegTest {\n     }\n   }\n \n-  @Test public void testLR() throws Exception {\n+  @Test\n+  public void testLR() throws Exception {\n     setConf();\n     trainTest();\n     incTrain();\n     predictTest();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}