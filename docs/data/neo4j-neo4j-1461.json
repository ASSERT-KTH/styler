{
    "project_name": "neo4j-neo4j",
    "error_id": "1461",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1461/Suppliers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1461/Suppliers.java\nindex 8f235045aa8..7d39a4b25d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1461/Suppliers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1461/Suppliers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.function;\n \n import java.util.concurrent.TimeUnit;\n@@ -39,10 +40,10 @@ public final class Suppliers\n      * Creates a {@link Supplier} that returns a single object\n      *\n      * @param instance The object to return\n-     * @param <T> The object type\n+     * @param <T>      The object type\n      * @return A {@link Supplier} returning the specified object instance\n      */\n-    public static <T> Supplier<T> singleton( final T instance )\n+    public static <T> Supplier<T> singleton(final T instance)\n     {\n         return () -> instance;\n     }\n@@ -51,10 +52,10 @@ public final class Suppliers\n      * Creates a lazy initialized {@link Supplier} of a single object\n      *\n      * @param supplier A supplier that will provide the object when required\n-     * @param <T> The object type\n+     * @param <T>      The object type\n      * @return A {@link Supplier} returning the specified object instance\n      */\n-    public static <T> Lazy<T> lazySingleton( final Supplier<T> supplier )\n+    public static <T> Lazy<T> lazySingleton(final Supplier<T> supplier)\n     {\n         return new Lazy<>()\n         {\n@@ -63,14 +64,14 @@ public final class Suppliers\n             @Override\n             public T get()\n             {\n-                if ( isInitialised() )\n+                if (isInitialised())\n                 {\n                     return instance;\n                 }\n \n-                synchronized ( this )\n+                synchronized (this)\n                 {\n-                    if ( instance == null )\n+                    if (instance == null)\n                     {\n                         instance = supplier.get();\n                     }\n@@ -104,12 +105,12 @@ public final class Suppliers\n      * is cached and returned again if the source object hasn't changed).\n      *\n      * @param supplier A supplier of source objects\n-     * @param adaptor A function mapping source objects to result objects\n-     * @param <V> The source object type\n-     * @param <T> The result object type\n+     * @param adaptor  A function mapping source objects to result objects\n+     * @param <V>      The source object type\n+     * @param <T>      The result object type\n      * @return A {@link Supplier} of objects\n      */\n-    public static <T, V> Supplier<T> adapted( final Supplier<V> supplier, final Function<V,T> adaptor )\n+    public static <T, V> Supplier<T> adapted(final Supplier<V> supplier, final Function<V, T> adaptor)\n     {\n         return new Supplier<>()\n         {\n@@ -120,15 +121,15 @@ public final class Suppliers\n             public T get()\n             {\n                 V value = supplier.get();\n-                if ( value == lastValue )\n+                if (value == lastValue)\n                 {\n                     return instance;\n                 }\n \n-                T adaptedValue = adaptor.apply( value );\n-                synchronized ( this )\n+                T adaptedValue = adaptor.apply(value);\n+                synchronized (this)\n                 {\n-                    if ( value != lastValue )\n+                    if (value != lastValue)\n                     {\n                         instance = adaptedValue;\n                         lastValue = value;\n@@ -139,27 +140,27 @@ public final class Suppliers\n         };\n     }\n \n-    public static <T, E extends Exception> ThrowingCapturingSupplier<T,E> compose(\n-            final ThrowingSupplier<T,? extends E> input,\n-            final ThrowingPredicate<T,? extends E> predicate )\n+    public static <T, E extends Exception> ThrowingCapturingSupplier<T, E> compose(\n+      final ThrowingSupplier<T, ? extends E> input,\n+      final ThrowingPredicate<T, ? extends E> predicate)\n     {\n-        return new ThrowingCapturingSupplier<>( input, predicate );\n+        return new ThrowingCapturingSupplier<>(input, predicate);\n     }\n \n-    public static BooleanSupplier untilTimeExpired( long duration, TimeUnit unit )\n+    public static BooleanSupplier untilTimeExpired(long duration, TimeUnit unit)\n     {\n-        final long endTimeInNanos = nanoTime() + unit.toNanos( duration );\n+        final long endTimeInNanos = nanoTime() + unit.toNanos(duration);\n         return () -> nanoTime() <= endTimeInNanos;\n     }\n \n-    static class ThrowingCapturingSupplier<T, E extends Exception> implements ThrowingSupplier<Boolean,E>\n+    static class ThrowingCapturingSupplier<T, E extends Exception> implements ThrowingSupplier<Boolean, E>\n     {\n-        private final ThrowingSupplier<T,? extends E> input;\n-        private final ThrowingPredicate<T,? extends E> predicate;\n+        private final ThrowingSupplier<T, ? extends E> input;\n+        private final ThrowingPredicate<T, ? extends E> predicate;\n \n         private T current;\n \n-        ThrowingCapturingSupplier( ThrowingSupplier<T,? extends E> input, ThrowingPredicate<T,? extends E> predicate )\n+        ThrowingCapturingSupplier(ThrowingSupplier<T, ? extends E> input, ThrowingPredicate<T, ? extends E> predicate)\n         {\n             this.input = input;\n             this.predicate = predicate;\n@@ -174,19 +175,20 @@ public final class Suppliers\n         public Boolean get() throws E\n         {\n             current = input.get();\n-            return predicate.test( current );\n+            return predicate.test(current);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return String.format( \"%s on %s\", predicate, input );\n+            return String.format(\"%s on %s\", predicate, input);\n         }\n     }\n \n     public interface Lazy<T> extends Supplier<T>\n     {\n         T getIfPresent();\n+\n         boolean isInitialised();\n     }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}