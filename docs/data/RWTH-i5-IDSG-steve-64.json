{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "113",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n        if (externalFileName == null) {\n            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n                    \"which will be prioritized over the bundled one\", name);\n            loadFromClasspath(name);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "33",
                    "column": "13",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/64/PropertiesFileLoader.java\nindex f327a545b1c..3bcafa567cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/64/PropertiesFileLoader.java\n@@ -29,8 +29,8 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \"\n+            +\"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n         } else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "32",
                    "column": "107",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/64/PropertiesFileLoader.java\nindex f327a545b1c..74d3da4522f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/64/PropertiesFileLoader.java\n@@ -18,115 +18,115 @@ import java.util.Properties;\n @Slf4j\n public class PropertiesFileLoader {\n \n-    private Properties prop;\n-\n-    /**\n-     * The name parameter acts as\n-     * 1) the file name to load from classpath, and\n-     * 2) the system property which can be set to load from file system.\n-     */\n-    public PropertiesFileLoader(String name) {\n-        String externalFileName = System.getProperty(name);\n-\n-        if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n-            loadFromClasspath(name);\n-\n-        } else {\n-            loadFromSystem(externalFileName);\n-        }\n+  private Properties prop;\n+\n+  /**\n+   * The name parameter acts as\n+   * 1) the file name to load from classpath, and\n+   * 2) the system property which can be set to load from file system.\n+   */\n+  public PropertiesFileLoader(String name) {\n+    String externalFileName = System.getProperty(name);\n+\n+    if (externalFileName == null) {\n+      log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n+        \"which will be prioritized over the bundled one\", name);\n+      loadFromClasspath(name);\n+\n+    } else {\n+      loadFromSystem(externalFileName);\n     }\n+  }\n \n-    // -------------------------------------------------------------------------\n-    // Strict\n-    // -------------------------------------------------------------------------\n+  // -------------------------------------------------------------------------\n+  // Strict\n+  // -------------------------------------------------------------------------\n \n-    public String getString(String key) {\n-        String s = prop.getProperty(key);\n+  public String getString(String key) {\n+    String s = prop.getProperty(key);\n \n-        if (s == null) {\n-            throw new IllegalArgumentException(\"The property '\" + key + \"' is not found\");\n-        }\n-\n-        if (s.isEmpty()) {\n-            throw new IllegalArgumentException(\"The property '\" + key + \"' has no value set\");\n-        }\n-\n-        return trim(key, s);\n+    if (s == null) {\n+      throw new IllegalArgumentException(\"The property '\" + key + \"' is not found\");\n     }\n \n-    public boolean getBoolean(String key) {\n-        return Boolean.parseBoolean(getString(key));\n+    if (s.isEmpty()) {\n+      throw new IllegalArgumentException(\"The property '\" + key + \"' has no value set\");\n     }\n \n-    public int getInt(String key) {\n-        return Integer.parseInt(getString(key));\n-    }\n+    return trim(key, s);\n+  }\n \n-    // -------------------------------------------------------------------------\n-    // Return null if not set\n-    // -------------------------------------------------------------------------\n+  public boolean getBoolean(String key) {\n+    return Boolean.parseBoolean(getString(key));\n+  }\n \n-    public String getOptionalString(String key) {\n-        String s = prop.getProperty(key);\n-        if (Strings.isNullOrEmpty(s)) {\n-            return null;\n-        }\n-        return trim(key, s);\n-    }\n+  public int getInt(String key) {\n+    return Integer.parseInt(getString(key));\n+  }\n \n-    public Boolean getOptionalBoolean(String key) {\n-        String s = getOptionalString(key);\n-        if (s == null) {\n-            // In this special case, to make findbugs happy, we don't return null.\n-            // Reason: http://findbugs.sourceforge.net/bugDescriptions.html#NP_BOOLEAN_RETURN_NULL\n-            return false;\n-        } else {\n-            return Boolean.parseBoolean(s);\n-        }\n-    }\n+  // -------------------------------------------------------------------------\n+  // Return null if not set\n+  // -------------------------------------------------------------------------\n \n-    public Integer getOptionalInt(String key) {\n-        String s = getOptionalString(key);\n-        if (s == null) {\n-            return null;\n-        } else {\n-            return Integer.parseInt(s);\n-        }\n+  public String getOptionalString(String key) {\n+    String s = prop.getProperty(key);\n+    if (Strings.isNullOrEmpty(s)) {\n+      return null;\n     }\n-\n-    // -------------------------------------------------------------------------\n-    // Private helpers\n-    // -------------------------------------------------------------------------\n-\n-    private void loadFromSystem(String fileName) {\n-        try (FileInputStream inputStream = new FileInputStream(fileName)) {\n-            prop = new Properties();\n-            prop.load(inputStream);\n-            log.info(\"Loaded properties from {}\", fileName);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n+    return trim(key, s);\n+  }\n+\n+  public Boolean getOptionalBoolean(String key) {\n+    String s = getOptionalString(key);\n+    if (s == null) {\n+      // In this special case, to make findbugs happy, we don't return null.\n+      // Reason: http://findbugs.sourceforge.net/bugDescriptions.html#NP_BOOLEAN_RETURN_NULL\n+      return false;\n+    } else {\n+      return Boolean.parseBoolean(s);\n     }\n-\n-    private void loadFromClasspath(String fileName) {\n-        try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName)) {\n-            if (is == null) {\n-                throw new FileNotFoundException(\"Property file '\" + fileName + \"' is not found in classpath\");\n-            }\n-            prop = new Properties();\n-            prop.load(is);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+  }\n+\n+  public Integer getOptionalInt(String key) {\n+    String s = getOptionalString(key);\n+    if (s == null) {\n+      return null;\n+    } else {\n+      return Integer.parseInt(s);\n+    }\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Private helpers\n+  // -------------------------------------------------------------------------\n+\n+  private void loadFromSystem(String fileName) {\n+    try (FileInputStream inputStream = new FileInputStream(fileName)) {\n+      prop = new Properties();\n+      prop.load(inputStream);\n+      log.info(\"Loaded properties from {}\", fileName);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private void loadFromClasspath(String fileName) {\n+    try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName)) {\n+      if (is == null) {\n+        throw new FileNotFoundException(\"Property file '\" + fileName + \"' is not found in classpath\");\n+      }\n+      prop = new Properties();\n+      prop.load(is);\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    private static String trim(String key, String value) {\n-        String trimmed = value.trim();\n-        if (!trimmed.equals(value)) {\n-            log.warn(\"The property '{}' has leading or trailing spaces which were removed!\", key);\n-        }\n-        return trimmed;\n+  private static String trim(String key, String value) {\n+    String trimmed = value.trim();\n+    if (!trimmed.equals(value)) {\n+      log.warn(\"The property '{}' has leading or trailing spaces which were removed!\", key);\n     }\n+    return trimmed;\n+  }\n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/64/PropertiesFileLoader.java\nindex f327a545b1c..e18205cea7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/64/PropertiesFileLoader.java\n@@ -29,8 +29,7 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" + \"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n         } else {\n@@ -129,4 +128,4 @@ public class PropertiesFileLoader {\n         }\n         return trimmed;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/64/PropertiesFileLoader.java\nindex f327a545b1c..608d0c001cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/64/PropertiesFileLoader.java\n@@ -2,7 +2,6 @@ package de.rwth.idsg.steve.utils;\n \n import com.google.common.base.Strings;\n import lombok.extern.slf4j.Slf4j;\n-\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n@@ -15,9 +14,10 @@ import java.util.Properties;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 01.10.2015\n  */\n+\n+\n @Slf4j\n public class PropertiesFileLoader {\n-\n     private Properties prop;\n \n     /**\n@@ -25,14 +25,12 @@ public class PropertiesFileLoader {\n      * 1) the file name to load from classpath, and\n      * 2) the system property which can be set to load from file system.\n      */\n+\n     public PropertiesFileLoader(String name) {\n         String externalFileName = System.getProperty(name);\n-\n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" + \"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n-\n         } else {\n             loadFromSystem(externalFileName);\n         }\n@@ -44,7 +42,6 @@ public class PropertiesFileLoader {\n \n     public String getString(String key) {\n         String s = prop.getProperty(key);\n-\n         if (s == null) {\n             throw new IllegalArgumentException(\"The property '\" + key + \"' is not found\");\n         }\n@@ -52,7 +49,6 @@ public class PropertiesFileLoader {\n         if (s.isEmpty()) {\n             throw new IllegalArgumentException(\"The property '\" + key + \"' has no value set\");\n         }\n-\n         return trim(key, s);\n     }\n \n@@ -111,10 +107,13 @@ public class PropertiesFileLoader {\n     }\n \n     private void loadFromClasspath(String fileName) {\n-        try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName)) {\n+        try (InputStream is = this.getClass()\n+                                  .getClassLoader()\n+                                  .getResourceAsStream(fileName)) {\n             if (is == null) {\n                 throw new FileNotFoundException(\"Property file '\" + fileName + \"' is not found in classpath\");\n             }\n+\n             prop = new Properties();\n             prop.load(is);\n         } catch (Exception e) {\n@@ -129,4 +128,4 @@ public class PropertiesFileLoader {\n         }\n         return trimmed;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "column": "112",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "112",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/64/PropertiesFileLoader.java\nindex f327a545b1c..1e98b9e97b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/64/PropertiesFileLoader.java\n@@ -29,7 +29,7 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \"+\n                     \"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "column": "13",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/64/PropertiesFileLoader.java\nindex f327a545b1c..3bcafa567cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/64/PropertiesFileLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/64/PropertiesFileLoader.java\n@@ -29,8 +29,8 @@ public class PropertiesFileLoader {\n         String externalFileName = System.getProperty(name);\n \n         if (externalFileName == null) {\n-            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \" +\n-                    \"which will be prioritized over the bundled one\", name);\n+            log.info(\"Hint: The Java system property '{}' can be set to point to an external properties file, \"\n+            +\"which will be prioritized over the bundled one\", name);\n             loadFromClasspath(name);\n \n         } else {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}