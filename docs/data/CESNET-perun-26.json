{
    "project_name": "CESNET-perun",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "606",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t */\n\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n        \n\t/**\n\t * Returns list of users who exactly matches the searchString\n\t *",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/26/UsersManagerBl.java\nindex c25b08a6223..63cca36c41f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/26/UsersManagerBl.java\n@@ -603,7 +603,7 @@ public interface UsersManagerBl {\n \t * @throws InternalErrorException\n \t */\n \tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n+\n \t/**\n \t * Returns list of users who exactly matches the searchString\n \t *\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/26/UsersManagerBl.java\nindex c25b08a6223..0f200a09a6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/26/UsersManagerBl.java\n@@ -16,1106 +16,1102 @@ import cz.metacentrum.perun.core.api.exceptions.*;\n  */\n public interface UsersManagerBl {\n \n-\t/**\n-\t * Returns user by his login in external source and external source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return selected user or throws  in case the user doesn't exists\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get the user based on one of the userExtSource.\n-\t *\n-\t * @param sess\n-\t * @param userExtSources\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tUser getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all the users who have given type of the ExtSource and login.\n-\t *\n-\t * @param perunSession  perun session\n-\t * @param extSourceType type of the user extSource\n-\t * @param login         login of the user\n-\t * @return all users with given parameters\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns user by his/her id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns user by VO member.\n-\t *\n-\t * @param perunSession\n-\t * @param member\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @return list of specific users who are owned by the user\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all users who owns the specificUser and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param specificUser the specific User\n-\t * @return list of user who owns the specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove specificUser owner (the user)\n-\t * Only disable ownership of user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user        the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t * @throws RelationNotExistsException if there is no such user (the user) to remove\n-\t * @throws SpecificUserMustHaveOwnerException if there is the last user to remove\n-\t * @throws SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException;\n-\n-\t/**\n-\t * Add specificUser owner (the user)\n-\t * If not exists, create new ownership.\n-\t * If exists, only enable ownership for user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException If there is such user (the user) who try to add\n-\t */\n-\tvoid addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException;\n-\n-\t/**\n-\t * Return true if ownership of user and specificUser already exists.\n-\t * Return false if not.\n-\t * <p/>\n-\t * Looking for enabled and also for disabled ownership.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all specific Users (only specific users)\n-\t *\n-\t * @param sess\n-\t * @return list of all specific users in perun\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user by extSourceName and extSourceLogin\n-\t *\n-\t * @param sess\n-\t * @param extSourceName\n-\t * @param extLogin\n-\t * @return user\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException;\n-\n-\t/**\n-\t * Returns all users (included specific users)\n-\t *\n-\t * @param sess\n-\t * @return list of all users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Get User to RichUser without attributes.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tRichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get User to RichUser with attributes.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tRichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get All richUsers with or without specificUsers.\n-\t * If includedSpecificUsers is true, you got all Users included specificUsers\n-\t * If includedSpecificUsers is false, you get all Users without specificUsers\n-\t *\n-\t * @param sess\n-\t * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get All richUsers with or without specificUsers.\n-\t * If includedSpecificUsers is true, you got all Users included specificUsers\n-\t * If includedSpecificUsers is false, you get all Users without specificUsers\n-\t * <p/>\n-\t * This method get all RichUsers included Attributes.\n-\t *\n-\t * @param sess\n-\t * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * From Users makes RichUsers without attributes.\n-\t *\n-\t * @param sess\n-\t * @param users users to convert\n-\t * @return list of richUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * From Users makes RichUsers with attributes.\n-\t *\n-\t * @param sess\n-\t * @param users users to convert\n-\t * @return list of richUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Convert RichUsers without attribute to RichUsers with specific attributes.\n-\t * Specific by list of Attributes.\n-\t * If in list of Attributes is some notUser attribute, it is skipped.\n-\t *\n-\t * @param sess\n-\t * @param richUsers\n-\t * @param attrsDef\n-\t * @return list of RichUsers with specific attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef) throws InternalErrorException;\n-\n-\t/**\n-\t * Inserts user into DB.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser createUser(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Deletes user.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException             if user has some members assigned\n-\t * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n-\t * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n-\t * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DB\n-\t * @throws GroupOperationsException\t           if something went wrong while processing relations\n-\t */\n-\tvoid deleteUser(PerunSession perunSession, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t * Deletes user. If forceDelete is true, then removes also associated members.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param forceDelete  if true, deletes also all members if they are assigned to the user\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException             if forceDelete is false and the user has some members assigned\n-\t * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n-\t * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n-\t * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DBn\n-\t * @throws GroupOperationsException\t           if something went wrong while processing relations\n-\t */\n-\tvoid deleteUser(PerunSession perunSession, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t * Updates users data in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException if user not exists when method trying to update him\n-\t */\n-\tUser updateUser(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Updates titles before/after users name.\n-\t * <p/>\n-\t * New titles must be set inside User object.\n-\t * Setting any title to null will remove title from name.\n-\t * Other user's properties are ignored.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user with new titles before/after name\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException if user not exists when method trying to update him\n-\t */\n-\tUser updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Updates user's userExtSource in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated userExtSource\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated userExtSource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all users external sources by specific type and extLogin.\n-\t *\n-\t * @param sess\n-\t * @param extType - type of extSource (ex. 'IDP')\n-\t * @param extLogin - extLogin of userExtSource\n-\t *\n-\t * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all user's external sources of the user.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of user's external sources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get the user ext source by its id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return user external source for the id\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tUserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Get all users userExtSources with last_access not older than (now - m),\n-\t * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n-\t *\n-\t * @param sess\n-\t * @param user user to get extSources for\n-\t *\n-\t * @return list of active user extSources (not older than now - m)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get list of user ext sources be their ids.\n-\t *\n-\t * @param sess\n-\t * @param ids\n-\t * @return list of user external sources for ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n-\n-\t/**\n-\t * Adds user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @return user external auth object with newly generated ID\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceExistsException\n-\t */\n-\tUserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException;\n-\n-\t/**\n-\t * Removes user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n-\n-\t/**\n-\t * Gets user's external source by the user's external login and external source.\n-\t *\n-\t * @param perunSession\n-\t * @param source\n-\t * @param extLogin\n-\t * @return user external source object\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Returns list of VOs, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of VOs, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of Groups, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of Groups, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of VOs, where the user is a member.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of VOs, where the user is a member.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsMember(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources from the facility which have the user access on.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources from the facility where the user is assigned.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources which have the user access on.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources where the user is assigned.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all rich resources where the user is assigned.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of rich resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have set the attribute with the value. Searching by attributeName. Searching only def and opt attributes.\n-\t * Can find only attributes with String Value by this way! (not Integer, Map or List)\n-\t *\n-\t * @param sess\n-\t * @param attributeName\n-\t * @param attributeValue\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n-\t *\n-\t * @param sess\n-\t * @param attributeName\n-\t * @param attributeValue\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users' who matches the searchString, searching name, email and logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of richusers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n-\t * Name part is searched for exact match.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of richusers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Return list of users who matches the searchString, searching name, email and logins\n-\t * and are not member in specific VO.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the fields.\n-\t *\n-\t * @param sess\n-\t * @param titleBefore\n-\t * @param firstName\n-\t * @param middleName\n-\t * @param lastName\n-\t * @param titleAfter\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n-\t/**\n-\t * Returns list of users who exactly matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Checks if the login is available in the namespace.\n-\t *\n-\t * @param sess\n-\t * @param loginNamespace in which the login will be checked (provide only the name of the namespace, not the whole attribute name)\n-\t * @param login          to be checked\n-\t * @return true if login available, false otherwise\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Batch method which returns users by theirs ids.\n-\t *\n-\t * @param sess\n-\t * @param usersIds\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who are not member of any VO.\n-\t *\n-\t * @param sess\n-\t * @return list of users who are not member of any VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all RichUsers with attributes who are not member of any VO.\n-\t *\n-\t * @param sess\n-\t * @return list of richUsers who are not member of any VO\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException;\n-\n-\n-\t/**\n-\t * Adds PERUNADMIN role to the user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is PERUNADMIN.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return true if the user is PERUNADMIN, false otherwise.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * !!! Not Complete yet, need to implement all perunBeans !!!\n-\t * <p/>\n-\t * Get perunBean and try to find all connected Users\n-\t *\n-\t * @param sess\n-\t * @param perunBean\n-\t * @return list of users connected with perunBeans\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException;\n-\n-\t/**\n-\t * Changes user password in defined login-namespace. If checkOldPassword is true, then ask authentication system if old password is correct. user must exists.\n-\t *\n-\t * @param sess\n-\t * @param user             user object which is used to get userLogin from the loginNamespace\n-\t * @param oldPassword\n-\t * @param newPassword\n-\t * @param checkOldPassword\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordDoesntMatchException\n-\t * @throws PasswordChangeFailedException\n-\t */\n-\tvoid changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword)\n-\t\t\tthrows InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Creates the password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin      string representation of the userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t */\n-\t@Deprecated\n-\tvoid createPassword(PerunSession sess, String userLogin, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException;\n-\n-\t/**\n-\t * Creates the password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\t@Deprecated\n-\tvoid createPassword(PerunSession sess, User user, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n-\n-\t/**\n-\t * Reserves random password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Reserves the password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin      string representation of the userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t */\n-\tvoid reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Reserves the password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid reservePassword(PerunSession sess, User user, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Validates the password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin      string representation of the userLogin\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t */\n-\tvoid validatePassword(PerunSession sess, String userLogin, String loginNamespace)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException;\n-\n-\t/**\n-\t * Validates the password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid validatePassword(PerunSession sess, User user, String loginNamespace)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n-\n-\t/**\n-\t * Validates the password in external system and set user extSources and extSource related attributes. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Deletes password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordDeletionFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid deletePassword(PerunSession sess, String userLogin, String loginNamespace)\n-\t\t\tthrows InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException, PasswordOperationTimeoutException;\n-\n-\t/**\n-\t * Creates alternative password in external system.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param description - description of a password (e.g. 'mobile phone', 'tablet', ...)\n-\t * @param loginNamespace\n-\t * @param password string representation of password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid createAlternativePassword(PerunSession sess, User user, String description, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n-\n-\t/**\n-\t * Deletes alternative password in external system.\n-\t *\n-\t * @param sess\n-\t * @param loginNamespace\n-\t * @param passwordId passwords ID\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PasswordDeletionFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException;\n-\n-\n-\t/**\n-\t * Check if login in specified namespace exists.\n-\t *\n-\t * @param sess\n-\t * @param namespace namespace for login\n-\t * @param login     login to check\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n-\t */\n-\tvoid checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n-\n-\tvoid checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\tvoid checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\tboolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * From List of Users make list of RichUsers (without attributes)\n-\t *\n-\t * @param sess\n-\t * @param users\n-\t * @return list of RIch Users without attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException;\n-\n-\t/**\n-\t * From List of Rich Users without attribute make list of Rich Users with attributes\n-\t *\n-\t * @param sess\n-\t * @param richUsers\n-\t * @return list of Rich Users with attributes\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * From List of Users make list of RichUsers (with attributes by names)\n-\t *\n-\t * @param sess\n-\t * @param users\n-\t * @return list of RIch Users without attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * For richUser filter all his user attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richUser\n-\t * @return richUser with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tRichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException;\n-\n-\t/**\n-\t * For list of richUser filter all their user attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richUsers\n-\t * @return list of RichUsers with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException;\n-\n-\t/**\n-\t * Return list of RichUsers who matches the searchString, searching name, email and logins\n-\t * and are not member in specific VO and contain selected attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param searchString\n-\t * @param attrsName\n-\t * @return list of RichUser\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of RichUsers which are not members of any VO and contain selected attributes.\n-\t *\n-\t * @param sess\n-\t * @param attrsName\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param attrNames\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n-\t * Name part is searched for exact match.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param attrNames\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get User to RichUser with attributes.\n-\t *\n-\t * @param sess\n-\t * @param includedSpecificUsers\n-\t * @param attrsNames\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsNames) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get All RichUsers without UserExtSources and without virtual attributes.\n-\t *\n-\t * @param sess\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Allow users to manually add login in supported namespace if same login is not reserved\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param login\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Request change of user's preferred email address.\n-\t * Change in attribute value is not done, until email\n-\t * address is verified by link in email notice.\n-\t * (urn:perun:user:attribute-def:def:preferredEmail)\n-\t *\n-\t * @param sess  PerunSession\n-\t * @param url   base URL of running perun instance passed from RPC.\n-\t * @param user  User to request preferred email change for\n-\t * @param email new email address\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tvoid requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * * Validate change of user's preferred email address.\n-\t * New email address is set as value of\n-\t * urn:perun:user:attribute-def:def:preferredEmail attribute.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to validate email address for\n-\t * @param i    decrypted parameter\n-\t * @param m    encrypted parameter\n-\t * @return String return new preferred email\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException                When user from session is null\n-\t * @throws WrongAttributeValueException          If new email address is in wrong format\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws AttributeNotExistsException           If user:preferredEmail attribute doesn't exists.\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tString validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, UserNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Return list of email addresses of user, which are\n-\t * awaiting validation and are inside time window\n-\t * for validation.\n-\t * <p/>\n-\t * If there is no preferred email change request pending\n-\t * or requests are outside time window for validation,\n-\t * returns empty list.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to check pending request for\n-\t * @return List<String> user's email addresses pending validation\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get user and convert values of his object attributes:\n-\t * - firstName\n-\t * - lastName\n-\t * - middleName\n-\t * - titleBefore\n-\t * - titleAfter\n-\t * from emptyString (like \"\") to null.\n-\t * <p/>\n-\t * If these values are not empty strings, do not change them.\n-\t * If user is null, return null.\n-\t *\n-\t * @param user user to converting\n-\t * @return converted user\n-\t */\n-\tUser convertUserEmptyStringsInObjectAttributesIntoNull(User user);\n-\n-\t/**\n-\t * Changes user password in defined login-namespace using encrypted parameters.\n-\t *\n-\t * @param sess     PerunSession\n-\t * @param user     user to change password for\n-\t * @param m        encrypted parameter\n-\t * @param password password to set\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordChangeFailedException\n-\t */\n-\tvoid changeNonAuthzPassword(PerunSession sess, User user, String m, String password)\n-\t\t\tthrows InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Get count of all users.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all users\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getUsersCount(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Generate user account in a backend system associated with login-namespace in Perun.\n-\t *\n-\t * This method consumes optional parameters map. Requirements are implementation-dependant\n-\t * for each login-namespace.\n-\t *\n-\t * Returns map with\n-\t * 1: key=login-namespace attribute urn, value=generated login\n-\t * 2: rest of opt response attributes...\n-\t *\n-\t * @param session\n-\t * @param namespace Namespace to generate account in\n-\t * @param parameters Optional parameters\n-\t * @return Map of data from backed response\n-\t * @throws InternalErrorException\n-\t */\n-\tMap<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n+    /**\n+     * Returns user by his login in external source and external source.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @return selected user or throws  in case the user doesn't exists\n+     * @throws InternalErrorException\n+     */\n+    User getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get the user based on one of the userExtSource.\n+     *\n+     * @param sess\n+     * @param userExtSources\n+     * @return user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    User getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get all the users who have given type of the ExtSource and login.\n+     *\n+     * @param perunSession  perun session\n+     * @param extSourceType type of the user extSource\n+     * @param login         login of the user\n+     * @return all users with given parameters\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n+\n+    /**\n+     * Returns user by his/her id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return user\n+     * @throws InternalErrorException\n+     */\n+    User getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Returns user by VO member.\n+     *\n+     * @param perunSession\n+     * @param member\n+     * @return user\n+     * @throws InternalErrorException\n+     */\n+    User getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n+     *\n+     * @param sess\n+     * @param user the user\n+     * @return list of specific users who are owned by the user\n+     * @throws InternalErrorException\n+     */\n+    List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Return all users who owns the specificUser and their ownership is not in status disabled\n+     *\n+     * @param sess\n+     * @param specificUser the specific User\n+     * @return list of user who owns the specificUser\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Remove specificUser owner (the user)\n+     * Only disable ownership of user and specificUser\n+     *\n+     * @param sess\n+     * @param user         the user\n+     * @param specificUser the specificUser\n+     * @throws InternalErrorException\n+     * @throws RelationNotExistsException               if there is no such user (the user) to remove\n+     * @throws SpecificUserMustHaveOwnerException       if there is the last user to remove\n+     * @throws SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     */\n+    void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException;\n+\n+    /**\n+     * Add specificUser owner (the user)\n+     * If not exists, create new ownership.\n+     * If exists, only enable ownership for user and specificUser\n+     *\n+     * @param sess\n+     * @param user         the user\n+     * @param specificUser the specificUser\n+     * @throws InternalErrorException\n+     * @throws RelationExistsException If there is such user (the user) who try to add\n+     */\n+    void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException;\n+\n+    /**\n+     * Return true if ownership of user and specificUser already exists.\n+     * Return false if not.\n+     * <p/>\n+     * Looking for enabled and also for disabled ownership.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param specificUser\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Return all specific Users (only specific users)\n+     *\n+     * @param sess\n+     * @return list of all specific users in perun\n+     * @throws InternalErrorException\n+     */\n+    List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Get user by extSourceName and extSourceLogin\n+     *\n+     * @param sess\n+     * @param extSourceName\n+     * @param extLogin\n+     * @return user\n+     * @throws ExtSourceNotExistsException\n+     * @throws UserExtSourceNotExistsException\n+     * @throws UserNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    User getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException;\n+\n+    /**\n+     * Returns all users (included specific users)\n+     *\n+     * @param sess\n+     * @return list of all users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsers(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Get User to RichUser without attributes.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    RichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get User to RichUser with attributes.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    RichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get All richUsers with or without specificUsers.\n+     * If includedSpecificUsers is true, you got all Users included specificUsers\n+     * If includedSpecificUsers is false, you get all Users without specificUsers\n+     *\n+     * @param sess\n+     * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n+     * @return list of RichUsers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get All richUsers with or without specificUsers.\n+     * If includedSpecificUsers is true, you got all Users included specificUsers\n+     * If includedSpecificUsers is false, you get all Users without specificUsers\n+     * <p/>\n+     * This method get all RichUsers included Attributes.\n+     *\n+     * @param sess\n+     * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n+     * @return list of RichUsers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * From Users makes RichUsers without attributes.\n+     *\n+     * @param sess\n+     * @param users users to convert\n+     * @return list of richUsers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * From Users makes RichUsers with attributes.\n+     *\n+     * @param sess\n+     * @param users users to convert\n+     * @return list of richUsers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Convert RichUsers without attribute to RichUsers with specific attributes.\n+     * Specific by list of Attributes.\n+     * If in list of Attributes is some notUser attribute, it is skipped.\n+     *\n+     * @param sess\n+     * @param richUsers\n+     * @param attrsDef\n+     * @return list of RichUsers with specific attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef) throws InternalErrorException;\n+\n+    /**\n+     * Inserts user into DB.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @throws InternalErrorException\n+     */\n+    User createUser(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Deletes user.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws RelationExistsException             if user has some members assigned\n+     * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n+     * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n+     * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DB\n+     * @throws GroupOperationsException            if something went wrong while processing relations\n+     */\n+    void deleteUser(PerunSession perunSession, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n+\n+    /**\n+     * Deletes user. If forceDelete is true, then removes also associated members.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @param forceDelete  if true, deletes also all members if they are assigned to the user\n+     * @throws InternalErrorException\n+     * @throws RelationExistsException             if forceDelete is false and the user has some members assigned\n+     * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n+     * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n+     * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DBn\n+     * @throws GroupOperationsException            if something went wrong while processing relations\n+     */\n+    void deleteUser(PerunSession perunSession, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n+\n+    /**\n+     * Updates users data in DB.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return updated user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException if user not exists when method trying to update him\n+     */\n+    User updateUser(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Updates titles before/after users name.\n+     * <p/>\n+     * New titles must be set inside User object.\n+     * Setting any title to null will remove title from name.\n+     * Other user's properties are ignored.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return updated user with new titles before/after name\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException if user not exists when method trying to update him\n+     */\n+    User updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Updates user's userExtSource in DB.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @return updated userExtSource\n+     * @throws InternalErrorException\n+     */\n+    UserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @return updated userExtSource\n+     * @throws InternalErrorException\n+     */\n+    void updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * Gets list of all users external sources by specific type and extLogin.\n+     *\n+     * @param sess\n+     * @param extType  - type of extSource (ex. 'IDP')\n+     * @param extLogin - extLogin of userExtSource\n+     * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n+\n+    /**\n+     * Gets list of all user's external sources of the user.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of user's external sources\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get the user ext source by its id.\n+     *\n+     * @param sess\n+     * @param id\n+     * @return user external source for the id\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceNotExistsException\n+     */\n+    UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+    /**\n+     * Get all users userExtSources with last_access not older than (now - m),\n+     * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n+     *\n+     * @param sess\n+     * @param user user to get extSources for\n+     * @return list of active user extSources (not older than now - m)\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get list of user ext sources be their ids.\n+     *\n+     * @param sess\n+     * @param ids\n+     * @return list of user external sources for ids\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n+\n+    /**\n+     * Adds user's external sources.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @param userExtSource\n+     * @return user external auth object with newly generated ID\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceExistsException\n+     */\n+    UserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException;\n+\n+    /**\n+     * Removes user's external sources.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @param userExtSource\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     */\n+    void removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n+\n+    /**\n+     * Gets user's external source by the user's external login and external source.\n+     *\n+     * @param perunSession\n+     * @param source\n+     * @param extLogin\n+     * @return user external source object\n+     * @throws InternalErrorException\n+     */\n+    UserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+    /**\n+     * Returns list of VOs, where the user is an Administrator.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of VOs, where the user is an Administrator.\n+     * @throws InternalErrorException\n+     */\n+    List<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of Groups, where the user is an Administrator.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of Groups, where the user is an Administrator.\n+     * @throws InternalErrorException\n+     */\n+    List<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of VOs, where the user is a member.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of VOs, where the user is a member.\n+     * @throws InternalErrorException\n+     */\n+    List<Vo> getVosWhereUserIsMember(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources from the facility which have the user access on.\n+     *\n+     * @param sess\n+     * @param facility\n+     * @param user\n+     * @return list of resources which have the user access on\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources from the facility where the user is assigned.\n+     *\n+     * @param sess\n+     * @param facility\n+     * @param user\n+     * @return list of resources which have the user access on\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources which have the user access on.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return list of resources which have the user access on\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources where the user is assigned.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return list of resources which have the user access on\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all rich resources where the user is assigned.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return list of rich resources which have the user access on\n+     * @throws InternalErrorException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who have set the attribute with the value. Searching by attributeName. Searching only def and opt attributes.\n+     * Can find only attributes with String Value by this way! (not Integer, Map or List)\n+     *\n+     * @param sess\n+     * @param attributeName\n+     * @param attributeValue\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n+     *\n+     * @param sess\n+     * @param attributeName\n+     * @param attributeValue\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users' who matches the searchString, searching name, email and logins.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of richusers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n+     * Name part is searched for exact match.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of richusers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Return list of users who matches the searchString, searching name, email and logins\n+     * and are not member in specific VO.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who matches the searchString\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who matches the fields.\n+     *\n+     * @param sess\n+     * @param titleBefore\n+     * @param firstName\n+     * @param middleName\n+     * @param lastName\n+     * @param titleAfter\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who exactly matches the searchString\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Checks if the login is available in the namespace.\n+     *\n+     * @param sess\n+     * @param loginNamespace in which the login will be checked (provide only the name of the namespace, not the whole attribute name)\n+     * @param login          to be checked\n+     * @return true if login available, false otherwise\n+     * @throws InternalErrorException\n+     */\n+    boolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException;\n+\n+    /**\n+     * Batch method which returns users by theirs ids.\n+     *\n+     * @param sess\n+     * @param usersIds\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who are not member of any VO.\n+     *\n+     * @param sess\n+     * @return list of users who are not member of any VO\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Returns all RichUsers with attributes who are not member of any VO.\n+     *\n+     * @param sess\n+     * @return list of richUsers who are not member of any VO\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException;\n+\n+\n+    /**\n+     * Adds PERUNADMIN role to the user.\n+     *\n+     * @param sess\n+     * @param user\n+     * @throws InternalErrorException\n+     */\n+    void makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns true if the user is PERUNADMIN.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return true if the user is PERUNADMIN, false otherwise.\n+     * @throws InternalErrorException\n+     */\n+    boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * !!! Not Complete yet, need to implement all perunBeans !!!\n+     * <p/>\n+     * Get perunBean and try to find all connected Users\n+     *\n+     * @param sess\n+     * @param perunBean\n+     * @return list of users connected with perunBeans\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException;\n+\n+    /**\n+     * Changes user password in defined login-namespace. If checkOldPassword is true, then ask authentication system if old password is correct. user must exists.\n+     *\n+     * @param sess\n+     * @param user             user object which is used to get userLogin from the loginNamespace\n+     * @param oldPassword\n+     * @param newPassword\n+     * @param checkOldPassword\n+     * @param loginNamespace\n+     * @throws InternalErrorException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordDoesntMatchException\n+     * @throws PasswordChangeFailedException\n+     */\n+    void changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword)\n+            throws InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+    /**\n+     * Creates the password in external system. User must not exists.\n+     *\n+     * @param sess\n+     * @param userLogin      string representation of the userLogin\n+     * @param loginNamespace\n+     * @param password\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     */\n+    @Deprecated\n+    void createPassword(PerunSession sess, String userLogin, String loginNamespace, String password)\n+            throws InternalErrorException, PasswordCreationFailedException;\n+\n+    /**\n+     * Creates the password in external system. User must exists.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @param password\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    @Deprecated\n+    void createPassword(PerunSession sess, User user, String loginNamespace, String password)\n+            throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n+\n+    /**\n+     * Reserves random password in external system. User must exists.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    void reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+    /**\n+     * Reserves the password in external system. User must not exists.\n+     *\n+     * @param sess\n+     * @param userLogin      string representation of the userLogin\n+     * @param loginNamespace\n+     * @param password\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     */\n+    void reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password)\n+            throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+    /**\n+     * Reserves the password in external system. User must exists.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @param password\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    void reservePassword(PerunSession sess, User user, String loginNamespace, String password)\n+            throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+    /**\n+     * Validates the password in external system. User must not exists.\n+     *\n+     * @param sess\n+     * @param userLogin      string representation of the userLogin\n+     * @param loginNamespace\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     */\n+    void validatePassword(PerunSession sess, String userLogin, String loginNamespace)\n+            throws InternalErrorException, PasswordCreationFailedException;\n+\n+    /**\n+     * Validates the password in external system. User must exists.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    void validatePassword(PerunSession sess, User user, String loginNamespace)\n+            throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n+\n+    /**\n+     * Validates the password in external system and set user extSources and extSource related attributes. User must exists.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param userLogin\n+     * @param loginNamespace\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     * @throws LoginNotExistsException\n+     * @throws ExtSourceNotExistsException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    public void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace)\n+            throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Deletes password in external system. User must not exists.\n+     *\n+     * @param sess\n+     * @param userLogin\n+     * @param loginNamespace\n+     * @throws InternalErrorException\n+     * @throws PasswordDeletionFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    void deletePassword(PerunSession sess, String userLogin, String loginNamespace)\n+            throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException, PasswordOperationTimeoutException;\n+\n+    /**\n+     * Creates alternative password in external system.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param description    - description of a password (e.g. 'mobile phone', 'tablet', ...)\n+     * @param loginNamespace\n+     * @param password       string representation of password\n+     * @throws InternalErrorException\n+     * @throws PasswordCreationFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    void createAlternativePassword(PerunSession sess, User user, String description, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n+\n+    /**\n+     * Deletes alternative password in external system.\n+     *\n+     * @param sess\n+     * @param loginNamespace\n+     * @param passwordId     passwords ID\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PasswordDeletionFailedException\n+     * @throws LoginNotExistsException\n+     */\n+    void deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException;\n+\n+\n+    /**\n+     * Check if login in specified namespace exists.\n+     *\n+     * @param sess\n+     * @param namespace namespace for login\n+     * @param login     login to check\n+     * @throws InternalErrorException\n+     * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n+     */\n+    void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n+\n+    void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n+\n+    void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+    boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * From List of Users make list of RichUsers (without attributes)\n+     *\n+     * @param sess\n+     * @param users\n+     * @return list of RIch Users without attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException;\n+\n+    /**\n+     * From List of Rich Users without attribute make list of Rich Users with attributes\n+     *\n+     * @param sess\n+     * @param richUsers\n+     * @return list of Rich Users with attributes\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * From List of Users make list of RichUsers (with attributes by names)\n+     *\n+     * @param sess\n+     * @param users\n+     * @return list of RIch Users without attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException;\n+\n+    /**\n+     * For richUser filter all his user attributes and remove all which principal has no access to.\n+     *\n+     * @param sess\n+     * @param richUser\n+     * @return richUser with only allowed attributes\n+     * @throws InternalErrorException\n+     */\n+    RichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException;\n+\n+    /**\n+     * For list of richUser filter all their user attributes and remove all which principal has no access to.\n+     *\n+     * @param sess\n+     * @param richUsers\n+     * @return list of RichUsers with only allowed attributes\n+     * @throws InternalErrorException\n+     */\n+    List<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException;\n+\n+    /**\n+     * Return list of RichUsers who matches the searchString, searching name, email and logins\n+     * and are not member in specific VO and contain selected attributes.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param searchString\n+     * @param attrsName\n+     * @return list of RichUser\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws VoNotExistsException\n+     */\n+    List<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException;\n+\n+    /**\n+     * Return list of RichUsers which are not members of any VO and contain selected attributes.\n+     *\n+     * @param sess\n+     * @param attrsName\n+     * @return list of RichUsers\n+     * @throws InternalErrorException\n+     * @throws VoNotExistsException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException;\n+\n+    /**\n+     * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param attrNames\n+     * @return list of RichUsers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n+     * Name part is searched for exact match.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @param attrNames\n+     * @return list of RichUsers\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get User to RichUser with attributes.\n+     *\n+     * @param sess\n+     * @param includedSpecificUsers\n+     * @param attrsNames\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsNames) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get All RichUsers without UserExtSources and without virtual attributes.\n+     *\n+     * @param sess\n+     * @return list of RichUsers\n+     * @throws InternalErrorException\n+     */\n+    List<RichUser> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Allow users to manually add login in supported namespace if same login is not reserved\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @param login\n+     * @throws InternalErrorException\n+     */\n+    void setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException;\n+\n+    /**\n+     * Request change of user's preferred email address.\n+     * Change in attribute value is not done, until email\n+     * address is verified by link in email notice.\n+     * (urn:perun:user:attribute-def:def:preferredEmail)\n+     *\n+     * @param sess  PerunSession\n+     * @param url   base URL of running perun instance passed from RPC.\n+     * @param user  User to request preferred email change for\n+     * @param email new email address\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    void requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * * Validate change of user's preferred email address.\n+     * New email address is set as value of\n+     * urn:perun:user:attribute-def:def:preferredEmail attribute.\n+     *\n+     * @param sess PerunSession\n+     * @param user User to validate email address for\n+     * @param i    decrypted parameter\n+     * @param m    encrypted parameter\n+     * @return String return new preferred email\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException                When user from session is null\n+     * @throws WrongAttributeValueException          If new email address is in wrong format\n+     * @throws WrongAttributeAssignmentException\n+     * @throws AttributeNotExistsException           If user:preferredEmail attribute doesn't exists.\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    String validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, UserNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Return list of email addresses of user, which are\n+     * awaiting validation and are inside time window\n+     * for validation.\n+     * <p/>\n+     * If there is no preferred email change request pending\n+     * or requests are outside time window for validation,\n+     * returns empty list.\n+     *\n+     * @param sess PerunSession\n+     * @param user User to check pending request for\n+     * @return List<String> user's email addresses pending validation\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeAssignmentException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException;\n+\n+    /**\n+     * Get user and convert values of his object attributes:\n+     * - firstName\n+     * - lastName\n+     * - middleName\n+     * - titleBefore\n+     * - titleAfter\n+     * from emptyString (like \"\") to null.\n+     * <p/>\n+     * If these values are not empty strings, do not change them.\n+     * If user is null, return null.\n+     *\n+     * @param user user to converting\n+     * @return converted user\n+     */\n+    User convertUserEmptyStringsInObjectAttributesIntoNull(User user);\n+\n+    /**\n+     * Changes user password in defined login-namespace using encrypted parameters.\n+     *\n+     * @param sess     PerunSession\n+     * @param user     user to change password for\n+     * @param m        encrypted parameter\n+     * @param password password to set\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws LoginNotExistsException\n+     * @throws PasswordChangeFailedException\n+     */\n+    void changeNonAuthzPassword(PerunSession sess, User user, String m, String password)\n+            throws InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+    /**\n+     * Get count of all users.\n+     *\n+     * @param perunSession\n+     * @return count of all users\n+     * @throws InternalErrorException\n+     */\n+    int getUsersCount(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Generate user account in a backend system associated with login-namespace in Perun.\n+     * <p>\n+     * This method consumes optional parameters map. Requirements are implementation-dependant\n+     * for each login-namespace.\n+     * <p>\n+     * Returns map with\n+     * 1: key=login-namespace attribute urn, value=generated login\n+     * 2: rest of opt response attributes...\n+     *\n+     * @param session\n+     * @param namespace  Namespace to generate account in\n+     * @param parameters Optional parameters\n+     * @return Map of data from backed response\n+     * @throws InternalErrorException\n+     */\n+    Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n \n }\n",
            "diff_size": 1101
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "711",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/26/UsersManagerBl.java\nindex c25b08a6223..6f48a560976 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/26/UsersManagerBl.java\n@@ -2,7 +2,6 @@ package cz.metacentrum.perun.core.bl;\n \n import java.util.List;\n import java.util.Map;\n-\n import cz.metacentrum.perun.core.api.*;\n import cz.metacentrum.perun.core.api.exceptions.*;\n \n@@ -14,1108 +13,1289 @@ import cz.metacentrum.perun.core.api.exceptions.*;\n  * @author Zora Sebestianova\n  * @author Sona Mastrakova\n  */\n+\n+\n public interface UsersManagerBl {\n \n-\t/**\n-\t * Returns user by his login in external source and external source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return selected user or throws  in case the user doesn't exists\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get the user based on one of the userExtSource.\n-\t *\n-\t * @param sess\n-\t * @param userExtSources\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tUser getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all the users who have given type of the ExtSource and login.\n-\t *\n-\t * @param perunSession  perun session\n-\t * @param extSourceType type of the user extSource\n-\t * @param login         login of the user\n-\t * @return all users with given parameters\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns user by his/her id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns user by VO member.\n-\t *\n-\t * @param perunSession\n-\t * @param member\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @return list of specific users who are owned by the user\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all users who owns the specificUser and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param specificUser the specific User\n-\t * @return list of user who owns the specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove specificUser owner (the user)\n-\t * Only disable ownership of user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user        the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t * @throws RelationNotExistsException if there is no such user (the user) to remove\n-\t * @throws SpecificUserMustHaveOwnerException if there is the last user to remove\n-\t * @throws SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException;\n-\n-\t/**\n-\t * Add specificUser owner (the user)\n-\t * If not exists, create new ownership.\n-\t * If exists, only enable ownership for user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException If there is such user (the user) who try to add\n-\t */\n-\tvoid addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException;\n-\n-\t/**\n-\t * Return true if ownership of user and specificUser already exists.\n-\t * Return false if not.\n-\t * <p/>\n-\t * Looking for enabled and also for disabled ownership.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all specific Users (only specific users)\n-\t *\n-\t * @param sess\n-\t * @return list of all specific users in perun\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user by extSourceName and extSourceLogin\n-\t *\n-\t * @param sess\n-\t * @param extSourceName\n-\t * @param extLogin\n-\t * @return user\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws UserExtSourceNotExistsException\n-\t * @throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException;\n-\n-\t/**\n-\t * Returns all users (included specific users)\n-\t *\n-\t * @param sess\n-\t * @return list of all users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Get User to RichUser without attributes.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tRichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get User to RichUser with attributes.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tRichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get All richUsers with or without specificUsers.\n-\t * If includedSpecificUsers is true, you got all Users included specificUsers\n-\t * If includedSpecificUsers is false, you get all Users without specificUsers\n-\t *\n-\t * @param sess\n-\t * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get All richUsers with or without specificUsers.\n-\t * If includedSpecificUsers is true, you got all Users included specificUsers\n-\t * If includedSpecificUsers is false, you get all Users without specificUsers\n-\t * <p/>\n-\t * This method get all RichUsers included Attributes.\n-\t *\n-\t * @param sess\n-\t * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * From Users makes RichUsers without attributes.\n-\t *\n-\t * @param sess\n-\t * @param users users to convert\n-\t * @return list of richUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * From Users makes RichUsers with attributes.\n-\t *\n-\t * @param sess\n-\t * @param users users to convert\n-\t * @return list of richUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Convert RichUsers without attribute to RichUsers with specific attributes.\n-\t * Specific by list of Attributes.\n-\t * If in list of Attributes is some notUser attribute, it is skipped.\n-\t *\n-\t * @param sess\n-\t * @param richUsers\n-\t * @param attrsDef\n-\t * @return list of RichUsers with specific attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef) throws InternalErrorException;\n-\n-\t/**\n-\t * Inserts user into DB.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser createUser(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Deletes user.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException             if user has some members assigned\n-\t * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n-\t * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n-\t * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DB\n-\t * @throws GroupOperationsException\t           if something went wrong while processing relations\n-\t */\n-\tvoid deleteUser(PerunSession perunSession, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t * Deletes user. If forceDelete is true, then removes also associated members.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param forceDelete  if true, deletes also all members if they are assigned to the user\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException             if forceDelete is false and the user has some members assigned\n-\t * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n-\t * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n-\t * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DBn\n-\t * @throws GroupOperationsException\t           if something went wrong while processing relations\n-\t */\n-\tvoid deleteUser(PerunSession perunSession, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n-\n-\t/**\n-\t * Updates users data in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException if user not exists when method trying to update him\n-\t */\n-\tUser updateUser(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Updates titles before/after users name.\n-\t * <p/>\n-\t * New titles must be set inside User object.\n-\t * Setting any title to null will remove title from name.\n-\t * Other user's properties are ignored.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user with new titles before/after name\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException if user not exists when method trying to update him\n-\t */\n-\tUser updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Updates user's userExtSource in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated userExtSource\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated userExtSource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all users external sources by specific type and extLogin.\n-\t *\n-\t * @param sess\n-\t * @param extType - type of extSource (ex. 'IDP')\n-\t * @param extLogin - extLogin of userExtSource\n-\t *\n-\t * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all user's external sources of the user.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of user's external sources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get the user ext source by its id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return user external source for the id\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tUserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Get all users userExtSources with last_access not older than (now - m),\n-\t * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n-\t *\n-\t * @param sess\n-\t * @param user user to get extSources for\n-\t *\n-\t * @return list of active user extSources (not older than now - m)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get list of user ext sources be their ids.\n-\t *\n-\t * @param sess\n-\t * @param ids\n-\t * @return list of user external sources for ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n-\n-\t/**\n-\t * Adds user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @return user external auth object with newly generated ID\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceExistsException\n-\t */\n-\tUserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException;\n-\n-\t/**\n-\t * Removes user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n-\n-\t/**\n-\t * Gets user's external source by the user's external login and external source.\n-\t *\n-\t * @param perunSession\n-\t * @param source\n-\t * @param extLogin\n-\t * @return user external source object\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Returns list of VOs, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of VOs, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of Groups, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of Groups, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of VOs, where the user is a member.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of VOs, where the user is a member.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsMember(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources from the facility which have the user access on.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources from the facility where the user is assigned.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources which have the user access on.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources where the user is assigned.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all rich resources where the user is assigned.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of rich resources which have the user access on\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have set the attribute with the value. Searching by attributeName. Searching only def and opt attributes.\n-\t * Can find only attributes with String Value by this way! (not Integer, Map or List)\n-\t *\n-\t * @param sess\n-\t * @param attributeName\n-\t * @param attributeValue\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n-\t *\n-\t * @param sess\n-\t * @param attributeName\n-\t * @param attributeValue\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users' who matches the searchString, searching name, email and logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of richusers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n-\t * Name part is searched for exact match.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of richusers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Return list of users who matches the searchString, searching name, email and logins\n-\t * and are not member in specific VO.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the fields.\n-\t *\n-\t * @param sess\n-\t * @param titleBefore\n-\t * @param firstName\n-\t * @param middleName\n-\t * @param lastName\n-\t * @param titleAfter\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n+ /**\n+  * Returns user by his login in external source and external source.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @return selected user or throws  in case the user doesn't exists\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get the user based on one of the userExtSource.\n+  *\n+  * @param sess\n+  * @param userExtSources\n+  * @return user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ User getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get all the users who have given type of the ExtSource and login.\n+  *\n+  * @param perunSession  perun session\n+  * @param extSourceType type of the user extSource\n+  * @param login         login of the user\n+  * @return all users with given parameters\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n+\n+ /**\n+  * Returns user by his/her id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  * @return user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Returns user by VO member.\n+  *\n+  * @param perunSession\n+  * @param member\n+  * @return user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n+  *\n+  * @param sess\n+  * @param user the user\n+  * @return list of specific users who are owned by the user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Return all users who owns the specificUser and their ownership is not in status disabled\n+  *\n+  * @param sess\n+  * @param specificUser the specific User\n+  * @return list of user who owns the specificUser\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Remove specificUser owner (the user)\n+  * Only disable ownership of user and specificUser\n+  *\n+  * @param sess\n+  * @param user        the user\n+  * @param specificUser the specificUser\n+  * @throws InternalErrorException\n+  * @throws RelationNotExistsException if there is no such user (the user) to remove\n+  * @throws SpecificUserMustHaveOwnerException if there is the last user to remove\n+  * @throws SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException;\n+\n+ /**\n+  * Add specificUser owner (the user)\n+  * If not exists, create new ownership.\n+  * If exists, only enable ownership for user and specificUser\n+  *\n+  * @param sess\n+  * @param user the user\n+  * @param specificUser the specificUser\n+  * @throws InternalErrorException\n+  * @throws RelationExistsException If there is such user (the user) who try to add\n+  */\n+\n+\n+ void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException;\n+\n+ /**\n+  * Return true if ownership of user and specificUser already exists.\n+  * Return false if not.\n+  * <p/>\n+  * Looking for enabled and also for disabled ownership.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param specificUser\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Return all specific Users (only specific users)\n+  *\n+  * @param sess\n+  * @return list of all specific users in perun\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Get user by extSourceName and extSourceLogin\n+  *\n+  * @param sess\n+  * @param extSourceName\n+  * @param extLogin\n+  * @return user\n+  * @throws ExtSourceNotExistsException\n+  * @throws UserExtSourceNotExistsException\n+  * @throws UserNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException;\n+\n+ /**\n+  * Returns all users (included specific users)\n+  *\n+  * @param sess\n+  * @return list of all users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsers(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Get User to RichUser without attributes.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ RichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get User to RichUser with attributes.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ RichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get All richUsers with or without specificUsers.\n+  * If includedSpecificUsers is true, you got all Users included specificUsers\n+  * If includedSpecificUsers is false, you get all Users without specificUsers\n+  *\n+  * @param sess\n+  * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n+  * @return list of RichUsers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get All richUsers with or without specificUsers.\n+  * If includedSpecificUsers is true, you got all Users included specificUsers\n+  * If includedSpecificUsers is false, you get all Users without specificUsers\n+  * <p/>\n+  * This method get all RichUsers included Attributes.\n+  *\n+  * @param sess\n+  * @param includedSpecificUsers true or false if you want or dont want get specificUsers too\n+  * @return list of RichUsers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * From Users makes RichUsers without attributes.\n+  *\n+  * @param sess\n+  * @param users users to convert\n+  * @return list of richUsers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * From Users makes RichUsers with attributes.\n+  *\n+  * @param sess\n+  * @param users users to convert\n+  * @return list of richUsers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Convert RichUsers without attribute to RichUsers with specific attributes.\n+  * Specific by list of Attributes.\n+  * If in list of Attributes is some notUser attribute, it is skipped.\n+  *\n+  * @param sess\n+  * @param richUsers\n+  * @param attrsDef\n+  * @return list of RichUsers with specific attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef) throws InternalErrorException;\n+\n+ /**\n+  * Inserts user into DB.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User createUser(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Deletes user.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws RelationExistsException             if user has some members assigned\n+  * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n+  * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n+  * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DB\n+  * @throws GroupOperationsException            if something went wrong while processing relations\n+  */\n+\n+\n+ void deleteUser(PerunSession perunSession, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n+\n+ /**\n+  * Deletes user. If forceDelete is true, then removes also associated members.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @param forceDelete  if true, deletes also all members if they are assigned to the user\n+  * @throws InternalErrorException\n+  * @throws RelationExistsException             if forceDelete is false and the user has some members assigned\n+  * @throws MemberAlreadyRemovedException       if there is at least 1 member deleted but not affected by deleting from DB\n+  * @throws UserAlreadyRemovedException         if there are no rows affected by deleting user in DB\n+  * @throws SpecificUserAlreadyRemovedException if there are no rows affected by deleting specific user in DBn\n+  * @throws GroupOperationsException            if something went wrong while processing relations\n+  */\n+\n+\n+ void deleteUser(PerunSession perunSession, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException, GroupOperationsException;\n+\n+ /**\n+  * Updates users data in DB.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return updated user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException if user not exists when method trying to update him\n+  */\n+\n+\n+ User updateUser(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Updates titles before/after users name.\n+  * <p/>\n+  * New titles must be set inside User object.\n+  * Setting any title to null will remove title from name.\n+  * Other user's properties are ignored.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return updated user with new titles before/after name\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException if user not exists when method trying to update him\n+  */\n+\n+\n+ User updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Updates user's userExtSource in DB.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @return updated userExtSource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ UserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  * Updates user's userExtSource last access time in DB. We can get information which userExtSource has been used as a last one.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @return updated userExtSource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  * Gets list of all users external sources by specific type and extLogin.\n+  *\n+  * @param sess\n+  * @param extType - type of extSource (ex. 'IDP')\n+  * @param extLogin - extLogin of userExtSource\n+  *\n+  * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n+\n+ /**\n+  * Gets list of all user's external sources of the user.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of user's external sources\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get the user ext source by its id.\n+  *\n+  * @param sess\n+  * @param id\n+  * @return user external source for the id\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceNotExistsException\n+  */\n+\n+\n+ UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+ /**\n+  * Get all users userExtSources with last_access not older than (now - m),\n+  * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n+  *\n+  * @param sess\n+  * @param user user to get extSources for\n+  *\n+  * @return list of active user extSources (not older than now - m)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get list of user ext sources be their ids.\n+  *\n+  * @param sess\n+  * @param ids\n+  * @return list of user external sources for ids\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n+\n+ /**\n+  * Adds user's external sources.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @param userExtSource\n+  * @return user external auth object with newly generated ID\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceExistsException\n+  */\n+\n+\n+ UserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException;\n+\n+ /**\n+  * Removes user's external sources.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @param userExtSource\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n+\n+ /**\n+  * Gets user's external source by the user's external login and external source.\n+  *\n+  * @param perunSession\n+  * @param source\n+  * @param extLogin\n+  * @return user external source object\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ UserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+ /**\n+  * Returns list of VOs, where the user is an Administrator.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of VOs, where the user is an Administrator.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of Groups, where the user is an Administrator.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of Groups, where the user is an Administrator.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of VOs, where the user is a member.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of VOs, where the user is a member.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Vo> getVosWhereUserIsMember(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources from the facility which have the user access on.\n+  *\n+  * @param sess\n+  * @param facility\n+  * @param user\n+  * @return list of resources which have the user access on\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources from the facility where the user is assigned.\n+  *\n+  * @param sess\n+  * @param facility\n+  * @param user\n+  * @return list of resources which have the user access on\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources which have the user access on.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return list of resources which have the user access on\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources where the user is assigned.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return list of resources which have the user access on\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all rich resources where the user is assigned.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return list of rich resources which have the user access on\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who have set the attribute with the value. Searching by attributeName. Searching only def and opt attributes.\n+  * Can find only attributes with String Value by this way! (not Integer, Map or List)\n+  *\n+  * @param sess\n+  * @param attributeName\n+  * @param attributeValue\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n+  *\n+  * @param sess\n+  * @param attributeName\n+  * @param attributeValue\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users' who matches the searchString, searching name, email and logins.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of richusers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Returns list of richusers with attributes who matches the searchString, searching name, email, logins.\n+  * Name part is searched for exact match.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of richusers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Return list of users who matches the searchString, searching name, email and logins\n+  * and are not member in specific VO.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users who matches the searchString\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users who matches the fields.\n+  *\n+  * @param sess\n+  * @param titleBefore\n+  * @param firstName\n+  * @param middleName\n+  * @param lastName\n+  * @param titleAfter\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n         \n-\t/**\n-\t * Returns list of users who exactly matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Checks if the login is available in the namespace.\n-\t *\n-\t * @param sess\n-\t * @param loginNamespace in which the login will be checked (provide only the name of the namespace, not the whole attribute name)\n-\t * @param login          to be checked\n-\t * @return true if login available, false otherwise\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Batch method which returns users by theirs ids.\n-\t *\n-\t * @param sess\n-\t * @param usersIds\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who are not member of any VO.\n-\t *\n-\t * @param sess\n-\t * @return list of users who are not member of any VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all RichUsers with attributes who are not member of any VO.\n-\t *\n-\t * @param sess\n-\t * @return list of richUsers who are not member of any VO\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException;\n-\n-\n-\t/**\n-\t * Adds PERUNADMIN role to the user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is PERUNADMIN.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return true if the user is PERUNADMIN, false otherwise.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * !!! Not Complete yet, need to implement all perunBeans !!!\n-\t * <p/>\n-\t * Get perunBean and try to find all connected Users\n-\t *\n-\t * @param sess\n-\t * @param perunBean\n-\t * @return list of users connected with perunBeans\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException;\n-\n-\t/**\n-\t * Changes user password in defined login-namespace. If checkOldPassword is true, then ask authentication system if old password is correct. user must exists.\n-\t *\n-\t * @param sess\n-\t * @param user             user object which is used to get userLogin from the loginNamespace\n-\t * @param oldPassword\n-\t * @param newPassword\n-\t * @param checkOldPassword\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordDoesntMatchException\n-\t * @throws PasswordChangeFailedException\n-\t */\n-\tvoid changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword)\n-\t\t\tthrows InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Creates the password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin      string representation of the userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t */\n-\t@Deprecated\n-\tvoid createPassword(PerunSession sess, String userLogin, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException;\n-\n-\t/**\n-\t * Creates the password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\t@Deprecated\n-\tvoid createPassword(PerunSession sess, User user, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n-\n-\t/**\n-\t * Reserves random password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Reserves the password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin      string representation of the userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t */\n-\tvoid reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Reserves the password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid reservePassword(PerunSession sess, User user, String loginNamespace, String password)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Validates the password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin      string representation of the userLogin\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t */\n-\tvoid validatePassword(PerunSession sess, String userLogin, String loginNamespace)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException;\n-\n-\t/**\n-\t * Validates the password in external system. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid validatePassword(PerunSession sess, User user, String loginNamespace)\n-\t\t\tthrows InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n-\n-\t/**\n-\t * Validates the password in external system and set user extSources and extSource related attributes. User must exists.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t * @throws ExtSourceNotExistsException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Deletes password in external system. User must not exists.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @throws InternalErrorException\n-\t * @throws PasswordDeletionFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid deletePassword(PerunSession sess, String userLogin, String loginNamespace)\n-\t\t\tthrows InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException, PasswordOperationTimeoutException;\n-\n-\t/**\n-\t * Creates alternative password in external system.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param description - description of a password (e.g. 'mobile phone', 'tablet', ...)\n-\t * @param loginNamespace\n-\t * @param password string representation of password\n-\t * @throws InternalErrorException\n-\t * @throws PasswordCreationFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid createAlternativePassword(PerunSession sess, User user, String description, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n-\n-\t/**\n-\t * Deletes alternative password in external system.\n-\t *\n-\t * @param sess\n-\t * @param loginNamespace\n-\t * @param passwordId passwords ID\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PasswordDeletionFailedException\n-\t * @throws LoginNotExistsException\n-\t */\n-\tvoid deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException;\n-\n-\n-\t/**\n-\t * Check if login in specified namespace exists.\n-\t *\n-\t * @param sess\n-\t * @param namespace namespace for login\n-\t * @param login     login to check\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n-\t */\n-\tvoid checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n-\n-\tvoid checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\tvoid checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\tboolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * From List of Users make list of RichUsers (without attributes)\n-\t *\n-\t * @param sess\n-\t * @param users\n-\t * @return list of RIch Users without attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException;\n-\n-\t/**\n-\t * From List of Rich Users without attribute make list of Rich Users with attributes\n-\t *\n-\t * @param sess\n-\t * @param richUsers\n-\t * @return list of Rich Users with attributes\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * From List of Users make list of RichUsers (with attributes by names)\n-\t *\n-\t * @param sess\n-\t * @param users\n-\t * @return list of RIch Users without attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * For richUser filter all his user attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richUser\n-\t * @return richUser with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tRichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException;\n-\n-\t/**\n-\t * For list of richUser filter all their user attributes and remove all which principal has no access to.\n-\t *\n-\t * @param sess\n-\t * @param richUsers\n-\t * @return list of RichUsers with only allowed attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException;\n-\n-\t/**\n-\t * Return list of RichUsers who matches the searchString, searching name, email and logins\n-\t * and are not member in specific VO and contain selected attributes.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param searchString\n-\t * @param attrsName\n-\t * @return list of RichUser\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws VoNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException;\n-\n-\t/**\n-\t * Return list of RichUsers which are not members of any VO and contain selected attributes.\n-\t *\n-\t * @param sess\n-\t * @param attrsName\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws VoNotExistsException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param attrNames\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n-\t * Name part is searched for exact match.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @param attrNames\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get User to RichUser with attributes.\n-\t *\n-\t * @param sess\n-\t * @param includedSpecificUsers\n-\t * @param attrsNames\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsNames) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get All RichUsers without UserExtSources and without virtual attributes.\n-\t *\n-\t * @param sess\n-\t * @return list of RichUsers\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichUser> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Allow users to manually add login in supported namespace if same login is not reserved\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param login\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Request change of user's preferred email address.\n-\t * Change in attribute value is not done, until email\n-\t * address is verified by link in email notice.\n-\t * (urn:perun:user:attribute-def:def:preferredEmail)\n-\t *\n-\t * @param sess  PerunSession\n-\t * @param url   base URL of running perun instance passed from RPC.\n-\t * @param user  User to request preferred email change for\n-\t * @param email new email address\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tvoid requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * * Validate change of user's preferred email address.\n-\t * New email address is set as value of\n-\t * urn:perun:user:attribute-def:def:preferredEmail attribute.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to validate email address for\n-\t * @param i    decrypted parameter\n-\t * @param m    encrypted parameter\n-\t * @return String return new preferred email\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException                When user from session is null\n-\t * @throws WrongAttributeValueException          If new email address is in wrong format\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws AttributeNotExistsException           If user:preferredEmail attribute doesn't exists.\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tString validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, UserNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Return list of email addresses of user, which are\n-\t * awaiting validation and are inside time window\n-\t * for validation.\n-\t * <p/>\n-\t * If there is no preferred email change request pending\n-\t * or requests are outside time window for validation,\n-\t * returns empty list.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to check pending request for\n-\t * @return List<String> user's email addresses pending validation\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get user and convert values of his object attributes:\n-\t * - firstName\n-\t * - lastName\n-\t * - middleName\n-\t * - titleBefore\n-\t * - titleAfter\n-\t * from emptyString (like \"\") to null.\n-\t * <p/>\n-\t * If these values are not empty strings, do not change them.\n-\t * If user is null, return null.\n-\t *\n-\t * @param user user to converting\n-\t * @return converted user\n-\t */\n-\tUser convertUserEmptyStringsInObjectAttributesIntoNull(User user);\n-\n-\t/**\n-\t * Changes user password in defined login-namespace using encrypted parameters.\n-\t *\n-\t * @param sess     PerunSession\n-\t * @param user     user to change password for\n-\t * @param m        encrypted parameter\n-\t * @param password password to set\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws LoginNotExistsException\n-\t * @throws PasswordChangeFailedException\n-\t */\n-\tvoid changeNonAuthzPassword(PerunSession sess, User user, String m, String password)\n-\t\t\tthrows InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n-\n-\t/**\n-\t * Get count of all users.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all users\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getUsersCount(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Generate user account in a backend system associated with login-namespace in Perun.\n-\t *\n-\t * This method consumes optional parameters map. Requirements are implementation-dependant\n-\t * for each login-namespace.\n-\t *\n-\t * Returns map with\n-\t * 1: key=login-namespace attribute urn, value=generated login\n-\t * 2: rest of opt response attributes...\n-\t *\n-\t * @param session\n-\t * @param namespace Namespace to generate account in\n-\t * @param parameters Optional parameters\n-\t * @return Map of data from backed response\n-\t * @throws InternalErrorException\n-\t */\n-\tMap<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n-\n-}\n+ /**\n+  * Returns list of users who exactly matches the searchString\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Checks if the login is available in the namespace.\n+  *\n+  * @param sess\n+  * @param loginNamespace in which the login will be checked (provide only the name of the namespace, not the whole attribute name)\n+  * @param login          to be checked\n+  * @return true if login available, false otherwise\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException;\n+\n+ /**\n+  * Batch method which returns users by theirs ids.\n+  *\n+  * @param sess\n+  * @param usersIds\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who are not member of any VO.\n+  *\n+  * @param sess\n+  * @return list of users who are not member of any VO\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Returns all RichUsers with attributes who are not member of any VO.\n+  *\n+  * @param sess\n+  * @return list of richUsers who are not member of any VO\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException;\n+\n+\n+ /**\n+  * Adds PERUNADMIN role to the user.\n+  *\n+  * @param sess\n+  * @param user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void makeUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns true if the user is PERUNADMIN.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return true if the user is PERUNADMIN, false otherwise.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * !!! Not Complete yet, need to implement all perunBeans !!!\n+  * <p/>\n+  * Get perunBean and try to find all connected Users\n+  *\n+  * @param sess\n+  * @param perunBean\n+  * @return list of users connected with perunBeans\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException;\n+\n+ /**\n+  * Changes user password in defined login-namespace. If checkOldPassword is true, then ask authentication system if old password is correct. user must exists.\n+  *\n+  * @param sess\n+  * @param user             user object which is used to get userLogin from the loginNamespace\n+  * @param oldPassword\n+  * @param newPassword\n+  * @param checkOldPassword\n+  * @param loginNamespace\n+  * @throws InternalErrorException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordDoesntMatchException\n+  * @throws PasswordChangeFailedException\n+  */\n+\n+\n+ void changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword) throws InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+ /**\n+  * Creates the password in external system. User must not exists.\n+  *\n+  * @param sess\n+  * @param userLogin      string representation of the userLogin\n+  * @param loginNamespace\n+  * @param password\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  */\n+\n+ @Deprecated\n+ void createPassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException;\n+\n+ /**\n+  * Creates the password in external system. User must exists.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @param password\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+ @Deprecated\n+ void createPassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n+\n+ /**\n+  * Reserves random password in external system. User must exists.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+\n+ void reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+ /**\n+  * Reserves the password in external system. User must not exists.\n+  *\n+  * @param sess\n+  * @param userLogin      string representation of the userLogin\n+  * @param loginNamespace\n+  * @param password\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  */\n+\n+\n+ void reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+ /**\n+  * Reserves the password in external system. User must exists.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @param password\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+\n+ void reservePassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+ /**\n+  * Validates the password in external system. User must not exists.\n+  *\n+  * @param sess\n+  * @param userLogin      string representation of the userLogin\n+  * @param loginNamespace\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  */\n+\n+\n+ void validatePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException;\n+\n+ /**\n+  * Validates the password in external system. User must exists.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+\n+ void validatePassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n+\n+ /**\n+  * Validates the password in external system and set user extSources and extSource related attributes. User must exists.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param userLogin\n+  * @param loginNamespace\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  * @throws LoginNotExistsException\n+  * @throws ExtSourceNotExistsException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ public void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Deletes password in external system. User must not exists.\n+  *\n+  * @param sess\n+  * @param userLogin\n+  * @param loginNamespace\n+  * @throws InternalErrorException\n+  * @throws PasswordDeletionFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+\n+ void deletePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException, PasswordOperationTimeoutException;\n+\n+ /**\n+  * Creates alternative password in external system.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param description - description of a password (e.g. 'mobile phone', 'tablet', ...)\n+  * @param loginNamespace\n+  * @param password string representation of password\n+  * @throws InternalErrorException\n+  * @throws PasswordCreationFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+\n+ void createAlternativePassword(PerunSession sess,\n+                                User user,\n+                                String description,\n+                                String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException;\n+\n+ /**\n+  * Deletes alternative password in external system.\n+  *\n+  * @param sess\n+  * @param loginNamespace\n+  * @param passwordId passwords ID\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PasswordDeletionFailedException\n+  * @throws LoginNotExistsException\n+  */\n+\n+\n+ void deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException;\n+\n+\n+ /**\n+  * Check if login in specified namespace exists.\n+  *\n+  * @param sess\n+  * @param namespace namespace for login\n+  * @param login     login to check\n+  * @throws InternalErrorException\n+  * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n+  */\n+\n+\n+ void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n+\n+\n+ void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException;\n+\n+\n+ void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+\n+ boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  * From List of Users make list of RichUsers (without attributes)\n+  *\n+  * @param sess\n+  * @param users\n+  * @return list of RIch Users without attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException;\n+\n+ /**\n+  * From List of Rich Users without attribute make list of Rich Users with attributes\n+  *\n+  * @param sess\n+  * @param richUsers\n+  * @return list of Rich Users with attributes\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * From List of Users make list of RichUsers (with attributes by names)\n+  *\n+  * @param sess\n+  * @param users\n+  * @return list of RIch Users without attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException;\n+\n+ /**\n+  * For richUser filter all his user attributes and remove all which principal has no access to.\n+  *\n+  * @param sess\n+  * @param richUser\n+  * @return richUser with only allowed attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ RichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException;\n+\n+ /**\n+  * For list of richUser filter all their user attributes and remove all which principal has no access to.\n+  *\n+  * @param sess\n+  * @param richUsers\n+  * @return list of RichUsers with only allowed attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException;\n+\n+ /**\n+  * Return list of RichUsers who matches the searchString, searching name, email and logins\n+  * and are not member in specific VO and contain selected attributes.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param searchString\n+  * @param attrsName\n+  * @return list of RichUser\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws VoNotExistsException\n+  */\n+\n+\n+ List<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException;\n+\n+ /**\n+  * Return list of RichUsers which are not members of any VO and contain selected attributes.\n+  *\n+  * @param sess\n+  * @param attrsName\n+  * @return list of RichUsers\n+  * @throws InternalErrorException\n+  * @throws VoNotExistsException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException;\n+\n+ /**\n+  * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param attrNames\n+  * @return list of RichUsers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Returns list of RichUsers with selected attributes who matches the searchString, searching name, email, logins.\n+  * Name part is searched for exact match.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @param attrNames\n+  * @return list of RichUsers\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrNames) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get User to RichUser with attributes.\n+  *\n+  * @param sess\n+  * @param includedSpecificUsers\n+  * @param attrsNames\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsNames) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get All RichUsers without UserExtSources and without virtual attributes.\n+  *\n+  * @param sess\n+  * @return list of RichUsers\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichUser> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Allow users to manually add login in supported namespace if same login is not reserved\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @param login\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException;\n+\n+ /**\n+  * Request change of user's preferred email address.\n+  * Change in attribute value is not done, until email\n+  * address is verified by link in email notice.\n+  * (urn:perun:user:attribute-def:def:preferredEmail)\n+  *\n+  * @param sess  PerunSession\n+  * @param url   base URL of running perun instance passed from RPC.\n+  * @param user  User to request preferred email change for\n+  * @param email new email address\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ void requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * * Validate change of user's preferred email address.\n+  * New email address is set as value of\n+  * urn:perun:user:attribute-def:def:preferredEmail attribute.\n+  *\n+  * @param sess PerunSession\n+  * @param user User to validate email address for\n+  * @param i    decrypted parameter\n+  * @param m    encrypted parameter\n+  * @return String return new preferred email\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException                When user from session is null\n+  * @throws WrongAttributeValueException          If new email address is in wrong format\n+  * @throws WrongAttributeAssignmentException\n+  * @throws AttributeNotExistsException           If user:preferredEmail attribute doesn't exists.\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ String validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, UserNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Return list of email addresses of user, which are\n+  * awaiting validation and are inside time window\n+  * for validation.\n+  * <p/>\n+  * If there is no preferred email change request pending\n+  * or requests are outside time window for validation,\n+  * returns empty list.\n+  *\n+  * @param sess PerunSession\n+  * @param user User to check pending request for\n+  * @return List<String> user's email addresses pending validation\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeAssignmentException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException;\n+\n+ /**\n+  * Get user and convert values of his object attributes:\n+  * - firstName\n+  * - lastName\n+  * - middleName\n+  * - titleBefore\n+  * - titleAfter\n+  * from emptyString (like \"\") to null.\n+  * <p/>\n+  * If these values are not empty strings, do not change them.\n+  * If user is null, return null.\n+  *\n+  * @param user user to converting\n+  * @return converted user\n+  */\n+\n+\n+ User convertUserEmptyStringsInObjectAttributesIntoNull(User user);\n+\n+ /**\n+  * Changes user password in defined login-namespace using encrypted parameters.\n+  *\n+  * @param sess     PerunSession\n+  * @param user     user to change password for\n+  * @param m        encrypted parameter\n+  * @param password password to set\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws LoginNotExistsException\n+  * @throws PasswordChangeFailedException\n+  */\n+\n+\n+ void changeNonAuthzPassword(PerunSession sess, User user, String m, String password) throws InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException;\n+\n+ /**\n+  * Get count of all users.\n+  *\n+  * @param perunSession\n+  *\n+  * @return count of all users\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getUsersCount(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Generate user account in a backend system associated with login-namespace in Perun.\n+  *\n+  * This method consumes optional parameters map. Requirements are implementation-dependant\n+  * for each login-namespace.\n+  *\n+  * Returns map with\n+  * 1: key=login-namespace attribute urn, value=generated login\n+  * 2: rest of opt response attributes...\n+  *\n+  * @param session\n+  * @param namespace Namespace to generate account in\n+  * @param parameters Optional parameters\n+  * @return Map of data from backed response\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1284
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/26/UsersManagerBl.java\nindex c25b08a6223..63cca36c41f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/26/UsersManagerBl.java\n@@ -603,7 +603,7 @@ public interface UsersManagerBl {\n \t * @throws InternalErrorException\n \t */\n \tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n+\n \t/**\n \t * Returns list of users who exactly matches the searchString\n \t *\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/26/UsersManagerBl.java\nindex c25b08a6223..4f152d3bced 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/26/UsersManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/26/UsersManagerBl.java\n@@ -602,9 +602,9 @@ public interface UsersManagerBl {\n \t * @return list of users\n \t * @throws InternalErrorException\n \t */\n-\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n-\t/**\n+\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException\n+\n+\t;/**\n \t * Returns list of users who exactly matches the searchString\n \t *\n \t * @param sess\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}