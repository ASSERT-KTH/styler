{
    "project_name": "neo4j-neo4j",
    "error_id": "3194",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3194/LogEntryDetachedCheckpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3194/LogEntryDetachedCheckpoint.java\nindex 219a78e098c..a451939fe89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3194/LogEntryDetachedCheckpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3194/LogEntryDetachedCheckpoint.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.entry;\n \n import java.util.Objects;\n@@ -33,9 +34,9 @@ public class LogEntryDetachedCheckpoint extends AbstractLogEntry\n     private final StoreId storeId;\n     private final String reason;\n \n-    public LogEntryDetachedCheckpoint( byte version, LogPosition logPosition, long checkpointMillis, StoreId storeId, String reason )\n+    public LogEntryDetachedCheckpoint(byte version, LogPosition logPosition, long checkpointMillis, StoreId storeId, String reason)\n     {\n-        super( version, DETACHED_CHECK_POINT );\n+        super(version, DETACHED_CHECK_POINT);\n         this.logPosition = logPosition;\n         this.checkpointTime = checkpointMillis;\n         this.storeId = storeId;\n@@ -43,25 +44,25 @@ public class LogEntryDetachedCheckpoint extends AbstractLogEntry\n     }\n \n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n         LogEntryDetachedCheckpoint that = (LogEntryDetachedCheckpoint) o;\n-        return Objects.equals( logPosition, that.logPosition ) && Objects.equals( checkpointTime, that.checkpointTime ) &&\n-                Objects.equals( storeId, that.storeId ) && Objects.equals( reason, that.reason );\n+        return Objects.equals(logPosition, that.logPosition) && Objects.equals(checkpointTime, that.checkpointTime) &&\n+          Objects.equals(storeId, that.storeId) && Objects.equals(reason, that.reason);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash( logPosition, checkpointTime, storeId, reason );\n+        return Objects.hash(logPosition, checkpointTime, storeId, reason);\n     }\n \n     public StoreId getStoreId()\n@@ -78,6 +79,6 @@ public class LogEntryDetachedCheckpoint extends AbstractLogEntry\n     public String toString()\n     {\n         return \"LogEntryDetachedCheckpoint{\" + \"logPosition=\" + logPosition + \", checkpointTime=\" + checkpointTime + \", storeId=\" + storeId + \", reason='\" +\n-                reason + '\\'' + '}';\n+          reason + '\\'' + '}';\n     }\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3194/LogEntryDetachedCheckpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3194/LogEntryDetachedCheckpoint.java\nindex 219a78e098c..8f0e227edbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3194/LogEntryDetachedCheckpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3194/LogEntryDetachedCheckpoint.java\n@@ -80,4 +80,4 @@ public class LogEntryDetachedCheckpoint extends AbstractLogEntry\n         return \"LogEntryDetachedCheckpoint{\" + \"logPosition=\" + logPosition + \", checkpointTime=\" + checkpointTime + \", storeId=\" + storeId + \", reason='\" +\n                 reason + '\\'' + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}