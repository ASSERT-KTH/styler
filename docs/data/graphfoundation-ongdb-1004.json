{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1004",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "183",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "210",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "248",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "257",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "276",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "4",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1004/PriorityMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1004/PriorityMap.java\nindex 1bbf45c42b7..fb7212c8d63 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1004/PriorityMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1004/PriorityMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.Comparator;\n@@ -26,295 +27,292 @@ import java.util.PriorityQueue;\n \n public class PriorityMap<E, K, P>\n {\n-    public interface Converter<T, S>\n+  public interface Converter<T, S>\n+  {\n+    T convert(S source);\n+  }\n+\n+  public static final class Entry<E, P>\n+  {\n+    private final E entity;\n+    private final P priority;\n+\n+    private Entry(E entity, P priority)\n     {\n-        T convert( S source );\n+      this.entity = entity;\n+      this.priority = priority;\n     }\n \n-    public static final class Entry<E, P>\n+    Entry(Node<E, P> node)\n     {\n-        private final E entity;\n-        private final P priority;\n-\n-        private Entry( E entity, P priority )\n-        {\n-            this.entity = entity;\n-            this.priority = priority;\n-        }\n-\n-        Entry( Node<E, P> node )\n-        {\n-            this( node.head.entity, node.head.priority );\n-        }\n-\n-        public E getEntity()\n-        {\n-            return entity;\n-        }\n-\n-        public P getPriority()\n-        {\n-            return priority;\n-        }\n+      this(node.head.entity, node.head.priority);\n     }\n \n-    @SuppressWarnings( \"rawtypes\" )\n-    private static final Converter SELF_KEY = source -> source;\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <K, P> PriorityMap<K, K, P> withSelfKey(\n-            Comparator<P> priority )\n+    public E getEntity()\n     {\n-        return new PriorityMap<K, K, P>( SELF_KEY, priority, true );\n+      return entity;\n     }\n \n-    private static class NaturalPriority<P extends Comparable<P>> implements\n-            Comparator<P>\n+    public P getPriority()\n     {\n-        private final boolean reversed;\n+      return priority;\n+    }\n+  }\n \n-        NaturalPriority( boolean reversed )\n-        {\n-            this.reversed = reversed;\n-        }\n+  @SuppressWarnings(\"rawtypes\")\n+  private static final Converter SELF_KEY = source -> source;\n \n-        @Override\n-        public int compare( P o1, P o2 )\n-        {\n-            return reversed ? o2.compareTo( o1 ) : o1.compareTo( o2 );\n-        }\n-    }\n-    public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n-            Converter<K, E> key )\n-    {\n-        return PriorityMap.withNaturalOrder( key, false );\n-    }\n-    public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n-            Converter<K, E> key, boolean reversed )\n-    {\n-        return withNaturalOrder( key, reversed, true );\n-    }\n-    public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n-            Converter<K, E> key, boolean reversed, boolean onlyKeepBestPriorities )\n-    {\n-        Comparator<P> priority = new NaturalPriority<>( reversed );\n-        return new PriorityMap<>( key, priority, onlyKeepBestPriorities );\n-    }\n+  @SuppressWarnings(\"unchecked\")\n+  public static <K, P> PriorityMap<K, K, P> withSelfKey(\n+      Comparator<P> priority)\n+  {\n+    return new PriorityMap<K, K, P>(SELF_KEY, priority, true);\n+  }\n \n-    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder()\n-    {\n-        return PriorityMap.withSelfKeyNaturalOrder( false );\n-    }\n+  private static class NaturalPriority<P extends Comparable<P>> implements\n+      Comparator<P>\n+  {\n+    private final boolean reversed;\n \n-    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder(\n-            boolean reversed )\n+    NaturalPriority(boolean reversed)\n     {\n-        return PriorityMap.withSelfKeyNaturalOrder( reversed, true );\n+      this.reversed = reversed;\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder(\n-            boolean reversed, boolean onlyKeepBestPriorities )\n+    @Override\n+    public int compare(P o1, P o2)\n     {\n-        Comparator<P> priority = new NaturalPriority<>( reversed );\n-        return new PriorityMap<K, K, P>( SELF_KEY, priority, onlyKeepBestPriorities );\n+      return reversed ? o2.compareTo(o1) : o1.compareTo(o2);\n     }\n+  }\n \n-    private final Converter<K, E> keyFunction;\n-    private final Comparator<P> order;\n-    private final boolean onlyKeepBestPriorities;\n+  public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n+      Converter<K, E> key)\n+  {\n+    return PriorityMap.withNaturalOrder(key, false);\n+  }\n \n-    public PriorityMap( Converter<K, E> key, Comparator<P> priority, boolean onlyKeepBestPriorities )\n-    {\n-        this.keyFunction = key;\n-        this.order = priority;\n-        this.onlyKeepBestPriorities = onlyKeepBestPriorities;\n-    }\n+  public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n+      Converter<K, E> key, boolean reversed)\n+  {\n+    return withNaturalOrder(key, reversed, true);\n+  }\n \n-    /**\n-     * Add an entity to the priority map. If the key for the {@code entity}\n-     * was already found in the priority map and the priority is the same\n-     * the entity will be added. If the priority is lower the existing entities\n-     * for that key will be discarded.\n-     *\n-     * @param entity the entity to add.\n-     * @param priority the priority of the entity.\n-     * @return whether or not the entity (with its priority) was added to the\n-     * priority map. Will return {@code false} iff the key for the entity\n-     * already exist and its priority is better than the given\n-     * {@code priority}.\n-     */\n-    public boolean put( E entity, P priority )\n-    {\n-        K key = keyFunction.convert( entity );\n-        Node<E, P> node = map.get( key );\n-        boolean result = false;\n-        if ( node != null )\n-        {   // it already existed\n-            if ( onlyKeepBestPriorities )\n-            {\n-                if ( order.compare( priority, node.head.priority ) == 0 )\n-                {   // ...with same priority => add as a candidate first in chain\n-                    node.head = new Link<>( entity, priority, node.head );\n-                    result = true;\n-                }\n-                else if ( order.compare( priority, node.head.priority ) < 0 )\n-                {   // ...with lower (better) priority => this new one replaces any existing\n-                    queue.remove( node );\n-                    putNew( entity, priority, key );\n-                    result = true;\n-                }\n-            }\n-            else\n-            {   // put in the appropriate place in the node linked list\n-                if ( order.compare( priority, node.head.priority ) < 0 )\n-                {   // ...first in chain and re-insert to queue\n-                    node.head = new Link<>( entity, priority, node.head );\n-                    reinsert( node );\n-                    result = true;\n-                }\n-                else\n-                {   // we couldn't add it first in chain, go look for the appropriate place\n-                    Link<E,P> link = node.head;\n-                    Link<E,P> prev = link;\n-                    // skip the first one since we already compared head\n-                    link = link.next;\n-                    while ( link != null )\n-                    {\n-                        if ( order.compare( priority, link.priority ) <= 0 )\n-                        {   // here's our place, put it\n-                            // NODE ==> N ==> N ==> N\n-                            prev.next = new Link<>( entity, priority, link );\n-                            result = true;\n-                            break;\n-                        }\n-                        prev = link;\n-                        link = link.next;\n-                    }\n-                    if ( !result )\n-                    {   // not added so append last in the chain\n-                        prev.next = new Link<>( entity, priority, null );\n-                        result = true;\n-                    }\n-                }\n-            }\n+  public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n+      Converter<K, E> key, boolean reversed, boolean onlyKeepBestPriorities)\n+  {\n+    Comparator<P> priority = new NaturalPriority<>(reversed);\n+    return new PriorityMap<>(key, priority, onlyKeepBestPriorities);\n+  }\n+\n+  public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder()\n+  {\n+    return PriorityMap.withSelfKeyNaturalOrder(false);\n+  }\n+\n+  public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder(\n+      boolean reversed)\n+  {\n+    return PriorityMap.withSelfKeyNaturalOrder(reversed, true);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder(\n+      boolean reversed, boolean onlyKeepBestPriorities)\n+  {\n+    Comparator<P> priority = new NaturalPriority<>(reversed);\n+    return new PriorityMap<K, K, P>(SELF_KEY, priority, onlyKeepBestPriorities);\n+  }\n+\n+  private final Converter<K, E> keyFunction;\n+  private final Comparator<P> order;\n+  private final boolean onlyKeepBestPriorities;\n+\n+  public PriorityMap(Converter<K, E> key, Comparator<P> priority, boolean onlyKeepBestPriorities)\n+  {\n+    this.keyFunction = key;\n+    this.order = priority;\n+    this.onlyKeepBestPriorities = onlyKeepBestPriorities;\n+  }\n+\n+  /**\n+   * Add an entity to the priority map. If the key for the {@code entity}\n+   * was already found in the priority map and the priority is the same\n+   * the entity will be added. If the priority is lower the existing entities\n+   * for that key will be discarded.\n+   *\n+   * @param entity   the entity to add.\n+   * @param priority the priority of the entity.\n+   * @return whether or not the entity (with its priority) was added to the\n+   * priority map. Will return {@code false} iff the key for the entity\n+   * already exist and its priority is better than the given\n+   * {@code priority}.\n+   */\n+  public boolean put(E entity, P priority)\n+  {\n+    K key = keyFunction.convert(entity);\n+    Node<E, P> node = map.get(key);\n+    boolean result = false;\n+    if (node != null)\n+    {   // it already existed\n+      if (onlyKeepBestPriorities)\n+      {\n+        if (order.compare(priority, node.head.priority) == 0)\n+        {   // ...with same priority => add as a candidate first in chain\n+          node.head = new Link<>(entity, priority, node.head);\n+          result = true;\n+        } else if (order.compare(priority, node.head.priority) < 0)\n+        {   // ...with lower (better) priority => this new one replaces any existing\n+          queue.remove(node);\n+          putNew(entity, priority, key);\n+          result = true;\n         }\n-        else\n-        {   // Didn't exist, just put\n-            putNew( entity, priority, key );\n+      } else\n+      {   // put in the appropriate place in the node linked list\n+        if (order.compare(priority, node.head.priority) < 0)\n+        {   // ...first in chain and re-insert to queue\n+          node.head = new Link<>(entity, priority, node.head);\n+          reinsert(node);\n+          result = true;\n+        } else\n+        {   // we couldn't add it first in chain, go look for the appropriate place\n+          Link<E, P> link = node.head;\n+          Link<E, P> prev = link;\n+          // skip the first one since we already compared head\n+          link = link.next;\n+          while (link != null)\n+          {\n+            if (order.compare(priority, link.priority) <= 0)\n+            {   // here's our place, put it\n+              // NODE ==> N ==> N ==> N\n+              prev.next = new Link<>(entity, priority, link);\n+              result = true;\n+              break;\n+            }\n+            prev = link;\n+            link = link.next;\n+          }\n+          if (!result)\n+          {   // not added so append last in the chain\n+            prev.next = new Link<>(entity, priority, null);\n             result = true;\n+          }\n         }\n-        return result;\n+      }\n+    } else\n+    {   // Didn't exist, just put\n+      putNew(entity, priority, key);\n+      result = true;\n     }\n+    return result;\n+  }\n \n-    private void putNew( E entity, P priority, K key )\n-    {\n-        Node<E, P> node = new Node<>( new Link<>( entity, priority, null ) );\n-        map.put( key, node );\n-        queue.add( node );\n-    }\n+  private void putNew(E entity, P priority, K key)\n+  {\n+    Node<E, P> node = new Node<>(new Link<>(entity, priority, null));\n+    map.put(key, node);\n+    queue.add(node);\n+  }\n \n-    private void reinsert( Node<E,P> node )\n-    {\n-        queue.remove( node );\n-        queue.add( node );\n-    }\n+  private void reinsert(Node<E, P> node)\n+  {\n+    queue.remove(node);\n+    queue.add(node);\n+  }\n \n-    /**\n-     * Get the priority for the entity with the specified key.\n-     *\n-     * @param key the key.\n-     * @return the priority for the the entity with the specified key.\n-     */\n-    public P get( K key )\n-    {\n-        Node<E, P> node = map.get( key );\n-        return node != null ? node.head.priority : null;\n-    }\n+  /**\n+   * Get the priority for the entity with the specified key.\n+   *\n+   * @param key the key.\n+   * @return the priority for the the entity with the specified key.\n+   */\n+  public P get(K key)\n+  {\n+    Node<E, P> node = map.get(key);\n+    return node != null ? node.head.priority : null;\n+  }\n \n-    /**\n-     * Remove and return the entry with the highest priority.\n-     *\n-     * @return the entry with the highest priority.\n-     */\n-    public Entry<E, P> pop()\n+  /**\n+   * Remove and return the entry with the highest priority.\n+   *\n+   * @return the entry with the highest priority.\n+   */\n+  public Entry<E, P> pop()\n+  {\n+    Node<E, P> node = queue.peek();\n+    Entry<E, P> result = null;\n+    if (node == null)\n     {\n-        Node<E, P> node = queue.peek();\n-        Entry<E, P> result = null;\n-        if ( node == null )\n-        {\n-            // Queue is empty\n-            return null;\n-        }\n-        else if ( node.head.next == null )\n-        {\n-            // There are no more entries attached to this key\n-            // Poll from queue and remove from map.\n-            node = queue.poll();\n-            map.remove( keyFunction.convert( node.head.entity ) );\n-            result = new Entry<>( node );\n-        }\n-        else\n-        {\n-            result = new Entry<>( node );\n-            node.head = node.head.next;\n-            if ( order.compare( result.priority, node.head.priority ) == 0 )\n-            {\n-                // Can leave at front of queue as priority is the same\n-                // Do nothing\n-            }\n-            else\n-            {\n-                // node needs to be reinserted into queue\n-                reinsert( node );\n-            }\n+      // Queue is empty\n+      return null;\n+    } else if (node.head.next == null)\n+    {\n+      // There are no more entries attached to this key\n+      // Poll from queue and remove from map.\n+      node = queue.poll();\n+      map.remove(keyFunction.convert(node.head.entity));\n+      result = new Entry<>(node);\n+    } else\n+    {\n+      result = new Entry<>(node);\n+      node.head = node.head.next;\n+      if (order.compare(result.priority, node.head.priority) == 0)\n+      {\n+        // Can leave at front of queue as priority is the same\n+        // Do nothing\n+      } else\n+      {\n+        // node needs to be reinserted into queue\n+        reinsert(node);\n+      }\n \n-        }\n-        return result;\n     }\n+    return result;\n+  }\n \n-    public Entry<E, P> peek()\n+  public Entry<E, P> peek()\n+  {\n+    Node<E, P> node = queue.peek();\n+    if (node == null)\n     {\n-        Node<E, P> node = queue.peek();\n-        if ( node == null )\n-        {\n-            return null;\n-        }\n-        return new Entry<>( node );\n+      return null;\n     }\n+    return new Entry<>(node);\n+  }\n \n-    // Naive implementation\n+  // Naive implementation\n \n-    private final Map<K, Node<E, P>> map = new HashMap<>();\n-    private final PriorityQueue<Node<E, P>> queue = new PriorityQueue<>( 11, new Comparator<Node<E,P>>()\n+  private final Map<K, Node<E, P>> map = new HashMap<>();\n+  private final PriorityQueue<Node<E, P>> queue = new PriorityQueue<>(11, new Comparator<Node<E, P>>()\n+  {\n+    @Override\n+    public int compare(Node<E, P> o1, Node<E, P> o2)\n     {\n-        @Override\n-        public int compare( Node<E,P> o1, Node<E,P> o2 )\n-        {\n-            return order.compare( o1.head.priority, o2.head.priority );\n-        }\n-    } );\n+      return order.compare(o1.head.priority, o2.head.priority);\n+    }\n+  });\n \n-    private static class Node<E,P>\n-    {\n-        private Link<E,P> head;\n+  private static class Node<E, P>\n+  {\n+    private Link<E, P> head;\n \n-        Node( Link<E,P> head )\n-        {\n-            this.head = head;\n-        }\n+    Node(Link<E, P> head)\n+    {\n+      this.head = head;\n     }\n+  }\n+\n+  private static class Link<E, P>\n+  {\n+    private final E entity;\n+    private final P priority;\n+    private Link<E, P> next;\n \n-    private static class Link<E,P>\n+    Link(E entity, P priority, Link<E, P> next)\n     {\n-        private final E entity;\n-        private final P priority;\n-        private Link<E,P> next;\n-\n-        Link( E entity, P priority, Link<E,P> next )\n-        {\n-            this.entity = entity;\n-            this.priority = priority;\n-            this.next = next;\n-        }\n+      this.entity = entity;\n+      this.priority = priority;\n+      this.next = next;\n     }\n+  }\n }\n",
            "diff_size": 318
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1004/PriorityMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1004/PriorityMap.java\nindex 1bbf45c42b7..dded3ce9d20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1004/PriorityMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1004/PriorityMap.java\n@@ -42,7 +42,7 @@ public class PriorityMap<E, K, P>\n             this.priority = priority;\n         }\n \n-        Entry( Node<E, P> node )\n+        Entry( Node<E,P> node )\n         {\n             this( node.head.entity, node.head.priority );\n         }\n@@ -60,15 +60,14 @@ public class PriorityMap<E, K, P>\n \n     @SuppressWarnings( \"rawtypes\" )\n     private static final Converter SELF_KEY = source -> source;\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <K, P> PriorityMap<K, K, P> withSelfKey(\n-            Comparator<P> priority )\n+\n+@SuppressWarnings( \"unchecked\" )\n+    public static <K,P> PriorityMap<K, K, P> withSelfKey( Comparator<P> priority )\n     {\n         return new PriorityMap<K, K, P>( SELF_KEY, priority, true );\n     }\n \n-    private static class NaturalPriority<P extends Comparable<P>> implements\n-            Comparator<P>\n+    private static class NaturalPriority<P extends Comparable<P>> implements Comparator<P>\n     {\n         private final boolean reversed;\n \n@@ -83,18 +82,18 @@ public class PriorityMap<E, K, P>\n             return reversed ? o2.compareTo( o1 ) : o1.compareTo( o2 );\n         }\n     }\n-    public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n-            Converter<K, E> key )\n+\n+public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder( Converter<K,E> key )\n     {\n         return PriorityMap.withNaturalOrder( key, false );\n     }\n-    public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n-            Converter<K, E> key, boolean reversed )\n+\n+public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder( Converter<K,E> key, boolean reversed )\n     {\n         return withNaturalOrder( key, reversed, true );\n     }\n-    public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder(\n-            Converter<K, E> key, boolean reversed, boolean onlyKeepBestPriorities )\n+\n+public static <E, K, P extends Comparable<P>> PriorityMap<E, K, P> withNaturalOrder( Converter<K,E> key, boolean reversed, boolean onlyKeepBestPriorities )\n     {\n         Comparator<P> priority = new NaturalPriority<>( reversed );\n         return new PriorityMap<>( key, priority, onlyKeepBestPriorities );\n@@ -105,25 +104,23 @@ public class PriorityMap<E, K, P>\n         return PriorityMap.withSelfKeyNaturalOrder( false );\n     }\n \n-    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder(\n-            boolean reversed )\n+    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder( boolean reversed )\n     {\n         return PriorityMap.withSelfKeyNaturalOrder( reversed, true );\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n-    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder(\n-            boolean reversed, boolean onlyKeepBestPriorities )\n+    public static <K, P extends Comparable<P>> PriorityMap<K, K, P> withSelfKeyNaturalOrder( boolean reversed, boolean onlyKeepBestPriorities )\n     {\n         Comparator<P> priority = new NaturalPriority<>( reversed );\n         return new PriorityMap<K, K, P>( SELF_KEY, priority, onlyKeepBestPriorities );\n     }\n \n-    private final Converter<K, E> keyFunction;\n+    private final Converter<K,E> keyFunction;\n     private final Comparator<P> order;\n     private final boolean onlyKeepBestPriorities;\n \n-    public PriorityMap( Converter<K, E> key, Comparator<P> priority, boolean onlyKeepBestPriorities )\n+    public PriorityMap( Converter<K,E> key, Comparator<P> priority, boolean onlyKeepBestPriorities )\n     {\n         this.keyFunction = key;\n         this.order = priority;\n@@ -146,34 +143,40 @@ public class PriorityMap<E, K, P>\n     public boolean put( E entity, P priority )\n     {\n         K key = keyFunction.convert( entity );\n-        Node<E, P> node = map.get( key );\n+        Node<E,P> node = map.get( key );\n         boolean result = false;\n         if ( node != null )\n-        {   // it already existed\n+        {\n+    // it already existed\n             if ( onlyKeepBestPriorities )\n             {\n                 if ( order.compare( priority, node.head.priority ) == 0 )\n-                {   // ...with same priority => add as a candidate first in chain\n+                {\n+    // ...with same priority => add as a candidate first in chain\n                     node.head = new Link<>( entity, priority, node.head );\n                     result = true;\n                 }\n                 else if ( order.compare( priority, node.head.priority ) < 0 )\n-                {   // ...with lower (better) priority => this new one replaces any existing\n+                {\n+    // ...with lower (better) priority => this new one replaces any existing\n                     queue.remove( node );\n                     putNew( entity, priority, key );\n                     result = true;\n                 }\n             }\n             else\n-            {   // put in the appropriate place in the node linked list\n+            {\n+    // put in the appropriate place in the node linked list\n                 if ( order.compare( priority, node.head.priority ) < 0 )\n-                {   // ...first in chain and re-insert to queue\n+                {\n+    // ...first in chain and re-insert to queue\n                     node.head = new Link<>( entity, priority, node.head );\n                     reinsert( node );\n                     result = true;\n                 }\n                 else\n-                {   // we couldn't add it first in chain, go look for the appropriate place\n+                {\n+    // we couldn't add it first in chain, go look for the appropriate place\n                     Link<E,P> link = node.head;\n                     Link<E,P> prev = link;\n                     // skip the first one since we already compared head\n@@ -181,17 +184,21 @@ public class PriorityMap<E, K, P>\n                     while ( link != null )\n                     {\n                         if ( order.compare( priority, link.priority ) <= 0 )\n-                        {   // here's our place, put it\n+                        {\n+    // here's our place, put it\n                             // NODE ==> N ==> N ==> N\n                             prev.next = new Link<>( entity, priority, link );\n                             result = true;\n                             break;\n                         }\n-                        prev = link;\n+\n+prev = link;\n                         link = link.next;\n                     }\n-                    if ( !result )\n-                    {   // not added so append last in the chain\n+\n+if ( !result )\n+                    {\n+    // not added so append last in the chain\n                         prev.next = new Link<>( entity, priority, null );\n                         result = true;\n                     }\n@@ -199,16 +206,18 @@ public class PriorityMap<E, K, P>\n             }\n         }\n         else\n-        {   // Didn't exist, just put\n+        {\n+    // Didn't exist, just put\n             putNew( entity, priority, key );\n             result = true;\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private void putNew( E entity, P priority, K key )\n     {\n-        Node<E, P> node = new Node<>( new Link<>( entity, priority, null ) );\n+        Node<E,P> node = new Node<>( new Link<>( entity, priority, null ) );\n         map.put( key, node );\n         queue.add( node );\n     }\n@@ -227,7 +236,7 @@ public class PriorityMap<E, K, P>\n      */\n     public P get( K key )\n     {\n-        Node<E, P> node = map.get( key );\n+        Node<E,P> node = map.get( key );\n         return node != null ? node.head.priority : null;\n     }\n \n@@ -236,10 +245,10 @@ public class PriorityMap<E, K, P>\n      *\n      * @return the entry with the highest priority.\n      */\n-    public Entry<E, P> pop()\n+    public Entry<E,P> pop()\n     {\n-        Node<E, P> node = queue.peek();\n-        Entry<E, P> result = null;\n+        Node<E,P> node = queue.peek();\n+        Entry<E,P> result = null;\n         if ( node == null )\n         {\n             // Queue is empty\n@@ -267,14 +276,13 @@ public class PriorityMap<E, K, P>\n                 // node needs to be reinserted into queue\n                 reinsert( node );\n             }\n-\n-        }\n+    }\n         return result;\n     }\n \n-    public Entry<E, P> peek()\n+    public Entry<E,P> peek()\n     {\n-        Node<E, P> node = queue.peek();\n+        Node<E,P> node = queue.peek();\n         if ( node == null )\n         {\n             return null;\n@@ -317,4 +325,4 @@ public class PriorityMap<E, K, P>\n             this.next = next;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}