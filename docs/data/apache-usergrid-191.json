{
    "project_name": "apache-usergrid",
    "error_id": "191",
    "information": {
        "errors": [
            {
                "line": "58",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @param indexEdge The edge this entity is indexed on\n     */\n    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n\n\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler/191/EntityToMapConverter.java\nindex 1b0d1107800..c88810f38ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler/191/EntityToMapConverter.java\n@@ -55,7 +55,9 @@ public class EntityToMapConverter {\n      * @param entity The entity\n      * @param indexEdge The edge this entity is indexed on\n      */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n+    public static Map<String, Object\n+\n+> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n \n \n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/191/EntityToMapConverter.java\nindex 1b0d1107800..6d8b81326e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/191/EntityToMapConverter.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.index.impl;\n \n \n@@ -52,11 +53,11 @@ public class EntityToMapConverter {\n      * Set the entity as a map with the context\n      *\n      * @param applicationScope\n-     * @param entity The entity\n-     * @param indexEdge The edge this entity is indexed on\n+     * @param entity           The entity\n+     * @param indexEdge        The edge this entity is indexed on\n      */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n-\n+    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge,\n+                                              final Entity entity) {\n \n \n         final Map<String, Object> outputEntity = new HashMap<>();\n@@ -68,38 +69,38 @@ public class EntityToMapConverter {\n          * Add our static fields for easier admin/debugging/reporting\n          ****/\n \n-        outputEntity.put( ENTITY_ID_FIELDNAME, entityId( entityId ) );\n+        outputEntity.put(ENTITY_ID_FIELDNAME, entityId(entityId));\n \n-        outputEntity.put( ENTITY_VERSION_FIELDNAME, entity.getVersion() );\n+        outputEntity.put(ENTITY_VERSION_FIELDNAME, entity.getVersion());\n \n-        outputEntity.put( ENTITY_TYPE_FIELDNAME, getType( applicationScope, entityId));\n+        outputEntity.put(ENTITY_TYPE_FIELDNAME, getType(applicationScope, entityId));\n \n-        outputEntity.put( APPLICATION_ID_FIELDNAME, applicationId( applicationScope.getApplication() ) );\n+        outputEntity.put(APPLICATION_ID_FIELDNAME, applicationId(applicationScope.getApplication()));\n \n-        outputEntity.put( EDGE_NODE_ID_FIELDNAME, nodeId( indexEdge.getNodeId() ) );\n+        outputEntity.put(EDGE_NODE_ID_FIELDNAME, nodeId(indexEdge.getNodeId()));\n \n-        outputEntity.put( EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType() );\n+        outputEntity.put(EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType());\n \n-        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName()  );\n+        outputEntity.put(EDGE_NAME_FIELDNAME, indexEdge.getEdgeName());\n \n-        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp()  );\n+        outputEntity.put(EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp());\n \n-        outputEntity.put( ENTITY_SIZE_FIELDNAME, entity.getSize() );\n+        outputEntity.put(ENTITY_SIZE_FIELDNAME, entity.getSize());\n \n         //add the context for filtering later\n-        outputEntity.put( EDGE_SEARCH_FIELDNAME, IndexingUtils.createContextName( applicationScope, indexEdge ) );\n+        outputEntity.put(EDGE_SEARCH_FIELDNAME, IndexingUtils.createContextName(applicationScope, indexEdge));\n \n         //migrate the entity to map since we're ultimately going to use maps once we get rid of the Field objects\n-        final EntityMap entityMap = EntityMap.fromEntity( entity );\n+        final EntityMap entityMap = EntityMap.fromEntity(entity);\n \n         //now visit our entity\n         final FieldParser parser = new EntityMappingParser();\n \n-        final List<EntityField> fieldsToIndex =   parser.parse( entityMap );\n+        final List<EntityField> fieldsToIndex = parser.parse(entityMap);\n \n \n         //add our fields\n-        outputEntity.put( ENTITY_FIELDS, fieldsToIndex );\n+        outputEntity.put(ENTITY_FIELDS, fieldsToIndex);\n \n \n         return outputEntity;\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/191/EntityToMapConverter.java\nindex 1b0d1107800..d1220bf1e70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/191/EntityToMapConverter.java\n@@ -55,14 +55,9 @@ public class EntityToMapConverter {\n      * @param entity The entity\n      * @param indexEdge The edge this entity is indexed on\n      */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n-\n-\n-\n-        final Map<String, Object> outputEntity = new HashMap<>();\n-\n-\n-        final Id entityId = entity.getId();\n+    public static Map<String, Object> convert( ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity ) {\n+    final Map<String, Object> outputEntity = new HashMap<>();\n+final Id entityId = entity.getId();\n \n         /***\n          * Add our static fields for easier admin/debugging/reporting\n@@ -80,9 +75,9 @@ public class EntityToMapConverter {\n \n         outputEntity.put( EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType() );\n \n-        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName()  );\n+        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName() );\n \n-        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp()  );\n+        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp() );\n \n         outputEntity.put( ENTITY_SIZE_FIELDNAME, entity.getSize() );\n \n@@ -95,14 +90,13 @@ public class EntityToMapConverter {\n         //now visit our entity\n         final FieldParser parser = new EntityMappingParser();\n \n-        final List<EntityField> fieldsToIndex =   parser.parse( entityMap );\n-\n+        final List<EntityField> fieldsToIndex = parser.parse( entityMap );\n \n-        //add our fields\n+//add our fields\n         outputEntity.put( ENTITY_FIELDS, fieldsToIndex );\n \n \n         return outputEntity;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/191/EntityToMapConverter.java\nindex 1b0d1107800..2334d7ab338 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/191/EntityToMapConverter.java\n@@ -20,7 +20,6 @@ package org.apache.usergrid.persistence.index.impl;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.usergrid.persistence.core.scope.ApplicationScope;\n import org.apache.usergrid.persistence.index.IndexEdge;\n import org.apache.usergrid.persistence.model.entity.Entity;\n@@ -47,6 +46,8 @@ import static org.apache.usergrid.persistence.index.impl.IndexingUtils.nodeId;\n /**\n  * Convert a CP entity to an elasticsearch document\n  */\n+\n+\n public class EntityToMapConverter {\n     /**\n      * Set the entity as a map with the context\n@@ -55,35 +56,22 @@ public class EntityToMapConverter {\n      * @param entity The entity\n      * @param indexEdge The edge this entity is indexed on\n      */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n-\n-\n-\n-        final Map<String, Object> outputEntity = new HashMap<>();\n-\n \n+    public static Map<String, Object> convert( ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity ) {\n+        final Map<String, Object> outputEntity = new HashMap< >();\n         final Id entityId = entity.getId();\n \n         /***\n          * Add our static fields for easier admin/debugging/reporting\n          ****/\n-\n         outputEntity.put( ENTITY_ID_FIELDNAME, entityId( entityId ) );\n-\n         outputEntity.put( ENTITY_VERSION_FIELDNAME, entity.getVersion() );\n-\n-        outputEntity.put( ENTITY_TYPE_FIELDNAME, getType( applicationScope, entityId));\n-\n+        outputEntity.put( ENTITY_TYPE_FIELDNAME, getType( applicationScope, entityId ) );\n         outputEntity.put( APPLICATION_ID_FIELDNAME, applicationId( applicationScope.getApplication() ) );\n-\n         outputEntity.put( EDGE_NODE_ID_FIELDNAME, nodeId( indexEdge.getNodeId() ) );\n-\n         outputEntity.put( EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType() );\n-\n-        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName()  );\n-\n-        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp()  );\n-\n+        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName() );\n+        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp() );\n         outputEntity.put( ENTITY_SIZE_FIELDNAME, entity.getSize() );\n \n         //add the context for filtering later\n@@ -94,15 +82,11 @@ public class EntityToMapConverter {\n \n         //now visit our entity\n         final FieldParser parser = new EntityMappingParser();\n-\n-        final List<EntityField> fieldsToIndex =   parser.parse( entityMap );\n+        final List<EntityField> fieldsToIndex = parser.parse( entityMap );\n \n \n         //add our fields\n         outputEntity.put( ENTITY_FIELDS, fieldsToIndex );\n-\n-\n         return outputEntity;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/191/EntityToMapConverter.java\nindex 1b0d1107800..c88810f38ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/191/EntityToMapConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/191/EntityToMapConverter.java\n@@ -55,7 +55,9 @@ public class EntityToMapConverter {\n      * @param entity The entity\n      * @param indexEdge The edge this entity is indexed on\n      */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n+    public static Map<String, Object\n+\n+> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n \n \n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}