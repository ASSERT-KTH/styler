{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3709",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "138",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3709/Relationship.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3709/Relationship.java\nindex 6bb0cf86e01..09c0848f242 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3709/Relationship.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3709/Relationship.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n /**\n@@ -55,7 +56,7 @@ package org.neo4j.graphdb;\n  *        rel.{@link Relationship#getNodes() getNodes}()[1].equals( b );\n  * </code>\n  * </pre>\n- *\n+ * <p>\n  * Even though all relationships have a direction they are equally well\n  * traversed in both directions so there's no need to create duplicate\n  * relationships in the opposite direction (with regard to traversal or\n@@ -72,163 +73,163 @@ package org.neo4j.graphdb;\n  */\n public interface Relationship extends Entity\n {\n-    /**\n-     * Returns the unique id of this relationship. Ids are garbage collected\n-     * over time so they are only guaranteed to be unique during a specific time\n-     * span: if the relationship is deleted, it's likely that a new relationship\n-     * at some point will get the old id. <b>Note</b>: This makes relationship\n-     * ids brittle as public APIs.\n-     *\n-     * @return The id of this relationship\n-     */\n-    @Override\n-    long getId();\n+  /**\n+   * Returns the unique id of this relationship. Ids are garbage collected\n+   * over time so they are only guaranteed to be unique during a specific time\n+   * span: if the relationship is deleted, it's likely that a new relationship\n+   * at some point will get the old id. <b>Note</b>: This makes relationship\n+   * ids brittle as public APIs.\n+   *\n+   * @return The id of this relationship\n+   */\n+  @Override\n+  long getId();\n \n-    /**\n-     * Deletes this relationship. Invoking any methods on this relationship\n-     * after <code>delete()</code> has returned is invalid and will lead to\n-     * {@link NotFoundException} being thrown.\n-     */\n-     void delete();\n+  /**\n+   * Deletes this relationship. Invoking any methods on this relationship\n+   * after <code>delete()</code> has returned is invalid and will lead to\n+   * {@link NotFoundException} being thrown.\n+   */\n+  void delete();\n \n-    // Node accessors\n-    /**\n-     * Returns the start node of this relationship. For a definition of how\n-     * start node relates to {@link Direction directions} as arguments to the\n-     * {@link Node#getRelationships() relationship accessors} in Node, see the\n-     * class documentation of Relationship.\n-     *\n-     * @return the start node of this relationship\n-     */\n-    Node getStartNode();\n+  // Node accessors\n \n-    /**\n-     * Returns the end node of this relationship. For a definition of how end\n-     * node relates to {@link Direction directions} as arguments to the\n-     * {@link Node#getRelationships() relationship accessors} in Node, see the\n-     * class documentation of Relationship.\n-     *\n-     * @return the end node of this relationship\n-     */\n-    Node getEndNode();\n+  /**\n+   * Returns the start node of this relationship. For a definition of how\n+   * start node relates to {@link Direction directions} as arguments to the\n+   * {@link Node#getRelationships() relationship accessors} in Node, see the\n+   * class documentation of Relationship.\n+   *\n+   * @return the start node of this relationship\n+   */\n+  Node getStartNode();\n \n-    /**\n-     * A convenience operation that, given a node that is attached to this\n-     * relationship, returns the other node. For example if <code>node</code> is\n-     * a start node, the end node will be returned, and vice versa. This is a\n-     * very convenient operation when you're manually traversing the graph\n-     * by invoking one of the {@link Node#getRelationships() getRelationships()}\n-     * operations on a node. For example, to get the node \"at the other end\" of\n-     * a relationship, use the following:\n-     * <p>\n-     * <code>\n-     * Node endNode = node.getSingleRelationship( MyRels.REL_TYPE ).getOtherNode( node );\n-     * </code>\n-     * <p>\n-     * This operation will throw a runtime exception if <code>node</code> is\n-     * neither this relationship's start node nor its end node.\n-     *\n-     * @param node the start or end node of this relationship\n-     * @return the other node\n-     * @throws RuntimeException if the given node is neither the start nor end\n-     *             node of this relationship\n-     */\n-    Node getOtherNode( Node node );\n+  /**\n+   * Returns the end node of this relationship. For a definition of how end\n+   * node relates to {@link Direction directions} as arguments to the\n+   * {@link Node#getRelationships() relationship accessors} in Node, see the\n+   * class documentation of Relationship.\n+   *\n+   * @return the end node of this relationship\n+   */\n+  Node getEndNode();\n \n-    /**\n-     * Returns the two nodes that are attached to this relationship. The first\n-     * element in the array will be the start node, the second element the end\n-     * node.\n-     *\n-     * @return the two nodes that are attached to this relationship\n-     */\n-    Node[] getNodes();\n+  /**\n+   * A convenience operation that, given a node that is attached to this\n+   * relationship, returns the other node. For example if <code>node</code> is\n+   * a start node, the end node will be returned, and vice versa. This is a\n+   * very convenient operation when you're manually traversing the graph\n+   * by invoking one of the {@link Node#getRelationships() getRelationships()}\n+   * operations on a node. For example, to get the node \"at the other end\" of\n+   * a relationship, use the following:\n+   * <p>\n+   * <code>\n+   * Node endNode = node.getSingleRelationship( MyRels.REL_TYPE ).getOtherNode( node );\n+   * </code>\n+   * <p>\n+   * This operation will throw a runtime exception if <code>node</code> is\n+   * neither this relationship's start node nor its end node.\n+   *\n+   * @param node the start or end node of this relationship\n+   * @return the other node\n+   * @throws RuntimeException if the given node is neither the start nor end\n+   *                          node of this relationship\n+   */\n+  Node getOtherNode(Node node);\n \n-    /**\n-     * Returns the type of this relationship. A relationship's type is an\n-     * immutable attribute that is specified at Relationship\n-     * {@link Node#createRelationshipTo creation}. Remember that relationship\n-     * types are semantically equivalent if their\n-     * {@link RelationshipType#name() names} are {@link Object#equals(Object)\n-     * equal}. This is NOT the same as checking for identity equality using the\n-     * == operator. If you want to know whether this relationship is of a\n-     * certain type, use the {@link #isType(RelationshipType) isType()}\n-     * operation.\n-     *\n-     * @return the type of this relationship\n-     */\n-    RelationshipType getType();\n+  /**\n+   * Returns the two nodes that are attached to this relationship. The first\n+   * element in the array will be the start node, the second element the end\n+   * node.\n+   *\n+   * @return the two nodes that are attached to this relationship\n+   */\n+  Node[] getNodes();\n \n-    /**\n-     * Indicates whether this relationship is of the type <code>type</code>.\n-     * This is a convenience method that checks for equality using the contract\n-     * specified by RelationshipType, i.e. by checking for equal\n-     * {@link RelationshipType#name() names}.\n-     *\n-     * @param type the type to check\n-     * @return <code>true</code> if this relationship is of the type\n-     *         <code>type</code>, <code>false</code> otherwise or if\n-     *         <code>null</code>\n-     */\n-    boolean isType( RelationshipType type );\n+  /**\n+   * Returns the type of this relationship. A relationship's type is an\n+   * immutable attribute that is specified at Relationship\n+   * {@link Node#createRelationshipTo creation}. Remember that relationship\n+   * types are semantically equivalent if their\n+   * {@link RelationshipType#name() names} are {@link Object#equals(Object)\n+   * equal}. This is NOT the same as checking for identity equality using the\n+   * == operator. If you want to know whether this relationship is of a\n+   * certain type, use the {@link #isType(RelationshipType) isType()}\n+   * operation.\n+   *\n+   * @return the type of this relationship\n+   */\n+  RelationshipType getType();\n \n-    /**\n-     * Returns the id of the start node of this relationship. For a definition of how\n-     * start node relates to {@link Direction directions} as arguments to the\n-     * {@link Node#getRelationships() relationship accessors} in Node, see the\n-     * class documentation of Relationship.\n-     * <p>\n-     * Note that this id can get reused in the future, if this relationship and the given node are deleted.\n-     *\n-     * @return the id of the start node of this relationship.\n-     */\n-    default long getStartNodeId()\n-    {\n-        return getStartNode().getId();\n-    }\n+  /**\n+   * Indicates whether this relationship is of the type <code>type</code>.\n+   * This is a convenience method that checks for equality using the contract\n+   * specified by RelationshipType, i.e. by checking for equal\n+   * {@link RelationshipType#name() names}.\n+   *\n+   * @param type the type to check\n+   * @return <code>true</code> if this relationship is of the type\n+   * <code>type</code>, <code>false</code> otherwise or if\n+   * <code>null</code>\n+   */\n+  boolean isType(RelationshipType type);\n \n-    /**\n-     * Returns the id of the end node of this relationship. For a definition of how end\n-     * node relates to {@link Direction directions} as arguments to the\n-     * {@link Node#getRelationships() relationship accessors} in Node, see the\n-     * class documentation of Relationship.\n-     * <p>\n-     * Note that this id can get reused in the future, if this relationship and the given node are deleted.\n-     *\n-     * @return the id of the end node of this relationship.\n-     */\n-    default long getEndNodeId()\n-    {\n-        return getEndNode().getId();\n-    }\n+  /**\n+   * Returns the id of the start node of this relationship. For a definition of how\n+   * start node relates to {@link Direction directions} as arguments to the\n+   * {@link Node#getRelationships() relationship accessors} in Node, see the\n+   * class documentation of Relationship.\n+   * <p>\n+   * Note that this id can get reused in the future, if this relationship and the given node are deleted.\n+   *\n+   * @return the id of the start node of this relationship.\n+   */\n+  default long getStartNodeId()\n+  {\n+    return getStartNode().getId();\n+  }\n \n-    /**\n-     * A convenience operation that, given an id of a node that is attached to this\n-     * relationship, returns the id of the other node. For example if <code>id</code> is\n-     * the start node id, the end node id will be returned, and vice versa.\n-     * <p>\n-     * This operation will throw a runtime exception if <code>id</code> is\n-     * not the id of either of this relationship's nodes.\n-     * <p>\n-     * Note that this id can get reused in the future, if this relationship and the given node are deleted.\n-     *\n-     * @param id the id of the start or end node of this relationship\n-     * @return the id of the other node\n-     * @throws RuntimeException if the given node id is not the id of either the start or end\n-     *             node of this relationship.\n-     */\n-    default long getOtherNodeId( long id )\n+  /**\n+   * Returns the id of the end node of this relationship. For a definition of how end\n+   * node relates to {@link Direction directions} as arguments to the\n+   * {@link Node#getRelationships() relationship accessors} in Node, see the\n+   * class documentation of Relationship.\n+   * <p>\n+   * Note that this id can get reused in the future, if this relationship and the given node are deleted.\n+   *\n+   * @return the id of the end node of this relationship.\n+   */\n+  default long getEndNodeId()\n+  {\n+    return getEndNode().getId();\n+  }\n+\n+  /**\n+   * A convenience operation that, given an id of a node that is attached to this\n+   * relationship, returns the id of the other node. For example if <code>id</code> is\n+   * the start node id, the end node id will be returned, and vice versa.\n+   * <p>\n+   * This operation will throw a runtime exception if <code>id</code> is\n+   * not the id of either of this relationship's nodes.\n+   * <p>\n+   * Note that this id can get reused in the future, if this relationship and the given node are deleted.\n+   *\n+   * @param id the id of the start or end node of this relationship\n+   * @return the id of the other node\n+   * @throws RuntimeException if the given node id is not the id of either the start or end\n+   *                          node of this relationship.\n+   */\n+  default long getOtherNodeId(long id)\n+  {\n+    long start = getStartNodeId();\n+    long end = getEndNodeId();\n+    if (id == start)\n+    {\n+      return end;\n+    } else if (id == end)\n     {\n-        long start = getStartNodeId();\n-        long end = getEndNodeId();\n-        if ( id == start )\n-        {\n-            return end;\n-        }\n-        else if ( id == end )\n-        {\n-            return start;\n-        }\n-        throw new NotFoundException( \"Node[\" + id + \"] not connected to this relationship[\" + getId() + \"]\" );\n+      return start;\n     }\n+    throw new NotFoundException(\"Node[\" + id + \"] not connected to this relationship[\" + getId() + \"]\");\n+  }\n }\n",
            "diff_size": 189
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3709/Relationship.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3709/Relationship.java\nindex 6bb0cf86e01..90637d1a184 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3709/Relationship.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3709/Relationship.java\n@@ -88,9 +88,7 @@ public interface Relationship extends Entity\n      * Deletes this relationship. Invoking any methods on this relationship\n      * after <code>delete()</code> has returned is invalid and will lead to\n      * {@link NotFoundException} being thrown.\n-     */\n-     void delete();\n-\n+     */ void delete();\n     // Node accessors\n     /**\n      * Returns the start node of this relationship. For a definition of how\n@@ -231,4 +229,4 @@ public interface Relationship extends Entity\n         }\n         throw new NotFoundException( \"Node[\" + id + \"] not connected to this relationship[\" + getId() + \"]\" );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}