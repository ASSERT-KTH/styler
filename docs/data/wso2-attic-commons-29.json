{
    "project_name": "wso2-attic-commons",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "48",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "import jsf2.demo.scrum.web.controller.SprintManager;\n\npublic class SprintNameUniquenessConstraintValidator implements ConstraintValidator<SprintNameUniquenessConstraint, String> {\n\n    public boolean isValid(String value, ConstraintValidatorContext ctx) {\n        ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/29/SprintNameUniquenessConstraintValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/29/SprintNameUniquenessConstraintValidator.java\nindex a6d21c38e38..ddb25c53bd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/29/SprintNameUniquenessConstraintValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/29/SprintNameUniquenessConstraintValidator.java\n@@ -45,29 +45,30 @@ import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import jsf2.demo.scrum.web.controller.SprintManager;\n \n-public class SprintNameUniquenessConstraintValidator implements ConstraintValidator<SprintNameUniquenessConstraint, String> {\n+public class SprintNameUniquenessConstraintValidator\n+  implements ConstraintValidator<SprintNameUniquenessConstraint, String> {\n \n-    public boolean isValid(String value, ConstraintValidatorContext ctx) {\n-        \n-        FacesContext context = FacesContext.getCurrentInstance();\n-        SprintManager sprintManager = (SprintManager)\n-                context.getApplication().evaluateExpressionGet(context, \n-                \"#{sprintManager}\", SprintManager.class);\n-        boolean result = true;\n-        String message = sprintManager.\n-                checkUniqueSprintNameApplicationValidatorMethod(value);\n-        if (message != null) {\n-            result = false;\n-        ConstraintValidatorContext.ConstraintViolationBuilder builder =\n-        ctx.buildConstraintViolationWithTemplate(message);\n-        builder.addConstraintViolation();\n-        }\n+  public boolean isValid(String value, ConstraintValidatorContext ctx) {\n \n-        \n-        return result;\n+    FacesContext context = FacesContext.getCurrentInstance();\n+    SprintManager sprintManager = (SprintManager)\n+      context.getApplication().evaluateExpressionGet(context,\n+        \"#{sprintManager}\", SprintManager.class);\n+    boolean result = true;\n+    String message = sprintManager.\n+      checkUniqueSprintNameApplicationValidatorMethod(value);\n+    if (message != null) {\n+      result = false;\n+      ConstraintValidatorContext.ConstraintViolationBuilder builder =\n+        ctx.buildConstraintViolationWithTemplate(message);\n+      builder.addConstraintViolation();\n     }\n \n-    public void initialize(SprintNameUniquenessConstraint arg0) {\n-    }\n-    \n+\n+    return result;\n+  }\n+\n+  public void initialize(SprintNameUniquenessConstraint arg0) {\n+  }\n+\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/29/SprintNameUniquenessConstraintValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/29/SprintNameUniquenessConstraintValidator.java\nindex a6d21c38e38..573a296948c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/29/SprintNameUniquenessConstraintValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/29/SprintNameUniquenessConstraintValidator.java\n@@ -53,21 +53,18 @@ public class SprintNameUniquenessConstraintValidator implements ConstraintValida\n         SprintManager sprintManager = (SprintManager)\n                 context.getApplication().evaluateExpressionGet(context, \n                 \"#{sprintManager}\", SprintManager.class);\n-        boolean result = true;\n+boolean result = true;\n         String message = sprintManager.\n                 checkUniqueSprintNameApplicationValidatorMethod(value);\n         if (message != null) {\n             result = false;\n-        ConstraintValidatorContext.ConstraintViolationBuilder builder =\n-        ctx.buildConstraintViolationWithTemplate(message);\n+        ConstraintValidatorContext.ConstraintViolationBuilder builder = ctx.buildConstraintViolationWithTemplate(message);\n         builder.addConstraintViolation();\n         }\n-\n-        \n-        return result;\n+    return result;\n     }\n \n     public void initialize(SprintNameUniquenessConstraint arg0) {\n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}