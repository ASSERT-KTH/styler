{
    "project_name": "opencb-opencga",
    "error_id": "389",
    "information": {
        "errors": [
            {
                "line": "199",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        if (moi != null && (moi == DE_NOVO || moi == COMPOUND_HETEROZYGOUS)) {\n            if (moi == DE_NOVO) {\n                List<Variant> deNovoVariants = clinicalInterpretationManager.getDeNovoVariants(clinicalAnalysisId, studyId, query, sessionId);\n                reportedVariants = creator.create(deNovoVariants);\n            } else {\n                Map<String, List<Variant>> chVariants = clinicalInterpretationManager.getCompoundHeterozigousVariants(clinicalAnalysisId,",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/389/TeamInterpretationAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/389/TeamInterpretationAnalysis.java\nindex e8276af4543..1c8d6dcf331 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/389/TeamInterpretationAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/389/TeamInterpretationAnalysis.java\n@@ -53,159 +53,159 @@ import static org.opencb.biodata.tools.pedigree.ModeOfInheritance.proteinCoding;\n \n public class TeamInterpretationAnalysis extends FamilyInterpretationAnalysis {\n \n-    private ModeOfInheritance moi;\n-\n-    public TeamInterpretationAnalysis(String clinicalAnalysisId, String studyId, List<String> diseasePanelIds, ModeOfInheritance moi,\n-                                      ObjectMap options, String opencgaHome, String sessionId) {\n-        super(clinicalAnalysisId, studyId, diseasePanelIds, options, opencgaHome, sessionId);\n-        this.moi = moi;\n-    }\n-\n-    @Override\n-    protected void exec() throws AnalysisException {\n+  private ModeOfInheritance moi;\n+\n+  public TeamInterpretationAnalysis(String clinicalAnalysisId, String studyId, List<String> diseasePanelIds, ModeOfInheritance moi,\n+                                    ObjectMap options, String opencgaHome, String sessionId) {\n+    super(clinicalAnalysisId, studyId, diseasePanelIds, options, opencgaHome, sessionId);\n+    this.moi = moi;\n+  }\n+\n+  @Override\n+  protected void exec() throws AnalysisException {\n+  }\n+\n+  public InterpretationResult compute() throws Exception {\n+    StopWatch watcher = StopWatch.createStarted();\n+\n+    List<ReportedVariant> primaryFindings;\n+\n+    // Get and check clinical analysis and proband\n+    ClinicalAnalysis clinicalAnalysis = ClinicalUtils.getClinicalAnalysis(studyId, clinicalAnalysisId, catalogManager, sessionId);\n+    Individual proband = ClinicalUtils.getProband(clinicalAnalysis);\n+\n+    // Disease panels management\n+    List<DiseasePanel> biodataDiseasePanels = null;\n+    List<DiseasePanel> diseasePanels = ClinicalUtils.getDiseasePanelsFromIds(diseasePanelIds, studyId, catalogManager, sessionId);\n+\n+    // Get sample names and update proband information (to be able to navigate to the parents and their samples easily)\n+    List<String> sampleList = ClinicalUtils.getSampleNames(clinicalAnalysis, proband);\n+\n+    // Reported variant creator\n+    TeamReportedVariantCreator creator = new TeamReportedVariantCreator(biodataDiseasePanels,\n+        clinicalInterpretationManager.getRoleInCancerManager().getRoleInCancer(),\n+        clinicalInterpretationManager.getActionableVariantManager().getActionableVariants(\n+            ClinicalUtils.getAssembly(catalogManager, studyId, sessionId)),\n+        clinicalAnalysis.getDisorder(), null, Penetrance.COMPLETE);\n+\n+    // Step 1 - diagnostic variants\n+    // Get diagnostic variants from panels\n+    List<VariantPanel> diagnosticVariants = new ArrayList<>();\n+    for (DiseasePanel diseasePanel : diseasePanels) {\n+      if (diseasePanel != null && CollectionUtils.isNotEmpty(diseasePanel.getVariants())) {\n+        diagnosticVariants.addAll(diseasePanel.getVariants());\n+      }\n     }\n \n-    public InterpretationResult compute() throws Exception {\n-        StopWatch watcher = StopWatch.createStarted();\n-\n-        List<ReportedVariant> primaryFindings;\n-\n-        // Get and check clinical analysis and proband\n-        ClinicalAnalysis clinicalAnalysis = ClinicalUtils.getClinicalAnalysis(studyId, clinicalAnalysisId, catalogManager, sessionId);\n-        Individual proband = ClinicalUtils.getProband(clinicalAnalysis);\n-\n-        // Disease panels management\n-        List<DiseasePanel> biodataDiseasePanels = null;\n-        List<DiseasePanel> diseasePanels = ClinicalUtils.getDiseasePanelsFromIds(diseasePanelIds, studyId, catalogManager, sessionId);\n-\n-        // Get sample names and update proband information (to be able to navigate to the parents and their samples easily)\n-        List<String> sampleList = ClinicalUtils.getSampleNames(clinicalAnalysis, proband);\n-\n-        // Reported variant creator\n-        TeamReportedVariantCreator creator = new TeamReportedVariantCreator(biodataDiseasePanels,\n-                clinicalInterpretationManager.getRoleInCancerManager().getRoleInCancer(),\n-                clinicalInterpretationManager.getActionableVariantManager().getActionableVariants(\n-                        ClinicalUtils.getAssembly(catalogManager, studyId, sessionId)),\n-                clinicalAnalysis.getDisorder(), null, Penetrance.COMPLETE);\n-\n-        // Step 1 - diagnostic variants\n-        // Get diagnostic variants from panels\n-        List<VariantPanel> diagnosticVariants = new ArrayList<>();\n-        for (DiseasePanel diseasePanel : diseasePanels) {\n-            if (diseasePanel != null && CollectionUtils.isNotEmpty(diseasePanel.getVariants())) {\n-                diagnosticVariants.addAll(diseasePanel.getVariants());\n-            }\n-        }\n-\n-        // ...and then query\n-        Query query = new Query();\n-        QueryOptions queryOptions = QueryOptions.empty();\n-        query.put(VariantQueryParam.STUDY.key(), studyId);\n-        query.put(VariantQueryParam.ID.key(), StringUtils.join(diagnosticVariants.stream()\n-                .map(VariantPanel::getId).collect(Collectors.toList()), \",\"));\n-        query.put(VariantQueryParam.SAMPLE.key(), StringUtils.join(sampleList, \",\"));\n+    // ...and then query\n+    Query query = new Query();\n+    QueryOptions queryOptions = QueryOptions.empty();\n+    query.put(VariantQueryParam.STUDY.key(), studyId);\n+    query.put(VariantQueryParam.ID.key(), StringUtils.join(diagnosticVariants.stream()\n+        .map(VariantPanel::getId).collect(Collectors.toList()), \",\"));\n+    query.put(VariantQueryParam.SAMPLE.key(), StringUtils.join(sampleList, \",\"));\n+\n+    primaryFindings = getReportedVariants(query, queryOptions, creator);\n+\n+    if (CollectionUtils.isEmpty(primaryFindings)) {\n+      // Step 2 - VUS variants from genes in panels\n+      List<String> geneIds = getGeneIdsFromDiseasePanels(diseasePanels);\n+      // Remove variant IDs from the query, and set gene IDs\n+      query.remove(VariantQueryParam.ID.key());\n+      query.put(VariantQueryParam.GENE.key(), StringUtils.join(geneIds, \",\"));\n+\n+      // VUS filter\n+      //\n+      //   Pop. frequncy:\n+      //     1kG_phase3:EUR<0.01\n+      //     1kG_phase3:IBS<0.01\n+      //     EXAC/gnomAD < 0.01 (ALL ??, GNOMAD_GENOMES and/or GNOMAD_EXOMES ??)\n+      //     MGP< 0.01, (ALL ?)\n+      //   Conservation:\n+      //     GERP > 2\n+      //   SO (consequence type)\n+      //     if (SO: Loss of Function)\n+      //       ScaledCADD > 15\n+      //     else if (biotype: Protein Coding)\n+      //       SIFT < 0.05\n+      //       Polyphen2 > 0.91\n+      //       ScaledCADD > 15\n+\n+      query.put(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key(), lof);\n+\n+      query.put(VariantQueryParam.ANNOT_POPULATION_ALTERNATE_FREQUENCY.key(), \"1kG_phase3:EUR<0.01\"\n+          + VariantQueryUtils.OR + \"1kG_phase3:IBS<0.01\"\n+          + VariantQueryUtils.OR + \"EXAC:ALL<0.01\"\n+          + VariantQueryUtils.OR + \"GNOMAD_GENOMES:ALL<0.01\"\n+          + VariantQueryUtils.OR + \"GNOMAD_EXOMES:ALL<0.01\"\n+          + VariantQueryUtils.OR + \"MGP:ALL<0.01\");\n+      query.put(VariantQueryParam.ANNOT_CONSERVATION.key(), \"gerp>2\");\n+      query.put(VariantQueryParam.ANNOT_FUNCTIONAL_SCORE.key(), \"scaled_cadd>15\");\n+\n+      primaryFindings = getReportedVariants(query, queryOptions, creator);\n+\n+      if (CollectionUtils.isEmpty(primaryFindings)) {\n+        // No loss of function variants, then try with protein_coding and protein substitution scores\n+        query.remove(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key());\n+        query.put(VariantQueryParam.ANNOT_BIOTYPE.key(), proteinCoding);\n+        query.put(VariantQueryParam.ANNOT_PROTEIN_SUBSTITUTION.key(), \"sift<0.05\" + VariantQueryUtils.AND + \"polyphen>0.91\");\n \n         primaryFindings = getReportedVariants(query, queryOptions, creator);\n+      }\n+    }\n+\n+    // Step 3: secondary findings, if clinical consent is TRUE\n+    List<ReportedVariant> secondaryFindings = clinicalInterpretationManager.getSecondaryFindings(clinicalAnalysis, sampleList, studyId,\n+        creator, sessionId);\n \n-        if (CollectionUtils.isEmpty(primaryFindings)) {\n-            // Step 2 - VUS variants from genes in panels\n-            List<String> geneIds = getGeneIdsFromDiseasePanels(diseasePanels);\n-            // Remove variant IDs from the query, and set gene IDs\n-            query.remove(VariantQueryParam.ID.key());\n-            query.put(VariantQueryParam.GENE.key(), StringUtils.join(geneIds, \",\"));\n-\n-            // VUS filter\n-            //\n-            //   Pop. frequncy:\n-            //     1kG_phase3:EUR<0.01\n-            //     1kG_phase3:IBS<0.01\n-            //     EXAC/gnomAD < 0.01 (ALL ??, GNOMAD_GENOMES and/or GNOMAD_EXOMES ??)\n-            //     MGP< 0.01, (ALL ?)\n-            //   Conservation:\n-            //     GERP > 2\n-            //   SO (consequence type)\n-            //     if (SO: Loss of Function)\n-            //       ScaledCADD > 15\n-            //     else if (biotype: Protein Coding)\n-            //       SIFT < 0.05\n-            //       Polyphen2 > 0.91\n-            //       ScaledCADD > 15\n-\n-            query.put(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key(), lof);\n-\n-            query.put(VariantQueryParam.ANNOT_POPULATION_ALTERNATE_FREQUENCY.key(), \"1kG_phase3:EUR<0.01\"\n-                    + VariantQueryUtils.OR + \"1kG_phase3:IBS<0.01\"\n-                    + VariantQueryUtils.OR + \"EXAC:ALL<0.01\"\n-                    + VariantQueryUtils.OR + \"GNOMAD_GENOMES:ALL<0.01\"\n-                    + VariantQueryUtils.OR + \"GNOMAD_EXOMES:ALL<0.01\"\n-                    + VariantQueryUtils.OR + \"MGP:ALL<0.01\");\n-            query.put(VariantQueryParam.ANNOT_CONSERVATION.key(), \"gerp>2\");\n-            query.put(VariantQueryParam.ANNOT_FUNCTIONAL_SCORE.key(), \"scaled_cadd>15\");\n-\n-            primaryFindings = getReportedVariants(query, queryOptions, creator);\n-\n-            if (CollectionUtils.isEmpty(primaryFindings)) {\n-                // No loss of function variants, then try with protein_coding and protein substitution scores\n-                query.remove(VariantQueryParam.ANNOT_CONSEQUENCE_TYPE.key());\n-                query.put(VariantQueryParam.ANNOT_BIOTYPE.key(), proteinCoding);\n-                query.put(VariantQueryParam.ANNOT_PROTEIN_SUBSTITUTION.key(), \"sift<0.05\" + VariantQueryUtils.AND + \"polyphen>0.91\");\n-\n-                primaryFindings = getReportedVariants(query, queryOptions, creator);\n-            }\n-        }\n-\n-        // Step 3: secondary findings, if clinical consent is TRUE\n-        List<ReportedVariant> secondaryFindings = clinicalInterpretationManager.getSecondaryFindings(clinicalAnalysis, sampleList, studyId,\n-                creator, sessionId);\n-\n-        // Reported low coverages management\n-        List<ReportedLowCoverage> reportedLowCoverages = null;\n-        if (options.getBoolean(ClinicalUtils.INCLUDE_LOW_COVERAGE_PARAM, false)) {\n-            reportedLowCoverages = clinicalInterpretationManager.getReportedLowCoverage(clinicalAnalysis, diseasePanels, studyId,\n-                    sessionId);\n-        }\n-\n-\n-        // Create Interpretation\n-        Interpretation interpretation = new Interpretation()\n-                .setId(\"OpenCGA-TEAM-\" + TimeUtils.getTime())\n-                .setAnalyst(getAnalyst(sessionId))\n-                .setClinicalAnalysisId(clinicalAnalysisId)\n-                .setCreationDate(TimeUtils.getTime())\n-                .setPanels(biodataDiseasePanels)\n-                .setFilters(null) //TODO\n-                .setSoftware(new Software().setName(\"TEAM\"))\n-                .setPrimaryFindings(primaryFindings)\n-                .setSecondaryFindings(secondaryFindings)\n-                .setLowCoverageRegions(reportedLowCoverages);\n-\n-        // Return interpretation result\n-        int numResults = CollectionUtils.isEmpty(primaryFindings) ? 0 : primaryFindings.size();\n-        return new InterpretationResult(\n-                interpretation,\n-                Math.toIntExact(watcher.getTime()),\n-                new HashMap<>(),\n-                Math.toIntExact(watcher.getTime()), // DB time\n-                numResults,\n-                numResults,\n-                \"\", // warning message\n-                \"\"); // error message\n+    // Reported low coverages management\n+    List<ReportedLowCoverage> reportedLowCoverages = null;\n+    if (options.getBoolean(ClinicalUtils.INCLUDE_LOW_COVERAGE_PARAM, false)) {\n+      reportedLowCoverages = clinicalInterpretationManager.getReportedLowCoverage(clinicalAnalysis, diseasePanels, studyId,\n+          sessionId);\n     }\n \n-    List<ReportedVariant> getReportedVariants(Query query, QueryOptions queryOptions, TeamReportedVariantCreator creator) throws Exception {\n-        List<ReportedVariant> reportedVariants;\n-        if (moi != null && (moi == DE_NOVO || moi == COMPOUND_HETEROZYGOUS)) {\n-            if (moi == DE_NOVO) {\n-                List<Variant> deNovoVariants = clinicalInterpretationManager.getDeNovoVariants(clinicalAnalysisId, studyId, query, sessionId);\n-                reportedVariants = creator.create(deNovoVariants);\n-            } else {\n-                Map<String, List<Variant>> chVariants = clinicalInterpretationManager.getCompoundHeterozigousVariants(clinicalAnalysisId,\n-                        studyId, query, sessionId);\n-                reportedVariants = ClinicalUtils.getCompoundHeterozygousReportedVariants(chVariants, creator);\n-            }\n-        } else {\n-            reportedVariants = creator.create(variantStorageManager.get(query, queryOptions, sessionId).getResult());\n-        }\n-        return reportedVariants;\n+\n+    // Create Interpretation\n+    Interpretation interpretation = new Interpretation()\n+        .setId(\"OpenCGA-TEAM-\" + TimeUtils.getTime())\n+        .setAnalyst(getAnalyst(sessionId))\n+        .setClinicalAnalysisId(clinicalAnalysisId)\n+        .setCreationDate(TimeUtils.getTime())\n+        .setPanels(biodataDiseasePanels)\n+        .setFilters(null) //TODO\n+        .setSoftware(new Software().setName(\"TEAM\"))\n+        .setPrimaryFindings(primaryFindings)\n+        .setSecondaryFindings(secondaryFindings)\n+        .setLowCoverageRegions(reportedLowCoverages);\n+\n+    // Return interpretation result\n+    int numResults = CollectionUtils.isEmpty(primaryFindings) ? 0 : primaryFindings.size();\n+    return new InterpretationResult(\n+        interpretation,\n+        Math.toIntExact(watcher.getTime()),\n+        new HashMap<>(),\n+        Math.toIntExact(watcher.getTime()), // DB time\n+        numResults,\n+        numResults,\n+        \"\", // warning message\n+        \"\"); // error message\n+  }\n+\n+  List<ReportedVariant> getReportedVariants(Query query, QueryOptions queryOptions, TeamReportedVariantCreator creator) throws Exception {\n+    List<ReportedVariant> reportedVariants;\n+    if (moi != null && (moi == DE_NOVO || moi == COMPOUND_HETEROZYGOUS)) {\n+      if (moi == DE_NOVO) {\n+        List<Variant> deNovoVariants = clinicalInterpretationManager.getDeNovoVariants(clinicalAnalysisId, studyId, query, sessionId);\n+        reportedVariants = creator.create(deNovoVariants);\n+      } else {\n+        Map<String, List<Variant>> chVariants = clinicalInterpretationManager.getCompoundHeterozigousVariants(clinicalAnalysisId,\n+            studyId, query, sessionId);\n+        reportedVariants = ClinicalUtils.getCompoundHeterozygousReportedVariants(chVariants, creator);\n+      }\n+    } else {\n+      reportedVariants = creator.create(variantStorageManager.get(query, queryOptions, sessionId).getResult());\n     }\n+    return reportedVariants;\n+  }\n }\n",
            "diff_size": 225
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/389/TeamInterpretationAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/389/TeamInterpretationAnalysis.java\nindex e8276af4543..40c8c96704f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/389/TeamInterpretationAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/389/TeamInterpretationAnalysis.java\n@@ -208,4 +208,4 @@ public class TeamInterpretationAnalysis extends FamilyInterpretationAnalysis {\n         }\n         return reportedVariants;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}