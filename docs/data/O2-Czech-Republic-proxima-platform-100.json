{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "100",
    "information": {
        "errors": [
            {
                "line": "45",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 99).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    final Map<Integer, Integer> counts = new HashMap<>();\n    for (int i = 0; i < numElements; i++) {\n      counts.merge(Partitioners.getTruncatedPartitionId(partitioner, element, 3), 1, Integer::sum);\n    }\n    Assert.assertEquals(3, counts.size());\n    Assert.assertEquals(Integer.valueOf(33), counts.get(0));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/100/PartitionersTest.java\nindex 94fc585d356..680a5ea66bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/100/PartitionersTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.storage.commitlog;\n \n import cz.o2.proxima.storage.StreamElement;\n@@ -42,7 +43,8 @@ public class PartitionersTest {\n     final StreamElement element = Mockito.mock(StreamElement.class);\n     final Map<Integer, Integer> counts = new HashMap<>();\n     for (int i = 0; i < numElements; i++) {\n-      counts.merge(Partitioners.getTruncatedPartitionId(partitioner, element, 3), 1, Integer::sum);\n+      counts.merge(Partitioners.getTruncatedPartitionId(partitioner, element, 3), 1,\n+          Integer::sum);\n     }\n     Assert.assertEquals(3, counts.size());\n     Assert.assertEquals(Integer.valueOf(33), counts.get(0));\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/100/PartitionersTest.java\nindex 94fc585d356..e443aeaed2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/100/PartitionersTest.java\n@@ -38,7 +38,7 @@ public class PartitionersTest {\n           }\n         };\n \n-    final int numElements = 99;\n+final int numElements = 99;\n     final StreamElement element = Mockito.mock(StreamElement.class);\n     final Map<Integer, Integer> counts = new HashMap<>();\n     for (int i = 0; i < numElements; i++) {\n@@ -49,4 +49,4 @@ public class PartitionersTest {\n     Assert.assertEquals(Integer.valueOf(33), counts.get(1));\n     Assert.assertEquals(Integer.valueOf(33), counts.get(2));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 10, expected is 38, indentation should be the same level as line 34.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'object def' child has incorrect indentation level 38, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 38, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 40, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 38, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 36, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/100/PartitionersTest.java\nindex 94fc585d356..c31ca672238 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/100/PartitionersTest.java\n@@ -22,22 +22,22 @@ import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n+\n public class PartitionersTest {\n \n   @Test\n   public void testUniformDistribution() {\n-    final Partitioner partitioner =\n-        new Partitioner() {\n+    final Partitioner partitioner = new Partitioner() {\n \n           /** Start from negative number, to ensure correctness... */\n-          int lastPartitionId = -33;\n \n-          @Override\n-          public int getPartitionId(StreamElement element) {\n-            return lastPartitionId++;\n-          }\n-        };\n+                                      int lastPartitionId = -33;\n \n+                                      @Override\n+                                      public int getPartitionId(StreamElement element) {\n+                                        return lastPartitionId ++;\n+                                      }\n+                                    };\n     final int numElements = 99;\n     final StreamElement element = Mockito.mock(StreamElement.class);\n     final Map<Integer, Integer> counts = new HashMap<>();\n@@ -49,4 +49,4 @@ public class PartitionersTest {\n     Assert.assertEquals(Integer.valueOf(33), counts.get(1));\n     Assert.assertEquals(Integer.valueOf(33), counts.get(2));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/100/PartitionersTest.java\nindex 94fc585d356..069f6bbf7f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/100/PartitionersTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/100/PartitionersTest.java\n@@ -42,7 +42,8 @@ public class PartitionersTest {\n     final StreamElement element = Mockito.mock(StreamElement.class);\n     final Map<Integer, Integer> counts = new HashMap<>();\n     for (int i = 0; i < numElements; i++) {\n-      counts.merge(Partitioners.getTruncatedPartitionId(partitioner, element, 3), 1, Integer::sum);\n+      counts.merge(Partitioners.getTruncatedPartitionId(partitioner, element,3),1,Integer::\n+      sum);\n     }\n     Assert.assertEquals(3, counts.size());\n     Assert.assertEquals(Integer.valueOf(33), counts.get(0));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}