{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "68",
                "severity": "warning",
                "message": "'lambda arguments' has incorrect indentation level 24, expected level should be 20.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                        Map.Entry::getKey,\n                        Map.Entry::getValue,\n                        (e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n                        LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/7/StoreStats.java\nindex 942feb40fe7..bb50ceb4420 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/7/StoreStats.java\n@@ -64,8 +64,7 @@ public final class StoreStats {\n                 .sorted(Map.Entry.comparingByValue(Collections.reverseOrder()))\n                 .collect(Collectors.toMap(\n                         Map.Entry::getKey,\n-                        Map.Entry::getValue,\n-                        (e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n+                        Map.Entry::getValue,(e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n                         LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/7/StoreStats.java\nindex 942feb40fe7..bd632f9cd14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/7/StoreStats.java\n@@ -49,9 +49,7 @@ public final class StoreStats {\n      * Sort the {@code methodCalls} in descending order of values.\n      *\n      * @param methodCalls the map to sort\n-     *\n      * @return a new sorted map\n-     *\n      * @implNote The returned map is an instance of {@link LinkedHashMap} to keep the order, as described in the\n      * official Javadoc: \"This linked list defines the iteration ordering, which is normally the order in which keys\n      * were inserted into the map (insertion-order).\"\n@@ -59,14 +57,16 @@ public final class StoreStats {\n     @Nonnull\n     private static Map<String, Long> sortMethodCalls(Map<String, AtomicLong> methodCalls) {\n         return methodCalls.entrySet()\n-                .stream()\n-                .map(e -> new AbstractMap.SimpleImmutableEntry<>(e.getKey(), e.getValue().get()))\n-                .sorted(Map.Entry.comparingByValue(Collections.reverseOrder()))\n-                .collect(Collectors.toMap(\n-                        Map.Entry::getKey,\n-                        Map.Entry::getValue,\n-                        (e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n-                        LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n+            .stream()\n+            .map(e -> new AbstractMap.SimpleImmutableEntry<>(e.getKey(), e.getValue().get()))\n+            .sorted(Map.Entry.comparingByValue(Collections.reverseOrder()))\n+            .collect(Collectors.toMap(\n+                Map.Entry::getKey,\n+                Map.Entry::getValue,\n+                (e1, e2) -> {\n+                    throw new IllegalStateException(String.format(\"Duplicate key %s\", e1));\n+                },\n+                LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n     }\n \n     /**\n@@ -82,7 +82,7 @@ public final class StoreStats {\n     @Override\n     public String toString() {\n         return methodCalls().entrySet().stream()\n-                .map(e -> e.getKey() + \" = \" + e.getValue())\n-                .collect(Collectors.joining(\"\\n\"));\n+            .map(e -> e.getKey() + \" = \" + e.getValue())\n+            .collect(Collectors.joining(\"\\n\"));\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 24, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/7/StoreStats.java\nindex 942feb40fe7..c8f89203537 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/7/StoreStats.java\n@@ -65,8 +65,7 @@ public final class StoreStats {\n                 .collect(Collectors.toMap(\n                         Map.Entry::getKey,\n                         Map.Entry::getValue,\n-                        (e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n-                        LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n+                        (e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n     }\n \n     /**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/7/StoreStats.java\nindex 942feb40fe7..bb50ceb4420 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/7/StoreStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/7/StoreStats.java\n@@ -64,8 +64,7 @@ public final class StoreStats {\n                 .sorted(Map.Entry.comparingByValue(Collections.reverseOrder()))\n                 .collect(Collectors.toMap(\n                         Map.Entry::getKey,\n-                        Map.Entry::getValue,\n-                        (e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n+                        Map.Entry::getValue,(e1, e2) -> { throw new IllegalStateException(String.format(\"Duplicate key %s\", e1)); },\n                         LinkedHashMap::new)); // Use LinkedHashMap to keep the order\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}