{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1950",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1950/StoreSingleNodeCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1950/StoreSingleNodeCursor.java\nindex b692fa64cb8..5b3f8105aa2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1950/StoreSingleNodeCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1950/StoreSingleNodeCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import java.util.function.Consumer;\n@@ -43,152 +44,150 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.CHECK;\n  */\n public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n {\n-    private final NodeRecord nodeRecord;\n-    private final Consumer<StoreSingleNodeCursor> instanceCache;\n-\n-    private final LockService lockService;\n-    private final RecordCursors recordCursors;\n-\n-    private long nodeId = StatementConstants.NO_SUCH_NODE;\n-    private long[] labels;\n-\n-    public StoreSingleNodeCursor( NodeRecord nodeRecord, Consumer<StoreSingleNodeCursor> instanceCache,\n-            RecordCursors recordCursors, LockService lockService )\n-    {\n-        this.nodeRecord = nodeRecord;\n-        this.recordCursors = recordCursors;\n-        this.lockService = lockService;\n-        this.instanceCache = instanceCache;\n-    }\n-\n-    public StoreSingleNodeCursor init( long nodeId )\n-    {\n-        this.nodeId = nodeId;\n-        return this;\n-    }\n-\n-    @Override\n-    public NodeItem get()\n-    {\n-        return this;\n-    }\n-\n-    @Override\n-    public boolean next()\n-    {\n-        labels = null;\n-        if ( nodeId != StatementConstants.NO_SUCH_NODE )\n-        {\n-            try\n-            {\n-                return recordCursors.node().next( nodeId, nodeRecord, CHECK );\n-            }\n-            finally\n-            {\n-                nodeId = StatementConstants.NO_SUCH_NODE;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        labels = null;\n-        nodeRecord.clear();\n-        instanceCache.accept( this );\n-    }\n-\n-    @Override\n-    public long id()\n+  private final NodeRecord nodeRecord;\n+  private final Consumer<StoreSingleNodeCursor> instanceCache;\n+\n+  private final LockService lockService;\n+  private final RecordCursors recordCursors;\n+\n+  private long nodeId = StatementConstants.NO_SUCH_NODE;\n+  private long[] labels;\n+\n+  public StoreSingleNodeCursor(NodeRecord nodeRecord, Consumer<StoreSingleNodeCursor> instanceCache,\n+                               RecordCursors recordCursors, LockService lockService)\n+  {\n+    this.nodeRecord = nodeRecord;\n+    this.recordCursors = recordCursors;\n+    this.lockService = lockService;\n+    this.instanceCache = instanceCache;\n+  }\n+\n+  public StoreSingleNodeCursor init(long nodeId)\n+  {\n+    this.nodeId = nodeId;\n+    return this;\n+  }\n+\n+  @Override\n+  public NodeItem get()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean next()\n+  {\n+    labels = null;\n+    if (nodeId != StatementConstants.NO_SUCH_NODE)\n     {\n-        return nodeRecord.getId();\n+      try\n+      {\n+        return recordCursors.node().next(nodeId, nodeRecord, CHECK);\n+      } finally\n+      {\n+        nodeId = StatementConstants.NO_SUCH_NODE;\n+      }\n     }\n \n-    @Override\n-    public PrimitiveIntSet labels()\n+    return false;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    labels = null;\n+    nodeRecord.clear();\n+    instanceCache.accept(this);\n+  }\n+\n+  @Override\n+  public long id()\n+  {\n+    return nodeRecord.getId();\n+  }\n+\n+  @Override\n+  public PrimitiveIntSet labels()\n+  {\n+    ensureLabels();\n+    return PrimitiveIntCollections.asSet(labels, Numbers::safeCastLongToInt);\n+  }\n+\n+  private void ensureLabels()\n+  {\n+    if (labels == null)\n     {\n-        ensureLabels();\n-        return PrimitiveIntCollections.asSet( labels, Numbers::safeCastLongToInt );\n+      labels = NodeLabelsField.get(nodeRecord, recordCursors.label());\n     }\n+  }\n \n-    private void ensureLabels()\n+  @Override\n+  public boolean hasLabel(int labelId)\n+  {\n+    ensureLabels();\n+    for (long label : labels)\n     {\n-        if ( labels == null )\n-        {\n-            labels = NodeLabelsField.get( nodeRecord, recordCursors.label() );\n-        }\n+      if (safeCastLongToInt(label) == labelId)\n+      {\n+        return true;\n+      }\n     }\n-\n-    @Override\n-    public boolean hasLabel( int labelId )\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isDense()\n+  {\n+    return nodeRecord.isDense();\n+  }\n+\n+  @Override\n+  public long nextGroupId()\n+  {\n+    assert isDense();\n+    return nextRelationshipId();\n+  }\n+\n+  @Override\n+  public long nextRelationshipId()\n+  {\n+    return nodeRecord.getNextRel();\n+  }\n+\n+  @Override\n+  public long nextPropertyId()\n+  {\n+    return nodeRecord.getNextProp();\n+  }\n+\n+  @Override\n+  public Lock lock()\n+  {\n+    Lock lock = lockService.acquireNodeLock(nodeRecord.getId(), LockService.LockType.READ_LOCK);\n+    if (lockService != NO_LOCK_SERVICE)\n     {\n-        ensureLabels();\n-        for ( long label : labels )\n+      boolean success = false;\n+      try\n+      {\n+        // It's safer to re-read the node record here, specifically nextProp, after acquiring the lock\n+        if (!recordCursors.node().next(nodeRecord.getId(), nodeRecord, CHECK))\n         {\n-            if ( safeCastLongToInt( label ) == labelId )\n-            {\n-                return true;\n-            }\n+          // So it looks like the node has been deleted. The current behavior of NodeStore#loadRecord\n+          // is to only set the inUse field on loading an unused record. This should (and will)\n+          // change to be more of a centralized behavior by the stores. Anyway, setting this pointer\n+          // to the primitive equivalent of null the property cursor will just look empty from the\n+          // outside and the releasing of the lock will be done as usual.\n+          nodeRecord.setNextProp(Record.NO_NEXT_PROPERTY.intValue());\n         }\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isDense()\n-    {\n-        return nodeRecord.isDense();\n-    }\n-\n-    @Override\n-    public long nextGroupId()\n-    {\n-        assert isDense();\n-        return nextRelationshipId();\n-    }\n-\n-    @Override\n-    public long nextRelationshipId()\n-    {\n-        return nodeRecord.getNextRel();\n-    }\n-\n-    @Override\n-    public long nextPropertyId()\n-    {\n-        return nodeRecord.getNextProp();\n-    }\n-\n-    @Override\n-    public Lock lock()\n-    {\n-        Lock lock = lockService.acquireNodeLock( nodeRecord.getId(), LockService.LockType.READ_LOCK );\n-        if ( lockService != NO_LOCK_SERVICE )\n+        success = true;\n+      } finally\n+      {\n+        if (!success)\n         {\n-            boolean success = false;\n-            try\n-            {\n-                // It's safer to re-read the node record here, specifically nextProp, after acquiring the lock\n-                if ( !recordCursors.node().next( nodeRecord.getId(), nodeRecord, CHECK ) )\n-                {\n-                    // So it looks like the node has been deleted. The current behavior of NodeStore#loadRecord\n-                    // is to only set the inUse field on loading an unused record. This should (and will)\n-                    // change to be more of a centralized behavior by the stores. Anyway, setting this pointer\n-                    // to the primitive equivalent of null the property cursor will just look empty from the\n-                    // outside and the releasing of the lock will be done as usual.\n-                    nodeRecord.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n-                }\n-                success = true;\n-            }\n-            finally\n-            {\n-                if ( !success )\n-                {\n-                    lock.release();\n-                }\n-            }\n+          lock.release();\n         }\n-        return lock;\n+      }\n     }\n+    return lock;\n+  }\n }\n",
            "diff_size": 208
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1950/StoreSingleNodeCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1950/StoreSingleNodeCursor.java\nindex b692fa64cb8..6775846ecf3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1950/StoreSingleNodeCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1950/StoreSingleNodeCursor.java\n@@ -179,7 +179,8 @@ public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n                     // outside and the releasing of the lock will be done as usual.\n                     nodeRecord.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n                 }\n-                success = true;\n+\n+success = true;\n             }\n             finally\n             {\n@@ -191,4 +192,4 @@ public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n         }\n         return lock;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "126",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1950/StoreSingleNodeCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1950/StoreSingleNodeCursor.java\nindex b692fa64cb8..ecceee71507 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1950/StoreSingleNodeCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1950/StoreSingleNodeCursor.java\n@@ -20,7 +20,6 @@\n package org.neo4j.kernel.impl.api.store;\n \n import java.util.function.Consumer;\n-\n import org.neo4j.collection.primitive.PrimitiveIntCollections;\n import org.neo4j.collection.primitive.PrimitiveIntSet;\n import org.neo4j.cursor.Cursor;\n@@ -33,27 +32,26 @@ import org.neo4j.kernel.impl.store.RecordCursors;\n import org.neo4j.kernel.impl.store.record.NodeRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n import org.neo4j.storageengine.api.NodeItem;\n-\n import static org.neo4j.helpers.Numbers.safeCastLongToInt;\n+\n import static org.neo4j.kernel.impl.locking.LockService.NO_LOCK_SERVICE;\n+\n import static org.neo4j.kernel.impl.store.record.RecordLoad.CHECK;\n \n /**\n  * Base cursor for nodes.\n  */\n+\n public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n {\n     private final NodeRecord nodeRecord;\n     private final Consumer<StoreSingleNodeCursor> instanceCache;\n-\n     private final LockService lockService;\n     private final RecordCursors recordCursors;\n-\n     private long nodeId = StatementConstants.NO_SUCH_NODE;\n     private long[] labels;\n \n-    public StoreSingleNodeCursor( NodeRecord nodeRecord, Consumer<StoreSingleNodeCursor> instanceCache,\n-            RecordCursors recordCursors, LockService lockService )\n+    public StoreSingleNodeCursor( NodeRecord nodeRecord, Consumer<StoreSingleNodeCursor> instanceCache, RecordCursors recordCursors, LockService lockService )\n     {\n         this.nodeRecord = nodeRecord;\n         this.recordCursors = recordCursors;\n@@ -125,13 +123,14 @@ public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n     public boolean hasLabel( int labelId )\n     {\n         ensureLabels();\n-        for ( long label : labels )\n+        for( long label : labels)\n         {\n             if ( safeCastLongToInt( label ) == labelId )\n             {\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n \n@@ -170,7 +169,7 @@ public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n             try\n             {\n                 // It's safer to re-read the node record here, specifically nextProp, after acquiring the lock\n-                if ( !recordCursors.node().next( nodeRecord.getId(), nodeRecord, CHECK ) )\n+                if ( ! recordCursors.node().next( nodeRecord.getId(), nodeRecord, CHECK ) )\n                 {\n                     // So it looks like the node has been deleted. The current behavior of NodeStore#loadRecord\n                     // is to only set the inUse field on loading an unused record. This should (and will)\n@@ -179,16 +178,18 @@ public class StoreSingleNodeCursor implements Cursor<NodeItem>, NodeItem\n                     // outside and the releasing of the lock will be done as usual.\n                     nodeRecord.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n                 }\n+\n                 success = true;\n             }\n             finally\n             {\n-                if ( !success )\n+                if ( ! success )\n                 {\n                     lock.release();\n                 }\n             }\n         }\n+\n         return lock;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}