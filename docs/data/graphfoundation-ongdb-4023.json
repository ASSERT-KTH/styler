{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4023",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4023/NodePropertyCommandsExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4023/NodePropertyCommandsExtractor.java\nindex 8ba4825ba30..eaaac34c1b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4023/NodePropertyCommandsExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4023/NodePropertyCommandsExtractor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.IOException;\n@@ -39,87 +40,87 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.fieldPointsToDynamicRe\n  * Gathers node/property commands by node id, preparing for extraction of {@link NodeUpdates updates}.\n  */\n public class NodePropertyCommandsExtractor extends TransactionApplier.Adapter\n-        implements BatchTransactionApplier\n+    implements BatchTransactionApplier\n {\n-    private final PrimitiveLongObjectMap<NodeCommand> nodeCommandsById = longObjectMap();\n-    private final PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommandsByNodeIds = longObjectMap();\n-    private boolean hasUpdates;\n+  private final PrimitiveLongObjectMap<NodeCommand> nodeCommandsById = longObjectMap();\n+  private final PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommandsByNodeIds = longObjectMap();\n+  private boolean hasUpdates;\n \n-    @Override\n-    public TransactionApplier startTx( CommandsToApply transaction )\n-    {\n-        return this;\n-    }\n+  @Override\n+  public TransactionApplier startTx(CommandsToApply transaction)\n+  {\n+    return this;\n+  }\n \n-    @Override\n-    public TransactionApplier startTx( CommandsToApply transaction, LockGroup lockGroup )\n-    {\n-        return startTx( transaction );\n-    }\n+  @Override\n+  public TransactionApplier startTx(CommandsToApply transaction, LockGroup lockGroup)\n+  {\n+    return startTx(transaction);\n+  }\n \n-    @Override\n-    public void close()\n-    {\n-        nodeCommandsById.clear();\n-        propertyCommandsByNodeIds.clear();\n-    }\n+  @Override\n+  public void close()\n+  {\n+    nodeCommandsById.clear();\n+    propertyCommandsByNodeIds.clear();\n+  }\n \n-    @Override\n-    public boolean visitNodeCommand( NodeCommand command )\n+  @Override\n+  public boolean visitNodeCommand(NodeCommand command)\n+  {\n+    nodeCommandsById.put(command.getKey(), command);\n+    if (!hasUpdates && mayResultInIndexUpdates(command))\n     {\n-        nodeCommandsById.put( command.getKey(), command );\n-        if ( !hasUpdates && mayResultInIndexUpdates( command ) )\n-        {\n-            hasUpdates = true;\n-        }\n-        return false;\n+      hasUpdates = true;\n     }\n+    return false;\n+  }\n \n-    public static boolean mayResultInIndexUpdates( NodeCommand command )\n-    {\n-        long before = command.getBefore().getLabelField();\n-        long after = command.getAfter().getLabelField();\n-        return before != after ||\n-                // Because we don't know here, there may have been changes to a dynamic label record\n-                // even though it still points to the same one\n-                fieldPointsToDynamicRecordOfLabels( before ) || fieldPointsToDynamicRecordOfLabels( after );\n+  public static boolean mayResultInIndexUpdates(NodeCommand command)\n+  {\n+    long before = command.getBefore().getLabelField();\n+    long after = command.getAfter().getLabelField();\n+    return before != after ||\n+        // Because we don't know here, there may have been changes to a dynamic label record\n+        // even though it still points to the same one\n+        fieldPointsToDynamicRecordOfLabels(before) || fieldPointsToDynamicRecordOfLabels(after);\n \n-    }\n+  }\n \n-    public static boolean mayResultInIndexUpdates( PropertyCommand command )\n-    {\n-        return command.getAfter().isNodeSet();\n-    }\n+  public static boolean mayResultInIndexUpdates(PropertyCommand command)\n+  {\n+    return command.getAfter().isNodeSet();\n+  }\n \n-    @Override\n-    public boolean visitPropertyCommand( PropertyCommand command )\n+  @Override\n+  public boolean visitPropertyCommand(PropertyCommand command)\n+  {\n+    if (mayResultInIndexUpdates(command))\n     {\n-        if ( mayResultInIndexUpdates( command ) )\n-        {\n-            long nodeId = command.getAfter().getNodeId();\n-            List<PropertyCommand> group = propertyCommandsByNodeIds.get( nodeId );\n-            if ( group == null )\n-            {\n-                propertyCommandsByNodeIds.put( nodeId, group = new ArrayList<>() );\n-            }\n-            group.add( command );\n-            hasUpdates = true;\n-        }\n-        return false;\n+      long nodeId = command.getAfter().getNodeId();\n+      List<PropertyCommand> group = propertyCommandsByNodeIds.get(nodeId);\n+      if (group == null)\n+      {\n+        propertyCommandsByNodeIds.put(nodeId, group = new ArrayList<>());\n+      }\n+      group.add(command);\n+      hasUpdates = true;\n     }\n+    return false;\n+  }\n \n-    public boolean containsAnyNodeOrPropertyUpdate()\n-    {\n-        return hasUpdates;\n-    }\n+  public boolean containsAnyNodeOrPropertyUpdate()\n+  {\n+    return hasUpdates;\n+  }\n \n-    public PrimitiveLongObjectMap<NodeCommand> nodeCommandsById()\n-    {\n-        return nodeCommandsById;\n-    }\n+  public PrimitiveLongObjectMap<NodeCommand> nodeCommandsById()\n+  {\n+    return nodeCommandsById;\n+  }\n \n-    public PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommandsByNodeIds()\n-    {\n-        return propertyCommandsByNodeIds;\n-    }\n+  public PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommandsByNodeIds()\n+  {\n+    return propertyCommandsByNodeIds;\n+  }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4023/NodePropertyCommandsExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4023/NodePropertyCommandsExtractor.java\nindex 8ba4825ba30..a88a9f31fe9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4023/NodePropertyCommandsExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4023/NodePropertyCommandsExtractor.java\n@@ -38,8 +38,7 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.fieldPointsToDynamicRe\n  * Implements both BatchTransactionApplier and TransactionApplier in order to reduce garbage.\n  * Gathers node/property commands by node id, preparing for extraction of {@link NodeUpdates updates}.\n  */\n-public class NodePropertyCommandsExtractor extends TransactionApplier.Adapter\n-        implements BatchTransactionApplier\n+public class NodePropertyCommandsExtractor extends TransactionApplier.Adapter implements BatchTransactionApplier\n {\n     private final PrimitiveLongObjectMap<NodeCommand> nodeCommandsById = longObjectMap();\n     private final PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommandsByNodeIds = longObjectMap();\n@@ -83,7 +82,6 @@ public class NodePropertyCommandsExtractor extends TransactionApplier.Adapter\n                 // Because we don't know here, there may have been changes to a dynamic label record\n                 // even though it still points to the same one\n                 fieldPointsToDynamicRecordOfLabels( before ) || fieldPointsToDynamicRecordOfLabels( after );\n-\n     }\n \n     public static boolean mayResultInIndexUpdates( PropertyCommand command )\n@@ -122,4 +120,4 @@ public class NodePropertyCommandsExtractor extends TransactionApplier.Adapter\n     {\n         return propertyCommandsByNodeIds;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}