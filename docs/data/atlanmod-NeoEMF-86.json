{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "63",
                "severity": "warning",
                "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n            IdProvider.AS_LONG::convert,\n            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n\n    /**\n     * The property key used to define the index of an edge.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/86/AbstractBlueprintsBackend.java\nindex 279695c22e7..3d0a53614b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/86/AbstractBlueprintsBackend.java\n@@ -59,8 +59,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+            IdProvider.AS_LONG::convert,o -> IdProvider.AS_LONG.revert(Long.class.cast(o))\n+\n+            )\n+            ;\n \n     /**\n      * The property key used to define the index of an edge.\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/86/AbstractBlueprintsBackend.java\nindex 279695c22e7..5b016b9c085 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/86/AbstractBlueprintsBackend.java\n@@ -59,8 +59,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+        IdProvider.AS_LONG::convert,\n+        o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the index of an edge.\n@@ -102,8 +102,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     private final Cache<Id, Vertex> verticesCache = CacheBuilder.builder()\n-            .softValues()\n-            .build();\n+        .softValues()\n+        .build();\n \n     /**\n      * A set that holds indexed {@link ClassBean}.\n@@ -139,7 +139,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Constructs a new {@code AbstractBlueprintsBackend} wrapping the provided {@code baseGraph}.\n      *\n      * @param baseGraph the base {@link KeyIndexableGraph} used to access the database\n-     *\n      * @see BlueprintsBackendFactory\n      */\n     protected AbstractBlueprintsBackend(KeyIndexableGraph baseGraph) {\n@@ -157,7 +156,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Builds the {@link Id} used to identify a {@link ClassBean} {@link Vertex}.\n      *\n      * @param metaClass the {@link ClassBean} to build an {@link Id} from\n-     *\n      * @return the create {@link Id}\n      */\n     @Nonnull\n@@ -169,17 +167,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Retrieves the base graph of the {@code graph}.\n      *\n      * @param graph the graph from which to retrieve the base graph\n-     *\n      * @return the base graph of the {@code graph}, or {@code graph} is it is not a wrapper.\n-     *\n      * @see com.tinkerpop.blueprints.Features#isWrapper\n      * @see WrapperGraph\n      */\n     @Nonnull\n     private Graph getOrigin(Graph graph) {\n         return graph.getFeatures().isWrapper\n-                ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n-                : graph;\n+            ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n+            : graph;\n     }\n \n     /**\n@@ -187,7 +183,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @param feature the feature associated with the property\n      * @param suffix  the suffix of the property\n-     *\n      * @return the formatted property\n      */\n     @Nonnull\n@@ -199,35 +194,32 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Formats a label.\n      *\n      * @param feature the feature associated with the label\n-     *\n      * @return the formatted label\n      */\n     @Nonnull\n     protected String formatLabel(FeatureBean feature) {\n         return requireUniqueLabels\n-                ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id()) // TODO Can cause a massive overhead\n-                : Integer.toString(feature.id());\n+            ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id()) // TODO Can cause a massive overhead\n+            : Integer.toString(feature.id());\n     }\n \n     /**\n      * Retrieves or create an index for the given {@code name}.\n      *\n      * @param name the name of the index\n-     *\n      * @return the index\n      */\n     @Nonnull\n     private Index<Vertex> getOrCreateIndex(String name) {\n         return Optional.ofNullable(graph.getIndex(name, Vertex.class))\n-                .orElseGet(() -> graph.createIndex(name, Vertex.class));\n+            .orElseGet(() -> graph.createIndex(name, Vertex.class));\n     }\n \n     @Override\n     public void save() {\n         if (graph.getFeatures().supportsTransactions) {\n             graph.commit();\n-        }\n-        else {\n+        } else {\n             graph.shutdown();\n         }\n     }\n@@ -241,8 +233,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     protected void innerClose() {\n         try {\n             graph.shutdown();\n-        }\n-        catch (Exception ignored) {\n+        } catch (Exception ignored) {\n         }\n     }\n \n@@ -271,15 +262,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Edge> edges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         return MoreIterables.onlyElement(edges)\n-                .map(e -> SingleFeatureBean.of(\n-                        AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n-                        e.getProperty(PROPERTY_FEATURE_NAME)));\n+            .map(e -> SingleFeatureBean.of(\n+                AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n+                e.getProperty(PROPERTY_FEATURE_NAME)));\n     }\n \n     @Override\n@@ -291,10 +282,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         Vertex containerVertex = getOrCreate(container.owner());\n \n         Iterable<Edge> containmentEdges = containmentVertex.query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         containmentEdges.forEach(Edge::remove);\n \n@@ -313,10 +304,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Edge> containmentEdges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         containmentEdges.forEach(Edge::remove);\n     }\n@@ -333,15 +324,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Vertex> metaClassVertices = vertex.get().query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .vertices();\n+            .labels(EDGE_INSTANCE_OF)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .vertices();\n \n         return MoreIterables.onlyElement(metaClassVertices)\n-                .map(v -> ClassBean.of(\n-                        v.getProperty(PROPERTY_CLASS_NAME),\n-                        v.getProperty(PROPERTY_CLASS_URI)));\n+            .map(v -> ClassBean.of(\n+                v.getProperty(PROPERTY_CLASS_NAME),\n+                v.getProperty(PROPERTY_CLASS_URI)));\n     }\n \n     @Override\n@@ -353,10 +344,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n \n         // Check the presence of a meta-class\n         Iterable<Edge> instanceEdges = vertex.query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_INSTANCE_OF)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         if (MoreIterables.onlyElement(instanceEdges).isPresent()) {\n             return false;\n@@ -386,19 +377,18 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     @Override\n     public Iterable<Id> allInstancesOf(Set<ClassBean> metaClasses) {\n         return metaClasses.stream()\n-                .map(mc -> metaClassIndex.get(PROPERTY_CLASS_NAME, mc.name()))\n-                .flatMap(MoreIterables::stream)\n-                .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n-                .flatMap(MoreIterables::stream)\n-                .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n-                .collect(Collectors.toSet());\n+            .map(mc -> metaClassIndex.get(PROPERTY_CLASS_NAME, mc.name()))\n+            .flatMap(MoreIterables::stream)\n+            .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n+            .flatMap(MoreIterables::stream)\n+            .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n      * Returns the name of the meta-class of the specified {@code id}.\n      *\n      * @param id the identifier\n-     *\n      * @return the name of the meta-class\n      */\n     @Nonnull\n@@ -411,7 +401,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Retrieves the {@link Vertex} corresponding to the provided {@code id}.\n      *\n      * @param id the {@link Id} of the element to find\n-     *\n      * @return an {@link Optional} containing the {@link Vertex}, or {@link Optional#empty()} if it doesn't exist\n      */\n     @Nonnull\n@@ -424,14 +413,13 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * created.\n      *\n      * @param id the {@link Id} of the element to find, or create\n-     *\n      * @return the {@link Vertex}\n      */\n     @Nonnull\n     protected Vertex getOrCreate(Id id) {\n         return verticesCache.get(id, i ->\n-                Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n-                        .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n+            Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n+                .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n     }\n \n     /**\n@@ -478,13 +466,12 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n          * Creates a new {@link SmartIdEdge} from another {@link Edge}.\n          *\n          * @param edge the base edge\n-         *\n          * @return an {@link SmartIdEdge}\n          */\n         private Edge createFrom(@Nullable Edge edge) {\n             return Optional.ofNullable(edge)\n-                    .map(SmartIdEdge::new)\n-                    .orElse(null);\n+                .map(SmartIdEdge::new)\n+                .orElse(null);\n         }\n \n         /**\n@@ -514,9 +501,9 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n                 super.remove();\n \n                 Iterable<Edge> edges = referencedVertex.query()\n-                        .direction(Direction.IN)\n-                        .limit(1)\n-                        .edges();\n+                    .direction(Direction.IN)\n+                    .limit(1)\n+                    .edges();\n \n                 if (MoreIterables.isEmpty(edges)) {\n                     // If the Vertex has no more incoming edges remove it from the DB\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/86/AbstractBlueprintsBackend.java\nindex 279695c22e7..749f93e0d42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/86/AbstractBlueprintsBackend.java\n@@ -59,8 +59,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+            IdProvider.AS_LONG::convert, o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the index of an edge.\n@@ -525,4 +524,4 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/86/AbstractBlueprintsBackend.java\nindex 279695c22e7..3d0a53614b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/86/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/86/AbstractBlueprintsBackend.java\n@@ -59,8 +59,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+            IdProvider.AS_LONG::convert,o -> IdProvider.AS_LONG.revert(Long.class.cast(o))\n+\n+            )\n+            ;\n \n     /**\n      * The property key used to define the index of an edge.\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}