{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2358",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2358/FusionIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2358/FusionIndexReader.java\nindex 51ed5981ae4..856cfde6fe6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2358/FusionIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2358/FusionIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.Arrays;\n@@ -42,90 +43,88 @@ import static org.neo4j.kernel.impl.index.schema.fusion.SlotSelector.UNKNOWN;\n \n class FusionIndexReader extends FusionIndexBase<IndexReader> implements IndexReader\n {\n-    private final SchemaIndexDescriptor descriptor;\n+  private final SchemaIndexDescriptor descriptor;\n \n-    FusionIndexReader( SlotSelector slotSelector, LazyInstanceSelector<IndexReader> instanceSelector, SchemaIndexDescriptor descriptor )\n-    {\n-        super( slotSelector, instanceSelector );\n-        this.descriptor = descriptor;\n-    }\n+  FusionIndexReader(SlotSelector slotSelector, LazyInstanceSelector<IndexReader> instanceSelector, SchemaIndexDescriptor descriptor)\n+  {\n+    super(slotSelector, instanceSelector);\n+    this.descriptor = descriptor;\n+  }\n \n-    @Override\n-    public void close()\n-    {\n-        instanceSelector.close( Resource::close );\n-    }\n+  @Override\n+  public void close()\n+  {\n+    instanceSelector.close(Resource::close);\n+  }\n \n-    @Override\n-    public long countIndexedNodes( long nodeId, Value... propertyValues )\n-    {\n-        return instanceSelector.select( slotSelector.selectSlot( propertyValues, GROUP_OF ) ).countIndexedNodes( nodeId, propertyValues );\n-    }\n+  @Override\n+  public long countIndexedNodes(long nodeId, Value... propertyValues)\n+  {\n+    return instanceSelector.select(slotSelector.selectSlot(propertyValues, GROUP_OF)).countIndexedNodes(nodeId, propertyValues);\n+  }\n \n-    @Override\n-    public IndexSampler createSampler()\n-    {\n-        return new FusionIndexSampler( instanceSelector.instancesAs( new IndexSampler[INSTANCE_COUNT], IndexReader::createSampler ) );\n-    }\n+  @Override\n+  public IndexSampler createSampler()\n+  {\n+    return new FusionIndexSampler(instanceSelector.instancesAs(new IndexSampler[INSTANCE_COUNT], IndexReader::createSampler));\n+  }\n \n-    @Override\n-    public PrimitiveLongResourceIterator query( IndexQuery... predicates ) throws IndexNotApplicableKernelException\n-    {\n-        int slot = slotSelector.selectSlot( predicates, IndexQuery::valueGroup );\n-        return slot != UNKNOWN\n-               ? instanceSelector.select( slot ).query( predicates )\n-               : concat( instanceSelector.instancesAs( new PrimitiveLongResourceIterator[INSTANCE_COUNT], reader -> reader.query( predicates ) ) );\n-    }\n+  @Override\n+  public PrimitiveLongResourceIterator query(IndexQuery... predicates) throws IndexNotApplicableKernelException\n+  {\n+    int slot = slotSelector.selectSlot(predicates, IndexQuery::valueGroup);\n+    return slot != UNKNOWN\n+        ? instanceSelector.select(slot).query(predicates)\n+        : concat(instanceSelector.instancesAs(new PrimitiveLongResourceIterator[INSTANCE_COUNT], reader -> reader.query(predicates)));\n+  }\n \n-    @Override\n-    public void query( IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates )\n-            throws IndexNotApplicableKernelException\n+  @Override\n+  public void query(IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates)\n+      throws IndexNotApplicableKernelException\n+  {\n+    int slot = slotSelector.selectSlot(predicates, IndexQuery::valueGroup);\n+    if (slot != UNKNOWN)\n     {\n-        int slot = slotSelector.selectSlot( predicates, IndexQuery::valueGroup );\n-        if ( slot != UNKNOWN )\n-        {\n-            instanceSelector.select( slot ).query( cursor, indexOrder, predicates );\n-        }\n-        else\n-        {\n-            if ( indexOrder != IndexOrder.NONE )\n-            {\n-                throw new UnsupportedOperationException(\n-                        format( \"Tried to query index with unsupported order %s. Supported orders for query %s are %s.\",\n-                                indexOrder, Arrays.toString( predicates ), IndexOrder.NONE ) );\n-            }\n-            BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( cursor,\n-                    descriptor.schema().getPropertyIds() );\n-            cursor.initialize( descriptor, multiProgressor, predicates );\n-            instanceSelector.forAll( reader -> reader.query( multiProgressor, indexOrder, predicates ) );\n-        }\n-    }\n-\n-    @Override\n-    public void distinctValues( IndexProgressor.NodeValueClient cursor, PropertyAccessor propertyAccessor )\n+      instanceSelector.select(slot).query(cursor, indexOrder, predicates);\n+    } else\n     {\n-        BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( cursor,\n-                descriptor.schema().getPropertyIds() );\n-        cursor.initialize( descriptor, multiProgressor, new IndexQuery[0] );\n-        instanceSelector.forAll( reader -> reader.distinctValues( multiProgressor, propertyAccessor ) );\n+      if (indexOrder != IndexOrder.NONE)\n+      {\n+        throw new UnsupportedOperationException(\n+            format(\"Tried to query index with unsupported order %s. Supported orders for query %s are %s.\",\n+                indexOrder, Arrays.toString(predicates), IndexOrder.NONE));\n+      }\n+      BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor(cursor,\n+          descriptor.schema().getPropertyIds());\n+      cursor.initialize(descriptor, multiProgressor, predicates);\n+      instanceSelector.forAll(reader -> reader.query(multiProgressor, indexOrder, predicates));\n     }\n+  }\n+\n+  @Override\n+  public void distinctValues(IndexProgressor.NodeValueClient cursor, PropertyAccessor propertyAccessor)\n+  {\n+    BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor(cursor,\n+        descriptor.schema().getPropertyIds());\n+    cursor.initialize(descriptor, multiProgressor, new IndexQuery[0]);\n+    instanceSelector.forAll(reader -> reader.distinctValues(multiProgressor, propertyAccessor));\n+  }\n \n-    @Override\n-    public boolean hasFullValuePrecision( IndexQuery... predicates )\n+  @Override\n+  public boolean hasFullValuePrecision(IndexQuery... predicates)\n+  {\n+    int slot = slotSelector.selectSlot(predicates, IndexQuery::valueGroup);\n+    if (slot != UNKNOWN)\n+    {\n+      return instanceSelector.select(slot).hasFullValuePrecision(predicates);\n+    } else\n     {\n-        int slot = slotSelector.selectSlot( predicates, IndexQuery::valueGroup );\n-        if ( slot != UNKNOWN )\n-        {\n-            return instanceSelector.select( slot ).hasFullValuePrecision( predicates );\n-        }\n-        else\n-        {\n-            // UNKNOWN slot which basically means the EXISTS predicate\n-            if ( !(predicates.length == 1 && predicates[0] instanceof ExistsPredicate) )\n-            {\n-                throw new IllegalStateException( \"Selected IndexReader null for predicates \" + Arrays.toString( predicates ) );\n-            }\n-            return true;\n-        }\n+      // UNKNOWN slot which basically means the EXISTS predicate\n+      if (!(predicates.length == 1 && predicates[0] instanceof ExistsPredicate))\n+      {\n+        throw new IllegalStateException(\"Selected IndexReader null for predicates \" + Arrays.toString(predicates));\n+      }\n+      return true;\n     }\n+  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2358/FusionIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2358/FusionIndexReader.java\nindex 51ed5981ae4..f31f305a5a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2358/FusionIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2358/FusionIndexReader.java\n@@ -72,15 +72,12 @@ class FusionIndexReader extends FusionIndexBase<IndexReader> implements IndexRea\n     public PrimitiveLongResourceIterator query( IndexQuery... predicates ) throws IndexNotApplicableKernelException\n     {\n         int slot = slotSelector.selectSlot( predicates, IndexQuery::valueGroup );\n-        return slot != UNKNOWN\n-               ? instanceSelector.select( slot ).query( predicates )\n-               : concat( instanceSelector.instancesAs( new PrimitiveLongResourceIterator[INSTANCE_COUNT], reader -> reader.query( predicates ) ) );\n+        return slot != UNKNOWN ? instanceSelector.select( slot ).query( predicates ) : concat( instanceSelector.instancesAs( new PrimitiveLongResourceIterator[INSTANCE_COUNT], reader -> reader.query( predicates ) ) );\n     }\n \n     @Override\n-    public void query( IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates )\n-            throws IndexNotApplicableKernelException\n-    {\n+    public void query( IndexProgressor.NodeValueClient cursor, IndexOrder indexOrder, IndexQuery... predicates ) throws IndexNotApplicableKernelException\n+{\n         int slot = slotSelector.selectSlot( predicates, IndexQuery::valueGroup );\n         if ( slot != UNKNOWN )\n         {\n@@ -90,13 +87,12 @@ class FusionIndexReader extends FusionIndexBase<IndexReader> implements IndexRea\n         {\n             if ( indexOrder != IndexOrder.NONE )\n             {\n-                throw new UnsupportedOperationException(\n-                        format( \"Tried to query index with unsupported order %s. Supported orders for query %s are %s.\",\n+                throw new UnsupportedOperationException( format( \"Tried to query index with unsupported order %s. Supported orders for query %s are %s.\",\n                                 indexOrder, Arrays.toString( predicates ), IndexOrder.NONE ) );\n-            }\n+    }\n             BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( cursor,\n                     descriptor.schema().getPropertyIds() );\n-            cursor.initialize( descriptor, multiProgressor, predicates );\n+cursor.initialize( descriptor, multiProgressor, predicates );\n             instanceSelector.forAll( reader -> reader.query( multiProgressor, indexOrder, predicates ) );\n         }\n     }\n@@ -106,7 +102,7 @@ class FusionIndexReader extends FusionIndexBase<IndexReader> implements IndexRea\n     {\n         BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( cursor,\n                 descriptor.schema().getPropertyIds() );\n-        cursor.initialize( descriptor, multiProgressor, new IndexQuery[0] );\n+cursor.initialize( descriptor, multiProgressor, new IndexQuery[0] );\n         instanceSelector.forAll( reader -> reader.distinctValues( multiProgressor, propertyAccessor ) );\n     }\n \n@@ -128,4 +124,4 @@ class FusionIndexReader extends FusionIndexBase<IndexReader> implements IndexRea\n             return true;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}