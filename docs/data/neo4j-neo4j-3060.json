{
    "project_name": "neo4j-neo4j",
    "error_id": "3060",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3060/Evaluators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3060/Evaluators.java\nindex 21bcdb8aae7..e5797604c7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3060/Evaluators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3060/Evaluators.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import java.util.HashSet;\n@@ -38,22 +39,22 @@ import static org.neo4j.graphdb.traversal.Evaluation.INCLUDE_AND_CONTINUE;\n  */\n public abstract class Evaluators\n {\n-    @SuppressWarnings( \"rawtypes\" )\n+    @SuppressWarnings(\"rawtypes\")\n     private static final PathEvaluator<?> ALL = new PathEvaluator.Adapter()\n     {\n         @Override\n-        public Evaluation evaluate( Path path, BranchState state )\n+        public Evaluation evaluate(Path path, BranchState state)\n         {\n             return INCLUDE_AND_CONTINUE;\n         }\n     };\n \n-    private static final PathEvaluator ALL_BUT_START_POSITION = fromDepth( 1 );\n+    private static final PathEvaluator ALL_BUT_START_POSITION = fromDepth(1);\n \n     /**\n      * @param <STATE> the type of the state object.\n      * @return an evaluator which includes everything it encounters and doesn't prune\n-     *         anything.\n+     * anything.\n      */\n     public static <STATE> PathEvaluator<STATE> all()\n     {\n@@ -63,7 +64,7 @@ public abstract class Evaluators\n \n     /**\n      * @return an evaluator which never prunes and includes everything except\n-     *         the first position, i.e. the the start node.\n+     * the first position, i.e. the the start node.\n      */\n     public static PathEvaluator excludeStartPosition()\n     {\n@@ -77,17 +78,17 @@ public abstract class Evaluators\n      * @param depth   the max depth to traverse to.\n      * @param <STATE> the type of the state object.\n      * @return Returns an {@link Evaluator} which includes positions down to\n-     *         {@code depth} and prunes everything deeper than that.\n+     * {@code depth} and prunes everything deeper than that.\n      */\n-    public static <STATE> PathEvaluator<STATE> toDepth( final int depth )\n+    public static <STATE> PathEvaluator<STATE> toDepth(final int depth)\n     {\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n                 int pathLength = path.length();\n-                return Evaluation.of( pathLength <= depth, pathLength < depth );\n+                return Evaluation.of(pathLength <= depth, pathLength < depth);\n             }\n         };\n     }\n@@ -99,16 +100,16 @@ public abstract class Evaluators\n      * @param depth   the depth to start include positions from.\n      * @param <STATE> the type of the state object.\n      * @return Returns an {@link Evaluator} which only includes positions from\n-     *         {@code depth} and deeper and never prunes anything.\n+     * {@code depth} and deeper and never prunes anything.\n      */\n-    public static <STATE> PathEvaluator<STATE> fromDepth( final int depth )\n+    public static <STATE> PathEvaluator<STATE> fromDepth(final int depth)\n     {\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n-                return Evaluation.ofIncludes( path.length() >= depth );\n+                return Evaluation.ofIncludes(path.length() >= depth);\n             }\n         };\n     }\n@@ -120,14 +121,14 @@ public abstract class Evaluators\n      * @param depth   the depth to start include positions from.\n      * @param <STATE> the type of the state object.\n      * @return Returns an {@link Evaluator} which only includes positions at\n-     *         {@code depth} and prunes everything deeper than that.\n+     * {@code depth} and prunes everything deeper than that.\n      */\n-    public static <STATE> PathEvaluator<STATE> atDepth( final int depth )\n+    public static <STATE> PathEvaluator<STATE> atDepth(final int depth)\n     {\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n                 return path.length() == depth ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_CONTINUE;\n             }\n@@ -143,18 +144,18 @@ public abstract class Evaluators\n      * @param maxDepth maximum depth a position must have to be included.\n      * @param <STATE>  the type of the state object.\n      * @return Returns an {@link Evaluator} which only includes positions between\n-     *         depths {@code minDepth} and {@code maxDepth}. It prunes everything deeper\n-     *         than {@code maxDepth}.\n+     * depths {@code minDepth} and {@code maxDepth}. It prunes everything deeper\n+     * than {@code maxDepth}.\n      */\n-    public static <STATE> PathEvaluator<STATE> includingDepths( final int minDepth, final int maxDepth )\n+    public static <STATE> PathEvaluator<STATE> includingDepths(final int minDepth, final int maxDepth)\n     {\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n                 int length = path.length();\n-                return Evaluation.of( length >= minDepth && length <= maxDepth, length < maxDepth );\n+                return Evaluation.of(length >= minDepth && length <= maxDepth, length < maxDepth);\n             }\n         };\n     }\n@@ -176,44 +177,45 @@ public abstract class Evaluators\n      *                            paths with.\n      * @param <STATE>             the type of the state object.\n      * @return an {@link Evaluator} which compares the type of the last relationship\n-     *         in a {@link Path} to a given set of relationship types.\n+     * in a {@link Path} to a given set of relationship types.\n      */\n-    public static <STATE> PathEvaluator<STATE> lastRelationshipTypeIs( final Evaluation evaluationIfMatch,\n-            final Evaluation evaluationIfNoMatch, final RelationshipType type, RelationshipType... orAnyOfTheseTypes )\n+    public static <STATE> PathEvaluator<STATE> lastRelationshipTypeIs(final Evaluation evaluationIfMatch,\n+                                                                      final Evaluation evaluationIfNoMatch, final RelationshipType type,\n+                                                                      RelationshipType... orAnyOfTheseTypes)\n     {\n-        if ( orAnyOfTheseTypes.length == 0 )\n+        if (orAnyOfTheseTypes.length == 0)\n         {\n             return new PathEvaluator.Adapter<>()\n             {\n                 @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n+                public Evaluation evaluate(Path path, BranchState state)\n                 {\n                     Relationship rel = path.lastRelationship();\n-                    return rel != null && rel.isType( type ) ? evaluationIfMatch : evaluationIfNoMatch;\n+                    return rel != null && rel.isType(type) ? evaluationIfMatch : evaluationIfNoMatch;\n                 }\n             };\n         }\n \n         final Set<String> expectedTypes = new HashSet<>();\n-        expectedTypes.add( type.name() );\n-        for ( RelationshipType otherType : orAnyOfTheseTypes )\n+        expectedTypes.add(type.name());\n+        for (RelationshipType otherType : orAnyOfTheseTypes)\n         {\n-            expectedTypes.add( otherType.name() );\n+            expectedTypes.add(otherType.name());\n         }\n \n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n                 Relationship lastRelationship = path.lastRelationship();\n-                if ( lastRelationship == null )\n+                if (lastRelationship == null)\n                 {\n                     return evaluationIfNoMatch;\n                 }\n \n-                return expectedTypes.contains( lastRelationship.getType().name() ) ?\n-                       evaluationIfMatch : evaluationIfNoMatch;\n+                return expectedTypes.contains(lastRelationship.getType().name()) ?\n+                  evaluationIfMatch : evaluationIfNoMatch;\n             }\n         };\n     }\n@@ -225,16 +227,16 @@ public abstract class Evaluators\n      *                          it's considered a match.\n      * @param <STATE>           the type of the state object.\n      * @return an {@link Evaluator} which compares the type of the last relationship\n-     *         in a {@link Path} to a given set of relationship types.\n+     * in a {@link Path} to a given set of relationship types.\n      * @see #lastRelationshipTypeIs(Evaluation, Evaluation, RelationshipType, RelationshipType...)\n-     *      Uses {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch}\n-     *      and {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n+     * Uses {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch}\n+     * and {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n      */\n-    public static <STATE> PathEvaluator<STATE> includeWhereLastRelationshipTypeIs( RelationshipType type,\n-            RelationshipType... orAnyOfTheseTypes )\n+    public static <STATE> PathEvaluator<STATE> includeWhereLastRelationshipTypeIs(RelationshipType type,\n+                                                                                  RelationshipType... orAnyOfTheseTypes)\n     {\n-        return lastRelationshipTypeIs( Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE,\n-                type, orAnyOfTheseTypes );\n+        return lastRelationshipTypeIs(Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE,\n+          type, orAnyOfTheseTypes);\n     }\n \n     /**\n@@ -244,16 +246,16 @@ public abstract class Evaluators\n      *                          it's considered a match.\n      * @param <STATE>           the type of the state object.\n      * @return an {@link Evaluator} which compares the type of the last relationship\n-     *         in a {@link Path} to a given set of relationship types.\n+     * in a {@link Path} to a given set of relationship types.\n      * @see #lastRelationshipTypeIs(Evaluation, Evaluation, RelationshipType, RelationshipType...)\n-     *      Uses {@link Evaluation#INCLUDE_AND_PRUNE} for {@code evaluationIfMatch}\n-     *      and {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n+     * Uses {@link Evaluation#INCLUDE_AND_PRUNE} for {@code evaluationIfMatch}\n+     * and {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n      */\n-    public static <STATE> PathEvaluator<STATE> pruneWhereLastRelationshipTypeIs( RelationshipType type,\n-            RelationshipType... orAnyOfTheseTypes )\n+    public static <STATE> PathEvaluator<STATE> pruneWhereLastRelationshipTypeIs(RelationshipType type,\n+                                                                                RelationshipType... orAnyOfTheseTypes)\n     {\n-        return lastRelationshipTypeIs( Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE,\n-                type, orAnyOfTheseTypes );\n+        return lastRelationshipTypeIs(Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE,\n+          type, orAnyOfTheseTypes);\n     }\n \n     /**\n@@ -267,40 +269,40 @@ public abstract class Evaluators\n      * @param possibleEndNodes    a set of nodes to match to end nodes in paths.\n      * @param <STATE>             the type of the state object.\n      * @return an {@link Evaluator} which will return {@code evaluationIfMatch} if\n-     *         {@link Path#endNode()} for a given path is any of {@code nodes},\n-     *         else {@code evaluationIfNoMatch}.\n+     * {@link Path#endNode()} for a given path is any of {@code nodes},\n+     * else {@code evaluationIfNoMatch}.\n      */\n-    public static <STATE> PathEvaluator<STATE> endNodeIs( final Evaluation evaluationIfMatch, final Evaluation\n-        evaluationIfNoMatch,\n-            Node... possibleEndNodes )\n+    public static <STATE> PathEvaluator<STATE> endNodeIs(final Evaluation evaluationIfMatch, final Evaluation\n+      evaluationIfNoMatch,\n+                                                         Node... possibleEndNodes)\n     {\n-        if ( possibleEndNodes.length == 1 )\n+        if (possibleEndNodes.length == 1)\n         {\n             final Node target = possibleEndNodes[0];\n             return new PathEvaluator.Adapter<>()\n             {\n                 @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n+                public Evaluation evaluate(Path path, BranchState state)\n                 {\n-                    return target.equals( path.endNode() ) ? evaluationIfMatch : evaluationIfNoMatch;\n+                    return target.equals(path.endNode()) ? evaluationIfMatch : evaluationIfNoMatch;\n                 }\n             };\n         }\n \n-        final Set<Node> endNodes = new HashSet<>( asList( possibleEndNodes ) );\n+        final Set<Node> endNodes = new HashSet<>(asList(possibleEndNodes));\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n-                return endNodes.contains( path.endNode() ) ? evaluationIfMatch : evaluationIfNoMatch;\n+                return endNodes.contains(path.endNode()) ? evaluationIfMatch : evaluationIfNoMatch;\n             }\n         };\n     }\n \n     /**\n      * Include paths with the specified end nodes.\n-     *\n+     * <p>\n      * Uses Evaluators#endNodeIs(Evaluation, Evaluation, Node...) with\n      * {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch} and\n      * {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n@@ -309,14 +311,14 @@ public abstract class Evaluators\n      * @param <STATE> the type of the state object.\n      * @return paths where the end node is one of {@code nodes}\n      */\n-    public static <STATE> PathEvaluator<STATE> includeWhereEndNodeIs( Node... nodes )\n+    public static <STATE> PathEvaluator<STATE> includeWhereEndNodeIs(Node... nodes)\n     {\n-        return endNodeIs( Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE, nodes );\n+        return endNodeIs(Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE, nodes);\n     }\n \n-    public static <STATE> PathEvaluator<STATE> pruneWhereEndNodeIs( Node... nodes )\n+    public static <STATE> PathEvaluator<STATE> pruneWhereEndNodeIs(Node... nodes)\n     {\n-        return endNodeIs( Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE, nodes );\n+        return endNodeIs(Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE, nodes);\n     }\n \n     /**\n@@ -327,21 +329,21 @@ public abstract class Evaluators\n      *                to be included.\n      * @param <STATE> the type of the state object.\n      * @return {@link Evaluation#INCLUDE_AND_CONTINUE} if all {@code nodes}\n-     *         exist in a given {@link Path}, otherwise\n-     *         {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n+     * exist in a given {@link Path}, otherwise\n+     * {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n      */\n-    public static <STATE> PathEvaluator<STATE> includeIfContainsAll( final Node... nodes )\n+    public static <STATE> PathEvaluator<STATE> includeIfContainsAll(final Node... nodes)\n     {\n-        if ( nodes.length == 1 )\n+        if (nodes.length == 1)\n         {\n             return new PathEvaluator.Adapter<>()\n             {\n                 @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n+                public Evaluation evaluate(Path path, BranchState state)\n                 {\n-                    for ( Node node : path.reverseNodes() )\n+                    for (Node node : path.reverseNodes())\n                     {\n-                        if ( node.equals( nodes[0] ) )\n+                        if (node.equals(nodes[0]))\n                         {\n                             return Evaluation.INCLUDE_AND_CONTINUE;\n                         }\n@@ -351,16 +353,16 @@ public abstract class Evaluators\n             };\n         }\n \n-        final Set<Node> fullSet = new HashSet<>( asList( nodes ) );\n+        final Set<Node> fullSet = new HashSet<>(asList(nodes));\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n-                Set<Node> set = new HashSet<>( fullSet );\n-                for ( Node node : path.reverseNodes() )\n+                Set<Node> set = new HashSet<>(fullSet);\n+                for (Node node : path.reverseNodes())\n                 {\n-                    if ( set.remove( node ) && set.isEmpty() )\n+                    if (set.remove(node) && set.isEmpty())\n                     {\n                         return Evaluation.INCLUDE_AND_CONTINUE;\n                     }\n@@ -378,19 +380,19 @@ public abstract class Evaluators\n      *                   to include a path it will be included.\n      * @param <STATE>    the type of the state object.\n      * @return an {@link Evaluator} which decides to include a path if any of the supplied\n-     *         evaluators wants to include it.\n+     * evaluators wants to include it.\n      */\n-    public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny( final PathEvaluator... evaluators )\n+    public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny(final PathEvaluator... evaluators)\n     {\n         return new PathEvaluator.Adapter<>()\n         {\n-            @SuppressWarnings( \"unchecked\" )\n+            @SuppressWarnings(\"unchecked\")\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n-                for ( PathEvaluator evaluator : evaluators )\n+                for (PathEvaluator evaluator : evaluators)\n                 {\n-                    if ( evaluator.evaluate( path, state ).includes() )\n+                    if (evaluator.evaluate(path, state).includes())\n                     {\n                         return Evaluation.INCLUDE_AND_CONTINUE;\n                     }\n@@ -408,18 +410,18 @@ public abstract class Evaluators\n      *                   to include a path it will be included.\n      * @param <STATE>    the type of the state object.\n      * @return an {@link Evaluator} which decides to include a path if any of the supplied\n-     *         evaluators wants to include it.\n+     * evaluators wants to include it.\n      */\n-    public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny( final Evaluator... evaluators )\n+    public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny(final Evaluator... evaluators)\n     {\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n-                for ( Evaluator evaluator : evaluators )\n+                for (Evaluator evaluator : evaluators)\n                 {\n-                    if ( evaluator.evaluate( path ).includes() )\n+                    if (evaluator.evaluate(path).includes())\n                     {\n                         return Evaluation.INCLUDE_AND_CONTINUE;\n                     }\n@@ -432,40 +434,41 @@ public abstract class Evaluators\n     /**\n      * Returns {@link Evaluator}s for paths with the specified depth and with an end node from the list of\n      * possibleEndNodes.\n-     * @param depth The exact depth to filter the returned path evaluators.\n+     *\n+     * @param depth            The exact depth to filter the returned path evaluators.\n      * @param possibleEndNodes Filter for the possible nodes to end the path on.\n-     * @param <STATE> the type of the state object.\n+     * @param <STATE>          the type of the state object.\n      * @return {@link Evaluator}s for paths with the specified depth and with an end node from the list of\n      * possibleEndNodes.\n      */\n-    public static <STATE> PathEvaluator<STATE> endNodeIsAtDepth( final int depth, Node... possibleEndNodes )\n+    public static <STATE> PathEvaluator<STATE> endNodeIsAtDepth(final int depth, Node... possibleEndNodes)\n     {\n-        if ( possibleEndNodes.length == 1 )\n+        if (possibleEndNodes.length == 1)\n         {\n             final Node target = possibleEndNodes[0];\n             return new PathEvaluator.Adapter<>()\n             {\n                 @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n+                public Evaluation evaluate(Path path, BranchState state)\n                 {\n-                    if ( path.length() == depth )\n+                    if (path.length() == depth)\n                     {\n-                        return target.equals( path.endNode() ) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n+                        return target.equals(path.endNode()) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n                     }\n                     return Evaluation.EXCLUDE_AND_CONTINUE;\n                 }\n             };\n         }\n \n-        final Set<Node> endNodes = new HashSet<>( asList( possibleEndNodes ) );\n+        final Set<Node> endNodes = new HashSet<>(asList(possibleEndNodes));\n         return new PathEvaluator.Adapter<>()\n         {\n             @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+            public Evaluation evaluate(Path path, BranchState state)\n             {\n-                if ( path.length() == depth )\n+                if (path.length() == depth)\n                 {\n-                    return endNodes.contains( path.endNode() ) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n+                    return endNodes.contains(path.endNode()) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n                 }\n                 return Evaluation.EXCLUDE_AND_CONTINUE;\n             }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}