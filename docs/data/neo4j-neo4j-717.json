{
    "project_name": "neo4j-neo4j",
    "error_id": "717",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "405",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "442",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/717/TablePlanFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/717/TablePlanFormatter.java\nindex ccdc625a613..ca2d804e87c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/717/TablePlanFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/717/TablePlanFormatter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.prettyprint;\n \n import java.util.ArrayList;\n@@ -51,9 +52,9 @@ public class TablePlanFormatter\n     public static final String IDENTIFIERS = \"Identifiers\";\n     public static final String DETAILS = \"Details\";\n     public static final int MAX_DETAILS_COLUMN_WIDTH = 100;\n-    public static final Value ZERO_VALUE = Values.value( 0 );\n+    public static final Value ZERO_VALUE = Values.value(0);\n     private static final String UNNAMED_PATTERN_STRING = \"  (UNNAMED|FRESHID|AGGREGATION|NODE|REL)(\\\\d+)\";\n-    private static final Pattern UNNAMED_PATTERN = Pattern.compile( UNNAMED_PATTERN_STRING );\n+    private static final Pattern UNNAMED_PATTERN = Pattern.compile(UNNAMED_PATTERN_STRING);\n     private static final String OPERATOR = \"Operator\";\n     private static final String ESTIMATED_ROWS = \"Estimated Rows\";\n     private static final String ROWS = \"Rows\";\n@@ -64,320 +65,319 @@ public class TablePlanFormatter\n     private static final String MEMORY = \"Memory (Bytes)\";\n     private static final String OTHER = \"Other\";\n     private static final String SEPARATOR = \", \";\n-    private static final Pattern DEDUP_PATTERN = Pattern.compile( \"\\\\s*(\\\\S+)@\\\\d+\" );\n-    private static final List<String> HEADERS = asList( OPERATOR, DETAILS, ESTIMATED_ROWS, ROWS, HITS, MEMORY, PAGE_CACHE, TIME, IDENTIFIERS, ORDER, OTHER );\n+    private static final Pattern DEDUP_PATTERN = Pattern.compile(\"\\\\s*(\\\\S+)@\\\\d+\");\n+    private static final List<String> HEADERS = asList(OPERATOR, DETAILS, ESTIMATED_ROWS, ROWS, HITS, MEMORY, PAGE_CACHE, TIME, IDENTIFIERS, ORDER, OTHER);\n     private static final Set<String> IGNORED_ARGUMENTS = new LinkedHashSet<>(\n-            asList( \"Rows\", \"DbHits\", \"EstimatedRows\", \"planner\", \"planner-impl\", \"planner-version\", \"version\", \"runtime\", \"runtime-impl\", \"runtime-version\",\n-                    \"Time\", \"time\", \"source-code\", \"PageCacheMisses\", \"PageCacheHits\", \"PageCacheHitRatio\", \"Order\", \"Memory\", \"GlobalMemory\", \"Details\" ) );\n+      asList(\"Rows\", \"DbHits\", \"EstimatedRows\", \"planner\", \"planner-impl\", \"planner-version\", \"version\", \"runtime\", \"runtime-impl\", \"runtime-version\",\n+        \"Time\", \"time\", \"source-code\", \"PageCacheMisses\", \"PageCacheHits\", \"PageCacheHitRatio\", \"Order\", \"Memory\", \"GlobalMemory\", \"Details\"));\n \n-    private static void pad( int width, char chr, @Nonnull StringBuilder result )\n+    private static void pad(int width, char chr, @Nonnull StringBuilder result)\n     {\n-        result.append( OutputFormatter.repeat( chr, width ) );\n+        result.append(OutputFormatter.repeat(chr, width));\n     }\n \n-    private int width( @Nonnull String header, @Nonnull Map<String, Integer> columns )\n+    private int width(@Nonnull String header, @Nonnull Map<String, Integer> columns)\n     {\n-        return 2 + Math.max( header.length(), columns.get( header ) );\n+        return 2 + Math.max(header.length(), columns.get(header));\n     }\n \n-    private void divider( @Nonnull List<String> headers, @Nullable TableRow tableRow /*= null*/, @Nonnull StringBuilder result,\n-                          @Nonnull Map<String, Integer> columns )\n+    private void divider(@Nonnull List<String> headers, @Nullable TableRow tableRow /*= null*/, @Nonnull StringBuilder result,\n+                         @Nonnull Map<String, Integer> columns)\n     {\n-        for ( String header : headers )\n+        for (String header : headers)\n         {\n-            if ( tableRow != null && header.equals( OPERATOR ) && tableRow.connection.isPresent() )\n+            if (tableRow != null && header.equals(OPERATOR) && tableRow.connection.isPresent())\n             {\n-                result.append( \"|\" );\n+                result.append(\"|\");\n                 String connection = tableRow.connection.get();\n-                result.append( \" \" ).append( connection );\n-                pad( width( header, columns ) - connection.length() - 1, ' ', result );\n-            }\n-            else\n+                result.append(\" \").append(connection);\n+                pad(width(header, columns) - connection.length() - 1, ' ', result);\n+            } else\n             {\n-                result.append( \"+\" );\n-                pad( width( header, columns ), '-', result );\n+                result.append(\"+\");\n+                pad(width(header, columns), '-', result);\n             }\n         }\n-        result.append( \"+\" ).append( NEWLINE );\n+        result.append(\"+\").append(NEWLINE);\n     }\n \n     @Nonnull\n-    String formatPlan( @Nonnull Plan plan )\n+    String formatPlan(@Nonnull Plan plan)\n     {\n         Map<String, Integer> columns = new HashMap<>();\n-        List<TableRow> tableRows = accumulate( plan, new Root(), columns );\n+        List<TableRow> tableRows = accumulate(plan, new Root(), columns);\n \n         // Remove Identifiers column if we have a Details column\n         List<String> headers =\n-                HEADERS.stream().filter( header -> columns.containsKey( header ) && !(header.equals( IDENTIFIERS ) && columns.containsKey( DETAILS )) )\n-                       .collect( Collectors.toList() );\n+          HEADERS.stream().filter(header -> columns.containsKey(header) && !(header.equals(IDENTIFIERS) && columns.containsKey(DETAILS)))\n+            .collect(Collectors.toList());\n \n         StringBuilder result =\n-                new StringBuilder( (2 + NEWLINE.length() + headers.stream().mapToInt( h -> width( h, columns ) ).sum()) * (tableRows.size() * 2 + 3) );\n+          new StringBuilder((2 + NEWLINE.length() + headers.stream().mapToInt(h -> width(h, columns)).sum()) * (tableRows.size() * 2 + 3));\n \n         List<TableRow> allTableRows = new ArrayList<>();\n         Map<String, Cell> headerMap =\n-                headers.stream().map( header -> Pair.of( header, new LeftJustifiedCell( header ) ) ).collect( toMap( p -> p._1, p -> p._2 ) );\n-        allTableRows.add( new TableRow( OPERATOR, headerMap, Optional.empty() ) );\n-        allTableRows.addAll( tableRows );\n-        for ( int rowIndex = 0; rowIndex < allTableRows.size(); rowIndex++ )\n-        {\n-            TableRow tableRow = allTableRows.get( rowIndex );\n-            divider( headers, tableRow, result, columns );\n-            for ( int rowLineIndex = 0; rowLineIndex < tableRow.height; rowLineIndex++ )\n+          headers.stream().map(header -> Pair.of(header, new LeftJustifiedCell(header))).collect(toMap(p -> p._1, p -> p._2));\n+        allTableRows.add(new TableRow(OPERATOR, headerMap, Optional.empty()));\n+        allTableRows.addAll(tableRows);\n+        for (int rowIndex = 0; rowIndex < allTableRows.size(); rowIndex++)\n+        {\n+            TableRow tableRow = allTableRows.get(rowIndex);\n+            divider(headers, tableRow, result, columns);\n+            for (int rowLineIndex = 0; rowLineIndex < tableRow.height; rowLineIndex++)\n             {\n-                for ( String header : headers )\n+                for (String header : headers)\n                 {\n-                    Cell cell = tableRow.get( header );\n+                    Cell cell = tableRow.get(header);\n                     String defaultText = \"\";\n-                    if ( header.equals( OPERATOR ) && rowIndex + 1 < allTableRows.size() )\n+                    if (header.equals(OPERATOR) && rowIndex + 1 < allTableRows.size())\n                     {\n-                        defaultText = allTableRows.get( rowIndex + 1 ).connection.orElse( \"\" ).replace( '\\\\', ' ' );\n+                        defaultText = allTableRows.get(rowIndex + 1).connection.orElse(\"\").replace('\\\\', ' ');\n                     }\n-                    result.append( \"| \" );\n-                    int columnWidth = width( header, columns );\n-                    cell.writePaddedLine( rowLineIndex, defaultText, columnWidth, result );\n-                    result.append( \" \" );\n+                    result.append(\"| \");\n+                    int columnWidth = width(header, columns);\n+                    cell.writePaddedLine(rowLineIndex, defaultText, columnWidth, result);\n+                    result.append(\" \");\n                 }\n-                result.append( \"|\" ).append( NEWLINE );\n+                result.append(\"|\").append(NEWLINE);\n             }\n         }\n-        divider( headers, null, result, columns );\n+        divider(headers, null, result, columns);\n \n         return result.toString();\n     }\n \n     @Nonnull\n-    private String serialize( @Nonnull String key, @Nonnull Value v )\n+    private String serialize(@Nonnull String key, @Nonnull Value v)\n     {\n-        switch ( key )\n-        {\n-        case \"ColumnsLeft\":\n-            return removeGeneratedNames( v.asString() );\n-        case \"LegacyExpression\":\n-            return removeGeneratedNames( v.asString() );\n-        case \"Expression\":\n-            return removeGeneratedNames( v.asString() );\n-        case \"UpdateActionName\":\n-            return v.asString();\n-        case \"LegacyIndex\":\n-            return v.toString();\n-        case \"version\":\n-            return v.toString();\n-        case \"planner\":\n-            return v.toString();\n-        case \"planner-impl\":\n-            return v.toString();\n-        case \"runtime\":\n-            return v.toString();\n-        case \"runtime-impl\":\n-            return v.toString();\n-        case \"MergePattern\":\n-            return \"MergePattern(\" + v.toString() + \")\";\n-        case \"DbHits\":\n-            return v.asNumber().toString();\n-        case \"Rows\":\n-            return v.asNumber().toString();\n-        case \"Time\":\n-            return v.asNumber().toString();\n-        case \"EstimatedRows\":\n-            return v.asNumber().toString();\n-        case \"LabelName\":\n-            return v.asString();\n-        case \"KeyNames\":\n-            return removeGeneratedNames( v.asString() );\n-        case \"KeyExpressions\":\n-            return String.join( SEPARATOR, v.asList( Value::asString ) );\n-\n-        case \"ExpandExpression\":\n-            return removeGeneratedNames( v.asString() );\n-        case \"Index\":\n-            return v.asString();\n-        case \"PrefixIndex\":\n-            return v.asString();\n-        case \"InequalityIndex\":\n-            return v.asString();\n-        case \"EntityByIdRhs\":\n-            return v.asString();\n-        case \"PageCacheMisses\":\n-            return v.asNumber().toString();\n-        case \"Details\":\n-            return v.asString();\n-        default:\n-            return v.asObject().toString();\n+        switch (key)\n+        {\n+            case \"ColumnsLeft\":\n+                return removeGeneratedNames(v.asString());\n+            case \"LegacyExpression\":\n+                return removeGeneratedNames(v.asString());\n+            case \"Expression\":\n+                return removeGeneratedNames(v.asString());\n+            case \"UpdateActionName\":\n+                return v.asString();\n+            case \"LegacyIndex\":\n+                return v.toString();\n+            case \"version\":\n+                return v.toString();\n+            case \"planner\":\n+                return v.toString();\n+            case \"planner-impl\":\n+                return v.toString();\n+            case \"runtime\":\n+                return v.toString();\n+            case \"runtime-impl\":\n+                return v.toString();\n+            case \"MergePattern\":\n+                return \"MergePattern(\" + v.toString() + \")\";\n+            case \"DbHits\":\n+                return v.asNumber().toString();\n+            case \"Rows\":\n+                return v.asNumber().toString();\n+            case \"Time\":\n+                return v.asNumber().toString();\n+            case \"EstimatedRows\":\n+                return v.asNumber().toString();\n+            case \"LabelName\":\n+                return v.asString();\n+            case \"KeyNames\":\n+                return removeGeneratedNames(v.asString());\n+            case \"KeyExpressions\":\n+                return String.join(SEPARATOR, v.asList(Value::asString));\n+\n+            case \"ExpandExpression\":\n+                return removeGeneratedNames(v.asString());\n+            case \"Index\":\n+                return v.asString();\n+            case \"PrefixIndex\":\n+                return v.asString();\n+            case \"InequalityIndex\":\n+                return v.asString();\n+            case \"EntityByIdRhs\":\n+                return v.asString();\n+            case \"PageCacheMisses\":\n+                return v.asNumber().toString();\n+            case \"Details\":\n+                return v.asString();\n+            default:\n+                return v.asObject().toString();\n         }\n     }\n \n     @Nonnull\n-    private Stream<List<TableRow>> children( @Nonnull Plan plan, Level level, @Nonnull Map<String, Integer> columns )\n+    private Stream<List<TableRow>> children(@Nonnull Plan plan, Level level, @Nonnull Map<String, Integer> columns)\n     {\n         List<? extends Plan> c = plan.children();\n-        switch ( c.size() )\n+        switch (c.size())\n         {\n-        case 0:\n-            return Stream.empty();\n-        case 1:\n-            return Stream.of( accumulate( c.get( 0 ), level.child(), columns ) );\n-        case 2:\n-            return Stream.of( accumulate( c.get( 1 ), level.fork(), columns ), accumulate( c.get( 0 ), level.child(), columns ) );\n-        default:\n-            throw new IllegalStateException( \"Plan has more than 2 children \" + c );\n+            case 0:\n+                return Stream.empty();\n+            case 1:\n+                return Stream.of(accumulate(c.get(0), level.child(), columns));\n+            case 2:\n+                return Stream.of(accumulate(c.get(1), level.fork(), columns), accumulate(c.get(0), level.child(), columns));\n+            default:\n+                throw new IllegalStateException(\"Plan has more than 2 children \" + c);\n         }\n     }\n \n     @Nonnull\n-    private List<TableRow> accumulate( @Nonnull Plan plan, @Nonnull Level level, @Nonnull Map<String, Integer> columns )\n+    private List<TableRow> accumulate(@Nonnull Plan plan, @Nonnull Level level, @Nonnull Map<String, Integer> columns)\n     {\n         String line = level.line() + plan.operatorType(); // wa plan.name\n-        mapping( OPERATOR, new LeftJustifiedCell( line ), columns );\n+        mapping(OPERATOR, new LeftJustifiedCell(line), columns);\n \n         return Stream.concat(\n-                Stream.of( new TableRow( line, details( plan, columns ), level.connector() ) ),\n-                children( plan, level, columns ).flatMap( Collection::stream ) )\n-                     .collect( Collectors.toList() );\n+          Stream.of(new TableRow(line, details(plan, columns), level.connector())),\n+          children(plan, level, columns).flatMap(Collection::stream))\n+          .collect(Collectors.toList());\n     }\n \n     @Nonnull\n-    private Map<String, Cell> details( @Nonnull Plan plan, @Nonnull Map<String, Integer> columns )\n+    private Map<String, Cell> details(@Nonnull Plan plan, @Nonnull Map<String, Integer> columns)\n     {\n         Map<String, Value> args = plan.arguments();\n \n         Stream<Optional<Pair<String, Cell>>> formattedPlan = args.entrySet().stream()\n-                                                                 .map( e ->\n-                                                                       {\n-                                                                           Value value = e.getValue();\n-                                                                           switch ( e.getKey() )\n-                                                                           {\n-                                                                           case \"EstimatedRows\":\n-                                                                               return mapping( ESTIMATED_ROWS, new RightJustifiedCell(\n-                                                                                       format( value.asDouble() ) ), columns );\n-                                                                           case \"Rows\":\n-                                                                               return mapping( ROWS, new RightJustifiedCell(\n-                                                                                       value.asNumber().toString() ), columns );\n-                                                                           case \"DbHits\":\n-                                                                               return mapping( HITS, new RightJustifiedCell(\n-                                                                                       value.asNumber().toString() ), columns );\n-                                                                           case \"PageCacheHits\":\n-                                                                               return mapping( PAGE_CACHE, new RightJustifiedCell(\n-                                                                                       String.format( \"%s/%s\", value.asNumber(),\n-                                                                                                      args.getOrDefault( \"PageCacheMisses\",\n-                                                                                                                         ZERO_VALUE )\n-                                                                                                          .asNumber() ) ), columns );\n-                                                                           case \"Time\":\n-                                                                               return mapping( TIME, new RightJustifiedCell(\n-                                                                                                       String.format( \"%.3f\",\n-                                                                                                                      value.asLong() / 1000000.0d ) ),\n-                                                                                               columns );\n-                                                                           case \"Order\":\n-                                                                               return mapping( ORDER, new LeftJustifiedCell(\n-                                                                                       String.format( \"%s\", value.asString() ) ), columns );\n-                                                                           case \"Details\":\n-                                                                               return mapping( DETAILS, new LeftJustifiedCell(\n-                                                                                       splitDetails( value.asString() ) ), columns );\n-                                                                           case \"Memory\":\n-                                                                               return mapping( MEMORY, new RightJustifiedCell(\n-                                                                                                       String.format( \"%s\", value.asNumber().toString() ) ),\n-                                                                                               columns );\n-                                                                           default:\n-                                                                               return Optional.empty();\n-                                                                           }\n-                                                                       } );\n+          .map(e ->\n+          {\n+              Value value = e.getValue();\n+              switch (e.getKey())\n+              {\n+                  case \"EstimatedRows\":\n+                      return mapping(ESTIMATED_ROWS, new RightJustifiedCell(\n+                        format(value.asDouble())), columns);\n+                  case \"Rows\":\n+                      return mapping(ROWS, new RightJustifiedCell(\n+                        value.asNumber().toString()), columns);\n+                  case \"DbHits\":\n+                      return mapping(HITS, new RightJustifiedCell(\n+                        value.asNumber().toString()), columns);\n+                  case \"PageCacheHits\":\n+                      return mapping(PAGE_CACHE, new RightJustifiedCell(\n+                        String.format(\"%s/%s\", value.asNumber(),\n+                          args.getOrDefault(\"PageCacheMisses\",\n+                            ZERO_VALUE)\n+                            .asNumber())), columns);\n+                  case \"Time\":\n+                      return mapping(TIME, new RightJustifiedCell(\n+                          String.format(\"%.3f\",\n+                            value.asLong() / 1000000.0d)),\n+                        columns);\n+                  case \"Order\":\n+                      return mapping(ORDER, new LeftJustifiedCell(\n+                        String.format(\"%s\", value.asString())), columns);\n+                  case \"Details\":\n+                      return mapping(DETAILS, new LeftJustifiedCell(\n+                        splitDetails(value.asString())), columns);\n+                  case \"Memory\":\n+                      return mapping(MEMORY, new RightJustifiedCell(\n+                          String.format(\"%s\", value.asNumber().toString())),\n+                        columns);\n+                  default:\n+                      return Optional.empty();\n+              }\n+          });\n \n         return Stream.concat(\n-                formattedPlan,\n-                Stream.of(\n-                        Optional.of( Pair.of( IDENTIFIERS, new LeftJustifiedCell( identifiers( plan, columns ) ) ) ),\n-                        Optional.of( Pair.of( OTHER, new LeftJustifiedCell( other( plan, columns ) ) ) ) ) )\n-                     .filter( Optional::isPresent )\n-                     .collect( toMap( o -> o.get()._1, o -> o.get()._2 ) );\n+          formattedPlan,\n+          Stream.of(\n+            Optional.of(Pair.of(IDENTIFIERS, new LeftJustifiedCell(identifiers(plan, columns)))),\n+            Optional.of(Pair.of(OTHER, new LeftJustifiedCell(other(plan, columns))))))\n+          .filter(Optional::isPresent)\n+          .collect(toMap(o -> o.get()._1, o -> o.get()._2));\n     }\n \n     @Nonnull\n-    private Optional<Pair<String, Cell>> mapping( @Nonnull String key, @Nonnull Cell value, @Nonnull Map<String, Integer> columns )\n+    private Optional<Pair<String, Cell>> mapping(@Nonnull String key, @Nonnull Cell value, @Nonnull Map<String, Integer> columns)\n     {\n-        update( columns, key, value.length );\n-        return Optional.of( Pair.of( key, value ) );\n+        update(columns, key, value.length);\n+        return Optional.of(Pair.of(key, value));\n     }\n \n     @Nonnull\n-    private String replaceAllIn( @Nonnull Pattern pattern, @Nonnull String s, @Nonnull Function<Matcher, String> mapper )\n+    private String replaceAllIn(@Nonnull Pattern pattern, @Nonnull String s, @Nonnull Function<Matcher, String> mapper)\n     {\n         StringBuffer sb = new StringBuffer();\n-        Matcher matcher = pattern.matcher( s );\n-        while ( matcher.find() )\n+        Matcher matcher = pattern.matcher(s);\n+        while (matcher.find())\n         {\n-            matcher.appendReplacement( sb, mapper.apply( matcher ) );\n+            matcher.appendReplacement(sb, mapper.apply(matcher));\n         }\n-        matcher.appendTail( sb );\n+        matcher.appendTail(sb);\n         return sb.toString();\n     }\n \n     @Nonnull\n-    private String removeGeneratedNames( @Nonnull String s )\n+    private String removeGeneratedNames(@Nonnull String s)\n     {\n-        String named = replaceAllIn( UNNAMED_PATTERN, s, m -> \"anon[\" + m.group( 2 ) + \"]\" );\n-        return replaceAllIn( DEDUP_PATTERN, named, m -> m.group( 1 ) );\n+        String named = replaceAllIn(UNNAMED_PATTERN, s, m -> \"anon[\" + m.group(2) + \"]\");\n+        return replaceAllIn(DEDUP_PATTERN, named, m -> m.group(1));\n     }\n \n-    private void update( @Nonnull Map<String, Integer> columns, @Nonnull String key, int length )\n+    private void update(@Nonnull Map<String, Integer> columns, @Nonnull String key, int length)\n     {\n-        columns.put( key, Math.max( columns.getOrDefault( key, 0 ), length ) );\n+        columns.put(key, Math.max(columns.getOrDefault(key, 0), length));\n     }\n \n     @Nonnull\n-    private String identifiers( @Nonnull Plan description, @Nonnull Map<String, Integer> columns )\n+    private String identifiers(@Nonnull Plan description, @Nonnull Map<String, Integer> columns)\n     {\n-        String result = description.identifiers().stream().map( this::removeGeneratedNames ).collect( joining( \", \" ) );\n-        if ( !result.isEmpty() )\n+        String result = description.identifiers().stream().map(this::removeGeneratedNames).collect(joining(\", \"));\n+        if (!result.isEmpty())\n         {\n-            update( columns, IDENTIFIERS, result.length() );\n+            update(columns, IDENTIFIERS, result.length());\n         }\n         return result;\n     }\n \n     @Nonnull\n-    private String other( @Nonnull Plan description, @Nonnull Map<String, Integer> columns )\n+    private String other(@Nonnull Plan description, @Nonnull Map<String, Integer> columns)\n     {\n-        String result = description.arguments().entrySet().stream().map( e ->\n-                                                                         {\n-                                                                             if ( !IGNORED_ARGUMENTS.contains( e.getKey() ) )\n-                                                                             {\n-                                                                                 return serialize( e.getKey(), e.getValue() );\n-                                                                             }\n-                                                                             return \"\";\n-                                                                         } ).filter( OutputFormatter::isNotBlank ).collect( Collectors.joining( \"; \" ) )\n-                                   .replaceAll( UNNAMED_PATTERN_STRING, \"\" );\n+        String result = description.arguments().entrySet().stream().map(e ->\n+        {\n+            if (!IGNORED_ARGUMENTS.contains(e.getKey()))\n+            {\n+                return serialize(e.getKey(), e.getValue());\n+            }\n+            return \"\";\n+        }).filter(OutputFormatter::isNotBlank).collect(Collectors.joining(\"; \"))\n+          .replaceAll(UNNAMED_PATTERN_STRING, \"\");\n \n-        if ( !result.isEmpty() )\n+        if (!result.isEmpty())\n         {\n-            update( columns, OTHER, result.length() );\n+            update(columns, OTHER, result.length());\n         }\n         return result;\n     }\n \n     @Nonnull\n-    private String format( @Nonnull Double v )\n+    private String format(@Nonnull Double v)\n     {\n-        if ( v.isNaN() )\n+        if (v.isNaN())\n         {\n             return v.toString();\n         }\n-        return String.valueOf( Math.round( v ) );\n+        return String.valueOf(Math.round(v));\n     }\n \n-    private String[] splitDetails( String original )\n+    private String[] splitDetails(String original)\n     {\n         List<String> detailsList = new ArrayList<>();\n \n         int currentPos = 0;\n-        while ( currentPos < original.length() )\n+        while (currentPos < original.length())\n         {\n-            int newPos = Math.min( original.length(), currentPos + MAX_DETAILS_COLUMN_WIDTH );\n-            detailsList.add( original.substring( currentPos, newPos ) );\n+            int newPos = Math.min(original.length(), currentPos + MAX_DETAILS_COLUMN_WIDTH);\n+            detailsList.add(original.substring(currentPos, newPos));\n             currentPos = newPos;\n         }\n \n-        return detailsList.toArray( new String[0] );\n+        return detailsList.toArray(new String[0]);\n     }\n \n     static class TableRow\n@@ -387,23 +387,22 @@ public class TablePlanFormatter\n         private final Optional<String> connection;\n         private final int height;\n \n-        TableRow( String tree, Map<String, Cell> cells, Optional<String> connection )\n+        TableRow(String tree, Map<String, Cell> cells, Optional<String> connection)\n         {\n             this.tree = tree;\n             this.cells = cells;\n             this.connection = connection == null ? Optional.empty() : connection;\n-            this.height = cells.values().stream().mapToInt( v -> v.lines.length ).max().orElse( 0 );\n+            this.height = cells.values().stream().mapToInt(v -> v.lines.length).max().orElse(0);\n         }\n \n-        Cell get( String key )\n+        Cell get(String key)\n         {\n-            if ( key.equals( TablePlanFormatter.OPERATOR ) )\n+            if (key.equals(TablePlanFormatter.OPERATOR))\n             {\n-                return new LeftJustifiedCell( tree );\n-            }\n-            else\n+                return new LeftJustifiedCell(tree);\n+            } else\n             {\n-                return cells.getOrDefault( key, new LeftJustifiedCell( \"\" ) );\n+                return cells.getOrDefault(key, new LeftJustifiedCell(\"\"));\n             }\n         }\n     }\n@@ -413,26 +412,25 @@ public class TablePlanFormatter\n         final int length;\n         final String[] lines;\n \n-        Cell( String[] lines )\n+        Cell(String[] lines)\n         {\n-            this.length = Stream.of( lines ).mapToInt( String::length ).max().orElse( 0 );\n+            this.length = Stream.of(lines).mapToInt(String::length).max().orElse(0);\n             this.lines = lines;\n         }\n \n-        abstract void writePaddedLine( int lineIndex, String orElseValue, int columnWidth, StringBuilder result );\n+        abstract void writePaddedLine(int lineIndex, String orElseValue, int columnWidth, StringBuilder result);\n \n-        protected int paddingWidth( int columnWidth, String line )\n+        protected int paddingWidth(int columnWidth, String line)\n         {\n             return columnWidth - line.length() - 2;\n         }\n \n-        protected String getLineOrElse( int lineIndex, String orElseValue )\n+        protected String getLineOrElse(int lineIndex, String orElseValue)\n         {\n-            if ( lineIndex < lines.length )\n+            if (lineIndex < lines.length)\n             {\n                 return lines[lineIndex];\n-            }\n-            else\n+            } else\n             {\n                 return orElseValue;\n             }\n@@ -441,33 +439,33 @@ public class TablePlanFormatter\n \n     static class LeftJustifiedCell extends Cell\n     {\n-        LeftJustifiedCell( String... lines )\n+        LeftJustifiedCell(String... lines)\n         {\n-            super( lines );\n+            super(lines);\n         }\n \n         @Override\n-        void writePaddedLine( int lineIndex, String orElseValue, int columnWidth, StringBuilder result )\n+        void writePaddedLine(int lineIndex, String orElseValue, int columnWidth, StringBuilder result)\n         {\n-            String line = getLineOrElse( lineIndex, orElseValue );\n-            result.append( line );\n-            pad( paddingWidth( columnWidth, line ), ' ', result );\n+            String line = getLineOrElse(lineIndex, orElseValue);\n+            result.append(line);\n+            pad(paddingWidth(columnWidth, line), ' ', result);\n         }\n     }\n \n     static class RightJustifiedCell extends Cell\n     {\n-        RightJustifiedCell( String... lines )\n+        RightJustifiedCell(String... lines)\n         {\n-            super( lines );\n+            super(lines);\n         }\n \n         @Override\n-        void writePaddedLine( int lineIndex, String orElseValue, int columnWidth, StringBuilder result )\n+        void writePaddedLine(int lineIndex, String orElseValue, int columnWidth, StringBuilder result)\n         {\n-            String line = getLineOrElse( lineIndex, orElseValue );\n-            pad( paddingWidth( columnWidth, line ), ' ', result );\n-            result.append( line );\n+            String line = getLineOrElse(lineIndex, orElseValue);\n+            pad(paddingWidth(columnWidth, line), ' ', result);\n+            result.append(line);\n         }\n     }\n \n@@ -487,13 +485,13 @@ public class TablePlanFormatter\n         @Override\n         Level child()\n         {\n-            return new Child( 1 );\n+            return new Child(1);\n         }\n \n         @Override\n         Level fork()\n         {\n-            return new Fork( 2 );\n+            return new Fork(2);\n         }\n \n         @Override\n@@ -513,7 +511,7 @@ public class TablePlanFormatter\n     {\n         private final int level;\n \n-        Child( int level )\n+        Child(int level)\n         {\n \n             this.level = level;\n@@ -522,25 +520,25 @@ public class TablePlanFormatter\n         @Override\n         Level child()\n         {\n-            return new Child( level );\n+            return new Child(level);\n         }\n \n         @Override\n         Level fork()\n         {\n-            return new Fork( level + 1 );\n+            return new Fork(level + 1);\n         }\n \n         @Override\n         String line()\n         {\n-            return repeat( \"| \", level - 1 ) + \"+\";\n+            return repeat(\"| \", level - 1) + \"+\";\n         }\n \n         @Override\n         Optional<String> connector()\n         {\n-            return Optional.of( repeat( \"| \", level ) );\n+            return Optional.of(repeat(\"| \", level));\n         }\n     }\n \n@@ -548,7 +546,7 @@ public class TablePlanFormatter\n     {\n         private final int level;\n \n-        Fork( int level )\n+        Fork(int level)\n         {\n \n             this.level = level;\n@@ -557,25 +555,25 @@ public class TablePlanFormatter\n         @Override\n         Level child()\n         {\n-            return new Child( level );\n+            return new Child(level);\n         }\n \n         @Override\n         Level fork()\n         {\n-            return new Fork( level + 1 );\n+            return new Fork(level + 1);\n         }\n \n         @Override\n         String line()\n         {\n-            return repeat( \"| \", level - 1 ) + \"+\";\n+            return repeat(\"| \", level - 1) + \"+\";\n         }\n \n         @Override\n         Optional<String> connector()\n         {\n-            return Optional.of( repeat( \"| \", level - 2 ) + \"|\\\\\" );\n+            return Optional.of(repeat(\"| \", level - 2) + \"|\\\\\");\n         }\n     }\n \n@@ -584,31 +582,31 @@ public class TablePlanFormatter\n         final T1 _1;\n         final T2 _2;\n \n-        private Pair( T1 _1, T2 _2 )\n+        private Pair(T1 _1, T2 _2)\n         {\n             this._1 = _1;\n             this._2 = _2;\n         }\n \n-        public static <T1, T2> Pair<T1, T2> of( T1 _1, T2 _2 )\n+        public static <T1, T2> Pair<T1, T2> of(T1 _1, T2 _2)\n         {\n-            return new Pair<>( _1, _2 );\n+            return new Pair<>(_1, _2);\n         }\n \n         @Override\n-        public boolean equals( Object o )\n+        public boolean equals(Object o)\n         {\n-            if ( this == o )\n+            if (this == o)\n             {\n                 return true;\n             }\n-            if ( o == null || getClass() != o.getClass() )\n+            if (o == null || getClass() != o.getClass())\n             {\n                 return false;\n             }\n \n             Pair<?, ?> pair = (Pair<?, ?>) o;\n-            return _1.equals( pair._1 ) && _2.equals( pair._2 );\n+            return _1.equals(pair._1) && _2.equals(pair._2);\n         }\n \n         @Override\n",
            "diff_size": 247
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "276",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/717/TablePlanFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/717/TablePlanFormatter.java\nindex ccdc625a613..a9ac368cfe5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/717/TablePlanFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/717/TablePlanFormatter.java\n@@ -242,8 +242,7 @@ public class TablePlanFormatter\n     {\n         Map<String, Value> args = plan.arguments();\n \n-        Stream<Optional<Pair<String, Cell>>> formattedPlan = args.entrySet().stream()\n-                                                                 .map( e ->\n+        Stream<Optional<Pair<String, Cell>>> formattedPlan = args.entrySet().stream().map( e ->\n                                                                        {\n                                                                            Value value = e.getValue();\n                                                                            switch ( e.getKey() )\n@@ -264,8 +263,7 @@ public class TablePlanFormatter\n                                                                                                                          ZERO_VALUE )\n                                                                                                           .asNumber() ) ), columns );\n                                                                            case \"Time\":\n-                                                                               return mapping( TIME, new RightJustifiedCell(\n-                                                                                                       String.format( \"%.3f\",\n+                                                                               return mapping( TIME, new RightJustifiedCell( String.format( \"%.3f\",\n                                                                                                                       value.asLong() / 1000000.0d ) ),\n                                                                                                columns );\n                                                                            case \"Order\":\n@@ -275,15 +273,13 @@ public class TablePlanFormatter\n                                                                                return mapping( DETAILS, new LeftJustifiedCell(\n                                                                                        splitDetails( value.asString() ) ), columns );\n                                                                            case \"Memory\":\n-                                                                               return mapping( MEMORY, new RightJustifiedCell(\n-                                                                                                       String.format( \"%s\", value.asNumber().toString() ) ),\n+                                                                               return mapping( MEMORY, new RightJustifiedCell( String.format( \"%s\", value.asNumber().toString() ) ),\n                                                                                                columns );\n                                                                            default:\n                                                                                return Optional.empty();\n                                                                            }\n                                                                        } );\n-\n-        return Stream.concat(\n+return Stream.concat(\n                 formattedPlan,\n                 Stream.of(\n                         Optional.of( Pair.of( IDENTIFIERS, new LeftJustifiedCell( identifiers( plan, columns ) ) ) ),\n@@ -347,8 +343,7 @@ public class TablePlanFormatter\n                                                                              return \"\";\n                                                                          } ).filter( OutputFormatter::isNotBlank ).collect( Collectors.joining( \"; \" ) )\n                                    .replaceAll( UNNAMED_PATTERN_STRING, \"\" );\n-\n-        if ( !result.isEmpty() )\n+if ( !result.isEmpty() )\n         {\n             update( columns, OTHER, result.length() );\n         }\n@@ -617,4 +612,4 @@ public class TablePlanFormatter\n             return 31 * _1.hashCode() + _2.hashCode();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}