{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1147",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1147/IdMappers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1147/IdMappers.java\nindex b5d5bfc9d23..6bf07f822cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1147/IdMappers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1147/IdMappers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache.idmapping;\n \n import java.util.function.LongFunction;\n@@ -44,96 +45,96 @@ import static org.neo4j.unsafe.impl.batchimport.cache.idmapping.string.TrackerFa\n  */\n public class IdMappers\n {\n-    private static class ActualIdMapper implements IdMapper\n+  private static class ActualIdMapper implements IdMapper\n+  {\n+    @Override\n+    public void put(Object inputId, long actualId, Group group)\n+    {   // No need to remember anything\n+    }\n+\n+    @Override\n+    public boolean needsPreparation()\n     {\n-        @Override\n-        public void put( Object inputId, long actualId, Group group )\n-        {   // No need to remember anything\n-        }\n-\n-        @Override\n-        public boolean needsPreparation()\n-        {\n-            return false;\n-        }\n-\n-        @Override\n-        public void prepare( LongFunction<Object> inputIdLookup, Collector collector, ProgressListener progress )\n-        {   // No need to prepare anything\n-        }\n-\n-        @Override\n-        public long get( Object inputId, Group group )\n-        {\n-            return (Long) inputId;\n-        }\n-\n-        @Override\n-        public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-        {   // No memory usage\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return getClass().getSimpleName();\n-        }\n-\n-        @Override\n-        public void close()\n-        {   // Nothing to close\n-        }\n-\n-        @Override\n-        public MemoryStatsVisitor.Visitable memoryEstimation( long numberOfNodes )\n-        {\n-            return MemoryStatsVisitor.NONE;\n-        }\n-\n-        @Override\n-        public PrimitiveLongIterator leftOverDuplicateNodesIds()\n-        {\n-            return PrimitiveLongCollections.emptyIterator();\n-        }\n+      return false;\n+    }\n+\n+    @Override\n+    public void prepare(LongFunction<Object> inputIdLookup, Collector collector, ProgressListener progress)\n+    {   // No need to prepare anything\n     }\n \n-    private IdMappers()\n+    @Override\n+    public long get(Object inputId, Group group)\n     {\n+      return (Long) inputId;\n     }\n \n-    /**\n-     * An {@link IdMapper} that doesn't touch the input ids, but just asserts that node ids arrive in ascending order.\n-     * This is for advanced usage and puts constraints on the input in that all node ids given as input\n-     * must be valid. There will not be further checks, other than that for order of the ids.\n-     */\n-    public static IdMapper actual()\n+    @Override\n+    public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+    {   // No memory usage\n+    }\n+\n+    @Override\n+    public String toString()\n     {\n-        return new ActualIdMapper();\n+      return getClass().getSimpleName();\n+    }\n+\n+    @Override\n+    public void close()\n+    {   // Nothing to close\n     }\n \n-    /**\n-     * An {@link IdMapper} capable of mapping {@link String strings} to long ids.\n-     *\n-     * @param cacheFactory {@link NumberArrayFactory} for allocating memory for the cache used by this index.\n-     * @param groups {@link Groups} containing all id groups.\n-     * @return {@link IdMapper} for when input ids are strings.\n-     */\n-    public static IdMapper strings( NumberArrayFactory cacheFactory, Groups groups )\n+    @Override\n+    public MemoryStatsVisitor.Visitable memoryEstimation(long numberOfNodes)\n     {\n-        return new EncodingIdMapper( cacheFactory, new StringEncoder(), Radix.STRING, NO_MONITOR, dynamic(), groups,\n-                numberOfCollisions -> new StringCollisionValues( cacheFactory, numberOfCollisions ) );\n+      return MemoryStatsVisitor.NONE;\n     }\n \n-    /**\n-     * An {@link IdMapper} capable of mapping {@link Long arbitrary longs} to long ids.\n-     *\n-     * @param cacheFactory {@link NumberArrayFactory} for allocating memory for the cache used by this index.\n-     * @param groups {@link Groups} containing all id groups.\n-     * @return {@link IdMapper} for when input ids are numbers.\n-     */\n-    public static IdMapper longs( NumberArrayFactory cacheFactory, Groups groups )\n+    @Override\n+    public PrimitiveLongIterator leftOverDuplicateNodesIds()\n     {\n-        return new EncodingIdMapper( cacheFactory, new LongEncoder(), Radix.LONG, NO_MONITOR, dynamic(), groups,\n-                numberOfCollisions -> new LongCollisionValues( cacheFactory, numberOfCollisions ) );\n+      return PrimitiveLongCollections.emptyIterator();\n     }\n+  }\n+\n+  private IdMappers()\n+  {\n+  }\n+\n+  /**\n+   * An {@link IdMapper} that doesn't touch the input ids, but just asserts that node ids arrive in ascending order.\n+   * This is for advanced usage and puts constraints on the input in that all node ids given as input\n+   * must be valid. There will not be further checks, other than that for order of the ids.\n+   */\n+  public static IdMapper actual()\n+  {\n+    return new ActualIdMapper();\n+  }\n+\n+  /**\n+   * An {@link IdMapper} capable of mapping {@link String strings} to long ids.\n+   *\n+   * @param cacheFactory {@link NumberArrayFactory} for allocating memory for the cache used by this index.\n+   * @param groups       {@link Groups} containing all id groups.\n+   * @return {@link IdMapper} for when input ids are strings.\n+   */\n+  public static IdMapper strings(NumberArrayFactory cacheFactory, Groups groups)\n+  {\n+    return new EncodingIdMapper(cacheFactory, new StringEncoder(), Radix.STRING, NO_MONITOR, dynamic(), groups,\n+        numberOfCollisions -> new StringCollisionValues(cacheFactory, numberOfCollisions));\n+  }\n+\n+  /**\n+   * An {@link IdMapper} capable of mapping {@link Long arbitrary longs} to long ids.\n+   *\n+   * @param cacheFactory {@link NumberArrayFactory} for allocating memory for the cache used by this index.\n+   * @param groups       {@link Groups} containing all id groups.\n+   * @return {@link IdMapper} for when input ids are numbers.\n+   */\n+  public static IdMapper longs(NumberArrayFactory cacheFactory, Groups groups)\n+  {\n+    return new EncodingIdMapper(cacheFactory, new LongEncoder(), Radix.LONG, NO_MONITOR, dynamic(), groups,\n+        numberOfCollisions -> new LongCollisionValues(cacheFactory, numberOfCollisions));\n+  }\n }\n",
            "diff_size": 136
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1147/IdMappers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1147/IdMappers.java\nindex b5d5bfc9d23..6592e8bf777 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1147/IdMappers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1147/IdMappers.java\n@@ -48,7 +48,8 @@ public class IdMappers\n     {\n         @Override\n         public void put( Object inputId, long actualId, Group group )\n-        {   // No need to remember anything\n+        {\n+    // No need to remember anything\n         }\n \n         @Override\n@@ -59,7 +60,8 @@ public class IdMappers\n \n         @Override\n         public void prepare( LongFunction<Object> inputIdLookup, Collector collector, ProgressListener progress )\n-        {   // No need to prepare anything\n+        {\n+    // No need to prepare anything\n         }\n \n         @Override\n@@ -70,7 +72,8 @@ public class IdMappers\n \n         @Override\n         public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-        {   // No memory usage\n+        {\n+    // No memory usage\n         }\n \n         @Override\n@@ -81,7 +84,8 @@ public class IdMappers\n \n         @Override\n         public void close()\n-        {   // Nothing to close\n+        {\n+    // Nothing to close\n         }\n \n         @Override\n@@ -136,4 +140,4 @@ public class IdMappers\n         return new EncodingIdMapper( cacheFactory, new LongEncoder(), Radix.LONG, NO_MONITOR, dynamic(), groups,\n                 numberOfCollisions -> new LongCollisionValues( cacheFactory, numberOfCollisions ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}