{
    "project_name": "neo4j-neo4j",
    "error_id": "3175",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3175/TransactionExecutionStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3175/TransactionExecutionStatistic.java\nindex 9583da96ca9..de771953524 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3175/TransactionExecutionStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3175/TransactionExecutionStatistic.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import org.neo4j.time.SystemNanoClock;\n@@ -50,16 +51,16 @@ public class TransactionExecutionStatistic\n         pageHits = 0;\n     }\n \n-    public TransactionExecutionStatistic( KernelTransactionImplementation tx, SystemNanoClock clock, long startTimeMillis )\n+    public TransactionExecutionStatistic(KernelTransactionImplementation tx, SystemNanoClock clock, long startTimeMillis)\n     {\n         long nowMillis = clock.millis();\n         long nowNanos = clock.nanos();\n         KernelTransactionImplementation.Statistics statistics = tx.getStatistics();\n-        this.waitTimeMillis = NANOSECONDS.toMillis( statistics.getWaitingTimeNanos( nowNanos ) );\n-        this.heapAllocatedBytes = nullIfNegative( statistics.heapAllocatedBytes() );\n-        this.nativeAllocatedBytes = nullIfNegative( statistics.usedNativeMemory() );\n-        this.estimatedUsedHeapMemory = nullIfNegative( statistics.estimatedHeapMemory() );\n-        this.cpuTimeMillis = nullIfNegative( statistics.cpuTimeMillis() );\n+        this.waitTimeMillis = NANOSECONDS.toMillis(statistics.getWaitingTimeNanos(nowNanos));\n+        this.heapAllocatedBytes = nullIfNegative(statistics.heapAllocatedBytes());\n+        this.nativeAllocatedBytes = nullIfNegative(statistics.usedNativeMemory());\n+        this.estimatedUsedHeapMemory = nullIfNegative(statistics.estimatedHeapMemory());\n+        this.cpuTimeMillis = nullIfNegative(statistics.cpuTimeMillis());\n         this.pageFaults = statistics.totalTransactionPageCacheFaults();\n         this.pageHits = statistics.totalTransactionPageCacheHits();\n         this.elapsedTimeMillis = nowMillis - startTimeMillis;\n@@ -111,7 +112,7 @@ public class TransactionExecutionStatistic\n         return pageFaults;\n     }\n \n-    private static Long nullIfNegative( long value )\n+    private static Long nullIfNegative(long value)\n     {\n         return value >= 0 ? value : null;\n     }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}