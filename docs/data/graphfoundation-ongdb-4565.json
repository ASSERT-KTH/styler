{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4565",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4565/BidirectionalTraverserIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4565/BidirectionalTraverserIterator.java\nindex 78f9721121c..75b6fb85913 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4565/BidirectionalTraverserIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4565/BidirectionalTraverserIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.EnumMap;\n@@ -41,152 +42,152 @@ import org.neo4j.graphdb.traversal.UniquenessFilter;\n \n class BidirectionalTraverserIterator extends AbstractTraverserIterator\n {\n-    private final BranchCollisionDetector collisionDetector;\n-    private Iterator<Path> foundPaths;\n-    private SideSelector selector;\n-    private final Map<Direction, Side> sides = new EnumMap<>( Direction.class );\n-    private final BidirectionalUniquenessFilter uniqueness;\n-\n-    private static class Side\n-    {\n-        private final MonoDirectionalTraversalDescription description;\n-\n-        Side( MonoDirectionalTraversalDescription description )\n-        {\n-            this.description = description;\n-        }\n-    }\n+  private final BranchCollisionDetector collisionDetector;\n+  private Iterator<Path> foundPaths;\n+  private SideSelector selector;\n+  private final Map<Direction, Side> sides = new EnumMap<>(Direction.class);\n+  private final BidirectionalUniquenessFilter uniqueness;\n \n-    BidirectionalTraverserIterator( Resource resource,\n-                                    MonoDirectionalTraversalDescription start,\n-                                    MonoDirectionalTraversalDescription end,\n-                                    SideSelectorPolicy sideSelector,\n-                                    org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy,\n-                                    PathEvaluator collisionEvaluator, int maxDepth,\n-                                    Iterable<Node> startNodes, Iterable<Node> endNodes )\n-    {\n-        super( resource );\n-        this.sides.put( Direction.OUTGOING, new Side( start ) );\n-        this.sides.put( Direction.INCOMING, new Side( end ) );\n-        this.uniqueness = makeSureStartAndEndHasSameUniqueness( start, end );\n-\n-        // A little chicken-and-egg problem. This happens when constructing the start/end\n-        // selectors and they initially call evaluate() and isUniqueFirst, where the selector is used.\n-        // Solved this way for now, to have it return the start side to begin with.\n-        this.selector = fixedSide( Direction.OUTGOING );\n-        BranchSelector startSelector = start.branchOrdering.create(\n-                new AsOneStartBranch( this, startNodes, start.initialState, start.uniqueness ), start.expander );\n-        this.selector = fixedSide( Direction.INCOMING );\n-        BranchSelector endSelector = end.branchOrdering.create(\n-                new AsOneStartBranch( this, endNodes, end.initialState, start.uniqueness ), end.expander );\n-\n-        this.selector = sideSelector.create( startSelector, endSelector, maxDepth );\n-        this.collisionDetector = collisionPolicy.create( collisionEvaluator, uniqueness::checkFull );\n-    }\n+  private static class Side\n+  {\n+    private final MonoDirectionalTraversalDescription description;\n \n-    private BidirectionalUniquenessFilter makeSureStartAndEndHasSameUniqueness( MonoDirectionalTraversalDescription\n-            start,\n-                                                                   MonoDirectionalTraversalDescription end )\n+    Side(MonoDirectionalTraversalDescription description)\n     {\n-        if ( !start.uniqueness.equals( end.uniqueness ) )\n-        {\n-            throw new IllegalArgumentException( \"Start and end uniqueness factories differ, they need to be the \" +\n-                    \"same currently. Start side has \" + start.uniqueness + \", end side has \" + end.uniqueness );\n-        }\n-\n-        boolean parameterDiffers = start.uniquenessParameter == null || end.uniquenessParameter == null ?\n-                start.uniquenessParameter != end.uniquenessParameter :\n-                !start.uniquenessParameter.equals( end.uniquenessParameter );\n-        if ( parameterDiffers )\n-        {\n-            throw new IllegalArgumentException( \"Start and end uniqueness parameters differ, they need to be the \" +\n-                    \"same currently. Start side has \" + start.uniquenessParameter + \", \" +\n-                    \"end side has \" + end.uniquenessParameter );\n-        }\n-\n-        UniquenessFilter uniqueness = start.uniqueness.create( start.uniquenessParameter );\n-        if ( !(uniqueness instanceof BidirectionalUniquenessFilter) )\n-        {\n-            throw new IllegalArgumentException( \"You must supply a BidirectionalUniquenessFilter, \" +\n-                    \"not just a UniquenessFilter.\" );\n-        }\n-        return (BidirectionalUniquenessFilter) uniqueness;\n+      this.description = description;\n     }\n-\n-    private SideSelector fixedSide( final Direction direction )\n+  }\n+\n+  BidirectionalTraverserIterator(Resource resource,\n+                                 MonoDirectionalTraversalDescription start,\n+                                 MonoDirectionalTraversalDescription end,\n+                                 SideSelectorPolicy sideSelector,\n+                                 org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy,\n+                                 PathEvaluator collisionEvaluator, int maxDepth,\n+                                 Iterable<Node> startNodes, Iterable<Node> endNodes)\n+  {\n+    super(resource);\n+    this.sides.put(Direction.OUTGOING, new Side(start));\n+    this.sides.put(Direction.INCOMING, new Side(end));\n+    this.uniqueness = makeSureStartAndEndHasSameUniqueness(start, end);\n+\n+    // A little chicken-and-egg problem. This happens when constructing the start/end\n+    // selectors and they initially call evaluate() and isUniqueFirst, where the selector is used.\n+    // Solved this way for now, to have it return the start side to begin with.\n+    this.selector = fixedSide(Direction.OUTGOING);\n+    BranchSelector startSelector = start.branchOrdering.create(\n+        new AsOneStartBranch(this, startNodes, start.initialState, start.uniqueness), start.expander);\n+    this.selector = fixedSide(Direction.INCOMING);\n+    BranchSelector endSelector = end.branchOrdering.create(\n+        new AsOneStartBranch(this, endNodes, end.initialState, start.uniqueness), end.expander);\n+\n+    this.selector = sideSelector.create(startSelector, endSelector, maxDepth);\n+    this.collisionDetector = collisionPolicy.create(collisionEvaluator, uniqueness::checkFull);\n+  }\n+\n+  private BidirectionalUniquenessFilter makeSureStartAndEndHasSameUniqueness(MonoDirectionalTraversalDescription\n+                                                                                 start,\n+                                                                             MonoDirectionalTraversalDescription end)\n+  {\n+    if (!start.uniqueness.equals(end.uniqueness))\n     {\n-        return new SideSelector()\n-        {\n-            @Override\n-            public TraversalBranch next( TraversalContext metadata )\n-            {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public Direction currentSide()\n-            {\n-                return direction;\n-            }\n-        };\n+      throw new IllegalArgumentException(\"Start and end uniqueness factories differ, they need to be the \" +\n+          \"same currently. Start side has \" + start.uniqueness + \", end side has \" + end.uniqueness);\n     }\n \n-    @Override\n-    protected Path fetchNextOrNull()\n+    boolean parameterDiffers = start.uniquenessParameter == null || end.uniquenessParameter == null ?\n+        start.uniquenessParameter != end.uniquenessParameter :\n+        !start.uniquenessParameter.equals(end.uniquenessParameter);\n+    if (parameterDiffers)\n     {\n-        if ( foundPaths != null )\n-        {\n-            if ( foundPaths.hasNext() )\n-            {\n-                numberOfPathsReturned++;\n-                Path next = foundPaths.next();\n-                return next;\n-            }\n-            foundPaths = null;\n-        }\n-\n-        TraversalBranch result = null;\n-        while ( true )\n-        {\n-            result = selector.next( this );\n-            if ( result == null )\n-            {\n-                close();\n-                return null;\n-            }\n-            Iterable<Path> pathCollisions = collisionDetector.evaluate( result, selector.currentSide() );\n-            if ( pathCollisions != null )\n-            {\n-                foundPaths = pathCollisions.iterator();\n-                if ( foundPaths.hasNext() )\n-                {\n-                    numberOfPathsReturned++;\n-                    return foundPaths.next();\n-                }\n-            }\n-        }\n+      throw new IllegalArgumentException(\"Start and end uniqueness parameters differ, they need to be the \" +\n+          \"same currently. Start side has \" + start.uniquenessParameter + \", \" +\n+          \"end side has \" + end.uniquenessParameter);\n     }\n \n-    private Side currentSideDescription()\n+    UniquenessFilter uniqueness = start.uniqueness.create(start.uniquenessParameter);\n+    if (!(uniqueness instanceof BidirectionalUniquenessFilter))\n     {\n-        return sides.get( selector.currentSide() );\n+      throw new IllegalArgumentException(\"You must supply a BidirectionalUniquenessFilter, \" +\n+          \"not just a UniquenessFilter.\");\n     }\n+    return (BidirectionalUniquenessFilter) uniqueness;\n+  }\n \n-    @Override\n-    public Evaluation evaluate( TraversalBranch branch, BranchState state )\n+  private SideSelector fixedSide(final Direction direction)\n+  {\n+    return new SideSelector()\n     {\n-        return currentSideDescription().description.evaluator.evaluate( branch, state );\n-    }\n-\n-    @Override\n-    public boolean isUniqueFirst( TraversalBranch branch )\n+      @Override\n+      public TraversalBranch next(TraversalContext metadata)\n+      {\n+        throw new UnsupportedOperationException();\n+      }\n+\n+      @Override\n+      public Direction currentSide()\n+      {\n+        return direction;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  protected Path fetchNextOrNull()\n+  {\n+    if (foundPaths != null)\n     {\n-        return uniqueness.checkFirst( branch );\n+      if (foundPaths.hasNext())\n+      {\n+        numberOfPathsReturned++;\n+        Path next = foundPaths.next();\n+        return next;\n+      }\n+      foundPaths = null;\n     }\n \n-    @Override\n-    public boolean isUnique( TraversalBranch branch )\n+    TraversalBranch result = null;\n+    while (true)\n     {\n-        return uniqueness.check( branch );\n+      result = selector.next(this);\n+      if (result == null)\n+      {\n+        close();\n+        return null;\n+      }\n+      Iterable<Path> pathCollisions = collisionDetector.evaluate(result, selector.currentSide());\n+      if (pathCollisions != null)\n+      {\n+        foundPaths = pathCollisions.iterator();\n+        if (foundPaths.hasNext())\n+        {\n+          numberOfPathsReturned++;\n+          return foundPaths.next();\n+        }\n+      }\n     }\n+  }\n+\n+  private Side currentSideDescription()\n+  {\n+    return sides.get(selector.currentSide());\n+  }\n+\n+  @Override\n+  public Evaluation evaluate(TraversalBranch branch, BranchState state)\n+  {\n+    return currentSideDescription().description.evaluator.evaluate(branch, state);\n+  }\n+\n+  @Override\n+  public boolean isUniqueFirst(TraversalBranch branch)\n+  {\n+    return uniqueness.checkFirst(branch);\n+  }\n+\n+  @Override\n+  public boolean isUnique(TraversalBranch branch)\n+  {\n+    return uniqueness.check(branch);\n+  }\n }\n",
            "diff_size": 227
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4565/BidirectionalTraverserIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4565/BidirectionalTraverserIterator.java\nindex 78f9721121c..ee6399f4bb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4565/BidirectionalTraverserIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4565/BidirectionalTraverserIterator.java\n@@ -44,7 +44,7 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n     private final BranchCollisionDetector collisionDetector;\n     private Iterator<Path> foundPaths;\n     private SideSelector selector;\n-    private final Map<Direction, Side> sides = new EnumMap<>( Direction.class );\n+    private final Map<Direction,Side> sides = new EnumMap<>( Direction.class );\n     private final BidirectionalUniquenessFilter uniqueness;\n \n     private static class Side\n@@ -57,14 +57,12 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n         }\n     }\n \n-    BidirectionalTraverserIterator( Resource resource,\n-                                    MonoDirectionalTraversalDescription start,\n+    BidirectionalTraverserIterator( Resource resource, MonoDirectionalTraversalDescription start,\n                                     MonoDirectionalTraversalDescription end,\n                                     SideSelectorPolicy sideSelector,\n                                     org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy,\n-                                    PathEvaluator collisionEvaluator, int maxDepth,\n-                                    Iterable<Node> startNodes, Iterable<Node> endNodes )\n-    {\n+                                    PathEvaluator collisionEvaluator, int maxDepth, Iterable<Node> startNodes, Iterable<Node> endNodes )\n+{\n         super( resource );\n         this.sides.put( Direction.OUTGOING, new Side( start ) );\n         this.sides.put( Direction.INCOMING, new Side( end ) );\n@@ -74,41 +72,31 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n         // selectors and they initially call evaluate() and isUniqueFirst, where the selector is used.\n         // Solved this way for now, to have it return the start side to begin with.\n         this.selector = fixedSide( Direction.OUTGOING );\n-        BranchSelector startSelector = start.branchOrdering.create(\n-                new AsOneStartBranch( this, startNodes, start.initialState, start.uniqueness ), start.expander );\n-        this.selector = fixedSide( Direction.INCOMING );\n-        BranchSelector endSelector = end.branchOrdering.create(\n-                new AsOneStartBranch( this, endNodes, end.initialState, start.uniqueness ), end.expander );\n-\n-        this.selector = sideSelector.create( startSelector, endSelector, maxDepth );\n+        BranchSelector startSelector = start.branchOrdering.create( new AsOneStartBranch( this, startNodes, start.initialState, start.uniqueness ), start.expander );\n+this.selector = fixedSide( Direction.INCOMING );\n+        BranchSelector endSelector = end.branchOrdering.create( new AsOneStartBranch( this, endNodes, end.initialState, start.uniqueness ), end.expander );\n+this.selector = sideSelector.create( startSelector, endSelector, maxDepth );\n         this.collisionDetector = collisionPolicy.create( collisionEvaluator, uniqueness::checkFull );\n     }\n \n-    private BidirectionalUniquenessFilter makeSureStartAndEndHasSameUniqueness( MonoDirectionalTraversalDescription\n-            start,\n-                                                                   MonoDirectionalTraversalDescription end )\n-    {\n+    private BidirectionalUniquenessFilter makeSureStartAndEndHasSameUniqueness( MonoDirectionalTraversalDescription start, MonoDirectionalTraversalDescription end )\n+{\n         if ( !start.uniqueness.equals( end.uniqueness ) )\n         {\n-            throw new IllegalArgumentException( \"Start and end uniqueness factories differ, they need to be the \" +\n-                    \"same currently. Start side has \" + start.uniqueness + \", end side has \" + end.uniqueness );\n+            throw new IllegalArgumentException( \"Start and end uniqueness factories differ, they need to be the \" + \"same currently. Start side has \" + start.uniqueness + \", end side has \" + end.uniqueness );\n         }\n \n-        boolean parameterDiffers = start.uniquenessParameter == null || end.uniquenessParameter == null ?\n-                start.uniquenessParameter != end.uniquenessParameter :\n+        boolean parameterDiffers = start.uniquenessParameter == null || end.uniquenessParameter == null ? start.uniquenessParameter != end.uniquenessParameter :\n                 !start.uniquenessParameter.equals( end.uniquenessParameter );\n-        if ( parameterDiffers )\n+if ( parameterDiffers )\n         {\n-            throw new IllegalArgumentException( \"Start and end uniqueness parameters differ, they need to be the \" +\n-                    \"same currently. Start side has \" + start.uniquenessParameter + \", \" +\n-                    \"end side has \" + end.uniquenessParameter );\n+            throw new IllegalArgumentException( \"Start and end uniqueness parameters differ, they need to be the \" + \"same currently. Start side has \" + start.uniquenessParameter + \", \" + \"end side has \" + end.uniquenessParameter );\n         }\n \n         UniquenessFilter uniqueness = start.uniqueness.create( start.uniquenessParameter );\n-        if ( !(uniqueness instanceof BidirectionalUniquenessFilter) )\n+        if ( !( uniqueness instanceof BidirectionalUniquenessFilter) )\n         {\n-            throw new IllegalArgumentException( \"You must supply a BidirectionalUniquenessFilter, \" +\n-                    \"not just a UniquenessFilter.\" );\n+            throw new IllegalArgumentException( \"You must supply a BidirectionalUniquenessFilter, \" + \"not just a UniquenessFilter.\" );\n         }\n         return (BidirectionalUniquenessFilter) uniqueness;\n     }\n@@ -142,7 +130,8 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n                 Path next = foundPaths.next();\n                 return next;\n             }\n-            foundPaths = null;\n+\n+foundPaths = null;\n         }\n \n         TraversalBranch result = null;\n@@ -189,4 +178,4 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n     {\n         return uniqueness.check( branch );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}