{
    "project_name": "IQSS-dataverse",
    "error_id": "110",
    "information": {
        "errors": [
            {
                "line": "118",
                "column": "13",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            //destroy the dataset is a good idea.\n            if(dataset.isReleased()) {\n            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n            }\n            execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n            return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/110/Pids.java\nindex 5a2acf3209f..1b791ca42a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/110/Pids.java\n@@ -115,7 +115,7 @@ public class Pids extends AbstractApiBean {\n             //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n             //destroy the dataset is a good idea.\n             if(dataset.isReleased()) {\n-            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n+            return badRequest(\"Not allowed for Datasets that have been published.\");\n             }\n             execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n             return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/110/Pids.java\nindex 5a2acf3209f..ea99968c40e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/110/Pids.java\n@@ -26,7 +26,7 @@ import javax.ws.rs.core.Response;\n \n /**\n  * PIDs are Persistent IDentifiers such as DOIs or Handles.\n- *\n+ * <p>\n  * Currently PIDs can be minted at the dataset and file level but there is\n  * demand for PIDs at the dataverse level too. That's why this dedicated \"pids\"\n  * endpoint exists, to be somewhat future proof.\n@@ -35,93 +35,95 @@ import javax.ws.rs.core.Response;\n @Path(\"pids\")\n public class Pids extends AbstractApiBean {\n \n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public Response getPid(@QueryParam(\"persistentId\") String persistentId) {\n-        try {\n-            User user = findUserOrDie();\n-            if (!user.isSuperuser()) {\n-                return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"admin.api.auth.mustBeSuperUser\"));\n-            }\n-        } catch (WrappedResponse ex) {\n-            return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"api.errors.invalidApiToken\"));\n-        }\n-        String baseUrl = systemConfig.getDataCiteRestApiUrlString();\n-        String username = System.getProperty(\"doi.username\");\n-        String password = System.getProperty(\"doi.password\");\n-        try {\n-            JsonObjectBuilder result = PidUtil.queryDoi(persistentId, baseUrl, username, password);\n-            return ok(result);\n-        } catch (NotFoundException ex) {\n-            return error(ex.getResponse().getStatusInfo().toEnum(), ex.getLocalizedMessage());\n-        } catch (InternalServerErrorException ex) {\n-            return error(ex.getResponse().getStatusInfo().toEnum(), ex.getLocalizedMessage());\n-        }\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  public Response getPid(@QueryParam(\"persistentId\") String persistentId) {\n+    try {\n+      User user = findUserOrDie();\n+      if (!user.isSuperuser()) {\n+        return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"admin.api.auth.mustBeSuperUser\"));\n+      }\n+    } catch (WrappedResponse ex) {\n+      return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"api.errors.invalidApiToken\"));\n     }\n+    String baseUrl = systemConfig.getDataCiteRestApiUrlString();\n+    String username = System.getProperty(\"doi.username\");\n+    String password = System.getProperty(\"doi.password\");\n+    try {\n+      JsonObjectBuilder result = PidUtil.queryDoi(persistentId, baseUrl, username, password);\n+      return ok(result);\n+    } catch (NotFoundException ex) {\n+      return error(ex.getResponse().getStatusInfo().toEnum(), ex.getLocalizedMessage());\n+    } catch (InternalServerErrorException ex) {\n+      return error(ex.getResponse().getStatusInfo().toEnum(), ex.getLocalizedMessage());\n+    }\n+  }\n \n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"unreserved\")\n-    public Response getUnreserved(@QueryParam(\"persistentId\") String persistentId) {\n-        try {\n-            User user = findUserOrDie();\n-            if (!user.isSuperuser()) {\n-                return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"admin.api.auth.mustBeSuperUser\"));\n-            }\n-        } catch (WrappedResponse ex) {\n-            return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"api.errors.invalidApiToken\"));\n-        }\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"unreserved\")\n+  public Response getUnreserved(@QueryParam(\"persistentId\") String persistentId) {\n+    try {\n+      User user = findUserOrDie();\n+      if (!user.isSuperuser()) {\n+        return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"admin.api.auth.mustBeSuperUser\"));\n+      }\n+    } catch (WrappedResponse ex) {\n+      return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"api.errors.invalidApiToken\"));\n+    }\n \n-        JsonArrayBuilder unreserved = Json.createArrayBuilder();\n-        for (Dataset dataset : datasetSvc.findAll()) {\n-            if (dataset.isReleased()) {\n-                continue;\n-            }\n-            if (dataset.getGlobalIdCreateTime() == null) {\n-                unreserved.add(Json.createObjectBuilder()\n-                        .add(\"id\", dataset.getId())\n-                        .add(\"pid\", dataset.getGlobalId().asString())\n-                );\n-            }\n-        }\n-        JsonArray finalUnreserved = unreserved.build();\n-        int size = finalUnreserved.size();\n-        return ok(Json.createObjectBuilder()\n-                .add(\"numUnreserved\", size)\n-                .add(\"count\", finalUnreserved)\n+    JsonArrayBuilder unreserved = Json.createArrayBuilder();\n+    for (Dataset dataset : datasetSvc.findAll()) {\n+      if (dataset.isReleased()) {\n+        continue;\n+      }\n+      if (dataset.getGlobalIdCreateTime() == null) {\n+        unreserved.add(Json.createObjectBuilder()\n+          .add(\"id\", dataset.getId())\n+          .add(\"pid\", dataset.getGlobalId().asString())\n         );\n+      }\n     }\n+    JsonArray finalUnreserved = unreserved.build();\n+    int size = finalUnreserved.size();\n+    return ok(Json.createObjectBuilder()\n+      .add(\"numUnreserved\", size)\n+      .add(\"count\", finalUnreserved)\n+    );\n+  }\n \n-    @POST\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{id}/reserve\")\n-    public Response reservePid(@PathParam(\"id\") String idSupplied) {\n-        try {\n-            Dataset dataset = findDatasetOrDie(idSupplied);\n-            execCommand(new ReservePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n-            return ok(BundleUtil.getStringFromBundle(\"pids.api.reservePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        }\n+  @POST\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"{id}/reserve\")\n+  public Response reservePid(@PathParam(\"id\") String idSupplied) {\n+    try {\n+      Dataset dataset = findDatasetOrDie(idSupplied);\n+      execCommand(new ReservePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n+      return ok(\n+        BundleUtil.getStringFromBundle(\"pids.api.reservePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n+    } catch (WrappedResponse ex) {\n+      return ex.getResponse();\n     }\n+  }\n \n-    @DELETE\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"{id}/delete\")\n-    public Response deletePid(@PathParam(\"id\") String idSupplied) {\n-        try {\n-            Dataset dataset = findDatasetOrDie(idSupplied);\n-            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n-            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n-            //destroy the dataset is a good idea.\n-            if(dataset.isReleased()) {\n-            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n-            }\n-            execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n-            return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        }\n+  @DELETE\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"{id}/delete\")\n+  public Response deletePid(@PathParam(\"id\") String idSupplied) {\n+    try {\n+      Dataset dataset = findDatasetOrDie(idSupplied);\n+      //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+      //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+      //destroy the dataset is a good idea.\n+      if (dataset.isReleased()) {\n+        return badRequest(\"Not allowed for Datasets that have been published.\");\n+      }\n+      execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n+      return ok(\n+        BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n+    } catch (WrappedResponse ex) {\n+      return ex.getResponse();\n     }\n+  }\n \n }\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/110/Pids.java\nindex 5a2acf3209f..8810979e0d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/110/Pids.java\n@@ -115,8 +115,8 @@ public class Pids extends AbstractApiBean {\n             //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n             //destroy the dataset is a good idea.\n             if(dataset.isReleased()) {\n-            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n-            }\n+    return badRequest(\"Not allowed for Datasets that have been published.\");\n+    }\n             execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n             return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n         } catch (WrappedResponse ex) {\n@@ -124,4 +124,4 @@ public class Pids extends AbstractApiBean {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/110/Pids.java\nindex 5a2acf3209f..4ac81c26d4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/110/Pids.java\n@@ -31,6 +31,8 @@ import javax.ws.rs.core.Response;\n  * demand for PIDs at the dataverse level too. That's why this dedicated \"pids\"\n  * endpoint exists, to be somewhat future proof.\n  */\n+\n+\n @Stateless\n @Path(\"pids\")\n public class Pids extends AbstractApiBean {\n@@ -46,6 +48,7 @@ public class Pids extends AbstractApiBean {\n         } catch (WrappedResponse ex) {\n             return error(Response.Status.FORBIDDEN, BundleUtil.getStringFromBundle(\"api.errors.invalidApiToken\"));\n         }\n+\n         String baseUrl = systemConfig.getDataCiteRestApiUrlString();\n         String username = System.getProperty(\"doi.username\");\n         String password = System.getProperty(\"doi.password\");\n@@ -77,19 +80,15 @@ public class Pids extends AbstractApiBean {\n             if (dataset.isReleased()) {\n                 continue;\n             }\n+\n             if (dataset.getGlobalIdCreateTime() == null) {\n-                unreserved.add(Json.createObjectBuilder()\n-                        .add(\"id\", dataset.getId())\n-                        .add(\"pid\", dataset.getGlobalId().asString())\n-                );\n+                unreserved.add(Json.createObjectBuilder().add(\"id\", dataset.getId()).add(\"pid\", dataset.getGlobalId().asString()));\n             }\n         }\n+\n         JsonArray finalUnreserved = unreserved.build();\n         int size = finalUnreserved.size();\n-        return ok(Json.createObjectBuilder()\n-                .add(\"numUnreserved\", size)\n-                .add(\"count\", finalUnreserved)\n-        );\n+        return ok(Json.createObjectBuilder().add(\"numUnreserved\", size).add(\"count\", finalUnreserved));\n     }\n \n     @POST\n@@ -114,8 +113,8 @@ public class Pids extends AbstractApiBean {\n             //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n             //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n             //destroy the dataset is a good idea.\n-            if(dataset.isReleased()) {\n-            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n+            if (dataset.isReleased()) {\n+                return badRequest(\"Not allowed for Datasets that have been published.\");\n             }\n             execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n             return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n@@ -124,4 +123,4 @@ public class Pids extends AbstractApiBean {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/110/Pids.java\nindex 5a2acf3209f..1b791ca42a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/110/Pids.java\n@@ -115,7 +115,7 @@ public class Pids extends AbstractApiBean {\n             //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n             //destroy the dataset is a good idea.\n             if(dataset.isReleased()) {\n-            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n+            return badRequest(\"Not allowed for Datasets that have been published.\");\n             }\n             execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n             return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/110/Pids.java\nindex 5a2acf3209f..8004e1ac7a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/110/Pids.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/110/Pids.java\n@@ -115,7 +115,7 @@ public class Pids extends AbstractApiBean {\n             //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n             //destroy the dataset is a good idea.\n             if(dataset.isReleased()) {\n-            \treturn badRequest(\"Not allowed for Datasets that have been published.\");\n+                return badRequest(\"Not allowed for Datasets that have been published.\");\n             }\n             execCommand(new DeletePidCommand(createDataverseRequest(findUserOrDie()), dataset));\n             return ok(BundleUtil.getStringFromBundle(\"pids.api.deletePid.success\", Arrays.asList(dataset.getGlobalId().asString())));\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}