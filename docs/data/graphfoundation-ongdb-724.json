{
    "project_name": "graphfoundation-ongdb",
    "error_id": "724",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/724/CompilationFailureException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/724/CompilationFailureException.java\nindex a6622ae1877..ae25fc4e90f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/724/CompilationFailureException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/724/CompilationFailureException.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.io.IOException;\n@@ -32,101 +33,98 @@ import static java.util.Collections.unmodifiableList;\n \n public class CompilationFailureException extends Exception\n {\n-    private final List<? extends Diagnostic<?>> diagnostics;\n+  private final List<? extends Diagnostic<?>> diagnostics;\n+\n+  public CompilationFailureException(List<? extends Diagnostic<?>> diagnostics)\n+  {\n+    super(String.format(\"Compilation failed with %d reported issues.%s\",\n+        diagnostics.size(), source(diagnostics)));\n+    this.diagnostics = diagnostics;\n+  }\n \n-    public CompilationFailureException( List<? extends Diagnostic<?>> diagnostics )\n+  @Override\n+  public String toString()\n+  {\n+    StringWriter result = new StringWriter().append(super.toString());\n+    for (Diagnostic<?> diagnostic : diagnostics)\n     {\n-        super( String.format( \"Compilation failed with %d reported issues.%s\",\n-                diagnostics.size(), source( diagnostics ) ) );\n-        this.diagnostics = diagnostics;\n+      format(result.append(\"\\n\\t\\t\"), diagnostic);\n     }\n+    return result.toString();\n+  }\n \n-    @Override\n-    public String toString()\n+  private static String source(List<? extends Diagnostic<?>> diagnostics)\n+  {\n+    Set<JavaFileObject> sources = null;\n+    for (Diagnostic<?> diagnostic : diagnostics)\n     {\n-        StringWriter result = new StringWriter().append( super.toString() );\n-        for ( Diagnostic<?> diagnostic : diagnostics )\n+      Object source = diagnostic.getSource();\n+      if (source instanceof JavaFileObject)\n+      {\n+        JavaFileObject file = (JavaFileObject) source;\n+        if (file.getKind() == JavaFileObject.Kind.SOURCE)\n         {\n-            format( result.append( \"\\n\\t\\t\" ), diagnostic );\n+          if (sources == null)\n+          {\n+            sources = Collections.newSetFromMap(new IdentityHashMap<JavaFileObject, Boolean>());\n+          }\n+          sources.add(file);\n         }\n-        return result.toString();\n+      }\n     }\n-\n-    private static String source( List<? extends Diagnostic<?>> diagnostics )\n+    if (sources == null)\n     {\n-        Set<JavaFileObject> sources = null;\n-        for ( Diagnostic<?> diagnostic : diagnostics )\n-        {\n-            Object source = diagnostic.getSource();\n-            if ( source instanceof JavaFileObject )\n-            {\n-                JavaFileObject file = (JavaFileObject) source;\n-                if ( file.getKind() == JavaFileObject.Kind.SOURCE )\n-                {\n-                    if ( sources == null )\n-                    {\n-                        sources = Collections.newSetFromMap( new IdentityHashMap<JavaFileObject,Boolean>() );\n-                    }\n-                    sources.add( file );\n-                }\n-            }\n-        }\n-        if ( sources == null )\n-        {\n-            return \"\";\n-        }\n-        StringBuilder result = new StringBuilder();\n-        for ( JavaFileObject source : sources )\n-        {\n-            int pos = result.length();\n-            result.append( \"\\nSource file \" ).append( source.getName() ).append( \":\\n\" );\n-            try\n-            {\n-                CharSequence content = source.getCharContent( true );\n-                result.append( String.format( \"%4d: \", 1 ) );\n-                for ( int line = 1, i = 0; i < content.length(); i++ )\n-                {\n-                    char c = content.charAt( i );\n-                    result.append( c );\n-                    if ( c == '\\n' )\n-                    {\n-                        result.append( String.format( \"%4d: \", ++line ) );\n-                    }\n-                }\n-            }\n-            catch ( IOException e )\n-            {\n-                result.setLength( pos );\n-            }\n-        }\n-        return result.toString();\n+      return \"\";\n     }\n-\n-    public static void format( Appendable result, Diagnostic<?> diagnostic )\n+    StringBuilder result = new StringBuilder();\n+    for (JavaFileObject source : sources)\n     {\n-        try\n+      int pos = result.length();\n+      result.append(\"\\nSource file \").append(source.getName()).append(\":\\n\");\n+      try\n+      {\n+        CharSequence content = source.getCharContent(true);\n+        result.append(String.format(\"%4d: \", 1));\n+        for (int line = 1, i = 0; i < content.length(); i++)\n         {\n-            Object source = diagnostic.getSource();\n-            if ( source != null )\n-            {\n-                result.append( diagnostic.getKind().name() )\n-                        .append( \" on line \" ).append( Long.toString( diagnostic.getLineNumber() ) )\n-                        .append( \" in \" ).append( source.toString() )\n-                        .append( \": \" ).append( diagnostic.getMessage( null ) );\n-            }\n-            else\n-            {\n-                result.append( diagnostic.getMessage( null ) );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( \"Failed to append.\", e );\n+          char c = content.charAt(i);\n+          result.append(c);\n+          if (c == '\\n')\n+          {\n+            result.append(String.format(\"%4d: \", ++line));\n+          }\n         }\n+      } catch (IOException e)\n+      {\n+        result.setLength(pos);\n+      }\n     }\n+    return result.toString();\n+  }\n \n-    public List<Diagnostic<?>> getDiagnostics()\n+  public static void format(Appendable result, Diagnostic<?> diagnostic)\n+  {\n+    try\n+    {\n+      Object source = diagnostic.getSource();\n+      if (source != null)\n+      {\n+        result.append(diagnostic.getKind().name())\n+            .append(\" on line \").append(Long.toString(diagnostic.getLineNumber()))\n+            .append(\" in \").append(source.toString())\n+            .append(\": \").append(diagnostic.getMessage(null));\n+      } else\n+      {\n+        result.append(diagnostic.getMessage(null));\n+      }\n+    } catch (IOException e)\n     {\n-        return unmodifiableList( diagnostics );\n+      throw new RuntimeException(\"Failed to append.\", e);\n     }\n+  }\n+\n+  public List<Diagnostic<?>> getDiagnostics()\n+  {\n+    return unmodifiableList(diagnostics);\n+  }\n }\n",
            "diff_size": 136
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/724/CompilationFailureException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/724/CompilationFailureException.java\nindex a6622ae1877..ca39037e0cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/724/CompilationFailureException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/724/CompilationFailureException.java\n@@ -38,7 +38,7 @@ public class CompilationFailureException extends Exception\n     {\n         super( String.format( \"Compilation failed with %d reported issues.%s\",\n                 diagnostics.size(), source( diagnostics ) ) );\n-        this.diagnostics = diagnostics;\n+this.diagnostics = diagnostics;\n     }\n \n     @Override\n@@ -49,7 +49,8 @@ public class CompilationFailureException extends Exception\n         {\n             format( result.append( \"\\n\\t\\t\" ), diagnostic );\n         }\n-        return result.toString();\n+\n+return result.toString();\n     }\n \n     private static String source( List<? extends Diagnostic<?>> diagnostics )\n@@ -75,7 +76,8 @@ public class CompilationFailureException extends Exception\n         {\n             return \"\";\n         }\n-        StringBuilder result = new StringBuilder();\n+\n+StringBuilder result = new StringBuilder();\n         for ( JavaFileObject source : sources )\n         {\n             int pos = result.length();\n@@ -109,10 +111,7 @@ public class CompilationFailureException extends Exception\n             Object source = diagnostic.getSource();\n             if ( source != null )\n             {\n-                result.append( diagnostic.getKind().name() )\n-                        .append( \" on line \" ).append( Long.toString( diagnostic.getLineNumber() ) )\n-                        .append( \" in \" ).append( source.toString() )\n-                        .append( \": \" ).append( diagnostic.getMessage( null ) );\n+                result.append( diagnostic.getKind().name() ).append( \" on line \" ).append( Long.toString( diagnostic.getLineNumber() ) ).append( \" in \" ).append( source.toString() ).append( \": \" ).append( diagnostic.getMessage( null ) );\n             }\n             else\n             {\n@@ -129,4 +128,4 @@ public class CompilationFailureException extends Exception\n     {\n         return unmodifiableList( diagnostics );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}