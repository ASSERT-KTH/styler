{
    "project_name": "neo4j-neo4j",
    "error_id": "1692",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "342",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1692/Paths.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1692/Paths.java\nindex 1a44321f342..f7e4b396ed5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1692/Paths.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1692/Paths.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import java.util.Arrays;\n@@ -43,120 +44,126 @@ public class Paths\n \n     /**\n      * Provides hooks to help build a string representation of a {@link org.neo4j.graphdb.Path}.\n+     *\n      * @param <T> the type of {@link org.neo4j.graphdb.Path}.\n      */\n     public interface PathDescriptor<T extends Path>\n     {\n         /**\n          * Returns a string representation of a {@link org.neo4j.graphdb.Node}.\n+         *\n          * @param path the {@link Path} we're building a string representation\n-         * from.\n+         *             from.\n          * @param node the {@link org.neo4j.graphdb.Node} to return a string representation of.\n          * @return a string representation of a {@link org.neo4j.graphdb.Node}.\n          */\n-        String nodeRepresentation( T path, Node node );\n+        String nodeRepresentation(T path, Node node);\n \n         /**\n          * Returns a string representation of a {@link org.neo4j.graphdb.Relationship}.\n-         * @param path the {@link Path} we're building a string representation\n-         * from.\n-         * @param from the previous {@link Node} in the path.\n+         *\n+         * @param path         the {@link Path} we're building a string representation\n+         *                     from.\n+         * @param from         the previous {@link Node} in the path.\n          * @param relationship the {@link org.neo4j.graphdb.Relationship} to return a string\n-         * representation of.\n+         *                     representation of.\n          * @return a string representation of a {@link org.neo4j.graphdb.Relationship}.\n          */\n-        String relationshipRepresentation( T path, Node from,\n-                                           Relationship relationship );\n+        String relationshipRepresentation(T path, Node from,\n+                                          Relationship relationship);\n     }\n \n     /**\n      * The default {@link PathDescriptor} used in common toString()\n      * representations in classes implementing {@link Path}.\n+     *\n      * @param <T> the type of {@link Path}.\n      */\n     public static class DefaultPathDescriptor<T extends Path> implements PathDescriptor<T>\n     {\n         @Override\n-        public String nodeRepresentation( Path path, Node node )\n+        public String nodeRepresentation(Path path, Node node)\n         {\n             return \"(\" + node.getId() + \")\";\n         }\n \n         @Override\n-        public String relationshipRepresentation( Path path,\n-                                                  Node from, Relationship relationship )\n+        public String relationshipRepresentation(Path path,\n+                                                 Node from, Relationship relationship)\n         {\n             String prefix = \"-\";\n             String suffix = \"-\";\n-            if ( from.equals( relationship.getEndNode() ) )\n+            if (from.equals(relationship.getEndNode()))\n             {\n                 prefix = \"<-\";\n-            }\n-            else\n+            } else\n             {\n                 suffix = \"->\";\n             }\n             return prefix + \"[\" + relationship.getType().name() + \",\" +\n-                    relationship.getId() + \"]\" + suffix;\n+              relationship.getId() + \"]\" + suffix;\n         }\n     }\n \n     /**\n      * Method for building a string representation of a {@link Path}, using\n      * the given {@code builder}.\n-     * @param <T> the type of {@link Path}.\n-     * @param path the {@link Path} to build a string representation of.\n+     *\n+     * @param <T>     the type of {@link Path}.\n+     * @param path    the {@link Path} to build a string representation of.\n      * @param builder the {@link PathDescriptor} to get\n-     * {@link Node} and {@link Relationship} representations from.\n+     *                {@link Node} and {@link Relationship} representations from.\n      * @return a string representation of a {@link Path}.\n      */\n-    public static <T extends Path> String pathToString( T path, PathDescriptor<T> builder )\n+    public static <T extends Path> String pathToString(T path, PathDescriptor<T> builder)\n     {\n         Node current = path.startNode();\n         StringBuilder result = new StringBuilder();\n-        for ( Relationship rel : path.relationships() )\n+        for (Relationship rel : path.relationships())\n         {\n-            result.append( builder.nodeRepresentation( path, current ) );\n-            result.append( builder.relationshipRepresentation( path, current, rel ) );\n-            current = rel.getOtherNode( current );\n+            result.append(builder.nodeRepresentation(path, current));\n+            result.append(builder.relationshipRepresentation(path, current, rel));\n+            current = rel.getOtherNode(current);\n         }\n-        if ( null != current )\n+        if (null != current)\n         {\n-            result.append( builder.nodeRepresentation( path, current ) );\n+            result.append(builder.nodeRepresentation(path, current));\n         }\n         return result.toString();\n     }\n \n     /**\n      * TODO: This method re-binds nodes and relationships. It should not.\n-     *\n+     * <p>\n      * Returns the default string representation of a {@link Path}. It uses\n      * the {@link DefaultPathDescriptor} to get representations.\n+     *\n      * @param path the {@link Path} to build a string representation of.\n      * @return the default string representation of a {@link Path}.\n      */\n-    public static String defaultPathToString( Path path )\n+    public static String defaultPathToString(Path path)\n     {\n-        return pathToString( path, new DefaultPathDescriptor<>() );\n+        return pathToString(path, new DefaultPathDescriptor<>());\n     }\n \n     /**\n      * Returns a quite simple string representation of a {@link Path}. It\n      * doesn't print relationship types or ids, just directions.\n+     *\n      * @param path the {@link Path} to build a string representation of.\n      * @return a quite simple representation of a {@link Path}.\n      */\n-    public static String simplePathToString( Path path )\n+    public static String simplePathToString(Path path)\n     {\n-        return pathToString( path, new DefaultPathDescriptor<>()\n+        return pathToString(path, new DefaultPathDescriptor<>()\n         {\n             @Override\n-            public String relationshipRepresentation( Path path, Node from,\n-                                                      Relationship relationship )\n+            public String relationshipRepresentation(Path path, Node from,\n+                                                     Relationship relationship)\n             {\n-                return relationship.getStartNode().equals( from ) ? \"-->\" : \"<--\";\n+                return relationship.getStartNode().equals(from) ? \"-->\" : \"<--\";\n             }\n-        } );\n+        });\n     }\n \n     /**\n@@ -165,107 +172,109 @@ public class Paths\n      * {@code nodePropertyKey} to try to display that property value as in the\n      * node representation instead of the node id. If that property doesn't\n      * exist, the id is used.\n-     * @param path the {@link Path} to build a string representation of.\n+     *\n+     * @param path            the {@link Path} to build a string representation of.\n      * @param nodePropertyKey the key of the property value to display\n      * @return a quite simple representation of a {@link Path}.\n      */\n-    public static String simplePathToString( Path path, final String nodePropertyKey )\n+    public static String simplePathToString(Path path, final String nodePropertyKey)\n     {\n-        return pathToString( path, new DefaultPathDescriptor<>()\n+        return pathToString(path, new DefaultPathDescriptor<>()\n         {\n             @Override\n-            public String nodeRepresentation( Path path, Node node )\n+            public String nodeRepresentation(Path path, Node node)\n             {\n-                return \"(\" + node.getProperty( nodePropertyKey, node.getId() ) + \")\";\n+                return \"(\" + node.getProperty(nodePropertyKey, node.getId()) + \")\";\n             }\n \n             @Override\n-            public String relationshipRepresentation( Path path, Node from,\n-                                                      Relationship relationship )\n+            public String relationshipRepresentation(Path path, Node from,\n+                                                     Relationship relationship)\n             {\n-                return relationship.getStartNode().equals( from ) ? \"-->\" : \"<--\";\n+                return relationship.getStartNode().equals(from) ? \"-->\" : \"<--\";\n             }\n-        } );\n+        });\n     }\n \n     /**\n      * Create a new {@link Paths.PathDescriptor} that prints values of listed property keys\n      * and id of nodes and relationships if configured so.\n-     * @param nodeId            true if node id should be included.\n-     * @param relId             true if relationship id should be included.\n-     * @param propertyKeys      all property keys that should be included.\n-     * @param <T>               the type of the {@link Path}\n-     * @return                  a new {@link Paths.PathDescriptor}\n+     *\n+     * @param nodeId       true if node id should be included.\n+     * @param relId        true if relationship id should be included.\n+     * @param propertyKeys all property keys that should be included.\n+     * @param <T>          the type of the {@link Path}\n+     * @return a new {@link Paths.PathDescriptor}\n      */\n-    public static <T extends Path> PathDescriptor<T> descriptorForIdAndProperties( final boolean nodeId,\n-    final boolean relId, final String... propertyKeys )\n+    public static <T extends Path> PathDescriptor<T> descriptorForIdAndProperties(final boolean nodeId,\n+                                                                                  final boolean relId, final String... propertyKeys)\n     {\n         return new Paths.PathDescriptor<>()\n         {\n             @Override\n-            public String nodeRepresentation( T path, Node node )\n+            public String nodeRepresentation(T path, Node node)\n             {\n-                String representation = representation( node );\n+                String representation = representation(node);\n                 return \"(\" + (nodeId ? node.getId() : \"\") +\n-                       (nodeId && !representation.equals( \"\" ) ? \",\" : \"\") +\n-                       representation + \")\";\n+                  (nodeId && !representation.equals(\"\") ? \",\" : \"\") +\n+                  representation + \")\";\n             }\n \n-            private String representation( Entity entity )\n+            private String representation(Entity entity)\n             {\n                 StringBuilder builder = new StringBuilder();\n-                for ( String key : propertyKeys )\n+                for (String key : propertyKeys)\n                 {\n-                    Object value = entity.getProperty( key, null );\n-                    if ( value != null )\n+                    Object value = entity.getProperty(key, null);\n+                    if (value != null)\n                     {\n-                        if ( builder.length() > 0 )\n+                        if (builder.length() > 0)\n                         {\n-                            builder.append( ',' );\n+                            builder.append(',');\n                         }\n-                        builder.append( value );\n+                        builder.append(value);\n                     }\n                 }\n                 return builder.toString();\n             }\n \n             @Override\n-            public String relationshipRepresentation( T path, Node from, Relationship relationship )\n+            public String relationshipRepresentation(T path, Node from, Relationship relationship)\n             {\n-                Direction direction = relationship.getEndNode().equals( from ) ? Direction.INCOMING : Direction.OUTGOING;\n+                Direction direction = relationship.getEndNode().equals(from) ? Direction.INCOMING : Direction.OUTGOING;\n                 StringBuilder builder = new StringBuilder();\n-                if ( direction.equals( Direction.INCOMING ) )\n+                if (direction.equals(Direction.INCOMING))\n                 {\n-                    builder.append( '<' );\n+                    builder.append('<');\n                 }\n-                builder.append( \"-[\" + (relId ? relationship.getId() : \"\") );\n-                String representation = representation( relationship );\n-                if ( relId && !representation.equals( \"\" ) )\n+                builder.append(\"-[\" + (relId ? relationship.getId() : \"\"));\n+                String representation = representation(relationship);\n+                if (relId && !representation.equals(\"\"))\n                 {\n-                    builder.append( ',' );\n+                    builder.append(',');\n                 }\n-                builder.append( representation );\n-                builder.append( \"]-\" );\n+                builder.append(representation);\n+                builder.append(\"]-\");\n \n-                if ( direction.equals( Direction.OUTGOING ) )\n+                if (direction.equals(Direction.OUTGOING))\n                 {\n-                    builder.append( '>' );\n+                    builder.append('>');\n                 }\n                 return builder.toString();\n             }\n         };\n     }\n \n-    public static Path singleNodePath( Node node )\n+    public static Path singleNodePath(Node node)\n     {\n-        return new SingleNodePath( node );\n+        return new SingleNodePath(node);\n     }\n \n     private static class SingleNodePath implements Path\n     {\n         private final Node node;\n \n-        SingleNodePath( Node node )\n+        SingleNodePath(Node node)\n         {\n             this.node = node;\n         }\n@@ -303,7 +312,7 @@ public class Paths\n         @Override\n         public Iterable<Node> nodes()\n         {\n-            return Arrays.asList( node );\n+            return Arrays.asList(node);\n         }\n \n         @Override\n@@ -321,30 +330,29 @@ public class Paths\n         @Override\n         public Iterator<Entity> iterator()\n         {\n-            return Arrays.<Entity>asList( node ).iterator();\n+            return Arrays.<Entity>asList(node).iterator();\n         }\n     }\n \n-    public static String defaultPathToStringWithNotInTransactionFallback( Path path )\n+    public static String defaultPathToStringWithNotInTransactionFallback(Path path)\n     {\n         try\n         {\n-            return Paths.defaultPathToString( path );\n-        }\n-        catch ( NotInTransactionException | DatabaseShutdownException e )\n+            return Paths.defaultPathToString(path);\n+        } catch (NotInTransactionException | DatabaseShutdownException e)\n         {\n             // We don't keep the rel-name lookup if the database is shut down. Source ID and target ID also requires\n             // database access in a transaction. However, failing on toString would be uncomfortably evil, so we fall\n             // back to noting the relationship type id.\n         }\n         StringBuilder sb = new StringBuilder();\n-        for ( Relationship rel : path.relationships() )\n+        for (Relationship rel : path.relationships())\n         {\n-            if ( sb.length() == 0 )\n+            if (sb.length() == 0)\n             {\n-                sb.append( \"(?)\" );\n+                sb.append(\"(?)\");\n             }\n-            sb.append( \"-[?,\" ).append( rel.getId() ).append( \"]-(?)\" );\n+            sb.append(\"-[?,\").append(rel.getId()).append(\"]-(?)\");\n         }\n         return sb.toString();\n     }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1692/Paths.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1692/Paths.java\nindex 1a44321f342..e18e486166e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1692/Paths.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1692/Paths.java\n@@ -83,9 +83,8 @@ public class Paths\n         }\n \n         @Override\n-        public String relationshipRepresentation( Path path,\n-                                                  Node from, Relationship relationship )\n-        {\n+        public String relationshipRepresentation( Path path, Node from, Relationship relationship )\n+{\n             String prefix = \"-\";\n             String suffix = \"-\";\n             if ( from.equals( relationship.getEndNode() ) )\n@@ -151,9 +150,8 @@ public class Paths\n         return pathToString( path, new DefaultPathDescriptor<>()\n         {\n             @Override\n-            public String relationshipRepresentation( Path path, Node from,\n-                                                      Relationship relationship )\n-            {\n+            public String relationshipRepresentation( Path path, Node from, Relationship relationship )\n+{\n                 return relationship.getStartNode().equals( from ) ? \"-->\" : \"<--\";\n             }\n         } );\n@@ -180,9 +178,8 @@ public class Paths\n             }\n \n             @Override\n-            public String relationshipRepresentation( Path path, Node from,\n-                                                      Relationship relationship )\n-            {\n+            public String relationshipRepresentation( Path path, Node from, Relationship relationship )\n+{\n                 return relationship.getStartNode().equals( from ) ? \"-->\" : \"<--\";\n             }\n         } );\n@@ -348,4 +345,4 @@ public class Paths\n         }\n         return sb.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}