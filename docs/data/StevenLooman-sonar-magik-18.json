{
    "project_name": "StevenLooman-sonar-magik",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "warning",
                "message": "'if' child has incorrect indentation level 5, expected level should be 6.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "        && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n        || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n     addIssue(MESSAGE, node);\n    }\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/18/SizeZeroEmptyCheck.java\nindex bbcdf57b65c..97dde159c38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/18/SizeZeroEmptyCheck.java\n@@ -28,8 +28,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n         || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-     addIssue(MESSAGE, node);\n-    }\n+      addIssue(MESSAGE, node);\n+      }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/18/SizeZeroEmptyCheck.java\nindex bbcdf57b65c..aa24e982b20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/18/SizeZeroEmptyCheck.java\n@@ -28,15 +28,15 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n         || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-     addIssue(MESSAGE, node);\n+      addIssue(MESSAGE, node);\n     }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n     return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n-           || operatorNode.getTokenValue().equals(\"_is\");\n+        || operatorNode.getTokenValue().equals(\">=\")\n+        || operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n   private boolean isMethodInvocationSize(AstNode node) {\n@@ -53,7 +53,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n     return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+        && numberNode.getTokenValue().equals(\"0\");\n   }\n \n }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/naturalize/18/SizeZeroEmptyCheck.java\nindex bbcdf57b65c..45f13977b9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/naturalize/18/SizeZeroEmptyCheck.java\n@@ -28,14 +28,14 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n         || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-     addIssue(MESSAGE, node);\n-    }\n+  addIssue(MESSAGE, node);\n+  }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n     return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n+    || operatorNode.getTokenValue().equals(\">=\")\n            || operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n@@ -46,14 +46,12 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     }\n \n     AstNode identifierNode = methodInvocationNode.getFirstDescendant(MagikGrammar.IDENTIFIER);\n-    return identifierNode != null\n-        && identifierNode.getTokenValue().equals(\"size\");\n+    return identifierNode != null && identifierNode.getTokenValue().equals(\"size\");\n   }\n \n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n-    return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+    return numberNode != null && numberNode.getTokenValue().equals(\"0\");\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "column": "52",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "35",
                    "column": "96",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/codebuff/18/SizeZeroEmptyCheck.java\nindex bbcdf57b65c..6f7303c32bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/codebuff/18/SizeZeroEmptyCheck.java\n@@ -5,7 +5,6 @@ import com.sonar.sslr.api.AstNodeType;\n import org.sonar.check.Rule;\n import org.stevenlooman.sw.magik.MagikCheck;\n import org.stevenlooman.sw.magik.api.MagikGrammar;\n-\n import java.util.Arrays;\n import java.util.List;\n \n@@ -17,26 +16,23 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n \n   @Override\n   public List<AstNodeType> subscribedTo() {\n-    return Arrays.asList(\n-        MagikGrammar.EQUALITY_EXPRESSION);\n+    return Arrays.asList(MagikGrammar.EQUALITY_EXPRESSION);\n   }\n \n   @Override\n   public void visitNode(AstNode node) {\n     AstNode leftHandSide = node.getFirstChild();\n     AstNode rightHandSide = node.getLastChild();\n-    if (hasEqOperator(node)\n-        && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n-        || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-     addIssue(MESSAGE, node);\n+    if (hasEqOperator(node) && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n+                                || isMethodInvocationSize(rightHandSide)\n+&& isNumberZero(leftHandSide))) {\n+      addIssue(MESSAGE, node);\n     }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n-    return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n-           || operatorNode.getTokenValue().equals(\"_is\");\n+    return operatorNode.getTokenValue().equals(\"=\")|| operatorNode.getTokenValue().equals(\">=\")|| operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n   private boolean isMethodInvocationSize(AstNode node) {\n@@ -46,14 +42,11 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     }\n \n     AstNode identifierNode = methodInvocationNode.getFirstDescendant(MagikGrammar.IDENTIFIER);\n-    return identifierNode != null\n-        && identifierNode.getTokenValue().equals(\"size\");\n+    return identifierNode != null && identifierNode.getTokenValue().equals(\"size\");\n   }\n \n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n-    return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+    return numberNode != null && numberNode.getTokenValue().equals(\"0\");\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/18/SizeZeroEmptyCheck.java\nindex bbcdf57b65c..97dde159c38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/18/SizeZeroEmptyCheck.java\n@@ -28,8 +28,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n         || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-     addIssue(MESSAGE, node);\n-    }\n+      addIssue(MESSAGE, node);\n+      }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 10, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/18/SizeZeroEmptyCheck.java\nindex bbcdf57b65c..3c9ba53e37d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/18/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/18/SizeZeroEmptyCheck.java\n@@ -28,8 +28,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n         || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-     addIssue(MESSAGE, node);\n-    }\n+          addIssue(MESSAGE, node);\n+      }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}