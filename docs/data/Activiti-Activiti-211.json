{
    "project_name": "Activiti-Activiti",
    "error_id": "211",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/211/FormProperty.java\nindex d0d4883fd63..faae2a6bcfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/211/FormProperty.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/211/FormProperty.java\nindex d0d4883fd63..54aaba2896f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/211/FormProperty.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -17,120 +18,120 @@ import java.util.List;\n \n public class FormProperty extends BaseElement {\n \n-  protected String name;\n-  protected String expression;\n-  protected String variable;\n-  protected String type;\n-  protected String defaultExpression;\n-  protected String datePattern;\n-  protected boolean readable = true;\n-  protected boolean writeable = true;\n-  protected boolean required;\n-  protected List<FormValue> formValues = new ArrayList<FormValue>();\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public String getExpression() {\n-    return expression;\n-  }\n-\n-  public void setExpression(String expression) {\n-    this.expression = expression;\n-  }\n-\n-  public String getVariable() {\n-    return variable;\n-  }\n-\n-  public void setVariable(String variable) {\n-    this.variable = variable;\n-  }\n-\n-  public String getType() {\n-    return type;\n-  }\n-\n-  public String getDefaultExpression() {\n-    return defaultExpression;\n-  }\n-\n-  public void setDefaultExpression(String defaultExpression) {\n-    this.defaultExpression = defaultExpression;\n-  }\n-\n-  public void setType(String type) {\n-    this.type = type;\n-  }\n-\n-  public String getDatePattern() {\n-    return datePattern;\n-  }\n-\n-  public void setDatePattern(String datePattern) {\n-    this.datePattern = datePattern;\n-  }\n-\n-  public boolean isReadable() {\n-    return readable;\n-  }\n-\n-  public void setReadable(boolean readable) {\n-    this.readable = readable;\n-  }\n-\n-  public boolean isWriteable() {\n-    return writeable;\n-  }\n-\n-  public void setWriteable(boolean writeable) {\n-    this.writeable = writeable;\n-  }\n-\n-  public boolean isRequired() {\n-    return required;\n-  }\n-\n-  public void setRequired(boolean required) {\n-    this.required = required;\n-  }\n-\n-  public List<FormValue> getFormValues() {\n-    return formValues;\n-  }\n-\n-  public void setFormValues(List<FormValue> formValues) {\n-    this.formValues = formValues;\n-  }\n-\n-  public FormProperty clone() {\n-    FormProperty clone = new FormProperty();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(FormProperty otherProperty) {\n-    super.setValues(otherProperty);\n-    setName(otherProperty.getName());\n-    setExpression(otherProperty.getExpression());\n-    setVariable(otherProperty.getVariable());\n-    setType(otherProperty.getType());\n-    setDefaultExpression(otherProperty.getDefaultExpression());\n-    setDatePattern(otherProperty.getDatePattern());\n-    setReadable(otherProperty.isReadable());\n-    setWriteable(otherProperty.isWriteable());\n-    setRequired(otherProperty.isRequired());\n-\n-    formValues = new ArrayList<FormValue>();\n-    if (otherProperty.getFormValues() != null && !otherProperty.getFormValues().isEmpty()) {\n-      for (FormValue formValue : otherProperty.getFormValues()) {\n-        formValues.add(formValue.clone());\n-      }\n-    }\n-  }\n+    protected String name;\n+    protected String expression;\n+    protected String variable;\n+    protected String type;\n+    protected String defaultExpression;\n+    protected String datePattern;\n+    protected boolean readable = true;\n+    protected boolean writeable = true;\n+    protected boolean required;\n+    protected List<FormValue> formValues = new ArrayList<FormValue>();\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getExpression() {\n+        return expression;\n+    }\n+\n+    public void setExpression(String expression) {\n+        this.expression = expression;\n+    }\n+\n+    public String getVariable() {\n+        return variable;\n+    }\n+\n+    public void setVariable(String variable) {\n+        this.variable = variable;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getDefaultExpression() {\n+        return defaultExpression;\n+    }\n+\n+    public void setDefaultExpression(String defaultExpression) {\n+        this.defaultExpression = defaultExpression;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public String getDatePattern() {\n+        return datePattern;\n+    }\n+\n+    public void setDatePattern(String datePattern) {\n+        this.datePattern = datePattern;\n+    }\n+\n+    public boolean isReadable() {\n+        return readable;\n+    }\n+\n+    public void setReadable(boolean readable) {\n+        this.readable = readable;\n+    }\n+\n+    public boolean isWriteable() {\n+        return writeable;\n+    }\n+\n+    public void setWriteable(boolean writeable) {\n+        this.writeable = writeable;\n+    }\n+\n+    public boolean isRequired() {\n+        return required;\n+    }\n+\n+    public void setRequired(boolean required) {\n+        this.required = required;\n+    }\n+\n+    public List<FormValue> getFormValues() {\n+        return formValues;\n+    }\n+\n+    public void setFormValues(List<FormValue> formValues) {\n+        this.formValues = formValues;\n+    }\n+\n+    public FormProperty clone() {\n+        FormProperty clone = new FormProperty();\n+        clone.setValues(this);\n+        return clone;\n+    }\n+\n+    public void setValues(FormProperty otherProperty) {\n+        super.setValues(otherProperty);\n+        setName(otherProperty.getName());\n+        setExpression(otherProperty.getExpression());\n+        setVariable(otherProperty.getVariable());\n+        setType(otherProperty.getType());\n+        setDefaultExpression(otherProperty.getDefaultExpression());\n+        setDatePattern(otherProperty.getDatePattern());\n+        setReadable(otherProperty.isReadable());\n+        setWriteable(otherProperty.isWriteable());\n+        setRequired(otherProperty.isRequired());\n+\n+        formValues = new ArrayList<FormValue>();\n+        if (otherProperty.getFormValues() != null && !otherProperty.getFormValues().isEmpty()) {\n+            for (FormValue formValue : otherProperty.getFormValues()) {\n+                formValues.add(formValue.clone());\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/211/FormProperty.java\nindex d0d4883fd63..613c46aa8de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/211/FormProperty.java\n@@ -15,6 +15,7 @@ package org.activiti.bpmn.model;\n import java.util.ArrayList;\n import java.util.List;\n \n+\n public class FormProperty extends BaseElement {\n \n   protected String name;\n@@ -27,7 +28,6 @@ public class FormProperty extends BaseElement {\n   protected boolean writeable = true;\n   protected boolean required;\n   protected List<FormValue> formValues = new ArrayList<FormValue>();\n-\n   public String getName() {\n     return name;\n   }\n@@ -125,12 +125,11 @@ public class FormProperty extends BaseElement {\n     setReadable(otherProperty.isReadable());\n     setWriteable(otherProperty.isWriteable());\n     setRequired(otherProperty.isRequired());\n-\n     formValues = new ArrayList<FormValue>();\n     if (otherProperty.getFormValues() != null && !otherProperty.getFormValues().isEmpty()) {\n-      for (FormValue formValue : otherProperty.getFormValues()) {\n-        formValues.add(formValue.clone());\n-      }\n+        for (FormValue formValue : otherProperty.getFormValues()) {\n+            formValues.add(formValue.clone());\n+        }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/211/FormProperty.java\nindex d0d4883fd63..faae2a6bcfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/211/FormProperty.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/211/FormProperty.java\nindex d0d4883fd63..faae2a6bcfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/211/FormProperty.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/211/FormProperty.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}