{
    "project_name": "Gurux-gurux.dlms.java",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "107",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 116).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t */\n\tprivate static MethodAccessMode3[] getEnumConstants() {\n\t\treturn new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n\t\t\t\tAUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler/21/MethodAccessMode3.java\nindex 8ac79677d0e..542ea8bb331 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler/21/MethodAccessMode3.java\n@@ -104,8 +104,7 @@ public enum MethodAccessMode3 {\n \t * @return Get enumeration constant values.\n \t */\n \tprivate static MethodAccessMode3[] getEnumConstants() {\n-\t\treturn new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n-\t\t\t\tAUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n+     return new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST, AUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n \n \t}\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/21/MethodAccessMode3.java\nindex 8ac79677d0e..43941e2df9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/21/MethodAccessMode3.java\n@@ -38,107 +38,108 @@ import java.util.HashSet;\n import java.util.Set;\n \n public enum MethodAccessMode3 {\n-\t/*\n-\t * No access.\n-\t */\n-\tNO_ACCESS(0),\n-\t/*\n-\t * access.\n-\t */\n-\tACCESS(1),\n-\t/*\n-\t * Authenticated request.\n-\t */\n-\tAUTHENTICATED_REQUEST(4),\n-\n-\t/**\n-\t * Encrypted request.\n-\t */\n-\tENCRYPTED_REQUEST(8),\n-\n-\t/**\n-\t * Digitally signed request.\n-\t */\n-\tDIGITALLY_SIGNED_REQUEST(16),\n-\n-\t/**\n-\t * Authenticated response.\n-\t */\n-\tAUTHENTICATED_RESPONSE(32),\n-\n-\t/**\n-\t * Encrypted response.\n-\t */\n-\tENCRYPTED_RESPONSE(64),\n-\n-\t/**\n-\t * Digitally signed response.\n-\t */\n-\tDIGITALLY_SIGNED_RESPONSE(128);\n-\n-\tprivate int intValue;\n-\tprivate static java.util.HashMap<Integer, MethodAccessMode3> mappings;\n-\n-\tprivate static java.util.HashMap<Integer, MethodAccessMode3> getMappings() {\n-\t\tsynchronized (MethodAccessMode3.class) {\n-\t\t\tif (mappings == null) {\n-\t\t\t\tmappings = new java.util.HashMap<Integer, MethodAccessMode3>();\n-\t\t\t}\n-\t\t}\n-\t\treturn mappings;\n-\t}\n-\n-\tMethodAccessMode3(final int value) {\n-\t\tintValue = value;\n-\t\tgetMappings().put(value, this);\n-\t}\n-\n-\t/*\n-\t * Get integer value for enum.\n-\t */\n-\tpublic int getValue() {\n-\t\treturn intValue;\n-\t}\n-\n-\t/**\n-\t * @return Get enumeration constant values.\n-\t */\n-\tprivate static MethodAccessMode3[] getEnumConstants() {\n-\t\treturn new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n-\t\t\t\tAUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n-\n-\t}\n-\n-\t/**\n-\t * Converts the integer value to enumerated value.\n-\t * \n-\t * @param value The integer value, which is read from the device.\n-\t * @return The enumerated value, which represents the integer.\n-\t */\n-\tpublic static java.util.Set<MethodAccessMode3> forValue(final int value) {\n-\t\tSet<MethodAccessMode3> types = new HashSet<MethodAccessMode3>();\n-\t\tMethodAccessMode3[] enums = getEnumConstants();\n-\t\tfor (int pos = 0; pos != enums.length; ++pos) {\n-\t\t\tif ((enums[pos].intValue & value) == enums[pos].intValue) {\n-\t\t\t\ttypes.add(enums[pos]);\n-\t\t\t}\n-\t\t}\n-\t\treturn types;\n-\t}\n-\n-\t/**\n-\t * Converts the enumerated value to integer value.\n-\t * \n-\t * @param value The enumerated value.\n-\t * @return The integer value.\n-\t */\n-\tpublic static int toInteger(final Set<MethodAccessMode3> value) {\n-\t\tint tmp = 0;\n-\t\tif (value != null) {\n-\t\t\tfor (MethodAccessMode3 it : value) {\n-\t\t\t\ttmp |= it.getValue();\n-\t\t\t}\n-\t\t}\n-\t\treturn tmp;\n-\t}\n+    /*\n+     * No access.\n+     */\n+    NO_ACCESS(0),\n+    /*\n+     * access.\n+     */\n+    ACCESS(1),\n+    /*\n+     * Authenticated request.\n+     */\n+    AUTHENTICATED_REQUEST(4),\n+\n+    /**\n+     * Encrypted request.\n+     */\n+    ENCRYPTED_REQUEST(8),\n+\n+    /**\n+     * Digitally signed request.\n+     */\n+    DIGITALLY_SIGNED_REQUEST(16),\n+\n+    /**\n+     * Authenticated response.\n+     */\n+    AUTHENTICATED_RESPONSE(32),\n+\n+    /**\n+     * Encrypted response.\n+     */\n+    ENCRYPTED_RESPONSE(64),\n+\n+    /**\n+     * Digitally signed response.\n+     */\n+    DIGITALLY_SIGNED_RESPONSE(128);\n+\n+    private int intValue;\n+    private static java.util.HashMap<Integer, MethodAccessMode3> mappings;\n+\n+    private static java.util.HashMap<Integer, MethodAccessMode3> getMappings() {\n+        synchronized (MethodAccessMode3.class) {\n+            if (mappings == null) {\n+                mappings = new java.util.HashMap<Integer, MethodAccessMode3>();\n+            }\n+        }\n+        return mappings;\n+    }\n+\n+    MethodAccessMode3(final int value) {\n+        intValue = value;\n+        getMappings().put(value, this);\n+    }\n+\n+    /*\n+     * Get integer value for enum.\n+     */\n+    public int getValue() {\n+        return intValue;\n+    }\n+\n+    /**\n+     * @return Get enumeration constant values.\n+     */\n+    private static MethodAccessMode3[] getEnumConstants() {\n+        return new MethodAccessMode3[] {ACCESS, AUTHENTICATED_REQUEST,\n+                ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n+                AUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE};\n+\n+    }\n+\n+    /**\n+     * Converts the integer value to enumerated value.\n+     *\n+     * @param value The integer value, which is read from the device.\n+     * @return The enumerated value, which represents the integer.\n+     */\n+    public static java.util.Set<MethodAccessMode3> forValue(final int value) {\n+        Set<MethodAccessMode3> types = new HashSet<MethodAccessMode3>();\n+        MethodAccessMode3[] enums = getEnumConstants();\n+        for (int pos = 0; pos != enums.length; ++pos) {\n+            if ((enums[pos].intValue & value) == enums[pos].intValue) {\n+                types.add(enums[pos]);\n+            }\n+        }\n+        return types;\n+    }\n+\n+    /**\n+     * Converts the enumerated value to integer value.\n+     *\n+     * @param value The enumerated value.\n+     * @return The integer value.\n+     */\n+    public static int toInteger(final Set<MethodAccessMode3> value) {\n+        int tmp = 0;\n+        if (value != null) {\n+            for (MethodAccessMode3 it : value) {\n+                tmp |= it.getValue();\n+            }\n+        }\n+        return tmp;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/21/MethodAccessMode3.java\nindex 8ac79677d0e..696f65b7a17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/21/MethodAccessMode3.java\n@@ -38,107 +38,126 @@ import java.util.HashSet;\n import java.util.Set;\n \n public enum MethodAccessMode3 {\n-\t/*\n-\t * No access.\n-\t */\n-\tNO_ACCESS(0),\n-\t/*\n-\t * access.\n-\t */\n-\tACCESS(1),\n-\t/*\n-\t * Authenticated request.\n-\t */\n-\tAUTHENTICATED_REQUEST(4),\n-\n-\t/**\n-\t * Encrypted request.\n-\t */\n-\tENCRYPTED_REQUEST(8),\n-\n-\t/**\n-\t * Digitally signed request.\n-\t */\n-\tDIGITALLY_SIGNED_REQUEST(16),\n-\n-\t/**\n-\t * Authenticated response.\n-\t */\n-\tAUTHENTICATED_RESPONSE(32),\n-\n-\t/**\n-\t * Encrypted response.\n-\t */\n-\tENCRYPTED_RESPONSE(64),\n-\n-\t/**\n-\t * Digitally signed response.\n-\t */\n-\tDIGITALLY_SIGNED_RESPONSE(128);\n-\n-\tprivate int intValue;\n-\tprivate static java.util.HashMap<Integer, MethodAccessMode3> mappings;\n-\n-\tprivate static java.util.HashMap<Integer, MethodAccessMode3> getMappings() {\n-\t\tsynchronized (MethodAccessMode3.class) {\n-\t\t\tif (mappings == null) {\n-\t\t\t\tmappings = new java.util.HashMap<Integer, MethodAccessMode3>();\n-\t\t\t}\n-\t\t}\n-\t\treturn mappings;\n-\t}\n-\n-\tMethodAccessMode3(final int value) {\n-\t\tintValue = value;\n-\t\tgetMappings().put(value, this);\n-\t}\n-\n-\t/*\n-\t * Get integer value for enum.\n-\t */\n-\tpublic int getValue() {\n-\t\treturn intValue;\n-\t}\n-\n-\t/**\n-\t * @return Get enumeration constant values.\n-\t */\n-\tprivate static MethodAccessMode3[] getEnumConstants() {\n-\t\treturn new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n-\t\t\t\tAUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n-\n-\t}\n-\n-\t/**\n-\t * Converts the integer value to enumerated value.\n-\t * \n-\t * @param value The integer value, which is read from the device.\n-\t * @return The enumerated value, which represents the integer.\n-\t */\n-\tpublic static java.util.Set<MethodAccessMode3> forValue(final int value) {\n-\t\tSet<MethodAccessMode3> types = new HashSet<MethodAccessMode3>();\n-\t\tMethodAccessMode3[] enums = getEnumConstants();\n-\t\tfor (int pos = 0; pos != enums.length; ++pos) {\n-\t\t\tif ((enums[pos].intValue & value) == enums[pos].intValue) {\n-\t\t\t\ttypes.add(enums[pos]);\n-\t\t\t}\n-\t\t}\n-\t\treturn types;\n-\t}\n-\n-\t/**\n-\t * Converts the enumerated value to integer value.\n-\t * \n-\t * @param value The enumerated value.\n-\t * @return The integer value.\n-\t */\n-\tpublic static int toInteger(final Set<MethodAccessMode3> value) {\n-\t\tint tmp = 0;\n-\t\tif (value != null) {\n-\t\t\tfor (MethodAccessMode3 it : value) {\n-\t\t\t\ttmp |= it.getValue();\n-\t\t\t}\n-\t\t}\n-\t\treturn tmp;\n-\t}\n+    /*\n+     * No access.\n+     */\n+\n+    NO_ACCESS(0),\n+    /*\n+     * access.\n+     */\n+\n+\n+    ACCESS(1),\n+    /*\n+     * Authenticated request.\n+     */\n+\n+\n+    AUTHENTICATED_REQUEST(4),\n+\n+    /**\n+     * Encrypted request.\n+     */\n+\n+\n+    ENCRYPTED_REQUEST(8),\n+\n+    /**\n+     * Digitally signed request.\n+     */\n+\n+\n+    DIGITALLY_SIGNED_REQUEST(16),\n+\n+    /**\n+     * Authenticated response.\n+     */\n+\n+\n+    AUTHENTICATED_RESPONSE(32),\n+\n+    /**\n+     * Encrypted response.\n+     */\n+\n+\n+    ENCRYPTED_RESPONSE(64),\n+\n+    /**\n+     * Digitally signed response.\n+     */\n+\n+\n+    DIGITALLY_SIGNED_RESPONSE(128);\n+\n+    private int intValue;\n+    private static java.util.HashMap<Integer, MethodAccessMode3> mappings;\n+    private static java.util.HashMap<Integer, MethodAccessMode3> getMappings() {\n+        synchronized (MethodAccessMode3.class) {\n+            if (mappings == null) {\n+                mappings = new java.util.HashMap<Integer, MethodAccessMode3>();\n+            }\n+        }\n+        return mappings;\n+    }\n+\n+    MethodAccessMode3(final int value) {\n+        intValue = value;\n+        getMappings().put(value, this);\n+    }\n+\n+    /*\n+     * Get integer value for enum.\n+     */\n+\n+    public int getValue() {\n+        return intValue;\n+    }\n+\n+    /**\n+     * @return Get enumeration constant values.\n+     */\n+\n+\n+    private static MethodAccessMode3[] getEnumConstants() {\n+        return new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST, AUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n+    }\n+\n+    /**\n+     * Converts the integer value to enumerated value.\n+     * \n+     * @param value The integer value, which is read from the device.\n+     * @return The enumerated value, which represents the integer.\n+     */\n+\n+\n+    public static java.util.Set<MethodAccessMode3> forValue(final int value) {\n+        Set<MethodAccessMode3> types = new HashSet<MethodAccessMode3>();\n+        MethodAccessMode3[] enums = getEnumConstants();\n+        for (int pos = 0; pos != enums.length; ++pos) {\n+            if ((enums[pos].intValue & value) == enums[pos].intValue) {\n+                types.add(enums[pos]);\n+            }\n+        }\n+        return types;\n+    }\n+\n+    /**\n+     * Converts the enumerated value to integer value.\n+     * \n+     * @param value The enumerated value.\n+     * @return The integer value.\n+     */\n+\n+\n+    public static int toInteger(final Set<MethodAccessMode3> value) {\n+        int tmp = 0;\n+        if (value != null) {\n+            for (MethodAccessMode3 it : value) {\n+                tmp |= it.getValue();\n+            }\n+        }\n+        return tmp;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 122
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_random/21/MethodAccessMode3.java\nindex 8ac79677d0e..4bed92933e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_random/21/MethodAccessMode3.java\n@@ -104,8 +104,9 @@ public enum MethodAccessMode3 {\n \t * @return Get enumeration constant values.\n \t */\n \tprivate static MethodAccessMode3[] getEnumConstants() {\n-\t\treturn new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n-\t\t\t\tAUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n+     return new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n+\n+ AUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n \n \t}\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_three_grams/21/MethodAccessMode3.java\nindex 8ac79677d0e..542ea8bb331 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/21/MethodAccessMode3.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_three_grams/21/MethodAccessMode3.java\n@@ -104,8 +104,7 @@ public enum MethodAccessMode3 {\n \t * @return Get enumeration constant values.\n \t */\n \tprivate static MethodAccessMode3[] getEnumConstants() {\n-\t\treturn new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST,\n-\t\t\t\tAUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n+     return new MethodAccessMode3[] { ACCESS, AUTHENTICATED_REQUEST, ENCRYPTED_REQUEST, DIGITALLY_SIGNED_REQUEST, AUTHENTICATED_RESPONSE, ENCRYPTED_RESPONSE };\n \n \t}\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}