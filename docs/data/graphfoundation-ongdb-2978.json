{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2978",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2978/FusionIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2978/FusionIndexAccessor.java\nindex 44483ed48aa..895d5659730 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2978/FusionIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2978/FusionIndexAccessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.io.File;\n@@ -43,140 +44,140 @@ import static org.neo4j.kernel.impl.index.schema.fusion.SlotSelector.INSTANCE_CO\n \n class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements IndexAccessor\n {\n-    private final long indexId;\n-    private final SchemaIndexDescriptor descriptor;\n-    private final DropAction dropAction;\n-\n-    FusionIndexAccessor( SlotSelector slotSelector,\n-            InstanceSelector<IndexAccessor> instanceSelector,\n-            long indexId,\n-            SchemaIndexDescriptor descriptor,\n-            DropAction dropAction )\n-    {\n-        super( slotSelector, instanceSelector );\n-        this.indexId = indexId;\n-        this.descriptor = descriptor;\n-        this.dropAction = dropAction;\n-    }\n-\n-    @Override\n-    public void drop() throws IOException\n-    {\n-        instanceSelector.forAll( IndexAccessor::drop );\n-        dropAction.drop( indexId );\n-    }\n-\n-    @Override\n-    public IndexUpdater newUpdater( IndexUpdateMode mode )\n-    {\n-        LazyInstanceSelector<IndexUpdater> updaterSelector = new LazyInstanceSelector<>( new IndexUpdater[INSTANCE_COUNT],\n-                slot -> instanceSelector.select( slot ).newUpdater( mode ) );\n-        return new FusionIndexUpdater( slotSelector, updaterSelector );\n-    }\n-\n-    @Override\n-    public void force( IOLimiter ioLimiter ) throws IOException\n-    {\n-        instanceSelector.forAll( accessor -> accessor.force( ioLimiter ) );\n-    }\n-\n-    @Override\n-    public void refresh() throws IOException\n-    {\n-        instanceSelector.forAll( IndexAccessor::refresh );\n-    }\n-\n-    @Override\n-    public void close() throws IOException\n+  private final long indexId;\n+  private final SchemaIndexDescriptor descriptor;\n+  private final DropAction dropAction;\n+\n+  FusionIndexAccessor(SlotSelector slotSelector,\n+                      InstanceSelector<IndexAccessor> instanceSelector,\n+                      long indexId,\n+                      SchemaIndexDescriptor descriptor,\n+                      DropAction dropAction)\n+  {\n+    super(slotSelector, instanceSelector);\n+    this.indexId = indexId;\n+    this.descriptor = descriptor;\n+    this.dropAction = dropAction;\n+  }\n+\n+  @Override\n+  public void drop() throws IOException\n+  {\n+    instanceSelector.forAll(IndexAccessor::drop);\n+    dropAction.drop(indexId);\n+  }\n+\n+  @Override\n+  public IndexUpdater newUpdater(IndexUpdateMode mode)\n+  {\n+    LazyInstanceSelector<IndexUpdater> updaterSelector = new LazyInstanceSelector<>(new IndexUpdater[INSTANCE_COUNT],\n+        slot -> instanceSelector.select(slot).newUpdater(mode));\n+    return new FusionIndexUpdater(slotSelector, updaterSelector);\n+  }\n+\n+  @Override\n+  public void force(IOLimiter ioLimiter) throws IOException\n+  {\n+    instanceSelector.forAll(accessor -> accessor.force(ioLimiter));\n+  }\n+\n+  @Override\n+  public void refresh() throws IOException\n+  {\n+    instanceSelector.forAll(IndexAccessor::refresh);\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    instanceSelector.close(IndexAccessor::close);\n+  }\n+\n+  @Override\n+  public IndexReader newReader()\n+  {\n+    LazyInstanceSelector<IndexReader> readerSelector = new LazyInstanceSelector<>(new IndexReader[INSTANCE_COUNT],\n+        slot -> instanceSelector.select(slot).newReader());\n+    return new FusionIndexReader(slotSelector, readerSelector, descriptor);\n+  }\n+\n+  @Override\n+  public BoundedIterable<Long> newAllEntriesReader()\n+  {\n+    BoundedIterable<Long>[] entries = instanceSelector.instancesAs(new BoundedIterable[INSTANCE_COUNT], IndexAccessor::newAllEntriesReader);\n+    return new BoundedIterable<Long>()\n     {\n-        instanceSelector.close( IndexAccessor::close );\n-    }\n-\n-    @Override\n-    public IndexReader newReader()\n-    {\n-        LazyInstanceSelector<IndexReader> readerSelector = new LazyInstanceSelector<>( new IndexReader[INSTANCE_COUNT],\n-                slot -> instanceSelector.select( slot ).newReader() );\n-        return new FusionIndexReader( slotSelector, readerSelector, descriptor );\n-    }\n-\n-    @Override\n-    public BoundedIterable<Long> newAllEntriesReader()\n-    {\n-        BoundedIterable<Long>[] entries = instanceSelector.instancesAs( new BoundedIterable[INSTANCE_COUNT], IndexAccessor::newAllEntriesReader );\n-        return new BoundedIterable<Long>()\n-        {\n-            @Override\n-            public long maxCount()\n-            {\n-                long[] maxCounts = new long[entries.length];\n-                long sum = 0;\n-                for ( int i = 0; i < entries.length; i++ )\n-                {\n-                    maxCounts[i] = entries[i].maxCount();\n-                    sum += maxCounts[i];\n-                }\n-                return existsUnknownMaxCount( maxCounts ) ? UNKNOWN_MAX_COUNT : sum;\n-            }\n-\n-            private boolean existsUnknownMaxCount( long... maxCounts )\n-            {\n-                for ( long maxCount : maxCounts )\n-                {\n-                    if ( maxCount == UNKNOWN_MAX_COUNT )\n-                    {\n-                        return true;\n-                    }\n-                }\n-                return false;\n-            }\n-\n-            @SuppressWarnings( \"unchecked\" )\n-            @Override\n-            public void close() throws Exception\n-            {\n-                forAll( BoundedIterable::close, entries );\n-            }\n-\n-            @Override\n-            public Iterator<Long> iterator()\n-            {\n-                return Iterables.concat( entries ).iterator();\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public ResourceIterator<File> snapshotFiles() throws IOException\n-    {\n-        return concatResourceIterators(\n-                iterator( instanceSelector.instancesAs( new ResourceIterator[INSTANCE_COUNT], accessor -> accessor.snapshotFiles() ) ) );\n-    }\n-\n-    @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n-    {\n-        for ( int slot = 0; slot < INSTANCE_COUNT; slot++ )\n+      @Override\n+      public long maxCount()\n+      {\n+        long[] maxCounts = new long[entries.length];\n+        long sum = 0;\n+        for (int i = 0; i < entries.length; i++)\n         {\n-            instanceSelector.select( slot ).verifyDeferredConstraints( propertyAccessor );\n+          maxCounts[i] = entries[i].maxCount();\n+          sum += maxCounts[i];\n         }\n-    }\n+        return existsUnknownMaxCount(maxCounts) ? UNKNOWN_MAX_COUNT : sum;\n+      }\n \n-    @Override\n-    public boolean isDirty()\n-    {\n-        boolean isDirty = false;\n-        for ( int slot = 0; slot < INSTANCE_COUNT; slot++ )\n+      private boolean existsUnknownMaxCount(long... maxCounts)\n+      {\n+        for (long maxCount : maxCounts)\n         {\n-            isDirty |= instanceSelector.select( slot ).isDirty();\n+          if (maxCount == UNKNOWN_MAX_COUNT)\n+          {\n+            return true;\n+          }\n         }\n-        return isDirty;\n+        return false;\n+      }\n+\n+      @SuppressWarnings(\"unchecked\")\n+      @Override\n+      public void close() throws Exception\n+      {\n+        forAll(BoundedIterable::close, entries);\n+      }\n+\n+      @Override\n+      public Iterator<Long> iterator()\n+      {\n+        return Iterables.concat(entries).iterator();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public ResourceIterator<File> snapshotFiles() throws IOException\n+  {\n+    return concatResourceIterators(\n+        iterator(instanceSelector.instancesAs(new ResourceIterator[INSTANCE_COUNT], accessor -> accessor.snapshotFiles())));\n+  }\n+\n+  @Override\n+  public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+      throws IndexEntryConflictException, IOException\n+  {\n+    for (int slot = 0; slot < INSTANCE_COUNT; slot++)\n+    {\n+      instanceSelector.select(slot).verifyDeferredConstraints(propertyAccessor);\n     }\n+  }\n \n-    @Override\n-    public void validateBeforeCommit( Value[] tuple )\n+  @Override\n+  public boolean isDirty()\n+  {\n+    boolean isDirty = false;\n+    for (int slot = 0; slot < INSTANCE_COUNT; slot++)\n     {\n-        instanceSelector.select( slotSelector.selectSlot( tuple, GROUP_OF ) ).validateBeforeCommit( tuple );\n+      isDirty |= instanceSelector.select(slot).isDirty();\n     }\n+    return isDirty;\n+  }\n+\n+  @Override\n+  public void validateBeforeCommit(Value[] tuple)\n+  {\n+    instanceSelector.select(slotSelector.selectSlot(tuple, GROUP_OF)).validateBeforeCommit(tuple);\n+  }\n }\n",
            "diff_size": 192
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2978/FusionIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2978/FusionIndexAccessor.java\nindex 44483ed48aa..8cf42d24d95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2978/FusionIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2978/FusionIndexAccessor.java\n@@ -47,8 +47,7 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     private final SchemaIndexDescriptor descriptor;\n     private final DropAction dropAction;\n \n-    FusionIndexAccessor( SlotSelector slotSelector,\n-            InstanceSelector<IndexAccessor> instanceSelector,\n+    FusionIndexAccessor( SlotSelector slotSelector, InstanceSelector<IndexAccessor> instanceSelector,\n             long indexId,\n             SchemaIndexDescriptor descriptor,\n             DropAction dropAction )\n@@ -71,7 +70,7 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     {\n         LazyInstanceSelector<IndexUpdater> updaterSelector = new LazyInstanceSelector<>( new IndexUpdater[INSTANCE_COUNT],\n                 slot -> instanceSelector.select( slot ).newUpdater( mode ) );\n-        return new FusionIndexUpdater( slotSelector, updaterSelector );\n+return new FusionIndexUpdater( slotSelector, updaterSelector );\n     }\n \n     @Override\n@@ -97,7 +96,7 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     {\n         LazyInstanceSelector<IndexReader> readerSelector = new LazyInstanceSelector<>( new IndexReader[INSTANCE_COUNT],\n                 slot -> instanceSelector.select( slot ).newReader() );\n-        return new FusionIndexReader( slotSelector, readerSelector, descriptor );\n+return new FusionIndexReader( slotSelector, readerSelector, descriptor );\n     }\n \n     @Override\n@@ -116,7 +115,8 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n                     maxCounts[i] = entries[i].maxCount();\n                     sum += maxCounts[i];\n                 }\n-                return existsUnknownMaxCount( maxCounts ) ? UNKNOWN_MAX_COUNT : sum;\n+\n+return existsUnknownMaxCount( maxCounts ) ? UNKNOWN_MAX_COUNT : sum;\n             }\n \n             private boolean existsUnknownMaxCount( long... maxCounts )\n@@ -149,14 +149,12 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     @Override\n     public ResourceIterator<File> snapshotFiles() throws IOException\n     {\n-        return concatResourceIterators(\n-                iterator( instanceSelector.instancesAs( new ResourceIterator[INSTANCE_COUNT], accessor -> accessor.snapshotFiles() ) ) );\n+        return concatResourceIterators( iterator( instanceSelector.instancesAs( new ResourceIterator[INSTANCE_COUNT], accessor -> accessor.snapshotFiles() ) ) );\n     }\n \n     @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n-    {\n+    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n+{\n         for ( int slot = 0; slot < INSTANCE_COUNT; slot++ )\n         {\n             instanceSelector.select( slot ).verifyDeferredConstraints( propertyAccessor );\n@@ -171,7 +169,8 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n         {\n             isDirty |= instanceSelector.select( slot ).isDirty();\n         }\n-        return isDirty;\n+\n+return isDirty;\n     }\n \n     @Override\n@@ -179,4 +178,4 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     {\n         instanceSelector.select( slotSelector.selectSlot( tuple, GROUP_OF ) ).validateBeforeCommit( tuple );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}