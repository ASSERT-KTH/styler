{
    "project_name": "EMResearch-EMB",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "87",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * @return the word used to separate multiple suggestions; used only before last suggestion, the rest are comma-separated.\n   */\n  @Override\n  public String getSuggestionsSeparator() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/87/ArabicSimpleReplaceRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/87/ArabicSimpleReplaceRule.java\nindex ca4c5f307b3..7626c08b7af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/87/ArabicSimpleReplaceRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/87/ArabicSimpleReplaceRule.java\n@@ -17,6 +17,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.ar;\n \n import org.languagetool.language.Arabic;\n@@ -31,71 +32,71 @@ import java.util.ResourceBundle;\n \n public class ArabicSimpleReplaceRule extends AbstractSimpleReplaceRule2 {\n \n-  public static final String RULE_ID = \"AR_SIMPLE_REPLACE\";\n-\n-  private static final String RESOURCE_FILENAME = \"ar/replaces.txt\";\n-\n-  public ArabicSimpleReplaceRule(ResourceBundle messages) {\n-    super(messages, new Arabic());\n-    super.setCategory(Categories.CONFUSED_WORDS.getCategory(messages));\n-    addExamplePair(Example.wrong(\"<marker>\u0627\u0644\u0649</marker>\"),\n-      Example.fixed(\"<marker>\u0625\u0644\u0649</marker>\"));\n-  }\n-\n-  @Override\n-  public List<String> getFileNames() {\n-    return Collections.singletonList(RESOURCE_FILENAME);\n-  }\n-\n-  @Override\n-  public String getId() {\n-    return RULE_ID;\n-  }\n-\n-  @Override\n-  public String getDescription() {\n-    return \"\u0642\u0627\u0639\u062f\u0629 \u062a\u0637\u0627\u0628\u0642 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062c\u0628 \u062a\u062c\u0646\u0628\u0647\u0627 \u0648\u062a\u0642\u062a\u0631\u062d \u062a\u0635\u0648\u064a\u0628\u0627 \u0644\u0647\u0627\";\n-  }\n-\n-  @Override\n-  public String getShort() {\n-    return \"\u062e\u0637\u0623\u060c \u064a\u0641\u0636\u0644 \u0623\u0646  \u064a\u0642\u0627\u0644:\";\n-  }\n-\n-  @Override\n-  public boolean isDictionaryBasedSpellingRule() {\n-    return false;\n-  }\n-\n-\n-  @Override\n-  public boolean isCaseSensitive() {\n-    return false;\n-  }\n-\n-  /**\n-   * @return A string where {@code $match} will be replaced with the matching word\n-   * and {@code $suggestions} will be replaced with the alternatives. This is the string\n-   * shown to the user.\n-   */\n-  @Override\n-  public String getSuggestion() {\n-    return \"\u0642\u0644 $suggestions\";\n-  }\n-\n-  /**\n-   * @return the word used to separate multiple suggestions; used only before last suggestion, the rest are comma-separated.\n-   */\n-  @Override\n-  public String getSuggestionsSeparator() {\n-    return \" \u0623\u0648  \";\n-  }\n-\n-  /**\n-   * locale used on case-conversion\n-   */\n-  @Override\n-  public Locale getLocale() {\n-    return new Locale(\"ar\");\n-  }\n+    public static final String RULE_ID = \"AR_SIMPLE_REPLACE\";\n+\n+    private static final String RESOURCE_FILENAME = \"ar/replaces.txt\";\n+\n+    public ArabicSimpleReplaceRule(ResourceBundle messages) {\n+        super(messages, new Arabic());\n+        super.setCategory(Categories.CONFUSED_WORDS.getCategory(messages));\n+        addExamplePair(Example.wrong(\"<marker>\u0627\u0644\u0649</marker>\"),\n+            Example.fixed(\"<marker>\u0625\u0644\u0649</marker>\"));\n+    }\n+\n+    @Override\n+    public List<String> getFileNames() {\n+        return Collections.singletonList(RESOURCE_FILENAME);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return RULE_ID;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"\u0642\u0627\u0639\u062f\u0629 \u062a\u0637\u0627\u0628\u0642 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062c\u0628 \u062a\u062c\u0646\u0628\u0647\u0627 \u0648\u062a\u0642\u062a\u0631\u062d \u062a\u0635\u0648\u064a\u0628\u0627 \u0644\u0647\u0627\";\n+    }\n+\n+    @Override\n+    public String getShort() {\n+        return \"\u062e\u0637\u0623\u060c \u064a\u0641\u0636\u0644 \u0623\u0646  \u064a\u0642\u0627\u0644:\";\n+    }\n+\n+    @Override\n+    public boolean isDictionaryBasedSpellingRule() {\n+        return false;\n+    }\n+\n+\n+    @Override\n+    public boolean isCaseSensitive() {\n+        return false;\n+    }\n+\n+    /**\n+     * @return A string where {@code $match} will be replaced with the matching word\n+     * and {@code $suggestions} will be replaced with the alternatives. This is the string\n+     * shown to the user.\n+     */\n+    @Override\n+    public String getSuggestion() {\n+        return \"\u0642\u0644 $suggestions\";\n+    }\n+\n+    /**\n+     * @return the word used to separate multiple suggestions; used only before last suggestion, the rest are comma-separated.\n+     */\n+    @Override\n+    public String getSuggestionsSeparator() {\n+        return \" \u0623\u0648  \";\n+    }\n+\n+    /**\n+     * locale used on case-conversion\n+     */\n+    @Override\n+    public Locale getLocale() {\n+        return new Locale(\"ar\");\n+    }\n }\n",
            "diff_size": 68
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/87/ArabicSimpleReplaceRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/87/ArabicSimpleReplaceRule.java\nindex ca4c5f307b3..5a68a7d16c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/87/ArabicSimpleReplaceRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/87/ArabicSimpleReplaceRule.java\n@@ -98,4 +98,4 @@ public class ArabicSimpleReplaceRule extends AbstractSimpleReplaceRule2 {\n   public Locale getLocale() {\n     return new Locale(\"ar\");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/87/ArabicSimpleReplaceRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/87/ArabicSimpleReplaceRule.java\nindex ca4c5f307b3..a3cb5b1dbc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/87/ArabicSimpleReplaceRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/87/ArabicSimpleReplaceRule.java\n@@ -23,79 +23,79 @@ import org.languagetool.language.Arabic;\n import org.languagetool.rules.AbstractSimpleReplaceRule2;\n import org.languagetool.rules.Categories;\n import org.languagetool.rules.Example;\n-\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import java.util.ResourceBundle;\n \n-public class ArabicSimpleReplaceRule extends AbstractSimpleReplaceRule2 {\n-\n-  public static final String RULE_ID = \"AR_SIMPLE_REPLACE\";\n-\n-  private static final String RESOURCE_FILENAME = \"ar/replaces.txt\";\n-\n-  public ArabicSimpleReplaceRule(ResourceBundle messages) {\n-    super(messages, new Arabic());\n-    super.setCategory(Categories.CONFUSED_WORDS.getCategory(messages));\n-    addExamplePair(Example.wrong(\"<marker>\u0627\u0644\u0649</marker>\"),\n-      Example.fixed(\"<marker>\u0625\u0644\u0649</marker>\"));\n-  }\n-\n-  @Override\n-  public List<String> getFileNames() {\n-    return Collections.singletonList(RESOURCE_FILENAME);\n-  }\n-\n-  @Override\n-  public String getId() {\n-    return RULE_ID;\n-  }\n-\n-  @Override\n-  public String getDescription() {\n-    return \"\u0642\u0627\u0639\u062f\u0629 \u062a\u0637\u0627\u0628\u0642 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062c\u0628 \u062a\u062c\u0646\u0628\u0647\u0627 \u0648\u062a\u0642\u062a\u0631\u062d \u062a\u0635\u0648\u064a\u0628\u0627 \u0644\u0647\u0627\";\n-  }\n-\n-  @Override\n-  public String getShort() {\n-    return \"\u062e\u0637\u0623\u060c \u064a\u0641\u0636\u0644 \u0623\u0646  \u064a\u0642\u0627\u0644:\";\n-  }\n-\n-  @Override\n-  public boolean isDictionaryBasedSpellingRule() {\n-    return false;\n-  }\n \n+public class ArabicSimpleReplaceRule extends AbstractSimpleReplaceRule2 {\n \n-  @Override\n-  public boolean isCaseSensitive() {\n-    return false;\n-  }\n+    public static final String RULE_ID = \"AR_SIMPLE_REPLACE\";\n+    private static final String RESOURCE_FILENAME = \"ar/replaces.txt\";\n+\n+    public ArabicSimpleReplaceRule(ResourceBundle messages) {\n+        super(messages, new Arabic());\n+        super.setCategory(Categories.CONFUSED_WORDS.getCategory(messages));\n+        addExamplePair(Example.wrong(\"<marker>\u0627\u0644\u0649</marker>\"), Example.fixed(\"<marker>\u0625\u0644\u0649</marker>\"));\n+    }\n+\n+    @Override\n+    public List<String> getFileNames() {\n+        return Collections.singletonList(RESOURCE_FILENAME);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return RULE_ID;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"\u0642\u0627\u0639\u062f\u0629 \u062a\u0637\u0627\u0628\u0642 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062c\u0628 \u062a\u062c\u0646\u0628\u0647\u0627 \u0648\u062a\u0642\u062a\u0631\u062d \u062a\u0635\u0648\u064a\u0628\u0627 \u0644\u0647\u0627\";\n+    }\n+\n+    @Override\n+    public String getShort() {\n+        return \"\u062e\u0637\u0623\u060c \u064a\u0641\u0636\u0644 \u0623\u0646  \u064a\u0642\u0627\u0644:\";\n+    }\n+\n+    @Override\n+    public boolean isDictionaryBasedSpellingRule() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isCaseSensitive() {\n+        return false;\n+    }\n \n   /**\n    * @return A string where {@code $match} will be replaced with the matching word\n    * and {@code $suggestions} will be replaced with the alternatives. This is the string\n    * shown to the user.\n    */\n-  @Override\n-  public String getSuggestion() {\n-    return \"\u0642\u0644 $suggestions\";\n-  }\n+\n+    @Override\n+    public String getSuggestion() {\n+        return \"\u0642\u0644 $suggestions\";\n+    }\n \n   /**\n    * @return the word used to separate multiple suggestions; used only before last suggestion, the rest are comma-separated.\n    */\n-  @Override\n-  public String getSuggestionsSeparator() {\n-    return \" \u0623\u0648  \";\n-  }\n+\n+    @Override\n+    public String getSuggestionsSeparator() {\n+        return \" \u0623\u0648  \";\n+    }\n \n   /**\n    * locale used on case-conversion\n    */\n-  @Override\n-  public Locale getLocale() {\n-    return new Locale(\"ar\");\n-  }\n-}\n+\n+    @Override\n+    public Locale getLocale() {\n+        return new Locale(\"ar\");\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}