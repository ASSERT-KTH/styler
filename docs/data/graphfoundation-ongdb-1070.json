{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1070",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1070/BackupCopyService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1070/BackupCopyService.java\nindex fc00753e248..9a6c81bb6d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1070/BackupCopyService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1070/BackupCopyService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup.impl;\n \n import java.io.File;\n@@ -42,123 +43,121 @@ import static java.lang.String.format;\n \n class BackupCopyService\n {\n-    private static final int MAX_OLD_BACKUPS = 1000;\n-\n-    private final FileSystemAbstraction fs;\n-    private final PageCache pageCache;\n-    private final FileMoveProvider fileMoveProvider;\n-\n-    BackupCopyService( FileSystemAbstraction fs, PageCache pageCache,\n-                       FileMoveProvider fileMoveProvider )\n+  private static final int MAX_OLD_BACKUPS = 1000;\n+\n+  private final FileSystemAbstraction fs;\n+  private final PageCache pageCache;\n+  private final FileMoveProvider fileMoveProvider;\n+\n+  BackupCopyService(FileSystemAbstraction fs, PageCache pageCache,\n+                    FileMoveProvider fileMoveProvider)\n+  {\n+    this.fs = fs;\n+    this.pageCache = pageCache;\n+    this.fileMoveProvider = fileMoveProvider;\n+  }\n+\n+  public void moveBackupLocation(Path oldLocation, Path newLocation) throws IOException\n+  {\n+    try\n     {\n-        this.fs = fs;\n-        this.pageCache = pageCache;\n-        this.fileMoveProvider = fileMoveProvider;\n-    }\n-\n-    public void moveBackupLocation( Path oldLocation, Path newLocation ) throws IOException\n+      File source = oldLocation.toFile();\n+      File target = newLocation.toFile();\n+      Iterator<FileMoveAction> moves = fileMoveProvider.traverseForMoving(source).iterator();\n+      while (moves.hasNext())\n+      {\n+        moves.next().move(target);\n+      }\n+    } catch (IOException e)\n     {\n-        try\n-        {\n-            File source = oldLocation.toFile();\n-            File target = newLocation.toFile();\n-            Iterator<FileMoveAction> moves = fileMoveProvider.traverseForMoving( source ).iterator();\n-            while ( moves.hasNext() )\n-            {\n-                moves.next().move( target );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new IOException( \"Failed to rename backup directory from \" + oldLocation + \" to \" + newLocation, e );\n-        }\n+      throw new IOException(\"Failed to rename backup directory from \" + oldLocation + \" to \" + newLocation, e);\n     }\n-\n-    public void clearIdFiles( Path backupLocation ) throws IOException\n+  }\n+\n+  public void clearIdFiles(Path backupLocation) throws IOException\n+  {\n+    IOException exception = null;\n+    File targetDirectory = backupLocation.toFile();\n+    File[] files = fs.listFiles(targetDirectory);\n+    for (File file : files)\n     {\n-        IOException exception = null;\n-        File targetDirectory = backupLocation.toFile();\n-        File[] files = fs.listFiles( targetDirectory );\n-        for ( File file : files )\n-        {\n-            if ( !fs.isDirectory( file ) && file.getName().endsWith( \".id\" ) )\n-            {\n-                try\n-                {\n-                    long highId = IdGeneratorImpl.readHighId( fs, file );\n-                    fs.deleteFile( file );\n-                    IdGeneratorImpl.createGenerator( fs, file, highId, true );\n-                }\n-                catch ( IOException e )\n-                {\n-                    exception = Exceptions.chain( exception, e );\n-                }\n-            }\n-        }\n-        if ( exception != null )\n+      if (!fs.isDirectory(file) && file.getName().endsWith(\".id\"))\n+      {\n+        try\n         {\n-            throw exception;\n-        }\n-    }\n-\n-    boolean backupExists( Path destination )\n-    {\n-        File[] files = pageCache.getCachedFileSystem().listFiles( destination.toFile() );\n-        return files != null && Arrays.stream( files ).anyMatch(\n-                f -> f.isFile() && f.getName().endsWith( MetaDataStore.DEFAULT_NAME ) );\n-    }\n-\n-    Path findNewBackupLocationForBrokenExisting( Path existingBackup )\n-    {\n-        return findAnAvailableBackupLocation( existingBackup, \"%s.err.%d\" );\n-    }\n-\n-    Path findAnAvailableLocationForNewFullBackup( Path desiredBackupLocation )\n-    {\n-        return findAnAvailableBackupLocation( desiredBackupLocation, \"%s.temp.%d\" );\n-    }\n-\n-    /**\n-     * Given a desired file name, find an available name that is similar to the given one that doesn't conflict with already existing backups\n-     *\n-     * @param file desired ideal file name\n-     * @param pattern pattern to follow if desired name is taken (requires %s for original name, and %d for iteration)\n-     * @return the resolved file name which can be the original desired, or a variation that matches the pattern\n-     */\n-    private Path findAnAvailableBackupLocation( Path file, String pattern )\n-    {\n-        if ( backupExists( file ) )\n+          long highId = IdGeneratorImpl.readHighId(fs, file);\n+          fs.deleteFile(file);\n+          IdGeneratorImpl.createGenerator(fs, file, highId, true);\n+        } catch (IOException e)\n         {\n-            // find alternative name\n-            final AtomicLong counter = new AtomicLong( 0 );\n-            Consumer<Path> countNumberOfFilesProcessedForPotentialErrorMessage =\n-                    generatedBackupFile -> counter.getAndIncrement();\n-\n-            return availableAlternativeNames( file, pattern )\n-                    .peek( countNumberOfFilesProcessedForPotentialErrorMessage )\n-                    .filter( f -> !backupExists( f ) )\n-                    .findFirst()\n-                    .orElseThrow( noFreeBackupLocation( file, counter ) );\n+          exception = Exceptions.chain(exception, e);\n         }\n-        return file;\n-    }\n-\n-    private static Supplier<RuntimeException> noFreeBackupLocation( Path file, AtomicLong counter )\n-    {\n-        return () -> new RuntimeException( String.format(\n-                \"Unable to find a free backup location for the provided %s. %d possible locations were already taken.\",\n-                file, counter.get() ) );\n+      }\n     }\n-\n-    private static Stream<Path> availableAlternativeNames( Path originalBackupDirectory, String pattern )\n+    if (exception != null)\n     {\n-        return IntStream.range( 0, MAX_OLD_BACKUPS )\n-                .mapToObj( iteration -> alteredBackupDirectoryName( pattern, originalBackupDirectory, iteration ) );\n+      throw exception;\n     }\n-\n-    private static Path alteredBackupDirectoryName( String pattern, Path directory, int iteration )\n+  }\n+\n+  boolean backupExists(Path destination)\n+  {\n+    File[] files = pageCache.getCachedFileSystem().listFiles(destination.toFile());\n+    return files != null && Arrays.stream(files).anyMatch(\n+        f -> f.isFile() && f.getName().endsWith(MetaDataStore.DEFAULT_NAME));\n+  }\n+\n+  Path findNewBackupLocationForBrokenExisting(Path existingBackup)\n+  {\n+    return findAnAvailableBackupLocation(existingBackup, \"%s.err.%d\");\n+  }\n+\n+  Path findAnAvailableLocationForNewFullBackup(Path desiredBackupLocation)\n+  {\n+    return findAnAvailableBackupLocation(desiredBackupLocation, \"%s.temp.%d\");\n+  }\n+\n+  /**\n+   * Given a desired file name, find an available name that is similar to the given one that doesn't conflict with already existing backups\n+   *\n+   * @param file    desired ideal file name\n+   * @param pattern pattern to follow if desired name is taken (requires %s for original name, and %d for iteration)\n+   * @return the resolved file name which can be the original desired, or a variation that matches the pattern\n+   */\n+  private Path findAnAvailableBackupLocation(Path file, String pattern)\n+  {\n+    if (backupExists(file))\n     {\n-        Path directoryName = directory.getName( directory.getNameCount() - 1 );\n-        return directory.resolveSibling( format( pattern, directoryName, iteration ) );\n+      // find alternative name\n+      final AtomicLong counter = new AtomicLong(0);\n+      Consumer<Path> countNumberOfFilesProcessedForPotentialErrorMessage =\n+          generatedBackupFile -> counter.getAndIncrement();\n+\n+      return availableAlternativeNames(file, pattern)\n+          .peek(countNumberOfFilesProcessedForPotentialErrorMessage)\n+          .filter(f -> !backupExists(f))\n+          .findFirst()\n+          .orElseThrow(noFreeBackupLocation(file, counter));\n     }\n+    return file;\n+  }\n+\n+  private static Supplier<RuntimeException> noFreeBackupLocation(Path file, AtomicLong counter)\n+  {\n+    return () -> new RuntimeException(String.format(\n+        \"Unable to find a free backup location for the provided %s. %d possible locations were already taken.\",\n+        file, counter.get()));\n+  }\n+\n+  private static Stream<Path> availableAlternativeNames(Path originalBackupDirectory, String pattern)\n+  {\n+    return IntStream.range(0, MAX_OLD_BACKUPS)\n+        .mapToObj(iteration -> alteredBackupDirectoryName(pattern, originalBackupDirectory, iteration));\n+  }\n+\n+  private static Path alteredBackupDirectoryName(String pattern, Path directory, int iteration)\n+  {\n+    Path directoryName = directory.getName(directory.getNameCount() - 1);\n+    return directory.resolveSibling(format(pattern, directoryName, iteration));\n+  }\n }\n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}