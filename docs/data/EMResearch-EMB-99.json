{
    "project_name": "EMResearch-EMB",
    "error_id": "99",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * Create an example text (usually just one sentence) with an error - the error must be marked with {@code <marker>...</marker>}.\n   * @throws IllegalArgumentException if the {@code <marker>...</marker>} is missing\n   * @since 2.5\n   */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/99/Example.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/99/Example.java\nindex 0e12f4183ac..21b4c4f07d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/99/Example.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/99/Example.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2014 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,40 +16,44 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n /**\n  * Helper class to create error examples. For internal use by LanguageTool only.\n+ *\n  * @since 2.5\n  */\n public final class Example {\n \n-  private Example() {\n-  }\n+    private Example() {\n+    }\n \n-  /**\n-   * Create an example text (usually just one sentence) with an error - the error must be marked with {@code <marker>...</marker>}.\n-   * @throws IllegalArgumentException if the {@code <marker>...</marker>} is missing\n-   * @since 2.5\n-   */\n-  public static IncorrectExample wrong(String example) {\n-    requireMarkup(example);\n-    return new IncorrectExample(example);\n-  }\n+    /**\n+     * Create an example text (usually just one sentence) with an error - the error must be marked with {@code <marker>...</marker>}.\n+     *\n+     * @throws IllegalArgumentException if the {@code <marker>...</marker>} is missing\n+     * @since 2.5\n+     */\n+    public static IncorrectExample wrong(String example) {\n+        requireMarkup(example);\n+        return new IncorrectExample(example);\n+    }\n \n-  /**\n-   * Create an example text (usually just one sentence) without an error - the fixed error (compared to the text created\n-   * with {@link #wrong(String)}) can be marked with {@code <marker>...</marker>}.\n-   * @since 2.5, return type modified in 3.5\n-   */\n-  public static CorrectExample fixed(String example) {\n-    return new CorrectExample(example);\n-  }\n+    /**\n+     * Create an example text (usually just one sentence) without an error - the fixed error (compared to the text created\n+     * with {@link #wrong(String)}) can be marked with {@code <marker>...</marker>}.\n+     *\n+     * @since 2.5, return type modified in 3.5\n+     */\n+    public static CorrectExample fixed(String example) {\n+        return new CorrectExample(example);\n+    }\n \n-  private static void requireMarkup(String example) {\n-    if (!example.contains(\"<marker>\") || !example.contains(\"</marker>\")) {\n-      throw new IllegalArgumentException(\"Example text must contain '<marker>...</marker>': \" + example);\n+    private static void requireMarkup(String example) {\n+        if (!example.contains(\"<marker>\") || !example.contains(\"</marker>\")) {\n+            throw new IllegalArgumentException(\"Example text must contain '<marker>...</marker>': \" + example);\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/99/Example.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/99/Example.java\nindex 0e12f4183ac..456548d7c11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/99/Example.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/99/Example.java\n@@ -52,4 +52,4 @@ public final class Example {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/99/Example.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/99/Example.java\nindex 0e12f4183ac..079a0fcabea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/99/Example.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/99/Example.java\n@@ -22,34 +22,39 @@ package org.languagetool.rules;\n  * Helper class to create error examples. For internal use by LanguageTool only.\n  * @since 2.5\n  */\n+\n+\n public final class Example {\n \n-  private Example() {\n-  }\n+    private Example() {\n+\n+    }\n \n   /**\n    * Create an example text (usually just one sentence) with an error - the error must be marked with {@code <marker>...</marker>}.\n    * @throws IllegalArgumentException if the {@code <marker>...</marker>} is missing\n    * @since 2.5\n    */\n-  public static IncorrectExample wrong(String example) {\n-    requireMarkup(example);\n-    return new IncorrectExample(example);\n-  }\n+\n+    public static IncorrectExample wrong(String example) {\n+        requireMarkup(example);\n+        return new IncorrectExample(example);\n+    }\n \n   /**\n    * Create an example text (usually just one sentence) without an error - the fixed error (compared to the text created\n    * with {@link #wrong(String)}) can be marked with {@code <marker>...</marker>}.\n    * @since 2.5, return type modified in 3.5\n    */\n-  public static CorrectExample fixed(String example) {\n-    return new CorrectExample(example);\n-  }\n \n-  private static void requireMarkup(String example) {\n-    if (!example.contains(\"<marker>\") || !example.contains(\"</marker>\")) {\n-      throw new IllegalArgumentException(\"Example text must contain '<marker>...</marker>': \" + example);\n+    public static CorrectExample fixed(String example) {\n+        return new CorrectExample(example);\n     }\n-  }\n \n-}\n+    private static void requireMarkup(String example) {\n+        if (!example.contains(\"<marker>\") || !example.contains(\"</marker>\")) {\n+            throw new IllegalArgumentException(\"Example text must contain '<marker>...</marker>': \"\n+                + example);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}