{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "91",
    "information": {
        "errors": [
            {
                "line": "60",
                "column": "7",
                "severity": "warning",
                "message": "'}' at column 7 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "      do {\n        line = errorReader.readLine();\n      } while (line != null && !line.contains(blockUntil));\n    }\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/91/BlockingProcessStreamReader.java\nindex f4e69b9b6e1..c11d415abe6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/91/BlockingProcessStreamReader.java\n@@ -57,7 +57,9 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+\n+      while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "60",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/91/BlockingProcessStreamReader.java\nindex f4e69b9b6e1..aa0ddd4dece 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/91/BlockingProcessStreamReader.java\n@@ -46,7 +46,7 @@ class BlockingProcessStreamReader extends Thread {\n   private final Pattern logLinePattern;\n \n   private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n+                                      Logger logger) throws IOException {\n     super(\"blocking-process-stream-reader\");\n     setDaemon(true);\n     errorReader = new BufferedReader(new InputStreamReader(stream));\n@@ -66,7 +66,7 @@ class BlockingProcessStreamReader extends Thread {\n     String previousLine = \"\";\n     String nextLine = \"\";\n     try {\n-      for (;;) {\n+      for (; ; ) {\n         previousLine = nextLine;\n         nextLine = errorReader.readLine();\n         if (nextLine == null) {\n@@ -132,7 +132,7 @@ class BlockingProcessStreamReader extends Thread {\n   }\n \n   static BlockingProcessStreamReader start(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n+                                           Logger logger) throws IOException {\n     BlockingProcessStreamReader thread =\n         new BlockingProcessStreamReader(emulator, stream, blockUntil, logger);\n     thread.start();\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/91/BlockingProcessStreamReader.java\nindex f4e69b9b6e1..a25f71d29fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/91/BlockingProcessStreamReader.java\n@@ -47,7 +47,7 @@ class BlockingProcessStreamReader extends Thread {\n \n   private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil,\n       Logger logger) throws IOException {\n-    super(\"blocking-process-stream-reader\");\n+  super(\"blocking-process-stream-reader\");\n     setDaemon(true);\n     errorReader = new BufferedReader(new InputStreamReader(stream));\n     this.logger = logger;\n@@ -57,7 +57,8 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n@@ -138,4 +139,4 @@ class BlockingProcessStreamReader extends Thread {\n     thread.start();\n     return thread;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/91/BlockingProcessStreamReader.java\nindex f4e69b9b6e1..53dd806cbe6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/91/BlockingProcessStreamReader.java\n@@ -19,7 +19,6 @@ package com.google.cloud.testing;\n import static com.google.common.base.MoreObjects.firstNonNull;\n \n import com.google.common.base.Strings;\n-\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -33,10 +32,11 @@ import java.util.regex.Pattern;\n  * This class allows to read a process output stream, block until a provided string appears on the\n  * stream and redirect pertinent error logs to a provided logger.\n  */\n+\n+\n class BlockingProcessStreamReader extends Thread {\n \n   private static final int LOG_LENGTH_LIMIT = 50000;\n-\n   private final BufferedReader errorReader;\n   private final Logger logger;\n   private StringBuilder currentLog;\n@@ -45,8 +45,7 @@ class BlockingProcessStreamReader extends Thread {\n   private final String emulatorTag;\n   private final Pattern logLinePattern;\n \n-  private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n+  private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil, Logger logger) throws IOException {\n     super(\"blocking-process-stream-reader\");\n     setDaemon(true);\n     errorReader = new BufferedReader(new InputStreamReader(stream));\n@@ -57,7 +56,8 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+while(line != null && !line.contains(blockUntil));\n     }\n   }\n \n@@ -94,26 +94,28 @@ class BlockingProcessStreamReader extends Thread {\n       currentLogLevel = nextLogLevel;\n       collectionMode = true;\n     } else if (collectionMode) {\n-      if (currentLog.length() > LOG_LENGTH_LIMIT) {\n-        collectionMode = false;\n-      } else if (currentLog.length() == 0) {\n+             if (currentLog.length() > LOG_LENGTH_LIMIT) {\n+               collectionMode = false;\n+             } else if (currentLog.length() == 0) {\n         // strip level out of the line\n-        currentLog.append(emulatorTag);\n-        currentLog.append(previousLine.split(\":\", 2)[1]);\n-        currentLog.append(System.getProperty(\"line.separator\"));\n-      } else {\n-        if (!previousLine.startsWith(emulatorTag)) {\n-          currentLog.append(emulatorTag);\n-          currentLog.append(' ');\n-        }\n-        currentLog.append(previousLine);\n-        currentLog.append(System.getProperty(\"line.separator\"));\n-      }\n-    }\n+                      currentLog.append(emulatorTag);\n+                      currentLog.append(previousLine.split(\":\", 2)[1]);\n+                      currentLog.append(System.getProperty(\"line.separator\"));\n+                    } else {\n+                      if (!previousLine.startsWith(emulatorTag)) {\n+                        currentLog.append(emulatorTag);\n+                        currentLog.append(' ');\n+                      }\n+                      currentLog.append(previousLine);\n+                      currentLog.append(System.getProperty(\"line.separator\"));\n+             }\n+           }\n   }\n \n   private void writeLog() {\n-    if (currentLogLevel != null && currentLog != null && currentLog.length() != 0) {\n+    if (currentLogLevel != null\n+    && currentLog != null\n+    && currentLog.length() != 0) {\n       logger.log(currentLogLevel, currentLog.toString().trim());\n     }\n   }\n@@ -131,11 +133,9 @@ class BlockingProcessStreamReader extends Thread {\n     }\n   }\n \n-  static BlockingProcessStreamReader start(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n-    BlockingProcessStreamReader thread =\n-        new BlockingProcessStreamReader(emulator, stream, blockUntil, logger);\n+  static BlockingProcessStreamReader start(String emulator, InputStream stream, String blockUntil, Logger logger) throws IOException {\n+    BlockingProcessStreamReader thread = new BlockingProcessStreamReader(emulator, stream, blockUntil, logger);\n     thread.start();\n     return thread;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/91/BlockingProcessStreamReader.java\nindex f4e69b9b6e1..c11d415abe6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/91/BlockingProcessStreamReader.java\n@@ -57,7 +57,9 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+\n+      while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "59",
                    "column": "39",
                    "severity": "warning",
                    "message": "'}' at column 39 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/91/BlockingProcessStreamReader.java\nindex f4e69b9b6e1..2d75f2fccbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/91/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/91/BlockingProcessStreamReader.java\n@@ -56,8 +56,8 @@ class BlockingProcessStreamReader extends Thread {\n     if (!Strings.isNullOrEmpty(blockUntil)) {\n       String line;\n       do {\n-        line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+        line = errorReader.readLine();}\n+      while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}