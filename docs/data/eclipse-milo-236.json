{
    "project_name": "eclipse-milo",
    "error_id": "236",
    "information": {
        "errors": [
            {
                "line": "83",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n        throws UaException;\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler/236/CreateFileMethod.java\nindex 7fae1981550..ffe98d8a324 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler/236/CreateFileMethod.java\n@@ -80,6 +80,6 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n     }\n \n     protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n+                                     String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n         throws UaException;\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/236/CreateFileMethod.java\nindex 7fae1981550..62ca1835231 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/intellij/236/CreateFileMethod.java\n@@ -60,12 +60,12 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n \n     @Override\n     public Argument[] getInputArguments() {\n-        return new Argument[]{FILE_NAME, REQUEST_FILE_OPEN};\n+        return new Argument[] {FILE_NAME, REQUEST_FILE_OPEN};\n     }\n \n     @Override\n     public Argument[] getOutputArguments() {\n-        return new Argument[]{FILE_NODE_ID, FILE_HANDLE};\n+        return new Argument[] {FILE_NODE_ID, FILE_HANDLE};\n     }\n \n     @Override\n@@ -76,10 +76,11 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n         Out<NodeId> fileNodeId = new Out<NodeId>();\n         Out<UInteger> fileHandle = new Out<UInteger>();\n         invoke(context, fileName, requestFileOpen, fileNodeId, fileHandle);\n-        return new Variant[]{new Variant(fileNodeId.get()), new Variant(fileHandle.get())};\n+        return new Variant[] {new Variant(fileNodeId.get()), new Variant(fileHandle.get())};\n     }\n \n     protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n+                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId,\n+                                   Out<UInteger> fileHandle)\n         throws UaException;\n }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/236/CreateFileMethod.java\nindex 7fae1981550..c7bc80506cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/naturalize/236/CreateFileMethod.java\n@@ -80,6 +80,5 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n     }\n \n     protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n-        throws UaException;\n-}\n+                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle) throws UaException;\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/236/CreateFileMethod.java\nindex 7fae1981550..16f356c6676 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/codebuff/236/CreateFileMethod.java\n@@ -22,37 +22,17 @@ import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;\n import org.eclipse.milo.opcua.stack.core.types.structured.Argument;\n \n public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n-    public static final Argument FILE_NAME = new Argument(\n-        \"FileName\",\n-        NodeId.parse(\"ns=0;i=12\"),\n-        ValueRanks.Scalar,\n-        null,\n-        new LocalizedText(\"\", \"\")\n-    );\n-\n-    public static final Argument REQUEST_FILE_OPEN = new Argument(\n-        \"RequestFileOpen\",\n-        NodeId.parse(\"ns=0;i=1\"),\n-        ValueRanks.Scalar,\n-        null,\n-        new LocalizedText(\"\", \"\")\n-    );\n-\n-    public static final Argument FILE_NODE_ID = new Argument(\n-        \"FileNodeId\",\n-        NodeId.parse(\"ns=0;i=17\"),\n-        ValueRanks.Scalar,\n-        null,\n-        new LocalizedText(\"\", \"\")\n-    );\n-\n-    public static final Argument FILE_HANDLE = new Argument(\n-        \"FileHandle\",\n-        NodeId.parse(\"ns=0;i=7\"),\n-        ValueRanks.Scalar,\n-        null,\n-        new LocalizedText(\"\", \"\")\n-    );\n+\n+    public static final Argument FILE_NAME = new Argument(\"FileName\", NodeId.parse(\"ns=0;i=12\"), ValueRanks.Scalar, null, new LocalizedText(\"\", \"\"));\n+\n+\n+    public static final Argument REQUEST_FILE_OPEN = new Argument(\"RequestFileOpen\", NodeId.parse(\"ns=0;i=1\"), ValueRanks.Scalar, null, new LocalizedText(\"\", \"\"));\n+\n+\n+    public static final Argument FILE_NODE_ID = new Argument(\"FileNodeId\", NodeId.parse(\"ns=0;i=17\"), ValueRanks.Scalar, null, new LocalizedText(\"\", \"\"));\n+\n+\n+    public static final Argument FILE_HANDLE = new Argument(\"FileHandle\", NodeId.parse(\"ns=0;i=7\"), ValueRanks.Scalar, null, new LocalizedText(\"\", \"\"));\n \n     public CreateFileMethod(UaMethodNode node) {\n         super(node);\n@@ -69,17 +49,24 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n     }\n \n     @Override\n-    protected Variant[] invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                               Variant[] inputValues) throws UaException {\n+    protected Variant[] invoke(AbstractMethodInvocationHandler.InvocationContext context, Variant[] inputValues) throws UaException {\n         String fileName = (String) inputValues[0].getValue();\n+\n         Boolean requestFileOpen = (Boolean) inputValues[1].getValue();\n+\n         Out<NodeId> fileNodeId = new Out<NodeId>();\n+\n         Out<UInteger> fileHandle = new Out<UInteger>();\n+\n         invoke(context, fileName, requestFileOpen, fileNodeId, fileHandle);\n         return new Variant[]{new Variant(fileNodeId.get()), new Variant(fileHandle.get())};\n     }\n \n-    protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n-        throws UaException;\n-}\n+\n+    protected abstract void invoke(\n+        AbstractMethodInvocationHandler.InvocationContext context,\n+        String fileName,\n+        Boolean requestFileOpen,\n+        Out<NodeId> fileNodeId, Out<UInteger> fileHandle\n+    ) throws UaException;\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_random/236/CreateFileMethod.java\nindex 7fae1981550..dd4657d5f04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_random/236/CreateFileMethod.java\n@@ -80,6 +80,6 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n     }\n \n     protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n-        throws UaException;\n+                                        String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n+                                   throws UaException;\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_three_grams/236/CreateFileMethod.java\nindex 7fae1981550..ffe98d8a324 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/errored/1/236/CreateFileMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-milo/styler_three_grams/236/CreateFileMethod.java\n@@ -80,6 +80,6 @@ public abstract class CreateFileMethod extends AbstractMethodInvocationHandler {\n     }\n \n     protected abstract void invoke(AbstractMethodInvocationHandler.InvocationContext context,\n-                                   String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n+                                     String fileName, Boolean requestFileOpen, Out<NodeId> fileNodeId, Out<UInteger> fileHandle)\n         throws UaException;\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}