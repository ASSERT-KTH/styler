{
    "project_name": "apache-ignite-3",
    "error_id": "49",
    "information": {
        "errors": [
            {
                "line": "474",
                "column": "9",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    static class MockCliService extends CliServiceImpl {\n        private final Map<String, PeerId> rebalancedLeaderIds;\n        private final PeerId initialLeaderId;\n\n        MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n            this.rebalancedLeaderIds = rebalancedLeaderIds;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/49/ITCliServiceTest.java\nindex a7730be8bbb..2a40642b5be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/49/ITCliServiceTest.java\n@@ -471,6 +471,7 @@ public class ITCliServiceTest {\n \n     static class MockCliService extends CliServiceImpl {\n         private final Map<String, PeerId> rebalancedLeaderIds;\n+\n         private final PeerId initialLeaderId;\n \n         MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/49/ITCliServiceTest.java\nindex a7730be8bbb..5c263bb687f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/49/ITCliServiceTest.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft.core;\n \n import java.io.File;\n@@ -65,487 +66,517 @@ import static org.junit.jupiter.api.Assertions.fail;\n  * Jraft cli tests.\n  */\n public class ITCliServiceTest {\n-    /**\n-     * The logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(ITCliServiceTest.class);\n+  /**\n+   * The logger.\n+   */\n+  private static final Logger LOG = LoggerFactory.getLogger(ITCliServiceTest.class);\n \n-    private static final int LEARNER_PORT_STEP = 100;\n+  private static final int LEARNER_PORT_STEP = 100;\n \n-    private String dataPath;\n+  private String dataPath;\n \n-    private TestCluster cluster;\n+  private TestCluster cluster;\n \n-    private final String groupId = \"CliServiceTest\";\n+  private final String groupId = \"CliServiceTest\";\n \n-    private CliService cliService;\n+  private CliService cliService;\n \n-    private Configuration conf;\n+  private Configuration conf;\n \n-    /** */\n-    @BeforeEach\n-    public void setup(TestInfo testInfo) throws Exception {\n-        LOG.info(\">>>>>>>>>>>>>>> Start test method: \" + testInfo.getDisplayName());\n-        dataPath = TestUtils.mkTempDir();\n-        new File(dataPath).mkdirs();\n-        List<PeerId> peers = TestUtils.generatePeers(3);\n+  /**\n+   *\n+   */\n+  @BeforeEach\n+  public void setup(TestInfo testInfo) throws Exception {\n+    LOG.info(\">>>>>>>>>>>>>>> Start test method: \" + testInfo.getDisplayName());\n+    dataPath = TestUtils.mkTempDir();\n+    new File(dataPath).mkdirs();\n+    List<PeerId> peers = TestUtils.generatePeers(3);\n \n-        LinkedHashSet<PeerId> learners = new LinkedHashSet<>();\n+    LinkedHashSet<PeerId> learners = new LinkedHashSet<>();\n \n-        // 2 learners\n-        for (int i = 0; i < 2; i++)\n-            learners.add(new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + LEARNER_PORT_STEP + i));\n+    // 2 learners\n+    for (int i = 0; i < 2; i++) {\n+      learners.add(new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + LEARNER_PORT_STEP + i));\n+    }\n \n-        cluster = new TestCluster(groupId, dataPath, peers, learners, 300);\n-        for (PeerId peer : peers)\n-            cluster.start(peer.getEndpoint());\n+    cluster = new TestCluster(groupId, dataPath, peers, learners, 300);\n+    for (PeerId peer : peers) {\n+      cluster.start(peer.getEndpoint());\n+    }\n \n-        for (PeerId peer : learners)\n-            cluster.startLearner(peer);\n+    for (PeerId peer : learners) {\n+      cluster.startLearner(peer);\n+    }\n \n-        cluster.waitLeader();\n-        cluster.ensureLeader(cluster.getLeader());\n+    cluster.waitLeader();\n+    cluster.ensureLeader(cluster.getLeader());\n \n-        cliService = new CliServiceImpl();\n-        conf = new Configuration(peers, learners);\n+    cliService = new CliServiceImpl();\n+    conf = new Configuration(peers, learners);\n \n-        CliOptions opts = new CliOptions();\n-        opts.setClientExecutor(JRaftUtils.createClientExecutor(opts, \"client\"));\n+    CliOptions opts = new CliOptions();\n+    opts.setClientExecutor(JRaftUtils.createClientExecutor(opts, \"client\"));\n \n-        List<String> memberAddresses = peers.stream().map(p -> p.getEndpoint().toString()).collect(Collectors.toList());\n+    List<String> memberAddresses = peers.stream().map(p -> p.getEndpoint().toString()).collect(Collectors.toList());\n \n-        var registry = new MessageSerializationRegistryImpl();\n+    var registry = new MessageSerializationRegistryImpl();\n \n-        var serviceConfig = new ClusterLocalConfiguration(\"client\", TestUtils.INIT_PORT - 1, memberAddresses, registry);\n+    var serviceConfig = new ClusterLocalConfiguration(\"client\", TestUtils.INIT_PORT - 1, memberAddresses, registry);\n \n-        var factory = new TestScaleCubeClusterServiceFactory();\n+    var factory = new TestScaleCubeClusterServiceFactory();\n \n-        ClusterService clientSvc = factory.createClusterService(serviceConfig);\n+    ClusterService clientSvc = factory.createClusterService(serviceConfig);\n \n-        clientSvc.start();\n+    clientSvc.start();\n \n-        IgniteRpcClient rpcClient = new IgniteRpcClient(clientSvc) {\n-            @Override public void shutdown() {\n-                super.shutdown();\n+    IgniteRpcClient rpcClient = new IgniteRpcClient(clientSvc) {\n+      @Override\n+      public void shutdown() {\n+        super.shutdown();\n \n-                clientSvc.shutdown();\n-            }\n-        };\n+        clientSvc.shutdown();\n+      }\n+    };\n \n-        opts.setRpcClient(rpcClient);\n-        assertTrue(cliService.init(opts));\n-    }\n+    opts.setRpcClient(rpcClient);\n+    assertTrue(cliService.init(opts));\n+  }\n \n-    @AfterEach\n-    public void teardown(TestInfo testInfo) throws Exception {\n-        cliService.shutdown();\n-        cluster.stopAll();\n-        Utils.delete(new File(dataPath));\n-        LOG.info(\">>>>>>>>>>>>>>> End test method: \" + testInfo.getDisplayName());\n-    }\n+  @AfterEach\n+  public void teardown(TestInfo testInfo) throws Exception {\n+    cliService.shutdown();\n+    cluster.stopAll();\n+    Utils.delete(new File(dataPath));\n+    LOG.info(\">>>>>>>>>>>>>>> End test method: \" + testInfo.getDisplayName());\n+  }\n \n-    @Test\n-    public void testTransferLeader() throws Exception {\n-        PeerId leader = cluster.getLeader().getNodeId().getPeerId().copy();\n-        assertNotNull(leader);\n-\n-        Set<PeerId> peers = conf.getPeerSet();\n-        PeerId targetPeer = null;\n-        for (PeerId peer : peers) {\n-            if (!peer.equals(leader)) {\n-                targetPeer = peer;\n-                break;\n-            }\n-        }\n-        assertNotNull(targetPeer);\n-        assertTrue(cliService.transferLeader(groupId, conf, targetPeer).isOk());\n-        cluster.waitLeader();\n-        assertEquals(targetPeer, cluster.getLeader().getNodeId().getPeerId());\n-    }\n+  @Test\n+  public void testTransferLeader() throws Exception {\n+    PeerId leader = cluster.getLeader().getNodeId().getPeerId().copy();\n+    assertNotNull(leader);\n \n-    @SuppressWarnings(\"SameParameterValue\")\n-    private void sendTestTaskAndWait(Node node, int code) throws InterruptedException {\n-        CountDownLatch latch = new CountDownLatch(10);\n-        for (int i = 0; i < 10; i++) {\n-            ByteBuffer data = ByteBuffer.wrap((\"hello\" + i).getBytes());\n-            Task task = new Task(data, new ExpectClosure(code, null, latch));\n-            node.apply(task);\n-        }\n-        assertTrue(latch.await(10, TimeUnit.SECONDS));\n+    Set<PeerId> peers = conf.getPeerSet();\n+    PeerId targetPeer = null;\n+    for (PeerId peer : peers) {\n+      if (!peer.equals(leader)) {\n+        targetPeer = peer;\n+        break;\n+      }\n+    }\n+    assertNotNull(targetPeer);\n+    assertTrue(cliService.transferLeader(groupId, conf, targetPeer).isOk());\n+    cluster.waitLeader();\n+    assertEquals(targetPeer, cluster.getLeader().getNodeId().getPeerId());\n+  }\n+\n+  @SuppressWarnings(\"SameParameterValue\")\n+  private void sendTestTaskAndWait(Node node, int code) throws InterruptedException {\n+    CountDownLatch latch = new CountDownLatch(10);\n+    for (int i = 0; i < 10; i++) {\n+      ByteBuffer data = ByteBuffer.wrap((\"hello\" + i).getBytes());\n+      Task task = new Task(data, new ExpectClosure(code, null, latch));\n+      node.apply(task);\n+    }\n+    assertTrue(latch.await(10, TimeUnit.SECONDS));\n+  }\n+\n+  @Test\n+  public void testLearnerServices() throws Exception {\n+    PeerId learner3 = new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + LEARNER_PORT_STEP + 3);\n+    assertTrue(cluster.startLearner(learner3));\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n+    cluster.ensureSame(addr -> addr.equals(learner3.getEndpoint()));\n+\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      if (!fsm.getAddress().equals(learner3.getEndpoint())) {\n+        assertEquals(10, fsm.getLogs().size());\n+      }\n     }\n \n-    @Test\n-    public void testLearnerServices() throws Exception {\n-        PeerId learner3 = new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + LEARNER_PORT_STEP + 3);\n-        assertTrue(cluster.startLearner(learner3));\n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n-        cluster.ensureSame(addr -> addr.equals(learner3.getEndpoint()));\n+    assertEquals(0, cluster.getFsmByPeer(learner3).getLogs().size());\n+    List<PeerId> oldLearners = new ArrayList<PeerId>(conf.getLearners());\n+    assertEquals(oldLearners, cliService.getLearners(groupId, conf));\n+    assertEquals(oldLearners, cliService.getAliveLearners(groupId, conf));\n \n-        for (MockStateMachine fsm : cluster.getFsms()) {\n-            if (!fsm.getAddress().equals(learner3.getEndpoint()))\n-                assertEquals(10, fsm.getLogs().size());\n-        }\n+    // Add learner3\n+    cliService.addLearners(groupId, conf, Collections.singletonList(learner3));\n \n-        assertEquals(0, cluster.getFsmByPeer(learner3).getLogs().size());\n-        List<PeerId> oldLearners = new ArrayList<PeerId>(conf.getLearners());\n-        assertEquals(oldLearners, cliService.getLearners(groupId, conf));\n-        assertEquals(oldLearners, cliService.getAliveLearners(groupId, conf));\n+    assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs().size() == 10, 5_000));\n \n-        // Add learner3\n-        cliService.addLearners(groupId, conf, Collections.singletonList(learner3));\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n \n-        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs().size() == 10, 5_000));\n+    cluster.ensureSame();\n \n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      assertEquals(20, fsm.getLogs().size());\n+    }\n \n-        cluster.ensureSame();\n+    List<PeerId> newLearners = new ArrayList<>(oldLearners);\n+    newLearners.add(learner3);\n+    assertEquals(newLearners, cliService.getLearners(groupId, conf));\n+    assertEquals(newLearners, cliService.getAliveLearners(groupId, conf));\n \n-        for (MockStateMachine fsm : cluster.getFsms())\n-            assertEquals(20, fsm.getLogs().size());\n+    // Remove  3\n+    cliService.removeLearners(groupId, conf, Collections.singletonList(learner3));\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n \n-        List<PeerId> newLearners = new ArrayList<>(oldLearners);\n-        newLearners.add(learner3);\n-        assertEquals(newLearners, cliService.getLearners(groupId, conf));\n-        assertEquals(newLearners, cliService.getAliveLearners(groupId, conf));\n+    cluster.ensureSame(addr -> addr.equals(learner3.getEndpoint()));\n \n-        // Remove  3\n-        cliService.removeLearners(groupId, conf, Collections.singletonList(learner3));\n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      if (!fsm.getAddress().equals(learner3.getEndpoint())) {\n+        assertEquals(30, fsm.getLogs().size());\n+      }\n+    }\n \n-        cluster.ensureSame(addr -> addr.equals(learner3.getEndpoint()));\n+    // Latest 10 logs are not replicated to learner3, because it's removed.\n+    assertEquals(20, cluster.getFsmByPeer(learner3).getLogs().size());\n+    assertEquals(oldLearners, cliService.getLearners(groupId, conf));\n+    assertEquals(oldLearners, cliService.getAliveLearners(groupId, conf));\n \n-        for (MockStateMachine fsm : cluster.getFsms()) {\n-            if (!fsm.getAddress().equals(learner3.getEndpoint()))\n-                assertEquals(30, fsm.getLogs().size());\n-        }\n+    // Set learners into [learner3]\n+    cliService.resetLearners(groupId, conf, Collections.singletonList(learner3));\n \n-        // Latest 10 logs are not replicated to learner3, because it's removed.\n-        assertEquals(20, cluster.getFsmByPeer(learner3).getLogs().size());\n-        assertEquals(oldLearners, cliService.getLearners(groupId, conf));\n-        assertEquals(oldLearners, cliService.getAliveLearners(groupId, conf));\n+    assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs().size() == 30, 5_000));\n \n-        // Set learners into [learner3]\n-        cliService.resetLearners(groupId, conf, Collections.singletonList(learner3));\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n \n-        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs().size() == 30, 5_000));\n+    cluster.ensureSame(addr -> oldLearners.contains(new PeerId(addr, 0)));\n \n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n+    // Latest 10 logs are not replicated to learner1 and learner2, because they were removed by resetting learners set.\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      if (!oldLearners.contains(new PeerId(fsm.getAddress(), 0))) {\n+        assertEquals(40, fsm.getLogs().size());\n+      } else {\n+        assertEquals(30, fsm.getLogs().size());\n+      }\n+    }\n \n-        cluster.ensureSame(addr -> oldLearners.contains(new PeerId(addr, 0)));\n+    assertEquals(Collections.singletonList(learner3), cliService.getLearners(groupId, conf));\n+    assertEquals(Collections.singletonList(learner3), cliService.getAliveLearners(groupId, conf));\n \n-        // Latest 10 logs are not replicated to learner1 and learner2, because they were removed by resetting learners set.\n-        for (MockStateMachine fsm : cluster.getFsms()) {\n-            if (!oldLearners.contains(new PeerId(fsm.getAddress(), 0)))\n-                assertEquals(40, fsm.getLogs().size());\n-            else\n-                assertEquals(30, fsm.getLogs().size());\n-        }\n+    // Stop learner3\n+    cluster.stop(learner3.getEndpoint());\n+    sleep(1000);\n+    assertEquals(Collections.singletonList(learner3), cliService.getLearners(groupId, conf));\n+    assertTrue(cliService.getAliveLearners(groupId, conf).isEmpty());\n+  }\n \n-        assertEquals(Collections.singletonList(learner3), cliService.getLearners(groupId, conf));\n-        assertEquals(Collections.singletonList(learner3), cliService.getAliveLearners(groupId, conf));\n+  @Test\n+  public void testAddPeerRemovePeer() throws Exception {\n+    PeerId peer3 = new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + 3);\n+    assertTrue(cluster.start(peer3.getEndpoint()));\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n+    cluster.ensureSame(addr -> addr.equals(peer3.getEndpoint()));\n+    assertEquals(0, cluster.getFsmByPeer(peer3).getLogs().size());\n \n-        // Stop learner3\n-        cluster.stop(learner3.getEndpoint());\n-        sleep(1000);\n-        assertEquals(Collections.singletonList(learner3), cliService.getLearners(groupId, conf));\n-        assertTrue(cliService.getAliveLearners(groupId, conf).isEmpty());\n-    }\n+    assertTrue(cliService.addPeer(groupId, conf, peer3).isOk());\n \n-    @Test\n-    public void testAddPeerRemovePeer() throws Exception {\n-        PeerId peer3 = new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + 3);\n-        assertTrue(cluster.start(peer3.getEndpoint()));\n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n-        cluster.ensureSame(addr -> addr.equals(peer3.getEndpoint()));\n-        assertEquals(0, cluster.getFsmByPeer(peer3).getLogs().size());\n+    assertTrue(waitForCondition(() -> cluster.getFsmByPeer(peer3).getLogs().size() == 10, 5_000));\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n \n-        assertTrue(cliService.addPeer(groupId, conf, peer3).isOk());\n+    assertEquals(6, cluster.getFsms().size());\n \n-        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(peer3).getLogs().size() == 10, 5_000));\n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n+    cluster.ensureSame();\n \n-        assertEquals(6, cluster.getFsms().size());\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      assertEquals(20, fsm.getLogs().size());\n+    }\n \n-        cluster.ensureSame();\n+    //remove peer3\n+    assertTrue(cliService.removePeer(groupId, conf, peer3).isOk());\n+    sleep(200);\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n \n-        for (MockStateMachine fsm : cluster.getFsms())\n-            assertEquals(20, fsm.getLogs().size());\n+    assertEquals(6, cluster.getFsms().size());\n \n-        //remove peer3\n-        assertTrue(cliService.removePeer(groupId, conf, peer3).isOk());\n-        sleep(200);\n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n+    cluster.ensureSame(addr -> addr.equals(peer3.getEndpoint()));\n \n-        assertEquals(6, cluster.getFsms().size());\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      if (fsm.getAddress().equals(peer3.getEndpoint())) {\n+        assertEquals(20, fsm.getLogs().size());\n+      } else {\n+        assertEquals(30, fsm.getLogs().size());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testChangePeers() throws Exception {\n+    List<PeerId> newPeers = TestUtils.generatePeers(10);\n+    newPeers.removeAll(conf.getPeerSet());\n+    for (PeerId peer : newPeers) {\n+      assertTrue(cluster.start(peer.getEndpoint()));\n+    }\n+    cluster.waitLeader();\n+    Node oldLeaderNode = cluster.getLeader();\n+    assertNotNull(oldLeaderNode);\n+    PeerId oldLeader = oldLeaderNode.getNodeId().getPeerId();\n+    assertNotNull(oldLeader);\n+    assertTrue(cliService.changePeers(groupId, conf, new Configuration(newPeers)).isOk());\n+    cluster.waitLeader();\n+    PeerId newLeader = cluster.getLeader().getNodeId().getPeerId();\n+    assertNotEquals(oldLeader, newLeader);\n+    assertTrue(newPeers.contains(newLeader));\n+  }\n+\n+  @Test\n+  public void testSnapshot() throws Exception {\n+    sendTestTaskAndWait(cluster.getLeader(), 0);\n+    assertEquals(5, cluster.getFsms().size());\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      assertEquals(0, fsm.getSaveSnapshotTimes());\n+    }\n \n-        cluster.ensureSame(addr -> addr.equals(peer3.getEndpoint()));\n+    for (PeerId peer : conf) {\n+      assertTrue(cliService.snapshot(groupId, peer).isOk());\n+    }\n \n-        for (MockStateMachine fsm : cluster.getFsms()) {\n-            if (fsm.getAddress().equals(peer3.getEndpoint()))\n-                assertEquals(20, fsm.getLogs().size());\n-            else\n-                assertEquals(30, fsm.getLogs().size());\n-        }\n+    for (PeerId peer : conf.getLearners()) {\n+      assertTrue(cliService.snapshot(groupId, peer).isOk());\n     }\n \n-    @Test\n-    public void testChangePeers() throws Exception {\n-        List<PeerId> newPeers = TestUtils.generatePeers(10);\n-        newPeers.removeAll(conf.getPeerSet());\n-        for (PeerId peer : newPeers)\n-            assertTrue(cluster.start(peer.getEndpoint()));\n-        cluster.waitLeader();\n-        Node oldLeaderNode = cluster.getLeader();\n-        assertNotNull(oldLeaderNode);\n-        PeerId oldLeader = oldLeaderNode.getNodeId().getPeerId();\n-        assertNotNull(oldLeader);\n-        assertTrue(cliService.changePeers(groupId, conf, new Configuration(newPeers)).isOk());\n-        cluster.waitLeader();\n-        PeerId newLeader = cluster.getLeader().getNodeId().getPeerId();\n-        assertNotEquals(oldLeader, newLeader);\n-        assertTrue(newPeers.contains(newLeader));\n+    for (MockStateMachine fsm : cluster.getFsms()) {\n+      assertEquals(1, fsm.getSaveSnapshotTimes());\n     }\n+  }\n \n-    @Test\n-    public void testSnapshot() throws Exception {\n-        sendTestTaskAndWait(cluster.getLeader(), 0);\n-        assertEquals(5, cluster.getFsms().size());\n-        for (MockStateMachine fsm : cluster.getFsms())\n-            assertEquals(0, fsm.getSaveSnapshotTimes());\n+  @Test\n+  public void testGetPeers() throws Exception {\n+    PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n+    assertNotNull(leader);\n+    assertArrayEquals(conf.getPeerSet().toArray(),\n+        new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n \n-        for (PeerId peer : conf)\n-            assertTrue(cliService.snapshot(groupId, peer).isOk());\n+    // stop one peer\n+    List<PeerId> peers = conf.getPeers();\n+    cluster.stop(peers.get(0).getEndpoint());\n \n-        for (PeerId peer : conf.getLearners())\n-            assertTrue(cliService.snapshot(groupId, peer).isOk());\n+    cluster.waitLeader();\n \n-        for (MockStateMachine fsm : cluster.getFsms())\n-            assertEquals(1, fsm.getSaveSnapshotTimes());\n-    }\n+    leader = cluster.getLeader().getNodeId().getPeerId();\n+    assertNotNull(leader);\n+    assertArrayEquals(conf.getPeerSet().toArray(),\n+        new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n \n-    @Test\n-    public void testGetPeers() throws Exception {\n-        PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n-        assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n-\n-        // stop one peer\n-        List<PeerId> peers = conf.getPeers();\n-        cluster.stop(peers.get(0).getEndpoint());\n-\n-        cluster.waitLeader();\n-\n-        leader = cluster.getLeader().getNodeId().getPeerId();\n-        assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n-\n-        cluster.stopAll();\n-\n-        try {\n-            cliService.getPeers(groupId, conf);\n-            fail();\n-        }\n-        catch (IllegalStateException e) {\n-            assertTrue(e.getMessage().startsWith(\"Fail to get leader of group \" + groupId), e.getMessage());\n-        }\n+    cluster.stopAll();\n+\n+    try {\n+      cliService.getPeers(groupId, conf);\n+      fail();\n+    } catch (IllegalStateException e) {\n+      assertTrue(e.getMessage().startsWith(\"Fail to get leader of group \" + groupId), e.getMessage());\n     }\n+  }\n \n-    @Test\n-    public void testGetAlivePeers() throws Exception {\n-        PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n-        assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n+  @Test\n+  public void testGetAlivePeers() throws Exception {\n+    PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n+    assertNotNull(leader);\n+    assertArrayEquals(conf.getPeerSet().toArray(),\n+        new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n \n-        // stop one peer\n-        List<PeerId> peers = conf.getPeers();\n-        cluster.stop(peers.get(0).getEndpoint());\n-        peers.remove(0);\n+    // stop one peer\n+    List<PeerId> peers = conf.getPeers();\n+    cluster.stop(peers.get(0).getEndpoint());\n+    peers.remove(0);\n \n-        cluster.waitLeader();\n+    cluster.waitLeader();\n \n-        sleep(1000);\n+    sleep(1000);\n \n-        leader = cluster.getLeader().getNodeId().getPeerId();\n-        assertNotNull(leader);\n-        assertArrayEquals(new HashSet<>(peers).toArray(),\n-            new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n+    leader = cluster.getLeader().getNodeId().getPeerId();\n+    assertNotNull(leader);\n+    assertArrayEquals(new HashSet<>(peers).toArray(),\n+        new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n \n-        cluster.stopAll();\n+    cluster.stopAll();\n \n-        try {\n-            cliService.getAlivePeers(groupId, conf);\n-            fail();\n-        }\n-        catch (IllegalStateException e) {\n-            assertTrue(e.getMessage().startsWith(\"Fail to get leader of group \" + groupId), e.getMessage());\n-        }\n+    try {\n+      cliService.getAlivePeers(groupId, conf);\n+      fail();\n+    } catch (IllegalStateException e) {\n+      assertTrue(e.getMessage().startsWith(\"Fail to get leader of group \" + groupId), e.getMessage());\n     }\n-\n-    @Test\n-    public void testRebalance() {\n-        Set<String> groupIds = new TreeSet<>();\n-        groupIds.add(\"group_1\");\n-        groupIds.add(\"group_2\");\n-        groupIds.add(\"group_3\");\n-        groupIds.add(\"group_4\");\n-        groupIds.add(\"group_5\");\n-        groupIds.add(\"group_6\");\n-        groupIds.add(\"group_7\");\n-        groupIds.add(\"group_8\");\n-        Configuration conf = new Configuration();\n-        conf.addPeer(new PeerId(\"host_1\", 8080));\n-        conf.addPeer(new PeerId(\"host_2\", 8080));\n-        conf.addPeer(new PeerId(\"host_3\", 8080));\n-\n-        Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n-\n-        CliService cliService = new MockCliService(rebalancedLeaderIds, new PeerId(\"host_1\", 8080));\n-\n-        assertTrue(cliService.rebalance(groupIds, conf, rebalancedLeaderIds).isOk());\n-        assertEquals(groupIds.size(), rebalancedLeaderIds.size());\n-\n-        Map<PeerId, Integer> ret = new HashMap<>();\n-        for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet())\n-            ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n-        int expectedAvgLeaderNum = (int) Math.ceil((double) groupIds.size() / conf.size());\n-        for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n-            System.out.println(entry);\n-            assertTrue(entry.getValue() <= expectedAvgLeaderNum);\n-        }\n+  }\n+\n+  @Test\n+  public void testRebalance() {\n+    Set<String> groupIds = new TreeSet<>();\n+    groupIds.add(\"group_1\");\n+    groupIds.add(\"group_2\");\n+    groupIds.add(\"group_3\");\n+    groupIds.add(\"group_4\");\n+    groupIds.add(\"group_5\");\n+    groupIds.add(\"group_6\");\n+    groupIds.add(\"group_7\");\n+    groupIds.add(\"group_8\");\n+    Configuration conf = new Configuration();\n+    conf.addPeer(new PeerId(\"host_1\", 8080));\n+    conf.addPeer(new PeerId(\"host_2\", 8080));\n+    conf.addPeer(new PeerId(\"host_3\", 8080));\n+\n+    Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n+\n+    CliService cliService = new MockCliService(rebalancedLeaderIds, new PeerId(\"host_1\", 8080));\n+\n+    assertTrue(cliService.rebalance(groupIds, conf, rebalancedLeaderIds).isOk());\n+    assertEquals(groupIds.size(), rebalancedLeaderIds.size());\n+\n+    Map<PeerId, Integer> ret = new HashMap<>();\n+    for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet()) {\n+      ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n     }\n+    int expectedAvgLeaderNum = (int) Math.ceil((double) groupIds.size() / conf.size());\n+    for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n+      System.out.println(entry);\n+      assertTrue(entry.getValue() <= expectedAvgLeaderNum);\n+    }\n+  }\n+\n+  @Test\n+  public void testRebalanceOnLeaderFail() {\n+    Set<String> groupIds = new TreeSet<>();\n+    groupIds.add(\"group_1\");\n+    groupIds.add(\"group_2\");\n+    groupIds.add(\"group_3\");\n+    groupIds.add(\"group_4\");\n+    Configuration conf = new Configuration();\n+    conf.addPeer(new PeerId(\"host_1\", 8080));\n+    conf.addPeer(new PeerId(\"host_2\", 8080));\n+    conf.addPeer(new PeerId(\"host_3\", 8080));\n+\n+    Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n+\n+    CliService cliService = new MockLeaderFailCliService();\n+\n+    assertEquals(\"Fail to get leader\", cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n+  }\n+\n+  @Test\n+  public void testRelalanceOnTransferLeaderFail() {\n+    Set<String> groupIds = new TreeSet<>();\n+    groupIds.add(\"group_1\");\n+    groupIds.add(\"group_2\");\n+    groupIds.add(\"group_3\");\n+    groupIds.add(\"group_4\");\n+    groupIds.add(\"group_5\");\n+    groupIds.add(\"group_6\");\n+    groupIds.add(\"group_7\");\n+    Configuration conf = new Configuration();\n+    conf.addPeer(new PeerId(\"host_1\", 8080));\n+    conf.addPeer(new PeerId(\"host_2\", 8080));\n+    conf.addPeer(new PeerId(\"host_3\", 8080));\n+\n+    Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n+\n+    CliService cliService = new MockTransferLeaderFailCliService(rebalancedLeaderIds,\n+        new PeerId(\"host_1\", 8080));\n+\n+    assertEquals(\"Fail to transfer leader\",\n+        cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n+    assertTrue(groupIds.size() >= rebalancedLeaderIds.size());\n+\n+    Map<PeerId, Integer> ret = new HashMap<>();\n+    for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet()) {\n+      ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n+    }\n+    for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n+      System.out.println(entry);\n+      assertEquals(new PeerId(\"host_1\", 8080), entry.getKey());\n+    }\n+  }\n \n-    @Test\n-    public void testRebalanceOnLeaderFail() {\n-        Set<String> groupIds = new TreeSet<>();\n-        groupIds.add(\"group_1\");\n-        groupIds.add(\"group_2\");\n-        groupIds.add(\"group_3\");\n-        groupIds.add(\"group_4\");\n-        Configuration conf = new Configuration();\n-        conf.addPeer(new PeerId(\"host_1\", 8080));\n-        conf.addPeer(new PeerId(\"host_2\", 8080));\n-        conf.addPeer(new PeerId(\"host_3\", 8080));\n-\n-        Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n+  static class MockCliService extends CliServiceImpl {\n+    private final Map<String, PeerId> rebalancedLeaderIds;\n \n-        CliService cliService = new MockLeaderFailCliService();\n+    private final PeerId initialLeaderId;\n \n-        assertEquals(\"Fail to get leader\", cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n+    MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n+      this.rebalancedLeaderIds = rebalancedLeaderIds;\n+      this.initialLeaderId = initialLeaderId;\n     }\n \n-    @Test\n-    public void testRelalanceOnTransferLeaderFail() {\n-        Set<String> groupIds = new TreeSet<>();\n-        groupIds.add(\"group_1\");\n-        groupIds.add(\"group_2\");\n-        groupIds.add(\"group_3\");\n-        groupIds.add(\"group_4\");\n-        groupIds.add(\"group_5\");\n-        groupIds.add(\"group_6\");\n-        groupIds.add(\"group_7\");\n-        Configuration conf = new Configuration();\n-        conf.addPeer(new PeerId(\"host_1\", 8080));\n-        conf.addPeer(new PeerId(\"host_2\", 8080));\n-        conf.addPeer(new PeerId(\"host_3\", 8080));\n-\n-        Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n-\n-        CliService cliService = new MockTransferLeaderFailCliService(rebalancedLeaderIds,\n-            new PeerId(\"host_1\", 8080));\n-\n-        assertEquals(\"Fail to transfer leader\",\n-            cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n-        assertTrue(groupIds.size() >= rebalancedLeaderIds.size());\n-\n-        Map<PeerId, Integer> ret = new HashMap<>();\n-        for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet())\n-            ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n-        for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n-            System.out.println(entry);\n-            assertEquals(new PeerId(\"host_1\", 8080), entry.getKey());\n-        }\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n+      PeerId ret = rebalancedLeaderIds.get(groupId);\n+      if (ret != null) {\n+        leaderId.parse(ret.toString());\n+      } else {\n+        leaderId.parse(initialLeaderId.toString());\n+      }\n+      return Status.OK();\n     }\n \n-    static class MockCliService extends CliServiceImpl {\n-        private final Map<String, PeerId> rebalancedLeaderIds;\n-        private final PeerId initialLeaderId;\n-\n-        MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n-            this.rebalancedLeaderIds = rebalancedLeaderIds;\n-            this.initialLeaderId = initialLeaderId;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n-            PeerId ret = rebalancedLeaderIds.get(groupId);\n-            if (ret != null)\n-                leaderId.parse(ret.toString());\n-            else\n-                leaderId.parse(initialLeaderId.toString());\n-            return Status.OK();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public List<PeerId> getAlivePeers(String groupId, Configuration conf) {\n-            return conf.getPeers();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n-            return Status.OK();\n-        }\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<PeerId> getAlivePeers(String groupId, Configuration conf) {\n+      return conf.getPeers();\n     }\n \n-    static class MockLeaderFailCliService extends MockCliService {\n-        MockLeaderFailCliService() {\n-            super(null, null);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n-            return new Status(-1, \"Fail to get leader\");\n-        }\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n+      return Status.OK();\n     }\n+  }\n \n-    static class MockTransferLeaderFailCliService extends MockCliService {\n-        MockTransferLeaderFailCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n-            super(rebalancedLeaderIds, initialLeaderId);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override\n-        public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n-            return new Status(-1, \"Fail to transfer leader\");\n-        }\n+  static class MockLeaderFailCliService extends MockCliService {\n+    MockLeaderFailCliService() {\n+      super(null, null);\n     }\n \n     /**\n-     * @param cond The condition.\n-     * @param timeout The timeout.\n-     * @return {@code True} if condition has happened within the timeout.\n+     * {@inheritDoc}\n      */\n-    @SuppressWarnings(\"BusyWait\") protected static boolean waitForCondition(BooleanSupplier cond, long timeout) {\n-        long stop = System.currentTimeMillis() + timeout;\n-\n-        while (System.currentTimeMillis() < stop) {\n-            if (cond.getAsBoolean())\n-                return true;\n+    @Override\n+    public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n+      return new Status(-1, \"Fail to get leader\");\n+    }\n+  }\n \n-            try {\n-                sleep(50);\n-            }\n-            catch (InterruptedException e) {\n-                return false;\n-            }\n-        }\n+  static class MockTransferLeaderFailCliService extends MockCliService {\n+    MockTransferLeaderFailCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n+      super(rebalancedLeaderIds, initialLeaderId);\n+    }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n+      return new Status(-1, \"Fail to transfer leader\");\n+    }\n+  }\n+\n+  /**\n+   * @param cond    The condition.\n+   * @param timeout The timeout.\n+   * @return {@code True} if condition has happened within the timeout.\n+   */\n+  @SuppressWarnings(\"BusyWait\")\n+  protected static boolean waitForCondition(BooleanSupplier cond, long timeout) {\n+    long stop = System.currentTimeMillis() + timeout;\n+\n+    while (System.currentTimeMillis() < stop) {\n+      if (cond.getAsBoolean()) {\n+        return true;\n+      }\n+\n+      try {\n+        sleep(50);\n+      } catch (InterruptedException e) {\n         return false;\n+      }\n     }\n+\n+    return false;\n+  }\n }\n",
            "diff_size": 584
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "472",
                    "column": "9",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/49/ITCliServiceTest.java\nindex a7730be8bbb..149a9caffb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/49/ITCliServiceTest.java\n@@ -327,8 +327,7 @@ public class ITCliServiceTest {\n     public void testGetPeers() throws Exception {\n         PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n         assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n+        assertArrayEquals(conf.getPeerSet().toArray(), new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n \n         // stop one peer\n         List<PeerId> peers = conf.getPeers();\n@@ -338,8 +337,7 @@ public class ITCliServiceTest {\n \n         leader = cluster.getLeader().getNodeId().getPeerId();\n         assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n+        assertArrayEquals(conf.getPeerSet().toArray(), new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n \n         cluster.stopAll();\n \n@@ -356,8 +354,7 @@ public class ITCliServiceTest {\n     public void testGetAlivePeers() throws Exception {\n         PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n         assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n+        assertArrayEquals(conf.getPeerSet().toArray(), new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n \n         // stop one peer\n         List<PeerId> peers = conf.getPeers();\n@@ -370,8 +367,7 @@ public class ITCliServiceTest {\n \n         leader = cluster.getLeader().getNodeId().getPeerId();\n         assertNotNull(leader);\n-        assertArrayEquals(new HashSet<>(peers).toArray(),\n-            new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n+        assertArrayEquals(new HashSet<>(peers).toArray(), new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n \n         cluster.stopAll();\n \n@@ -410,7 +406,8 @@ public class ITCliServiceTest {\n         Map<PeerId, Integer> ret = new HashMap<>();\n         for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet())\n             ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n-        int expectedAvgLeaderNum = (int) Math.ceil((double) groupIds.size() / conf.size());\n+\n+int expectedAvgLeaderNum = (int)Math.ceil((double)groupIds.size() / conf.size());\n         for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n             System.out.println(entry);\n             assertTrue(entry.getValue() <= expectedAvgLeaderNum);\n@@ -453,17 +450,18 @@ public class ITCliServiceTest {\n \n         Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n \n-        CliService cliService = new MockTransferLeaderFailCliService(rebalancedLeaderIds,\n-            new PeerId(\"host_1\", 8080));\n+        CliService cliService = new MockTransferLeaderFailCliService(rebalancedLeaderIds, new PeerId(\"host_1\", 8080));\n \n         assertEquals(\"Fail to transfer leader\",\n             cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n-        assertTrue(groupIds.size() >= rebalancedLeaderIds.size());\n+\n+assertTrue(groupIds.size() >= rebalancedLeaderIds.size());\n \n         Map<PeerId, Integer> ret = new HashMap<>();\n         for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet())\n             ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n-        for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n+\n+for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n             System.out.println(entry);\n             assertEquals(new PeerId(\"host_1\", 8080), entry.getKey());\n         }\n@@ -548,4 +546,4 @@ public class ITCliServiceTest {\n \n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "77",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "83",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "86",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "92",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "161",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "172",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "202",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "217",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "320",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "367",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "398",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "417",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "453",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "493",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "543",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "570",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "619",
                    "column": "5",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "624",
                    "column": "9",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "627",
                    "column": "9",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "635",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "649",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "656",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "662",
                    "column": "5",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "671",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "677",
                    "column": "5",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "686",
                    "column": "9",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "698",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/49/ITCliServiceTest.java\nindex a7730be8bbb..4c1c6ebef39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/49/ITCliServiceTest.java\n@@ -64,39 +64,54 @@ import static org.junit.jupiter.api.Assertions.fail;\n /**\n  * Jraft cli tests.\n  */\n+\n+\n public class ITCliServiceTest {\n     /**\n      * The logger.\n      */\n+\n     private static final Logger LOG = LoggerFactory.getLogger(ITCliServiceTest.class);\n \n+\n     private static final int LEARNER_PORT_STEP = 100;\n \n+\n     private String dataPath;\n \n+\n     private TestCluster cluster;\n \n+\n     private final String groupId = \"CliServiceTest\";\n \n+\n     private CliService cliService;\n \n+\n     private Configuration conf;\n \n     /** */\n-    @BeforeEach\n-    public void setup(TestInfo testInfo) throws Exception {\n+\n+\n+    @BeforeEach public void setup(TestInfo testInfo) throws Exception {\n         LOG.info(\">>>>>>>>>>>>>>> Start test method: \" + testInfo.getDisplayName());\n+\n         dataPath = TestUtils.mkTempDir();\n+\n         new File(dataPath).mkdirs();\n+\n         List<PeerId> peers = TestUtils.generatePeers(3);\n \n         LinkedHashSet<PeerId> learners = new LinkedHashSet<>();\n \n         // 2 learners\n+\n         for (int i = 0; i < 2; i++)\n             learners.add(new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + LEARNER_PORT_STEP + i));\n \n         cluster = new TestCluster(groupId, dataPath, peers, learners, 300);\n+\n         for (PeerId peer : peers)\n             cluster.start(peer.getEndpoint());\n \n@@ -104,15 +119,19 @@ public class ITCliServiceTest {\n             cluster.startLearner(peer);\n \n         cluster.waitLeader();\n+\n         cluster.ensureLeader(cluster.getLeader());\n \n         cliService = new CliServiceImpl();\n+\n         conf = new Configuration(peers, learners);\n \n         CliOptions opts = new CliOptions();\n+\n         opts.setClientExecutor(JRaftUtils.createClientExecutor(opts, \"client\"));\n \n-        List<String> memberAddresses = peers.stream().map(p -> p.getEndpoint().toString()).collect(Collectors.toList());\n+        List<String> memberAddresses = peers.stream().map(p -> p.getEndpoint().toString())\n+                                                     .collect(Collectors.toList());\n \n         var registry = new MessageSerializationRegistryImpl();\n \n@@ -125,60 +144,83 @@ public class ITCliServiceTest {\n         clientSvc.start();\n \n         IgniteRpcClient rpcClient = new IgniteRpcClient(clientSvc) {\n-            @Override public void shutdown() {\n-                super.shutdown();\n \n-                clientSvc.shutdown();\n-            }\n-        };\n+                            @Override public void shutdown() {\n+                                super.shutdown();\n+\n+                                clientSvc.shutdown();\n+                            }\n+                        };\n \n         opts.setRpcClient(rpcClient);\n+\n         assertTrue(cliService.init(opts));\n     }\n \n-    @AfterEach\n-    public void teardown(TestInfo testInfo) throws Exception {\n+\n+    @AfterEach public void teardown(TestInfo testInfo) throws Exception {\n         cliService.shutdown();\n+\n         cluster.stopAll();\n+\n         Utils.delete(new File(dataPath));\n+\n         LOG.info(\">>>>>>>>>>>>>>> End test method: \" + testInfo.getDisplayName());\n     }\n \n-    @Test\n-    public void testTransferLeader() throws Exception {\n-        PeerId leader = cluster.getLeader().getNodeId().getPeerId().copy();\n+\n+    @Test public void testTransferLeader() throws Exception {\n+        PeerId leader = cluster.getLeader().getNodeId()\n+                                           .getPeerId()\n+                                           .copy();\n+\n         assertNotNull(leader);\n \n         Set<PeerId> peers = conf.getPeerSet();\n+\n         PeerId targetPeer = null;\n+\n         for (PeerId peer : peers) {\n             if (!peer.equals(leader)) {\n                 targetPeer = peer;\n+\n                 break;\n             }\n         }\n+\n         assertNotNull(targetPeer);\n+\n         assertTrue(cliService.transferLeader(groupId, conf, targetPeer).isOk());\n+\n         cluster.waitLeader();\n-        assertEquals(targetPeer, cluster.getLeader().getNodeId().getPeerId());\n+\n+        assertEquals(targetPeer, cluster.getLeader().getNodeId()\n+                                                    .getPeerId());\n     }\n \n-    @SuppressWarnings(\"SameParameterValue\")\n-    private void sendTestTaskAndWait(Node node, int code) throws InterruptedException {\n+\n+    @SuppressWarnings(\"SameParameterValue\") private void sendTestTaskAndWait(Node node, int code) throws InterruptedException {\n         CountDownLatch latch = new CountDownLatch(10);\n+\n         for (int i = 0; i < 10; i++) {\n             ByteBuffer data = ByteBuffer.wrap((\"hello\" + i).getBytes());\n+\n             Task task = new Task(data, new ExpectClosure(code, null, latch));\n+\n             node.apply(task);\n         }\n+\n         assertTrue(latch.await(10, TimeUnit.SECONDS));\n     }\n \n-    @Test\n-    public void testLearnerServices() throws Exception {\n+\n+    @Test public void testLearnerServices() throws Exception {\n         PeerId learner3 = new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + LEARNER_PORT_STEP + 3);\n+\n         assertTrue(cluster.startLearner(learner3));\n+\n         sendTestTaskAndWait(cluster.getLeader(), 0);\n+\n         cluster.ensureSame(addr -> addr.equals(learner3.getEndpoint()));\n \n         for (MockStateMachine fsm : cluster.getFsms()) {\n@@ -186,15 +228,21 @@ public class ITCliServiceTest {\n                 assertEquals(10, fsm.getLogs().size());\n         }\n \n-        assertEquals(0, cluster.getFsmByPeer(learner3).getLogs().size());\n+        assertEquals(0, cluster.getFsmByPeer(learner3).getLogs()\n+                                                      .size());\n+\n         List<PeerId> oldLearners = new ArrayList<PeerId>(conf.getLearners());\n+\n         assertEquals(oldLearners, cliService.getLearners(groupId, conf));\n+\n         assertEquals(oldLearners, cliService.getAliveLearners(groupId, conf));\n \n         // Add learner3\n+\n         cliService.addLearners(groupId, conf, Collections.singletonList(learner3));\n \n-        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs().size() == 10, 5_000));\n+        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs()\n+                                                                        .size() == 10, 5_000));\n \n         sendTestTaskAndWait(cluster.getLeader(), 0);\n \n@@ -204,12 +252,17 @@ public class ITCliServiceTest {\n             assertEquals(20, fsm.getLogs().size());\n \n         List<PeerId> newLearners = new ArrayList<>(oldLearners);\n+\n         newLearners.add(learner3);\n+\n         assertEquals(newLearners, cliService.getLearners(groupId, conf));\n+\n         assertEquals(newLearners, cliService.getAliveLearners(groupId, conf));\n \n         // Remove  3\n+\n         cliService.removeLearners(groupId, conf, Collections.singletonList(learner3));\n+\n         sendTestTaskAndWait(cluster.getLeader(), 0);\n \n         cluster.ensureSame(addr -> addr.equals(learner3.getEndpoint()));\n@@ -220,20 +273,27 @@ public class ITCliServiceTest {\n         }\n \n         // Latest 10 logs are not replicated to learner3, because it's removed.\n-        assertEquals(20, cluster.getFsmByPeer(learner3).getLogs().size());\n+\n+        assertEquals(20, cluster.getFsmByPeer(learner3).getLogs()\n+                                                       .size());\n+\n         assertEquals(oldLearners, cliService.getLearners(groupId, conf));\n+\n         assertEquals(oldLearners, cliService.getAliveLearners(groupId, conf));\n \n         // Set learners into [learner3]\n+\n         cliService.resetLearners(groupId, conf, Collections.singletonList(learner3));\n \n-        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs().size() == 30, 5_000));\n+        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(learner3).getLogs()\n+                                                                        .size() == 30, 5_000));\n \n         sendTestTaskAndWait(cluster.getLeader(), 0);\n \n         cluster.ensureSame(addr -> oldLearners.contains(new PeerId(addr, 0)));\n \n         // Latest 10 logs are not replicated to learner1 and learner2, because they were removed by resetting learners set.\n+\n         for (MockStateMachine fsm : cluster.getFsms()) {\n             if (!oldLearners.contains(new PeerId(fsm.getAddress(), 0)))\n                 assertEquals(40, fsm.getLogs().size());\n@@ -242,26 +302,38 @@ public class ITCliServiceTest {\n         }\n \n         assertEquals(Collections.singletonList(learner3), cliService.getLearners(groupId, conf));\n+\n         assertEquals(Collections.singletonList(learner3), cliService.getAliveLearners(groupId, conf));\n \n         // Stop learner3\n+\n         cluster.stop(learner3.getEndpoint());\n+\n         sleep(1000);\n+\n         assertEquals(Collections.singletonList(learner3), cliService.getLearners(groupId, conf));\n+\n         assertTrue(cliService.getAliveLearners(groupId, conf).isEmpty());\n     }\n \n-    @Test\n-    public void testAddPeerRemovePeer() throws Exception {\n+\n+    @Test public void testAddPeerRemovePeer() throws Exception {\n         PeerId peer3 = new PeerId(TestUtils.getLocalAddress(), TestUtils.INIT_PORT + 3);\n+\n         assertTrue(cluster.start(peer3.getEndpoint()));\n+\n         sendTestTaskAndWait(cluster.getLeader(), 0);\n+\n         cluster.ensureSame(addr -> addr.equals(peer3.getEndpoint()));\n-        assertEquals(0, cluster.getFsmByPeer(peer3).getLogs().size());\n+\n+        assertEquals(0, cluster.getFsmByPeer(peer3).getLogs()\n+                                                   .size());\n \n         assertTrue(cliService.addPeer(groupId, conf, peer3).isOk());\n \n-        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(peer3).getLogs().size() == 10, 5_000));\n+        assertTrue(waitForCondition(() -> cluster.getFsmByPeer(peer3).getLogs()\n+                                                                     .size() == 10, 5_000));\n+\n         sendTestTaskAndWait(cluster.getLeader(), 0);\n \n         assertEquals(6, cluster.getFsms().size());\n@@ -272,8 +344,11 @@ public class ITCliServiceTest {\n             assertEquals(20, fsm.getLogs().size());\n \n         //remove peer3\n+\n         assertTrue(cliService.removePeer(groupId, conf, peer3).isOk());\n+\n         sleep(200);\n+\n         sendTestTaskAndWait(cluster.getLeader(), 0);\n \n         assertEquals(6, cluster.getFsms().size());\n@@ -288,28 +363,43 @@ public class ITCliServiceTest {\n         }\n     }\n \n-    @Test\n-    public void testChangePeers() throws Exception {\n+\n+    @Test public void testChangePeers() throws Exception {\n         List<PeerId> newPeers = TestUtils.generatePeers(10);\n+\n         newPeers.removeAll(conf.getPeerSet());\n+\n         for (PeerId peer : newPeers)\n             assertTrue(cluster.start(peer.getEndpoint()));\n+\n         cluster.waitLeader();\n+\n         Node oldLeaderNode = cluster.getLeader();\n+\n         assertNotNull(oldLeaderNode);\n+\n         PeerId oldLeader = oldLeaderNode.getNodeId().getPeerId();\n+\n         assertNotNull(oldLeader);\n+\n         assertTrue(cliService.changePeers(groupId, conf, new Configuration(newPeers)).isOk());\n+\n         cluster.waitLeader();\n-        PeerId newLeader = cluster.getLeader().getNodeId().getPeerId();\n+\n+        PeerId newLeader = cluster.getLeader().getNodeId()\n+                                              .getPeerId();\n+\n         assertNotEquals(oldLeader, newLeader);\n+\n         assertTrue(newPeers.contains(newLeader));\n     }\n \n-    @Test\n-    public void testSnapshot() throws Exception {\n+\n+    @Test public void testSnapshot() throws Exception {\n         sendTestTaskAndWait(cluster.getLeader(), 0);\n+\n         assertEquals(5, cluster.getFsms().size());\n+\n         for (MockStateMachine fsm : cluster.getFsms())\n             assertEquals(0, fsm.getSaveSnapshotTimes());\n \n@@ -323,28 +413,35 @@ public class ITCliServiceTest {\n             assertEquals(1, fsm.getSaveSnapshotTimes());\n     }\n \n-    @Test\n-    public void testGetPeers() throws Exception {\n-        PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n+\n+    @Test public void testGetPeers() throws Exception {\n+        PeerId leader = cluster.getLeader().getNodeId()\n+                                           .getPeerId();\n+\n         assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n+\n+        assertArrayEquals(conf.getPeerSet().toArray(), new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n \n         // stop one peer\n+\n         List<PeerId> peers = conf.getPeers();\n+\n         cluster.stop(peers.get(0).getEndpoint());\n \n         cluster.waitLeader();\n \n-        leader = cluster.getLeader().getNodeId().getPeerId();\n+        leader = cluster.getLeader().getNodeId()\n+                                    .getPeerId();\n+\n         assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n+\n+        assertArrayEquals(conf.getPeerSet().toArray(), new HashSet<>(cliService.getPeers(groupId, conf)).toArray());\n \n         cluster.stopAll();\n \n         try {\n             cliService.getPeers(groupId, conf);\n+\n             fail();\n         }\n         catch (IllegalStateException e) {\n@@ -352,31 +449,39 @@ public class ITCliServiceTest {\n         }\n     }\n \n-    @Test\n-    public void testGetAlivePeers() throws Exception {\n-        PeerId leader = cluster.getLeader().getNodeId().getPeerId();\n+\n+    @Test public void testGetAlivePeers() throws Exception {\n+        PeerId leader = cluster.getLeader().getNodeId()\n+                                           .getPeerId();\n+\n         assertNotNull(leader);\n-        assertArrayEquals(conf.getPeerSet().toArray(),\n-            new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n+\n+        assertArrayEquals(conf.getPeerSet().toArray(), new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n \n         // stop one peer\n+\n         List<PeerId> peers = conf.getPeers();\n+\n         cluster.stop(peers.get(0).getEndpoint());\n+\n         peers.remove(0);\n \n         cluster.waitLeader();\n \n         sleep(1000);\n \n-        leader = cluster.getLeader().getNodeId().getPeerId();\n+        leader = cluster.getLeader().getNodeId()\n+                                    .getPeerId();\n+\n         assertNotNull(leader);\n-        assertArrayEquals(new HashSet<>(peers).toArray(),\n-            new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n+\n+        assertArrayEquals(new HashSet<>(peers).toArray(), new HashSet<>(cliService.getAlivePeers(groupId, conf)).toArray());\n \n         cluster.stopAll();\n \n         try {\n             cliService.getAlivePeers(groupId, conf);\n+\n             fail();\n         }\n         catch (IllegalStateException e) {\n@@ -384,20 +489,32 @@ public class ITCliServiceTest {\n         }\n     }\n \n-    @Test\n-    public void testRebalance() {\n+\n+    @Test public void testRebalance() {\n         Set<String> groupIds = new TreeSet<>();\n+\n         groupIds.add(\"group_1\");\n+\n         groupIds.add(\"group_2\");\n+\n         groupIds.add(\"group_3\");\n+\n         groupIds.add(\"group_4\");\n+\n         groupIds.add(\"group_5\");\n+\n         groupIds.add(\"group_6\");\n+\n         groupIds.add(\"group_7\");\n+\n         groupIds.add(\"group_8\");\n+\n         Configuration conf = new Configuration();\n+\n         conf.addPeer(new PeerId(\"host_1\", 8080));\n+\n         conf.addPeer(new PeerId(\"host_2\", 8080));\n+\n         conf.addPeer(new PeerId(\"host_3\", 8080));\n \n         Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n@@ -405,28 +522,41 @@ public class ITCliServiceTest {\n         CliService cliService = new MockCliService(rebalancedLeaderIds, new PeerId(\"host_1\", 8080));\n \n         assertTrue(cliService.rebalance(groupIds, conf, rebalancedLeaderIds).isOk());\n+\n         assertEquals(groupIds.size(), rebalancedLeaderIds.size());\n \n         Map<PeerId, Integer> ret = new HashMap<>();\n+\n         for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet())\n             ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n-        int expectedAvgLeaderNum = (int) Math.ceil((double) groupIds.size() / conf.size());\n+\n+        int expectedAvgLeaderNum = (int)Math.ceil((double)groupIds.size() / conf.size());\n+\n         for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n             System.out.println(entry);\n+\n             assertTrue(entry.getValue() <= expectedAvgLeaderNum);\n         }\n     }\n \n-    @Test\n-    public void testRebalanceOnLeaderFail() {\n+\n+    @Test public void testRebalanceOnLeaderFail() {\n         Set<String> groupIds = new TreeSet<>();\n+\n         groupIds.add(\"group_1\");\n+\n         groupIds.add(\"group_2\");\n+\n         groupIds.add(\"group_3\");\n+\n         groupIds.add(\"group_4\");\n+\n         Configuration conf = new Configuration();\n+\n         conf.addPeer(new PeerId(\"host_1\", 8080));\n+\n         conf.addPeer(new PeerId(\"host_2\", 8080));\n+\n         conf.addPeer(new PeerId(\"host_3\", 8080));\n \n         Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n@@ -436,92 +566,124 @@ public class ITCliServiceTest {\n         assertEquals(\"Fail to get leader\", cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n     }\n \n-    @Test\n-    public void testRelalanceOnTransferLeaderFail() {\n+\n+    @Test public void testRelalanceOnTransferLeaderFail() {\n         Set<String> groupIds = new TreeSet<>();\n+\n         groupIds.add(\"group_1\");\n+\n         groupIds.add(\"group_2\");\n+\n         groupIds.add(\"group_3\");\n+\n         groupIds.add(\"group_4\");\n+\n         groupIds.add(\"group_5\");\n+\n         groupIds.add(\"group_6\");\n+\n         groupIds.add(\"group_7\");\n+\n         Configuration conf = new Configuration();\n+\n         conf.addPeer(new PeerId(\"host_1\", 8080));\n+\n         conf.addPeer(new PeerId(\"host_2\", 8080));\n+\n         conf.addPeer(new PeerId(\"host_3\", 8080));\n \n         Map<String, PeerId> rebalancedLeaderIds = new HashMap<>();\n \n-        CliService cliService = new MockTransferLeaderFailCliService(rebalancedLeaderIds,\n-            new PeerId(\"host_1\", 8080));\n+        CliService cliService = new MockTransferLeaderFailCliService(rebalancedLeaderIds, new PeerId(\"host_1\", 8080));\n+\n+        assertEquals(\n+            \"Fail to transfer leader\",\n+            cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg()\n+        );\n \n-        assertEquals(\"Fail to transfer leader\",\n-            cliService.rebalance(groupIds, conf, rebalancedLeaderIds).getErrorMsg());\n         assertTrue(groupIds.size() >= rebalancedLeaderIds.size());\n \n         Map<PeerId, Integer> ret = new HashMap<>();\n+\n         for (Map.Entry<String, PeerId> entry : rebalancedLeaderIds.entrySet())\n             ret.compute(entry.getValue(), (ignored, num) -> num == null ? 1 : num + 1);\n+\n         for (Map.Entry<PeerId, Integer> entry : ret.entrySet()) {\n             System.out.println(entry);\n+\n             assertEquals(new PeerId(\"host_1\", 8080), entry.getKey());\n         }\n     }\n \n+\n     static class MockCliService extends CliServiceImpl {\n+\n         private final Map<String, PeerId> rebalancedLeaderIds;\n+\n+\n         private final PeerId initialLeaderId;\n \n+\n         MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n             this.rebalancedLeaderIds = rebalancedLeaderIds;\n             this.initialLeaderId = initialLeaderId;\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n+\n+\n+        @Override public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n             PeerId ret = rebalancedLeaderIds.get(groupId);\n+\n             if (ret != null)\n                 leaderId.parse(ret.toString());\n             else\n                 leaderId.parse(initialLeaderId.toString());\n+\n             return Status.OK();\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public List<PeerId> getAlivePeers(String groupId, Configuration conf) {\n+\n+\n+        @Override public List<PeerId> getAlivePeers(String groupId, Configuration conf) {\n             return conf.getPeers();\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n+\n+\n+        @Override public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n             return Status.OK();\n         }\n     }\n \n+\n     static class MockLeaderFailCliService extends MockCliService {\n+\n         MockLeaderFailCliService() {\n             super(null, null);\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n+\n+\n+        @Override public Status getLeader(String groupId, Configuration conf, PeerId leaderId) {\n             return new Status(-1, \"Fail to get leader\");\n         }\n     }\n \n+\n     static class MockTransferLeaderFailCliService extends MockCliService {\n+\n         MockTransferLeaderFailCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n             super(rebalancedLeaderIds, initialLeaderId);\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n+\n+\n+        @Override public Status transferLeader(String groupId, Configuration conf, PeerId peer) {\n             return new Status(-1, \"Fail to transfer leader\");\n         }\n     }\n@@ -531,6 +693,8 @@ public class ITCliServiceTest {\n      * @param timeout The timeout.\n      * @return {@code True} if condition has happened within the timeout.\n      */\n+\n+\n     @SuppressWarnings(\"BusyWait\") protected static boolean waitForCondition(BooleanSupplier cond, long timeout) {\n         long stop = System.currentTimeMillis() + timeout;\n \n@@ -548,4 +712,4 @@ public class ITCliServiceTest {\n \n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 237
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/49/ITCliServiceTest.java\nindex a7730be8bbb..2a40642b5be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/49/ITCliServiceTest.java\n@@ -471,6 +471,7 @@ public class ITCliServiceTest {\n \n     static class MockCliService extends CliServiceImpl {\n         private final Map<String, PeerId> rebalancedLeaderIds;\n+\n         private final PeerId initialLeaderId;\n \n         MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/49/ITCliServiceTest.java\nindex a7730be8bbb..2a40642b5be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/49/ITCliServiceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/49/ITCliServiceTest.java\n@@ -471,6 +471,7 @@ public class ITCliServiceTest {\n \n     static class MockCliService extends CliServiceImpl {\n         private final Map<String, PeerId> rebalancedLeaderIds;\n+\n         private final PeerId initialLeaderId;\n \n         MockCliService(Map<String, PeerId> rebalancedLeaderIds, PeerId initialLeaderId) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}