{
    "project_name": "Angel-ML-angel",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "15",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 115).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n  public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n    super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/1/LINESecondOrderModel.java\nindex 664a84e90ff..9c506cdd36b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/1/LINESecondOrderModel.java\n@@ -11,7 +11,6 @@ import java.util.Random;\n \n public class LINESecondOrderModel extends EmbeddingModel {\n \n-\n   public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n     super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n   }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1/LINESecondOrderModel.java\nindex 664a84e90ff..8933f0daef3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1/LINESecondOrderModel.java\n@@ -12,7 +12,8 @@ import java.util.Random;\n public class LINESecondOrderModel extends EmbeddingModel {\n \n \n-  public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n+  public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow,\n+                              float[][] layers) {\n     super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n   }\n \n@@ -36,10 +37,13 @@ public class LINESecondOrderModel extends EmbeddingModel {\n       // Negative sampling\n       int target;\n       for (int a = 0; a < negative + 1; a++) {\n-        if (a == 0) target = edges.readInt();\n-        else do {\n-          target = negativeSeed.nextInt(maxIndex);\n-        } while (target == src);\n+        if (a == 0) {\n+          target = edges.readInt();\n+        } else {\n+          do {\n+            target = negativeSeed.nextInt(maxIndex);\n+          } while (target == src);\n+        }\n \n         numOutputs.add(target);\n         float[] outputs = layers[target / numNodeOneRow];\n@@ -85,10 +89,13 @@ public class LINESecondOrderModel extends EmbeddingModel {\n       // Negative sampling\n       int target;\n       for (int d = 0; d < negative + 1; d++) {\n-        if (d == 0) target = dataBuf.readInt();\n-        else do {\n-          target = negativeSeed.nextInt(maxIndex);\n-        } while (target == src);\n+        if (d == 0) {\n+          target = dataBuf.readInt();\n+        } else {\n+          do {\n+            target = negativeSeed.nextInt(maxIndex);\n+          } while (target == src);\n+        }\n \n         float[] outputs = layers[target / numNodeOneRow];\n         int l2 = (target % numNodeOneRow) * dim * 2 + dim;\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1/LINESecondOrderModel.java\nindex 664a84e90ff..dfeffae3593 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1/LINESecondOrderModel.java\n@@ -11,7 +11,6 @@ import java.util.Random;\n \n public class LINESecondOrderModel extends EmbeddingModel {\n \n-\n   public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n     super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n   }\n@@ -45,7 +44,8 @@ public class LINESecondOrderModel extends EmbeddingModel {\n         float[] outputs = layers[target / numNodeOneRow];\n         int l2 = (target % numNodeOneRow) * dim * 2 + dim;\n         float f = 0.0f;\n-        for (int b = 0; b < dim; b++) f += inputs[l1 + b] * outputs[l2 + b];\n+        for (int b = 0; b < dim; b++)\n+  f += inputs[l1 + b] * outputs[l2 + b];\n         partialDots[dotInc++] = f;\n       }\n     }\n@@ -61,8 +61,7 @@ public class LINESecondOrderModel extends EmbeddingModel {\n \n     // used to accumulate the updates for input vectors\n     float[] neu1e = new float[dim];\n-\n-    float[] inputUpdates = new float[numInputs * dim];\n+float[] inputUpdates = new float[numInputs * dim];\n     float[] outputUpdates = new float[numOutputs * dim];\n \n     Int2IntOpenHashMap inputIndex = new Int2IntOpenHashMap();\n@@ -131,4 +130,4 @@ public class LINESecondOrderModel extends EmbeddingModel {\n       for (int a = 0; a < dim; a++) values[a + col] += outputUpdates[offset + a] / divider;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1/LINESecondOrderModel.java\nindex 664a84e90ff..d8ff4450314 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1/LINESecondOrderModel.java\n@@ -5,24 +5,20 @@ import it.unimi.dsi.fastutil.ints.Int2IntMap;\n import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;\n import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.util.Arrays;\n import java.util.Random;\n \n public class LINESecondOrderModel extends EmbeddingModel {\n \n-\n   public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n     super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n   }\n \n   @Override\n   public float[] dot(ByteBuf edges) {\n-\n     Random negativeSeed = new Random(seed);\n     IntOpenHashSet numInputs = new IntOpenHashSet();\n     IntOpenHashSet numOutputs = new IntOpenHashSet();\n-\n     int batchSize = edges.readInt();\n     float[] partialDots = new float[batchSize * (1 + negative)];\n     int dotInc = 0;\n@@ -34,69 +30,67 @@ public class LINESecondOrderModel extends EmbeddingModel {\n       numInputs.add(src);\n \n       // Negative sampling\n+\n       int target;\n       for (int a = 0; a < negative + 1; a++) {\n         if (a == 0) target = edges.readInt();\n-        else do {\n-          target = negativeSeed.nextInt(maxIndex);\n-        } while (target == src);\n-\n+        else\n+          do {\n+            target = negativeSeed.nextInt(maxIndex);\n+          } while (target == src);\n         numOutputs.add(target);\n         float[] outputs = layers[target / numNodeOneRow];\n         int l2 = (target % numNodeOneRow) * dim * 2 + dim;\n         float f = 0.0f;\n-        for (int b = 0; b < dim; b++) f += inputs[l1 + b] * outputs[l2 + b];\n+        for (int b = 0; b < dim; b++)\n+          f += inputs[l1 + b] * outputs[l2 + b];\n         partialDots[dotInc++] = f;\n       }\n     }\n \n+\n+\n     this.numInputsToUpdate = numInputs.size();\n     this.numOutputsToUpdate = numOutputs.size();\n-\n     return partialDots;\n   }\n \n   @Override\n-  public void adjust(ByteBuf dataBuf, int numInputs, int numOutputs) {\n+  public void adjust(\n+    ByteBuf dataBuf, int numInputs, int numOutputs) {\n \n     // used to accumulate the updates for input vectors\n     float[] neu1e = new float[dim];\n-\n     float[] inputUpdates = new float[numInputs * dim];\n     float[] outputUpdates = new float[numOutputs * dim];\n-\n     Int2IntOpenHashMap inputIndex = new Int2IntOpenHashMap();\n     Int2IntOpenHashMap outputIndex = new Int2IntOpenHashMap();\n-\n     Int2IntOpenHashMap inputUpdateCounter = new Int2IntOpenHashMap();\n     Int2IntOpenHashMap outputUpdateCounter = new Int2IntOpenHashMap();\n-\n     Random negativeSeed = new Random(seed);\n     int batchSize = dataBuf.readInt();\n-\n     for (int position = 0; position < batchSize; position++) {\n       int src = dataBuf.readInt();\n-\n       float[] inputs = layers[src / numNodeOneRow];\n       int l1 = (src % numNodeOneRow) * dim * 2;\n-\n       Arrays.fill(neu1e, 0);\n \n       // Negative sampling\n+\n       int target;\n       for (int d = 0; d < negative + 1; d++) {\n         if (d == 0) target = dataBuf.readInt();\n-        else do {\n-          target = negativeSeed.nextInt(maxIndex);\n-        } while (target == src);\n-\n+        else\n+          do {\n+            target = negativeSeed.nextInt(maxIndex);\n+          } while (target == src);\n         float[] outputs = layers[target / numNodeOneRow];\n         int l2 = (target % numNodeOneRow) * dim * 2 + dim;\n-\n         float g = dataBuf.readFloat();\n \n         // accumulate for the hidden layer\n-        for (int a = 0; a < dim; a++) neu1e[a] += g * outputs[a + l2];\n+        for (int a = 0; a < dim; a++)\n+          neu1e[a] += g * outputs[a + l2];\n         // update output layer\n         merge(outputUpdates, outputIndex, target, inputs, g, l1);\n         outputUpdateCounter.addTo(target, 1);\n@@ -108,6 +102,7 @@ public class LINESecondOrderModel extends EmbeddingModel {\n     }\n \n     // update input\n+\n     ObjectIterator<Int2IntMap.Entry> it = inputIndex.int2IntEntrySet().fastIterator();\n     while (it.hasNext()) {\n       Int2IntMap.Entry entry = it.next();\n@@ -116,11 +111,13 @@ public class LINESecondOrderModel extends EmbeddingModel {\n       int divider = inputUpdateCounter.get(node);\n       int col = (node % numNodeOneRow) * dim * 2;\n       float[] values = layers[node / numNodeOneRow];\n-      for (int a = 0; a < dim; a++) values[a + col] += inputUpdates[offset + a] / divider;\n+      for (int a = 0; a < dim; a++)\n+        values[a + col] += inputUpdates[offset + a] / divider;\n     }\n \n     // update output\n     it = outputIndex.int2IntEntrySet().fastIterator();\n+\n     while (it.hasNext()) {\n       Int2IntMap.Entry entry = it.next();\n       int node = entry.getIntKey();\n@@ -128,7 +125,9 @@ public class LINESecondOrderModel extends EmbeddingModel {\n       int col = (node % numNodeOneRow) * dim * 2 + dim;\n       float[] values = layers[node / numNodeOneRow];\n       int divider = outputUpdateCounter.get(node);\n-      for (int a = 0; a < dim; a++) values[a + col] += outputUpdates[offset + a] / divider;\n+      for (int a = 0; a < dim; a++)\n+        values[a + col] += outputUpdates[offset + a] / divider;\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_random/1/LINESecondOrderModel.java\nindex 664a84e90ff..9c506cdd36b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_random/1/LINESecondOrderModel.java\n@@ -11,7 +11,6 @@ import java.util.Random;\n \n public class LINESecondOrderModel extends EmbeddingModel {\n \n-\n   public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n     super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n   }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/1/LINESecondOrderModel.java\nindex 664a84e90ff..e500d7c1fbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1/LINESecondOrderModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/1/LINESecondOrderModel.java\n@@ -11,9 +11,8 @@ import java.util.Random;\n \n public class LINESecondOrderModel extends EmbeddingModel {\n \n-\n-  public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float[][] layers) {\n-    super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n+  public LINESecondOrderModel(int dim, int negative, int seed, int maxIndex, int numNodeOneRow, float [] [ ]layers )\n+  {super(dim, negative, seed, maxIndex, numNodeOneRow, layers);\n   }\n \n   @Override\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}