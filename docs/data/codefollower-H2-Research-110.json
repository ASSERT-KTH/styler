{
    "project_name": "codefollower-H2-Research",
    "error_id": "110",
    "information": {
        "errors": [
            {
                "line": "115",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     */\n    @SafeVarargs\n\tpublic static <K> ImmutableArray<K> create(K... array) {\n        return new ImmutableArray<K>(array);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/110/ImmutableArray.java\nindex aa8dfc3cc1b..c6ac7ee0873 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/110/ImmutableArray.java\n@@ -112,7 +112,7 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray<K> create(K... array) {\n+public static <K> ImmutableArray<K> create(K... array) {\n         return new ImmutableArray<K>(array);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/110/ImmutableArray.java\nindex aa8dfc3cc1b..9bbebbf57e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/110/ImmutableArray.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.dev.util;\n \n import java.util.Iterator;\n@@ -16,164 +17,164 @@ import org.h2.mvstore.DataUtils;\n  */\n public final class ImmutableArray<K> implements Iterable<K> {\n \n-    private static final ImmutableArray<?> EMPTY = new ImmutableArray<Object>(\n-            new Object[0]);\n-\n-    /**\n-     * The array.\n-     */\n-    private final K[] array;\n-\n-    private ImmutableArray(K[] array) {\n-        this.array = array;\n-    }\n-\n-    /**\n-     * Get the entry at this index.\n-     *\n-     * @param index the index\n-     * @return the entry\n-     */\n-    public K get(int index) {\n-        return array[index];\n-    }\n-\n-    /**\n-     * Get the length.\n-     *\n-     * @return the length\n-     */\n-    public int length() {\n-        return array.length;\n-    }\n-\n-    /**\n-     * Set the entry at this index.\n-     *\n-     * @param index the index\n-     * @param obj the object\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray<K> set(int index, K obj) {\n-        K[] array = this.array.clone();\n-        array[index] = obj;\n-        return new ImmutableArray<K>(array);\n-    }\n-\n-    /**\n-     * Insert an entry at this index.\n-     *\n-     * @param index the index\n-     * @param obj the object\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray<K> insert(int index, K obj) {\n-        int len = array.length + 1;\n-        @SuppressWarnings(\"unchecked\")\n-        K[] array = (K[]) new Object[len];\n-        DataUtils.copyWithGap(this.array, array, this.array.length, index);\n-        array[index] = obj;\n-        return new ImmutableArray<K>(array);\n-    }\n-\n-    /**\n-     * Remove the entry at this index.\n-     *\n-     * @param index the index\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray<K> remove(int index) {\n-        int len = array.length - 1;\n-        @SuppressWarnings(\"unchecked\")\n-        K[] array = (K[]) new Object[len];\n-        DataUtils.copyExcept(this.array, array, this.array.length, index);\n-        return new ImmutableArray<K>(array);\n-    }\n-\n-    /**\n-     * Get a sub-array.\n-     *\n-     * @param fromIndex the index of the first entry\n-     * @param toIndex the end index, plus one\n-     * @return the new immutable array\n-     */\n-    public ImmutableArray<K> subArray(int fromIndex, int toIndex) {\n-        int len = toIndex - fromIndex;\n-        @SuppressWarnings(\"unchecked\")\n-        K[] array = (K[]) new Object[len];\n-        System.arraycopy(this.array, fromIndex, array, 0, toIndex - fromIndex);\n-        return new ImmutableArray<K>(array);\n-    }\n-\n-    /**\n-     * Create an immutable array.\n-     *\n-     * @param array the data\n-     * @return the new immutable array\n-     */\n-    @SafeVarargs\n-\tpublic static <K> ImmutableArray<K> create(K... array) {\n-        return new ImmutableArray<K>(array);\n-    }\n-\n-    /**\n-     * Get the data.\n-     *\n-     * @return the data\n-     */\n-    public K[] array() {\n-        return array;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder buff = new StringBuilder();\n-        for (K obj : this) {\n-            buff.append(' ').append(obj);\n-        }\n-        return buff.toString();\n-    }\n-\n-    /**\n-     * Get an empty immutable array.\n-     *\n-     * @param <K> the key type\n-     * @return the array\n-     */\n+  private static final ImmutableArray<?> EMPTY = new ImmutableArray<Object>(\n+      new Object[0]);\n+\n+  /**\n+   * The array.\n+   */\n+  private final K[] array;\n+\n+  private ImmutableArray(K[] array) {\n+    this.array = array;\n+  }\n+\n+  /**\n+   * Get the entry at this index.\n+   *\n+   * @param index the index\n+   * @return the entry\n+   */\n+  public K get(int index) {\n+    return array[index];\n+  }\n+\n+  /**\n+   * Get the length.\n+   *\n+   * @return the length\n+   */\n+  public int length() {\n+    return array.length;\n+  }\n+\n+  /**\n+   * Set the entry at this index.\n+   *\n+   * @param index the index\n+   * @param obj   the object\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray<K> set(int index, K obj) {\n+    K[] array = this.array.clone();\n+    array[index] = obj;\n+    return new ImmutableArray<K>(array);\n+  }\n+\n+  /**\n+   * Insert an entry at this index.\n+   *\n+   * @param index the index\n+   * @param obj   the object\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray<K> insert(int index, K obj) {\n+    int len = array.length + 1;\n     @SuppressWarnings(\"unchecked\")\n-    public static <K> ImmutableArray<K> empty() {\n-        return (ImmutableArray<K>) EMPTY;\n-    }\n-\n-    /**\n-     * Get an iterator over all entries.\n-     *\n-     * @return the iterator\n-     */\n-    @Override\n-    public Iterator<K> iterator() {\n-        return new Iterator<K>() {\n-\n-            ImmutableArray<K> a = ImmutableArray.this;\n-            int index;\n-\n-            @Override\n-            public boolean hasNext() {\n-                return index < a.length();\n-            }\n-\n-            @Override\n-            public K next() {\n-                return a.get(index++);\n-            }\n-\n-            @Override\n-            public void remove() {\n-                throw DataUtils.newUnsupportedOperationException(\"remove\");\n-            }\n-\n-        };\n+    K[] array = (K[]) new Object[len];\n+    DataUtils.copyWithGap(this.array, array, this.array.length, index);\n+    array[index] = obj;\n+    return new ImmutableArray<K>(array);\n+  }\n+\n+  /**\n+   * Remove the entry at this index.\n+   *\n+   * @param index the index\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray<K> remove(int index) {\n+    int len = array.length - 1;\n+    @SuppressWarnings(\"unchecked\")\n+    K[] array = (K[]) new Object[len];\n+    DataUtils.copyExcept(this.array, array, this.array.length, index);\n+    return new ImmutableArray<K>(array);\n+  }\n+\n+  /**\n+   * Get a sub-array.\n+   *\n+   * @param fromIndex the index of the first entry\n+   * @param toIndex   the end index, plus one\n+   * @return the new immutable array\n+   */\n+  public ImmutableArray<K> subArray(int fromIndex, int toIndex) {\n+    int len = toIndex - fromIndex;\n+    @SuppressWarnings(\"unchecked\")\n+    K[] array = (K[]) new Object[len];\n+    System.arraycopy(this.array, fromIndex, array, 0, toIndex - fromIndex);\n+    return new ImmutableArray<K>(array);\n+  }\n+\n+  /**\n+   * Create an immutable array.\n+   *\n+   * @param array the data\n+   * @return the new immutable array\n+   */\n+  @SafeVarargs\n+  public static <K> ImmutableArray<K> create(K... array) {\n+    return new ImmutableArray<K>(array);\n+  }\n+\n+  /**\n+   * Get the data.\n+   *\n+   * @return the data\n+   */\n+  public K[] array() {\n+    return array;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder buff = new StringBuilder();\n+    for (K obj : this) {\n+      buff.append(' ').append(obj);\n     }\n+    return buff.toString();\n+  }\n+\n+  /**\n+   * Get an empty immutable array.\n+   *\n+   * @param <K> the key type\n+   * @return the array\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static <K> ImmutableArray<K> empty() {\n+    return (ImmutableArray<K>) EMPTY;\n+  }\n+\n+  /**\n+   * Get an iterator over all entries.\n+   *\n+   * @return the iterator\n+   */\n+  @Override\n+  public Iterator<K> iterator() {\n+    return new Iterator<K>() {\n+\n+      ImmutableArray<K> a = ImmutableArray.this;\n+      int index;\n+\n+      @Override\n+      public boolean hasNext() {\n+        return index < a.length();\n+      }\n+\n+      @Override\n+      public K next() {\n+        return a.get(index++);\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw DataUtils.newUnsupportedOperationException(\"remove\");\n+      }\n+\n+    };\n+  }\n \n }\n \n",
            "diff_size": 228
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/110/ImmutableArray.java\nindex aa8dfc3cc1b..40318c50459 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/110/ImmutableArray.java\n@@ -112,8 +112,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray<K> create(K... array) {\n-        return new ImmutableArray<K>(array);\n+public static <K> ImmutableArray<K> create(K... array) {\n+    return new ImmutableArray<K>(array);\n     }\n \n     /**\n@@ -175,7 +175,4 @@ public final class ImmutableArray<K> implements Iterable<K> {\n         };\n     }\n \n-}\n-\n-\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/110/ImmutableArray.java\nindex aa8dfc3cc1b..f53af34d412 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/110/ImmutableArray.java\n@@ -6,7 +6,6 @@\n package org.h2.dev.util;\n \n import java.util.Iterator;\n-\n import org.h2.mvstore.DataUtils;\n \n /**\n@@ -14,10 +13,11 @@ import org.h2.mvstore.DataUtils;\n  *\n  * @param <K> the type\n  */\n+\n+\n public final class ImmutableArray<K> implements Iterable<K> {\n \n-    private static final ImmutableArray<?> EMPTY = new ImmutableArray<Object>(\n-            new Object[0]);\n+    private static final ImmutableArray<?> EMPTY = new ImmutableArray<Object>(new Object[0]);\n \n     /**\n      * The array.\n@@ -34,6 +34,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param index the index\n      * @return the entry\n      */\n+\n+\n     public K get(int index) {\n         return array[index];\n     }\n@@ -43,6 +45,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      *\n      * @return the length\n      */\n+\n+\n     public int length() {\n         return array.length;\n     }\n@@ -54,6 +58,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param obj the object\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray<K> set(int index, K obj) {\n         K[] array = this.array.clone();\n         array[index] = obj;\n@@ -67,6 +73,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param obj the object\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray<K> insert(int index, K obj) {\n         int len = array.length + 1;\n         @SuppressWarnings(\"unchecked\")\n@@ -82,6 +90,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param index the index\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray<K> remove(int index) {\n         int len = array.length - 1;\n         @SuppressWarnings(\"unchecked\")\n@@ -97,6 +107,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param toIndex the end index, plus one\n      * @return the new immutable array\n      */\n+\n+\n     public ImmutableArray<K> subArray(int fromIndex, int toIndex) {\n         int len = toIndex - fromIndex;\n         @SuppressWarnings(\"unchecked\")\n@@ -111,8 +123,9 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param array the data\n      * @return the new immutable array\n      */\n+\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray<K> create(K... array) {\n+    public static <K> ImmutableArray<K> create(K... array) {\n         return new ImmutableArray<K>(array);\n     }\n \n@@ -121,6 +134,8 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      *\n      * @return the data\n      */\n+\n+\n     public K[] array() {\n         return array;\n     }\n@@ -140,6 +155,7 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @param <K> the key type\n      * @return the array\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     public static <K> ImmutableArray<K> empty() {\n         return (ImmutableArray<K>) EMPTY;\n@@ -150,11 +166,15 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      *\n      * @return the iterator\n      */\n+\n     @Override\n     public Iterator<K> iterator() {\n         return new Iterator<K>() {\n \n+\n             ImmutableArray<K> a = ImmutableArray.this;\n+\n+\n             int index;\n \n             @Override\n@@ -175,7 +195,4 @@ public final class ImmutableArray<K> implements Iterable<K> {\n         };\n     }\n \n-}\n-\n-\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/110/ImmutableArray.java\nindex aa8dfc3cc1b..c6ac7ee0873 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/110/ImmutableArray.java\n@@ -112,7 +112,7 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray<K> create(K... array) {\n+public static <K> ImmutableArray<K> create(K... array) {\n         return new ImmutableArray<K>(array);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/110/ImmutableArray.java\nindex aa8dfc3cc1b..563c95d4d54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/110/ImmutableArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/110/ImmutableArray.java\n@@ -112,7 +112,7 @@ public final class ImmutableArray<K> implements Iterable<K> {\n      * @return the new immutable array\n      */\n     @SafeVarargs\n-\tpublic static <K> ImmutableArray<K> create(K... array) {\n+    public static <K> ImmutableArray<K> create(K... array) {\n         return new ImmutableArray<K>(array);\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}