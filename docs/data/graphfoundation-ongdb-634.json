{
    "project_name": "graphfoundation-ongdb",
    "error_id": "634",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/634/PropertyRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/634/PropertyRecordCheck.java\nindex 8649df5ef0a..5cae4e1e790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/634/PropertyRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/634/PropertyRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.report.ConsistencyReport;\n@@ -30,266 +31,260 @@ import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n public class PropertyRecordCheck\n-        implements RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+    implements RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n {\n-    @Override\n-    public void check( PropertyRecord record,\n-                       CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                       RecordAccess records )\n+  @Override\n+  public void check(PropertyRecord record,\n+                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                    RecordAccess records)\n+  {\n+    if (!record.inUse())\n     {\n-        if ( !record.inUse() )\n-        {\n-            return;\n-        }\n-        for ( PropertyField field : PropertyField.values() )\n-        {\n-            field.checkConsistency( record, engine, records );\n-        }\n-        for ( PropertyBlock block : record )\n-        {\n-            checkDataBlock( block, engine, records );\n-        }\n+      return;\n     }\n-\n-    public static void checkDataBlock( PropertyBlock block,\n-                                 CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                 RecordAccess records )\n+    for (PropertyField field : PropertyField.values())\n     {\n-        if ( block.getKeyIndexId() < 0 )\n-        {\n-            engine.report().invalidPropertyKey( block );\n-        }\n-        else\n-        {\n-            engine.comparativeCheck( records.propertyKey( block.getKeyIndexId() ), propertyKey( block ) );\n-        }\n-        PropertyType type = block.forceGetType();\n-        if ( type == null )\n-        {\n-            engine.report().invalidPropertyType( block );\n-        }\n-        else\n-        {\n-            switch ( type )\n-            {\n-            case STRING:\n-                engine.comparativeCheck( records.string( block.getSingleValueLong() ),\n-                                         DynamicReference.string( block ) );\n-                break;\n-            case ARRAY:\n-                engine.comparativeCheck( records.array( block.getSingleValueLong() ), DynamicReference.array( block ) );\n-                break;\n-            default:\n-                try\n-                {\n-                    type.value( block, null );\n-                }\n-                catch ( Exception e )\n-                {\n-                    engine.report().invalidPropertyValue( block );\n-                }\n-                break;\n-            }\n-        }\n+      field.checkConsistency(record, engine, records);\n+    }\n+    for (PropertyBlock block : record)\n+    {\n+      checkDataBlock(block, engine, records);\n     }\n+  }\n \n-    public enum PropertyField implements\n-            RecordField<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>,\n-            ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+  public static void checkDataBlock(PropertyBlock block,\n+                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                                    RecordAccess records)\n+  {\n+    if (block.getKeyIndexId() < 0)\n+    {\n+      engine.report().invalidPropertyKey(block);\n+    } else\n+    {\n+      engine.comparativeCheck(records.propertyKey(block.getKeyIndexId()), propertyKey(block));\n+    }\n+    PropertyType type = block.forceGetType();\n+    if (type == null)\n+    {\n+      engine.report().invalidPropertyType(block);\n+    } else\n     {\n-        PREV( Record.NO_PREVIOUS_PROPERTY )\n+      switch (type)\n+      {\n+        case STRING:\n+          engine.comparativeCheck(records.string(block.getSingleValueLong()),\n+              DynamicReference.string(block));\n+          break;\n+        case ARRAY:\n+          engine.comparativeCheck(records.array(block.getSingleValueLong()), DynamicReference.array(block));\n+          break;\n+        default:\n+          try\n+          {\n+            type.value(block, null);\n+          } catch (Exception e)\n+          {\n+            engine.report().invalidPropertyValue(block);\n+          }\n+          break;\n+      }\n+    }\n+  }\n+\n+  public enum PropertyField implements\n+      RecordField<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>,\n+      ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+  {\n+    PREV(Record.NO_PREVIOUS_PROPERTY)\n         {\n-            @Override\n-            public long valueFrom( PropertyRecord record )\n-            {\n-                return record.getPrevProp();\n-            }\n+          @Override\n+          public long valueFrom(PropertyRecord record)\n+          {\n+            return record.getPrevProp();\n+          }\n \n-            @Override\n-            public long otherReference( PropertyRecord record )\n-            {\n-                return record.getNextProp();\n-            }\n+          @Override\n+          public long otherReference(PropertyRecord record)\n+          {\n+            return record.getNextProp();\n+          }\n \n-            @Override\n-            public void notInUse( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property )\n-            {\n-                report.prevNotInUse( property );\n-            }\n+          @Override\n+          public void notInUse(ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property)\n+          {\n+            report.prevNotInUse(property);\n+          }\n \n-            @Override\n-            public void noBackReference( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property )\n-            {\n-                report.previousDoesNotReferenceBack( property );\n-            }\n+          @Override\n+          public void noBackReference(ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property)\n+          {\n+            report.previousDoesNotReferenceBack(property);\n+          }\n         },\n-        NEXT( Record.NO_NEXT_PROPERTY )\n+    NEXT(Record.NO_NEXT_PROPERTY)\n         {\n-            @Override\n-            public long valueFrom( PropertyRecord record )\n-            {\n-                return record.getNextProp();\n-            }\n+          @Override\n+          public long valueFrom(PropertyRecord record)\n+          {\n+            return record.getNextProp();\n+          }\n \n-            @Override\n-            public long otherReference( PropertyRecord record )\n-            {\n-                return record.getPrevProp();\n-            }\n+          @Override\n+          public long otherReference(PropertyRecord record)\n+          {\n+            return record.getPrevProp();\n+          }\n \n-            @Override\n-            public void notInUse( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property )\n-            {\n-                report.nextNotInUse( property );\n-            }\n+          @Override\n+          public void notInUse(ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property)\n+          {\n+            report.nextNotInUse(property);\n+          }\n \n-            @Override\n-            public void noBackReference( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property )\n-            {\n-                report.nextDoesNotReferenceBack( property );\n-            }\n+          @Override\n+          public void noBackReference(ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property)\n+          {\n+            report.nextDoesNotReferenceBack(property);\n+          }\n         };\n-        private final Record NONE;\n+    private final Record NONE;\n \n-        PropertyField( Record none )\n-        {\n-            this.NONE = none;\n-        }\n+    PropertyField(Record none)\n+    {\n+      this.NONE = none;\n+    }\n \n-        public abstract long otherReference( PropertyRecord record );\n+    public abstract long otherReference(PropertyRecord record);\n \n-        @Override\n-        public void checkConsistency( PropertyRecord record,\n-                                      CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                      RecordAccess records )\n+    @Override\n+    public void checkConsistency(PropertyRecord record,\n+                                 CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                                 RecordAccess records)\n+    {\n+      if (!NONE.is(valueFrom(record)))\n+      {\n+        PropertyRecord prop = records.cacheAccess().client().getPropertyFromCache(valueFrom(record));\n+        if (prop == null)\n+        {\n+          engine.comparativeCheck(records.property(valueFrom(record)), this);\n+        } else\n         {\n-            if ( !NONE.is( valueFrom( record ) ) )\n-            {\n-                PropertyRecord prop = records.cacheAccess().client().getPropertyFromCache( valueFrom( record ) );\n-                if ( prop == null )\n-                {\n-                    engine.comparativeCheck( records.property( valueFrom( record ) ), this );\n-                }\n-                else\n-                {\n-                    engine.comparativeCheck( new DirectRecordReference<>( prop, records ), this );\n-                }\n-            }\n+          engine.comparativeCheck(new DirectRecordReference<>(prop, records), this);\n         }\n+      }\n+    }\n \n-        @Override\n-        public void checkReference( PropertyRecord record, PropertyRecord referred,\n-                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                    RecordAccess records )\n+    @Override\n+    public void checkReference(PropertyRecord record, PropertyRecord referred,\n+                               CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      if (!referred.inUse())\n+      {\n+        notInUse(engine.report(), referred);\n+      } else\n+      {\n+        if (otherReference(referred) != record.getId())\n         {\n-            if ( !referred.inUse() )\n-            {\n-                notInUse( engine.report(), referred );\n-            }\n-            else\n-            {\n-                if ( otherReference( referred ) != record.getId() )\n-                {\n-                    noBackReference( engine.report(), referred );\n-                }\n-            }\n+          noBackReference(engine.report(), referred);\n         }\n+      }\n+    }\n \n-        abstract void notInUse( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property );\n+    abstract void notInUse(ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property);\n \n-        public abstract void noBackReference( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property );\n-    }\n+    public abstract void noBackReference(ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property);\n+  }\n \n-    private static ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport>\n-    propertyKey( final PropertyBlock block )\n+  private static ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport>\n+  propertyKey(final PropertyBlock block)\n+  {\n+    return new ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport>()\n     {\n-        return new ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport>()\n+      @Override\n+      public void checkReference(PropertyRecord record, PropertyKeyTokenRecord referred,\n+                                 CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                                 RecordAccess records)\n+      {\n+        if (!referred.inUse())\n         {\n-            @Override\n-            public void checkReference( PropertyRecord record, PropertyKeyTokenRecord referred,\n-                                        CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                        RecordAccess records )\n-            {\n-                if ( !referred.inUse() )\n-                {\n-                    engine.report().keyNotInUse( block, referred );\n-                }\n-            }\n+          engine.report().keyNotInUse(block, referred);\n+        }\n+      }\n \n-            @Override\n-            public String toString()\n-            {\n-                return \"PROPERTY_KEY\";\n-            }\n-        };\n-    }\n+      @Override\n+      public String toString()\n+      {\n+        return \"PROPERTY_KEY\";\n+      }\n+    };\n+  }\n+\n+  private abstract static class DynamicReference implements\n+      ComparativeRecordChecker<PropertyRecord, DynamicRecord, ConsistencyReport.PropertyConsistencyReport>\n+  {\n+    final PropertyBlock block;\n \n-    private abstract static class DynamicReference implements\n-            ComparativeRecordChecker<PropertyRecord, DynamicRecord, ConsistencyReport.PropertyConsistencyReport>\n+    private DynamicReference(PropertyBlock block)\n     {\n-        final PropertyBlock block;\n+      this.block = block;\n+    }\n \n-        private DynamicReference( PropertyBlock block )\n+    public static DynamicReference string(PropertyBlock block)\n+    {\n+      return new DynamicReference(block)\n+      {\n+        @Override\n+        void notUsed(ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value)\n         {\n-            this.block = block;\n+          report.stringNotInUse(block, value);\n         }\n \n-        public static DynamicReference string( PropertyBlock block )\n+        @Override\n+        void empty(ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value)\n         {\n-            return new DynamicReference( block )\n-            {\n-                @Override\n-                void notUsed( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value )\n-                {\n-                    report.stringNotInUse( block, value );\n-                }\n-\n-                @Override\n-                void empty( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value )\n-                {\n-                    report.stringEmpty( block, value );\n-                }\n-            };\n+          report.stringEmpty(block, value);\n         }\n+      };\n+    }\n \n-        public static DynamicReference array( PropertyBlock block )\n+    public static DynamicReference array(PropertyBlock block)\n+    {\n+      return new DynamicReference(block)\n+      {\n+        @Override\n+        void notUsed(ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value)\n         {\n-            return new DynamicReference( block )\n-            {\n-                @Override\n-                void notUsed( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value )\n-                {\n-                    report.arrayNotInUse( block, value );\n-                }\n-\n-                @Override\n-                void empty( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value )\n-                {\n-                    report.arrayEmpty( block, value );\n-                }\n-            };\n+          report.arrayNotInUse(block, value);\n         }\n \n         @Override\n-        public void checkReference( PropertyRecord record, DynamicRecord referred,\n-                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                    RecordAccess records )\n+        void empty(ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value)\n         {\n-            if ( !referred.inUse() )\n-            {\n-                notUsed( engine.report(), referred );\n-            }\n-            else\n-            {\n-                if ( referred.getLength() <= 0 )\n-                {\n-                    empty( engine.report(), referred );\n-                }\n-            }\n+          report.arrayEmpty(block, value);\n         }\n+      };\n+    }\n \n-        abstract void notUsed( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value );\n-\n-        abstract void empty( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value );\n+    @Override\n+    public void checkReference(PropertyRecord record, DynamicRecord referred,\n+                               CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      if (!referred.inUse())\n+      {\n+        notUsed(engine.report(), referred);\n+      } else\n+      {\n+        if (referred.getLength() <= 0)\n+        {\n+          empty(engine.report(), referred);\n+        }\n+      }\n     }\n+\n+    abstract void notUsed(ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value);\n+\n+    abstract void empty(ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value);\n+  }\n }\n",
            "diff_size": 321
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/634/PropertyRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/634/PropertyRecordCheck.java\nindex 8649df5ef0a..01524ee8a41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/634/PropertyRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/634/PropertyRecordCheck.java\n@@ -29,14 +29,12 @@ import org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord;\n import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n-public class PropertyRecordCheck\n-        implements RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+public class PropertyRecordCheck implements RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n {\n     @Override\n-    public void check( PropertyRecord record,\n-                       CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+    public void check( PropertyRecord record, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                        RecordAccess records )\n-    {\n+{\n         if ( !record.inUse() )\n         {\n             return;\n@@ -51,10 +49,9 @@ public class PropertyRecordCheck\n         }\n     }\n \n-    public static void checkDataBlock( PropertyBlock block,\n-                                 CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+    public static void checkDataBlock( PropertyBlock block, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                  RecordAccess records )\n-    {\n+{\n         if ( block.getKeyIndexId() < 0 )\n         {\n             engine.report().invalidPropertyKey( block );\n@@ -63,7 +60,8 @@ public class PropertyRecordCheck\n         {\n             engine.comparativeCheck( records.propertyKey( block.getKeyIndexId() ), propertyKey( block ) );\n         }\n-        PropertyType type = block.forceGetType();\n+\n+PropertyType type = block.forceGetType();\n         if ( type == null )\n         {\n             engine.report().invalidPropertyType( block );\n@@ -73,9 +71,8 @@ public class PropertyRecordCheck\n             switch ( type )\n             {\n             case STRING:\n-                engine.comparativeCheck( records.string( block.getSingleValueLong() ),\n-                                         DynamicReference.string( block ) );\n-                break;\n+                engine.comparativeCheck( records.string( block.getSingleValueLong() ), DynamicReference.string( block ) );\n+break;\n             case ARRAY:\n                 engine.comparativeCheck( records.array( block.getSingleValueLong() ), DynamicReference.array( block ) );\n                 break;\n@@ -93,9 +90,7 @@ public class PropertyRecordCheck\n         }\n     }\n \n-    public enum PropertyField implements\n-            RecordField<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>,\n-            ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n+    public enum PropertyField implements RecordField<PropertyRecord, ConsistencyReport.PropertyConsistencyReport>, ComparativeRecordChecker<PropertyRecord, PropertyRecord, ConsistencyReport.PropertyConsistencyReport>\n     {\n         PREV( Record.NO_PREVIOUS_PROPERTY )\n         {\n@@ -159,10 +154,9 @@ public class PropertyRecordCheck\n         public abstract long otherReference( PropertyRecord record );\n \n         @Override\n-        public void checkConsistency( PropertyRecord record,\n-                                      CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+        public void checkConsistency( PropertyRecord record, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                       RecordAccess records )\n-        {\n+{\n             if ( !NONE.is( valueFrom( record ) ) )\n             {\n                 PropertyRecord prop = records.cacheAccess().client().getPropertyFromCache( valueFrom( record ) );\n@@ -178,10 +172,9 @@ public class PropertyRecordCheck\n         }\n \n         @Override\n-        public void checkReference( PropertyRecord record, PropertyRecord referred,\n-                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+        public void checkReference( PropertyRecord record, PropertyRecord referred, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                     RecordAccess records )\n-        {\n+{\n             if ( !referred.inUse() )\n             {\n                 notInUse( engine.report(), referred );\n@@ -200,16 +193,14 @@ public class PropertyRecordCheck\n         public abstract void noBackReference( ConsistencyReport.PropertyConsistencyReport report, PropertyRecord property );\n     }\n \n-    private static ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport>\n-    propertyKey( final PropertyBlock block )\n+    private static ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport> propertyKey( final PropertyBlock block )\n     {\n         return new ComparativeRecordChecker<PropertyRecord, PropertyKeyTokenRecord, ConsistencyReport.PropertyConsistencyReport>()\n         {\n             @Override\n-            public void checkReference( PropertyRecord record, PropertyKeyTokenRecord referred,\n-                                        CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+            public void checkReference( PropertyRecord record, PropertyKeyTokenRecord referred, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                         RecordAccess records )\n-            {\n+{\n                 if ( !referred.inUse() )\n                 {\n                     engine.report().keyNotInUse( block, referred );\n@@ -224,8 +215,7 @@ public class PropertyRecordCheck\n         };\n     }\n \n-    private abstract static class DynamicReference implements\n-            ComparativeRecordChecker<PropertyRecord, DynamicRecord, ConsistencyReport.PropertyConsistencyReport>\n+    private abstract static class DynamicReference implements ComparativeRecordChecker<PropertyRecord, DynamicRecord, ConsistencyReport.PropertyConsistencyReport>\n     {\n         final PropertyBlock block;\n \n@@ -271,10 +261,9 @@ public class PropertyRecordCheck\n         }\n \n         @Override\n-        public void checkReference( PropertyRecord record, DynamicRecord referred,\n-                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+        public void checkReference( PropertyRecord record, DynamicRecord referred, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                     RecordAccess records )\n-        {\n+{\n             if ( !referred.inUse() )\n             {\n                 notUsed( engine.report(), referred );\n@@ -292,4 +281,4 @@ public class PropertyRecordCheck\n \n         abstract void empty( ConsistencyReport.PropertyConsistencyReport report, DynamicRecord value );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}