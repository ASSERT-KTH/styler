{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2683",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2683/Listeners.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2683/Listeners.java\nindex ac8ea444b0c..d14b5d33720 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2683/Listeners.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2683/Listeners.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.util.Iterator;\n@@ -34,120 +35,120 @@ import static java.util.Objects.requireNonNull;\n  */\n public class Listeners<T> implements Iterable<T>\n {\n-    private final List<T> listeners;\n-\n-    /**\n-     * Construct new empty listeners;\n-     */\n-    public Listeners()\n-    {\n-        this.listeners = createListeners( emptyList() );\n-    }\n-\n-    /**\n-     * Construct a copy of the given listeners.\n-     *\n-     * @param other listeners to copy.\n-     */\n-    public Listeners( Listeners<T> other )\n-    {\n-        requireNonNull( other, \"prototype listeners can't be null\" );\n-\n-        this.listeners = createListeners( other.listeners );\n-    }\n-\n-    /**\n-     * Adds the specified listener to this container.\n-     *\n-     * @param listener the listener to add.\n-     */\n-    public void add( T listener )\n-    {\n-        requireNonNull( listener, \"added listener can't be null\" );\n-\n-        listeners.add( listener );\n-    }\n-\n-    /**\n-     * Remove the first occurrence of the specified listener from this container, if it is present.\n-     *\n-     * @param listener the listener to remove.\n-     */\n-    public void remove( T listener )\n-    {\n-        requireNonNull( listener, \"removed listener can't be null\" );\n-\n-        listeners.remove( listener );\n-    }\n-\n-    /**\n-     * Notify all listeners in this container with the given notification.\n-     * Notification of each listener is synchronized on this listener.\n-     *\n-     * @param notification the notification to be applied to each listener.\n-     */\n-    public void notify( Notification<T> notification )\n-    {\n-        requireNonNull( notification, \"notification can't be null\" );\n-\n-        for ( T listener : listeners )\n-        {\n-            notifySingleListener( listener, notification );\n-        }\n-    }\n-\n-    /**\n-     * Notify all listeners in this container with the given notification using the given executor.\n-     * Each notification is submitted as a {@link Runnable} to the executor.\n-     * Notification of each listener is synchronized on this listener.\n-     *\n-     * @param executor the executor to submit notifications to.\n-     * @param notification the notification to be applied to each listener.\n-     */\n-    public void notify( Executor executor, Notification<T> notification )\n+  private final List<T> listeners;\n+\n+  /**\n+   * Construct new empty listeners;\n+   */\n+  public Listeners()\n+  {\n+    this.listeners = createListeners(emptyList());\n+  }\n+\n+  /**\n+   * Construct a copy of the given listeners.\n+   *\n+   * @param other listeners to copy.\n+   */\n+  public Listeners(Listeners<T> other)\n+  {\n+    requireNonNull(other, \"prototype listeners can't be null\");\n+\n+    this.listeners = createListeners(other.listeners);\n+  }\n+\n+  /**\n+   * Adds the specified listener to this container.\n+   *\n+   * @param listener the listener to add.\n+   */\n+  public void add(T listener)\n+  {\n+    requireNonNull(listener, \"added listener can't be null\");\n+\n+    listeners.add(listener);\n+  }\n+\n+  /**\n+   * Remove the first occurrence of the specified listener from this container, if it is present.\n+   *\n+   * @param listener the listener to remove.\n+   */\n+  public void remove(T listener)\n+  {\n+    requireNonNull(listener, \"removed listener can't be null\");\n+\n+    listeners.remove(listener);\n+  }\n+\n+  /**\n+   * Notify all listeners in this container with the given notification.\n+   * Notification of each listener is synchronized on this listener.\n+   *\n+   * @param notification the notification to be applied to each listener.\n+   */\n+  public void notify(Notification<T> notification)\n+  {\n+    requireNonNull(notification, \"notification can't be null\");\n+\n+    for (T listener : listeners)\n     {\n-        requireNonNull( executor, \"executor can't be null\" );\n-        requireNonNull( notification, \"notification can't be null\" );\n-\n-        for ( T listener : listeners )\n-        {\n-            executor.execute( () -> notifySingleListener( listener, notification ) );\n-        }\n+      notifySingleListener(listener, notification);\n     }\n-\n-    /**\n-     * Returns the iterator over listeners in this container in the order they were added.\n-     * <p>\n-     * The returned iterator provides a snapshot of the state of the list\n-     * when the iterator was constructed. No synchronization is needed while\n-     * traversing the iterator. The iterator does <em>NOT</em> support the\n-     * {@code remove} method.\n-     *\n-     * @return iterator over listeners.\n-     */\n-    @Override\n-    public Iterator<T> iterator()\n+  }\n+\n+  /**\n+   * Notify all listeners in this container with the given notification using the given executor.\n+   * Each notification is submitted as a {@link Runnable} to the executor.\n+   * Notification of each listener is synchronized on this listener.\n+   *\n+   * @param executor     the executor to submit notifications to.\n+   * @param notification the notification to be applied to each listener.\n+   */\n+  public void notify(Executor executor, Notification<T> notification)\n+  {\n+    requireNonNull(executor, \"executor can't be null\");\n+    requireNonNull(notification, \"notification can't be null\");\n+\n+    for (T listener : listeners)\n     {\n-        return listeners.iterator();\n+      executor.execute(() -> notifySingleListener(listener, notification));\n     }\n-\n-    private static <T> void notifySingleListener( T listener, Notification<T> notification )\n-    {\n-        synchronized ( listener )\n-        {\n-            notification.notify( listener );\n-        }\n-    }\n-\n-    private static <T> List<T> createListeners( List<T> existingListeners )\n-    {\n-        List<T> result = new CopyOnWriteArrayList<>();\n-        result.addAll( existingListeners );\n-        return result;\n-    }\n-\n-    public interface Notification<T>\n+  }\n+\n+  /**\n+   * Returns the iterator over listeners in this container in the order they were added.\n+   * <p>\n+   * The returned iterator provides a snapshot of the state of the list\n+   * when the iterator was constructed. No synchronization is needed while\n+   * traversing the iterator. The iterator does <em>NOT</em> support the\n+   * {@code remove} method.\n+   *\n+   * @return iterator over listeners.\n+   */\n+  @Override\n+  public Iterator<T> iterator()\n+  {\n+    return listeners.iterator();\n+  }\n+\n+  private static <T> void notifySingleListener(T listener, Notification<T> notification)\n+  {\n+    synchronized (listener)\n     {\n-        void notify( T listener );\n+      notification.notify(listener);\n     }\n+  }\n+\n+  private static <T> List<T> createListeners(List<T> existingListeners)\n+  {\n+    List<T> result = new CopyOnWriteArrayList<>();\n+    result.addAll(existingListeners);\n+    return result;\n+  }\n+\n+  public interface Notification<T>\n+  {\n+    void notify(T listener);\n+  }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2683/Listeners.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2683/Listeners.java\nindex ac8ea444b0c..5fd32c462ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2683/Listeners.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2683/Listeners.java\n@@ -52,8 +52,7 @@ public class Listeners<T> implements Iterable<T>\n     public Listeners( Listeners<T> other )\n     {\n         requireNonNull( other, \"prototype listeners can't be null\" );\n-\n-        this.listeners = createListeners( other.listeners );\n+this.listeners = createListeners( other.listeners );\n     }\n \n     /**\n@@ -64,8 +63,7 @@ public class Listeners<T> implements Iterable<T>\n     public void add( T listener )\n     {\n         requireNonNull( listener, \"added listener can't be null\" );\n-\n-        listeners.add( listener );\n+listeners.add( listener );\n     }\n \n     /**\n@@ -76,8 +74,7 @@ public class Listeners<T> implements Iterable<T>\n     public void remove( T listener )\n     {\n         requireNonNull( listener, \"removed listener can't be null\" );\n-\n-        listeners.remove( listener );\n+listeners.remove( listener );\n     }\n \n     /**\n@@ -89,8 +86,7 @@ public class Listeners<T> implements Iterable<T>\n     public void notify( Notification<T> notification )\n     {\n         requireNonNull( notification, \"notification can't be null\" );\n-\n-        for ( T listener : listeners )\n+for ( T listener : listeners )\n         {\n             notifySingleListener( listener, notification );\n         }\n@@ -108,8 +104,7 @@ public class Listeners<T> implements Iterable<T>\n     {\n         requireNonNull( executor, \"executor can't be null\" );\n         requireNonNull( notification, \"notification can't be null\" );\n-\n-        for ( T listener : listeners )\n+for ( T listener : listeners )\n         {\n             executor.execute( () -> notifySingleListener( listener, notification ) );\n         }\n@@ -150,4 +145,4 @@ public class Listeners<T> implements Iterable<T>\n     {\n         void notify( T listener );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}