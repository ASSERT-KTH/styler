{
    "project_name": "apache-usergrid",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "33",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * Node that represents a query slice operation\n *\n * @author tnine\n */\npublic class QuerySlice {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "146",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "192",
                    "column": "29",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "39",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "204",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "214",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "285",
                    "column": "33",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "43",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "310",
                    "column": "68",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "78",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/22/QuerySlice.java\nindex 77c0a6b1ab9..38f837dd7ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/22/QuerySlice.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.query.ir;\n \n \n@@ -35,11 +36,16 @@ import static org.apache.usergrid.utils.CompositeUtils.setEqualityFlag;\n public class QuerySlice {\n \n     private final String propertyName;\n+\n     private final int nodeId;\n+\n     // Object value;\n     private RangeValue start;\n+\n     private RangeValue finish;\n+\n     private ByteBuffer cursor;\n+\n     private boolean reversed;\n \n \n@@ -47,13 +53,15 @@ public class QuerySlice {\n      * @param propertyName\n      * @param nodeId\n      */\n-    public QuerySlice( String propertyName, int nodeId ) {\n+    public QuerySlice(String propertyName, int nodeId) {\n         this.propertyName = propertyName;\n         this.nodeId = nodeId;\n     }\n \n \n-    /** Reverse this slice. Flips the reversed switch and correctly changes the start and finish */\n+    /**\n+     * Reverse this slice. Flips the reversed switch and correctly changes the start and finish\n+     */\n     public void reverse() {\n         reversed = !reversed;\n \n@@ -75,7 +83,7 @@ public class QuerySlice {\n     }\n \n \n-    public void setStart( RangeValue start ) {\n+    public void setStart(RangeValue start) {\n         this.start = start;\n     }\n \n@@ -85,7 +93,7 @@ public class QuerySlice {\n     }\n \n \n-    public void setFinish( RangeValue finish ) {\n+    public void setFinish(RangeValue finish) {\n         this.finish = finish;\n     }\n \n@@ -95,12 +103,14 @@ public class QuerySlice {\n     }\n \n \n-    public void setCursor( ByteBuffer cursor ) {\n+    public void setCursor(ByteBuffer cursor) {\n         this.cursor = cursor;\n     }\n \n \n-    /** True if a cursor has been set */\n+    /**\n+     * True if a cursor has been set\n+     */\n     public boolean hasCursor() {\n         return this.cursor != null;\n     }\n@@ -124,36 +134,34 @@ public class QuerySlice {\n      * Get the slice range to be used during querying\n      *\n      * @return An array of dynamic composites to use. Index 0 is the start, index 1 is the finish. One or more could be\n-     *         null\n+     * null\n      */\n     public DynamicComposite[] getRange() {\n         DynamicComposite startComposite = null;\n         DynamicComposite finishComposite = null;\n \n         // calc\n-        if ( hasCursor() ) {\n-            startComposite = DynamicComposite.fromByteBuffer( cursor.duplicate() );\n-        }\n-\n-        else if ( start != null ) {\n-            startComposite = new DynamicComposite( start.getCode(), start.getValue() );\n+        if (hasCursor()) {\n+            startComposite = DynamicComposite.fromByteBuffer(cursor.duplicate());\n+        } else if (start != null) {\n+            startComposite = new DynamicComposite(start.getCode(), start.getValue());\n \n             // forward scanning from a >= 100 OR //reverse scanning from MAX to >= 100\n-            if ( ( !reversed && !start.isInclusive() ) || ( reversed && start.isInclusive() ) ) {\n-                setEqualityFlag( startComposite, ComponentEquality.GREATER_THAN_EQUAL );\n+            if ((!reversed && !start.isInclusive()) || (reversed && start.isInclusive())) {\n+                setEqualityFlag(startComposite, ComponentEquality.GREATER_THAN_EQUAL);\n             }\n         }\n \n-        if ( finish != null ) {\n-            finishComposite = new DynamicComposite( finish.getCode(), finish.getValue() );\n+        if (finish != null) {\n+            finishComposite = new DynamicComposite(finish.getCode(), finish.getValue());\n \n             // forward scan to <= 100 OR reverse scan ININITY to > 100\n-            if ( ( !reversed && finish.isInclusive() ) || reversed && !finish.isInclusive() ) {\n-                setEqualityFlag( finishComposite, ComponentEquality.GREATER_THAN_EQUAL );\n+            if ((!reversed && finish.isInclusive()) || reversed && !finish.isInclusive()) {\n+                setEqualityFlag(finishComposite, ComponentEquality.GREATER_THAN_EQUAL);\n             }\n         }\n \n-        return new DynamicComposite[] { startComposite, finishComposite };\n+        return new DynamicComposite[] {startComposite, finishComposite};\n     }\n \n \n@@ -161,52 +169,49 @@ public class QuerySlice {\n     public int hashCode() {\n         final int prime = 31;\n         int result = 1;\n-        result = prime * result + ( ( finish == null ) ? 0 : finish.hashCode() );\n-        result = prime * result + ( ( propertyName == null ) ? 0 : propertyName.hashCode() );\n-        result = prime * result + ( reversed ? 1231 : 1237 );\n-        result = prime * result + ( ( start == null ) ? 0 : start.hashCode() );\n+        result = prime * result + ((finish == null) ? 0 : finish.hashCode());\n+        result = prime * result + ((propertyName == null) ? 0 : propertyName.hashCode());\n+        result = prime * result + (reversed ? 1231 : 1237);\n+        result = prime * result + ((start == null) ? 0 : start.hashCode());\n         result = prime * result + nodeId;\n         return result;\n     }\n \n \n     @Override\n-    public boolean equals( Object obj ) {\n-        if ( this == obj ) {\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n             return true;\n         }\n-        if ( obj == null ) {\n+        if (obj == null) {\n             return false;\n         }\n-        if ( getClass() != obj.getClass() ) {\n+        if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        QuerySlice other = ( QuerySlice ) obj;\n-        if ( finish == null ) {\n-            if ( other.finish != null ) {\n+        QuerySlice other = (QuerySlice) obj;\n+        if (finish == null) {\n+            if (other.finish != null) {\n                 return false;\n             }\n-        }\n-        else if ( !finish.equals( other.finish ) ) {\n+        } else if (!finish.equals(other.finish)) {\n             return false;\n         }\n-        if ( propertyName == null ) {\n-            if ( other.propertyName != null ) {\n+        if (propertyName == null) {\n+            if (other.propertyName != null) {\n                 return false;\n             }\n-        }\n-        else if ( !propertyName.equals( other.propertyName ) ) {\n+        } else if (!propertyName.equals(other.propertyName)) {\n             return false;\n         }\n-        if ( reversed != other.reversed ) {\n+        if (reversed != other.reversed) {\n             return false;\n         }\n-        if ( start == null ) {\n-            if ( other.start != null ) {\n+        if (start == null) {\n+            if (other.start != null) {\n                 return false;\n             }\n-        }\n-        else if ( !start.equals( other.start ) ) {\n+        } else if (!start.equals(other.start)) {\n             return false;\n         }\n         return true;\n@@ -221,17 +226,19 @@ public class QuerySlice {\n     @Override\n     public String toString() {\n         return \"QuerySlice [propertyName=\" + propertyName + \", start=\" + start + \", finish=\" + finish + \", cursor=\"\n-                + cursor + \", reversed=\" + reversed + \", nodeId=\" + nodeId + \"]\";\n+            + cursor + \", reversed=\" + reversed + \", nodeId=\" + nodeId + \"]\";\n     }\n \n \n     public static class RangeValue {\n         final byte code;\n+\n         final Object value;\n+\n         final boolean inclusive;\n \n \n-        public RangeValue( byte code, Object value, boolean inclusive ) {\n+        public RangeValue(byte code, Object value, boolean inclusive) {\n             this.code = code;\n             this.value = value;\n             this.inclusive = inclusive;\n@@ -258,62 +265,60 @@ public class QuerySlice {\n             final int prime = 31;\n             int result = 1;\n             result = prime * result + code;\n-            result = prime * result + ( inclusive ? 1231 : 1237 );\n-            result = prime * result + ( ( value == null ) ? 0 : value.hashCode() );\n+            result = prime * result + (inclusive ? 1231 : 1237);\n+            result = prime * result + ((value == null) ? 0 : value.hashCode());\n             return result;\n         }\n \n \n         @Override\n-        public boolean equals( Object obj ) {\n-            if ( this == obj ) {\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n                 return true;\n             }\n-            if ( obj == null ) {\n+            if (obj == null) {\n                 return false;\n             }\n-            if ( getClass() != obj.getClass() ) {\n+            if (getClass() != obj.getClass()) {\n                 return false;\n             }\n-            RangeValue other = ( RangeValue ) obj;\n-            if ( code != other.code ) {\n+            RangeValue other = (RangeValue) obj;\n+            if (code != other.code) {\n                 return false;\n             }\n-            if ( inclusive != other.inclusive ) {\n+            if (inclusive != other.inclusive) {\n                 return false;\n             }\n-            if ( value == null ) {\n-                if ( other.value != null ) {\n+            if (value == null) {\n+                if (other.value != null) {\n                     return false;\n                 }\n-            }\n-            else if ( !value.equals( other.value ) ) {\n+            } else if (!value.equals(other.value)) {\n                 return false;\n             }\n             return true;\n         }\n \n \n-        public int compareTo( RangeValue other, boolean finish ) {\n-            if ( other == null ) {\n+        public int compareTo(RangeValue other, boolean finish) {\n+            if (other == null) {\n                 return 1;\n             }\n-            if ( code != other.code ) {\n-                return NumberUtils.sign( code - other.code );\n+            if (code != other.code) {\n+                return NumberUtils.sign(code - other.code);\n             }\n-            @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) int c = ( ( Comparable ) value ).compareTo( other.value );\n-            if ( c != 0 ) {\n+            @SuppressWarnings({\"unchecked\", \"rawtypes\"}) int c = ((Comparable) value).compareTo(other.value);\n+            if (c != 0) {\n                 return c;\n             }\n-            if ( finish ) {\n+            if (finish) {\n                 // for finish values, inclusive means <= which is greater than <\n-                if ( inclusive != other.inclusive ) {\n+                if (inclusive != other.inclusive) {\n                     return inclusive ? 1 : -1;\n                 }\n-            }\n-            else {\n+            } else {\n                 // for start values, inclusive means >= which is lest than >\n-                if ( inclusive != other.inclusive ) {\n+                if (inclusive != other.inclusive) {\n                     return inclusive ? -1 : 1;\n                 }\n             }\n@@ -332,14 +337,14 @@ public class QuerySlice {\n         }\n \n \n-        public static int compare( RangeValue v1, RangeValue v2, boolean finish ) {\n-            if ( v1 == null ) {\n-                if ( v2 == null ) {\n+        public static int compare(RangeValue v1, RangeValue v2, boolean finish) {\n+            if (v1 == null) {\n+                if (v2 == null) {\n                     return 0;\n                 }\n                 return -1;\n             }\n-            return v1.compareTo( v2, finish );\n+            return v1.compareTo(v2, finish);\n         }\n     }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/22/QuerySlice.java\nindex 77c0a6b1ab9..c2ffe667889 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/22/QuerySlice.java\n@@ -342,4 +342,4 @@ public class QuerySlice {\n             return v1.compareTo( v2, finish );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "233",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/22/QuerySlice.java\nindex 77c0a6b1ab9..2c3d21a650c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/22/QuerySlice.java\n@@ -18,9 +18,7 @@ package org.apache.usergrid.persistence.query.ir;\n \n \n import java.nio.ByteBuffer;\n-\n import org.apache.usergrid.utils.NumberUtils;\n-\n import me.prettyprint.hector.api.beans.AbstractComposite.ComponentEquality;\n import me.prettyprint.hector.api.beans.DynamicComposite;\n \n@@ -32,6 +30,8 @@ import static org.apache.usergrid.utils.CompositeUtils.setEqualityFlag;\n  *\n  * @author tnine\n  */\n+\n+\n public class QuerySlice {\n \n     private final String propertyName;\n@@ -47,6 +47,8 @@ public class QuerySlice {\n      * @param propertyName\n      * @param nodeId\n      */\n+\n+\n     public QuerySlice( String propertyName, int nodeId ) {\n         this.propertyName = propertyName;\n         this.nodeId = nodeId;\n@@ -54,13 +56,13 @@ public class QuerySlice {\n \n \n     /** Reverse this slice. Flips the reversed switch and correctly changes the start and finish */\n+\n+\n     public void reverse() {\n         reversed = !reversed;\n \n         RangeValue oldStart = start;\n-\n         start = finish;\n-\n         finish = oldStart;\n     }\n \n@@ -101,6 +103,8 @@ public class QuerySlice {\n \n \n     /** True if a cursor has been set */\n+\n+\n     public boolean hasCursor() {\n         return this.cursor != null;\n     }\n@@ -115,6 +119,8 @@ public class QuerySlice {\n      * Return true if we have a cursor and it's empty. This means that we've already returned all possible values from\n      * this slice range with our existing data in a previous invocation of search\n      */\n+\n+\n     public boolean isComplete() {\n         return cursor != null && cursor.remaining() == 0;\n     }\n@@ -126,6 +132,8 @@ public class QuerySlice {\n      * @return An array of dynamic composites to use. Index 0 is the start, index 1 is the finish. One or more could be\n      *         null\n      */\n+\n+\n     public DynamicComposite[] getRange() {\n         DynamicComposite startComposite = null;\n         DynamicComposite finishComposite = null;\n@@ -134,7 +142,6 @@ public class QuerySlice {\n         if ( hasCursor() ) {\n             startComposite = DynamicComposite.fromByteBuffer( cursor.duplicate() );\n         }\n-\n         else if ( start != null ) {\n             startComposite = new DynamicComposite( start.getCode(), start.getValue() );\n \n@@ -143,7 +150,6 @@ public class QuerySlice {\n                 setEqualityFlag( startComposite, ComponentEquality.GREATER_THAN_EQUAL );\n             }\n         }\n-\n         if ( finish != null ) {\n             finishComposite = new DynamicComposite( finish.getCode(), finish.getValue() );\n \n@@ -152,8 +158,9 @@ public class QuerySlice {\n                 setEqualityFlag( finishComposite, ComponentEquality.GREATER_THAN_EQUAL );\n             }\n         }\n-\n-        return new DynamicComposite[] { startComposite, finishComposite };\n+        return new DynamicComposite[] {\n+            startComposite, finishComposite\n+        };\n     }\n \n \n@@ -181,6 +188,7 @@ public class QuerySlice {\n         if ( getClass() != obj.getClass() ) {\n             return false;\n         }\n+\n         QuerySlice other = ( QuerySlice ) obj;\n         if ( finish == null ) {\n             if ( other.finish != null ) {\n@@ -218,14 +226,16 @@ public class QuerySlice {\n      *\n      * @see java.lang.Object#toString()\n      */\n+\n+\n     @Override\n     public String toString() {\n-        return \"QuerySlice [propertyName=\" + propertyName + \", start=\" + start + \", finish=\" + finish + \", cursor=\"\n-                + cursor + \", reversed=\" + reversed + \", nodeId=\" + nodeId + \"]\";\n+        return \"QuerySlice [propertyName=\" + propertyName + \", start=\" + start + \", finish=\" + finish + \", cursor=\" + cursor + \", reversed=\" + reversed + \", nodeId=\" + nodeId + \"]\";\n     }\n \n \n     public static class RangeValue {\n+\n         final byte code;\n         final Object value;\n         final boolean inclusive;\n@@ -275,6 +285,7 @@ public class QuerySlice {\n             if ( getClass() != obj.getClass() ) {\n                 return false;\n             }\n+\n             RangeValue other = ( RangeValue ) obj;\n             if ( code != other.code ) {\n                 return false;\n@@ -301,6 +312,7 @@ public class QuerySlice {\n             if ( code != other.code ) {\n                 return NumberUtils.sign( code - other.code );\n             }\n+\n             @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) int c = ( ( Comparable ) value ).compareTo( other.value );\n             if ( c != 0 ) {\n                 return c;\n@@ -326,6 +338,8 @@ public class QuerySlice {\n          *\n          * @see java.lang.Object#toString()\n          */\n+\n+\n         @Override\n         public String toString() {\n             return \"RangeValue [code=\" + code + \", value=\" + value + \", inclusive=\" + inclusive + \"]\";\n@@ -342,4 +356,4 @@ public class QuerySlice {\n             return v1.compareTo( v2, finish );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/22/QuerySlice.java\nindex 77c0a6b1ab9..461a0f99d8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/22/QuerySlice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/22/QuerySlice.java\n@@ -25,8 +25,6 @@ import me.prettyprint.hector.api.beans.AbstractComposite.ComponentEquality;\n import me.prettyprint.hector.api.beans.DynamicComposite;\n \n import static org.apache.usergrid.utils.CompositeUtils.setEqualityFlag;\n-\n-\n /**\n  * Node that represents a query slice operation\n  *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}