{
    "project_name": "CESNET-perun",
    "error_id": "504",
    "information": {
        "errors": [
            {
                "line": "83",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\tString email = null;\n\t\tUser user = sess.getPerunPrincipal().getUser();\n\t\t\n\t\t//try to get user/member email from user in session\n\t\tif(user != null) email = findUserPreferredEmail(sess, user);\n\t\telse {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/504/RTMessagesManagerBlImpl.java\nindex 034d58887f8..21be1c75859 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/504/RTMessagesManagerBlImpl.java\n@@ -80,7 +80,7 @@ public class RTMessagesManagerBlImpl implements RTMessagesManagerBl{\n \t\t//Get Email from User who get from session\n \t\tString email = null;\n \t\tUser user = sess.getPerunPrincipal().getUser();\n-\t\t\n+\n \t\t//try to get user/member email from user in session\n \t\tif(user != null) email = findUserPreferredEmail(sess, user);\n \t\telse {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/504/RTMessagesManagerBlImpl.java\nindex 034d58887f8..d6cb5bf73cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/504/RTMessagesManagerBlImpl.java\n@@ -10,6 +10,7 @@ import org.slf4j.LoggerFactory;\n import java.nio.charset.Charset;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+\n import org.apache.http.HttpResponse;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.client.HttpClient;\n@@ -43,228 +44,239 @@ import cz.metacentrum.perun.core.impl.Utils;\n  *\n  * @author Michal Stava <stavamichal@gmail.com>\n  */\n-public class RTMessagesManagerBlImpl implements RTMessagesManagerBl{\n-\tprivate String rtURL;\n-\tprivate PerunBl perunBl;\n-\tprivate final static org.slf4j.Logger log = LoggerFactory.getLogger(RTMessagesManagerBlImpl.class);\n-\tprivate final String defaultQueue = \"perunv3\";\n-\n-\tprivate Pattern ticketNumberPattern = Pattern.compile(\"^# Ticket ([0-9]+) created.\");\n-\n-\tpublic RTMessagesManagerBlImpl(PerunBl perunBl) throws InternalErrorException {\n-\t\tthis();\n-\t\tthis.perunBl = perunBl;\n-\t\trtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n-\t}\n-\n-\tpublic RTMessagesManagerBlImpl() throws InternalErrorException {\n-\t\trtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n-\t}\n-\n-\tpublic RTMessage sendMessageToRT(PerunSession sess, int voId, String subject, String text) throws InternalErrorException {\n-\t\treturn sendMessageToRT(sess, voId, null, subject, text);\n-\t}\n-\n-\t@Deprecated\n-\tpublic RTMessage sendMessageToRT(PerunSession sess, Member meber, String queue, String subject, String text) throws InternalErrorException {\n-\t\tthrow new InternalErrorException(\"This method is not supported now!\");\n-\t}\n-\n-\tpublic RTMessage sendMessageToRT(PerunSession sess, String queue, String subject, String text) throws InternalErrorException {\n-\t\treturn sendMessageToRT(sess, 0, queue, subject, text);\n-\t}\n-\n-\tpublic RTMessage sendMessageToRT(PerunSession sess, int voId, String queue, String subject, String text) throws InternalErrorException {\n-\t\tlog.debug(\"Parameters of rtMessage are queue='\" + queue +\"', subject='{}' and text='{}'\", subject, text);\n-\n-\t\t//Get Email from User who get from session\n-\t\tString email = null;\n-\t\tUser user = sess.getPerunPrincipal().getUser();\n-\t\t\n-\t\t//try to get user/member email from user in session\n-\t\tif(user != null) email = findUserPreferredEmail(sess, user);\n-\t\telse {\n-\t\t\temail = null;\n-\t\t\tlog.error(\"Can't get user from session.\");\n-\t\t}\n-\n-\t\t//try to get email from additionalInformations in session (attribute mail)\n-\t\tif(email == null) {\n-\t\t\tMatcher emailMatcher;\n-\t\t\tMap<String,String> additionalInfo = sess.getPerunPrincipal().getAdditionalInformations();\n-\t\t\t//If there are some data in additionalInfo\n-\t\t\tif(additionalInfo != null) {\n-\t\t\t\tString mailInfo = additionalInfo.get(\"mail\");\n-\t\t\t\t//If there is notnull attribute \"mail\" in map\n-\t\t\t\tif(mailInfo != null) {\n-\t\t\t\t\t//If attribute mail has separator ',' or ';'\n-\t\t\t\t\tif(mailInfo.contains(\";\")) {\n-\t\t\t\t\t\tString[] mailsFromInfo = mailInfo.split(\";\");\n-\t\t\t\t\t\tfor(String mail: mailsFromInfo) {\n-\t\t\t\t\t\t\temailMatcher = Utils.emailPattern.matcher(mail);\n-\t\t\t\t\t\t\tif(emailMatcher.matches()) {\n-\t\t\t\t\t\t\t\temail = mail;\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(mailInfo.contains(\",\")) {\n-\t\t\t\t\t\tString[] mailsFromInfo = mailInfo.split(\",\");\n-\t\t\t\t\t\tfor(String mail: mailsFromInfo) {\n-\t\t\t\t\t\t\temailMatcher = Utils.emailPattern.matcher(mail);\n-\t\t\t\t\t\t\tif(emailMatcher.matches()) {\n-\t\t\t\t\t\t\t\temail = mail;\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t//If there is no separator, test if this has format of email, if yes, save it to email\n-\t\t\t\t\t\temailMatcher = Utils.emailPattern.matcher(mailInfo);\n-\t\t\t\t\t\tif(emailMatcher.matches()) {\n-\t\t\t\t\t\t\temail = mailInfo;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Prepare sending message\n-\t\tHttpResponse response;\n-\t\tHttpClient httpClient = new DefaultHttpClient();\n-\t\thttpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.IGNORE_COOKIES);\n-\n-\t\tStringBuilder responseMessage = new StringBuilder();\n-\t\tString ticketNumber = \"0\";\n-\t\ttry {\n-\t\t\tresponse = httpClient.execute(this.prepareDataAndGetHttpRequest(sess, voId, queue, email, subject, text));\n-\t\t\tBufferedReader bw = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n-\n-\t\t\t//Reading response from RT\n-\t\t\tString line;\n-\t\t\twhile((line = bw.readLine()) != null) {\n-\t\t\t\tresponseMessage.append(line);\n-\t\t\t\tresponseMessage.append('\\n');\n-\t\t\t\t//Matcher for ticketNumber\n-\t\t\t\tMatcher ticketNumberMatcher = this.ticketNumberPattern.matcher(line);\n-\t\t\t\tif(ticketNumberMatcher.find()) {\n-\t\t\t\t\tticketNumber = ticketNumberMatcher.group(1);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (IOException ex) {\n-\t\t\tthrow new InternalErrorException(\"IOException has been throw while executing http request.\", ex);\n-\t\t}\n-\n-\t\t//Return message if response is ok, or throw exception with bad response\n-\t\tint ticketNum = Integer.valueOf(ticketNumber);\n-\t\tif(ticketNum != 0) {\n-\t\t\tRTMessage rtmessage = new RTMessage(email, ticketNum);\n-\t\t\tlog.debug(\"RT message was send successfully and the ticket has number: \" + ticketNum);\n-\t\t\treturn rtmessage;\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"RT message was not send due to error with RT returned this message: \" + responseMessage.toString());\n-\t\t}\n-\t}\n-\n-\tprivate String findUserPreferredEmail(PerunSession sess, User user) throws InternalErrorException {\n-\t\tString email = null;\n-\t\tAttribute userPreferredMail = null;\n-\t\ttry {\n-\t\t\tuserPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:preferredMail\");\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tif(userPreferredMail == null || userPreferredMail.getValue() == null) {\n-\t\t\ttry {\n-\t\t\t\tuserPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:mail\");\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tif(userPreferredMail != null && userPreferredMail.getValue() != null) {\n-\t\t\temail = (String) userPreferredMail.getValue();\n-\t\t}\n-\t\treturn email;\n-\t}\n-\n-\tprivate HttpUriRequest prepareDataAndGetHttpRequest(PerunSession sess, int voId, String queue, String requestor, String subject, String text) throws InternalErrorException {\n-\t\t//Ticket from this part is already evidet like 'new'\n-\t\tString id = \"ticket/new\";\n-\t\t//If there is no requestor, it is uknown requestor\n-\t\tif(requestor == null || requestor.isEmpty()) {\n-\t\t\trequestor = \"unknown\";\n-\t\t}\n-\t\t//If queue is null, try to check if exist value in attribute rtVoQueue, if not, use default\n-\t\tif(queue == null || queue.isEmpty()) {\n-\t\t\tVo vo = null;\n-\t\t\tif(voId != 0) {\n-\t\t\t\ttry {\n-\t\t\t\t\tvo = perunBl.getVosManagerBl().getVoById(sess, voId);\n-\t\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"VoId with Id=\" + voId + \" not exists.\", ex);\n-\t\t\t\t}\n-\t\t\t\tAttribute voQueue = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tvoQueue = perunBl.getAttributesManagerBl().getAttribute(sess, vo, AttributesManager.NS_VO_ATTR_DEF + \":RTVoQueue\");\n-\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Attribute RTVoQueue not exists.\", ex);\n-\t\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tif(voQueue.getValue() != null) {\n-\t\t\t\t\tqueue = (String) voQueue.getValue();\n-\t\t\t\t} else queue = defaultQueue;\n-\t\t\t} else queue = defaultQueue;\n-\t\t}\n-\t\t//If subject is null or empty, use Unspecified instead\n-\t\tif(subject == null || subject.isEmpty()) subject = \"(No subject)\";\n-\t\t//Text can be null so if it is, put empty string\n-\t\tif(text == null) text = \"\";\n-\n-\t\t//Prepare credentials\n-\t\tString username = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.username\");\n-\t\tString password = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.password\");\n-\n-\t\t//Prepare content of message\n-\t\tMultipartEntity entity = new MultipartEntity();\n-\t\ttry {\n-\t\t\tentity.addPart(\"Content-Typ\", new StringBody(\"application/x-www-form-urlencoded\"));\n-\t\t\tentity.addPart(\"charset\", new StringBody(\"utf-8\"));\n-\t\t\tentity.addPart(\"Connection\", new StringBody(\"Close\"));\n-\t\t\tStringBody content = new StringBody(\"id: \" + id + '\\n' +\n-\t\t\t\t\t\"Queue: \" + queue + '\\n' +\n-\t\t\t\t\t\"Requestor: \" + requestor + '\\n' +\n-\t\t\t\t\t\"Subject: \" + subject + '\\n' +\n-\t\t\t\t\t\"Text: \" + text,\n-\t\t\t\t\tCharset.forName(\"utf-8\"));\n-\t\t\tentity.addPart(\"content\", content);\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\n-\t\t//Test rtURL for null\n-\t\tif(rtURL == null || rtURL.length() == 0) throw new InternalErrorException(\"rtURL is not prepared and is null in the moment of posting.\");\n-\n-\t\t// prepare post request\n-\t\tHttpPost post = new HttpPost(rtURL);\n-\t\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n-\n-\t\tpost.addHeader(BasicScheme.authenticate(credentials, \"utf-8\", false));\n-\t\tpost.setEntity(entity);\n-\n-\t\treturn post;\n-\t}\n-\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n+public class RTMessagesManagerBlImpl implements RTMessagesManagerBl {\n+    private String rtURL;\n+    private PerunBl perunBl;\n+    private final static org.slf4j.Logger log = LoggerFactory.getLogger(RTMessagesManagerBlImpl.class);\n+    private final String defaultQueue = \"perunv3\";\n+\n+    private Pattern ticketNumberPattern = Pattern.compile(\"^# Ticket ([0-9]+) created.\");\n+\n+    public RTMessagesManagerBlImpl(PerunBl perunBl) throws InternalErrorException {\n+        this();\n+        this.perunBl = perunBl;\n+        rtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n+    }\n+\n+    public RTMessagesManagerBlImpl() throws InternalErrorException {\n+        rtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n+    }\n+\n+    public RTMessage sendMessageToRT(PerunSession sess, int voId, String subject, String text) throws InternalErrorException {\n+        return sendMessageToRT(sess, voId, null, subject, text);\n+    }\n+\n+    @Deprecated\n+    public RTMessage sendMessageToRT(PerunSession sess, Member meber, String queue, String subject, String text) throws InternalErrorException {\n+        throw new InternalErrorException(\"This method is not supported now!\");\n+    }\n+\n+    public RTMessage sendMessageToRT(PerunSession sess, String queue, String subject, String text) throws InternalErrorException {\n+        return sendMessageToRT(sess, 0, queue, subject, text);\n+    }\n+\n+    public RTMessage sendMessageToRT(PerunSession sess, int voId, String queue, String subject, String text) throws InternalErrorException {\n+        log.debug(\"Parameters of rtMessage are queue='\" + queue + \"', subject='{}' and text='{}'\", subject, text);\n+\n+        //Get Email from User who get from session\n+        String email = null;\n+        User user = sess.getPerunPrincipal().getUser();\n+\n+        //try to get user/member email from user in session\n+        if (user != null) {\n+            email = findUserPreferredEmail(sess, user);\n+        } else {\n+            email = null;\n+            log.error(\"Can't get user from session.\");\n+        }\n+\n+        //try to get email from additionalInformations in session (attribute mail)\n+        if (email == null) {\n+            Matcher emailMatcher;\n+            Map<String, String> additionalInfo = sess.getPerunPrincipal().getAdditionalInformations();\n+            //If there are some data in additionalInfo\n+            if (additionalInfo != null) {\n+                String mailInfo = additionalInfo.get(\"mail\");\n+                //If there is notnull attribute \"mail\" in map\n+                if (mailInfo != null) {\n+                    //If attribute mail has separator ',' or ';'\n+                    if (mailInfo.contains(\";\")) {\n+                        String[] mailsFromInfo = mailInfo.split(\";\");\n+                        for (String mail : mailsFromInfo) {\n+                            emailMatcher = Utils.emailPattern.matcher(mail);\n+                            if (emailMatcher.matches()) {\n+                                email = mail;\n+                                break;\n+                            }\n+                        }\n+                    } else if (mailInfo.contains(\",\")) {\n+                        String[] mailsFromInfo = mailInfo.split(\",\");\n+                        for (String mail : mailsFromInfo) {\n+                            emailMatcher = Utils.emailPattern.matcher(mail);\n+                            if (emailMatcher.matches()) {\n+                                email = mail;\n+                                break;\n+                            }\n+                        }\n+                    } else {\n+                        //If there is no separator, test if this has format of email, if yes, save it to email\n+                        emailMatcher = Utils.emailPattern.matcher(mailInfo);\n+                        if (emailMatcher.matches()) {\n+                            email = mailInfo;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        //Prepare sending message\n+        HttpResponse response;\n+        HttpClient httpClient = new DefaultHttpClient();\n+        httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.IGNORE_COOKIES);\n+\n+        StringBuilder responseMessage = new StringBuilder();\n+        String ticketNumber = \"0\";\n+        try {\n+            response = httpClient.execute(this.prepareDataAndGetHttpRequest(sess, voId, queue, email, subject, text));\n+            BufferedReader bw = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n+\n+            //Reading response from RT\n+            String line;\n+            while ((line = bw.readLine()) != null) {\n+                responseMessage.append(line);\n+                responseMessage.append('\\n');\n+                //Matcher for ticketNumber\n+                Matcher ticketNumberMatcher = this.ticketNumberPattern.matcher(line);\n+                if (ticketNumberMatcher.find()) {\n+                    ticketNumber = ticketNumberMatcher.group(1);\n+                }\n+            }\n+        } catch (IOException ex) {\n+            throw new InternalErrorException(\"IOException has been throw while executing http request.\", ex);\n+        }\n+\n+        //Return message if response is ok, or throw exception with bad response\n+        int ticketNum = Integer.valueOf(ticketNumber);\n+        if (ticketNum != 0) {\n+            RTMessage rtmessage = new RTMessage(email, ticketNum);\n+            log.debug(\"RT message was send successfully and the ticket has number: \" + ticketNum);\n+            return rtmessage;\n+        } else {\n+            throw new InternalErrorException(\"RT message was not send due to error with RT returned this message: \" + responseMessage.toString());\n+        }\n+    }\n+\n+    private String findUserPreferredEmail(PerunSession sess, User user) throws InternalErrorException {\n+        String email = null;\n+        Attribute userPreferredMail = null;\n+        try {\n+            userPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:preferredMail\");\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (AttributeNotExistsException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        if (userPreferredMail == null || userPreferredMail.getValue() == null) {\n+            try {\n+                userPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:mail\");\n+            } catch (WrongAttributeAssignmentException ex) {\n+                throw new InternalErrorException(ex);\n+            } catch (AttributeNotExistsException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+\n+        }\n+\n+        if (userPreferredMail != null && userPreferredMail.getValue() != null) {\n+            email = (String) userPreferredMail.getValue();\n+        }\n+        return email;\n+    }\n+\n+    private HttpUriRequest prepareDataAndGetHttpRequest(PerunSession sess, int voId, String queue, String requestor, String subject, String text) throws InternalErrorException {\n+        //Ticket from this part is already evidet like 'new'\n+        String id = \"ticket/new\";\n+        //If there is no requestor, it is uknown requestor\n+        if (requestor == null || requestor.isEmpty()) {\n+            requestor = \"unknown\";\n+        }\n+        //If queue is null, try to check if exist value in attribute rtVoQueue, if not, use default\n+        if (queue == null || queue.isEmpty()) {\n+            Vo vo = null;\n+            if (voId != 0) {\n+                try {\n+                    vo = perunBl.getVosManagerBl().getVoById(sess, voId);\n+                } catch (VoNotExistsException ex) {\n+                    throw new InternalErrorException(\"VoId with Id=\" + voId + \" not exists.\", ex);\n+                }\n+                Attribute voQueue = null;\n+                try {\n+                    voQueue = perunBl.getAttributesManagerBl().getAttribute(sess, vo, AttributesManager.NS_VO_ATTR_DEF + \":RTVoQueue\");\n+                } catch (AttributeNotExistsException ex) {\n+                    throw new InternalErrorException(\"Attribute RTVoQueue not exists.\", ex);\n+                } catch (WrongAttributeAssignmentException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+                if (voQueue.getValue() != null) {\n+                    queue = (String) voQueue.getValue();\n+                } else {\n+                    queue = defaultQueue;\n+                }\n+            } else {\n+                queue = defaultQueue;\n+            }\n+        }\n+        //If subject is null or empty, use Unspecified instead\n+        if (subject == null || subject.isEmpty()) {\n+            subject = \"(No subject)\";\n+        }\n+        //Text can be null so if it is, put empty string\n+        if (text == null) {\n+            text = \"\";\n+        }\n+\n+        //Prepare credentials\n+        String username = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.username\");\n+        String password = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.password\");\n+\n+        //Prepare content of message\n+        MultipartEntity entity = new MultipartEntity();\n+        try {\n+            entity.addPart(\"Content-Typ\", new StringBody(\"application/x-www-form-urlencoded\"));\n+            entity.addPart(\"charset\", new StringBody(\"utf-8\"));\n+            entity.addPart(\"Connection\", new StringBody(\"Close\"));\n+            StringBody content = new StringBody(\"id: \" + id + '\\n' +\n+                    \"Queue: \" + queue + '\\n' +\n+                    \"Requestor: \" + requestor + '\\n' +\n+                    \"Subject: \" + subject + '\\n' +\n+                    \"Text: \" + text,\n+                    Charset.forName(\"utf-8\"));\n+            entity.addPart(\"content\", content);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        //Test rtURL for null\n+        if (rtURL == null || rtURL.length() == 0) {\n+            throw new InternalErrorException(\"rtURL is not prepared and is null in the moment of posting.\");\n+        }\n+\n+        // prepare post request\n+        HttpPost post = new HttpPost(rtURL);\n+        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n+\n+        post.addHeader(BasicScheme.authenticate(credentials, \"utf-8\", false));\n+        post.setEntity(entity);\n+\n+        return post;\n+    }\n+\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n+\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n }\n",
            "diff_size": 236
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/504/RTMessagesManagerBlImpl.java\nindex 034d58887f8..98d30728256 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/504/RTMessagesManagerBlImpl.java\n@@ -4,9 +4,7 @@ import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.Map;\n-\n import org.slf4j.LoggerFactory;\n-\n import java.nio.charset.Charset;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -20,7 +18,6 @@ import org.apache.http.entity.mime.MultipartEntity;\n import org.apache.http.entity.mime.content.StringBody;\n import org.apache.http.impl.auth.BasicScheme;\n import org.apache.http.impl.client.DefaultHttpClient;\n-\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributesManager;\n import cz.metacentrum.perun.core.api.BeansUtils;\n@@ -43,228 +40,230 @@ import cz.metacentrum.perun.core.impl.Utils;\n  *\n  * @author Michal Stava <stavamichal@gmail.com>\n  */\n-public class RTMessagesManagerBlImpl implements RTMessagesManagerBl{\n-\tprivate String rtURL;\n-\tprivate PerunBl perunBl;\n-\tprivate final static org.slf4j.Logger log = LoggerFactory.getLogger(RTMessagesManagerBlImpl.class);\n-\tprivate final String defaultQueue = \"perunv3\";\n \n-\tprivate Pattern ticketNumberPattern = Pattern.compile(\"^# Ticket ([0-9]+) created.\");\n \n-\tpublic RTMessagesManagerBlImpl(PerunBl perunBl) throws InternalErrorException {\n-\t\tthis();\n-\t\tthis.perunBl = perunBl;\n-\t\trtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n-\t}\n+public class RTMessagesManagerBlImpl implements RTMessagesManagerBl {\n+\n+\n+ private String rtURL;\n+ private PerunBl perunBl;\n+ private final static org.slf4j.Logger log = LoggerFactory.getLogger(RTMessagesManagerBlImpl.class);\n+ private final String defaultQueue = \"perunv3\";\n+ private Pattern ticketNumberPattern = Pattern.compile(\"^# Ticket ([0-9]+) created.\");\n+\n \n-\tpublic RTMessagesManagerBlImpl() throws InternalErrorException {\n-\t\trtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n-\t}\n+ public RTMessagesManagerBlImpl(PerunBl perunBl) throws InternalErrorException {\n+  this();\n+  this.perunBl = perunBl;\n+  rtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n+ }\n \n-\tpublic RTMessage sendMessageToRT(PerunSession sess, int voId, String subject, String text) throws InternalErrorException {\n-\t\treturn sendMessageToRT(sess, voId, null, subject, text);\n-\t}\n+ public RTMessagesManagerBlImpl() throws InternalErrorException {\n+  rtURL = BeansUtils.getPropertyFromConfiguration(\"perun.rt.url\");\n+ }\n \n-\t@Deprecated\n-\tpublic RTMessage sendMessageToRT(PerunSession sess, Member meber, String queue, String subject, String text) throws InternalErrorException {\n-\t\tthrow new InternalErrorException(\"This method is not supported now!\");\n-\t}\n+ public RTMessage sendMessageToRT(PerunSession sess, int voId, String subject, String text) throws InternalErrorException {\n+  return sendMessageToRT(sess, voId, null, subject, text);\n+ }\n \n-\tpublic RTMessage sendMessageToRT(PerunSession sess, String queue, String subject, String text) throws InternalErrorException {\n-\t\treturn sendMessageToRT(sess, 0, queue, subject, text);\n-\t}\n+ @Deprecated\n+ public RTMessage sendMessageToRT(PerunSession sess, Member meber, String queue, String subject, String text) throws InternalErrorException {\n+  throw new InternalErrorException(\"This method is not supported now!\");\n+ }\n \n-\tpublic RTMessage sendMessageToRT(PerunSession sess, int voId, String queue, String subject, String text) throws InternalErrorException {\n-\t\tlog.debug(\"Parameters of rtMessage are queue='\" + queue +\"', subject='{}' and text='{}'\", subject, text);\n+ public RTMessage sendMessageToRT(PerunSession sess, String queue, String subject, String text) throws InternalErrorException {\n+  return sendMessageToRT(sess, 0, queue, subject, text);\n+ }\n \n-\t\t//Get Email from User who get from session\n-\t\tString email = null;\n-\t\tUser user = sess.getPerunPrincipal().getUser();\n-\t\t\n-\t\t//try to get user/member email from user in session\n-\t\tif(user != null) email = findUserPreferredEmail(sess, user);\n-\t\telse {\n-\t\t\temail = null;\n-\t\t\tlog.error(\"Can't get user from session.\");\n-\t\t}\n+ public RTMessage sendMessageToRT(PerunSession sess, int voId, String queue, String subject, String text) throws InternalErrorException {\n+  log.debug(\"Parameters of rtMessage are queue='\" + queue + \"', subject='{}' and text='{}'\", subject, text);\n \n-\t\t//try to get email from additionalInformations in session (attribute mail)\n-\t\tif(email == null) {\n-\t\t\tMatcher emailMatcher;\n-\t\t\tMap<String,String> additionalInfo = sess.getPerunPrincipal().getAdditionalInformations();\n-\t\t\t//If there are some data in additionalInfo\n-\t\t\tif(additionalInfo != null) {\n-\t\t\t\tString mailInfo = additionalInfo.get(\"mail\");\n-\t\t\t\t//If there is notnull attribute \"mail\" in map\n-\t\t\t\tif(mailInfo != null) {\n-\t\t\t\t\t//If attribute mail has separator ',' or ';'\n-\t\t\t\t\tif(mailInfo.contains(\";\")) {\n-\t\t\t\t\t\tString[] mailsFromInfo = mailInfo.split(\";\");\n-\t\t\t\t\t\tfor(String mail: mailsFromInfo) {\n-\t\t\t\t\t\t\temailMatcher = Utils.emailPattern.matcher(mail);\n-\t\t\t\t\t\t\tif(emailMatcher.matches()) {\n-\t\t\t\t\t\t\t\temail = mail;\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(mailInfo.contains(\",\")) {\n-\t\t\t\t\t\tString[] mailsFromInfo = mailInfo.split(\",\");\n-\t\t\t\t\t\tfor(String mail: mailsFromInfo) {\n-\t\t\t\t\t\t\temailMatcher = Utils.emailPattern.matcher(mail);\n-\t\t\t\t\t\t\tif(emailMatcher.matches()) {\n-\t\t\t\t\t\t\t\temail = mail;\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t//If there is no separator, test if this has format of email, if yes, save it to email\n-\t\t\t\t\t\temailMatcher = Utils.emailPattern.matcher(mailInfo);\n-\t\t\t\t\t\tif(emailMatcher.matches()) {\n-\t\t\t\t\t\t\temail = mailInfo;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+  //Get Email from User who get from session\n+  String email = null;\n+  User user = sess.getPerunPrincipal().getUser();\n+  \n+  //try to get user/member email from user in session\n+  if (user != null) email = findUserPreferredEmail(sess, user);\n+  else {\n+   email = null;\n+   log.error(\"Can't get user from session.\");\n+  }\n \n-\t\t//Prepare sending message\n-\t\tHttpResponse response;\n-\t\tHttpClient httpClient = new DefaultHttpClient();\n-\t\thttpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.IGNORE_COOKIES);\n+  //try to get email from additionalInformations in session (attribute mail)\n+  if (email == null) {\n+   Matcher emailMatcher;\n+   Map<String, String> additionalInfo = sess.getPerunPrincipal().getAdditionalInformations();\n+   //If there are some data in additionalInfo\n+   if (additionalInfo != null) {\n+    String mailInfo = additionalInfo.get(\"mail\");\n+    //If there is notnull attribute \"mail\" in map\n+    if (mailInfo != null) {\n+     //If attribute mail has separator ',' or ';'\n+     if (mailInfo.contains(\";\")) {\n+      String[] mailsFromInfo = mailInfo.split(\";\");\n+      for (String mail : mailsFromInfo) {\n+       emailMatcher = Utils.emailPattern.matcher(mail);\n+       if (emailMatcher.matches()) {\n+        email = mail;\n+        break;\n+       }\n+      }\n+     } else if (mailInfo.contains(\",\")) {\n+      String[] mailsFromInfo = mailInfo.split(\",\");\n+      for (String mail : mailsFromInfo) {\n+       emailMatcher = Utils.emailPattern.matcher(mail);\n+       if (emailMatcher.matches()) {\n+        email = mail;\n+        break;\n+       }\n+      }\n+     } else {\n+      //If there is no separator, test if this has format of email, if yes, save it to email\n+      emailMatcher = Utils.emailPattern.matcher(mailInfo);\n+      if (emailMatcher.matches()) {\n+       email = mailInfo;\n+      }\n+     }\n+    }\n+   }\n+  }\n \n-\t\tStringBuilder responseMessage = new StringBuilder();\n-\t\tString ticketNumber = \"0\";\n-\t\ttry {\n-\t\t\tresponse = httpClient.execute(this.prepareDataAndGetHttpRequest(sess, voId, queue, email, subject, text));\n-\t\t\tBufferedReader bw = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n+  //Prepare sending message\n+  HttpResponse response;\n+  HttpClient httpClient = new DefaultHttpClient();\n+  httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.IGNORE_COOKIES);\n+  StringBuilder responseMessage = new StringBuilder();\n+  String ticketNumber = \"0\";\n+  try {\n+   response = httpClient.execute(this.prepareDataAndGetHttpRequest(sess, voId, queue, email, subject, text));\n+   BufferedReader bw = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n \n-\t\t\t//Reading response from RT\n-\t\t\tString line;\n-\t\t\twhile((line = bw.readLine()) != null) {\n-\t\t\t\tresponseMessage.append(line);\n-\t\t\t\tresponseMessage.append('\\n');\n-\t\t\t\t//Matcher for ticketNumber\n-\t\t\t\tMatcher ticketNumberMatcher = this.ticketNumberPattern.matcher(line);\n-\t\t\t\tif(ticketNumberMatcher.find()) {\n-\t\t\t\t\tticketNumber = ticketNumberMatcher.group(1);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (IOException ex) {\n-\t\t\tthrow new InternalErrorException(\"IOException has been throw while executing http request.\", ex);\n-\t\t}\n+   //Reading response from RT\n+   String line;\n+   while ((line = bw.readLine()) != null) {\n+    responseMessage.append(line);\n+    responseMessage.append('\\n');\n+    //Matcher for ticketNumber\n+    Matcher ticketNumberMatcher = this.ticketNumberPattern.matcher(line);\n+    if (ticketNumberMatcher.find()) {\n+     ticketNumber = ticketNumberMatcher.group(1);\n+    }\n+   }\n+  } catch (IOException ex) {\n+   throw new InternalErrorException(\"IOException has been throw while executing http request.\", ex);\n+  }\n \n-\t\t//Return message if response is ok, or throw exception with bad response\n-\t\tint ticketNum = Integer.valueOf(ticketNumber);\n-\t\tif(ticketNum != 0) {\n-\t\t\tRTMessage rtmessage = new RTMessage(email, ticketNum);\n-\t\t\tlog.debug(\"RT message was send successfully and the ticket has number: \" + ticketNum);\n-\t\t\treturn rtmessage;\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"RT message was not send due to error with RT returned this message: \" + responseMessage.toString());\n-\t\t}\n-\t}\n+  //Return message if response is ok, or throw exception with bad response\n \n-\tprivate String findUserPreferredEmail(PerunSession sess, User user) throws InternalErrorException {\n-\t\tString email = null;\n-\t\tAttribute userPreferredMail = null;\n-\t\ttry {\n-\t\t\tuserPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:preferredMail\");\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n+  int ticketNum = Integer.valueOf(ticketNumber);\n+  if (ticketNum != 0) {\n+   RTMessage rtmessage = new RTMessage(email, ticketNum);\n+   log.debug(\"RT message was send successfully and the ticket has number: \" + ticketNum);\n+   return rtmessage;\n+  } else {\n+   throw new InternalErrorException(\"RT message was not send due to error with RT returned this message: \" + responseMessage.toString());\n+  }\n+ }\n \n-\t\tif(userPreferredMail == null || userPreferredMail.getValue() == null) {\n-\t\t\ttry {\n-\t\t\t\tuserPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:mail\");\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n \n-\t\t}\n+ private String findUserPreferredEmail(PerunSession sess, User user) throws InternalErrorException {\n+  String email = null;\n+  Attribute userPreferredMail = null;\n+  try {\n+   userPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:preferredMail\");\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  } catch (AttributeNotExistsException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+  if (userPreferredMail == null || userPreferredMail.getValue() == null) {\n+   try {\n+    userPreferredMail = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, \"urn:perun:user:attribute-def:def:mail\");\n+   } catch (WrongAttributeAssignmentException ex) {\n+    throw new InternalErrorException(ex);\n+   } catch (AttributeNotExistsException ex) {\n+    throw new ConsistencyErrorException(ex);\n+   }\n+  }\n+  if (userPreferredMail != null && userPreferredMail.getValue() != null) {\n+   email = (String) userPreferredMail.getValue();\n+  }\n \n-\t\tif(userPreferredMail != null && userPreferredMail.getValue() != null) {\n-\t\t\temail = (String) userPreferredMail.getValue();\n-\t\t}\n-\t\treturn email;\n-\t}\n+  return email;\n+ }\n \n-\tprivate HttpUriRequest prepareDataAndGetHttpRequest(PerunSession sess, int voId, String queue, String requestor, String subject, String text) throws InternalErrorException {\n-\t\t//Ticket from this part is already evidet like 'new'\n-\t\tString id = \"ticket/new\";\n-\t\t//If there is no requestor, it is uknown requestor\n-\t\tif(requestor == null || requestor.isEmpty()) {\n-\t\t\trequestor = \"unknown\";\n-\t\t}\n-\t\t//If queue is null, try to check if exist value in attribute rtVoQueue, if not, use default\n-\t\tif(queue == null || queue.isEmpty()) {\n-\t\t\tVo vo = null;\n-\t\t\tif(voId != 0) {\n-\t\t\t\ttry {\n-\t\t\t\t\tvo = perunBl.getVosManagerBl().getVoById(sess, voId);\n-\t\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"VoId with Id=\" + voId + \" not exists.\", ex);\n-\t\t\t\t}\n-\t\t\t\tAttribute voQueue = null;\n-\t\t\t\ttry {\n-\t\t\t\t\tvoQueue = perunBl.getAttributesManagerBl().getAttribute(sess, vo, AttributesManager.NS_VO_ATTR_DEF + \":RTVoQueue\");\n-\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Attribute RTVoQueue not exists.\", ex);\n-\t\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tif(voQueue.getValue() != null) {\n-\t\t\t\t\tqueue = (String) voQueue.getValue();\n-\t\t\t\t} else queue = defaultQueue;\n-\t\t\t} else queue = defaultQueue;\n-\t\t}\n-\t\t//If subject is null or empty, use Unspecified instead\n-\t\tif(subject == null || subject.isEmpty()) subject = \"(No subject)\";\n-\t\t//Text can be null so if it is, put empty string\n-\t\tif(text == null) text = \"\";\n \n-\t\t//Prepare credentials\n-\t\tString username = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.username\");\n-\t\tString password = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.password\");\n+ private HttpUriRequest prepareDataAndGetHttpRequest(PerunSession sess,\n+                                                     int voId,\n+                                                     String queue,\n+                                                     String requestor,\n+                                                     String subject, String text) throws InternalErrorException {\n+  //Ticket from this part is already evidet like 'new'\n+  String id = \"ticket/new\";\n+  //If there is no requestor, it is uknown requestor\n+  if (requestor == null || requestor.isEmpty()) {\n+   requestor = \"unknown\";\n+  }\n+  //If queue is null, try to check if exist value in attribute rtVoQueue, if not, use default\n+  if (queue == null || queue.isEmpty()) {\n+   Vo vo = null;\n+   if (voId != 0) {\n+    try {\n+     vo = perunBl.getVosManagerBl().getVoById(sess, voId);\n+    } catch (VoNotExistsException ex) {\n+     throw new InternalErrorException(\"VoId with Id=\" + voId + \" not exists.\", ex);\n+    }\n+    Attribute voQueue = null;\n+    try {\n+     voQueue = perunBl.getAttributesManagerBl().getAttribute(sess, vo, AttributesManager.NS_VO_ATTR_DEF + \":RTVoQueue\");\n+    } catch (AttributeNotExistsException ex) {\n+     throw new InternalErrorException(\"Attribute RTVoQueue not exists.\", ex);\n+    } catch (WrongAttributeAssignmentException ex) {\n+     throw new InternalErrorException(ex);\n+    }\n+    if (voQueue.getValue() != null) {\n+     queue = (String) voQueue.getValue();\n+    } else queue = defaultQueue;\n+   } else queue = defaultQueue;\n+  }\n+  //If subject is null or empty, use Unspecified instead\n+  if (subject == null || subject.isEmpty()) subject = \"(No subject)\";\n+  //Text can be null so if it is, put empty string\n+  if (text == null) text = \"\";\n \n-\t\t//Prepare content of message\n-\t\tMultipartEntity entity = new MultipartEntity();\n-\t\ttry {\n-\t\t\tentity.addPart(\"Content-Typ\", new StringBody(\"application/x-www-form-urlencoded\"));\n-\t\t\tentity.addPart(\"charset\", new StringBody(\"utf-8\"));\n-\t\t\tentity.addPart(\"Connection\", new StringBody(\"Close\"));\n-\t\t\tStringBody content = new StringBody(\"id: \" + id + '\\n' +\n-\t\t\t\t\t\"Queue: \" + queue + '\\n' +\n-\t\t\t\t\t\"Requestor: \" + requestor + '\\n' +\n-\t\t\t\t\t\"Subject: \" + subject + '\\n' +\n-\t\t\t\t\t\"Text: \" + text,\n-\t\t\t\t\tCharset.forName(\"utf-8\"));\n-\t\t\tentity.addPart(\"content\", content);\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n+  //Prepare credentials\n+  String username = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.username\");\n+  String password = BeansUtils.getPropertyFromConfiguration(\"perun.rt.serviceuser.password\");\n \n-\t\t//Test rtURL for null\n-\t\tif(rtURL == null || rtURL.length() == 0) throw new InternalErrorException(\"rtURL is not prepared and is null in the moment of posting.\");\n+  //Prepare content of message\n+  MultipartEntity entity = new MultipartEntity();\n+  try {\n+   entity.addPart(\"Content-Typ\", new StringBody(\"application/x-www-form-urlencoded\"));\n+   entity.addPart(\"charset\", new StringBody(\"utf-8\"));\n+   entity.addPart(\"Connection\", new StringBody(\"Close\"));\n+   StringBody content = new StringBody(\"id: \" + id + '\\n' + \"Queue: \" + queue + '\\n' + \"Requestor: \" + requestor + '\\n' + \"Subject: \" + subject + '\\n' + \"Text: \" + text, Charset.forName(\"utf-8\"));\n+   entity.addPart(\"content\", content);\n+  } catch (Exception e) {\n+   throw new RuntimeException(e);\n+  }\n \n-\t\t// prepare post request\n-\t\tHttpPost post = new HttpPost(rtURL);\n-\t\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n+  //Test rtURL for null\n+  if (rtURL == null || rtURL.length() == 0) throw new InternalErrorException(\"rtURL is not prepared and is null in the moment of posting.\");\n \n-\t\tpost.addHeader(BasicScheme.authenticate(credentials, \"utf-8\", false));\n-\t\tpost.setEntity(entity);\n+  // prepare post request\n+  HttpPost post = new HttpPost(rtURL);\n+  UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n+  post.addHeader(BasicScheme.authenticate(credentials, \"utf-8\", false));\n+  post.setEntity(entity);\n+  return post;\n+ }\n \n-\t\treturn post;\n-\t}\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n \n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n \n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 318
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/504/RTMessagesManagerBlImpl.java\nindex 034d58887f8..21be1c75859 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/504/RTMessagesManagerBlImpl.java\n@@ -80,7 +80,7 @@ public class RTMessagesManagerBlImpl implements RTMessagesManagerBl{\n \t\t//Get Email from User who get from session\n \t\tString email = null;\n \t\tUser user = sess.getPerunPrincipal().getUser();\n-\t\t\n+\n \t\t//try to get user/member email from user in session\n \t\tif(user != null) email = findUserPreferredEmail(sess, user);\n \t\telse {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/504/RTMessagesManagerBlImpl.java\nindex 034d58887f8..3d216643b62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/504/RTMessagesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/504/RTMessagesManagerBlImpl.java\n@@ -79,9 +79,9 @@ public class RTMessagesManagerBlImpl implements RTMessagesManagerBl{\n \n \t\t//Get Email from User who get from session\n \t\tString email = null;\n-\t\tUser user = sess.getPerunPrincipal().getUser();\n-\t\t\n-\t\t//try to get user/member email from user in session\n+\t\tUser user = sess.getPerunPrincipal().getUser()\n+\n+\t\t;//try to get user/member email from user in session\n \t\tif(user != null) email = findUserPreferredEmail(sess, user);\n \t\telse {\n \t\t\temail = null;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}